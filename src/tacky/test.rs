use crate::pretty::{dedent, dump_tacky};

#[test]
fn test_chapter_1_valid_multi_digit() {
    let src = r#"
        int main(void) {
            return 100;
        }
    "#;
    let expected = r#"
        global function main() { 
            return 100
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_1_valid_newlines() {
    let src = r#"
        int
        main
        (
        void
        )
        {
        return
        0
        ;
        }
    "#;
    let expected = r#"
        global function main() { 
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_1_valid_no_newlines() {
    let src = r#"
        int main(void){return 0;}
    "#;
    let expected = r#"
        global function main() { 
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_1_valid_return_0() {
    let src = r#"
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_1_valid_return_2() {
    let src = r#"
        int main(void) {
            return 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            return 2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_1_valid_spaces() {
    let src = r#"
           int main ( void) { return 0 ; }
    "#;
    let expected = r#"
        global function main() { 
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_1_valid_tabs() {
    let src = r#"
        int main ( void) { return 0 ; }
    "#;
    let expected = r#"
        global function main() { 
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_bitwise() {
    let src = r#"
        int main(void) {
            return ~12;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = ~ 12
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_bitwise_int_min() {
    let src = r#"
        int main(void) {
            return ~-2147483647;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 2147483647
            tmp.1 = ~ tmp.0
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_bitwise_zero() {
    let src = r#"
        int main(void) {
            return ~0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = ~ 0
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_neg() {
    let src = r#"
        int main(void) {
            return -5;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 5
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_neg_zero() {
    let src = r#"
        int main(void) {
            return -0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 0
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_negate_int_max() {
    let src = r#"
        int main(void) {
            return -2147483647;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 2147483647
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_nested_ops() {
    let src = r#"
        int main(void) {
            return ~-3;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 3
            tmp.1 = ~ tmp.0
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_nested_ops_2() {
    let src = r#"
        int main(void) {
            return -~0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = ~ 0
            tmp.1 = - tmp.0
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_parens() {
    let src = r#"
        int main(void) {
            return (-2);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 2
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_parens_2() {
    let src = r#"
        int main(void) {
            return ~(2);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = ~ 2
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_parens_3() {
    let src = r#"
        int main(void) {
            return -(-4);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 4
            tmp.1 = - tmp.0
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_redundant_parens() {
    let src = r#"
        int main(void)
        {
            return -((((10))));
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 10
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_add() {
    let src = r#"
        int main(void) {
            return 1 + 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 + 2
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_associativity() {
    let src = r#"
        int main(void) {
            return 1 - 2 - 3;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 - 2
            tmp.1 = tmp.0 - 3
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_associativity_2() {
    let src = r#"
        int main(void) {
            return 6 / 3 / 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 6 / 3
            tmp.1 = tmp.0 / 2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_associativity_3() {
    let src = r#"
        int main(void) {
            return (3 / 2 * 4) + (5 - 4 + 3);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 3 / 2
            tmp.1 = tmp.0 * 4
            tmp.3 = 5 - 4
            tmp.4 = tmp.3 + 3
            tmp.2 = tmp.1 + tmp.4
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_associativity_and_precedence() {
    let src = r#"
        int main(void) {
            return 5 * 4 / 2 -
                3 % (2 + 1);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 5 * 4
            tmp.1 = tmp.0 / 2
            tmp.4 = 2 + 1
            tmp.3 = 3 % tmp.4
            tmp.2 = tmp.1 - tmp.3
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_div() {
    let src = r#"
        int main(void) {
            return 4 / 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 4 / 2
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_div_neg() {
    let src = r#"
        int main(void) {
            return (-12) / 5;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 12
            tmp.1 = tmp.0 / 5
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_and() {
    let src = r#"
        int main(void) {
            return 3 & 5;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 3 & 5
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_or() {
    let src = r#"
        int main(void) {
            return 1 | 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 | 2
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_precedence() {
    let src = r#"
        int main(void) {
            return 80 >> 2 | 1 ^ 5 & 7 << 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 80 >> 2
            tmp.4 = 7 << 1
            tmp.3 = 5 & tmp.4
            tmp.2 = 1 ^ tmp.3
            tmp.1 = tmp.0 | tmp.2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_shift_associativity() {
    let src = r#"
        int main(void) {
            return 33 << 4 >> 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 33 << 4
            tmp.1 = tmp.0 >> 2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_shift_associativity_2() {
    let src = r#"
        int main(void) {
            return 33 >> 2 << 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 33 >> 2
            tmp.1 = tmp.0 << 1
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_shift_precedence() {
    let src = r#"
        int main(void) {
            return 40 << 4 + 12 >> 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.1 = 4 + 12
            tmp.0 = 40 << tmp.1
            tmp.2 = tmp.0 >> 1
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_shiftl() {
    let src = r#"
        int main(void) {
            return 35 << 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 35 << 2
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_shiftr() {
    let src = r#"
        int main(void) {
            return 1000 >> 4;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1000 >> 4
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_shiftr_negative() {
    let src = r#"
        int main(void) {
            return -5 >> 30;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 5
            tmp.1 = tmp.0 >> 30
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_variable_shift_count() {
    let src = r#"
        int main(void) {
            return (4 << (2 * 2)) + (100 >> (1 + 2));
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.1 = 2 * 2
            tmp.0 = 4 << tmp.1
            tmp.4 = 1 + 2
            tmp.3 = 100 >> tmp.4
            tmp.2 = tmp.0 + tmp.3
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_xor() {
    let src = r#"
        int main(void) {
            return 7 ^ 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 7 ^ 1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_mod() {
    let src = r#"
        int main(void) {
            return 4 % 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 4 % 2
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_mult() {
    let src = r#"
        int main(void) {
            return 2 * 3;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 2 * 3
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_parens() {
    let src = r#"
        int main(void) {
            return 2 * (3 + 4);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.1 = 3 + 4
            tmp.0 = 2 * tmp.1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_precedence() {
    let src = r#"
        int main(void) {
            return 2 + 3 * 4;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.1 = 3 * 4
            tmp.0 = 2 + tmp.1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_sub() {
    let src = r#"
        int main(void) {
            return 1 - 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 - 2
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_sub_neg() {
    let src = r#"
        int main(void) {
            return 2- -1;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.1 = - 1
            tmp.0 = 2 - tmp.1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_unop_add() {
    let src = r#"
        int main(void) {
            return ~2 + 3;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = ~ 2
            tmp.1 = tmp.0 + 3
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_unop_parens() {
    let src = r#"
        int main(void) {
            return ~(1 + 1);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 + 1
            tmp.1 = ~ tmp.0
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_and_false() {
    let src = r#"
        int main(void) {
            return (10 && 0) + (0 && 4) + (0 && 0);
        }
    "#;
    let expected = r#"
        global function main() { 
            if !10 jump and_false_0
            if !0 jump and_false_0
            tmp.1 = 1
            jump and_end_1
        
          and_false_0:
            tmp.1 = 0
        
          and_end_1:
            if !0 jump and_false_2
            if !4 jump and_false_2
            tmp.4 = 1
            jump and_end_3
        
          and_false_2:
            tmp.4 = 0
        
          and_end_3:
            tmp.2 = tmp.1 + tmp.4
            if !0 jump and_false_4
            if !0 jump and_false_4
            tmp.7 = 1
            jump and_end_5
        
          and_false_4:
            tmp.7 = 0
        
          and_end_5:
            tmp.5 = tmp.2 + tmp.7
            return tmp.5
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_and_short_circuit() {
    let src = r#"
        int main(void) {
            return 0 && (1 / 0);
        }
    "#;
    let expected = r#"
        global function main() { 
            if !0 jump and_false_0
            tmp.2 = 1 / 0
            if !tmp.2 jump and_false_0
            tmp.1 = 1
            jump and_end_1
        
          and_false_0:
            tmp.1 = 0
        
          and_end_1:
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_and_true() {
    let src = r#"
        int main(void) {
            return 1 && -1;
        }
    "#;
    let expected = r#"
        global function main() { 
            if !1 jump and_false_0
            tmp.2 = - 1
            if !tmp.2 jump and_false_0
            tmp.1 = 1
            jump and_end_1
        
          and_false_0:
            tmp.1 = 0
        
          and_end_1:
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_associativity() {
    let src = r#"
        int main(void) {
            return 5 >= 0 > 1 <= 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 5 >= 0
            tmp.1 = tmp.0 > 1
            tmp.2 = tmp.1 <= 0
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_compare_arithmetic_results() {
    let src = r#"
        int main(void) {
            return ~2 * -2 == 1 + 5;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = ~ 2
            tmp.2 = - 2
            tmp.1 = tmp.0 * tmp.2
            tmp.4 = 1 + 5
            tmp.3 = tmp.1 == tmp.4
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_eq_false() {
    let src = r#"
        int main(void) {
            return 1 == 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 == 2
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_eq_precedence() {
    let src = r#"
        int main(void) {
            return 3 == 1 != 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 3 == 1
            tmp.1 = tmp.0 != 2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_eq_true() {
    let src = r#"
        int main(void) {
            return 1 == 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 == 1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_extra_credit_bitwise_and_precedence() {
    let src = r#"
        int main(void) {
            return 5 & 7 == 5;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.1 = 7 == 5
            tmp.0 = 5 & tmp.1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_extra_credit_bitwise_or_precedence() {
    let src = r#"
        int main(void) {
            return 5 | 7 != 5;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.1 = 7 != 5
            tmp.0 = 5 | tmp.1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_extra_credit_bitwise_shift_precedence() {
    let src = r#"
        int main(void) {
            return 20 >> 4 <= 3 << 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 20 >> 4
            tmp.2 = 3 << 1
            tmp.1 = tmp.0 <= tmp.2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_extra_credit_bitwise_xor_precedence() {
    let src = r#"
        int main(void) {
            return 5 ^ 7 < 5;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.1 = 7 < 5
            tmp.0 = 5 ^ tmp.1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_ge_false() {
    let src = r#"
        int main(void) {
            return 1 >= 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 >= 2
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_ge_true() {
    let src = r#"
        int main(void) {
            return (1 >= 1) + (1 >= -4);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 >= 1
            tmp.3 = - 4
            tmp.2 = 1 >= tmp.3
            tmp.1 = tmp.0 + tmp.2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_gt_false() {
    let src = r#"
        int main(void) {
            return (1 > 2) + (1 > 1);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 > 2
            tmp.2 = 1 > 1
            tmp.1 = tmp.0 + tmp.2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_gt_true() {
    let src = r#"
        int main(void) {
            return 15 > 10;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 15 > 10
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_le_false() {
    let src = r#"
        int main(void) {
            return 1 <= -1;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.1 = - 1
            tmp.0 = 1 <= tmp.1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_le_true() {
    let src = r#"
        int main(void) {
            return (0 <= 2) + (0 <= 0);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 0 <= 2
            tmp.2 = 0 <= 0
            tmp.1 = tmp.0 + tmp.2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_lt_false() {
    let src = r#"
        int main(void) {
            return 2 < 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 2 < 1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_lt_true() {
    let src = r#"
        int main(void) {
            return 1 < 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 < 2
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_multi_short_circuit() {
    let src = r#"
        int main(void) {
            return 0 || 0 && (1 / 0);
        }
    "#;
    let expected = r#"
        global function main() { 
            if 0 jump or_true_0
            if !0 jump and_false_2
            tmp.4 = 1 / 0
            if !tmp.4 jump and_false_2
            tmp.3 = 1
            jump and_end_3
        
          and_false_2:
            tmp.3 = 0
        
          and_end_3:
            if tmp.3 jump or_true_0
            tmp.1 = 0
            jump or_end_1
        
          or_true_0:
            tmp.1 = 1
        
          or_end_1:
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_ne_false() {
    let src = r#"
        int main(void) {
            return 0 != 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 0 != 0
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_ne_true() {
    let src = r#"
        int main(void) {
            return -1 != -2;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1
            tmp.2 = - 2
            tmp.1 = tmp.0 != tmp.2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_nested_ops() {
    let src = r#"
        int main(void) {
            return !-3;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 3
            tmp.1 = ! tmp.0
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_not() {
    let src = r#"
        int main(void) {
            return !5;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = ! 5
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_not_sum() {
    let src = r#"
        int main(void) {
            return !(4-4);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 4 - 4
            tmp.1 = ! tmp.0
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_not_sum_2() {
    let src = r#"
        int main(void) {
            return !(3 - 44);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 3 - 44
            tmp.1 = ! tmp.0
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_not_zero() {
    let src = r#"
        int main(void) {
            return !0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = ! 0
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_operate_on_booleans() {
    let src = r#"
        int main(void) {
            return ~(0 && 1) - -(4 || 3);
        }
    "#;
    let expected = r#"
        global function main() { 
            if !0 jump and_false_0
            if !1 jump and_false_0
            tmp.1 = 1
            jump and_end_1
        
          and_false_0:
            tmp.1 = 0
        
          and_end_1:
            tmp.2 = ~ tmp.1
            if 4 jump or_true_2
            if 3 jump or_true_2
            tmp.5 = 0
            jump or_end_3
        
          or_true_2:
            tmp.5 = 1
        
          or_end_3:
            tmp.6 = - tmp.5
            tmp.3 = tmp.2 - tmp.6
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_or_false() {
    let src = r#"
        int main(void) {
            return 0 || 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            if 0 jump or_true_0
            if 0 jump or_true_0
            tmp.1 = 0
            jump or_end_1
        
          or_true_0:
            tmp.1 = 1
        
          or_end_1:
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_or_short_circuit() {
    let src = r#"
        int main(void) {
            return 1 || (1 / 0);
        }
    "#;
    let expected = r#"
        global function main() { 
            if 1 jump or_true_0
            tmp.2 = 1 / 0
            if tmp.2 jump or_true_0
            tmp.1 = 0
            jump or_end_1
        
          or_true_0:
            tmp.1 = 1
        
          or_end_1:
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_or_true() {
    let src = r#"
        int main(void) {
            return (4 || 0) + (0 || 3) + (5 || 5);
        }
    "#;
    let expected = r#"
        global function main() { 
            if 4 jump or_true_0
            if 0 jump or_true_0
            tmp.1 = 0
            jump or_end_1
        
          or_true_0:
            tmp.1 = 1
        
          or_end_1:
            if 0 jump or_true_2
            if 3 jump or_true_2
            tmp.4 = 0
            jump or_end_3
        
          or_true_2:
            tmp.4 = 1
        
          or_end_3:
            tmp.2 = tmp.1 + tmp.4
            if 5 jump or_true_4
            if 5 jump or_true_4
            tmp.7 = 0
            jump or_end_5
        
          or_true_4:
            tmp.7 = 1
        
          or_end_5:
            tmp.5 = tmp.2 + tmp.7
            return tmp.5
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_precedence() {
    let src = r#"
        int main(void) {
            return 1 || 0 && 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            if 1 jump or_true_0
            if !0 jump and_false_2
            if !2 jump and_false_2
            tmp.3 = 1
            jump and_end_3
        
          and_false_2:
            tmp.3 = 0
        
          and_end_3:
            if tmp.3 jump or_true_0
            tmp.1 = 0
            jump or_end_1
        
          or_true_0:
            tmp.1 = 1
        
          or_end_1:
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_precedence_2() {
    let src = r#"
        int main(void) {
            return (1 || 0) && 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            if 1 jump or_true_0
            if 0 jump or_true_0
            tmp.1 = 0
            jump or_end_1
        
          or_true_0:
            tmp.1 = 1
        
          or_end_1:
            if !tmp.1 jump and_false_2
            if !0 jump and_false_2
            tmp.3 = 1
            jump and_end_3
        
          and_false_2:
            tmp.3 = 0
        
          and_end_3:
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_precedence_3() {
    let src = r#"
        int main(void) {
            return 2 == 2 >= 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.1 = 2 >= 0
            tmp.0 = 2 == tmp.1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_precedence_4() {
    let src = r#"
        int main(void) {
            return 2 == 2 || 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 2 == 2
            if tmp.0 jump or_true_0
            if 0 jump or_true_0
            tmp.2 = 0
            jump or_end_1
        
          or_true_0:
            tmp.2 = 1
        
          or_end_1:
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_precedence_5() {
    let src = r#"
        int main(void) {
            return (0 == 0 && 3 == 2 + 1 > 1) + 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 0 == 0
            if !tmp.0 jump and_false_0
            tmp.4 = 2 + 1
            tmp.5 = tmp.4 > 1
            tmp.3 = 3 == tmp.5
            if !tmp.3 jump and_false_0
            tmp.2 = 1
            jump and_end_1
        
          and_false_0:
            tmp.2 = 0
        
          and_end_1:
            tmp.6 = tmp.2 + 1
            return tmp.6
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_add_variables() {
    let src = r#"
        int main(void) {
            int first_variable = 1;
            int second_variable = 2;
            return first_variable + second_variable;
        }
    "#;
    let expected = r#"
        global function main() { 
            first_variable.0 = 1
            second_variable.1 = 2
            tmp.0 = first_variable.0 + second_variable.1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_allocate_temps_and_vars() {
    let src = r#"
        int main(void) {
            int a = 2147483646;
            int b = 0;
            int c = a / 6 + !b;
            return c * 2 == a - 1431655762;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 2147483646
            b.1 = 0
            tmp.0 = a.0 / 6
            tmp.2 = ! b.1
            tmp.1 = tmp.0 + tmp.2
            c.2 = tmp.1
            tmp.3 = c.2 * 2
            tmp.5 = a.0 - 1431655762
            tmp.4 = tmp.3 == tmp.5
            return tmp.4
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_assign() {
    let src = r#"
        int main(void) {
            int var0;
            var0 = 2;
            return var0;
        }
    "#;
    let expected = r#"
        global function main() { 
            var0.0 = 2
            return var0.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_assign_val_in_initializer() {
    let src = r#"
        int main(void) {
            int a = a = 5;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 5
            a.0 = 5
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_assignment_in_initializer() {
    let src = r#"
        int main(void) {
            int a;
            int b = a = 0;
            return b;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            b.1 = 0
            return b.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_assignment_lowest_precedence() {
    let src = r#"
        int main(void) {
            int a;
            a = 0 || 5;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            if 0 jump or_true_0
            if 5 jump or_true_0
            tmp.1 = 0
            jump or_end_1
        
          or_true_0:
            tmp.1 = 1
        
          or_end_1:
            a.0 = tmp.1
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_empty_function_body() {
    let src = r#"
        int main(void) {
        }
    "#;
    let expected = r#"
        global function main() { 
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_exp_then_declaration() {
    let src = r#"
        int main(void) {
            int a = -2593;
            a = a % 3;
            int b = -a;
            return b;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 2593
            a.0 = tmp.0
            tmp.1 = a.0 % 3
            a.0 = tmp.1
            tmp.2 = - a.0
            b.1 = tmp.2
            return b.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_bitwise_in_initializer() {
    let src = r#"
        int main(void) {
            int a = 15;
            int b = a ^ 5;
            return 1 | b;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 15
            tmp.0 = a.0 ^ 5
            b.1 = tmp.0
            tmp.1 = 1 | b.1
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_bitwise_ops_vars() {
    let src = r#"
        int main(void) {
            int a = 3;
            int b = 5;
            int c = 8;
            return a & b | c;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 3
            b.1 = 5
            c.2 = 8
            tmp.0 = a.0 & b.1
            tmp.1 = tmp.0 | c.2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_bitwise_shiftl_variable() {
    let src = r#"
        int main(void) {
            int x = 3;
            return x << 3;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 3
            tmp.0 = x.0 << 3
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_bitwise_shiftr_assign() {
    let src = r#"
        int main(void) {
            int var_to_shift = 1234;
            int x = 0;
            x = var_to_shift >> 4;
            return x;
        }
    "#;
    let expected = r#"
        global function main() { 
            var_to_shift.0 = 1234
            x.1 = 0
            tmp.0 = var_to_shift.0 >> 4
            x.1 = tmp.0
            return x.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_assignment_chained() {
    let src = r#"
        int main(void) {
            int a = 250;
            int b = 200;
            int c = 100;
            int d = 75;
            int e = -25;
            int f = 0;
            int x = 0;
            x = a += b -= c *= d /= e %= f = -7;
            return a == 2250 && b == 2000 && c == -1800 && d == -18 && e == -4 &&
                   f == -7 && x == 2250;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 250
            b.1 = 200
            c.2 = 100
            d.3 = 75
            tmp.0 = - 25
            e.4 = tmp.0
            f.5 = 0
            x.6 = 0
            tmp.6 = - 7
            f.5 = tmp.6
            tmp.5 = e.4 % tmp.6
            e.4 = tmp.5
            tmp.4 = d.3 / tmp.5
            d.3 = tmp.4
            tmp.3 = c.2 * tmp.4
            c.2 = tmp.3
            tmp.2 = b.1 - tmp.3
            b.1 = tmp.2
            tmp.1 = a.0 + tmp.2
            a.0 = tmp.1
            x.6 = tmp.1
            tmp.7 = a.0 == 2250
            if !tmp.7 jump and_false_0
            tmp.10 = b.1 == 2000
            if !tmp.10 jump and_false_0
            tmp.9 = 1
            jump and_end_1
        
          and_false_0:
            tmp.9 = 0
        
          and_end_1:
            if !tmp.9 jump and_false_2
            tmp.14 = - 1800
            tmp.13 = c.2 == tmp.14
            if !tmp.13 jump and_false_2
            tmp.12 = 1
            jump and_end_3
        
          and_false_2:
            tmp.12 = 0
        
          and_end_3:
            if !tmp.12 jump and_false_4
            tmp.18 = - 18
            tmp.17 = d.3 == tmp.18
            if !tmp.17 jump and_false_4
            tmp.16 = 1
            jump and_end_5
        
          and_false_4:
            tmp.16 = 0
        
          and_end_5:
            if !tmp.16 jump and_false_6
            tmp.22 = - 4
            tmp.21 = e.4 == tmp.22
            if !tmp.21 jump and_false_6
            tmp.20 = 1
            jump and_end_7
        
          and_false_6:
            tmp.20 = 0
        
          and_end_7:
            if !tmp.20 jump and_false_8
            tmp.26 = - 7
            tmp.25 = f.5 == tmp.26
            if !tmp.25 jump and_false_8
            tmp.24 = 1
            jump and_end_9
        
          and_false_8:
            tmp.24 = 0
        
          and_end_9:
            if !tmp.24 jump and_false_10
            tmp.29 = x.6 == 2250
            if !tmp.29 jump and_false_10
            tmp.28 = 1
            jump and_end_11
        
          and_false_10:
            tmp.28 = 0
        
          and_end_11:
            return tmp.28
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_assignment_lowest_precedence() {
    let src = r#"
        int main(void) {
            int a = 10;
            int b = 12;
            a += 0 || b;
            b *= a && 0;
            int c = 14;
            c -= a || b;
            int d = 16;
            d /= c || d;
            return (a == 11 && b == 0 && c == 13 && d == 16);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 10
            b.1 = 12
            if 0 jump or_true_0
            if b.1 jump or_true_0
            tmp.2 = 0
            jump or_end_1
        
          or_true_0:
            tmp.2 = 1
        
          or_end_1:
            tmp.0 = a.0 + tmp.2
            a.0 = tmp.0
            if !a.0 jump and_false_2
            if !0 jump and_false_2
            tmp.5 = 1
            jump and_end_3
        
          and_false_2:
            tmp.5 = 0
        
          and_end_3:
            tmp.3 = b.1 * tmp.5
            b.1 = tmp.3
            c.2 = 14
            if a.0 jump or_true_4
            if b.1 jump or_true_4
            tmp.8 = 0
            jump or_end_5
        
          or_true_4:
            tmp.8 = 1
        
          or_end_5:
            tmp.6 = c.2 - tmp.8
            c.2 = tmp.6
            d.3 = 16
            if c.2 jump or_true_6
            if d.3 jump or_true_6
            tmp.11 = 0
            jump or_end_7
        
          or_true_6:
            tmp.11 = 1
        
          or_end_7:
            tmp.9 = d.3 / tmp.11
            d.3 = tmp.9
            tmp.12 = a.0 == 11
            if !tmp.12 jump and_false_8
            tmp.15 = b.1 == 0
            if !tmp.15 jump and_false_8
            tmp.14 = 1
            jump and_end_9
        
          and_false_8:
            tmp.14 = 0
        
          and_end_9:
            if !tmp.14 jump and_false_10
            tmp.18 = c.2 == 13
            if !tmp.18 jump and_false_10
            tmp.17 = 1
            jump and_end_11
        
          and_false_10:
            tmp.17 = 0
        
          and_end_11:
            if !tmp.17 jump and_false_12
            tmp.21 = d.3 == 16
            if !tmp.21 jump and_false_12
            tmp.20 = 1
            jump and_end_13
        
          and_false_12:
            tmp.20 = 0
        
          and_end_13:
            return tmp.20
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_assignment_use_result() {
    let src = r#"
        int main(void) {
            int x = 1;
            int y = x += 3;
            return (x == 4 && y == 4);
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 1
            tmp.0 = x.0 + 3
            x.0 = tmp.0
            y.1 = tmp.0
            tmp.1 = x.0 == 4
            if !tmp.1 jump and_false_0
            tmp.4 = y.1 == 4
            if !tmp.4 jump and_false_0
            tmp.3 = 1
            jump and_end_1
        
          and_false_0:
            tmp.3 = 0
        
          and_end_1:
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_and() {
    let src = r#"
        int main(void) {
            int to_and = 3;
            to_and &= 6;
            return to_and;
        }
    "#;
    let expected = r#"
        global function main() { 
            to_and.0 = 3
            tmp.0 = to_and.0 & 6
            to_and.0 = tmp.0
            return to_and.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_assignment_lowest_precedence() {
    let src = r#"
        int main(void) {
            int a = 11;
            int b = 12;
            a &= 0 || b;
            b ^= a || 1;
            int c = 14;
            c |= a || b;
            int d = 16;
            d >>= c || d;
            int e = 18;
            e <<= c || d;
            return (a == 1 && b == 13 && c == 15 && d == 8 && e == 36);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 11
            b.1 = 12
            if 0 jump or_true_0
            if b.1 jump or_true_0
            tmp.2 = 0
            jump or_end_1
        
          or_true_0:
            tmp.2 = 1
        
          or_end_1:
            tmp.0 = a.0 & tmp.2
            a.0 = tmp.0
            if a.0 jump or_true_2
            if 1 jump or_true_2
            tmp.5 = 0
            jump or_end_3
        
          or_true_2:
            tmp.5 = 1
        
          or_end_3:
            tmp.3 = b.1 ^ tmp.5
            b.1 = tmp.3
            c.2 = 14
            if a.0 jump or_true_4
            if b.1 jump or_true_4
            tmp.8 = 0
            jump or_end_5
        
          or_true_4:
            tmp.8 = 1
        
          or_end_5:
            tmp.6 = c.2 | tmp.8
            c.2 = tmp.6
            d.3 = 16
            if c.2 jump or_true_6
            if d.3 jump or_true_6
            tmp.11 = 0
            jump or_end_7
        
          or_true_6:
            tmp.11 = 1
        
          or_end_7:
            tmp.9 = d.3 >> tmp.11
            d.3 = tmp.9
            e.4 = 18
            if c.2 jump or_true_8
            if d.3 jump or_true_8
            tmp.14 = 0
            jump or_end_9
        
          or_true_8:
            tmp.14 = 1
        
          or_end_9:
            tmp.12 = e.4 << tmp.14
            e.4 = tmp.12
            tmp.15 = a.0 == 1
            if !tmp.15 jump and_false_10
            tmp.18 = b.1 == 13
            if !tmp.18 jump and_false_10
            tmp.17 = 1
            jump and_end_11
        
          and_false_10:
            tmp.17 = 0
        
          and_end_11:
            if !tmp.17 jump and_false_12
            tmp.21 = c.2 == 15
            if !tmp.21 jump and_false_12
            tmp.20 = 1
            jump and_end_13
        
          and_false_12:
            tmp.20 = 0
        
          and_end_13:
            if !tmp.20 jump and_false_14
            tmp.24 = d.3 == 8
            if !tmp.24 jump and_false_14
            tmp.23 = 1
            jump and_end_15
        
          and_false_14:
            tmp.23 = 0
        
          and_end_15:
            if !tmp.23 jump and_false_16
            tmp.27 = e.4 == 36
            if !tmp.27 jump and_false_16
            tmp.26 = 1
            jump and_end_17
        
          and_false_16:
            tmp.26 = 0
        
          and_end_17:
            return tmp.26
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_chained() {
    let src = r#"
        int main(void) {
            int a = 250;
            int b = 200;
            int c = 100;
            int d = 75;
            int e = 50;
            int f = 25;
            int g = 10;
            int h = 1;
            int j = 0;
            int x = 0;
            x = a &= b *= c |= d = e ^= f += g >>= h <<= j = 1;
            return (a == 40 && b == 21800 && c == 109 && d == 41 && e == 41 &&
                    f == 27 && g == 2 && h == 2 && j == 1 && x == 40);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 250
            b.1 = 200
            c.2 = 100
            d.3 = 75
            e.4 = 50
            f.5 = 25
            g.6 = 10
            h.7 = 1
            j.8 = 0
            x.9 = 0
            j.8 = 1
            tmp.6 = h.7 << 1
            h.7 = tmp.6
            tmp.5 = g.6 >> tmp.6
            g.6 = tmp.5
            tmp.4 = f.5 + tmp.5
            f.5 = tmp.4
            tmp.3 = e.4 ^ tmp.4
            e.4 = tmp.3
            d.3 = tmp.3
            tmp.2 = c.2 | tmp.3
            c.2 = tmp.2
            tmp.1 = b.1 * tmp.2
            b.1 = tmp.1
            tmp.0 = a.0 & tmp.1
            a.0 = tmp.0
            x.9 = tmp.0
            tmp.7 = a.0 == 40
            if !tmp.7 jump and_false_0
            tmp.10 = b.1 == 21800
            if !tmp.10 jump and_false_0
            tmp.9 = 1
            jump and_end_1
        
          and_false_0:
            tmp.9 = 0
        
          and_end_1:
            if !tmp.9 jump and_false_2
            tmp.13 = c.2 == 109
            if !tmp.13 jump and_false_2
            tmp.12 = 1
            jump and_end_3
        
          and_false_2:
            tmp.12 = 0
        
          and_end_3:
            if !tmp.12 jump and_false_4
            tmp.16 = d.3 == 41
            if !tmp.16 jump and_false_4
            tmp.15 = 1
            jump and_end_5
        
          and_false_4:
            tmp.15 = 0
        
          and_end_5:
            if !tmp.15 jump and_false_6
            tmp.19 = e.4 == 41
            if !tmp.19 jump and_false_6
            tmp.18 = 1
            jump and_end_7
        
          and_false_6:
            tmp.18 = 0
        
          and_end_7:
            if !tmp.18 jump and_false_8
            tmp.22 = f.5 == 27
            if !tmp.22 jump and_false_8
            tmp.21 = 1
            jump and_end_9
        
          and_false_8:
            tmp.21 = 0
        
          and_end_9:
            if !tmp.21 jump and_false_10
            tmp.25 = g.6 == 2
            if !tmp.25 jump and_false_10
            tmp.24 = 1
            jump and_end_11
        
          and_false_10:
            tmp.24 = 0
        
          and_end_11:
            if !tmp.24 jump and_false_12
            tmp.28 = h.7 == 2
            if !tmp.28 jump and_false_12
            tmp.27 = 1
            jump and_end_13
        
          and_false_12:
            tmp.27 = 0
        
          and_end_13:
            if !tmp.27 jump and_false_14
            tmp.31 = j.8 == 1
            if !tmp.31 jump and_false_14
            tmp.30 = 1
            jump and_end_15
        
          and_false_14:
            tmp.30 = 0
        
          and_end_15:
            if !tmp.30 jump and_false_16
            tmp.34 = x.9 == 40
            if !tmp.34 jump and_false_16
            tmp.33 = 1
            jump and_end_17
        
          and_false_16:
            tmp.33 = 0
        
          and_end_17:
            return tmp.33
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_or() {
    let src = r#"
        int main(void) {
            int to_or = 1;
            to_or |= 30;
            return to_or;
        }
    "#;
    let expected = r#"
        global function main() { 
            to_or.0 = 1
            tmp.0 = to_or.0 | 30
            to_or.0 = tmp.0
            return to_or.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_shiftl() {
    let src = r#"
        int main(void) {
            int to_shiftl = 3;
            to_shiftl <<= 4;
            return to_shiftl;
        }
    "#;
    let expected = r#"
        global function main() { 
            to_shiftl.0 = 3
            tmp.0 = to_shiftl.0 << 4
            to_shiftl.0 = tmp.0
            return to_shiftl.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_shiftr() {
    let src = r#"
        int main(void) {
            int to_shiftr = 382574;
            to_shiftr >>= 4;
            return to_shiftr;
        }
    "#;
    let expected = r#"
        global function main() { 
            to_shiftr.0 = 382574
            tmp.0 = to_shiftr.0 >> 4
            to_shiftr.0 = tmp.0
            return to_shiftr.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_xor() {
    let src = r#"
        int main(void) {
            int to_xor = 7;
            to_xor ^= 5;
            return to_xor;
        }
    "#;
    let expected = r#"
        global function main() { 
            to_xor.0 = 7
            tmp.0 = to_xor.0 ^ 5
            to_xor.0 = tmp.0
            return to_xor.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_divide() {
    let src = r#"
        int main(void) {
            int to_divide = 8;
            to_divide /= 4;
            return to_divide;
        }
    "#;
    let expected = r#"
        global function main() { 
            to_divide.0 = 8
            tmp.0 = to_divide.0 / 4
            to_divide.0 = tmp.0
            return to_divide.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_minus() {
    let src = r#"
        int main(void) {
            int to_subtract = 10;
            to_subtract -= 8;
            return to_subtract;
        }
    "#;
    let expected = r#"
        global function main() { 
            to_subtract.0 = 10
            tmp.0 = to_subtract.0 - 8
            to_subtract.0 = tmp.0
            return to_subtract.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_mod() {
    let src = r#"
        int main(void) {
            int to_mod = 5;
            to_mod %= 3;
            return to_mod;
        }
    "#;
    let expected = r#"
        global function main() { 
            to_mod.0 = 5
            tmp.0 = to_mod.0 % 3
            to_mod.0 = tmp.0
            return to_mod.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_multiply() {
    let src = r#"
        int main(void) {
            int to_multiply = 4;
            to_multiply *= 3;
            return to_multiply;
        }
    "#;
    let expected = r#"
        global function main() { 
            to_multiply.0 = 4
            tmp.0 = to_multiply.0 * 3
            to_multiply.0 = tmp.0
            return to_multiply.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_plus() {
    let src = r#"
        int main(void) {
            int to_add = 0;
            to_add += 4;
            return to_add;
        }
    "#;
    let expected = r#"
        global function main() { 
            to_add.0 = 0
            tmp.0 = to_add.0 + 4
            to_add.0 = tmp.0
            return to_add.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_incr_expression_statement() {
    let src = r#"
        int main(void) {
            int a = 0;
            int b = 0;
            a++;
            ++a;
            ++a;
            b--;
            --b;
            return (a == 3 && b == -2);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            b.1 = 0
            tmp.0 = a.0
            tmp.1 = inc a.0
            a.0 = tmp.1
            tmp.2 = inc a.0
            a.0 = tmp.2
            tmp.3 = inc a.0
            a.0 = tmp.3
            tmp.4 = b.1
            tmp.5 = dec b.1
            b.1 = tmp.5
            tmp.6 = dec b.1
            b.1 = tmp.6
            tmp.7 = a.0 == 3
            if !tmp.7 jump and_false_0
            tmp.11 = - 2
            tmp.10 = b.1 == tmp.11
            if !tmp.10 jump and_false_0
            tmp.9 = 1
            jump and_end_1
        
          and_false_0:
            tmp.9 = 0
        
          and_end_1:
            return tmp.9
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_incr_in_binary_expr() {
    let src = r#"
        int main(void) {
            int a = 2;
            int b = 3 + a++;
            int c = 4 + ++b;
            return (a == 3 && b == 6 && c == 10);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 2
            tmp.1 = a.0
            tmp.2 = inc a.0
            a.0 = tmp.2
            tmp.0 = 3 + tmp.1
            b.1 = tmp.0
            tmp.4 = inc b.1
            b.1 = tmp.4
            tmp.3 = 4 + tmp.4
            c.2 = tmp.3
            tmp.5 = a.0 == 3
            if !tmp.5 jump and_false_0
            tmp.8 = b.1 == 6
            if !tmp.8 jump and_false_0
            tmp.7 = 1
            jump and_end_1
        
          and_false_0:
            tmp.7 = 0
        
          and_end_1:
            if !tmp.7 jump and_false_2
            tmp.11 = c.2 == 10
            if !tmp.11 jump and_false_2
            tmp.10 = 1
            jump and_end_3
        
          and_false_2:
            tmp.10 = 0
        
          and_end_3:
            return tmp.10
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_incr_parenthesized() {
    let src = r#"
        
        int main(void) {
            int a = 1;
            int b = 2;
            int c = -++(a);
            int d = !(b)--;
            return (a == 2 && b == 1 && c == -2 && d == 0);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            b.1 = 2
            tmp.0 = inc a.0
            a.0 = tmp.0
            tmp.1 = - tmp.0
            c.2 = tmp.1
            tmp.2 = b.1
            tmp.3 = dec b.1
            b.1 = tmp.3
            tmp.4 = ! tmp.2
            d.3 = tmp.4
            tmp.5 = a.0 == 2
            if !tmp.5 jump and_false_0
            tmp.8 = b.1 == 1
            if !tmp.8 jump and_false_0
            tmp.7 = 1
            jump and_end_1
        
          and_false_0:
            tmp.7 = 0
        
          and_end_1:
            if !tmp.7 jump and_false_2
            tmp.12 = - 2
            tmp.11 = c.2 == tmp.12
            if !tmp.11 jump and_false_2
            tmp.10 = 1
            jump and_end_3
        
          and_false_2:
            tmp.10 = 0
        
          and_end_3:
            if !tmp.10 jump and_false_4
            tmp.15 = d.3 == 0
            if !tmp.15 jump and_false_4
            tmp.14 = 1
            jump and_end_5
        
          and_false_4:
            tmp.14 = 0
        
          and_end_5:
            return tmp.14
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_postfix_incr_and_decr() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 2;
            int c = a++;
            int d = b--;
            return (a == 2 && b == 1 && c == 1 && d == 2);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            b.1 = 2
            tmp.0 = a.0
            tmp.1 = inc a.0
            a.0 = tmp.1
            c.2 = tmp.0
            tmp.2 = b.1
            tmp.3 = dec b.1
            b.1 = tmp.3
            d.3 = tmp.2
            tmp.4 = a.0 == 2
            if !tmp.4 jump and_false_0
            tmp.7 = b.1 == 1
            if !tmp.7 jump and_false_0
            tmp.6 = 1
            jump and_end_1
        
          and_false_0:
            tmp.6 = 0
        
          and_end_1:
            if !tmp.6 jump and_false_2
            tmp.10 = c.2 == 1
            if !tmp.10 jump and_false_2
            tmp.9 = 1
            jump and_end_3
        
          and_false_2:
            tmp.9 = 0
        
          and_end_3:
            if !tmp.9 jump and_false_4
            tmp.13 = d.3 == 2
            if !tmp.13 jump and_false_4
            tmp.12 = 1
            jump and_end_5
        
          and_false_4:
            tmp.12 = 0
        
          and_end_5:
            return tmp.12
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_postfix_precedence() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = !a++;
            return (a == 2 && b == 0);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            tmp.0 = a.0
            tmp.1 = inc a.0
            a.0 = tmp.1
            tmp.2 = ! tmp.0
            b.1 = tmp.2
            tmp.3 = a.0 == 2
            if !tmp.3 jump and_false_0
            tmp.6 = b.1 == 0
            if !tmp.6 jump and_false_0
            tmp.5 = 1
            jump and_end_1
        
          and_false_0:
            tmp.5 = 0
        
          and_end_1:
            return tmp.5
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_prefix_incr_and_decr() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 2;
            int c = ++a;
            int d = --b;
            return (a == 2 && b == 1 && c == 2 && d == 1);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            b.1 = 2
            tmp.0 = inc a.0
            a.0 = tmp.0
            c.2 = tmp.0
            tmp.1 = dec b.1
            b.1 = tmp.1
            d.3 = tmp.1
            tmp.2 = a.0 == 2
            if !tmp.2 jump and_false_0
            tmp.5 = b.1 == 1
            if !tmp.5 jump and_false_0
            tmp.4 = 1
            jump and_end_1
        
          and_false_0:
            tmp.4 = 0
        
          and_end_1:
            if !tmp.4 jump and_false_2
            tmp.8 = c.2 == 2
            if !tmp.8 jump and_false_2
            tmp.7 = 1
            jump and_end_3
        
          and_false_2:
            tmp.7 = 0
        
          and_end_3:
            if !tmp.7 jump and_false_4
            tmp.11 = d.3 == 1
            if !tmp.11 jump and_false_4
            tmp.10 = 1
            jump and_end_5
        
          and_false_4:
            tmp.10 = 0
        
          and_end_5:
            return tmp.10
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_kw_var_names() {
    let src = r#"
        int main(void) {
            int return_val = 3;
            int void2 = 2;
            return return_val + void2;
        }
    "#;
    let expected = r#"
        global function main() { 
            return_val.0 = 3
            void2.1 = 2
            tmp.0 = return_val.0 + void2.1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_local_var_missing_return() {
    let src = r#"
        int main(void) {
            int a = 3;
            a = a + 5;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 3
            tmp.0 = a.0 + 5
            a.0 = tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_mixed_precedence_assignment() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 0;
            a = 3 * (b = a);
            return a + b;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            b.1 = 0
            b.1 = a.0
            tmp.0 = 3 * a.0
            a.0 = tmp.0
            tmp.1 = a.0 + b.1
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_non_short_circuit_or() {
    let src = r#"
        int main(void) {
            int a = 0;
            0 || (a = 1);
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            if 0 jump or_true_0
            a.0 = 1
            if 1 jump or_true_0
            tmp.1 = 0
            jump or_end_1
        
          or_true_0:
            tmp.1 = 1
        
          or_end_1:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_null_statement() {
    let src = r#"
        int main(void) {
            ;
        }
    "#;
    let expected = r#"
        global function main() { 
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_null_then_return() {
    let src = r#"
        int main(void) {
            ;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_return_var() {
    let src = r#"
        int main(void) {
            int a = 2;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 2
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_short_circuit_and_fail() {
    let src = r#"
        int main(void) {
            int a = 0;
            0 && (a = 5);
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            if !0 jump and_false_0
            a.0 = 5
            if !5 jump and_false_0
            tmp.1 = 1
            jump and_end_1
        
          and_false_0:
            tmp.1 = 0
        
          and_end_1:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_short_circuit_or() {
    let src = r#"
        int main(void) {
            int a = 0;
            1 || (a = 1);
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            if 1 jump or_true_0
            a.0 = 1
            if 1 jump or_true_0
            tmp.1 = 0
            jump or_end_1
        
          or_true_0:
            tmp.1 = 1
        
          or_end_1:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_unused_exp() {
    let src = r#"
        int main(void) {
            2 + 2;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 2 + 2
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_use_assignment_result() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 2;
            return a = b = 4;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            b.1 = 2
            b.1 = 4
            a.0 = 4
            return 4
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_use_val_in_own_initializer() {
    let src = r#"
        int main(void) {
            int a = 0 && a;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            if !0 jump and_false_0
            if !a.0 jump and_false_0
            tmp.1 = 1
            jump and_end_1
        
          and_false_0:
            tmp.1 = 0
        
          and_end_1:
            a.0 = tmp.1
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_assign_ternary() {
    let src = r#"
        int main(void) {
            int a = 0;
            a = 1 ? 2 : 3;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            if !1 jump else_1
            tmp.0 = 2
            jump end_if_0
        
          else_1:
            tmp.0 = 3
        
          end_if_0:
            a.0 = tmp.0
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_binary_condition() {
    let src = r#"
        int main(void) {
            if (1 + 2 == 3)
                return 5;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 + 2
            tmp.1 = tmp.0 == 3
            if !tmp.1 jump end_if_0
            return 5
        
          end_if_0:
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_binary_false_condition() {
    let src = r#"
        int main(void) {
            if (1 + 2 == 4)
                return 5;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 + 2
            tmp.1 = tmp.0 == 4
            if !tmp.1 jump end_if_0
            return 5
        
          end_if_0:
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_else() {
    let src = r#"
        int main(void) {
            int a = 0;
            if (a)
                return 1;
            else
                return 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            if !a.0 jump else_1
            return 1
            jump end_if_0
        
          else_1:
            return 2
        
          end_if_0:
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_bitwise_ternary() {
    let src = r#"
        int main(void) {
            int result;
            1 ^ 1 ? result = 4 : (result = 5);
            return result;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1 ^ 1
            if !tmp.0 jump else_1
            result.0 = 4
            tmp.1 = 4
            jump end_if_0
        
          else_1:
            result.0 = 5
            tmp.1 = 5
        
          end_if_0:
            return result.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_compound_assign_ternary() {
    let src = r#"
        int main(void) {
            int a = 4;
            a *= 1 ? 2 : 3;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 4
            if !1 jump else_1
            tmp.1 = 2
            jump end_if_0
        
          else_1:
            tmp.1 = 3
        
          end_if_0:
            tmp.0 = a.0 * tmp.1
            a.0 = tmp.0
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_compound_if_expression() {
    let src = r#"
        int main(void) {
            int a = 0;
            if (a += 1)
                return a;
            return 10;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            tmp.0 = a.0 + 1
            a.0 = tmp.0
            if !tmp.0 jump end_if_0
            return a.0
        
          end_if_0:
            return 10
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_after_declaration() {
    let src = r#"
        int main(void) {
            int x = 1;
            goto post_declaration;
            int i = (x = 0);
        post_declaration:
            i = 5;
            return (x == 1 && i == 5);
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 1
            jump post_declaration_0
            x.0 = 0
            i.1 = 0
        
          post_declaration_0:
            i.1 = 5
            tmp.0 = x.0 == 1
            if !tmp.0 jump and_false_0
            tmp.3 = i.1 == 5
            if !tmp.3 jump and_false_0
            tmp.2 = 1
            jump and_end_1
        
          and_false_0:
            tmp.2 = 0
        
          and_end_1:
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_backwards() {
    let src = r#"
        int main(void) {
            if (0)
            label:
                return 5;
            goto label;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            if !0 jump end_if_0
        
          label_0:
            return 5
        
          end_if_0:
            jump label_0
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_label() {
    let src = r#"
        int main(void) {
            goto label;
            return 0;
        label:
            return 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            jump label_0
            return 0
        
          label_0:
            return 1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_label_and_var() {
    let src = r#"
        int main(void) {
            int ident = 5;
            goto ident;
            return 0;
        ident:
            return ident;
        }
    "#;
    let expected = r#"
        global function main() { 
            ident.0 = 5
            jump ident_0
            return 0
        
          ident_0:
            return ident.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_label_main() {
    let src = r#"
        int main(void) {
            goto main;
            return 5;
        main:
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            jump main_0
            return 5
        
          main_0:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_label_main_2() {
    let src = r#"
        int main(void) {
            goto _main;
            return 0;
            _main:
                return 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            jump _main_0
            return 0
        
          _main_0:
            return 1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_nested_label() {
    let src = r#"
        int main(void) {
            goto labelB;
            labelA:
                labelB:
                    return 5;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            jump labelB_1
        
          labelA_0:
        
          labelB_1:
            return 5
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_label_all_statements() {
    let src = r#"
        int main(void) {
            int a = 1;
        label_if:
            if (a)
                goto label_expression;
            else
                goto label_empty;
        label_goto:
            goto label_return;
            if (0)
            label_expression:
                a = 0;
            goto label_if;
        label_return:
            return a;
        label_empty:;
            a = 100;
            goto label_goto;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
        
          label_if_0:
            if !a.0 jump else_1
            jump label_expression_2
            jump end_if_0
        
          else_1:
            jump label_empty_4
        
          end_if_0:
        
          label_goto_1:
            jump label_return_3
            if !0 jump end_if_2
        
          label_expression_2:
            a.0 = 0
        
          end_if_2:
            jump label_if_0
        
          label_return_3:
            return a.0
        
          label_empty_4:
            a.0 = 100
            jump label_goto_1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_label_token() {
    let src = r#"
        int main(void) {
            goto _foo_1_;
            return 0;
        _foo_1_:
            return 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            jump _foo_1__0
            return 0
        
          _foo_1__0:
            return 1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_lh_compound_assignment() {
    let src = r#"
        int main(void) {
            int x = 10;
            (x -= 1) ? (x /= 2) : 0;
            return x == 4;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 10
            tmp.0 = x.0 - 1
            x.0 = tmp.0
            if !tmp.0 jump else_1
            tmp.2 = x.0 / 2
            x.0 = tmp.2
            tmp.1 = tmp.2
            jump end_if_0
        
          else_1:
            tmp.1 = 0
        
          end_if_0:
            tmp.3 = x.0 == 4
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_postfix_if() {
    let src = r#"
        int main(void) {
            int a = 0;
            if (a--)
                return 0;
            else if (a--)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            tmp.0 = a.0
            tmp.1 = dec a.0
            a.0 = tmp.1
            if !tmp.0 jump else_1
            return 0
            jump end_if_0
        
          else_1:
            tmp.2 = a.0
            tmp.3 = dec a.0
            a.0 = tmp.3
            if !tmp.2 jump end_if_2
            return 1
        
          end_if_2:
        
          end_if_0:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_postfix_in_ternary() {
    let src = r#"
        int main(void) {
            int x = 10;
            x - 10 ? 0 : x--;
            return x;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 10
            tmp.0 = x.0 - 10
            if !tmp.0 jump else_1
            tmp.1 = 0
            jump end_if_0
        
          else_1:
            tmp.2 = x.0
            tmp.3 = dec x.0
            x.0 = tmp.3
            tmp.1 = tmp.2
        
          end_if_0:
            return x.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_prefix_if() {
    let src = r#"
        int main(void) {
            int a = -1;
            if (++a)
                return 0;
            else if (++a)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1
            a.0 = tmp.0
            tmp.1 = inc a.0
            a.0 = tmp.1
            if !tmp.1 jump else_1
            return 0
            jump end_if_0
        
          else_1:
            tmp.2 = inc a.0
            a.0 = tmp.2
            if !tmp.2 jump end_if_2
            return 1
        
          end_if_2:
        
          end_if_0:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_prefix_in_ternary() {
    let src = r#"
        int main(void) {
            int a = 0;
            return (++a ? ++a : 0);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            tmp.0 = inc a.0
            a.0 = tmp.0
            if !tmp.0 jump else_1
            tmp.2 = inc a.0
            a.0 = tmp.2
            tmp.1 = tmp.2
            jump end_if_0
        
          else_1:
            tmp.1 = 0
        
          end_if_0:
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_unused_label() {
    let src = r#"
        int main(void) {
        unused:
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
        
          unused_0:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_whitespace_after_label() {
    let src = r#"
        int main(void) {
            goto label2;
            return 0;
            label1 :
            label2
            :
            return 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            jump label2_1
            return 0
        
          label1_0:
        
          label2_1:
            return 1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_nested() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 0;
            if (a)
                b = 1;
            else if (b)
                b = 2;
            return b;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            b.1 = 0
            if !a.0 jump else_1
            b.1 = 1
            jump end_if_0
        
          else_1:
            if !b.1 jump end_if_2
            b.1 = 2
        
          end_if_2:
        
          end_if_0:
            return b.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_nested_2() {
    let src = r#"
        int main(void) {
            int a = 0;
            int b = 1;
            if (a)
                b = 1;
            else if (~b)
                b = 2;
            return b;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            b.1 = 1
            if !a.0 jump else_1
            b.1 = 1
            jump end_if_0
        
          else_1:
            tmp.0 = ~ b.1
            if !tmp.0 jump end_if_2
            b.1 = 2
        
          end_if_2:
        
          end_if_0:
            return b.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_nested_3() {
    let src = r#"
        int main(void) {
            int a = 0;
            if ( (a = 1) )
                if (a == 1)
                    a = 3;
                else
                    a = 4;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            a.0 = 1
            if !1 jump end_if_0
            tmp.0 = a.0 == 1
            if !tmp.0 jump else_3
            a.0 = 3
            jump end_if_2
        
          else_3:
            a.0 = 4
        
          end_if_2:
        
          end_if_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_nested_4() {
    let src = r#"
        int main(void) {
            int a = 0;
            if (!a)
                if (3 / 4)
                    a = 3;
                else
                    a = 8 / 2;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            tmp.0 = ! a.0
            if !tmp.0 jump end_if_0
            tmp.1 = 3 / 4
            if !tmp.1 jump else_3
            a.0 = 3
            jump end_if_2
        
          else_3:
            tmp.2 = 8 / 2
            a.0 = tmp.2
        
          end_if_2:
        
          end_if_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_nested_5() {
    let src = r#"
        int main(void) {
            int a = 0;
            if (0)
                if (0)
                    a = 3;
                else
                    a = 4;
            else
                a = 1;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            if !0 jump else_1
            if !0 jump else_3
            a.0 = 3
            jump end_if_2
        
          else_3:
            a.0 = 4
        
          end_if_2:
            jump end_if_0
        
          else_1:
            a.0 = 1
        
          end_if_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_not_taken() {
    let src = r#"
        int main(void) {
            int a = 0;
            int b = 0;
            if (a)
                b = 1;
            return b;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            b.1 = 0
            if !a.0 jump end_if_0
            b.1 = 1
        
          end_if_0:
            return b.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_null_body() {
    let src = r#"
        int main(void) {
            int x = 0;
            if (0)
                ;
            else
                x = 1;
            return x;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 0
            if !0 jump else_1
            jump end_if_0
        
          else_1:
            x.0 = 1
        
          end_if_0:
            return x.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_taken() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 0;
            if (a)
                b = 1;
            return b;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            b.1 = 0
            if !a.0 jump end_if_0
            b.1 = 1
        
          end_if_0:
            return b.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_lh_assignment() {
    let src = r#"
        int main(void) {
            int x = 10;
            int y = 0;
            y = (x = 5) ? x : 2;
            return (x == 5 && y == 5);
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 10
            y.1 = 0
            x.0 = 5
            if !5 jump else_1
            tmp.0 = x.0
            jump end_if_0
        
          else_1:
            tmp.0 = 2
        
          end_if_0:
            y.1 = tmp.0
            tmp.1 = x.0 == 5
            if !tmp.1 jump and_false_2
            tmp.4 = y.1 == 5
            if !tmp.4 jump and_false_2
            tmp.3 = 1
            jump and_end_3
        
          and_false_2:
            tmp.3 = 0
        
          and_end_3:
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_multiple_if() {
    let src = r#"
        int main(void) {
            int a = 0;
            int b = 0;
            if (a)
                a = 2;
            else
                a = 3;
            if (b)
                b = 4;
            else
                b = 5;
            return a + b;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            b.1 = 0
            if !a.0 jump else_1
            a.0 = 2
            jump end_if_0
        
          else_1:
            a.0 = 3
        
          end_if_0:
            if !b.1 jump else_3
            b.1 = 4
            jump end_if_2
        
          else_3:
            b.1 = 5
        
          end_if_2:
            tmp.0 = a.0 + b.1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_nested_ternary() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 2;
            int flag = 0;
            return a > b ? 5 : flag ? 6 : 7;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            b.1 = 2
            flag.2 = 0
            tmp.0 = a.0 > b.1
            if !tmp.0 jump else_1
            tmp.1 = 5
            jump end_if_0
        
          else_1:
            if !flag.2 jump else_3
            tmp.2 = 6
            jump end_if_2
        
          else_3:
            tmp.2 = 7
        
          end_if_2:
            tmp.1 = tmp.2
        
          end_if_0:
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_nested_ternary_2() {
    let src = r#"
        int main(void) {
            int a = 1 ? 2 ? 3 : 4 : 5;
            int b = 0 ? 2 ? 3 : 4 : 5;
            return a * b;
        }
    "#;
    let expected = r#"
        global function main() { 
            if !1 jump else_1
            if !2 jump else_3
            tmp.1 = 3
            jump end_if_2
        
          else_3:
            tmp.1 = 4
        
          end_if_2:
            tmp.0 = tmp.1
            jump end_if_0
        
          else_1:
            tmp.0 = 5
        
          end_if_0:
            a.0 = tmp.0
            if !0 jump else_5
            if !2 jump else_7
            tmp.3 = 3
            jump end_if_6
        
          else_7:
            tmp.3 = 4
        
          end_if_6:
            tmp.2 = tmp.3
            jump end_if_4
        
          else_5:
            tmp.2 = 5
        
          end_if_4:
            b.1 = tmp.2
            tmp.4 = a.0 * b.1
            return tmp.4
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_rh_assignment() {
    let src = r#"
        int main(void) {
            int flag = 1;
            int a = 0;
            flag ? a = 1 : (a = 0);
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            flag.0 = 1
            a.1 = 0
            if !flag.0 jump else_1
            a.1 = 1
            tmp.0 = 1
            jump end_if_0
        
          else_1:
            a.1 = 0
            tmp.0 = 0
        
          end_if_0:
            return a.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary() {
    let src = r#"
        int main(void) {
            int a = 0;
            return a > -1 ? 4 : 5;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            tmp.1 = - 1
            tmp.0 = a.0 > tmp.1
            if !tmp.0 jump else_1
            tmp.2 = 4
            jump end_if_0
        
          else_1:
            tmp.2 = 5
        
          end_if_0:
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary_middle_assignment() {
    let src = r#"
        int main(void) {
            int a = 1;
            a != 2 ? a = 2 : 0;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            tmp.0 = a.0 != 2
            if !tmp.0 jump else_1
            a.0 = 2
            tmp.1 = 2
            jump end_if_0
        
          else_1:
            tmp.1 = 0
        
          end_if_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary_middle_binop() {
    let src = r#"
        int main(void) {
            int a = 1 ? 3 % 2 : 4;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            if !1 jump else_1
            tmp.1 = 3 % 2
            tmp.0 = tmp.1
            jump end_if_0
        
          else_1:
            tmp.0 = 4
        
          end_if_0:
            a.0 = tmp.0
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary_precedence() {
    let src = r#"
        int main(void) {
            int a = 10;
            return a || 0 ? 20 : 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 10
            if a.0 jump or_true_0
            if 0 jump or_true_0
            tmp.1 = 0
            jump or_end_1
        
          or_true_0:
            tmp.1 = 1
        
          or_end_1:
            if !tmp.1 jump else_3
            tmp.2 = 20
            jump end_if_2
        
          else_3:
            tmp.2 = 0
        
          end_if_2:
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary_rh_binop() {
    let src = r#"
        int main(void) {
            return 0 ? 1 : 0 || 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            if !0 jump else_1
            tmp.0 = 1
            jump end_if_0
        
          else_1:
            if 0 jump or_true_2
            if 2 jump or_true_2
            tmp.2 = 0
            jump or_end_3
        
          or_true_2:
            tmp.2 = 1
        
          or_end_3:
            tmp.0 = tmp.2
        
          end_if_0:
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary_short_circuit() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 0;
            a ? (b = 1) : (b = 2);
            return b;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            b.1 = 0
            if !a.0 jump else_1
            b.1 = 1
            tmp.0 = 1
            jump end_if_0
        
          else_1:
            b.1 = 2
            tmp.0 = 2
        
          end_if_0:
            return b.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary_short_circuit_2() {
    let src = r#"
        int main(void) {
            int a = 0;
            int b = 0;
            a ? (b = 1) : (b = 2);
            return b;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            b.1 = 0
            if !a.0 jump else_1
            b.1 = 1
            tmp.0 = 1
            jump end_if_0
        
          else_1:
            b.1 = 2
            tmp.0 = 2
        
          end_if_0:
            return b.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_assign_to_self() {
    let src = r#"
        int main(void) {
            int a = 3;
            {
                int a = a = 4;
                return a;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 3
            a.1 = 4
            a.1 = 4
            return a.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_assign_to_self_2() {
    let src = r#"
        int main(void) {
            int a = 3;
            {
                int a = a = 4;
            }
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 3
            a.1 = 4
            a.1 = 4
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_declaration_only() {
    let src = r#"
        int main(void) {
            int a;
            {
                int b = a = 1;
            }
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            b.1 = 1
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_empty_blocks() {
    let src = r#"
        int main(void) {
            int ten = 10;
            {}
            int twenty = 10 * 2;
            {{}}
            return ten + twenty;
        }
    "#;
    let expected = r#"
        global function main() { 
            ten.0 = 10
            tmp.0 = 10 * 2
            twenty.1 = tmp.0
            tmp.1 = ten.0 + twenty.1
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_extra_credit_compound_subtract_in_block() {
    let src = r#"
        int main(void) {
            int a = 5;
            if (a > 4) {
                a -= 4;
                int a = 5;
                if (a > 4) {
                    a -= 4;
                }
            }
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 5
            tmp.0 = a.0 > 4
            if !tmp.0 jump end_if_0
            tmp.1 = a.0 - 4
            a.0 = tmp.1
            a.1 = 5
            tmp.2 = a.1 > 4
            if !tmp.2 jump end_if_2
            tmp.3 = a.1 - 4
            a.1 = tmp.3
        
          end_if_2:
        
          end_if_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_extra_credit_goto_before_declaration() {
    let src = r#"
        int main(void) {
            int a = 0;
            {
                if (a != 0)
                    return_a:
                        return a;
                int a = 4;
                goto return_a;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            tmp.0 = a.0 != 0
            if !tmp.0 jump end_if_0
        
          return_a_0:
            return a.0
        
          end_if_0:
            a.1 = 4
            jump return_a_0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_extra_credit_goto_inner_scope() {
    let src = r#"
        int main(void) {
            int x = 5;
            goto inner;
            {
                int x = 0;
                inner:
                x = 1;
                return x;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 5
            jump inner_0
            x.1 = 0
        
          inner_0:
            x.1 = 1
            return x.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_extra_credit_goto_outer_scope() {
    let src = r#"
        int main(void) {
            int a = 10;
            int b = 0;
            if (a) {
                int a = 1;
                b = a;
                goto end;
            }
            a = 9;
        end:
            return (a == 10 && b == 1);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 10
            b.1 = 0
            if !a.0 jump end_if_0
            a.2 = 1
            b.1 = a.2
            jump end_0
        
          end_if_0:
            a.0 = 9
        
          end_0:
            tmp.0 = a.0 == 10
            if !tmp.0 jump and_false_2
            tmp.3 = b.1 == 1
            if !tmp.3 jump and_false_2
            tmp.2 = 1
            jump and_end_3
        
          and_false_2:
            tmp.2 = 0
        
          and_end_3:
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_extra_credit_goto_sibling_scope() {
    let src = r#"
        int main(void) {
            int sum = 0;
            if (1) {
                int a = 5;
                goto other_if;
                sum = 0;
            first_if:
                a = 5;
                sum = sum + a;
            }
            if (0) {
            other_if:;
                int a = 6;
                sum = sum + a;
                goto first_if;
                sum = 0;
            }
            return sum;
        }
    "#;
    let expected = r#"
        global function main() { 
            sum.0 = 0
            if !1 jump end_if_0
            a.1 = 5
            jump other_if_1
            sum.0 = 0
        
          first_if_0:
            a.1 = 5
            tmp.0 = sum.0 + a.1
            sum.0 = tmp.0
        
          end_if_0:
            if !0 jump end_if_2
        
          other_if_1:
            a.2 = 6
            tmp.1 = sum.0 + a.2
            sum.0 = tmp.1
            jump first_if_0
            sum.0 = 0
        
          end_if_2:
            return sum.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_hidden_then_visible() {
    let src = r#"
        int main(void) {
            int a = 2;
            int b;
            {
                a = -4;
                int a = 7;
                b = a + 1;
            }
            return b == 8 && a == -4;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 2
            tmp.0 = - 4
            a.0 = tmp.0
            a.2 = 7
            tmp.1 = a.2 + 1
            b.1 = tmp.1
            tmp.2 = b.1 == 8
            if !tmp.2 jump and_false_0
            tmp.6 = - 4
            tmp.5 = a.0 == tmp.6
            if !tmp.5 jump and_false_0
            tmp.4 = 1
            jump and_end_1
        
          and_false_0:
            tmp.4 = 0
        
          and_end_1:
            return tmp.4
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_hidden_variable() {
    let src = r#"
        int main(void) {
            int a = 2;
            {
                int a = 1;
                return a;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 2
            a.1 = 1
            return a.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_inner_uninitialized() {
    let src = r#"
        int main(void) {
            int x = 4;
            {
                int x;
            }
            return x;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 4
            return x.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_multiple_vars_same_name() {
    let src = r#"
        int main(void) {
            int a = 0;
            {
                int b = 4;
                a = b;
            }
            {
                int b = 2;
                a = a - b;
            }
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            b.1 = 4
            a.0 = b.1
            b.2 = 2
            tmp.0 = a.0 - b.2
            a.0 = tmp.0
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_nested_if() {
    let src = r#"
        int main(void) {
            int a = 0;
            if (a) {
                int b = 2;
                return b;
            } else {
                int c = 3;
                if (a < c) {
                    return !a;
                } else {
                    return 5;
                }
            }
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            if !a.0 jump else_1
            b.1 = 2
            return b.1
            jump end_if_0
        
          else_1:
            c.2 = 3
            tmp.0 = a.0 < c.2
            if !tmp.0 jump else_3
            tmp.1 = ! a.0
            return tmp.1
            jump end_if_2
        
          else_3:
            return 5
        
          end_if_2:
        
          end_if_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_similar_var_names() {
    let src = r#"
        int main(void) {
            int a;
            int result;
            int a1 = 1;
            {
                int a = 2;
                int a1 = 2;
                {
                    int a;
                    {
                        int a;
                        {
                            int a;
                            {
                                int a;
                                {
                                    int a;
                                    {
                                        int a;
                                        {
                                            int a;
                                            {
                                                int a;
                                                {
                                                    int a = 20;
                                                    result = a;
                                                    {
                                                        int a;
                                                        a = 5;
                                                        result = result + a;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                result = result + a1;
            }
            return result + a1;
        }
    "#;
    let expected = r#"
        global function main() { 
            a1.2 = 1
            a.3 = 2
            a1.4 = 2
            a.13 = 20
            result.1 = a.13
            a.14 = 5
            tmp.0 = result.1 + a.14
            result.1 = tmp.0
            tmp.1 = result.1 + a1.4
            result.1 = tmp.1
            tmp.2 = result.1 + a1.2
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_use_in_inner_scope() {
    let src = r#"
        int main(void)
        {
            int x;
            {
                x = 3;
            }
            {
                return x;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 3
            return x.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_break() {
    let src = r#"
        int main(void) {
            int a = 10;
            int b = 20;
            for (b = -20; b < 0; b = b + 1) {
                a = a - 1;
                if (a <= 0)
                    break;
            }
            return a == 0 && b == -11;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 10
            b.1 = 20
            tmp.0 = - 20
            b.1 = tmp.0
        
          start_loop_0:
            tmp.1 = b.1 < 0
            if !tmp.1 jump break_loop_0
            tmp.2 = a.0 - 1
            a.0 = tmp.2
            tmp.3 = a.0 <= 0
            if !tmp.3 jump end_if_0
            jump break_loop_0
        
          end_if_0:
        
          continue_loop_0:
            tmp.4 = b.1 + 1
            b.1 = tmp.4
            jump start_loop_0
        
          break_loop_0:
            tmp.5 = a.0 == 0
            if !tmp.5 jump and_false_2
            tmp.9 = - 11
            tmp.8 = b.1 == tmp.9
            if !tmp.8 jump and_false_2
            tmp.7 = 1
            jump and_end_3
        
          and_false_2:
            tmp.7 = 0
        
          and_end_3:
            return tmp.7
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_break_immediate() {
    let src = r#"
        int main(void) {
            int a = 10;
            while ((a = 1))
                break;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 10
        
          continue_loop_0:
            a.0 = 1
            if !1 jump break_loop_0
            jump break_loop_0
            jump continue_loop_0
        
          break_loop_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_continue() {
    let src = r#"
        int main(void) {
            int sum = 0;
            int counter;
            for (int i = 0; i <= 10; i = i + 1) {
                counter = i;
                if (i % 2 == 0)
                    continue;
                sum = sum + 1;
            }
            return sum == 5 && counter == 10;
        }
    "#;
    let expected = r#"
        global function main() { 
            sum.0 = 0
            i.2 = 0
        
          start_loop_0:
            tmp.0 = i.2 <= 10
            if !tmp.0 jump break_loop_0
            counter.1 = i.2
            tmp.1 = i.2 % 2
            tmp.2 = tmp.1 == 0
            if !tmp.2 jump end_if_0
            jump continue_loop_0
        
          end_if_0:
            tmp.3 = sum.0 + 1
            sum.0 = tmp.3
        
          continue_loop_0:
            tmp.4 = i.2 + 1
            i.2 = tmp.4
            jump start_loop_0
        
          break_loop_0:
            tmp.5 = sum.0 == 5
            if !tmp.5 jump and_false_2
            tmp.8 = counter.1 == 10
            if !tmp.8 jump and_false_2
            tmp.7 = 1
            jump and_end_3
        
          and_false_2:
            tmp.7 = 0
        
          and_end_3:
            return tmp.7
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_continue_empty_post() {
    let src = r#"
        int main(void) {
            int sum = 0;
            for (int i = 0; i < 10;) {
                i = i + 1;
                if (i % 2)
                    continue;
                sum = sum + i;
            }
            return sum;
        }
    "#;
    let expected = r#"
        global function main() { 
            sum.0 = 0
            i.1 = 0
        
          start_loop_0:
            tmp.0 = i.1 < 10
            if !tmp.0 jump break_loop_0
            tmp.1 = i.1 + 1
            i.1 = tmp.1
            tmp.2 = i.1 % 2
            if !tmp.2 jump end_if_0
            jump continue_loop_0
        
          end_if_0:
            tmp.3 = sum.0 + i.1
            sum.0 = tmp.3
        
          continue_loop_0:
            jump start_loop_0
        
          break_loop_0:
            return sum.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_do_while() {
    let src = r#"
        int main(void) {
            int a = 1;
            do {
                a = a * 2;
            } while(a < 11);
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
        
          start_loop_0:
            tmp.0 = a.0 * 2
            a.0 = tmp.0
        
          continue_loop_0:
            tmp.1 = a.0 < 11
            if tmp.1 jump start_loop_0
        
          break_loop_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_do_while_break_immediate() {
    let src = r#"
        int main(void) {
            int a = 10;
            do
                break;
            while ((a = 1));
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 10
        
          start_loop_0:
            jump break_loop_0
        
          continue_loop_0:
            a.0 = 1
            if 1 jump start_loop_0
        
          break_loop_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_empty_expression() {
    let src = r#"
        int main(void) {
            return 0;;;
        }
    "#;
    let expected = r#"
        global function main() { 
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_empty_loop_body() {
    let src = r#"
        int main(void) {
            int i = 2147;
            do ; while ((i = i - 5) >= 256);
            return i;
        }
    "#;
    let expected = r#"
        global function main() { 
            i.0 = 2147
        
          start_loop_0:
        
          continue_loop_0:
            tmp.0 = i.0 - 5
            i.0 = tmp.0
            tmp.1 = tmp.0 >= 256
            if tmp.1 jump start_loop_0
        
          break_loop_0:
            return i.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_case_block() {
    let src = r#"
        int main(void) {
            int a = 4;
            int b = 0;
            switch(2) {
                case 2: {
                    int a = 8;
                    b = a;
                }
            }
            return (a == 4 && b == 8);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 4
            b.1 = 0
            tmp.0 = 2 == 2
            if tmp.0 jump switch_0_case__1
            jump break_switch_0
        
          switch_0_case__1:
            a.2 = 8
            b.1 = a.2
        
          break_switch_0:
            tmp.1 = a.0 == 4
            if !tmp.1 jump and_false_0
            tmp.4 = b.1 == 8
            if !tmp.4 jump and_false_0
            tmp.3 = 1
            jump and_end_1
        
          and_false_0:
            tmp.3 = 0
        
          and_end_1:
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_compound_assignment_controlling_expression() {
    let src = r#"
        int main(void) {
            int i = 100;
            int sum = 0;
            do sum += 2;
            while (i -= 1);
            return (i == 0 && sum == 200);
        }
    "#;
    let expected = r#"
        global function main() { 
            i.0 = 100
            sum.1 = 0
        
          start_loop_0:
            tmp.0 = sum.1 + 2
            sum.1 = tmp.0
        
          continue_loop_0:
            tmp.1 = i.0 - 1
            i.0 = tmp.1
            if tmp.1 jump start_loop_0
        
          break_loop_0:
            tmp.2 = i.0 == 0
            if !tmp.2 jump and_false_0
            tmp.5 = sum.1 == 200
            if !tmp.5 jump and_false_0
            tmp.4 = 1
            jump and_end_1
        
          and_false_0:
            tmp.4 = 0
        
          and_end_1:
            return tmp.4
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_compound_assignment_for_loop() {
    let src = r#"
        int main(void) {
            int i = 1;
            for (i *= -1; i >= -100; i -=3)
                ;
            return (i == -103);
        }
    "#;
    let expected = r#"
        global function main() { 
            i.0 = 1
            tmp.1 = - 1
            tmp.0 = i.0 * tmp.1
            i.0 = tmp.0
        
          start_loop_0:
            tmp.3 = - 100
            tmp.2 = i.0 >= tmp.3
            if !tmp.2 jump break_loop_0
        
          continue_loop_0:
            tmp.4 = i.0 - 3
            i.0 = tmp.4
            jump start_loop_0
        
          break_loop_0:
            tmp.6 = - 103
            tmp.5 = i.0 == tmp.6
            return tmp.5
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_duffs_device() {
    let src = r#"
        
        int main(void) {
            int count = 37;
            int iterations = (count + 4) / 5;
            switch (count % 5) {
                case 0:
                    do {
                        count = count - 1;
                        case 4:
                            count = count - 1;
                        case 3:
                            count = count - 1;
                        case 2:
                            count = count - 1;
                        case 1:
                            count = count - 1;
                    } while ((iterations = iterations - 1) > 0);
            }
            return (count == 0 && iterations == 0);
        }
    "#;
    let expected = r#"
        global function main() { 
            count.0 = 37
            tmp.0 = count.0 + 4
            tmp.1 = tmp.0 / 5
            iterations.1 = tmp.1
            tmp.2 = count.0 % 5
            tmp.3 = tmp.2 == 0
            if tmp.3 jump switch_0_case__1
            tmp.4 = tmp.2 == 4
            if tmp.4 jump switch_0_case__3
            tmp.5 = tmp.2 == 3
            if tmp.5 jump switch_0_case__4
            tmp.6 = tmp.2 == 2
            if tmp.6 jump switch_0_case__5
            tmp.7 = tmp.2 == 1
            if tmp.7 jump switch_0_case__6
            jump break_switch_0
        
          switch_0_case__1:
        
          start_loop_2:
            tmp.8 = count.0 - 1
            count.0 = tmp.8
        
          switch_0_case__3:
            tmp.9 = count.0 - 1
            count.0 = tmp.9
        
          switch_0_case__4:
            tmp.10 = count.0 - 1
            count.0 = tmp.10
        
          switch_0_case__5:
            tmp.11 = count.0 - 1
            count.0 = tmp.11
        
          switch_0_case__6:
            tmp.12 = count.0 - 1
            count.0 = tmp.12
        
          continue_loop_2:
            tmp.13 = iterations.1 - 1
            iterations.1 = tmp.13
            tmp.14 = tmp.13 > 0
            if tmp.14 jump start_loop_2
        
          break_loop_2:
        
          break_switch_0:
            tmp.15 = count.0 == 0
            if !tmp.15 jump and_false_0
            tmp.18 = iterations.1 == 0
            if !tmp.18 jump and_false_0
            tmp.17 = 1
            jump and_end_1
        
          and_false_0:
            tmp.17 = 0
        
          and_end_1:
            return tmp.17
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_goto_bypass_condition() {
    let src = r#"
        int main(void) {
            int i = 1;
            do {
            while_start:
                i = i + 1;
                if (i < 10)
                    goto while_start;
            } while (0);
            return i;
        }
    "#;
    let expected = r#"
        global function main() { 
            i.0 = 1
        
          start_loop_0:
        
          while_start_1:
            tmp.0 = i.0 + 1
            i.0 = tmp.0
            tmp.1 = i.0 < 10
            if !tmp.1 jump end_if_0
            jump while_start_1
        
          end_if_0:
        
          continue_loop_0:
            if 0 jump start_loop_0
        
          break_loop_0:
            return i.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_goto_bypass_init_exp() {
    let src = r#"
        int main(void) {
            int i = 0;
            goto target;
            for (i = 5; i < 10; i = i + 1)
            target:
                if (i == 0)
                    return 1;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            i.0 = 0
            jump target_1
            i.0 = 5
        
          start_loop_0:
            tmp.0 = i.0 < 10
            if !tmp.0 jump break_loop_0
        
          target_1:
            tmp.1 = i.0 == 0
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
        
          continue_loop_0:
            tmp.2 = i.0 + 1
            i.0 = tmp.2
            jump start_loop_0
        
          break_loop_0:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_goto_bypass_post_exp() {
    let src = r#"
        int main(void) {
            int sum = 0;
            for (int i = 0;; i = 0) {
            lbl:
                sum = sum + 1;
                i = i + 1;
                if (i > 10)
                    break;
                goto lbl;
            }
            return sum;
        }
    "#;
    let expected = r#"
        global function main() { 
            sum.0 = 0
            i.1 = 0
        
          start_loop_0:
            if !1 jump break_loop_0
        
          lbl_1:
            tmp.0 = sum.0 + 1
            sum.0 = tmp.0
            tmp.1 = i.1 + 1
            i.1 = tmp.1
            tmp.2 = i.1 > 10
            if !tmp.2 jump end_if_0
            jump break_loop_0
        
          end_if_0:
            jump lbl_1
        
          continue_loop_0:
            i.1 = 0
            jump start_loop_0
        
          break_loop_0:
            return sum.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_label_loop_body() {
    let src = r#"
        
        int main(void) {
            int result = 0;
            goto label;
            while (0)
            label: { result = 1; }
            return result;
        }
    "#;
    let expected = r#"
        global function main() { 
            result.0 = 0
            jump label_1
        
          continue_loop_0:
            if !0 jump break_loop_0
        
          label_1:
            result.0 = 1
            jump continue_loop_0
        
          break_loop_0:
            return result.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_label_loops_breaks_and_continues() {
    let src = r#"
        int main(void) {
            int sum = 0;
            goto do_label;
            return 0;
        do_label:
            do {
                sum = 1;
                goto while_label;
            } while (1);
        while_label:
            while (1) {
                sum = sum + 1;
                goto break_label;
                return 0;
            break_label:
                break;
            };
            goto for_label;
            return 0;
        for_label:
            for (int i = 0; i < 10; i = i + 1) {
                sum = sum + 1;
                goto continue_label;
                return 0;
            continue_label:
                continue;
                return 0;
            }
            return sum;
        }
    "#;
    let expected = r#"
        global function main() { 
            sum.0 = 0
            jump do_label_0
            return 0
        
          do_label_0:
        
          start_loop_1:
            sum.0 = 1
            jump while_label_2
        
          continue_loop_1:
            if 1 jump start_loop_1
        
          break_loop_1:
        
          while_label_2:
        
          continue_loop_3:
            if !1 jump break_loop_3
            tmp.0 = sum.0 + 1
            sum.0 = tmp.0
            jump break_label_4
            return 0
        
          break_label_4:
            jump break_loop_3
            jump continue_loop_3
        
          break_loop_3:
            jump for_label_5
            return 0
        
          for_label_5:
            i.1 = 0
        
          start_loop_6:
            tmp.1 = i.1 < 10
            if !tmp.1 jump break_loop_6
            tmp.2 = sum.0 + 1
            sum.0 = tmp.2
            jump continue_label_7
            return 0
        
          continue_label_7:
            jump continue_loop_6
            return 0
        
          continue_loop_6:
            tmp.3 = i.1 + 1
            i.1 = tmp.3
            jump start_loop_6
        
          break_loop_6:
            return sum.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_loop_header_postfix_and_prefix() {
    let src = r#"
        int main(void) {
            int i = 100;
            int count = 0;
            while (i--) count++;
            if (count != 100)
                return 0;
            i = 100;
            count = 0;
            while (--i) count++;
            if (count != 99)
                return 0;
            return 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            i.0 = 100
            count.1 = 0
        
          continue_loop_0:
            tmp.0 = i.0
            tmp.1 = dec i.0
            i.0 = tmp.1
            if !tmp.0 jump break_loop_0
            tmp.2 = count.1
            tmp.3 = inc count.1
            count.1 = tmp.3
            jump continue_loop_0
        
          break_loop_0:
            tmp.4 = count.1 != 100
            if !tmp.4 jump end_if_0
            return 0
        
          end_if_0:
            i.0 = 100
            count.1 = 0
        
          continue_loop_1:
            tmp.5 = dec i.0
            i.0 = tmp.5
            if !tmp.5 jump break_loop_1
            tmp.6 = count.1
            tmp.7 = inc count.1
            count.1 = tmp.7
            jump continue_loop_1
        
          break_loop_1:
            tmp.8 = count.1 != 99
            if !tmp.8 jump end_if_2
            return 0
        
          end_if_2:
            return 1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_loop_in_switch() {
    let src = r#"
        int main(void) {
            int cond = 10;
            switch (cond) {
                case 1:
                    return 0;
                case 10:
                    for (int i = 0; i < 5; i = i + 1) {
                        cond = cond - 1;
                        if (cond == 8)
                            break;
                    }
                    return 123;
                default:
                    return 2;
            }
            return 3;
        }
    "#;
    let expected = r#"
        global function main() { 
            cond.0 = 10
            tmp.0 = cond.0 == 1
            if tmp.0 jump switch_0_case__1
            tmp.1 = cond.0 == 10
            if tmp.1 jump switch_0_case__2
            jump switch_0_default_4
            jump break_switch_0
        
          switch_0_case__1:
            return 0
        
          switch_0_case__2:
            i.1 = 0
        
          start_loop_3:
            tmp.2 = i.1 < 5
            if !tmp.2 jump break_loop_3
            tmp.3 = cond.0 - 1
            cond.0 = tmp.3
            tmp.4 = cond.0 == 8
            if !tmp.4 jump end_if_0
            jump break_loop_3
        
          end_if_0:
        
          continue_loop_3:
            tmp.5 = i.1 + 1
            i.1 = tmp.5
            jump start_loop_3
        
          break_loop_3:
            return 123
        
          switch_0_default_4:
            return 2
        
          break_switch_0:
            return 3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_post_exp_incr() {
    let src = r#"
        int main(void) {
            int product = 1;
            for (int i = 0; i < 10; i++) {
                product = product + 2;
            }
            return product;
        }
    "#;
    let expected = r#"
        global function main() { 
            product.0 = 1
            i.1 = 0
        
          start_loop_0:
            tmp.0 = i.1 < 10
            if !tmp.0 jump break_loop_0
            tmp.1 = product.0 + 2
            product.0 = tmp.1
        
          continue_loop_0:
            tmp.2 = i.1
            tmp.3 = inc i.1
            i.1 = tmp.3
            jump start_loop_0
        
          break_loop_0:
            return product.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch() {
    let src = r#"
        
        int main(void) {
            switch(3) {
                case 0: return 0;
                case 1: return 1;
                case 3: return 3;
                case 5: return 5;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 3 == 0
            if tmp.0 jump switch_0_case__1
            tmp.1 = 3 == 1
            if tmp.1 jump switch_0_case__2
            tmp.2 = 3 == 3
            if tmp.2 jump switch_0_case__3
            tmp.3 = 3 == 5
            if tmp.3 jump switch_0_case__4
            jump break_switch_0
        
          switch_0_case__1:
            return 0
        
          switch_0_case__2:
            return 1
        
          switch_0_case__3:
            return 3
        
          switch_0_case__4:
            return 5
        
          break_switch_0:
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_assign_in_condition() {
    let src = r#"
        int main(void) {
            int a = 0;
            switch (a = 1) {
                case 0:
                    return 10;
                case 1:
                    a = a * 2;
                    break;
                default:
                    a = 99;
            }
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            a.0 = 1
            tmp.0 = 1 == 0
            if tmp.0 jump switch_0_case__1
            tmp.1 = 1 == 1
            if tmp.1 jump switch_0_case__2
            jump switch_0_default_3
            jump break_switch_0
        
          switch_0_case__1:
            return 10
        
          switch_0_case__2:
            tmp.2 = a.0 * 2
            a.0 = tmp.2
            jump break_switch_0
        
          switch_0_default_3:
            a.0 = 99
        
          break_switch_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_break() {
    let src = r#"
        int main(void) {
            int a = 5;
            switch (a) {
                case 5:
                    a = 10;
                    break;
                case 6:
                    a = 0;
                    break;
            }
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 5
            tmp.0 = a.0 == 5
            if tmp.0 jump switch_0_case__1
            tmp.1 = a.0 == 6
            if tmp.1 jump switch_0_case__2
            jump break_switch_0
        
          switch_0_case__1:
            a.0 = 10
            jump break_switch_0
        
          switch_0_case__2:
            a.0 = 0
            jump break_switch_0
        
          break_switch_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_decl() {
    let src = r#"
        int main(void) {
            int a = 3;
            int b = 0;
            switch(a) {
                int a = (b = 5);
            case 3:
                a = 4;
                b = b + a;
            }
            return a == 3 && b == 4;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 3
            b.1 = 0
            tmp.0 = a.0 == 3
            if tmp.0 jump switch_0_case__1
            jump break_switch_0
            b.1 = 5
            a.2 = 5
        
          switch_0_case__1:
            a.2 = 4
            tmp.1 = b.1 + a.2
            b.1 = tmp.1
        
          break_switch_0:
            tmp.2 = a.0 == 3
            if !tmp.2 jump and_false_0
            tmp.5 = b.1 == 4
            if !tmp.5 jump and_false_0
            tmp.4 = 1
            jump and_end_1
        
          and_false_0:
            tmp.4 = 0
        
          and_end_1:
            return tmp.4
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_default() {
    let src = r#"
        int main(void) {
            int a = 0;
            switch(a) {
                case 1:
                    return 1;
                case 2:
                    return 9;
                case 4:
                    a = 11;
                    break;
                default:
                    a = 22;
            }
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            tmp.0 = a.0 == 1
            if tmp.0 jump switch_0_case__1
            tmp.1 = a.0 == 2
            if tmp.1 jump switch_0_case__2
            tmp.2 = a.0 == 4
            if tmp.2 jump switch_0_case__3
            jump switch_0_default_4
            jump break_switch_0
        
          switch_0_case__1:
            return 1
        
          switch_0_case__2:
            return 9
        
          switch_0_case__3:
            a.0 = 11
            jump break_switch_0
        
          switch_0_default_4:
            a.0 = 22
        
          break_switch_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_default_fallthrough() {
    let src = r#"
        int main(void) {
            int a = 5;
            switch(0) {
                default:
                    a = 0;
                case 1:
                    return a;
            }
            return a + 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 5
            tmp.0 = 0 == 1
            if tmp.0 jump switch_0_case__2
            jump switch_0_default_1
            jump break_switch_0
        
          switch_0_default_1:
            a.0 = 0
        
          switch_0_case__2:
            return a.0
        
          break_switch_0:
            tmp.1 = a.0 + 1
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_default_not_last() {
    let src = r#"
        int main(void) {
            int a;
            int b = a = 7;
            switch (a + b) {
                default: return 0;
                case 2: return 1;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 7
            b.1 = 7
            tmp.0 = a.0 + b.1
            tmp.1 = tmp.0 == 2
            if tmp.1 jump switch_0_case__2
            jump switch_0_default_1
            jump break_switch_0
        
          switch_0_default_1:
            return 0
        
          switch_0_case__2:
            return 1
        
          break_switch_0:
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_default_only() {
    let src = r#"
        int main(void) {
            int a = 1;
            switch(a) default: return 1;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            jump switch_0_default_1
            jump break_switch_0
        
          switch_0_default_1:
            return 1
        
          break_switch_0:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_empty() {
    let src = r#"
        int main(void) {
            int x = 10;
            switch(x = x + 1) {
            }
            switch(x = x + 1)
            ;
            return x;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 10
            tmp.0 = x.0 + 1
            x.0 = tmp.0
            jump break_switch_0
        
          break_switch_0:
            tmp.1 = x.0 + 1
            x.0 = tmp.1
            jump break_switch_1
        
          break_switch_1:
            return x.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_fallthrough() {
    let src = r#"
        int main(void) {
            int a = 4;
            int b = 9;
            int c = 0;
            switch (a ? b : 7) {
                case 0:
                    return 5;
                case 7:
                    c = 1;
                case 9:
                    c = 2;
                case 1:
                    c = c + 4;
            }
            return c;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 4
            b.1 = 9
            c.2 = 0
            if !a.0 jump else_1
            tmp.0 = b.1
            jump end_if_0
        
          else_1:
            tmp.0 = 7
        
          end_if_0:
            tmp.1 = tmp.0 == 0
            if tmp.1 jump switch_0_case__1
            tmp.2 = tmp.0 == 7
            if tmp.2 jump switch_0_case__2
            tmp.3 = tmp.0 == 9
            if tmp.3 jump switch_0_case__3
            tmp.4 = tmp.0 == 1
            if tmp.4 jump switch_0_case__4
            jump break_switch_0
        
          switch_0_case__1:
            return 5
        
          switch_0_case__2:
            c.2 = 1
        
          switch_0_case__3:
            c.2 = 2
        
          switch_0_case__4:
            tmp.5 = c.2 + 4
            c.2 = tmp.5
        
          break_switch_0:
            return c.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_goto_mid_case() {
    let src = r#"
        int main(void) {
            int a = 0;
            goto mid_case;
            switch (4) {
                case 4:
                    a = 5;
                mid_case:
                    a = a + 1;
                    return a;
            }
            return 100;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            jump mid_case_2
            tmp.0 = 4 == 4
            if tmp.0 jump switch_0_case__1
            jump break_switch_0
        
          switch_0_case__1:
            a.0 = 5
        
          mid_case_2:
            tmp.1 = a.0 + 1
            a.0 = tmp.1
            return a.0
        
          break_switch_0:
            return 100
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_in_loop() {
    let src = r#"
        int main(void) {
            int acc = 0;
            int ctr = 0;
            for (int i = 0; i < 10; i = i + 1) {
                switch(i) {
                    case 0:
                        acc = 2;
                        break;
                    case 1:
                        acc = acc * 3;
                        break;
                    case 2:
                        acc = acc * 4;
                        break;
                    default:
                        acc = acc + 1;
                }
                ctr = ctr + 1;
            }
            return ctr == 10 && acc == 31;
        }
    "#;
    let expected = r#"
        global function main() { 
            acc.0 = 0
            ctr.1 = 0
            i.2 = 0
        
          start_loop_0:
            tmp.0 = i.2 < 10
            if !tmp.0 jump break_loop_0
            tmp.1 = i.2 == 0
            if tmp.1 jump switch_1_case__2
            tmp.2 = i.2 == 1
            if tmp.2 jump switch_1_case__3
            tmp.3 = i.2 == 2
            if tmp.3 jump switch_1_case__4
            jump switch_1_default_5
            jump break_switch_1
        
          switch_1_case__2:
            acc.0 = 2
            jump break_switch_1
        
          switch_1_case__3:
            tmp.4 = acc.0 * 3
            acc.0 = tmp.4
            jump break_switch_1
        
          switch_1_case__4:
            tmp.5 = acc.0 * 4
            acc.0 = tmp.5
            jump break_switch_1
        
          switch_1_default_5:
            tmp.6 = acc.0 + 1
            acc.0 = tmp.6
        
          break_switch_1:
            tmp.7 = ctr.1 + 1
            ctr.1 = tmp.7
        
          continue_loop_0:
            tmp.8 = i.2 + 1
            i.2 = tmp.8
            jump start_loop_0
        
          break_loop_0:
            tmp.9 = ctr.1 == 10
            if !tmp.9 jump and_false_0
            tmp.12 = acc.0 == 31
            if !tmp.12 jump and_false_0
            tmp.11 = 1
            jump and_end_1
        
          and_false_0:
            tmp.11 = 0
        
          and_end_1:
            return tmp.11
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_nested_cases() {
    let src = r#"
        int main(void) {
            int switch1 = 0;
            int switch2 = 0;
            int switch3 = 0;
            switch(3) {
                case 0: return 0;
                case 1: if (0) {
                    case 3: switch1 = 1; break;
                }
                default: return 0;
            }
            switch(4) {
                case 0: return 0;
                if (1) {
                    return 0;
                } else {
                    case 4: switch2 = 1; break;
                }
                default: return 0;
            }
            switch (5) {
                for (int i = 0; i < 10; i = i + 1) {
                    switch1 = 0;
                    case 5: switch3 = 1; break;
                    default: return 0;
                }
            }
            return (switch1 && switch2 && switch3);
        }
    "#;
    let expected = r#"
        global function main() { 
            switch1.0 = 0
            switch2.1 = 0
            switch3.2 = 0
            tmp.0 = 3 == 0
            if tmp.0 jump switch_0_case__1
            tmp.1 = 3 == 1
            if tmp.1 jump switch_0_case__2
            tmp.2 = 3 == 3
            if tmp.2 jump switch_0_case__3
            jump switch_0_default_4
            jump break_switch_0
        
          switch_0_case__1:
            return 0
        
          switch_0_case__2:
            if !0 jump end_if_0
        
          switch_0_case__3:
            switch1.0 = 1
            jump break_switch_0
        
          end_if_0:
        
          switch_0_default_4:
            return 0
        
          break_switch_0:
            tmp.3 = 4 == 0
            if tmp.3 jump switch_5_case__6
            tmp.4 = 4 == 4
            if tmp.4 jump switch_5_case__7
            jump switch_5_default_8
            jump break_switch_5
        
          switch_5_case__6:
            return 0
            if !1 jump else_3
            return 0
            jump end_if_2
        
          else_3:
        
          switch_5_case__7:
            switch2.1 = 1
            jump break_switch_5
        
          end_if_2:
        
          switch_5_default_8:
            return 0
        
          break_switch_5:
            tmp.5 = 5 == 5
            if tmp.5 jump switch_9_case__11
            jump switch_9_default_12
            jump break_switch_9
            i.3 = 0
        
          start_loop_10:
            tmp.6 = i.3 < 10
            if !tmp.6 jump break_loop_10
            switch1.0 = 0
        
          switch_9_case__11:
            switch3.2 = 1
            jump break_loop_10
        
          switch_9_default_12:
            return 0
        
          continue_loop_10:
            tmp.7 = i.3 + 1
            i.3 = tmp.7
            jump start_loop_10
        
          break_loop_10:
        
          break_switch_9:
            if !switch1.0 jump and_false_4
            if !switch2.1 jump and_false_4
            tmp.9 = 1
            jump and_end_5
        
          and_false_4:
            tmp.9 = 0
        
          and_end_5:
            if !tmp.9 jump and_false_6
            if !switch3.2 jump and_false_6
            tmp.11 = 1
            jump and_end_7
        
          and_false_6:
            tmp.11 = 0
        
          and_end_7:
            return tmp.11
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_nested_not_taken() {
    let src = r#"
        
        int main(void) {
            int a = 0;
            switch(a) {
                case 1:
                    switch(a) {
                        case 0: return 0;
                        default: return 0;
                    }
                default: a = 2;
            }
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            tmp.0 = a.0 == 1
            if tmp.0 jump switch_0_case__1
            jump switch_0_default_5
            jump break_switch_0
        
          switch_0_case__1:
            tmp.1 = a.0 == 0
            if tmp.1 jump switch_2_case__3
            jump switch_2_default_4
            jump break_switch_2
        
          switch_2_case__3:
            return 0
        
          switch_2_default_4:
            return 0
        
          break_switch_2:
        
          switch_0_default_5:
            a.0 = 2
        
          break_switch_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_nested_switch() {
    let src = r#"
        int main(void){
            switch(3) {
                case 0:
                    return 0;
                case 3: {
                    switch(4) {
                        case 3: return 0;
                        case 4: return 1;
                        default: return 0;
                    }
                }
                case 4: return 0;
                default: return 0;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 3 == 0
            if tmp.0 jump switch_0_case__1
            tmp.1 = 3 == 3
            if tmp.1 jump switch_0_case__2
            tmp.2 = 3 == 4
            if tmp.2 jump switch_0_case__7
            jump switch_0_default_8
            jump break_switch_0
        
          switch_0_case__1:
            return 0
        
          switch_0_case__2:
            tmp.3 = 4 == 3
            if tmp.3 jump switch_3_case__4
            tmp.4 = 4 == 4
            if tmp.4 jump switch_3_case__5
            jump switch_3_default_6
            jump break_switch_3
        
          switch_3_case__4:
            return 0
        
          switch_3_case__5:
            return 1
        
          switch_3_default_6:
            return 0
        
          break_switch_3:
        
          switch_0_case__7:
            return 0
        
          switch_0_default_8:
            return 0
        
          break_switch_0:
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_no_case() {
    let src = r#"
        int main(void) {
            int a = 4;
            switch(a)
                return 0;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 4
            jump break_switch_0
            return 0
        
          break_switch_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_not_taken() {
    let src = r#"
        int main(void) {
            int a = 1;
            switch(a) {
                case 0: return 0;
                case 2: return 0;
                case 3: return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            tmp.0 = a.0 == 0
            if tmp.0 jump switch_0_case__1
            tmp.1 = a.0 == 2
            if tmp.1 jump switch_0_case__2
            tmp.2 = a.0 == 3
            if tmp.2 jump switch_0_case__3
            jump break_switch_0
        
          switch_0_case__1:
            return 0
        
          switch_0_case__2:
            return 0
        
          switch_0_case__3:
            return 0
        
          break_switch_0:
            return 1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_single_case() {
    let src = r#"
        int main(void) {
            int a = 1;
            switch(a) case 1: return 1;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1
            tmp.0 = a.0 == 1
            if tmp.0 jump switch_0_case__1
            jump break_switch_0
        
          switch_0_case__1:
            return 1
        
          break_switch_0:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_with_continue() {
    let src = r#"
        int main(void) {
            switch(4) {
                case 0:
                    return 0;
                case 4: {
                    int acc = 0;
                    for (int i = 0; i < 10; i = i + 1) {
                        if (i % 2)
                            continue;
                        acc = acc + 1;
                    }
                    return acc;
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 4 == 0
            if tmp.0 jump switch_0_case__1
            tmp.1 = 4 == 4
            if tmp.1 jump switch_0_case__2
            jump break_switch_0
        
          switch_0_case__1:
            return 0
        
          switch_0_case__2:
            acc.0 = 0
            i.1 = 0
        
          start_loop_3:
            tmp.2 = i.1 < 10
            if !tmp.2 jump break_loop_3
            tmp.3 = i.1 % 2
            if !tmp.3 jump end_if_0
            jump continue_loop_3
        
          end_if_0:
            tmp.4 = acc.0 + 1
            acc.0 = tmp.4
        
          continue_loop_3:
            tmp.5 = i.1 + 1
            i.1 = tmp.5
            jump start_loop_3
        
          break_loop_3:
            return acc.0
        
          break_switch_0:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_with_continue_2() {
    let src = r#"
        int main(void) {
            int sum = 0;
            for (int i = 0; i < 10; i = i + 1) {
                switch(i % 2) {
                    case 0: continue;
                    default: sum = sum + 1;
                }
            }
            return sum;
        }
    "#;
    let expected = r#"
        global function main() { 
            sum.0 = 0
            i.1 = 0
        
          start_loop_0:
            tmp.0 = i.1 < 10
            if !tmp.0 jump break_loop_0
            tmp.1 = i.1 % 2
            tmp.2 = tmp.1 == 0
            if tmp.2 jump switch_1_case__2
            jump switch_1_default_3
            jump break_switch_1
        
          switch_1_case__2:
            jump continue_loop_0
        
          switch_1_default_3:
            tmp.3 = sum.0 + 1
            sum.0 = tmp.3
        
          break_switch_1:
        
          continue_loop_0:
            tmp.4 = i.1 + 1
            i.1 = tmp.4
            jump start_loop_0
        
          break_loop_0:
            return sum.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_for() {
    let src = r#"
        int main(void) {
            int a = 12345;
            int i;
            for (i = 5; i >= 0; i = i - 1)
                a = a / 3;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 12345
            i.1 = 5
        
          start_loop_0:
            tmp.0 = i.1 >= 0
            if !tmp.0 jump break_loop_0
            tmp.1 = a.0 / 3
            a.0 = tmp.1
        
          continue_loop_0:
            tmp.2 = i.1 - 1
            i.1 = tmp.2
            jump start_loop_0
        
          break_loop_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_for_absent_condition() {
    let src = r#"
        int main(void) {
            for (int i = 400; ; i = i - 100)
                if (i == 100)
                    return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            i.0 = 400
        
          start_loop_0:
            if !1 jump break_loop_0
            tmp.0 = i.0 == 100
            if !tmp.0 jump end_if_0
            return 0
        
          end_if_0:
        
          continue_loop_0:
            tmp.1 = i.0 - 100
            i.0 = tmp.1
            jump start_loop_0
        
          break_loop_0:
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_for_absent_post() {
    let src = r#"
        int main(void) {
            int a = -2147;
            for (; a % 5 != 0;) {
                a = a + 1;
            }
            return a % 5 || a > 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 2147
            a.0 = tmp.0
        
          start_loop_0:
            tmp.1 = a.0 % 5
            tmp.2 = tmp.1 != 0
            if !tmp.2 jump break_loop_0
            tmp.3 = a.0 + 1
            a.0 = tmp.3
        
          continue_loop_0:
            jump start_loop_0
        
          break_loop_0:
            tmp.4 = a.0 % 5
            if tmp.4 jump or_true_0
            tmp.7 = a.0 > 0
            if tmp.7 jump or_true_0
            tmp.6 = 0
            jump or_end_1
        
          or_true_0:
            tmp.6 = 1
        
          or_end_1:
            return tmp.6
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_for_decl() {
    let src = r#"
        int main(void) {
            int a = 0;
            for (int i = -100; i <= 0; i = i + 1)
                a = a + 1;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            tmp.0 = - 100
            i.1 = tmp.0
        
          start_loop_0:
            tmp.1 = i.1 <= 0
            if !tmp.1 jump break_loop_0
            tmp.2 = a.0 + 1
            a.0 = tmp.2
        
          continue_loop_0:
            tmp.3 = i.1 + 1
            i.1 = tmp.3
            jump start_loop_0
        
          break_loop_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_for_nested_shadow() {
    let src = r#"
        int main(void) {
            int i = 0;
            int j = 0;
            int k = 1;
            for (int i = 100; i > 0; i = i - 1) {
                int i = 1;
                int j = i + k;
                k = j;
            }
            return k == 101 && i == 0 && j == 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            i.0 = 0
            j.1 = 0
            k.2 = 1
            i.3 = 100
        
          start_loop_0:
            tmp.0 = i.3 > 0
            if !tmp.0 jump break_loop_0
            i.4 = 1
            tmp.1 = i.4 + k.2
            j.5 = tmp.1
            k.2 = j.5
        
          continue_loop_0:
            tmp.2 = i.3 - 1
            i.3 = tmp.2
            jump start_loop_0
        
          break_loop_0:
            tmp.3 = k.2 == 101
            if !tmp.3 jump and_false_0
            tmp.6 = i.0 == 0
            if !tmp.6 jump and_false_0
            tmp.5 = 1
            jump and_end_1
        
          and_false_0:
            tmp.5 = 0
        
          and_end_1:
            if !tmp.5 jump and_false_2
            tmp.9 = j.1 == 0
            if !tmp.9 jump and_false_2
            tmp.8 = 1
            jump and_end_3
        
          and_false_2:
            tmp.8 = 0
        
          and_end_3:
            return tmp.8
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_for_shadow() {
    let src = r#"
        int main(void) {
            int shadow = 1;
            int acc = 0;
            for (int shadow = 0; shadow < 10; shadow = shadow + 1) {
                acc = acc + shadow;
            }
            return acc == 45 && shadow == 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            shadow.0 = 1
            acc.1 = 0
            shadow.2 = 0
        
          start_loop_0:
            tmp.0 = shadow.2 < 10
            if !tmp.0 jump break_loop_0
            tmp.1 = acc.1 + shadow.2
            acc.1 = tmp.1
        
          continue_loop_0:
            tmp.2 = shadow.2 + 1
            shadow.2 = tmp.2
            jump start_loop_0
        
          break_loop_0:
            tmp.3 = acc.1 == 45
            if !tmp.3 jump and_false_0
            tmp.6 = shadow.0 == 1
            if !tmp.6 jump and_false_0
            tmp.5 = 1
            jump and_end_1
        
          and_false_0:
            tmp.5 = 0
        
          and_end_1:
            return tmp.5
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_multi_break() {
    let src = r#"
        int main(void) {
            int i = 0;
            while (1) {
                i = i + 1;
                if (i > 10)
                    break;
            }
            int j = 10;
            while (1) {
                j = j - 1;
                if (j < 0)
                    break;
            }
            int result = j == -1 && i == 11;
            return result;
        }
    "#;
    let expected = r#"
        global function main() { 
            i.0 = 0
        
          continue_loop_0:
            if !1 jump break_loop_0
            tmp.0 = i.0 + 1
            i.0 = tmp.0
            tmp.1 = i.0 > 10
            if !tmp.1 jump end_if_0
            jump break_loop_0
        
          end_if_0:
            jump continue_loop_0
        
          break_loop_0:
            j.1 = 10
        
          continue_loop_1:
            if !1 jump break_loop_1
            tmp.2 = j.1 - 1
            j.1 = tmp.2
            tmp.3 = j.1 < 0
            if !tmp.3 jump end_if_2
            jump break_loop_1
        
          end_if_2:
            jump continue_loop_1
        
          break_loop_1:
            tmp.5 = - 1
            tmp.4 = j.1 == tmp.5
            if !tmp.4 jump and_false_4
            tmp.8 = i.0 == 11
            if !tmp.8 jump and_false_4
            tmp.7 = 1
            jump and_end_5
        
          and_false_4:
            tmp.7 = 0
        
          and_end_5:
            result.2 = tmp.7
            return result.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_multi_continue_same_loop() {
    let src = r#"
        int main(void) {
            int x = 10;
            int y = 0;
            int z = 0;
            do {
                z = z + 1;
                if (x <= 0)
                    continue;
                x = x - 1;
                if (y >= 10)
                    continue;
                y = y + 1;
            } while (z != 50);
            return z == 50 && x == 0 && y == 10;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 10
            y.1 = 0
            z.2 = 0
        
          start_loop_0:
            tmp.0 = z.2 + 1
            z.2 = tmp.0
            tmp.1 = x.0 <= 0
            if !tmp.1 jump end_if_0
            jump continue_loop_0
        
          end_if_0:
            tmp.2 = x.0 - 1
            x.0 = tmp.2
            tmp.3 = y.1 >= 10
            if !tmp.3 jump end_if_2
            jump continue_loop_0
        
          end_if_2:
            tmp.4 = y.1 + 1
            y.1 = tmp.4
        
          continue_loop_0:
            tmp.5 = z.2 != 50
            if tmp.5 jump start_loop_0
        
          break_loop_0:
            tmp.6 = z.2 == 50
            if !tmp.6 jump and_false_4
            tmp.9 = x.0 == 0
            if !tmp.9 jump and_false_4
            tmp.8 = 1
            jump and_end_5
        
          and_false_4:
            tmp.8 = 0
        
          and_end_5:
            if !tmp.8 jump and_false_6
            tmp.12 = y.1 == 10
            if !tmp.12 jump and_false_6
            tmp.11 = 1
            jump and_end_7
        
          and_false_6:
            tmp.11 = 0
        
          and_end_7:
            return tmp.11
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_nested_break() {
    let src = r#"
        int main(void) {
            int ans = 0;
            for (int i = 0; i < 10; i = i + 1)
                for (int j = 0; j < 10; j = j + 1)
                    if ((i / 2)*2 == i)
                        break;
                    else
                        ans = ans + i;
            return ans;
        }
    "#;
    let expected = r#"
        global function main() { 
            ans.0 = 0
            i.1 = 0
        
          start_loop_0:
            tmp.0 = i.1 < 10
            if !tmp.0 jump break_loop_0
            j.2 = 0
        
          start_loop_1:
            tmp.1 = j.2 < 10
            if !tmp.1 jump break_loop_1
            tmp.2 = i.1 / 2
            tmp.3 = tmp.2 * 2
            tmp.4 = tmp.3 == i.1
            if !tmp.4 jump else_1
            jump break_loop_1
            jump end_if_0
        
          else_1:
            tmp.5 = ans.0 + i.1
            ans.0 = tmp.5
        
          end_if_0:
        
          continue_loop_1:
            tmp.6 = j.2 + 1
            j.2 = tmp.6
            jump start_loop_1
        
          break_loop_1:
        
          continue_loop_0:
            tmp.7 = i.1 + 1
            i.1 = tmp.7
            jump start_loop_0
        
          break_loop_0:
            return ans.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_nested_continue() {
    let src = r#"
        int main(void) {
            int x = 5;
            int acc = 0;
            while (x >= 0) {
                int i = x;
                while (i <= 10) {
                    i = i + 1;
                    if (i % 2)
                        continue;
                    acc = acc + 1;
                }
                x = x - 1;
            }
            return acc;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 5
            acc.1 = 0
        
          continue_loop_0:
            tmp.0 = x.0 >= 0
            if !tmp.0 jump break_loop_0
            i.2 = x.0
        
          continue_loop_1:
            tmp.1 = i.2 <= 10
            if !tmp.1 jump break_loop_1
            tmp.2 = i.2 + 1
            i.2 = tmp.2
            tmp.3 = i.2 % 2
            if !tmp.3 jump end_if_0
            jump continue_loop_1
        
          end_if_0:
            tmp.4 = acc.1 + 1
            acc.1 = tmp.4
            jump continue_loop_1
        
          break_loop_1:
            tmp.5 = x.0 - 1
            x.0 = tmp.5
            jump continue_loop_0
        
          break_loop_0:
            return acc.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_nested_loop() {
    let src = r#"
        int main(void) {
            int acc = 0;
            int x = 100;
            while (x) {
                int y = 10;
                x = x - y;
                while (y) {
                    acc = acc + 1;
                    y = y - 1;
                }
            }
            return acc == 100 && x == 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            acc.0 = 0
            x.1 = 100
        
          continue_loop_0:
            if !x.1 jump break_loop_0
            y.2 = 10
            tmp.0 = x.1 - y.2
            x.1 = tmp.0
        
          continue_loop_1:
            if !y.2 jump break_loop_1
            tmp.1 = acc.0 + 1
            acc.0 = tmp.1
            tmp.2 = y.2 - 1
            y.2 = tmp.2
            jump continue_loop_1
        
          break_loop_1:
            jump continue_loop_0
        
          break_loop_0:
            tmp.3 = acc.0 == 100
            if !tmp.3 jump and_false_0
            tmp.6 = x.1 == 0
            if !tmp.6 jump and_false_0
            tmp.5 = 1
            jump and_end_1
        
          and_false_0:
            tmp.5 = 0
        
          and_end_1:
            return tmp.5
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_null_for_header() {
    let src = r#"
        int main(void) {
            int a = 0;
            for (; ; ) {
                a = a + 1;
                if (a > 3)
                    break;
            }
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
        
          start_loop_0:
            if !1 jump break_loop_0
            tmp.0 = a.0 + 1
            a.0 = tmp.0
            tmp.1 = a.0 > 3
            if !tmp.1 jump end_if_0
            jump break_loop_0
        
          end_if_0:
        
          continue_loop_0:
            jump start_loop_0
        
          break_loop_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_while() {
    let src = r#"
        int main(void) {
            int a = 0;
            while (a < 5)
                a = a + 2;
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
        
          continue_loop_0:
            tmp.0 = a.0 < 5
            if !tmp.0 jump break_loop_0
            tmp.1 = a.0 + 2
            a.0 = tmp.1
            jump continue_loop_0
        
          break_loop_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_dont_clobber_edx() {
    let src = r#"
        int x(int a, int b, int c, int d, int e, int f) {
            return a == 1 && b == 2 && c == 3 && d == 4 && e == 5 && f == 6;
        }
        int main(void) {
            int a = 4;
            return x(1, 2, 3, 4, 5, 24 / a);
        }
    "#;
    let expected = r#"
        global function x(a.0, b.1, c.2, d.3, e.4, f.5) { 
            tmp.0 = a.0 == 1
            if !tmp.0 jump and_false_0
            tmp.3 = b.1 == 2
            if !tmp.3 jump and_false_0
            tmp.2 = 1
            jump and_end_1
        
          and_false_0:
            tmp.2 = 0
        
          and_end_1:
            if !tmp.2 jump and_false_2
            tmp.6 = c.2 == 3
            if !tmp.6 jump and_false_2
            tmp.5 = 1
            jump and_end_3
        
          and_false_2:
            tmp.5 = 0
        
          and_end_3:
            if !tmp.5 jump and_false_4
            tmp.9 = d.3 == 4
            if !tmp.9 jump and_false_4
            tmp.8 = 1
            jump and_end_5
        
          and_false_4:
            tmp.8 = 0
        
          and_end_5:
            if !tmp.8 jump and_false_6
            tmp.12 = e.4 == 5
            if !tmp.12 jump and_false_6
            tmp.11 = 1
            jump and_end_7
        
          and_false_6:
            tmp.11 = 0
        
          and_end_7:
            if !tmp.11 jump and_false_8
            tmp.15 = f.5 == 6
            if !tmp.15 jump and_false_8
            tmp.14 = 1
            jump and_end_9
        
          and_false_8:
            tmp.14 = 0
        
          and_end_9:
            return tmp.14
            return 0
        }
        global function main() { 
            a.6 = 4
            tmp.16 = 24 / a.6
            tmp.17 = x(1, 2, 3, 4, 5, tmp.16)
            return tmp.17
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_expression_args() {
    let src = r#"
        int sub(int a, int b) {
            return a - b;
        }
        int main(void) {
            int sum = sub(1 + 2, 1);
            return sum;
        }
    "#;
    let expected = r#"
        global function sub(a.0, b.1) { 
            tmp.0 = a.0 - b.1
            return tmp.0
            return 0
        }
        global function main() { 
            tmp.1 = 1 + 2
            tmp.2 = sub(tmp.1, 1)
            sum.2 = tmp.2
            return sum.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_fibonacci() {
    let src = r#"
        int fib(int n) {
            if (n == 0 || n == 1) {
                return n;
            } else {
                return fib(n - 1) + fib(n - 2);
            }
        }
        int main(void) {
            int n = 6;
            return fib(n);
        }
    "#;
    let expected = r#"
        global function fib(n.0) { 
            tmp.0 = n.0 == 0
            if tmp.0 jump or_true_0
            tmp.3 = n.0 == 1
            if tmp.3 jump or_true_0
            tmp.2 = 0
            jump or_end_1
        
          or_true_0:
            tmp.2 = 1
        
          or_end_1:
            if !tmp.2 jump else_3
            return n.0
            jump end_if_2
        
          else_3:
            tmp.4 = n.0 - 1
            tmp.5 = fib(tmp.4)
            tmp.7 = n.0 - 2
            tmp.8 = fib(tmp.7)
            tmp.6 = tmp.5 + tmp.8
            return tmp.6
        
          end_if_2:
            return 0
        }
        global function main() { 
            n.1 = 6
            tmp.9 = fib(n.1)
            return tmp.9
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_forward_decl_multi_arg() {
    let src = r#"
        int foo(int a, int b);
        int main(void) {
            return foo(2, 1);
        }
        int foo(int x, int y){
            return x - y;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = foo(2, 1)
            return tmp.0
            return 0
        }
        global function foo(x.2, y.3) { 
            tmp.1 = x.2 - y.3
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_hello_world() {
    let src = r#"
        int putchar(int c);
        int main(void) {
            putchar(72);
            putchar(101);
            putchar(108);
            putchar(108);
            putchar(111);
            putchar(44);
            putchar(32);
            putchar(87);
            putchar(111);
            putchar(114);
            putchar(108);
            putchar(100);
            putchar(33);
            putchar(10);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = putchar(72)
            tmp.1 = putchar(101)
            tmp.2 = putchar(108)
            tmp.3 = putchar(108)
            tmp.4 = putchar(111)
            tmp.5 = putchar(44)
            tmp.6 = putchar(32)
            tmp.7 = putchar(87)
            tmp.8 = putchar(111)
            tmp.9 = putchar(114)
            tmp.10 = putchar(108)
            tmp.11 = putchar(100)
            tmp.12 = putchar(33)
            tmp.13 = putchar(10)
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_param_shadows_local_var() {
    let src = r#"
        int main(void) {
            int a = 10;
            int f(int a);
            return f(a);
        }
        int f(int a) {
            return a * 2;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 10
            tmp.0 = f(a.0)
            return tmp.0
            return 0
        }
        global function f(a.2) { 
            tmp.1 = a.2 * 2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_parameter_shadows_function() {
    let src = r#"
        int a(void) {
            return 1;
        }
        int b(int a) {
            return a;
        }
        int main(void) {
            return a() + b(2);
        }
    "#;
    let expected = r#"
        global function a() { 
            return 1
            return 0
        }
        global function b(a.0) { 
            return a.0
            return 0
        }
        global function main() { 
            tmp.0 = a()
            tmp.2 = b(2)
            tmp.1 = tmp.0 + tmp.2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_parameter_shadows_own_function() {
    let src = r#"
        int a(int a) {
            return a * 2;
        }
        int main(void) {
            return a(1);
        }
    "#;
    let expected = r#"
        global function a(a.0) { 
            tmp.0 = a.0 * 2
            return tmp.0
            return 0
        }
        global function main() { 
            tmp.1 = a(1)
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_parameters_are_preserved() {
    let src = r#"
        int g(int w, int x, int y, int z) {
            if (w == 2 && x == 4 && y == 6 && z == 8)
                return 1;
            return 0;
        }
        int f(int a, int b, int c, int d) {
            int result = g(a * 2, b * 2, c * 2, d * 2);
            return (result == 1 && a == 1 && b == 2 && c == 3 && d == 4);
        }
        int main(void) {
            return f(1, 2, 3, 4);
        }
    "#;
    let expected = r#"
        global function g(w.0, x.1, y.2, z.3) { 
            tmp.0 = w.0 == 2
            if !tmp.0 jump and_false_0
            tmp.3 = x.1 == 4
            if !tmp.3 jump and_false_0
            tmp.2 = 1
            jump and_end_1
        
          and_false_0:
            tmp.2 = 0
        
          and_end_1:
            if !tmp.2 jump and_false_2
            tmp.6 = y.2 == 6
            if !tmp.6 jump and_false_2
            tmp.5 = 1
            jump and_end_3
        
          and_false_2:
            tmp.5 = 0
        
          and_end_3:
            if !tmp.5 jump and_false_4
            tmp.9 = z.3 == 8
            if !tmp.9 jump and_false_4
            tmp.8 = 1
            jump and_end_5
        
          and_false_4:
            tmp.8 = 0
        
          and_end_5:
            if !tmp.8 jump end_if_6
            return 1
        
          end_if_6:
            return 0
            return 0
        }
        global function f(a.4, b.5, c.6, d.7) { 
            tmp.10 = a.4 * 2
            tmp.11 = b.5 * 2
            tmp.12 = c.6 * 2
            tmp.13 = d.7 * 2
            tmp.14 = g(tmp.10, tmp.11, tmp.12, tmp.13)
            result.8 = tmp.14
            tmp.15 = result.8 == 1
            if !tmp.15 jump and_false_8
            tmp.18 = a.4 == 1
            if !tmp.18 jump and_false_8
            tmp.17 = 1
            jump and_end_9
        
          and_false_8:
            tmp.17 = 0
        
          and_end_9:
            if !tmp.17 jump and_false_10
            tmp.21 = b.5 == 2
            if !tmp.21 jump and_false_10
            tmp.20 = 1
            jump and_end_11
        
          and_false_10:
            tmp.20 = 0
        
          and_end_11:
            if !tmp.20 jump and_false_12
            tmp.24 = c.6 == 3
            if !tmp.24 jump and_false_12
            tmp.23 = 1
            jump and_end_13
        
          and_false_12:
            tmp.23 = 0
        
          and_end_13:
            if !tmp.23 jump and_false_14
            tmp.27 = d.7 == 4
            if !tmp.27 jump and_false_14
            tmp.26 = 1
            jump and_end_15
        
          and_false_14:
            tmp.26 = 0
        
          and_end_15:
            return tmp.26
            return 0
        }
        global function main() { 
            tmp.28 = f(1, 2, 3, 4)
            return tmp.28
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_single_arg() {
    let src = r#"
        int twice(int x){
            return 2 * x;
        }
        int main(void) {
            return twice(3);
        }
    "#;
    let expected = r#"
        global function twice(x.0) { 
            tmp.0 = 2 * x.0
            return tmp.0
            return 0
        }
        global function main() { 
            tmp.1 = twice(3)
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_extra_credit_compound_assign_function_result() {
    let src = r#"
        int foo(void) {
            return 2;
        }
        int main(void) {
            int x = 3;
            x -= foo();
            return x;
        }
    "#;
    let expected = r#"
        global function foo() { 
            return 2
            return 0
        }
        global function main() { 
            x.0 = 3
            tmp.1 = foo()
            tmp.0 = x.0 - tmp.1
            x.0 = tmp.0
            return x.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_extra_credit_dont_clobber_ecx() {
    let src = r#"
        int x(int a, int b, int c, int d, int e, int f) {
            return a == 1 && b == 2 && c == 3 && d == 4 && e == 5 && f == 6;
        }
        int main(void) {
            int a = 4;
            return x(1, 2, 3, 4, 5, 24 >> (a / 2));
        }
    "#;
    let expected = r#"
        global function x(a.0, b.1, c.2, d.3, e.4, f.5) { 
            tmp.0 = a.0 == 1
            if !tmp.0 jump and_false_0
            tmp.3 = b.1 == 2
            if !tmp.3 jump and_false_0
            tmp.2 = 1
            jump and_end_1
        
          and_false_0:
            tmp.2 = 0
        
          and_end_1:
            if !tmp.2 jump and_false_2
            tmp.6 = c.2 == 3
            if !tmp.6 jump and_false_2
            tmp.5 = 1
            jump and_end_3
        
          and_false_2:
            tmp.5 = 0
        
          and_end_3:
            if !tmp.5 jump and_false_4
            tmp.9 = d.3 == 4
            if !tmp.9 jump and_false_4
            tmp.8 = 1
            jump and_end_5
        
          and_false_4:
            tmp.8 = 0
        
          and_end_5:
            if !tmp.8 jump and_false_6
            tmp.12 = e.4 == 5
            if !tmp.12 jump and_false_6
            tmp.11 = 1
            jump and_end_7
        
          and_false_6:
            tmp.11 = 0
        
          and_end_7:
            if !tmp.11 jump and_false_8
            tmp.15 = f.5 == 6
            if !tmp.15 jump and_false_8
            tmp.14 = 1
            jump and_end_9
        
          and_false_8:
            tmp.14 = 0
        
          and_end_9:
            return tmp.14
            return 0
        }
        global function main() { 
            a.6 = 4
            tmp.17 = a.6 / 2
            tmp.16 = 24 >> tmp.17
            tmp.18 = x(1, 2, 3, 4, 5, tmp.16)
            return tmp.18
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_extra_credit_goto_label_multiple_functions() {
    let src = r#"
        
        int foo(void) {
            goto label;
            return 0;
            label:
                return 5;
        }
        int main(void) {
            goto label;
            return 0;
            label:
                return foo();
        }
    "#;
    let expected = r#"
        global function foo() { 
            jump label_0
            return 0
        
          label_0:
            return 5
            return 0
        }
        global function main() { 
            jump label_1
            return 0
        
          label_1:
            tmp.0 = foo()
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_extra_credit_goto_shared_name() {
    let src = r#"
        int foo(void) {
            goto foo;
            return 0;
            foo:
                return 1;
        }
        int main(void) {
            return foo();
        }
    "#;
    let expected = r#"
        global function foo() { 
            jump foo_0
            return 0
        
          foo_0:
            return 1
            return 0
        }
        global function main() { 
            tmp.0 = foo()
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_extra_credit_label_naming_scheme() {
    let src = r#"
        int main(void) {
            _label:
            label_:
            return 0;
        }
        int main_(void) {
            label:
            return 0;
        }
        int _main(void) {
            label: return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
        
          _label_0:
        
          label__1:
            return 0
            return 0
        }
        global function main_() { 
        
          label_2:
            return 0
            return 0
        }
        global function _main() { 
        
          label_3:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_addition() {
    let src = r#"
        int add(int x, int y) {
            return x + y;
        }
    "#;
    let expected = r#"
        global function add(x.0, y.1) { 
            tmp.0 = x.0 + y.1
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_addition_client() {
    let src = r#"
        int add(int x, int y);
        int main(void) {
            return add(1, 2);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = add(1, 2)
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_many_args() {
    let src = r#"
        int fib(int n) {
            if (n == 0 || n == 1) {
                return n;
            } else {
                return fib(n - 1) + fib(n - 2);
            }
        }
        int multiply_many_args(int a, int b, int c, int d, int e, int f, int g, int h) {
            return a * b * c * d * e * f * fib(g) * fib(h);
        }
    "#;
    let expected = r#"
        global function fib(n.0) { 
            tmp.0 = n.0 == 0
            if tmp.0 jump or_true_0
            tmp.3 = n.0 == 1
            if tmp.3 jump or_true_0
            tmp.2 = 0
            jump or_end_1
        
          or_true_0:
            tmp.2 = 1
        
          or_end_1:
            if !tmp.2 jump else_3
            return n.0
            jump end_if_2
        
          else_3:
            tmp.4 = n.0 - 1
            tmp.5 = fib(tmp.4)
            tmp.7 = n.0 - 2
            tmp.8 = fib(tmp.7)
            tmp.6 = tmp.5 + tmp.8
            return tmp.6
        
          end_if_2:
            return 0
        }
        global function multiply_many_args(a.1, b.2, c.3, d.4, e.5, f.6, g.7, h.8) { 
            tmp.9 = a.1 * b.2
            tmp.10 = tmp.9 * c.3
            tmp.11 = tmp.10 * d.4
            tmp.12 = tmp.11 * e.5
            tmp.13 = tmp.12 * f.6
            tmp.15 = fib(g.7)
            tmp.14 = tmp.13 * tmp.15
            tmp.17 = fib(h.8)
            tmp.16 = tmp.14 * tmp.17
            return tmp.16
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_many_args_client() {
    let src = r#"
        int fib(int a);
        int multiply_many_args(int a, int b, int c, int d, int e, int f, int g, int h);
        int main(void) {
            int x = fib(4);
            int seven = 7;
            int eight = fib(6);
            int y = multiply_many_args(x, 2, 3, 4, 5, 6, seven, eight);
            if (x != 3) {
                return 1;
            }
            if (y != 589680) {
                return 2;
            }
            return x + (y % 256);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = fib(4)
            x.9 = tmp.0
            seven.10 = 7
            tmp.1 = fib(6)
            eight.11 = tmp.1
            tmp.2 = multiply_many_args(x.9, 2, 3, 4, 5, 6, seven.10, eight.11)
            y.12 = tmp.2
            tmp.3 = x.9 != 3
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = y.12 != 589680
            if !tmp.4 jump end_if_2
            return 2
        
          end_if_2:
            tmp.6 = y.12 % 256
            tmp.5 = x.9 + tmp.6
            return tmp.5
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_no_function_calls_division() {
    let src = r#"
        int f(int a, int b, int c, int d) {
            int x = a / b;
            if (a == 10 && b == 2 && c == 100 && d == 4 && x == 5)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        global function f(a.0, b.1, c.2, d.3) { 
            tmp.0 = a.0 / b.1
            x.4 = tmp.0
            tmp.1 = a.0 == 10
            if !tmp.1 jump and_false_0
            tmp.4 = b.1 == 2
            if !tmp.4 jump and_false_0
            tmp.3 = 1
            jump and_end_1
        
          and_false_0:
            tmp.3 = 0
        
          and_end_1:
            if !tmp.3 jump and_false_2
            tmp.7 = c.2 == 100
            if !tmp.7 jump and_false_2
            tmp.6 = 1
            jump and_end_3
        
          and_false_2:
            tmp.6 = 0
        
          and_end_3:
            if !tmp.6 jump and_false_4
            tmp.10 = d.3 == 4
            if !tmp.10 jump and_false_4
            tmp.9 = 1
            jump and_end_5
        
          and_false_4:
            tmp.9 = 0
        
          and_end_5:
            if !tmp.9 jump and_false_6
            tmp.13 = x.4 == 5
            if !tmp.13 jump and_false_6
            tmp.12 = 1
            jump and_end_7
        
          and_false_6:
            tmp.12 = 0
        
          and_end_7:
            if !tmp.12 jump end_if_8
            return 1
        
          end_if_8:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_no_function_calls_division_client() {
    let src = r#"
        int f(int a, int b, int c, int d);
        int main(void) {
            return f(10, 2, 100, 4);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = f(10, 2, 100, 4)
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_no_function_calls_local_stack_variables() {
    let src = r#"
        
        int f(int reg1, int reg2, int reg3, int reg4, int reg5, int reg6,
            int stack1, int stack2, int stack3) {
            int x = 10;
            if (reg1 == 1 && reg2 == 2 && reg3 == 3 && reg4 == 4 && reg5 == 5
                && reg6 == 6 && stack1 == -1 && stack2 == -2 && stack3 == -3
                && x == 10) {
                stack2 = 100;
                return stack2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function f(reg1.0, reg2.1, reg3.2, reg4.3, reg5.4, reg6.5, stack1.6, stack2.7, stack3.8) { 
            x.9 = 10
            tmp.0 = reg1.0 == 1
            if !tmp.0 jump and_false_0
            tmp.3 = reg2.1 == 2
            if !tmp.3 jump and_false_0
            tmp.2 = 1
            jump and_end_1
        
          and_false_0:
            tmp.2 = 0
        
          and_end_1:
            if !tmp.2 jump and_false_2
            tmp.6 = reg3.2 == 3
            if !tmp.6 jump and_false_2
            tmp.5 = 1
            jump and_end_3
        
          and_false_2:
            tmp.5 = 0
        
          and_end_3:
            if !tmp.5 jump and_false_4
            tmp.9 = reg4.3 == 4
            if !tmp.9 jump and_false_4
            tmp.8 = 1
            jump and_end_5
        
          and_false_4:
            tmp.8 = 0
        
          and_end_5:
            if !tmp.8 jump and_false_6
            tmp.12 = reg5.4 == 5
            if !tmp.12 jump and_false_6
            tmp.11 = 1
            jump and_end_7
        
          and_false_6:
            tmp.11 = 0
        
          and_end_7:
            if !tmp.11 jump and_false_8
            tmp.15 = reg6.5 == 6
            if !tmp.15 jump and_false_8
            tmp.14 = 1
            jump and_end_9
        
          and_false_8:
            tmp.14 = 0
        
          and_end_9:
            if !tmp.14 jump and_false_10
            tmp.19 = - 1
            tmp.18 = stack1.6 == tmp.19
            if !tmp.18 jump and_false_10
            tmp.17 = 1
            jump and_end_11
        
          and_false_10:
            tmp.17 = 0
        
          and_end_11:
            if !tmp.17 jump and_false_12
            tmp.23 = - 2
            tmp.22 = stack2.7 == tmp.23
            if !tmp.22 jump and_false_12
            tmp.21 = 1
            jump and_end_13
        
          and_false_12:
            tmp.21 = 0
        
          and_end_13:
            if !tmp.21 jump and_false_14
            tmp.27 = - 3
            tmp.26 = stack3.8 == tmp.27
            if !tmp.26 jump and_false_14
            tmp.25 = 1
            jump and_end_15
        
          and_false_14:
            tmp.25 = 0
        
          and_end_15:
            if !tmp.25 jump and_false_16
            tmp.30 = x.9 == 10
            if !tmp.30 jump and_false_16
            tmp.29 = 1
            jump and_end_17
        
          and_false_16:
            tmp.29 = 0
        
          and_end_17:
            if !tmp.29 jump end_if_18
            stack2.7 = 100
            return stack2.7
        
          end_if_18:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_no_function_calls_local_stack_variables_client() {
    let src = r#"
        int f(int reg1, int reg2, int reg3, int reg4, int reg5, int reg6,
            int stack1, int stack2, int stack3);
        int main(void) {
            return f(1, 2, 3, 4, 5, 6, -1, -2, -3);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1
            tmp.1 = - 2
            tmp.2 = - 3
            tmp.3 = f(1, 2, 3, 4, 5, 6, tmp.0, tmp.1, tmp.2)
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_system_call() {
    let src = r#"
        int putchar(int c);
        int incr_and_print(int b) {
            return putchar(b + 2);
        }
    "#;
    let expected = r#"
        global function incr_and_print(b.1) { 
            tmp.0 = b.1 + 2
            tmp.1 = putchar(tmp.0)
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_system_call_client() {
    let src = r#"
        int incr_and_print(int c);
        int main(void) {
            incr_and_print(70);
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = incr_and_print(70)
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_forward_decl() {
    let src = r#"
        int foo(void);
        int main(void) {
            return foo();
        }
        int foo(void) {
            return 3;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = foo()
            return tmp.0
            return 0
        }
        global function foo() { 
            return 3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_function_shadows_variable() {
    let src = r#"
        int main(void) {
            int foo = 3;
            int bar = 4;
            if (foo + bar > 0) {
                int foo(void);
                bar = foo();
            }
            return foo + bar;
        }
        int foo(void) {
            return 8;
        }
    "#;
    let expected = r#"
        global function main() { 
            foo.0 = 3
            bar.1 = 4
            tmp.0 = foo.0 + bar.1
            tmp.1 = tmp.0 > 0
            if !tmp.1 jump end_if_0
            tmp.2 = foo()
            bar.1 = tmp.2
        
          end_if_0:
            tmp.3 = foo.0 + bar.1
            return tmp.3
            return 0
        }
        global function foo() { 
            return 8
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_multiple_declarations() {
    let src = r#"
        int main(void) {
            int f(void);
            int f(void);
            return f();
        }
        int f(void) {
            return 3;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = f()
            return tmp.0
            return 0
        }
        global function f() { 
            return 3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_no_return_value() {
    let src = r#"
        int foo(void) {
            int x = 1;
        }
        int main(void) {
            foo();
            return 3;
        }
    "#;
    let expected = r#"
        global function foo() { 
            x.0 = 1
            return 0
        }
        global function main() { 
            tmp.0 = foo()
            return 3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_precedence() {
    let src = r#"
        int three(void) {
            return 3;
        }
        int main(void) {
            return !three();
        }
    "#;
    let expected = r#"
        global function three() { 
            return 3
            return 0
        }
        global function main() { 
            tmp.0 = three()
            tmp.1 = ! tmp.0
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_use_function_in_expression() {
    let src = r#"
        int bar(void) {
            return 9;
        }
        int foo(void) {
            return 2 * bar();
        }
        int main(void) {
            return foo() + bar() / 3;
        }
    "#;
    let expected = r#"
        global function bar() { 
            return 9
            return 0
        }
        global function foo() { 
            tmp.1 = bar()
            tmp.0 = 2 * tmp.1
            return tmp.0
            return 0
        }
        global function main() { 
            tmp.2 = foo()
            tmp.4 = bar()
            tmp.5 = tmp.4 / 3
            tmp.3 = tmp.2 + tmp.5
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_variable_shadows_function() {
    let src = r#"
        int main(void) {
            int foo(void);
            int x = foo();
            if (x > 0) {
                int foo = 3;
                x = x + foo;
            }
            return x;
        }
        int foo(void) {
            return 4;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = foo()
            x.0 = tmp.0
            tmp.1 = x.0 > 0
            if !tmp.1 jump end_if_0
            foo.1 = 3
            tmp.2 = x.0 + foo.1
            x.0 = tmp.2
        
          end_if_0:
            return x.0
            return 0
        }
        global function foo() { 
            return 4
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_stack_arguments_call_putchar() {
    let src = r#"
        int putchar(int c);
        int foo(int a, int b, int c, int d, int e, int f, int g, int h) {
            putchar(h);
            return a + g;
        }
        int main(void) {
            return foo(1, 2, 3, 4, 5, 6, 7, 65);
        }
    "#;
    let expected = r#"
        global function foo(a.1, b.2, c.3, d.4, e.5, f.6, g.7, h.8) { 
            tmp.0 = putchar(h.8)
            tmp.1 = a.1 + g.7
            return tmp.1
            return 0
        }
        global function main() { 
            tmp.2 = foo(1, 2, 3, 4, 5, 6, 7, 65)
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_stack_arguments_lots_of_arguments() {
    let src = r#"
        int foo(int a, int b, int c, int d, int e, int f, int g, int h) {
            return (a == 1 && b == 2 && c == 3 && d == 4 && e == 5
                    && f == 6 && g == 7 && h == 8);
        }
        int main(void) {
            return foo(1, 2, 3, 4, 5, 6, 7, 8);
        }
    "#;
    let expected = r#"
        global function foo(a.0, b.1, c.2, d.3, e.4, f.5, g.6, h.7) { 
            tmp.0 = a.0 == 1
            if !tmp.0 jump and_false_0
            tmp.3 = b.1 == 2
            if !tmp.3 jump and_false_0
            tmp.2 = 1
            jump and_end_1
        
          and_false_0:
            tmp.2 = 0
        
          and_end_1:
            if !tmp.2 jump and_false_2
            tmp.6 = c.2 == 3
            if !tmp.6 jump and_false_2
            tmp.5 = 1
            jump and_end_3
        
          and_false_2:
            tmp.5 = 0
        
          and_end_3:
            if !tmp.5 jump and_false_4
            tmp.9 = d.3 == 4
            if !tmp.9 jump and_false_4
            tmp.8 = 1
            jump and_end_5
        
          and_false_4:
            tmp.8 = 0
        
          and_end_5:
            if !tmp.8 jump and_false_6
            tmp.12 = e.4 == 5
            if !tmp.12 jump and_false_6
            tmp.11 = 1
            jump and_end_7
        
          and_false_6:
            tmp.11 = 0
        
          and_end_7:
            if !tmp.11 jump and_false_8
            tmp.15 = f.5 == 6
            if !tmp.15 jump and_false_8
            tmp.14 = 1
            jump and_end_9
        
          and_false_8:
            tmp.14 = 0
        
          and_end_9:
            if !tmp.14 jump and_false_10
            tmp.18 = g.6 == 7
            if !tmp.18 jump and_false_10
            tmp.17 = 1
            jump and_end_11
        
          and_false_10:
            tmp.17 = 0
        
          and_end_11:
            if !tmp.17 jump and_false_12
            tmp.21 = h.7 == 8
            if !tmp.21 jump and_false_12
            tmp.20 = 1
            jump and_end_13
        
          and_false_12:
            tmp.20 = 0
        
          and_end_13:
            return tmp.20
            return 0
        }
        global function main() { 
            tmp.22 = foo(1, 2, 3, 4, 5, 6, 7, 8)
            return tmp.22
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_stack_arguments_stack_alignment() {
    let src = r#"
        int even_arguments(int a, int b, int c, int d, int e, int f, int g, int h);
        int odd_arguments(int a, int b, int c, int d, int e, int f, int g, int h, int i);
        int main(void) {
            int x = 3;
            even_arguments(1, 2, 3, 4, 5, 6, 7, 8);
            odd_arguments(1, 2, 3, 4, 5, 6, 7, 8, 9);
            return x;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.17 = 3
            tmp.0 = even_arguments(1, 2, 3, 4, 5, 6, 7, 8)
            tmp.1 = odd_arguments(1, 2, 3, 4, 5, 6, 7, 8, 9)
            return x.17
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_stack_arguments_test_for_memory_leaks() {
    let src = r#"
        int lots_of_args(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, int n, int o) {
            return l + o;
        }
        int main(void) {
            int ret = 0;
            for (int i = 0; i < 10000000; i = i + 1) {
                ret = lots_of_args(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ret, 13, 14, 15);
            }
            return ret == 150000000;
        }
    "#;
    let expected = r#"
        global function lots_of_args(a.0, b.1, c.2, d.3, e.4, f.5, g.6, h.7, i.8, j.9, k.10, l.11, m.12, n.13, o.14) { 
            tmp.0 = l.11 + o.14
            return tmp.0
            return 0
        }
        global function main() { 
            ret.15 = 0
            i.16 = 0
        
          start_loop_0:
            tmp.1 = i.16 < 10000000
            if !tmp.1 jump break_loop_0
            tmp.2 = lots_of_args(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ret.15, 13, 14, 15)
            ret.15 = tmp.2
        
          continue_loop_0:
            tmp.3 = i.16 + 1
            i.16 = tmp.3
            jump start_loop_0
        
          break_loop_0:
            tmp.4 = ret.15 == 150000000
            return tmp.4
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_distinct_local_and_extern() {
    let src = r#"
        int a = 5;
        int return_a(void) {
            return a;
        }
        int main(void) {
            int a = 3;
            {
                extern int a;
                if (a != 5)
                    return 1;
                a = 4;
            }
            return a + return_a();
        }
    "#;
    let expected = r#"
        global function return_a() { 
            return a
            return 0
        }
        global function main() { 
            a.0 = 3
            tmp.0 = a != 5
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            a = 4
            tmp.2 = return_a()
            tmp.1 = a.0 + tmp.2
            return tmp.1
            return 0
        }
        static global a: Int = 5
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extern_block_scope_variable() {
    let src = r#"
        int main(void) {
            int outer = 1;
            int foo = 0;
            if (outer) {
                extern int foo;
                extern int foo;
                return foo;
            }
            return 0;
        }
        int foo = 3;
    "#;
    let expected = r#"
        global function main() { 
            outer.0 = 1
            foo.1 = 0
            if !outer.0 jump end_if_0
            return foo
        
          end_if_0:
            return 0
            return 0
        }
        static global foo: Int = 3
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_bitwise_ops_file_scope_vars() {
    let src = r#"
        int x = 1;
        int y = 0;
        int main(void) {
            y = -1;
            x = (x << 1) | 1;
            if (x != 3) {
                return 1;
            }
            y = ((y & -5) ^ 12) >> 2;
            if (y != -3) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1
            y = tmp.0
            tmp.1 = x << 1
            tmp.2 = tmp.1 | 1
            x = tmp.2
            tmp.3 = x != 3
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.5 = - 5
            tmp.4 = y & tmp.5
            tmp.6 = tmp.4 ^ 12
            tmp.7 = tmp.6 >> 2
            y = tmp.7
            tmp.9 = - 3
            tmp.8 = y != tmp.9
            if !tmp.8 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
        static global x: Int = 1
        static global y: Int = 0
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_compound_assignment_static_var() {
    let src = r#"
        int f(void) {
            static int i = 0;
            static int j = 0;
            static int k = 1;
            static int l = 48;
            i += 1;
            j -= i;
            k *= j;
            l /= 2;
            if (i != 3) {
                return 1;
            }
            if (j != -6) {
                return 2;
            }
            if (k != -18) {
                return 3;
            }
            if (l != 6) {
                return 4;
            }
            return 0;
        }
        int main(void) {
            f();
            f();
            return f();
        }
    "#;
    let expected = r#"
        global function f() { 
            tmp.0 = i.0 + 1
            i.0 = tmp.0
            tmp.1 = j.1 - i.0
            j.1 = tmp.1
            tmp.2 = k.2 * j.1
            k.2 = tmp.2
            tmp.3 = l.3 / 2
            l.3 = tmp.3
            tmp.4 = i.0 != 3
            if !tmp.4 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = - 6
            tmp.5 = j.1 != tmp.6
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            tmp.8 = - 18
            tmp.7 = k.2 != tmp.8
            if !tmp.7 jump end_if_4
            return 3
        
          end_if_4:
            tmp.9 = l.3 != 6
            if !tmp.9 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        global function main() { 
            tmp.10 = f()
            tmp.11 = f()
            tmp.12 = f()
            return tmp.12
            return 0
        }
        static i.0: Int = 0
        static j.1: Int = 0
        static k.2: Int = 1
        static l.3: Int = 48
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_goto_skip_static_initializer() {
    let src = r#"
        int main(void) {
            goto end;
            static int x = 10;
            end:
                return x;
        }
    "#;
    let expected = r#"
        global function main() { 
            jump end_0
        
          end_0:
            return x.0
            return 0
        }
        static x.0: Int = 10
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_increment_global_vars() {
    let src = r#"
        
        int i = 0;
        int j = 0;
        int incr_i(void){
            if (i == 1) {
                i++;
                ++i;
            }
            return 0;
        }
        int decr_j(void) {
            if (j == -1) {
                j--;
            }
            return 0;
        }
        int main(void) {
            i++ ? 0 : incr_i();
            if (i != 3) {
                return 1;
            }
            --j? decr_j(): 0;
            if (j != -2) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function incr_i() { 
            tmp.0 = i == 1
            if !tmp.0 jump end_if_0
            tmp.1 = i
            tmp.2 = inc i
            i = tmp.2
            tmp.3 = inc i
            i = tmp.3
        
          end_if_0:
            return 0
            return 0
        }
        global function decr_j() { 
            tmp.5 = - 1
            tmp.4 = j == tmp.5
            if !tmp.4 jump end_if_2
            tmp.6 = j
            tmp.7 = dec j
            j = tmp.7
        
          end_if_2:
            return 0
            return 0
        }
        global function main() { 
            tmp.8 = i
            tmp.9 = inc i
            i = tmp.9
            if !tmp.8 jump else_5
            tmp.10 = 0
            jump end_if_4
        
          else_5:
            tmp.11 = incr_i()
            tmp.10 = tmp.11
        
          end_if_4:
            tmp.12 = i != 3
            if !tmp.12 jump end_if_6
            return 1
        
          end_if_6:
            tmp.13 = dec j
            j = tmp.13
            if !tmp.13 jump else_9
            tmp.15 = decr_j()
            tmp.14 = tmp.15
            jump end_if_8
        
          else_9:
            tmp.14 = 0
        
          end_if_8:
            tmp.17 = - 2
            tmp.16 = j != tmp.17
            if !tmp.16 jump end_if_10
            return 2
        
          end_if_10:
            return 0
            return 0
        }
        static global i: Int = 0
        static global j: Int = 0
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_label_file_scope_var_same_name() {
    let src = r#"
        int x;
        int main(void) {
            int x = 10;
            goto x;
            return x;
            {
                extern int x;
            x:
                return x;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 10
            jump x_0
            return x.0
        
          x_0:
            return x
            return 0
        }
        static global x: Int = zero[4]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_label_static_var_same_name() {
    let src = r#"
        int main(void) {
            static int x = 5;
            goto x;
            x = 0;
        x:
            return x;
        }
    "#;
    let expected = r#"
        global function main() { 
            jump x_0
            x.0 = 0
        
          x_0:
            return x.0
            return 0
        }
        static x.0: Int = 5
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_libraries_same_label_same_fun() {
    let src = r#"
        static int f(void) {
            goto x;
            return 0;
            x:
            return 2;
        }
        int f_caller(void) {
            return f();
        }
    "#;
    let expected = r#"
        function f() { 
            jump x_0
            return 0
        
          x_0:
            return 2
            return 0
        }
        global function f_caller() { 
            tmp.0 = f()
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_libraries_same_label_same_fun_client() {
    let src = r#"
        int f(void) {
            goto x;
            return 0;
        x:
            return 1;
        }
        int f_caller(void);
        int main(void) {
            if (f() != 1) {
                return 1;
            }
            if (f_caller() !=
                2) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function f() { 
            jump x_0
            return 0
        
          x_0:
            return 1
            return 0
        }
        global function main() { 
            tmp.0 = f()
            tmp.1 = tmp.0 != 1
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = f_caller()
            tmp.3 = tmp.2 != 2
            if !tmp.3 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_switch_on_extern() {
    let src = r#"
        int update_x(void);
        int main(void) {
            update_x();
            extern int x;
            switch(x) {
                case 0: return 1;
                case 1: return 2;
                case 4: return 0;
                default: return 4;
            }
        }
        int x;
        int update_x(void) {
            x = 4;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = update_x()
            tmp.1 = x == 0
            if tmp.1 jump switch_0_case__1
            tmp.2 = x == 1
            if tmp.2 jump switch_0_case__2
            tmp.3 = x == 4
            if tmp.3 jump switch_0_case__3
            jump switch_0_default_4
            jump break_switch_0
        
          switch_0_case__1:
            return 1
        
          switch_0_case__2:
            return 2
        
          switch_0_case__3:
            return 0
        
          switch_0_default_4:
            return 4
        
          break_switch_0:
            return 0
        }
        global function update_x() { 
            x = 4
            return 0
            return 0
        }
        static global x: Int = zero[4]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_switch_skip_extern_decl() {
    let src = r#"
        int main(void) {
            int a = 10;
            switch(a) {
                case 1: return 1;
                extern int x;
                case 2: return 2;
                case 10:
                if (x * 2 == 30) {
                    return 0;
                }
                default: return 5;
            }
            return 6;
        }
        int x = 15;
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 10
            tmp.0 = a.0 == 1
            if tmp.0 jump switch_0_case__1
            tmp.1 = a.0 == 2
            if tmp.1 jump switch_0_case__2
            tmp.2 = a.0 == 10
            if tmp.2 jump switch_0_case__3
            jump switch_0_default_4
            jump break_switch_0
        
          switch_0_case__1:
            return 1
        
          switch_0_case__2:
            return 2
        
          switch_0_case__3:
            tmp.3 = x * 2
            tmp.4 = tmp.3 == 30
            if !tmp.4 jump end_if_0
            return 0
        
          end_if_0:
        
          switch_0_default_4:
            return 5
        
          break_switch_0:
            return 6
            return 0
        }
        static global x: Int = 15
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_switch_skip_static_initializer() {
    let src = r#"
        int a = 3;
        int main(void) {
            switch (a) {
                case 1:;
                    static int x = 10;
                    x = 0;
                case 3:
                    return x;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = a == 1
            if tmp.0 jump switch_0_case__1
            tmp.1 = a == 3
            if tmp.1 jump switch_0_case__2
            jump break_switch_0
        
          switch_0_case__1:
            x.0 = 0
        
          switch_0_case__2:
            return x.0
        
          break_switch_0:
            return 0
            return 0
        }
        static global a: Int = 3
        static x.0: Int = 10
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_linkage_function() {
    let src = r#"
        extern int sum(int a, int b);
        int sum(int i, int j) {
            return i + j;
        }
        int sum(int x, int y);
    "#;
    let expected = r#"
        global function sum(i.2, j.3) { 
            tmp.0 = i.2 + j.3
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_linkage_function_client() {
    let src = r#"
        int add_one_and_two(void) {
            extern int sum(int a, int b);
            int sum(int a, int b);
            return sum(1, 2);
        }
        extern int sum(int x, int y);
        int sum(int x, int y);
        int add_three_and_four(void) {
            int sum = 3;
            if (sum > 2) {
                extern int sum(int one, int two);
                return sum(3, 4);
            }
            return 1;
        }
        int main(void) {
            if (add_three_and_four() != 7)
                return 1;
            if (add_one_and_two() != 3)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        global function add_one_and_two() { 
            tmp.0 = sum(1, 2)
            return tmp.0
            return 0
        }
        global function add_three_and_four() { 
            sum.8 = 3
            tmp.1 = sum.8 > 2
            if !tmp.1 jump end_if_0
            tmp.2 = sum(3, 4)
            return tmp.2
        
          end_if_0:
            return 1
            return 0
        }
        global function main() { 
            tmp.3 = add_three_and_four()
            tmp.4 = tmp.3 != 7
            if !tmp.4 jump end_if_2
            return 1
        
          end_if_2:
            tmp.5 = add_one_and_two()
            tmp.6 = tmp.5 != 3
            if !tmp.6 jump end_if_4
            return 1
        
          end_if_4:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_tentative_var() {
    let src = r#"
        
        int x;
        int read_x(void) {
            return x;
        }
    "#;
    let expected = r#"
        global function read_x() { 
            return x
            return 0
        }
        static global x: Int = zero[4]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_tentative_var_client() {
    let src = r#"
        int read_x(void);
        int main(void) {
            extern int x;
            if (x != 0)
                return 1;
            x = 3;
            if (read_x() != 3)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = x != 0
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            x = 3
            tmp.1 = read_x()
            tmp.2 = tmp.1 != 3
            if !tmp.2 jump end_if_2
            return 1
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_var_scoping() {
    let src = r#"
        int read_x(void) {
            int x = 4;
            if (x == 4) {
                extern int x;
                return x;
            } else {
                return -1;
            }
        }
    "#;
    let expected = r#"
        global function read_x() { 
            x.0 = 4
            tmp.0 = x.0 == 4
            if !tmp.0 jump else_1
            return x
            jump end_if_0
        
          else_1:
            tmp.1 = - 1
            return tmp.1
        
          end_if_0:
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_var_scoping_client() {
    let src = r#"
        int x = 10;
        int read_x(void);
        int main(void) {
            int x = 0;
            if (x == 0) {
                if (read_x() != 10)
                    return 1;
                extern int x;
                if (x != 10)
                    return 1;
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 0
            tmp.0 = x.0 == 0
            if !tmp.0 jump end_if_0
            tmp.1 = read_x()
            tmp.2 = tmp.1 != 10
            if !tmp.2 jump end_if_2
            return 1
        
          end_if_2:
            tmp.3 = x != 10
            if !tmp.3 jump end_if_4
            return 1
        
          end_if_4:
            return 0
        
          end_if_0:
            return 1
            return 0
        }
        static global x: Int = 10
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_variable() {
    let src = r#"
        int x;
        extern int x;
        int x;
        int update_x(int new_val) {
            x = new_val;
            return 0;
        }
        int read_x(void) {
            return x;
        }
        int x = 3;
    "#;
    let expected = r#"
        global function update_x(new_val.0) { 
            x = new_val.0
            return 0
            return 0
        }
        global function read_x() { 
            return x
            return 0
        }
        static global x: Int = 3
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_variable_client() {
    let src = r#"
        int update_x(int new_val);
        int read_x(void);
        extern int x;
        int main(void) {
            if (x != 3)
                return 1;
            if (read_x() != 3)
                return 1;
            x = 4;
            if (x != 4)
                return 1;
            if (read_x() != 4)
                return 1;
            update_x(5);
            if (x != 5)
                return 1;
            if (read_x() != 5)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = x != 3
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = read_x()
            tmp.2 = tmp.1 != 3
            if !tmp.2 jump end_if_2
            return 1
        
          end_if_2:
            x = 4
            tmp.3 = x != 4
            if !tmp.3 jump end_if_4
            return 1
        
          end_if_4:
            tmp.4 = read_x()
            tmp.5 = tmp.4 != 4
            if !tmp.5 jump end_if_6
            return 1
        
          end_if_6:
            tmp.6 = update_x(5)
            tmp.7 = x != 5
            if !tmp.7 jump end_if_8
            return 1
        
          end_if_8:
            tmp.8 = read_x()
            tmp.9 = tmp.8 != 5
            if !tmp.9 jump end_if_10
            return 1
        
          end_if_10:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_internal_hides_external_linkage() {
    let src = r#"
        int x = 10;
        int read_x(void){
            return x;
        }
    "#;
    let expected = r#"
        global function read_x() { 
            return x
            return 0
        }
        static global x: Int = 10
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_internal_hides_external_linkage_client() {
    let src = r#"
        static int x = 1;
        int read_internal_x(void);
        int read_x(void);
        int main(void) {
            extern int x;
            if (x != 1)
                return 1;
            x = 2;
            if (read_internal_x() != 2)
                return 1;
            if (read_x() != 10)
                return 1;
            return 0;
        }
        extern int x;
        int read_internal_x(void) {
            return x;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = x != 1
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            x = 2
            tmp.1 = read_internal_x()
            tmp.2 = tmp.1 != 2
            if !tmp.2 jump end_if_2
            return 1
        
          end_if_2:
            tmp.3 = read_x()
            tmp.4 = tmp.3 != 10
            if !tmp.4 jump end_if_4
            return 1
        
          end_if_4:
            return 0
            return 0
        }
        global function read_internal_x() { 
            return x
            return 0
        }
        static x: Int = 1
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_internal_linkage_function() {
    let src = r#"
        
        static int my_fun(void);
        int call_static_my_fun(void) {
            return my_fun();
        }
        int call_static_my_fun_2(void) {
            int my_fun(void);
            return my_fun();
        }
        extern int my_fun(void);
        static int my_fun(void);
        int my_fun(void) {
            static int i = 0;
            i = i + 1;
            return i;
        }
    "#;
    let expected = r#"
        global function call_static_my_fun() { 
            tmp.0 = my_fun()
            return tmp.0
            return 0
        }
        global function call_static_my_fun_2() { 
            tmp.1 = my_fun()
            return tmp.1
            return 0
        }
        function my_fun() { 
            tmp.2 = i.0 + 1
            i.0 = tmp.2
            return i.0
            return 0
        }
        static i.0: Int = 0
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_internal_linkage_function_client() {
    let src = r#"
        extern int my_fun(void);
        int call_static_my_fun(void);
        int call_static_my_fun_2(void);
        int main(void) {
            if (call_static_my_fun() != 1)
                return 1;
            if (my_fun() != 100)
                return 1;
            if (call_static_my_fun_2() != 2)
                return 1;
            return 0;
        }
        int my_fun(void) {
            return 100;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = call_static_my_fun()
            tmp.1 = tmp.0 != 1
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = my_fun()
            tmp.3 = tmp.2 != 100
            if !tmp.3 jump end_if_2
            return 1
        
          end_if_2:
            tmp.4 = call_static_my_fun_2()
            tmp.5 = tmp.4 != 2
            if !tmp.5 jump end_if_4
            return 1
        
          end_if_4:
            return 0
            return 0
        }
        global function my_fun() { 
            return 100
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_internal_linkage_var() {
    let src = r#"
        static int x;
        int read_x(void) {
            return x;
        }
        int update_x(int new_val) {
            extern int x;
            x = new_val;
            return 0;
        }
        extern int x;
        static int x = 5;
        static int x;
    "#;
    let expected = r#"
        global function read_x() { 
            return x
            return 0
        }
        global function update_x(new_val.0) { 
            x = new_val.0
            return 0
            return 0
        }
        static x: Int = 5
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_internal_linkage_var_client() {
    let src = r#"
        static int x;
        static int x;
        int read_x(void);
        int update_x(int x);
        int main(void) {
            if (x != 0)
                return 1;
            if (read_x() != 5)
                return 1;
            extern int x;
            update_x(10);
            if (read_x() != 10)
                return 1;
            if (x != 0)
                return 1;
            x = 20;
            if (x != 20)
                return 1;
            if (read_x() != 10)
                return 1;
            return 0;
        }
        static int x;
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = x != 0
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = read_x()
            tmp.2 = tmp.1 != 5
            if !tmp.2 jump end_if_2
            return 1
        
          end_if_2:
            tmp.3 = update_x(10)
            tmp.4 = read_x()
            tmp.5 = tmp.4 != 10
            if !tmp.5 jump end_if_4
            return 1
        
          end_if_4:
            tmp.6 = x != 0
            if !tmp.6 jump end_if_6
            return 1
        
          end_if_6:
            x = 20
            tmp.7 = x != 20
            if !tmp.7 jump end_if_8
            return 1
        
          end_if_8:
            tmp.8 = read_x()
            tmp.9 = tmp.8 != 10
            if !tmp.9 jump end_if_10
            return 1
        
          end_if_10:
            return 0
            return 0
        }
        static x: Int = zero[4]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_multiple_static_file_scope_vars() {
    let src = r#"
        static int foo;
        int main(void) {
            return foo;
        }
        extern int foo;
        static int foo = 4;
    "#;
    let expected = r#"
        global function main() { 
            return foo
            return 0
        }
        static foo: Int = 4
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_multiple_static_local() {
    let src = r#"
        int foo(void) {
            static int a = 3;
            a = a * 2;
            return a;
        }
        int bar(void) {
            static int a = 4;
            a = a + 1;
            return a;
        }
        int main(void) {
            return foo() + bar() + foo() + bar();
        }
    "#;
    let expected = r#"
        global function foo() { 
            tmp.0 = a.0 * 2
            a.0 = tmp.0
            return a.0
            return 0
        }
        global function bar() { 
            tmp.1 = a.1 + 1
            a.1 = tmp.1
            return a.1
            return 0
        }
        global function main() { 
            tmp.2 = foo()
            tmp.4 = bar()
            tmp.3 = tmp.2 + tmp.4
            tmp.6 = foo()
            tmp.5 = tmp.3 + tmp.6
            tmp.8 = bar()
            tmp.7 = tmp.5 + tmp.8
            return tmp.7
            return 0
        }
        static a.0: Int = 3
        static a.1: Int = 4
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_push_arg_on_page_boundary() {
    let src = r#"
        extern int zed;
        int foo(int a, int b, int c, int d, int e, int f, int g) {
            return g + 1;
        }
        int main(void) {
            return foo(0, 0, 0, 0, 0, 0, zed);
        }
    "#;
    let expected = r#"
        global function foo(a.0, b.1, c.2, d.3, e.4, f.5, g.6) { 
            tmp.0 = g.6 + 1
            return tmp.0
            return 0
        }
        global function main() { 
            tmp.1 = foo(0, 0, 0, 0, 0, 0, zed)
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_shadow_static_local_var() {
    let src = r#"
        int i;
        int update_static_or_global(int update_global, int new_val)
        {
            static int i;
            if (update_global)
            {
                extern int i;
                i = new_val;
            }
            else
                i = new_val;
            return i;
        }
        int main(void)
        {
            if (i != 0)
                return 1;
            int result = update_static_or_global(1, 10);
            if (result != 0)
                return 1;
            if (i != 10)
                return 1;
            result = update_static_or_global(0, 9);
            if (result != 9)
                return 1;
            if (i != 10)
                return 1;
            result = update_static_or_global(1, 11);
            if (result != 9)
                return 1;
            if (i != 11)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        global function update_static_or_global(update_global.0, new_val.1) { 
            if !update_global.0 jump else_1
            i = new_val.1
            jump end_if_0
        
          else_1:
            i.2 = new_val.1
        
          end_if_0:
            return i.2
            return 0
        }
        global function main() { 
            tmp.0 = i != 0
            if !tmp.0 jump end_if_2
            return 1
        
          end_if_2:
            tmp.1 = update_static_or_global(1, 10)
            result.4 = tmp.1
            tmp.2 = result.4 != 0
            if !tmp.2 jump end_if_4
            return 1
        
          end_if_4:
            tmp.3 = i != 10
            if !tmp.3 jump end_if_6
            return 1
        
          end_if_6:
            tmp.4 = update_static_or_global(0, 9)
            result.4 = tmp.4
            tmp.5 = result.4 != 9
            if !tmp.5 jump end_if_8
            return 1
        
          end_if_8:
            tmp.6 = i != 10
            if !tmp.6 jump end_if_10
            return 1
        
          end_if_10:
            tmp.7 = update_static_or_global(1, 11)
            result.4 = tmp.7
            tmp.8 = result.4 != 9
            if !tmp.8 jump end_if_12
            return 1
        
          end_if_12:
            tmp.9 = i != 11
            if !tmp.9 jump end_if_14
            return 1
        
          end_if_14:
            return 0
            return 0
        }
        static global i: Int = zero[4]
        static i.2: Int = zero[4]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_static_local_multiple_scopes() {
    let src = r#"
        int putchar (int ch);
        int print_letters(void) {
            static int i = 65;
            putchar(i);
            {
                i = i + 1;
                static int i = 97;
                putchar(i);
                i = i + 1;
            }
            putchar(10);
            return 0;
        }
        int main(void) {
            for (int i = 0; i < 26; i = i + 1)
                print_letters();
        }
    "#;
    let expected = r#"
        global function print_letters() { 
            tmp.0 = putchar(i.1)
            tmp.1 = i.1 + 1
            i.1 = tmp.1
            tmp.2 = putchar(i.2)
            tmp.3 = i.2 + 1
            i.2 = tmp.3
            tmp.4 = putchar(10)
            return 0
            return 0
        }
        global function main() { 
            i.3 = 0
        
          start_loop_0:
            tmp.5 = i.3 < 26
            if !tmp.5 jump break_loop_0
            tmp.6 = print_letters()
        
          continue_loop_0:
            tmp.7 = i.3 + 1
            i.3 = tmp.7
            jump start_loop_0
        
          break_loop_0:
            return 0
        }
        static i.1: Int = 65
        static i.2: Int = 97
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_static_local_uninitialized() {
    let src = r#"
        int foo(void) {
            static int x;
            x = x + 1;
            return x;
        }
        int main(void) {
            int ret;
            for (int i = 0; i < 4; i = i + 1)
                ret = foo();
            return ret;
        }
    "#;
    let expected = r#"
        global function foo() { 
            tmp.0 = x.0 + 1
            x.0 = tmp.0
            return x.0
            return 0
        }
        global function main() { 
            i.2 = 0
        
          start_loop_0:
            tmp.1 = i.2 < 4
            if !tmp.1 jump break_loop_0
            tmp.2 = foo()
            ret.1 = tmp.2
        
          continue_loop_0:
            tmp.3 = i.2 + 1
            i.2 = tmp.3
            jump start_loop_0
        
          break_loop_0:
            return ret.1
            return 0
        }
        static x.0: Int = zero[4]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_static_recursive_call() {
    let src = r#"
        int putchar (int ch);
        int print_alphabet(void) {
            static int count = 0;
            putchar(count + 65);
            count = count + 1;
            if (count < 26) {
                print_alphabet();
            }
            return count;
        }
        int main(void) {
            print_alphabet();
        }
    "#;
    let expected = r#"
        global function print_alphabet() { 
            tmp.0 = count.1 + 65
            tmp.1 = putchar(tmp.0)
            tmp.2 = count.1 + 1
            count.1 = tmp.2
            tmp.3 = count.1 < 26
            if !tmp.3 jump end_if_0
            tmp.4 = print_alphabet()
        
          end_if_0:
            return count.1
            return 0
        }
        global function main() { 
            tmp.5 = print_alphabet()
            return 0
        }
        static count.1: Int = 0
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_static_then_extern() {
    let src = r#"
        static int foo = 3;
        int main(void) {
            return foo;
        }
        extern int foo;
    "#;
    let expected = r#"
        global function main() { 
            return foo
            return 0
        }
        static foo: Int = 3
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_static_variables_in_expressions() {
    let src = r#"
        int main(void) {
            static int i = 2;
            static int j = 3;
            int cmp = i < j;
            if (!cmp)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = i.0 < j.1
            cmp.2 = tmp.0
            tmp.1 = ! cmp.2
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            return 0
            return 0
        }
        static i.0: Int = 2
        static j.1: Int = 3
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_tentative_definition() {
    let src = r#"
        extern int foo;
        int foo;
        int foo;
        int main(void) {
            for (int i = 0; i < 5; i = i + 1)
                foo = foo + 1;
            return foo;
        }
        int foo;
    "#;
    let expected = r#"
        global function main() { 
            i.0 = 0
        
          start_loop_0:
            tmp.0 = i.0 < 5
            if !tmp.0 jump break_loop_0
            tmp.1 = foo + 1
            foo = tmp.1
        
          continue_loop_0:
            tmp.2 = i.0 + 1
            i.0 = tmp.2
            jump start_loop_0
        
          break_loop_0:
            return foo
            return 0
        }
        static global foo: Int = zero[4]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_type_before_storage_class() {
    let src = r#"
        int static foo(void) {
            return 3;
        }
        int static bar = 4;
        int main(void) {
            int extern foo(void);
            int extern bar;
            return foo() + bar;
        }
    "#;
    let expected = r#"
        function foo() { 
            return 3
            return 0
        }
        global function main() { 
            tmp.0 = foo()
            tmp.1 = tmp.0 + bar
            return tmp.1
            return 0
        }
        static bar: Int = 4
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_explicit_casts_sign_extend() {
    let src = r#"
        long sign_extend(int i, long expected) {
            long extended = (long) i;
            return (extended == expected);
        }
        int main(void) {
            if (!sign_extend(10, 10l)) {
                return 1;
            }
            if (!sign_extend(-10, -10l)) {
                return 2;
            }
            long l = (long) 100;
            if (l != 100l) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function sign_extend(i.0, expected.1) { 
            tmp.0 = sign_extend i.0
            extended.2 = tmp.0
            tmp.1 = extended.2 == expected.1
            tmp.2 = sign_extend tmp.1
            return tmp.2
            return 0
        }
        global function main() { 
            tmp.3 = sign_extend(10, 10L)
            tmp.4 = ! tmp.3
            if !tmp.4 jump end_if_0
            return 1
        
          end_if_0:
            tmp.5 = - 10
            tmp.6 = - 10L
            tmp.7 = sign_extend(tmp.5, tmp.6)
            tmp.8 = ! tmp.7
            if !tmp.8 jump end_if_2
            return 2
        
          end_if_2:
            tmp.9 = sign_extend 100
            l.3 = tmp.9
            tmp.10 = l.3 != 100L
            if !tmp.10 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_explicit_casts_truncate() {
    let src = r#"
        int truncate(long l, int expected) {
            int result = (int) l;
            return (result == expected);
        }
        int main(void)
        {
            if (!truncate(10l, 10)) {
                return 1;
            }
            if (!truncate(-10l, -10)) {
                return 2;
            }
            if (!truncate(17179869189l,
                          5)) {
                return 3;
            }
            if (!truncate(-17179869179l,
                          5l)) {
                return 4;
            }
            int i = (int)17179869189l;
            if (i != 5)
                return 5;
            return 0;
        }
    "#;
    let expected = r#"
        global function truncate(l.0, expected.1) { 
            tmp.0 = truncate l.0
            result.2 = tmp.0
            tmp.1 = result.2 == expected.1
            return tmp.1
            return 0
        }
        global function main() { 
            tmp.2 = truncate(10L, 10)
            tmp.3 = ! tmp.2
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = - 10L
            tmp.5 = - 10
            tmp.6 = truncate(tmp.4, tmp.5)
            tmp.7 = ! tmp.6
            if !tmp.7 jump end_if_2
            return 2
        
          end_if_2:
            tmp.8 = truncate(17179869189L, 5)
            tmp.9 = ! tmp.8
            if !tmp.9 jump end_if_4
            return 3
        
          end_if_4:
            tmp.10 = - 17179869179L
            tmp.11 = truncate 5L
            tmp.12 = truncate(tmp.10, tmp.11)
            tmp.13 = ! tmp.12
            if !tmp.13 jump end_if_6
            return 4
        
          end_if_6:
            tmp.14 = truncate 17179869189L
            i.3 = tmp.14
            tmp.15 = i.3 != 5
            if !tmp.15 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_bitshift() {
    let src = r#"
        int main(void) {
            long l = 137438953472l;
            int shiftcount = 2;
            if (l >> shiftcount != 34359738368l ) {
                return 1;
            }
            if (l << shiftcount != 549755813888 ) {
                return 2;
            }
            if (l << 2 != 549755813888 ) {
                return 3;
            }
            if ((40l << 40) != 43980465111040l) {
                return 4;
            }
            long long_shiftcount = 3l;
            int i_neighbor1 = 0;
            int i = -2147483645;
            int i_neighbor2 = 0;
            if (i >> long_shiftcount != -268435456) {
                return 5;
            }
            i = -1;
            if (i >> 10l != -1) {
                return 6;
            }
            if (i_neighbor1) {
                return 7;
            }
            if (i_neighbor2) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            l.0 = 137438953472L
            shiftcount.1 = 2
            tmp.0 = l.0 >> shiftcount.1
            tmp.1 = tmp.0 != 34359738368L
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = l.0 << shiftcount.1
            tmp.3 = tmp.2 != 549755813888L
            if !tmp.3 jump end_if_2
            return 2
        
          end_if_2:
            tmp.4 = l.0 << 2
            tmp.5 = tmp.4 != 549755813888L
            if !tmp.5 jump end_if_4
            return 3
        
          end_if_4:
            tmp.6 = 40L << 40
            tmp.7 = tmp.6 != 43980465111040L
            if !tmp.7 jump end_if_6
            return 4
        
          end_if_6:
            long_shiftcount.2 = 3L
            i_neighbor1.3 = 0
            tmp.8 = - 2147483645
            i.4 = tmp.8
            i_neighbor2.5 = 0
            tmp.9 = i.4 >> long_shiftcount.2
            tmp.11 = - 268435456
            tmp.10 = tmp.9 != tmp.11
            if !tmp.10 jump end_if_8
            return 5
        
          end_if_8:
            tmp.12 = - 1
            i.4 = tmp.12
            tmp.13 = i.4 >> 10L
            tmp.15 = - 1
            tmp.14 = tmp.13 != tmp.15
            if !tmp.14 jump end_if_10
            return 6
        
          end_if_10:
            if !i_neighbor1.3 jump end_if_12
            return 7
        
          end_if_12:
            if !i_neighbor2.5 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_bitwise_long_op() {
    let src = r#"
        int main(void) {
            long l1 = 71777214294589695l;
            long l2 = -4294967296;
            if ((l1 & l2) != 71777214277877760l ) {
                return 1;
            }
            if ((l1 | l2) != -4278255361 ) {
                return 2;
            }
            if ((l1 ^ l2) != -71777218556133121 ) {
                return 3;
            }
            if ((-1l & 34359738368l) != 34359738368l) {
                return 4;
            }
            if ((0l | 34359738368l) != 34359738368l) {
                return 5;
            }
            if ((34359738368l ^ 137438953472l) != 171798691840l) {
                return 6;
            }
            long l = 4611686018427387903l;
            int i = -1073741824;
            int i2 = -1;
            if ((i & l) != 4611686017353646080l) {
                return 7;
            }
            if ((l | i) != -1) {
                return 8;
            }
            if ((l ^ i) != -4611686017353646081) {
                return 9;
            }
            if ((i2 ^ 4611686018427387903l) != ~4611686018427387903l) {
                return 10;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            l1.0 = 71777214294589695L
            tmp.0 = - 4294967296L
            l2.1 = tmp.0
            tmp.1 = l1.0 & l2.1
            tmp.2 = tmp.1 != 71777214277877760L
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.3 = l1.0 | l2.1
            tmp.5 = - 4278255361L
            tmp.4 = tmp.3 != tmp.5
            if !tmp.4 jump end_if_2
            return 2
        
          end_if_2:
            tmp.6 = l1.0 ^ l2.1
            tmp.8 = - 71777218556133121L
            tmp.7 = tmp.6 != tmp.8
            if !tmp.7 jump end_if_4
            return 3
        
          end_if_4:
            tmp.9 = - 1L
            tmp.10 = tmp.9 & 34359738368L
            tmp.11 = tmp.10 != 34359738368L
            if !tmp.11 jump end_if_6
            return 4
        
          end_if_6:
            tmp.12 = 0L | 34359738368L
            tmp.13 = tmp.12 != 34359738368L
            if !tmp.13 jump end_if_8
            return 5
        
          end_if_8:
            tmp.14 = 34359738368L ^ 137438953472L
            tmp.15 = tmp.14 != 171798691840L
            if !tmp.15 jump end_if_10
            return 6
        
          end_if_10:
            l.2 = 4611686018427387903L
            tmp.16 = - 1073741824
            i.3 = tmp.16
            tmp.17 = - 1
            i2.4 = tmp.17
            tmp.18 = sign_extend i.3
            tmp.19 = tmp.18 & l.2
            tmp.20 = tmp.19 != 4611686017353646080L
            if !tmp.20 jump end_if_12
            return 7
        
          end_if_12:
            tmp.22 = sign_extend i.3
            tmp.21 = l.2 | tmp.22
            tmp.24 = - 1
            tmp.25 = sign_extend tmp.24
            tmp.23 = tmp.21 != tmp.25
            if !tmp.23 jump end_if_14
            return 8
        
          end_if_14:
            tmp.27 = sign_extend i.3
            tmp.26 = l.2 ^ tmp.27
            tmp.29 = - 4611686017353646081L
            tmp.28 = tmp.26 != tmp.29
            if !tmp.28 jump end_if_16
            return 9
        
          end_if_16:
            tmp.30 = sign_extend i2.4
            tmp.31 = tmp.30 ^ 4611686018427387903L
            tmp.33 = ~ 4611686018427387903L
            tmp.32 = tmp.31 != tmp.33
            if !tmp.32 jump end_if_18
            return 10
        
          end_if_18:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_compound_assign_to_int() {
    let src = r#"
        int main(void) {
            int i = -20;
            int b = 2147483647;
            int c = -5000000;
            i += 2147483648l;
            if (i != 2147483628) {
                return 1;
            }
            if (b != 2147483647) {
                return 2;
            }
            b /= -34359738367l;
            if (b) {
                return 3;
            }
            if (i != 2147483628) {
                return 4;
            }
            if (c != -5000000) {
                return 5;
            }
            c *= 10000l;
            if (c != 1539607552) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 20
            i.0 = tmp.0
            b.1 = 2147483647
            tmp.1 = - 5000000
            c.2 = tmp.1
            tmp.2 = sign_extend i.0
            tmp.3 = tmp.2 + 2147483648L
            tmp.4 = truncate tmp.3
            i.0 = tmp.4
            tmp.5 = truncate tmp.4
            tmp.6 = i.0 != 2147483628
            if !tmp.6 jump end_if_0
            return 1
        
          end_if_0:
            tmp.7 = b.1 != 2147483647
            if !tmp.7 jump end_if_2
            return 2
        
          end_if_2:
            tmp.8 = sign_extend b.1
            tmp.10 = - 34359738367L
            tmp.9 = tmp.8 / tmp.10
            tmp.11 = truncate tmp.9
            b.1 = tmp.11
            tmp.12 = truncate tmp.11
            if !b.1 jump end_if_4
            return 3
        
          end_if_4:
            tmp.13 = i.0 != 2147483628
            if !tmp.13 jump end_if_6
            return 4
        
          end_if_6:
            tmp.15 = - 5000000
            tmp.14 = c.2 != tmp.15
            if !tmp.14 jump end_if_8
            return 5
        
          end_if_8:
            tmp.16 = sign_extend c.2
            tmp.17 = tmp.16 * 10000L
            tmp.18 = truncate tmp.17
            c.2 = tmp.18
            tmp.19 = truncate tmp.18
            tmp.20 = c.2 != 1539607552
            if !tmp.20 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_compound_assign_to_long() {
    let src = r#"
        int main(void) {
            long l = -34359738368l;
            int i = -10;
            l -= i;
            if (l != -34359738358l) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 34359738368L
            l.0 = tmp.0
            tmp.1 = - 10
            i.1 = tmp.1
            tmp.3 = sign_extend i.1
            tmp.2 = l.0 - tmp.3
            l.0 = tmp.2
            tmp.5 = - 34359738358L
            tmp.4 = l.0 != tmp.5
            if !tmp.4 jump end_if_0
            return 1
        
          end_if_0:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_compound_bitshift() {
    let src = r#"
        int main(void) {
            int x = 100;
            x <<= 22l;
            if (x != 419430400) {
                return 1;
            }
            if ((x >>= 4l) != 26214400) {
                return 2;
            }
            if (x != 26214400) {
                return 3;
            }
            long l = 12345l;
            if ((l <<= 33) != 106042742538240l) {
                return 4;
            }
            l = -l;
            if ((l >>= 10) != -103557365760l) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 100
            tmp.1 = truncate 22L
            tmp.0 = x.0 << tmp.1
            x.0 = tmp.0
            tmp.2 = x.0 != 419430400
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = truncate 4L
            tmp.3 = x.0 >> tmp.4
            x.0 = tmp.3
            tmp.5 = tmp.3 != 26214400
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            tmp.6 = x.0 != 26214400
            if !tmp.6 jump end_if_4
            return 3
        
          end_if_4:
            l.1 = 12345L
            tmp.8 = sign_extend 33
            tmp.7 = l.1 << tmp.8
            l.1 = tmp.7
            tmp.9 = tmp.7 != 106042742538240L
            if !tmp.9 jump end_if_6
            return 4
        
          end_if_6:
            tmp.10 = - l.1
            l.1 = tmp.10
            tmp.12 = sign_extend 10
            tmp.11 = l.1 >> tmp.12
            l.1 = tmp.11
            tmp.14 = - 103557365760L
            tmp.13 = tmp.11 != tmp.14
            if !tmp.13 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_compound_bitwise() {
    let src = r#"
        int main(void) {
            long l1 = 71777214294589695l;
            long l2 = -4294967296;
            l1 &= l2;
            if (l1 != 71777214277877760l) {
                return 1;
            }
            l2 |= 100l;
            if (l2 != -4294967196) {
                return 2;
            }
            l1 ^= -9223372036854775807l;
            if (l1 != -9151594822576898047l ) {
                return 3;
            }
            l1 = 4611686018427387903l;
            int i = -1073741824;
            l1 &= i;
            if (l1 != 4611686017353646080l) {
                return 4;
            }
            i = -2147483648l;
            if ((i |= 71777214294589695l) != -2130771713) {
                return 5;
            }
            if (i != -2130771713) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            l1.0 = 71777214294589695L
            tmp.0 = - 4294967296L
            l2.1 = tmp.0
            tmp.1 = l1.0 & l2.1
            l1.0 = tmp.1
            tmp.2 = l1.0 != 71777214277877760L
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.3 = l2.1 | 100L
            l2.1 = tmp.3
            tmp.5 = - 4294967196L
            tmp.4 = l2.1 != tmp.5
            if !tmp.4 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = - 9223372036854775807L
            tmp.6 = l1.0 ^ tmp.7
            l1.0 = tmp.6
            tmp.9 = - 9151594822576898047L
            tmp.8 = l1.0 != tmp.9
            if !tmp.8 jump end_if_4
            return 3
        
          end_if_4:
            l1.0 = 4611686018427387903L
            tmp.10 = - 1073741824
            i.2 = tmp.10
            tmp.12 = sign_extend i.2
            tmp.11 = l1.0 & tmp.12
            l1.0 = tmp.11
            tmp.13 = l1.0 != 4611686017353646080L
            if !tmp.13 jump end_if_6
            return 4
        
          end_if_6:
            tmp.14 = - 2147483648L
            tmp.15 = truncate tmp.14
            i.2 = tmp.15
            tmp.16 = sign_extend i.2
            tmp.17 = tmp.16 | 71777214294589695L
            tmp.18 = truncate tmp.17
            i.2 = tmp.18
            tmp.19 = truncate tmp.18
            tmp.21 = - 2130771713
            tmp.22 = sign_extend tmp.21
            tmp.20 = tmp.19 != tmp.22
            if !tmp.20 jump end_if_8
            return 5
        
          end_if_8:
            tmp.24 = - 2130771713
            tmp.23 = i.2 != tmp.24
            if !tmp.23 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_increment_long() {
    let src = r#"
        
        int main(void) {
            long x = -9223372036854775807l;
            if (x++ != -9223372036854775807l) {
                return 1;
            }
            if (x != -9223372036854775806l) {
                return 2;
            }
            if (--x != -9223372036854775807l) {
                return 3;
            }
            if (x != -9223372036854775807l) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 9223372036854775807L
            x.0 = tmp.0
            tmp.1 = x.0
            tmp.2 = inc x.0
            x.0 = tmp.2
            tmp.4 = - 9223372036854775807L
            tmp.3 = tmp.1 != tmp.4
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = - 9223372036854775806L
            tmp.5 = x.0 != tmp.6
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = dec x.0
            x.0 = tmp.7
            tmp.9 = - 9223372036854775807L
            tmp.8 = tmp.7 != tmp.9
            if !tmp.8 jump end_if_4
            return 3
        
          end_if_4:
            tmp.11 = - 9223372036854775807L
            tmp.10 = x.0 != tmp.11
            if !tmp.10 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_switch_int() {
    let src = r#"
        int switch_on_int(int i) {
            switch(i) {
                case 5:
                    return 0;
                case 8589934592l:
                    return 1;
                case 34359738367:
                    return 2;
                default:
                    return 3;
            }
        }
        int main(void) {
            if (switch_on_int(5) != 0)
                return 1;
            if (switch_on_int(0) != 1)
                return 2;
            if (switch_on_int(-1) != 2)
                return 3;
            if (switch_on_int(17179869184) != 1)
                return 4;
            return 0;
        }
    "#;
    let expected = r#"
        global function switch_on_int(i.0) { 
            tmp.0 = i.0 == 5
            if tmp.0 jump switch_0_case__1
            tmp.1 = i.0 == 0
            if tmp.1 jump switch_0_case__2
            tmp.2 = i.0 == -1
            if tmp.2 jump switch_0_case__3
            jump switch_0_default_4
            jump break_switch_0
        
          switch_0_case__1:
            return 0
        
          switch_0_case__2:
            return 1
        
          switch_0_case__3:
            return 2
        
          switch_0_default_4:
            return 3
        
          break_switch_0:
            return 0
        }
        global function main() { 
            tmp.3 = switch_on_int(5)
            tmp.4 = tmp.3 != 0
            if !tmp.4 jump end_if_0
            return 1
        
          end_if_0:
            tmp.5 = switch_on_int(0)
            tmp.6 = tmp.5 != 1
            if !tmp.6 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = - 1
            tmp.8 = switch_on_int(tmp.7)
            tmp.9 = tmp.8 != 2
            if !tmp.9 jump end_if_4
            return 3
        
          end_if_4:
            tmp.10 = truncate 17179869184L
            tmp.11 = switch_on_int(tmp.10)
            tmp.12 = tmp.11 != 1
            if !tmp.12 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_switch_long() {
    let src = r#"
        int switch_on_long(long l) {
            switch (l) {
                case 0: return 0;
                case 100: return 1;
                case 8589934592l:
                    return 2;
                default:
                    return -1;
            }
        }
        int main(void) {
            if (switch_on_long(8589934592) != 2)
                return 1;
            if (switch_on_long(100) != 1)
                return 2;
            return 0;
        }
    "#;
    let expected = r#"
        global function switch_on_long(l.0) { 
            tmp.0 = l.0 == 0L
            if tmp.0 jump switch_0_case__1
            tmp.1 = l.0 == 100L
            if tmp.1 jump switch_0_case__2
            tmp.2 = l.0 == 8589934592L
            if tmp.2 jump switch_0_case__3
            jump switch_0_default_4
            jump break_switch_0
        
          switch_0_case__1:
            return 0
        
          switch_0_case__2:
            return 1
        
          switch_0_case__3:
            return 2
        
          switch_0_default_4:
            tmp.3 = - 1
            return tmp.3
        
          break_switch_0:
            return 0
        }
        global function main() { 
            tmp.4 = switch_on_long(8589934592L)
            tmp.5 = tmp.4 != 2
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = sign_extend 100
            tmp.7 = switch_on_long(tmp.6)
            tmp.8 = tmp.7 != 1
            if !tmp.8 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_implicit_casts_common_type() {
    let src = r#"
        long l;
        int i;
        int addition(void) {
            long result = i + l;
            return (result == 2147483663l);
        }
        int division(void) {
            int int_result = l / i;
            return (int_result == 214748364);
        }
        int comparison(void) {
            return (i <= l);
        }
        int conditional(void) {
            long result = 1 ? l : i;
            return (result == 8589934592l);
        }
        int main(void) {
            l = 2147483653;
            i = 10;
            if (!addition()) {
                return 1;
            }
            l = 2147483649l;
            if (!division()) {
                return 2;
            }
            i = -100;
            l = 2147483648;
            if (!comparison()) {
                return 3;
            }
            l = 8589934592l;
            i = 10;
            if (!conditional()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function addition() { 
            tmp.0 = sign_extend i
            tmp.1 = tmp.0 + l
            result.0 = tmp.1
            tmp.2 = result.0 == 2147483663L
            return tmp.2
            return 0
        }
        global function division() { 
            tmp.4 = sign_extend i
            tmp.3 = l / tmp.4
            tmp.5 = truncate tmp.3
            int_result.1 = tmp.5
            tmp.6 = int_result.1 == 214748364
            return tmp.6
            return 0
        }
        global function comparison() { 
            tmp.7 = sign_extend i
            tmp.8 = tmp.7 <= l
            return tmp.8
            return 0
        }
        global function conditional() { 
            if !1 jump else_1
            tmp.9 = l
            jump end_if_0
        
          else_1:
            tmp.10 = sign_extend i
            tmp.9 = tmp.10
        
          end_if_0:
            result.2 = tmp.9
            tmp.11 = result.2 == 8589934592L
            return tmp.11
            return 0
        }
        global function main() { 
            l = 2147483653L
            i = 10
            tmp.12 = addition()
            tmp.13 = ! tmp.12
            if !tmp.13 jump end_if_2
            return 1
        
          end_if_2:
            l = 2147483649L
            tmp.14 = division()
            tmp.15 = ! tmp.14
            if !tmp.15 jump end_if_4
            return 2
        
          end_if_4:
            tmp.16 = - 100
            i = tmp.16
            l = 2147483648L
            tmp.17 = comparison()
            tmp.18 = ! tmp.17
            if !tmp.18 jump end_if_6
            return 3
        
          end_if_6:
            l = 8589934592L
            i = 10
            tmp.19 = conditional()
            tmp.20 = ! tmp.19
            if !tmp.20 jump end_if_8
            return 4
        
          end_if_8:
            return 0
            return 0
        }
        static global i: Int = zero[4]
        static global l: Long = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_implicit_casts_convert_by_assignment() {
    let src = r#"
        int return_truncated_long(long l) {
            return l;
        }
        long return_extended_int(int i) {
            return i;
        }
        int truncate_on_assignment(long l, int expected) {
            int result = l;
            return result == expected;
        }
        int main(void) {
            long result = return_truncated_long(4294967298l);
            if (result != 2l) {
                return 1;
            }
            result = return_extended_int(-10);
            if (result != -10) {
                return 2;
            }
            int i = 4294967298l;
            if (i != 2) {
                return 3;
            }
            if (!truncate_on_assignment(17179869184l, 0)) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function return_truncated_long(l.0) { 
            tmp.0 = truncate l.0
            return tmp.0
            return 0
        }
        global function return_extended_int(i.1) { 
            tmp.1 = sign_extend i.1
            return tmp.1
            return 0
        }
        global function truncate_on_assignment(l.2, expected.3) { 
            tmp.2 = truncate l.2
            result.4 = tmp.2
            tmp.3 = result.4 == expected.3
            return tmp.3
            return 0
        }
        global function main() { 
            tmp.4 = return_truncated_long(4294967298L)
            tmp.5 = sign_extend tmp.4
            result.5 = tmp.5
            tmp.6 = result.5 != 2L
            if !tmp.6 jump end_if_0
            return 1
        
          end_if_0:
            tmp.7 = - 10
            tmp.8 = return_extended_int(tmp.7)
            result.5 = tmp.8
            tmp.10 = - 10
            tmp.11 = sign_extend tmp.10
            tmp.9 = result.5 != tmp.11
            if !tmp.9 jump end_if_2
            return 2
        
          end_if_2:
            tmp.12 = truncate 4294967298L
            i.6 = tmp.12
            tmp.13 = i.6 != 2
            if !tmp.13 jump end_if_4
            return 3
        
          end_if_4:
            tmp.14 = truncate_on_assignment(17179869184L, 0)
            tmp.15 = ! tmp.14
            if !tmp.15 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_implicit_casts_convert_function_arguments() {
    let src = r#"
        int foo(long a, int b, int c, int d, long e, int f, long g, int h) {
            if (a != -1l)
                return 1;
            if (b != 2)
                return 2;
            if (c != 0)
                return 3;
            if (d != -5)
                return 4;
            if (e != -101l)
                return 5;
            if (f != -123)
                return 6;
            if (g != -10l)
                return 7;
            if (h != 1234)
                return 8;
            return 0;
        }
        int main(void) {
            int a = -1;
            long int b = 4294967298;
            long c = -4294967296;
            long d =
                21474836475;
            int e = -101;
            long f = -123;
            int g = -10;
            long h = -9223372036854774574;
            return foo(a, b, c, d, e, f, g, h);
        }
    "#;
    let expected = r#"
        global function foo(a.0, b.1, c.2, d.3, e.4, f.5, g.6, h.7) { 
            tmp.1 = - 1L
            tmp.0 = a.0 != tmp.1
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = b.1 != 2
            if !tmp.2 jump end_if_2
            return 2
        
          end_if_2:
            tmp.3 = c.2 != 0
            if !tmp.3 jump end_if_4
            return 3
        
          end_if_4:
            tmp.5 = - 5
            tmp.4 = d.3 != tmp.5
            if !tmp.4 jump end_if_6
            return 4
        
          end_if_6:
            tmp.7 = - 101L
            tmp.6 = e.4 != tmp.7
            if !tmp.6 jump end_if_8
            return 5
        
          end_if_8:
            tmp.9 = - 123
            tmp.8 = f.5 != tmp.9
            if !tmp.8 jump end_if_10
            return 6
        
          end_if_10:
            tmp.11 = - 10L
            tmp.10 = g.6 != tmp.11
            if !tmp.10 jump end_if_12
            return 7
        
          end_if_12:
            tmp.12 = h.7 != 1234
            if !tmp.12 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
        global function main() { 
            tmp.13 = - 1
            a.8 = tmp.13
            b.9 = 4294967298L
            tmp.14 = - 4294967296L
            c.10 = tmp.14
            d.11 = 21474836475L
            tmp.15 = - 101
            e.12 = tmp.15
            tmp.16 = - 123
            tmp.17 = sign_extend tmp.16
            f.13 = tmp.17
            tmp.18 = - 10
            g.14 = tmp.18
            tmp.19 = - 9223372036854774574L
            h.15 = tmp.19
            tmp.20 = sign_extend a.8
            tmp.21 = truncate b.9
            tmp.22 = truncate c.10
            tmp.23 = truncate d.11
            tmp.24 = sign_extend e.12
            tmp.25 = truncate f.13
            tmp.26 = sign_extend g.14
            tmp.27 = truncate h.15
            tmp.28 = foo(tmp.20, tmp.21, tmp.22, tmp.23, tmp.24, tmp.25, tmp.26, tmp.27)
            return tmp.28
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_implicit_casts_convert_static_initializer() {
    let src = r#"
        int i = 8589934592l;
        long j = 123456;
        int main(void) {
            if (i != 0) {
                return 1;
            }
            if (j != 123456l) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = i != 0
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = j != 123456L
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
        static global i: Int = 0
        static global j: Long = 123456L
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_implicit_casts_long_constants() {
    let src = r#"
        int main(void) {
            if (2147483647l + 2147483647l < 0l) {
                return 1;
            }
            if (19327352832 < 100l) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 2147483647L + 2147483647L
            tmp.1 = tmp.0 < 0L
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = 19327352832L < 100L
            if !tmp.2 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_long_args() {
    let src = r#"
        int test_sum(int a, int b, int c, long d, int e, long f, int g, int h, long i) {
            if (d + f < 100l) {
                return 1;
            }
            if (i < 100l)
                return 2;
            return 0;
        }
    "#;
    let expected = r#"
        global function test_sum(a.0, b.1, c.2, d.3, e.4, f.5, g.6, h.7, i.8) { 
            tmp.0 = d.3 + f.5
            tmp.1 = tmp.0 < 100L
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = i.8 < 100L
            if !tmp.2 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_long_args_client() {
    let src = r#"
        int test_sum(int a, int b, int c, long d, int e, long f, int g, int h, long i);
        int main(void) {
            return test_sum(0, 0, 0, 34359738368l, 0, 34359738368l, 0, 0, 34359738368l);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = test_sum(0, 0, 0, 34359738368L, 0, 34359738368L, 0, 0, 34359738368L)
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_long_global_var() {
    let src = r#"
        long int l = 8589934592l;
        long return_l(void) {
            return l;
        }
        int return_l_as_int(void) {
            return l;
        }
    "#;
    let expected = r#"
        global function return_l() { 
            return l
            return 0
        }
        global function return_l_as_int() { 
            tmp.0 = truncate l
            return tmp.0
            return 0
        }
        static global l: Long = 8589934592L
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_long_global_var_client() {
    let src = r#"
        extern long int l;
        long return_l(void);
        int return_l_as_int(void);
        int main(void) {
            if (return_l() != 8589934592l)
                return 1;
            if (return_l_as_int() != 0)
                return 2;
            l = l - 10l;
            if (return_l() != 8589934582l)
                return 3;
            if (return_l_as_int() != -10)
                return 4;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = return_l()
            tmp.1 = tmp.0 != 8589934592L
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = return_l_as_int()
            tmp.3 = tmp.2 != 0
            if !tmp.3 jump end_if_2
            return 2
        
          end_if_2:
            tmp.4 = l - 10L
            l = tmp.4
            tmp.5 = return_l()
            tmp.6 = tmp.5 != 8589934582L
            if !tmp.6 jump end_if_4
            return 3
        
          end_if_4:
            tmp.7 = return_l_as_int()
            tmp.9 = - 10
            tmp.8 = tmp.7 != tmp.9
            if !tmp.8 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_maintain_stack_alignment() {
    let src = r#"
        long add_variables(long x, long y, int z){
            return x + y + z;
        }
    "#;
    let expected = r#"
        global function add_variables(x.0, y.1, z.2) { 
            tmp.0 = x.0 + y.1
            tmp.2 = sign_extend z.2
            tmp.1 = tmp.0 + tmp.2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_maintain_stack_alignment_client() {
    let src = r#"
        long add_variables(long x, long y, int z);
        int main(void) {
            long x = 3;
            long y = 4;
            int z = 5;
            return add_variables(x, y, z);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = sign_extend 3
            x.3 = tmp.0
            tmp.1 = sign_extend 4
            y.4 = tmp.1
            z.5 = 5
            tmp.2 = add_variables(x.3, y.4, z.5)
            tmp.3 = truncate tmp.2
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_return_long() {
    let src = r#"
        long add(int a, int b) {
            return (long) a + (long) b;
        }
    "#;
    let expected = r#"
        global function add(a.0, b.1) { 
            tmp.0 = sign_extend a.0
            tmp.2 = sign_extend b.1
            tmp.1 = tmp.0 + tmp.2
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_return_long_client() {
    let src = r#"
        long add(int a, int b);
        int main(void) {
            long a = add(2147483645, 2147483645);
            if (a != 4294967290l) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = add(2147483645, 2147483645)
            a.2 = tmp.0
            tmp.1 = a.2 != 4294967290L
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_arithmetic_ops() {
    let src = r#"
        long a;
        long b;
        int addition(void) {
            return (a + b == 4294967295l);
        }
        int subtraction(void) {
            return (a - b == -4294967380l);
        }
        int multiplication(void) {
            return (a * 4l == 17179869160l);
        }
        int division(void) {
            b = a / 128l;
            return (b == 33554431l);
        }
        int remaind(void) {
            b = -a % 4294967290l;
            return (b == -5l);
        }
        int complement(void) {
            return (~a == -9223372036854775807l);
        }
        int main(void) {
            a = 4294967290l;
            b = 5l;
            if (!addition()) {
                return 1;
            }
            a = -4294967290l;
            b = 90l;
            if (!subtraction()) {
                return 2;
            }
            a = 4294967290l;
            if (!multiplication()) {
                return 3;
            }
            a = 4294967290l;
            if (!division()) {
                return 4;
            }
            a = 8589934585l;
            if (!remaind()) {
                return 5;
            }
            a = 9223372036854775806l;
            if (!complement()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function addition() { 
            tmp.0 = a + b
            tmp.1 = tmp.0 == 4294967295L
            return tmp.1
            return 0
        }
        global function subtraction() { 
            tmp.2 = a - b
            tmp.4 = - 4294967380L
            tmp.3 = tmp.2 == tmp.4
            return tmp.3
            return 0
        }
        global function multiplication() { 
            tmp.5 = a * 4L
            tmp.6 = tmp.5 == 17179869160L
            return tmp.6
            return 0
        }
        global function division() { 
            tmp.7 = a / 128L
            b = tmp.7
            tmp.8 = b == 33554431L
            return tmp.8
            return 0
        }
        global function remaind() { 
            tmp.9 = - a
            tmp.10 = tmp.9 % 4294967290L
            b = tmp.10
            tmp.12 = - 5L
            tmp.11 = b == tmp.12
            return tmp.11
            return 0
        }
        global function complement() { 
            tmp.13 = ~ a
            tmp.15 = - 9223372036854775807L
            tmp.14 = tmp.13 == tmp.15
            return tmp.14
            return 0
        }
        global function main() { 
            a = 4294967290L
            b = 5L
            tmp.16 = addition()
            tmp.17 = ! tmp.16
            if !tmp.17 jump end_if_0
            return 1
        
          end_if_0:
            tmp.18 = - 4294967290L
            a = tmp.18
            b = 90L
            tmp.19 = subtraction()
            tmp.20 = ! tmp.19
            if !tmp.20 jump end_if_2
            return 2
        
          end_if_2:
            a = 4294967290L
            tmp.21 = multiplication()
            tmp.22 = ! tmp.21
            if !tmp.22 jump end_if_4
            return 3
        
          end_if_4:
            a = 4294967290L
            tmp.23 = division()
            tmp.24 = ! tmp.23
            if !tmp.24 jump end_if_6
            return 4
        
          end_if_6:
            a = 8589934585L
            tmp.25 = remaind()
            tmp.26 = ! tmp.25
            if !tmp.26 jump end_if_8
            return 5
        
          end_if_8:
            a = 9223372036854775806L
            tmp.27 = complement()
            tmp.28 = ! tmp.27
            if !tmp.28 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
        static global a: Long = zero[8]
        static global b: Long = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_assign() {
    let src = r#"
        int main(void) {
            long a = 4294967290l;
            long b = 0l;
            b = a;
            return (b == 4294967290l);
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 4294967290L
            b.1 = 0L
            b.1 = a.0
            tmp.0 = b.1 == 4294967290L
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_comparisons() {
    let src = r#"
        long l;
        long l2;
        int compare_constants(void) {
            return 8589934593l > 255l;
        }
        int compare_constants_2(void) {
            return 255l < 8589934593l;
        }
        int l_geq_2_60(void) {
            return (l >= 1152921504606846976l);
        }
        int uint_max_leq_l(void) {
            return (4294967295l <= l);
        }
        int l_eq_l2(void) {
            return (l == l2);
        }
        int main(void) {
            if (!compare_constants()) {
                return 1;
            }
            if (!compare_constants_2()) {
                return 2;
            }
            l = -9223372036854775807l;
            if (l_geq_2_60()) {
                return 3;
            }
            if (uint_max_leq_l()) {
                return 4;
            }
            l = 1152921504606846976l;
            if (!l_geq_2_60()) {
                return 5;
            }
            if (!uint_max_leq_l()) {
                return 6;
            }
            l2 = l;
            if (!l_eq_l2()) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function compare_constants() { 
            tmp.0 = 8589934593L > 255L
            return tmp.0
            return 0
        }
        global function compare_constants_2() { 
            tmp.1 = 255L < 8589934593L
            return tmp.1
            return 0
        }
        global function l_geq_2_60() { 
            tmp.2 = l >= 1152921504606846976L
            return tmp.2
            return 0
        }
        global function uint_max_leq_l() { 
            tmp.3 = 4294967295L <= l
            return tmp.3
            return 0
        }
        global function l_eq_l2() { 
            tmp.4 = l == l2
            return tmp.4
            return 0
        }
        global function main() { 
            tmp.5 = compare_constants()
            tmp.6 = ! tmp.5
            if !tmp.6 jump end_if_0
            return 1
        
          end_if_0:
            tmp.7 = compare_constants_2()
            tmp.8 = ! tmp.7
            if !tmp.8 jump end_if_2
            return 2
        
          end_if_2:
            tmp.9 = - 9223372036854775807L
            l = tmp.9
            tmp.10 = l_geq_2_60()
            if !tmp.10 jump end_if_4
            return 3
        
          end_if_4:
            tmp.11 = uint_max_leq_l()
            if !tmp.11 jump end_if_6
            return 4
        
          end_if_6:
            l = 1152921504606846976L
            tmp.12 = l_geq_2_60()
            tmp.13 = ! tmp.12
            if !tmp.13 jump end_if_8
            return 5
        
          end_if_8:
            tmp.14 = uint_max_leq_l()
            tmp.15 = ! tmp.14
            if !tmp.15 jump end_if_10
            return 6
        
          end_if_10:
            l2 = l
            tmp.16 = l_eq_l2()
            tmp.17 = ! tmp.16
            if !tmp.17 jump end_if_12
            return 7
        
          end_if_12:
            return 0
            return 0
        }
        static global l: Long = zero[8]
        static global l2: Long = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_large_constants() {
    let src = r#"
        long x = 5l;
        int add_large(void) {
            x = x + 4294967290l;
            return (x == 4294967295l);
        }
        int subtract_large(void) {
            x = x - 4294967290l;
            return (x == 5l);
        }
        int multiply_by_large(void) {
            x = x * 4294967290l;
            return (x == 21474836450l);
        }
        int main(void) {
            if (!add_large()) {
                return 1;
            }
            if (!subtract_large()) {
                return 2;
            }
            if (!multiply_by_large()) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function add_large() { 
            tmp.0 = x + 4294967290L
            x = tmp.0
            tmp.1 = x == 4294967295L
            return tmp.1
            return 0
        }
        global function subtract_large() { 
            tmp.2 = x - 4294967290L
            x = tmp.2
            tmp.3 = x == 5L
            return tmp.3
            return 0
        }
        global function multiply_by_large() { 
            tmp.4 = x * 4294967290L
            x = tmp.4
            tmp.5 = x == 21474836450L
            return tmp.5
            return 0
        }
        global function main() { 
            tmp.6 = add_large()
            tmp.7 = ! tmp.6
            if !tmp.7 jump end_if_0
            return 1
        
          end_if_0:
            tmp.8 = subtract_large()
            tmp.9 = ! tmp.8
            if !tmp.9 jump end_if_2
            return 2
        
          end_if_2:
            tmp.10 = multiply_by_large()
            tmp.11 = ! tmp.10
            if !tmp.11 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
        static global x: Long = 5L
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_logical() {
    let src = r#"
        int not(long l) {
            return !l;
        }
        int if_cond(long l) {
            if (l) {
                return 1;
            }
            return 0;
        }
        int and(long l1, int l2) {
            return l1 && l2;
        }
        int or(int l1, long l2) {
            return l1 || l2;
        }
        int main(void) {
            long l = 1152921504606846976l;
            long zero = 0l;
            if (not(l)) {
                return 1;
            }
            if (!not(zero)) {
                return 2;
            }
            if(!if_cond(l)) {
                return 3;
            }
            if(if_cond(zero)) {
                return 4;
            }
            if (and(zero, 1)) {
                return 5;
            }
            if (!or(1, l)) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function not(l.0) { 
            tmp.0 = ! l.0
            return tmp.0
            return 0
        }
        global function if_cond(l.1) { 
            if !l.1 jump end_if_0
            return 1
        
          end_if_0:
            return 0
            return 0
        }
        global function and(l1.2, l2.3) { 
            if !l1.2 jump and_false_2
            if !l2.3 jump and_false_2
            tmp.2 = 1
            jump and_end_3
        
          and_false_2:
            tmp.2 = 0
        
          and_end_3:
            return tmp.2
            return 0
        }
        global function or(l1.4, l2.5) { 
            if l1.4 jump or_true_4
            if l2.5 jump or_true_4
            tmp.4 = 0
            jump or_end_5
        
          or_true_4:
            tmp.4 = 1
        
          or_end_5:
            return tmp.4
            return 0
        }
        global function main() { 
            l.6 = 1152921504606846976L
            zero.7 = 0L
            tmp.5 = not(l.6)
            if !tmp.5 jump end_if_6
            return 1
        
          end_if_6:
            tmp.6 = not(zero.7)
            tmp.7 = ! tmp.6
            if !tmp.7 jump end_if_8
            return 2
        
          end_if_8:
            tmp.8 = if_cond(l.6)
            tmp.9 = ! tmp.8
            if !tmp.9 jump end_if_10
            return 3
        
          end_if_10:
            tmp.10 = if_cond(zero.7)
            if !tmp.10 jump end_if_12
            return 4
        
          end_if_12:
            tmp.11 = and(zero.7, 1)
            if !tmp.11 jump end_if_14
            return 5
        
          end_if_14:
            tmp.12 = or(1, l.6)
            tmp.13 = ! tmp.12
            if !tmp.13 jump end_if_16
            return 6
        
          end_if_16:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_long_and_int_locals() {
    let src = r#"
        int main(void) {
            long a = 8589934592l;
            int b = -1;
            long c = -8589934592l;
            int d = 10;
            if (a != 8589934592l) {
                return 1;
            }
            if (b != -1){
                return 2;
            }
            if (c != -8589934592l) {
                return 3;
            }
            if (d != 10) {
                return 4;
            }
            a = -a;
            b = b - 1;
            c = c + 8589934594l;
            d = d + 10;
            if (a != -8589934592l) {
                return 5;
            }
            if (b != -2) {
                return 6;
            }
            if (c != 2) {
                return 7;
            }
            if (d != 20) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 8589934592L
            tmp.0 = - 1
            b.1 = tmp.0
            tmp.1 = - 8589934592L
            c.2 = tmp.1
            d.3 = 10
            tmp.2 = a.0 != 8589934592L
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = - 1
            tmp.3 = b.1 != tmp.4
            if !tmp.3 jump end_if_2
            return 2
        
          end_if_2:
            tmp.6 = - 8589934592L
            tmp.5 = c.2 != tmp.6
            if !tmp.5 jump end_if_4
            return 3
        
          end_if_4:
            tmp.7 = d.3 != 10
            if !tmp.7 jump end_if_6
            return 4
        
          end_if_6:
            tmp.8 = - a.0
            a.0 = tmp.8
            tmp.9 = b.1 - 1
            b.1 = tmp.9
            tmp.10 = c.2 + 8589934594L
            c.2 = tmp.10
            tmp.11 = d.3 + 10
            d.3 = tmp.11
            tmp.13 = - 8589934592L
            tmp.12 = a.0 != tmp.13
            if !tmp.12 jump end_if_8
            return 5
        
          end_if_8:
            tmp.15 = - 2
            tmp.14 = b.1 != tmp.15
            if !tmp.14 jump end_if_10
            return 6
        
          end_if_10:
            tmp.17 = sign_extend 2
            tmp.16 = c.2 != tmp.17
            if !tmp.16 jump end_if_12
            return 7
        
          end_if_12:
            tmp.18 = d.3 != 20
            if !tmp.18 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_long_args() {
    let src = r#"
        int test_sum(long a, long b, int c, int d, int e, int f, int g, int h, long i) {
            if (a + b < 100l) {
                return 1;
            }
            if (i < 100l)
                return 2;
            return 0;
        }
        int main(void) {
            return test_sum(34359738368l, 34359738368l, 0, 0, 0, 0, 0, 0, 34359738368l);
        }
    "#;
    let expected = r#"
        global function test_sum(a.0, b.1, c.2, d.3, e.4, f.5, g.6, h.7, i.8) { 
            tmp.0 = a.0 + b.1
            tmp.1 = tmp.0 < 100L
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = i.8 < 100L
            if !tmp.2 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
        global function main() { 
            tmp.3 = test_sum(34359738368L, 34359738368L, 0, 0, 0, 0, 0, 0, 34359738368L)
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_multi_op() {
    let src = r#"
        int target(long a) {
            long b = a * 5l - 10l;
            if (b == 21474836440l) {
                return 1;
            }
            return 0;
        }
        int main(void) {
            return target(4294967290l);
        }
    "#;
    let expected = r#"
        global function target(a.0) { 
            tmp.0 = a.0 * 5L
            tmp.1 = tmp.0 - 10L
            b.1 = tmp.1
            tmp.2 = b.1 == 21474836440L
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            return 0
            return 0
        }
        global function main() { 
            tmp.3 = target(4294967290L)
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_return_long() {
    let src = r#"
        long add(int a, int b) {
            return (long) a + (long) b;
        }
        int main(void) {
            long a = add(2147483645, 2147483645);
            if (a == 4294967290l) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function add(a.0, b.1) { 
            tmp.0 = sign_extend a.0
            tmp.2 = sign_extend b.1
            tmp.1 = tmp.0 + tmp.2
            return tmp.1
            return 0
        }
        global function main() { 
            tmp.3 = add(2147483645, 2147483645)
            a.2 = tmp.3
            tmp.4 = a.2 == 4294967290L
            if !tmp.4 jump end_if_0
            return 1
        
          end_if_0:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_rewrite_large_multiply_regression() {
    let src = r#"
        int check_12_ints(int start, int a, int b, int c, int d, int e, int f, int g,
                          int h, int i, int j, int k, int l);
        long glob = 5l;
        int main(void) {
            long should_spill = glob * 4294967307l;
            int one = glob - 4;
            int two = one + one;
            int three = 2 + one;
            int four = two * two;
            int five = 6 - one;
            int six = two * three;
            int seven = one + 6;
            int eight = two * 4;
            int nine = three * three;
            int ten = four + six;
            int eleven = 16 - five;
            int twelve = six + six;
            check_12_ints(one, two, three, four, five, six, seven, eight, nine, ten,
                          eleven, twelve, 1);
            int thirteen = glob + 8;
            int fourteen = thirteen + 1;
            int fifteen = 28 - thirteen;
            int sixteen = fourteen + 2;
            int seventeen = 4 + thirteen;
            int eighteen = 32 - fourteen;
            int nineteen = 35 - sixteen;
            int twenty = fifteen + 5;
            int twenty_one = thirteen * 2 - 5;
            int twenty_two = fifteen + 7;
            int twenty_three = 6 + seventeen;
            int twenty_four = thirteen + 11;
            check_12_ints(thirteen, fourteen, fifteen, sixteen, seventeen, eighteen,
                          nineteen, twenty, twenty_one, twenty_two, twenty_three,
                          twenty_four, 13);
            if (should_spill != 21474836535l) {
                return -1;
            }
            return 0;
        }
        int check_12_ints(int a, int b, int c, int d, int e, int f, int g, int h, int i,
                          int j, int k, int l, int start) {
            int expected = 0;
            expected = start + 0;
            if (a != expected) {
                return expected;
            }
            expected = start + 1;
            if (b != expected) {
                return expected;
            }
            expected = start + 2;
            if (c != expected) {
                return expected;
            }
            expected = start + 3;
            if (d != expected) {
                return expected;
            }
            expected = start + 4;
            if (e != expected) {
                return expected;
            }
            expected = start + 5;
            if (f != expected) {
                return expected;
            }
            expected = start + 6;
            if (g != expected) {
                return expected;
            }
            expected = start + 7;
            if (h != expected) {
                return expected;
            }
            expected = start + 8;
            if (i != expected) {
                return expected;
            }
            expected = start + 9;
            if (j != expected) {
                return expected;
            }
            expected = start + 10;
            if (k != expected) {
                return expected;
            }
            expected = start + 11;
            if (l != expected) {
                return expected;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = glob * 4294967307L
            should_spill.13 = tmp.0
            tmp.2 = sign_extend 4
            tmp.1 = glob - tmp.2
            tmp.3 = truncate tmp.1
            one.14 = tmp.3
            tmp.4 = one.14 + one.14
            two.15 = tmp.4
            tmp.5 = 2 + one.14
            three.16 = tmp.5
            tmp.6 = two.15 * two.15
            four.17 = tmp.6
            tmp.7 = 6 - one.14
            five.18 = tmp.7
            tmp.8 = two.15 * three.16
            six.19 = tmp.8
            tmp.9 = one.14 + 6
            seven.20 = tmp.9
            tmp.10 = two.15 * 4
            eight.21 = tmp.10
            tmp.11 = three.16 * three.16
            nine.22 = tmp.11
            tmp.12 = four.17 + six.19
            ten.23 = tmp.12
            tmp.13 = 16 - five.18
            eleven.24 = tmp.13
            tmp.14 = six.19 + six.19
            twelve.25 = tmp.14
            tmp.15 = check_12_ints(one.14, two.15, three.16, four.17, five.18, six.19, seven.20, eight.21, nine.22, ten.23, eleven.24, twelve.25, 1)
            tmp.17 = sign_extend 8
            tmp.16 = glob + tmp.17
            tmp.18 = truncate tmp.16
            thirteen.26 = tmp.18
            tmp.19 = thirteen.26 + 1
            fourteen.27 = tmp.19
            tmp.20 = 28 - thirteen.26
            fifteen.28 = tmp.20
            tmp.21 = fourteen.27 + 2
            sixteen.29 = tmp.21
            tmp.22 = 4 + thirteen.26
            seventeen.30 = tmp.22
            tmp.23 = 32 - fourteen.27
            eighteen.31 = tmp.23
            tmp.24 = 35 - sixteen.29
            nineteen.32 = tmp.24
            tmp.25 = fifteen.28 + 5
            twenty.33 = tmp.25
            tmp.26 = thirteen.26 * 2
            tmp.27 = tmp.26 - 5
            twenty_one.34 = tmp.27
            tmp.28 = fifteen.28 + 7
            twenty_two.35 = tmp.28
            tmp.29 = 6 + seventeen.30
            twenty_three.36 = tmp.29
            tmp.30 = thirteen.26 + 11
            twenty_four.37 = tmp.30
            tmp.31 = check_12_ints(thirteen.26, fourteen.27, fifteen.28, sixteen.29, seventeen.30, eighteen.31, nineteen.32, twenty.33, twenty_one.34, twenty_two.35, twenty_three.36, twenty_four.37, 13)
            tmp.32 = should_spill.13 != 21474836535L
            if !tmp.32 jump end_if_0
            tmp.33 = - 1
            return tmp.33
        
          end_if_0:
            return 0
            return 0
        }
        global function check_12_ints(a.38, b.39, c.40, d.41, e.42, f.43, g.44, h.45, i.46, j.47, k.48, l.49, start.50) { 
            expected.51 = 0
            tmp.34 = start.50 + 0
            expected.51 = tmp.34
            tmp.35 = a.38 != expected.51
            if !tmp.35 jump end_if_2
            return expected.51
        
          end_if_2:
            tmp.36 = start.50 + 1
            expected.51 = tmp.36
            tmp.37 = b.39 != expected.51
            if !tmp.37 jump end_if_4
            return expected.51
        
          end_if_4:
            tmp.38 = start.50 + 2
            expected.51 = tmp.38
            tmp.39 = c.40 != expected.51
            if !tmp.39 jump end_if_6
            return expected.51
        
          end_if_6:
            tmp.40 = start.50 + 3
            expected.51 = tmp.40
            tmp.41 = d.41 != expected.51
            if !tmp.41 jump end_if_8
            return expected.51
        
          end_if_8:
            tmp.42 = start.50 + 4
            expected.51 = tmp.42
            tmp.43 = e.42 != expected.51
            if !tmp.43 jump end_if_10
            return expected.51
        
          end_if_10:
            tmp.44 = start.50 + 5
            expected.51 = tmp.44
            tmp.45 = f.43 != expected.51
            if !tmp.45 jump end_if_12
            return expected.51
        
          end_if_12:
            tmp.46 = start.50 + 6
            expected.51 = tmp.46
            tmp.47 = g.44 != expected.51
            if !tmp.47 jump end_if_14
            return expected.51
        
          end_if_14:
            tmp.48 = start.50 + 7
            expected.51 = tmp.48
            tmp.49 = h.45 != expected.51
            if !tmp.49 jump end_if_16
            return expected.51
        
          end_if_16:
            tmp.50 = start.50 + 8
            expected.51 = tmp.50
            tmp.51 = i.46 != expected.51
            if !tmp.51 jump end_if_18
            return expected.51
        
          end_if_18:
            tmp.52 = start.50 + 9
            expected.51 = tmp.52
            tmp.53 = j.47 != expected.51
            if !tmp.53 jump end_if_20
            return expected.51
        
          end_if_20:
            tmp.54 = start.50 + 10
            expected.51 = tmp.54
            tmp.55 = k.48 != expected.51
            if !tmp.55 jump end_if_22
            return expected.51
        
          end_if_22:
            tmp.56 = start.50 + 11
            expected.51 = tmp.56
            tmp.57 = l.49 != expected.51
            if !tmp.57 jump end_if_24
            return expected.51
        
          end_if_24:
            return 0
            return 0
        }
        static global glob: Long = 5L
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_simple() {
    let src = r#"
        int main(void) {
            long l = 9223372036854775807l;
            return (l - 2l == 9223372036854775805l);
        }
    "#;
    let expected = r#"
        global function main() { 
            l.0 = 9223372036854775807L
            tmp.0 = l.0 - 2L
            tmp.1 = tmp.0 == 9223372036854775805L
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_static_long() {
    let src = r#"
        
        static long foo = 4294967290l;
        int main(void)
        {
            if (foo + 5l == 4294967295l)
            {
                foo = 1152921504606846988l;
                if (foo == 1152921504606846988l)
                    return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = foo + 5L
            tmp.1 = tmp.0 == 4294967295L
            if !tmp.1 jump end_if_0
            foo = 1152921504606846988L
            tmp.2 = foo == 1152921504606846988L
            if !tmp.2 jump end_if_2
            return 1
        
          end_if_2:
        
          end_if_0:
            return 0
            return 0
        }
        static foo: Long = 4294967290L
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_type_specifiers() {
    let src = r#"
        static int long a;
        int static long a;
        long static a;
        int my_function(long a, long int b, int long c);
        int my_function(long int x, int long y, long z) {
            return x + y + z;
        }
        int main(void) {
            long x = 1l;
            long int y = 2l;
            int long z = 3l;
            extern long a;
            a = 4;
           int sum = 0;
            for (long i = 1099511627776l; i > 0; i = i / 2) {
                sum = sum + 1;
            }
            if (x != 1) {
                return 1;
            }
            if (y != 2) {
                return 2;
            }
            if (a != 4) {
                return 3;
            }
            if (my_function(x, y, z) != 6) {
                return 4;
            }
            if (sum != 41) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function my_function(x.3, y.4, z.5) { 
            tmp.0 = x.3 + y.4
            tmp.1 = tmp.0 + z.5
            tmp.2 = truncate tmp.1
            return tmp.2
            return 0
        }
        global function main() { 
            x.6 = 1L
            y.7 = 2L
            z.8 = 3L
            tmp.3 = sign_extend 4
            a = tmp.3
            sum.10 = 0
            i.11 = 1099511627776L
        
          start_loop_0:
            tmp.5 = sign_extend 0
            tmp.4 = i.11 > tmp.5
            if !tmp.4 jump break_loop_0
            tmp.6 = sum.10 + 1
            sum.10 = tmp.6
        
          continue_loop_0:
            tmp.8 = sign_extend 2
            tmp.7 = i.11 / tmp.8
            i.11 = tmp.7
            jump start_loop_0
        
          break_loop_0:
            tmp.10 = sign_extend 1
            tmp.9 = x.6 != tmp.10
            if !tmp.9 jump end_if_0
            return 1
        
          end_if_0:
            tmp.12 = sign_extend 2
            tmp.11 = y.7 != tmp.12
            if !tmp.11 jump end_if_2
            return 2
        
          end_if_2:
            tmp.14 = sign_extend 4
            tmp.13 = a != tmp.14
            if !tmp.13 jump end_if_4
            return 3
        
          end_if_4:
            tmp.15 = my_function(x.6, y.7, z.8)
            tmp.16 = tmp.15 != 6
            if !tmp.16 jump end_if_6
            return 4
        
          end_if_6:
            tmp.17 = sum.10 != 41
            if !tmp.17 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
        static a: Long = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_explicit_casts_chained_casts() {
    let src = r#"
        unsigned int ui = 4294967200u;
        int main(void) {
            if ((long) (signed) ui != -96l)
                return 1;
            if ((unsigned long) (signed) ui != 18446744073709551520ul)
                return 2;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = ui
            tmp.1 = sign_extend tmp.0
            tmp.3 = - 96L
            tmp.2 = tmp.1 != tmp.3
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = ui
            tmp.5 = sign_extend tmp.4
            tmp.6 = tmp.5 != 18446744073709551520UL
            if !tmp.6 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
        static global ui: Unsigned Int = 4294967200U
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_explicit_casts_extension() {
    let src = r#"
        int int_to_ulong(int i, unsigned long expected) {
            unsigned long result = (unsigned long) i;
            return result == expected;
        }
        int uint_to_long(unsigned int ui, long expected) {
            long result = (long) ui;
            return result == expected;
        }
        int uint_to_ulong(unsigned ui, unsigned long expected){
            return (unsigned long) ui == expected;
        }
        int main(void) {
            if (!int_to_ulong(10, 10ul)) {
                return 1;
            }
            if (!int_to_ulong(-10, 18446744073709551606ul)) {
                return 2;
            }
            if (!uint_to_long(4294967200u, 4294967200l)) {
                return 3;
            }
            if (!uint_to_ulong(4294967200u, 4294967200ul)) {
                return 4;
            }
            if ((unsigned long) 4294967200u != 4294967200ul) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function int_to_ulong(i.0, expected.1) { 
            tmp.0 = sign_extend i.0
            result.2 = tmp.0
            tmp.1 = result.2 == expected.1
            return tmp.1
            return 0
        }
        global function uint_to_long(ui.3, expected.4) { 
            tmp.2 = zero_extend ui.3
            result.5 = tmp.2
            tmp.3 = result.5 == expected.4
            return tmp.3
            return 0
        }
        global function uint_to_ulong(ui.6, expected.7) { 
            tmp.4 = zero_extend ui.6
            tmp.5 = tmp.4 == expected.7
            return tmp.5
            return 0
        }
        global function main() { 
            tmp.6 = int_to_ulong(10, 10UL)
            tmp.7 = ! tmp.6
            if !tmp.7 jump end_if_0
            return 1
        
          end_if_0:
            tmp.8 = - 10
            tmp.9 = int_to_ulong(tmp.8, 18446744073709551606UL)
            tmp.10 = ! tmp.9
            if !tmp.10 jump end_if_2
            return 2
        
          end_if_2:
            tmp.11 = uint_to_long(4294967200U, 4294967200L)
            tmp.12 = ! tmp.11
            if !tmp.12 jump end_if_4
            return 3
        
          end_if_4:
            tmp.13 = uint_to_ulong(4294967200U, 4294967200UL)
            tmp.14 = ! tmp.13
            if !tmp.14 jump end_if_6
            return 4
        
          end_if_6:
            tmp.15 = zero_extend 4294967200U
            tmp.16 = tmp.15 != 4294967200UL
            if !tmp.16 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_explicit_casts_rewrite_movz_regression() {
    let src = r#"
        int check_12_ints(int start, int a, int b, int c, int d, int e, int f, int g,
                          int h, int i, int j, int k, int l);
        unsigned glob = 5000u;
        int main(void) {
            long should_spill = (long)glob;
            int one = glob - 4999;
            int two = one + one;
            int three = 2 + one;
            int four = two * two;
            int five = 6 - one;
            int six = two * three;
            int seven = one + 6;
            int eight = two * 4;
            int nine = three * three;
            int ten = four + six;
            int eleven = 16 - five;
            int twelve = six + six;
            check_12_ints(one, two, three, four, five, six, seven, eight, nine, ten,
                          eleven, twelve, 1);
            int thirteen = glob - 4987u;
            int fourteen = thirteen + 1;
            int fifteen = 28 - thirteen;
            int sixteen = fourteen + 2;
            int seventeen = 4 + thirteen;
            int eighteen = 32 - fourteen;
            int nineteen = 35 - sixteen;
            int twenty = fifteen + 5;
            int twenty_one = thirteen * 2 - 5;
            int twenty_two = fifteen + 7;
            int twenty_three = 6 + seventeen;
            int twenty_four = thirteen + 11;
            check_12_ints(thirteen, fourteen, fifteen, sixteen, seventeen, eighteen,
                          nineteen, twenty, twenty_one, twenty_two, twenty_three,
                          twenty_four, 13);
            if (should_spill != 5000l) {
                return -1;
            }
            return 0;
        }
        int check_12_ints(int a, int b, int c, int d, int e, int f, int g, int h, int i,
                          int j, int k, int l, int start) {
            int expected = 0;
            expected = start + 0;
            if (a != expected) {
                return expected;
            }
            expected = start + 1;
            if (b != expected) {
                return expected;
            }
            expected = start + 2;
            if (c != expected) {
                return expected;
            }
            expected = start + 3;
            if (d != expected) {
                return expected;
            }
            expected = start + 4;
            if (e != expected) {
                return expected;
            }
            expected = start + 5;
            if (f != expected) {
                return expected;
            }
            expected = start + 6;
            if (g != expected) {
                return expected;
            }
            expected = start + 7;
            if (h != expected) {
                return expected;
            }
            expected = start + 8;
            if (i != expected) {
                return expected;
            }
            expected = start + 9;
            if (j != expected) {
                return expected;
            }
            expected = start + 10;
            if (k != expected) {
                return expected;
            }
            expected = start + 11;
            if (l != expected) {
                return expected;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = zero_extend glob
            should_spill.13 = tmp.0
            tmp.2 = 4999
            tmp.1 = glob - tmp.2
            tmp.3 = tmp.1
            one.14 = tmp.3
            tmp.4 = one.14 + one.14
            two.15 = tmp.4
            tmp.5 = 2 + one.14
            three.16 = tmp.5
            tmp.6 = two.15 * two.15
            four.17 = tmp.6
            tmp.7 = 6 - one.14
            five.18 = tmp.7
            tmp.8 = two.15 * three.16
            six.19 = tmp.8
            tmp.9 = one.14 + 6
            seven.20 = tmp.9
            tmp.10 = two.15 * 4
            eight.21 = tmp.10
            tmp.11 = three.16 * three.16
            nine.22 = tmp.11
            tmp.12 = four.17 + six.19
            ten.23 = tmp.12
            tmp.13 = 16 - five.18
            eleven.24 = tmp.13
            tmp.14 = six.19 + six.19
            twelve.25 = tmp.14
            tmp.15 = check_12_ints(one.14, two.15, three.16, four.17, five.18, six.19, seven.20, eight.21, nine.22, ten.23, eleven.24, twelve.25, 1)
            tmp.16 = glob - 4987U
            tmp.17 = tmp.16
            thirteen.26 = tmp.17
            tmp.18 = thirteen.26 + 1
            fourteen.27 = tmp.18
            tmp.19 = 28 - thirteen.26
            fifteen.28 = tmp.19
            tmp.20 = fourteen.27 + 2
            sixteen.29 = tmp.20
            tmp.21 = 4 + thirteen.26
            seventeen.30 = tmp.21
            tmp.22 = 32 - fourteen.27
            eighteen.31 = tmp.22
            tmp.23 = 35 - sixteen.29
            nineteen.32 = tmp.23
            tmp.24 = fifteen.28 + 5
            twenty.33 = tmp.24
            tmp.25 = thirteen.26 * 2
            tmp.26 = tmp.25 - 5
            twenty_one.34 = tmp.26
            tmp.27 = fifteen.28 + 7
            twenty_two.35 = tmp.27
            tmp.28 = 6 + seventeen.30
            twenty_three.36 = tmp.28
            tmp.29 = thirteen.26 + 11
            twenty_four.37 = tmp.29
            tmp.30 = check_12_ints(thirteen.26, fourteen.27, fifteen.28, sixteen.29, seventeen.30, eighteen.31, nineteen.32, twenty.33, twenty_one.34, twenty_two.35, twenty_three.36, twenty_four.37, 13)
            tmp.31 = should_spill.13 != 5000L
            if !tmp.31 jump end_if_0
            tmp.32 = - 1
            return tmp.32
        
          end_if_0:
            return 0
            return 0
        }
        global function check_12_ints(a.38, b.39, c.40, d.41, e.42, f.43, g.44, h.45, i.46, j.47, k.48, l.49, start.50) { 
            expected.51 = 0
            tmp.33 = start.50 + 0
            expected.51 = tmp.33
            tmp.34 = a.38 != expected.51
            if !tmp.34 jump end_if_2
            return expected.51
        
          end_if_2:
            tmp.35 = start.50 + 1
            expected.51 = tmp.35
            tmp.36 = b.39 != expected.51
            if !tmp.36 jump end_if_4
            return expected.51
        
          end_if_4:
            tmp.37 = start.50 + 2
            expected.51 = tmp.37
            tmp.38 = c.40 != expected.51
            if !tmp.38 jump end_if_6
            return expected.51
        
          end_if_6:
            tmp.39 = start.50 + 3
            expected.51 = tmp.39
            tmp.40 = d.41 != expected.51
            if !tmp.40 jump end_if_8
            return expected.51
        
          end_if_8:
            tmp.41 = start.50 + 4
            expected.51 = tmp.41
            tmp.42 = e.42 != expected.51
            if !tmp.42 jump end_if_10
            return expected.51
        
          end_if_10:
            tmp.43 = start.50 + 5
            expected.51 = tmp.43
            tmp.44 = f.43 != expected.51
            if !tmp.44 jump end_if_12
            return expected.51
        
          end_if_12:
            tmp.45 = start.50 + 6
            expected.51 = tmp.45
            tmp.46 = g.44 != expected.51
            if !tmp.46 jump end_if_14
            return expected.51
        
          end_if_14:
            tmp.47 = start.50 + 7
            expected.51 = tmp.47
            tmp.48 = h.45 != expected.51
            if !tmp.48 jump end_if_16
            return expected.51
        
          end_if_16:
            tmp.49 = start.50 + 8
            expected.51 = tmp.49
            tmp.50 = i.46 != expected.51
            if !tmp.50 jump end_if_18
            return expected.51
        
          end_if_18:
            tmp.51 = start.50 + 9
            expected.51 = tmp.51
            tmp.52 = j.47 != expected.51
            if !tmp.52 jump end_if_20
            return expected.51
        
          end_if_20:
            tmp.53 = start.50 + 10
            expected.51 = tmp.53
            tmp.54 = k.48 != expected.51
            if !tmp.54 jump end_if_22
            return expected.51
        
          end_if_22:
            tmp.55 = start.50 + 11
            expected.51 = tmp.55
            tmp.56 = l.49 != expected.51
            if !tmp.56 jump end_if_24
            return expected.51
        
          end_if_24:
            return 0
            return 0
        }
        static global glob: Unsigned Int = 5000U
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_explicit_casts_round_trip_casts() {
    let src = r#"
        unsigned long a = 8589934580ul;
        int main(void) {
            unsigned long b = (unsigned long) (unsigned int) a;
            if (b != 4294967284ul)
                return 1;
            b = (unsigned long) (signed int) a;
            if (b != 18446744073709551604ul)
                return 2;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = truncate a
            tmp.1 = zero_extend tmp.0
            b.0 = tmp.1
            tmp.2 = b.0 != 4294967284UL
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.3 = truncate a
            tmp.4 = sign_extend tmp.3
            b.0 = tmp.4
            tmp.5 = b.0 != 18446744073709551604UL
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
        static global a: Unsigned Long = 8589934580UL
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_explicit_casts_same_size_conversion() {
    let src = r#"
        int uint_to_int(unsigned int ui, int expected) {
            return (int) ui == expected;
        }
        int int_to_uint(int i, unsigned int expected) {
            return (unsigned int) i == expected;
        }
        int ulong_to_long(unsigned long ul, signed long expected) {
            return (signed long) ul == expected;
        }
        int long_to_ulong(long l, unsigned long expected) {
            return (unsigned long) l == expected;
        }
        int main(void) {
            if (!int_to_uint(10, 10u)) {
                return 1;
            }
            if (!uint_to_int(10u, 10)) {
                return 2;
            }
            if (!long_to_ulong(-1000l, 18446744073709550616ul)) {
                return 3;
            }
            if (!ulong_to_long(18446744073709550616ul, -1000l)) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function uint_to_int(ui.0, expected.1) { 
            tmp.0 = ui.0
            tmp.1 = tmp.0 == expected.1
            return tmp.1
            return 0
        }
        global function int_to_uint(i.2, expected.3) { 
            tmp.2 = i.2
            tmp.3 = tmp.2 == expected.3
            return tmp.3
            return 0
        }
        global function ulong_to_long(ul.4, expected.5) { 
            tmp.4 = ul.4
            tmp.5 = tmp.4 == expected.5
            return tmp.5
            return 0
        }
        global function long_to_ulong(l.6, expected.7) { 
            tmp.6 = l.6
            tmp.7 = tmp.6 == expected.7
            return tmp.7
            return 0
        }
        global function main() { 
            tmp.8 = int_to_uint(10, 10U)
            tmp.9 = ! tmp.8
            if !tmp.9 jump end_if_0
            return 1
        
          end_if_0:
            tmp.10 = uint_to_int(10U, 10)
            tmp.11 = ! tmp.10
            if !tmp.11 jump end_if_2
            return 2
        
          end_if_2:
            tmp.12 = - 1000L
            tmp.13 = long_to_ulong(tmp.12, 18446744073709550616UL)
            tmp.14 = ! tmp.13
            if !tmp.14 jump end_if_4
            return 3
        
          end_if_4:
            tmp.15 = - 1000L
            tmp.16 = ulong_to_long(18446744073709550616UL, tmp.15)
            tmp.17 = ! tmp.16
            if !tmp.17 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_explicit_casts_truncate() {
    let src = r#"
        
        int ulong_to_int(unsigned long ul, int expected) {
            int result = (int) ul;
            return (result == expected);
        }
        int ulong_to_uint(unsigned long ul, unsigned expected) {
            return ((unsigned int) ul == expected);
        }
        int long_to_uint(long l, unsigned int expected) {
            return (unsigned int) l == expected;
        }
        int main(void) {
            if (!long_to_uint(100l, 100u)) {
                return 1;
            }
            if (!long_to_uint(-9223372036854774574l, 1234u)) {
                return 2;
            }
            if (!ulong_to_int(100ul, 100)) {
                return 3;
            }
            if (!ulong_to_uint(100ul, 100u)) {
                return 4;
            }
            if (!ulong_to_uint(4294967200ul, 4294967200u)) {
                return 5;
            }
            if (!ulong_to_int(4294967200ul, -96)) {
                return 6;
            }
            if (!ulong_to_uint(1152921506754330624ul, 2147483648u)) {
                return 7;
            }
            if (!ulong_to_int(1152921506754330624ul, -2147483648)){
                return 8;
            }
            unsigned int ui = (unsigned int)17179869189ul;
            if (ui != 5)
                return 9;
            return 0;
        }
    "#;
    let expected = r#"
        global function ulong_to_int(ul.0, expected.1) { 
            tmp.0 = truncate ul.0
            result.2 = tmp.0
            tmp.1 = result.2 == expected.1
            return tmp.1
            return 0
        }
        global function ulong_to_uint(ul.3, expected.4) { 
            tmp.2 = truncate ul.3
            tmp.3 = tmp.2 == expected.4
            return tmp.3
            return 0
        }
        global function long_to_uint(l.5, expected.6) { 
            tmp.4 = truncate l.5
            tmp.5 = tmp.4 == expected.6
            return tmp.5
            return 0
        }
        global function main() { 
            tmp.6 = long_to_uint(100L, 100U)
            tmp.7 = ! tmp.6
            if !tmp.7 jump end_if_0
            return 1
        
          end_if_0:
            tmp.8 = - 9223372036854774574L
            tmp.9 = long_to_uint(tmp.8, 1234U)
            tmp.10 = ! tmp.9
            if !tmp.10 jump end_if_2
            return 2
        
          end_if_2:
            tmp.11 = ulong_to_int(100UL, 100)
            tmp.12 = ! tmp.11
            if !tmp.12 jump end_if_4
            return 3
        
          end_if_4:
            tmp.13 = ulong_to_uint(100UL, 100U)
            tmp.14 = ! tmp.13
            if !tmp.14 jump end_if_6
            return 4
        
          end_if_6:
            tmp.15 = ulong_to_uint(4294967200UL, 4294967200U)
            tmp.16 = ! tmp.15
            if !tmp.16 jump end_if_8
            return 5
        
          end_if_8:
            tmp.17 = - 96
            tmp.18 = ulong_to_int(4294967200UL, tmp.17)
            tmp.19 = ! tmp.18
            if !tmp.19 jump end_if_10
            return 6
        
          end_if_10:
            tmp.20 = ulong_to_uint(1152921506754330624UL, 2147483648U)
            tmp.21 = ! tmp.20
            if !tmp.21 jump end_if_12
            return 7
        
          end_if_12:
            tmp.22 = - 2147483648L
            tmp.23 = truncate tmp.22
            tmp.24 = ulong_to_int(1152921506754330624UL, tmp.23)
            tmp.25 = ! tmp.24
            if !tmp.25 jump end_if_14
            return 8
        
          end_if_14:
            tmp.26 = truncate 17179869189UL
            ui.7 = tmp.26
            tmp.28 = 5
            tmp.27 = ui.7 != tmp.28
            if !tmp.27 jump end_if_16
            return 9
        
          end_if_16:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_bitwise_unsigned_ops() {
    let src = r#"
        int main(void) {
            unsigned int ui = -1u;
            unsigned long ul = 9223372036854775808ul;
            if ((ui & ul) != 0)
                return 1;
            if ((ui | ul) != 9223372041149743103ul)
                return 2;
            signed int i = -1;
            if ((i & ul) != ul)
                return 3;
            if ((i | ul) != i)
                return 4;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1U
            ui.0 = tmp.0
            ul.1 = 9223372036854775808UL
            tmp.1 = zero_extend ui.0
            tmp.2 = tmp.1 & ul.1
            tmp.4 = sign_extend 0
            tmp.3 = tmp.2 != tmp.4
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.5 = zero_extend ui.0
            tmp.6 = tmp.5 | ul.1
            tmp.7 = tmp.6 != 9223372041149743103UL
            if !tmp.7 jump end_if_2
            return 2
        
          end_if_2:
            tmp.8 = - 1
            i.2 = tmp.8
            tmp.9 = sign_extend i.2
            tmp.10 = tmp.9 & ul.1
            tmp.11 = tmp.10 != ul.1
            if !tmp.11 jump end_if_4
            return 3
        
          end_if_4:
            tmp.12 = sign_extend i.2
            tmp.13 = tmp.12 | ul.1
            tmp.15 = sign_extend i.2
            tmp.14 = tmp.13 != tmp.15
            if !tmp.14 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_bitwise_unsigned_shift() {
    let src = r#"
        int main(void) {
            unsigned int ui = -1u;
            if ((ui << 2l) != 4294967292) {
                return 1;
            }
            if ((ui >> 2) != 1073741823) {
                return 2;
            }
            static int shiftcount = 5;
            if ((1000000u >> shiftcount) != 31250) {
                return 3;
            }
            if ((1000000u << shiftcount) != 32000000) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1U
            ui.0 = tmp.0
            tmp.1 = ui.0 << 2L
            tmp.2 = zero_extend tmp.1
            tmp.3 = tmp.2 != 4294967292L
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = ui.0 >> 2
            tmp.6 = 1073741823
            tmp.5 = tmp.4 != tmp.6
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = 1000000U >> shiftcount.1
            tmp.9 = 31250
            tmp.8 = tmp.7 != tmp.9
            if !tmp.8 jump end_if_4
            return 3
        
          end_if_4:
            tmp.10 = 1000000U << shiftcount.1
            tmp.12 = 32000000
            tmp.11 = tmp.10 != tmp.12
            if !tmp.11 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        static shiftcount.1: Int = 5
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_compound_assign_uint() {
    let src = r#"
        int main(void) {
            unsigned int x = -1u;
            x /= -10l;
            return (x == 3865470567u);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1U
            x.0 = tmp.0
            tmp.1 = zero_extend x.0
            tmp.3 = - 10L
            tmp.2 = tmp.1 / tmp.3
            tmp.4 = truncate tmp.2
            x.0 = tmp.4
            tmp.5 = truncate tmp.4
            tmp.6 = x.0 == 3865470567U
            return tmp.6
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_compound_bitshift() {
    let src = r#"
        int main(void) {
            int i = -2;
            i >>= 3u;
            if (i != -1) {
                return 1;
            }
            unsigned long ul = 18446744073709551615UL;
            ul <<= 44;
            if (ul != 18446726481523507200ul) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 2
            i.0 = tmp.0
            tmp.2 = 3U
            tmp.1 = i.0 >> tmp.2
            i.0 = tmp.1
            tmp.4 = - 1
            tmp.3 = i.0 != tmp.4
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            ul.1 = 18446744073709551615UL
            tmp.6 = sign_extend 44
            tmp.5 = ul.1 << tmp.6
            ul.1 = tmp.5
            tmp.7 = ul.1 != 18446726481523507200UL
            if !tmp.7 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_compound_bitwise() {
    let src = r#"
        int main(void) {
            unsigned long ul = 18446460386757245432ul;
            ul &= -1000;
            if (ul != 18446460386757244952ul ) {
                return 1;
            }
            ul |= 4294967040u;
            if (ul != 18446460386824683288ul ) {
                return 2;
            }
            int i = 123456;
            unsigned int ui = 4042322160u;
            long l = -252645136;
            if (ui ^= l) {
                return 3;
            }
            if (ui) {
                return 4;
            }
            if (i != 123456) {
                return 5;
            }
            if (l != -252645136) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            ul.0 = 18446460386757245432UL
            tmp.1 = - 1000
            tmp.2 = sign_extend tmp.1
            tmp.0 = ul.0 & tmp.2
            ul.0 = tmp.0
            tmp.3 = ul.0 != 18446460386757244952UL
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.5 = zero_extend 4294967040U
            tmp.4 = ul.0 | tmp.5
            ul.0 = tmp.4
            tmp.6 = ul.0 != 18446460386824683288UL
            if !tmp.6 jump end_if_2
            return 2
        
          end_if_2:
            i.1 = 123456
            ui.2 = 4042322160U
            tmp.7 = - 252645136
            tmp.8 = sign_extend tmp.7
            l.3 = tmp.8
            tmp.9 = zero_extend ui.2
            tmp.10 = tmp.9 ^ l.3
            tmp.11 = truncate tmp.10
            ui.2 = tmp.11
            tmp.12 = truncate tmp.11
            if !tmp.12 jump end_if_4
            return 3
        
          end_if_4:
            if !ui.2 jump end_if_6
            return 4
        
          end_if_6:
            tmp.13 = i.1 != 123456
            if !tmp.13 jump end_if_8
            return 5
        
          end_if_8:
            tmp.15 = - 252645136
            tmp.16 = sign_extend tmp.15
            tmp.14 = l.3 != tmp.16
            if !tmp.14 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_postfix_precedence() {
    let src = r#"
        int main(void) {
            unsigned int ui = 4294967295U;
            if (((unsigned long)ui++) != 4294967295U) {
                return 1;
            }
            if (ui) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            ui.0 = 4294967295U
            tmp.0 = ui.0
            tmp.1 = inc ui.0
            ui.0 = tmp.1
            tmp.2 = zero_extend tmp.0
            tmp.4 = zero_extend 4294967295U
            tmp.3 = tmp.2 != tmp.4
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            if !ui.0 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_switch_uint() {
    let src = r#"
        int switch_on_uint(unsigned int ui) {
            switch (ui) {
                case 5u:
                    return 0;
                case 4294967286l:
                    return 1;
                case 34359738378ul:
                    return 2;
                default:
                    return 3;
            }
        }
        int main(void) {
            if (switch_on_uint(5) != 0)
                return 1;
            if (switch_on_uint(4294967286) != 1)
                return 2;
            if (switch_on_uint(10) != 2)
                return 3;
            return 0;
        }
    "#;
    let expected = r#"
        global function switch_on_uint(ui.0) { 
            tmp.0 = ui.0 == 5U
            if tmp.0 jump switch_0_case__1
            tmp.1 = ui.0 == 4294967286U
            if tmp.1 jump switch_0_case__2
            tmp.2 = ui.0 == 10U
            if tmp.2 jump switch_0_case__3
            jump switch_0_default_4
            jump break_switch_0
        
          switch_0_case__1:
            return 0
        
          switch_0_case__2:
            return 1
        
          switch_0_case__3:
            return 2
        
          switch_0_default_4:
            return 3
        
          break_switch_0:
            return 0
        }
        global function main() { 
            tmp.3 = 5
            tmp.4 = switch_on_uint(tmp.3)
            tmp.5 = tmp.4 != 0
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = truncate 4294967286L
            tmp.7 = switch_on_uint(tmp.6)
            tmp.8 = tmp.7 != 1
            if !tmp.8 jump end_if_2
            return 2
        
          end_if_2:
            tmp.9 = 10
            tmp.10 = switch_on_uint(tmp.9)
            tmp.11 = tmp.10 != 2
            if !tmp.11 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_unsigned_incr_decr() {
    let src = r#"
        
        int main(void) {
            unsigned int i = 0;
            if (i-- != 0) {
                return 1;
            }
            if (i != 4294967295U) {
                return 2;
            }
            if (--i != 4294967294U) {
                return 3;
            }
            if (i != 4294967294U) {
                return 4;
            }
            unsigned long l = 18446744073709551614UL;
            if (l++ != 18446744073709551614UL) {
                return 5;
            }
            if (l != 18446744073709551615UL) {
                return 6;
            }
            if (++l != 0) {
                return 7;
            }
            if (l != 0) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 0
            i.0 = tmp.0
            tmp.1 = i.0
            tmp.2 = dec i.0
            i.0 = tmp.2
            tmp.4 = 0
            tmp.3 = tmp.1 != tmp.4
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.5 = i.0 != 4294967295U
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            tmp.6 = dec i.0
            i.0 = tmp.6
            tmp.7 = tmp.6 != 4294967294U
            if !tmp.7 jump end_if_4
            return 3
        
          end_if_4:
            tmp.8 = i.0 != 4294967294U
            if !tmp.8 jump end_if_6
            return 4
        
          end_if_6:
            l.1 = 18446744073709551614UL
            tmp.9 = l.1
            tmp.10 = inc l.1
            l.1 = tmp.10
            tmp.11 = tmp.9 != 18446744073709551614UL
            if !tmp.11 jump end_if_8
            return 5
        
          end_if_8:
            tmp.12 = l.1 != 18446744073709551615UL
            if !tmp.12 jump end_if_10
            return 6
        
          end_if_10:
            tmp.13 = inc l.1
            l.1 = tmp.13
            tmp.15 = sign_extend 0
            tmp.14 = tmp.13 != tmp.15
            if !tmp.14 jump end_if_12
            return 7
        
          end_if_12:
            tmp.17 = sign_extend 0
            tmp.16 = l.1 != tmp.17
            if !tmp.16 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_implicit_casts_common_type() {
    let src = r#"
        int int_gt_uint(int i, unsigned int u) {
            return i > u;
        }
        int int_gt_ulong(int i, unsigned long ul) {
            return i > ul;
        }
        int uint_gt_long(unsigned int u, long l) {
            return u > l;
        }
        int uint_lt_ulong(unsigned int u, unsigned long ul) {
            return u < ul;
        }
        int long_gt_ulong(long l, unsigned long ul) {
            return l > ul;
        }
        int ternary_int_uint(int flag, int i, unsigned int ui) {
            long result = flag ? i : ui;
            return (result == 4294967295l);
        }
        int main(void) {
            if (!int_gt_uint(-100, 100u)) {
                return 1;
            }
            if (!(int_gt_ulong(-1, 18446744073709551606ul))) {
                return 2;
            }
            if (!uint_gt_long(100u, -100l)) {
                return 3;
            }
            if (!uint_lt_ulong(1073741824u, 34359738368ul)) {
                return 4;
            }
            if (!long_gt_ulong(-1l, 1000ul)) {
                return 5;
            }
            if (!ternary_int_uint(1, -1, 1u)) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function int_gt_uint(i.0, u.1) { 
            tmp.0 = i.0
            tmp.1 = tmp.0 > u.1
            return tmp.1
            return 0
        }
        global function int_gt_ulong(i.2, ul.3) { 
            tmp.2 = sign_extend i.2
            tmp.3 = tmp.2 > ul.3
            return tmp.3
            return 0
        }
        global function uint_gt_long(u.4, l.5) { 
            tmp.4 = zero_extend u.4
            tmp.5 = tmp.4 > l.5
            return tmp.5
            return 0
        }
        global function uint_lt_ulong(u.6, ul.7) { 
            tmp.6 = zero_extend u.6
            tmp.7 = tmp.6 < ul.7
            return tmp.7
            return 0
        }
        global function long_gt_ulong(l.8, ul.9) { 
            tmp.8 = l.8
            tmp.9 = tmp.8 > ul.9
            return tmp.9
            return 0
        }
        global function ternary_int_uint(flag.10, i.11, ui.12) { 
            if !flag.10 jump else_1
            tmp.11 = i.11
            tmp.10 = tmp.11
            jump end_if_0
        
          else_1:
            tmp.10 = ui.12
        
          end_if_0:
            tmp.12 = zero_extend tmp.10
            result.13 = tmp.12
            tmp.13 = result.13 == 4294967295L
            return tmp.13
            return 0
        }
        global function main() { 
            tmp.14 = - 100
            tmp.15 = int_gt_uint(tmp.14, 100U)
            tmp.16 = ! tmp.15
            if !tmp.16 jump end_if_2
            return 1
        
          end_if_2:
            tmp.17 = - 1
            tmp.18 = int_gt_ulong(tmp.17, 18446744073709551606UL)
            tmp.19 = ! tmp.18
            if !tmp.19 jump end_if_4
            return 2
        
          end_if_4:
            tmp.20 = - 100L
            tmp.21 = uint_gt_long(100U, tmp.20)
            tmp.22 = ! tmp.21
            if !tmp.22 jump end_if_6
            return 3
        
          end_if_6:
            tmp.23 = uint_lt_ulong(1073741824U, 34359738368UL)
            tmp.24 = ! tmp.23
            if !tmp.24 jump end_if_8
            return 4
        
          end_if_8:
            tmp.25 = - 1L
            tmp.26 = long_gt_ulong(tmp.25, 1000UL)
            tmp.27 = ! tmp.26
            if !tmp.27 jump end_if_10
            return 5
        
          end_if_10:
            tmp.28 = - 1
            tmp.29 = ternary_int_uint(1, tmp.28, 1U)
            tmp.30 = ! tmp.29
            if !tmp.30 jump end_if_12
            return 6
        
          end_if_12:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_implicit_casts_convert_by_assignment() {
    let src = r#"
        int check_int(int converted, int expected) {
            return (converted == expected);
        }
        int check_long(long converted, long expected) {
            return (converted == expected);
        }
        int check_ulong(unsigned long converted, unsigned long expected) {
            return (converted == expected);
        }
        long return_extended_uint(unsigned int u) {
            return u;
        }
        unsigned long return_extended_int(int i) {
            return i;
        }
        int return_truncated_ulong(unsigned long ul) {
            return ul;
        }
        int extend_on_assignment(unsigned int ui, long expected) {
            long result = ui;
            return result == expected;
        }
        int main(void) {
            if (!check_int(9223372036854775813ul, 5)) {
                return 1;
            }
            if (!check_long(2147483658u, 2147483658l)) {
                return 2;
            }
            if (!check_ulong(-1, 18446744073709551615UL)) {
                return 3;
            }
            if (return_extended_uint(2147483658u) != 2147483658l) {
                return 4;
            }
            if (return_extended_int(-1) != 18446744073709551615UL) {
                return 5;
            }
            long l = return_truncated_ulong(1125902054326372ul);
            if (l != -2147483548l) {
                return 6;
            }
            if (!extend_on_assignment(2147483658u, 2147483658l)){
                return 7;
            }
            int i = 4294967196u;
            if (i != -100) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function check_int(converted.0, expected.1) { 
            tmp.0 = converted.0 == expected.1
            return tmp.0
            return 0
        }
        global function check_long(converted.2, expected.3) { 
            tmp.1 = converted.2 == expected.3
            return tmp.1
            return 0
        }
        global function check_ulong(converted.4, expected.5) { 
            tmp.2 = converted.4 == expected.5
            return tmp.2
            return 0
        }
        global function return_extended_uint(u.6) { 
            tmp.3 = zero_extend u.6
            return tmp.3
            return 0
        }
        global function return_extended_int(i.7) { 
            tmp.4 = sign_extend i.7
            return tmp.4
            return 0
        }
        global function return_truncated_ulong(ul.8) { 
            tmp.5 = truncate ul.8
            return tmp.5
            return 0
        }
        global function extend_on_assignment(ui.9, expected.10) { 
            tmp.6 = zero_extend ui.9
            result.11 = tmp.6
            tmp.7 = result.11 == expected.10
            return tmp.7
            return 0
        }
        global function main() { 
            tmp.8 = truncate 9223372036854775813UL
            tmp.9 = check_int(tmp.8, 5)
            tmp.10 = ! tmp.9
            if !tmp.10 jump end_if_0
            return 1
        
          end_if_0:
            tmp.11 = zero_extend 2147483658U
            tmp.12 = check_long(tmp.11, 2147483658L)
            tmp.13 = ! tmp.12
            if !tmp.13 jump end_if_2
            return 2
        
          end_if_2:
            tmp.14 = - 1
            tmp.15 = sign_extend tmp.14
            tmp.16 = check_ulong(tmp.15, 18446744073709551615UL)
            tmp.17 = ! tmp.16
            if !tmp.17 jump end_if_4
            return 3
        
          end_if_4:
            tmp.18 = return_extended_uint(2147483658U)
            tmp.19 = tmp.18 != 2147483658L
            if !tmp.19 jump end_if_6
            return 4
        
          end_if_6:
            tmp.20 = - 1
            tmp.21 = return_extended_int(tmp.20)
            tmp.22 = tmp.21 != 18446744073709551615UL
            if !tmp.22 jump end_if_8
            return 5
        
          end_if_8:
            tmp.23 = return_truncated_ulong(1125902054326372UL)
            tmp.24 = sign_extend tmp.23
            l.12 = tmp.24
            tmp.26 = - 2147483548L
            tmp.25 = l.12 != tmp.26
            if !tmp.25 jump end_if_10
            return 6
        
          end_if_10:
            tmp.27 = extend_on_assignment(2147483658U, 2147483658L)
            tmp.28 = ! tmp.27
            if !tmp.28 jump end_if_12
            return 7
        
          end_if_12:
            tmp.29 = 4294967196U
            i.13 = tmp.29
            tmp.31 = - 100
            tmp.30 = i.13 != tmp.31
            if !tmp.30 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_implicit_casts_promote_constants() {
    let src = r#"
        long negative_one = 1l;
        long zero = 0l;
        int main(void) {
            negative_one = -negative_one;
            if (68719476736u >= negative_one) {
                return 1;
            }
            if (-2147483658 >= zero) {
                return 2;
            }
            if (!(3ul + 4294967293ul)) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - negative_one
            negative_one = tmp.0
            tmp.2 = negative_one
            tmp.1 = 68719476736UL >= tmp.2
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.3 = - 2147483658L
            tmp.4 = tmp.3 >= zero
            if !tmp.4 jump end_if_2
            return 2
        
          end_if_2:
            tmp.5 = 3UL + 4294967293UL
            tmp.6 = ! tmp.5
            if !tmp.6 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
        static global negative_one: Long = 1L
        static global zero: Long = 0L
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_implicit_casts_static_initializers() {
    let src = r#"
        unsigned int u = 1152921506754330636l;
        int i = 2147483650u;
        long l = 9223372036854775900u;
        long l2 = 2147483650u;
        unsigned long ul = 4294967294u;
        unsigned long ul2 = 9223372036854775798l;
        int i2 = 9223372039002259606ul;
        unsigned ui2 = 9223372039002259606ul;
        int main(void)
        {
            if (u != 2147483660u)
                return 1;
            if (i != -2147483646)
                return 2;
            if (l != -9223372036854775716l)
                return 3;
            if (l2 != 2147483650l)
                return 4;
            if (ul != 4294967294ul)
                return 5;
            if (ul2 != 9223372036854775798ul)
                return 6;
            if (i2 != -2147483498)
                return 7;
            if (ui2 != 2147483798u)
                return 8;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = u != 2147483660U
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = - 2147483646
            tmp.1 = i != tmp.2
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            tmp.4 = - 9223372036854775716L
            tmp.3 = l != tmp.4
            if !tmp.3 jump end_if_4
            return 3
        
          end_if_4:
            tmp.5 = l2 != 2147483650L
            if !tmp.5 jump end_if_6
            return 4
        
          end_if_6:
            tmp.6 = ul != 4294967294UL
            if !tmp.6 jump end_if_8
            return 5
        
          end_if_8:
            tmp.7 = ul2 != 9223372036854775798UL
            if !tmp.7 jump end_if_10
            return 6
        
          end_if_10:
            tmp.9 = - 2147483498
            tmp.8 = i2 != tmp.9
            if !tmp.8 jump end_if_12
            return 7
        
          end_if_12:
            tmp.10 = ui2 != 2147483798U
            if !tmp.10 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
        static global i: Int = -2147483646
        static global i2: Int = -2147483498
        static global l: Long = -9223372036854775716L
        static global l2: Long = 2147483650L
        static global u: Unsigned Int = 2147483660U
        static global ui2: Unsigned Int = 2147483798U
        static global ul: Unsigned Long = 4294967294UL
        static global ul2: Unsigned Long = 9223372036854775798UL
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_libraries_unsigned_args() {
    let src = r#"
        int accept_unsigned(unsigned int a, unsigned int b, unsigned long c, unsigned long d,
                         unsigned int e, unsigned int f, unsigned long g, unsigned int h,
                         unsigned long i) {
            if (a != 1u) {
                return 1;
            }
            if (b != 4294967295U) {
                return 2;
            }
            if (c != 18446744073709551615UL) {
                return 3;
            }
            if (d != 9223372036854775808ul) {
                return 4;
            }
            if (e != 2147483648u) {
                return 5;
            }
            if (f != 0u) {
                return 8;
            }
            if (g != 123456u) {
                return 9;
            }
            if (h != 2147487744u) {
                return 10;
            }
            if (i != 9223372041149743104ul) {
                return 11;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function accept_unsigned(a.0, b.1, c.2, d.3, e.4, f.5, g.6, h.7, i.8) { 
            tmp.0 = a.0 != 1U
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = b.1 != 4294967295U
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            tmp.2 = c.2 != 18446744073709551615UL
            if !tmp.2 jump end_if_4
            return 3
        
          end_if_4:
            tmp.3 = d.3 != 9223372036854775808UL
            if !tmp.3 jump end_if_6
            return 4
        
          end_if_6:
            tmp.4 = e.4 != 2147483648U
            if !tmp.4 jump end_if_8
            return 5
        
          end_if_8:
            tmp.5 = f.5 != 0U
            if !tmp.5 jump end_if_10
            return 8
        
          end_if_10:
            tmp.7 = zero_extend 123456U
            tmp.6 = g.6 != tmp.7
            if !tmp.6 jump end_if_12
            return 9
        
          end_if_12:
            tmp.8 = h.7 != 2147487744U
            if !tmp.8 jump end_if_14
            return 10
        
          end_if_14:
            tmp.9 = i.8 != 9223372041149743104UL
            if !tmp.9 jump end_if_16
            return 11
        
          end_if_16:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_libraries_unsigned_args_client() {
    let src = r#"
        
        int accept_unsigned(unsigned int a, unsigned int b, unsigned long c, unsigned long d,
                         unsigned int e, unsigned int f, unsigned long g, unsigned int h,
                         unsigned long i);
        int main(void) {
            return accept_unsigned(1, -1, -1, 9223372036854775808ul, 2147483648ul, 0, 123456, 2147487744u, 9223372041149743104ul);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1
            tmp.1 = - 1
            tmp.2 = tmp.1
            tmp.3 = - 1
            tmp.4 = sign_extend tmp.3
            tmp.5 = truncate 2147483648UL
            tmp.6 = 0
            tmp.7 = sign_extend 123456
            tmp.8 = accept_unsigned(tmp.0, tmp.2, tmp.4, 9223372036854775808UL, tmp.5, tmp.6, tmp.7, 2147487744U, 9223372041149743104UL)
            return tmp.8
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_libraries_unsigned_global_var() {
    let src = r#"
        unsigned int ui = 4294967200u;
        unsigned int return_uint(void) {
            return ui;
        }
        int return_uint_as_signed(void) {
            return ui;
        }
        long return_uint_as_long(void) {
            return ui;
        }
    "#;
    let expected = r#"
        global function return_uint() { 
            return ui
            return 0
        }
        global function return_uint_as_signed() { 
            tmp.0 = ui
            return tmp.0
            return 0
        }
        global function return_uint_as_long() { 
            tmp.1 = zero_extend ui
            return tmp.1
            return 0
        }
        static global ui: Unsigned Int = 4294967200U
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_libraries_unsigned_global_var_client() {
    let src = r#"
        extern unsigned int ui;
        unsigned int return_uint(void);
        int return_uint_as_signed(void);
        long return_uint_as_long(void);
        int main(void) {
            if (ui != 4294967200u)
                return 0;
            ui = -1;
            long result = (long) return_uint();
            if (result != 4294967295l)
                return 0;
            result = (long) return_uint_as_signed();
            if (result != -1l)
                return 0;
            result = return_uint_as_long();
            if (result != 4294967295l)
                return 0;
            return 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = ui != 4294967200U
            if !tmp.0 jump end_if_0
            return 0
        
          end_if_0:
            tmp.1 = - 1
            tmp.2 = tmp.1
            ui = tmp.2
            tmp.3 = return_uint()
            tmp.4 = zero_extend tmp.3
            result.0 = tmp.4
            tmp.5 = result.0 != 4294967295L
            if !tmp.5 jump end_if_2
            return 0
        
          end_if_2:
            tmp.6 = return_uint_as_signed()
            tmp.7 = sign_extend tmp.6
            result.0 = tmp.7
            tmp.9 = - 1L
            tmp.8 = result.0 != tmp.9
            if !tmp.8 jump end_if_4
            return 0
        
          end_if_4:
            tmp.10 = return_uint_as_long()
            result.0 = tmp.10
            tmp.11 = result.0 != 4294967295L
            if !tmp.11 jump end_if_6
            return 0
        
          end_if_6:
            return 1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_type_specifiers_signed_type_specifiers() {
    let src = r#"
        static int i;
        signed extern i;
        int static signed i = 5;
        signed int static i;
        long signed l;
        long l = 7;
        int long l;
        signed long int l;
        int main(void) {
            int signed extern i;
            extern signed long l;
            if (i != 5) {
                return 1;
            }
            if (l != 7) {
                return 2;
            }
            int counter = 0;
            for (signed int index = 10; index > 0; index = index - 1) {
                counter = counter + 1;
            }
            if (counter != 10) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = i != 5
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = sign_extend 7
            tmp.1 = l != tmp.2
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            counter.2 = 0
            index.3 = 10
        
          start_loop_0:
            tmp.3 = index.3 > 0
            if !tmp.3 jump break_loop_0
            tmp.4 = counter.2 + 1
            counter.2 = tmp.4
        
          continue_loop_0:
            tmp.5 = index.3 - 1
            index.3 = tmp.5
            jump start_loop_0
        
          break_loop_0:
            tmp.6 = counter.2 != 10
            if !tmp.6 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
        static i: Int = 5
        static global l: Long = 7L
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_type_specifiers_unsigned_type_specifiers() {
    let src = r#"
        unsigned u;
        int unsigned u;
        unsigned int u = 6;
        unsigned long ul;
        long unsigned ul;
        long int unsigned ul;
        unsigned int long ul = 4;
        int main(void) {
            if (u != 6u) {
                return 1;
            }
            long extern unsigned ul;
            unsigned long extern ul;
            int extern unsigned long ul;
            if (ul != 4ul) {
                return 2;
            }
            int counter = 0;
            for (unsigned int index = 10; index < 4294967295U; index = index - 1) {
                counter = counter + 1;
            }
            if (counter != 11) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = u != 6U
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = ul != 4UL
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            counter.3 = 0
            tmp.2 = 10
            index.4 = tmp.2
        
          start_loop_0:
            tmp.3 = index.4 < 4294967295U
            if !tmp.3 jump break_loop_0
            tmp.4 = counter.3 + 1
            counter.3 = tmp.4
        
          continue_loop_0:
            tmp.6 = 1
            tmp.5 = index.4 - tmp.6
            index.4 = tmp.5
            jump start_loop_0
        
          break_loop_0:
            tmp.7 = counter.3 != 11
            if !tmp.7 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
        static global u: Unsigned Int = 6U
        static global ul: Unsigned Long = 4UL
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_arithmetic_ops() {
    let src = r#"
        unsigned int ui_a;
        unsigned int ui_b;
        unsigned long ul_a;
        unsigned long ul_b;
        int addition(void) {
            return (ui_a + 2147483653u == 2147483663u);
        }
        int subtraction(void) {
            return (ul_a - ul_b == 18446744072635808792ul);
        }
        int multiplication(void) {
            return (ui_a * ui_b == 3221225472u);
        }
        int division(void) {
            return (ui_a / ui_b == 0);
        }
        int division_large_dividend(void) {
            return (ui_a / ui_b == 2);
        }
        int division_by_literal(void) {
            return (ul_a / 5ul == 219902325555ul);
        }
        int remaind(void) {
            return (ul_b % ul_a == 5ul);
        }
        int complement(void) {
            return (~ui_a == 0);
        }
        int main(void) {
            ui_a = 10u;
            if (!addition()) {
                return 1;
            }
            ul_a = 18446744072635809792ul;
            ul_b = 1000ul;
            if (!subtraction()) {
                return 2;
            }
            ui_a = 1073741824u;
            ui_b = 3u;
            if (!multiplication()) {
                return 3;
            }
            ui_a = 100u;
            ui_b = 4294967294u;
            if (!division()) {
                return 4;
            }
            ui_a = 4294967294u;
            ui_b = 2147483647u;
            if (!division_large_dividend()) {
                return 5;
            }
            ul_a = 1099511627775ul;
            if (!division_by_literal()) {
                return 6;
            }
            ul_a = 100ul;
            ul_b = 18446744073709551605ul;
            if (!remaind()) {
                return 7;
            }
            ui_a = 4294967295U;
            if (!complement()) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function addition() { 
            tmp.0 = ui_a + 2147483653U
            tmp.1 = tmp.0 == 2147483663U
            return tmp.1
            return 0
        }
        global function subtraction() { 
            tmp.2 = ul_a - ul_b
            tmp.3 = tmp.2 == 18446744072635808792UL
            return tmp.3
            return 0
        }
        global function multiplication() { 
            tmp.4 = ui_a * ui_b
            tmp.5 = tmp.4 == 3221225472U
            return tmp.5
            return 0
        }
        global function division() { 
            tmp.6 = ui_a / ui_b
            tmp.8 = 0
            tmp.7 = tmp.6 == tmp.8
            return tmp.7
            return 0
        }
        global function division_large_dividend() { 
            tmp.9 = ui_a / ui_b
            tmp.11 = 2
            tmp.10 = tmp.9 == tmp.11
            return tmp.10
            return 0
        }
        global function division_by_literal() { 
            tmp.12 = ul_a / 5UL
            tmp.13 = tmp.12 == 219902325555UL
            return tmp.13
            return 0
        }
        global function remaind() { 
            tmp.14 = ul_b % ul_a
            tmp.15 = tmp.14 == 5UL
            return tmp.15
            return 0
        }
        global function complement() { 
            tmp.16 = ~ ui_a
            tmp.18 = 0
            tmp.17 = tmp.16 == tmp.18
            return tmp.17
            return 0
        }
        global function main() { 
            ui_a = 10U
            tmp.19 = addition()
            tmp.20 = ! tmp.19
            if !tmp.20 jump end_if_0
            return 1
        
          end_if_0:
            ul_a = 18446744072635809792UL
            ul_b = 1000UL
            tmp.21 = subtraction()
            tmp.22 = ! tmp.21
            if !tmp.22 jump end_if_2
            return 2
        
          end_if_2:
            ui_a = 1073741824U
            ui_b = 3U
            tmp.23 = multiplication()
            tmp.24 = ! tmp.23
            if !tmp.24 jump end_if_4
            return 3
        
          end_if_4:
            ui_a = 100U
            ui_b = 4294967294U
            tmp.25 = division()
            tmp.26 = ! tmp.25
            if !tmp.26 jump end_if_6
            return 4
        
          end_if_6:
            ui_a = 4294967294U
            ui_b = 2147483647U
            tmp.27 = division_large_dividend()
            tmp.28 = ! tmp.27
            if !tmp.28 jump end_if_8
            return 5
        
          end_if_8:
            ul_a = 1099511627775UL
            tmp.29 = division_by_literal()
            tmp.30 = ! tmp.29
            if !tmp.30 jump end_if_10
            return 6
        
          end_if_10:
            ul_a = 100UL
            ul_b = 18446744073709551605UL
            tmp.31 = remaind()
            tmp.32 = ! tmp.31
            if !tmp.32 jump end_if_12
            return 7
        
          end_if_12:
            ui_a = 4294967295U
            tmp.33 = complement()
            tmp.34 = ! tmp.33
            if !tmp.34 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
        static global ui_a: Unsigned Int = zero[4]
        static global ui_b: Unsigned Int = zero[4]
        static global ul_a: Unsigned Long = zero[8]
        static global ul_b: Unsigned Long = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_arithmetic_wraparound() {
    let src = r#"
        unsigned int ui_a;
        unsigned int ui_b;
        unsigned long ul_a;
        unsigned long ul_b;
        int addition(void) {
            return ui_a + ui_b == 0u;
        }
        int subtraction(void) {
            return (ul_a - ul_b == 18446744073709551606ul);
        }
        int neg(void) {
            return -ul_a == 18446744073709551615UL;
        }
        int main(void) {
            ui_a = 4294967293u;
            ui_b = 3u;
            if (!addition()) {
                return 1;
            }
            ul_a = 10ul;
            ul_b = 20ul;
            if (!subtraction()) {
                return 2;
            }
            ul_a = 1ul;
            if (!neg()) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function addition() { 
            tmp.0 = ui_a + ui_b
            tmp.1 = tmp.0 == 0U
            return tmp.1
            return 0
        }
        global function subtraction() { 
            tmp.2 = ul_a - ul_b
            tmp.3 = tmp.2 == 18446744073709551606UL
            return tmp.3
            return 0
        }
        global function neg() { 
            tmp.4 = - ul_a
            tmp.5 = tmp.4 == 18446744073709551615UL
            return tmp.5
            return 0
        }
        global function main() { 
            ui_a = 4294967293U
            ui_b = 3U
            tmp.6 = addition()
            tmp.7 = ! tmp.6
            if !tmp.7 jump end_if_0
            return 1
        
          end_if_0:
            ul_a = 10UL
            ul_b = 20UL
            tmp.8 = subtraction()
            tmp.9 = ! tmp.8
            if !tmp.9 jump end_if_2
            return 2
        
          end_if_2:
            ul_a = 1UL
            tmp.10 = neg()
            tmp.11 = ! tmp.10
            if !tmp.11 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
        static global ui_a: Unsigned Int = zero[4]
        static global ui_b: Unsigned Int = zero[4]
        static global ul_a: Unsigned Long = zero[8]
        static global ul_b: Unsigned Long = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_comparisons() {
    let src = r#"
        unsigned int one_hundred = 100u;
        unsigned int large_uint = 4294967294u;
        unsigned long one_hundred_ulong = 100ul;
        unsigned long large_ulong = 4294967294ul;
        int main(void) {
            if (large_uint < one_hundred)
                return 1;
            if (large_uint <= one_hundred)
                return 2;
            if (one_hundred >= large_uint)
                return 3;
            if (one_hundred > large_uint)
                return 4;
            if (!(one_hundred <= large_uint))
                return 5;
            if (!(one_hundred < large_uint))
                return 6;
            if (!(large_uint > one_hundred))
                return 7;
            if (!(large_uint >= one_hundred))
                return 8;
            if (large_ulong < one_hundred_ulong)
                return 9;
            if (large_ulong <= one_hundred_ulong)
                return 10;
            if (one_hundred_ulong >= large_ulong)
                return 11;
            if (one_hundred_ulong > large_ulong)
                return 12;
            if (!(one_hundred_ulong <= large_ulong))
                return 13;
            if (!(one_hundred_ulong < large_ulong))
                return 14;
            if (!(large_ulong > one_hundred_ulong))
                return 15;
            if (!(large_ulong >= one_hundred_ulong))
                return 16;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = large_uint < one_hundred
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = large_uint <= one_hundred
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            tmp.2 = one_hundred >= large_uint
            if !tmp.2 jump end_if_4
            return 3
        
          end_if_4:
            tmp.3 = one_hundred > large_uint
            if !tmp.3 jump end_if_6
            return 4
        
          end_if_6:
            tmp.4 = one_hundred <= large_uint
            tmp.5 = ! tmp.4
            if !tmp.5 jump end_if_8
            return 5
        
          end_if_8:
            tmp.6 = one_hundred < large_uint
            tmp.7 = ! tmp.6
            if !tmp.7 jump end_if_10
            return 6
        
          end_if_10:
            tmp.8 = large_uint > one_hundred
            tmp.9 = ! tmp.8
            if !tmp.9 jump end_if_12
            return 7
        
          end_if_12:
            tmp.10 = large_uint >= one_hundred
            tmp.11 = ! tmp.10
            if !tmp.11 jump end_if_14
            return 8
        
          end_if_14:
            tmp.12 = large_ulong < one_hundred_ulong
            if !tmp.12 jump end_if_16
            return 9
        
          end_if_16:
            tmp.13 = large_ulong <= one_hundred_ulong
            if !tmp.13 jump end_if_18
            return 10
        
          end_if_18:
            tmp.14 = one_hundred_ulong >= large_ulong
            if !tmp.14 jump end_if_20
            return 11
        
          end_if_20:
            tmp.15 = one_hundred_ulong > large_ulong
            if !tmp.15 jump end_if_22
            return 12
        
          end_if_22:
            tmp.16 = one_hundred_ulong <= large_ulong
            tmp.17 = ! tmp.16
            if !tmp.17 jump end_if_24
            return 13
        
          end_if_24:
            tmp.18 = one_hundred_ulong < large_ulong
            tmp.19 = ! tmp.18
            if !tmp.19 jump end_if_26
            return 14
        
          end_if_26:
            tmp.20 = large_ulong > one_hundred_ulong
            tmp.21 = ! tmp.20
            if !tmp.21 jump end_if_28
            return 15
        
          end_if_28:
            tmp.22 = large_ulong >= one_hundred_ulong
            tmp.23 = ! tmp.22
            if !tmp.23 jump end_if_30
            return 16
        
          end_if_30:
            return 0
            return 0
        }
        static global large_uint: Unsigned Int = 4294967294U
        static global large_ulong: Unsigned Long = 4294967294UL
        static global one_hundred: Unsigned Int = 100U
        static global one_hundred_ulong: Unsigned Long = 100UL
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_locals() {
    let src = r#"
        int main(void) {
            unsigned long a = 8589934592ul;
            int b = -1;
            long c = -8589934592l;
            unsigned int d = 10u;
            if (a != 8589934592ul) {
                return 1;
            }
            if (b != -1){
                return 2;
            }
            if (c != -8589934592l) {
                return 3;
            }
            if (d != 10u) {
                return 4;
            }
            a = -a;
            b = b - 1;
            c = c + 8589934594l;
            d = d * 268435456u;
            if (a != 18446744065119617024ul) {
                return 5;
            }
            if (b != -2) {
                return 6;
            }
            if (c != 2) {
                return 7;
            }
            if (d != 2684354560u) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 8589934592UL
            tmp.0 = - 1
            b.1 = tmp.0
            tmp.1 = - 8589934592L
            c.2 = tmp.1
            d.3 = 10U
            tmp.2 = a.0 != 8589934592UL
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = - 1
            tmp.3 = b.1 != tmp.4
            if !tmp.3 jump end_if_2
            return 2
        
          end_if_2:
            tmp.6 = - 8589934592L
            tmp.5 = c.2 != tmp.6
            if !tmp.5 jump end_if_4
            return 3
        
          end_if_4:
            tmp.7 = d.3 != 10U
            if !tmp.7 jump end_if_6
            return 4
        
          end_if_6:
            tmp.8 = - a.0
            a.0 = tmp.8
            tmp.9 = b.1 - 1
            b.1 = tmp.9
            tmp.10 = c.2 + 8589934594L
            c.2 = tmp.10
            tmp.11 = d.3 * 268435456U
            d.3 = tmp.11
            tmp.12 = a.0 != 18446744065119617024UL
            if !tmp.12 jump end_if_8
            return 5
        
          end_if_8:
            tmp.14 = - 2
            tmp.13 = b.1 != tmp.14
            if !tmp.13 jump end_if_10
            return 6
        
          end_if_10:
            tmp.16 = sign_extend 2
            tmp.15 = c.2 != tmp.16
            if !tmp.15 jump end_if_12
            return 7
        
          end_if_12:
            tmp.17 = d.3 != 2684354560U
            if !tmp.17 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_logical() {
    let src = r#"
        int not(unsigned long ul) {
            return !ul;
        }
        int if_cond(unsigned u) {
            if (u) {
                return 1;
            }
            return 0;
        }
        int and(unsigned long ul, int i) {
            return ul && i;
        }
        int or(int i, unsigned u) {
            return i || u;
        }
        int main(void) {
            unsigned long ul = 1152921504606846976ul;
            unsigned int u = 2147483648u;
            unsigned long zero = 0l;
            if (not(ul)) {
                return 1;
            }
            if (!not(zero)) {
                return 2;
            }
            if(!if_cond(u)) {
                return 3;
            }
            if(if_cond(zero)) {
                return 4;
            }
            if (and(zero, 1)) {
                return 5;
            }
            if (!or(1, u)) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function not(ul.0) { 
            tmp.0 = ! ul.0
            return tmp.0
            return 0
        }
        global function if_cond(u.1) { 
            if !u.1 jump end_if_0
            return 1
        
          end_if_0:
            return 0
            return 0
        }
        global function and(ul.2, i.3) { 
            if !ul.2 jump and_false_2
            if !i.3 jump and_false_2
            tmp.2 = 1
            jump and_end_3
        
          and_false_2:
            tmp.2 = 0
        
          and_end_3:
            return tmp.2
            return 0
        }
        global function or(i.4, u.5) { 
            if i.4 jump or_true_4
            if u.5 jump or_true_4
            tmp.4 = 0
            jump or_end_5
        
          or_true_4:
            tmp.4 = 1
        
          or_end_5:
            return tmp.4
            return 0
        }
        global function main() { 
            ul.6 = 1152921504606846976UL
            u.7 = 2147483648U
            tmp.5 = 0L
            zero.8 = tmp.5
            tmp.6 = not(ul.6)
            if !tmp.6 jump end_if_6
            return 1
        
          end_if_6:
            tmp.7 = not(zero.8)
            tmp.8 = ! tmp.7
            if !tmp.8 jump end_if_8
            return 2
        
          end_if_8:
            tmp.9 = if_cond(u.7)
            tmp.10 = ! tmp.9
            if !tmp.10 jump end_if_10
            return 3
        
          end_if_10:
            tmp.11 = truncate zero.8
            tmp.12 = if_cond(tmp.11)
            if !tmp.12 jump end_if_12
            return 4
        
          end_if_12:
            tmp.13 = and(zero.8, 1)
            if !tmp.13 jump end_if_14
            return 5
        
          end_if_14:
            tmp.14 = or(1, u.7)
            tmp.15 = ! tmp.14
            if !tmp.15 jump end_if_16
            return 6
        
          end_if_16:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_simple() {
    let src = r#"
        int main(void) {
            unsigned u = 2147483647u;
            return (u + 2u == 2147483649u);
        }
    "#;
    let expected = r#"
        global function main() { 
            u.0 = 2147483647U
            tmp.0 = u.0 + 2U
            tmp.1 = tmp.0 == 2147483649U
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_static_variables() {
    let src = r#"
        
        static unsigned long x = 9223372036854775803ul;
        unsigned long zero_long;
        unsigned zero_int;
        int main(void)
        {
            if (x != 9223372036854775803ul)
                return 0;
            x = x + 10;
            if (x != 9223372036854775813ul)
                return 0;
            if (zero_long || zero_int)
                return 0;
            return 1;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = x != 9223372036854775803UL
            if !tmp.0 jump end_if_0
            return 0
        
          end_if_0:
            tmp.2 = sign_extend 10
            tmp.1 = x + tmp.2
            x = tmp.1
            tmp.3 = x != 9223372036854775813UL
            if !tmp.3 jump end_if_2
            return 0
        
          end_if_2:
            if zero_long jump or_true_4
            if zero_int jump or_true_4
            tmp.5 = 0
            jump or_end_5
        
          or_true_4:
            tmp.5 = 1
        
          or_end_5:
            if !tmp.5 jump end_if_6
            return 0
        
          end_if_6:
            return 1
            return 0
        }
        static x: Unsigned Long = 9223372036854775803UL
        static global zero_int: Unsigned Int = zero[4]
        static global zero_long: Unsigned Long = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_constants_constant_doubles() {
    let src = r#"
        int main(void) {
            double a = 1.0;
            double b = 1.;
            double c = 1E0;
            double d = .01e+2;
            if (! (a == b && a == c && a == d) )
                return 1;
            if (a + b + c + d != 4.0)
                return 2;
            double e = .125;
            double f = 12.5e-2;
            double g = 125.E-3;
            double h = 1250000000e-10;
            if (! (e == f && e == g && e == h) )
                return 3;
            if (e + f + g + h != 0.5)
                return 4;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 1D
            b.1 = 1D
            c.2 = 1D
            d.3 = 1D
            tmp.0 = a.0 == b.1
            if !tmp.0 jump and_false_0
            tmp.3 = a.0 == c.2
            if !tmp.3 jump and_false_0
            tmp.2 = 1
            jump and_end_1
        
          and_false_0:
            tmp.2 = 0
        
          and_end_1:
            if !tmp.2 jump and_false_2
            tmp.6 = a.0 == d.3
            if !tmp.6 jump and_false_2
            tmp.5 = 1
            jump and_end_3
        
          and_false_2:
            tmp.5 = 0
        
          and_end_3:
            tmp.7 = ! tmp.5
            if !tmp.7 jump end_if_4
            return 1
        
          end_if_4:
            tmp.8 = a.0 + b.1
            tmp.9 = tmp.8 + c.2
            tmp.10 = tmp.9 + d.3
            tmp.11 = tmp.10 != 4D
            if !tmp.11 jump end_if_6
            return 2
        
          end_if_6:
            e.4 = 0.125D
            f.5 = 0.125D
            g.6 = 0.125D
            h.7 = 0.125D
            tmp.12 = e.4 == f.5
            if !tmp.12 jump and_false_8
            tmp.15 = e.4 == g.6
            if !tmp.15 jump and_false_8
            tmp.14 = 1
            jump and_end_9
        
          and_false_8:
            tmp.14 = 0
        
          and_end_9:
            if !tmp.14 jump and_false_10
            tmp.18 = e.4 == h.7
            if !tmp.18 jump and_false_10
            tmp.17 = 1
            jump and_end_11
        
          and_false_10:
            tmp.17 = 0
        
          and_end_11:
            tmp.19 = ! tmp.17
            if !tmp.19 jump end_if_12
            return 3
        
          end_if_12:
            tmp.20 = e.4 + f.5
            tmp.21 = tmp.20 + g.6
            tmp.22 = tmp.21 + h.7
            tmp.23 = tmp.22 != 0.5D
            if !tmp.23 jump end_if_14
            return 4
        
          end_if_14:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_constants_round_constants() {
    let src = r#"
        int main(void) {
            if (1.00000000000000033306690738754696212708950042724609375 != 1.0000000000000004) {
                return 1;
            }
            if (9223372036854776832.5 != 9223372036854777856.0) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 1.0000000000000004D != 1.0000000000000004D
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = 9223372036854778000D != 9223372036854778000D
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_explicit_casts_cvttsd2si_rewrite() {
    let src = r#"
        double glob = 3.0;
        int main(void) {
            long l = -1l;
            int i = -1;
            int j = (int) glob;
            int k = 20;
            if (l != -1l) {
                return 1;
            }
            if (i != -1) {
                return 2;
            }
            if (j != 3) {
                return 3;
            }
            if (k != 20) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1L
            l.0 = tmp.0
            tmp.1 = - 1
            i.1 = tmp.1
            tmp.2 = double_to_int glob
            j.2 = tmp.2
            k.3 = 20
            tmp.4 = - 1L
            tmp.3 = l.0 != tmp.4
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = - 1
            tmp.5 = i.1 != tmp.6
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = j.2 != 3
            if !tmp.7 jump end_if_4
            return 3
        
          end_if_4:
            tmp.8 = k.3 != 20
            if !tmp.8 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        static global glob: Double = 3D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_explicit_casts_double_to_signed() {
    let src = r#"
        int double_to_int(double d) {
            return (int) d;
        }
        long double_to_long(double d) {
            return (long) d;
        }
        int main(void) {
            long l = double_to_long(2148429099.3);
            if (l != 2148429099l) {
                return 1;
            }
            int i = double_to_int(-200000.9999);
            if (i != -200000) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function double_to_int(d.0) { 
            tmp.0 = double_to_int d.0
            return tmp.0
            return 0
        }
        global function double_to_long(d.1) { 
            tmp.1 = double_to_int d.1
            return tmp.1
            return 0
        }
        global function main() { 
            tmp.2 = double_to_long(2148429099.3D)
            l.2 = tmp.2
            tmp.3 = l.2 != 2148429099L
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = - 200000.9999D
            tmp.5 = double_to_int(tmp.4)
            i.3 = tmp.5
            tmp.7 = - 200000
            tmp.6 = i.3 != tmp.7
            if !tmp.6 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_explicit_casts_double_to_unsigned() {
    let src = r#"
        unsigned int double_to_uint(double d) {
            return (unsigned int) d;
        }
        unsigned long double_to_ulong(double d) {
            return (unsigned long) d;
        }
        int main(void) {
            if (double_to_uint(10.9) != 10u) {
                return 1;
            }
            if (double_to_uint(2147483750.5) != 2147483750) {
                return 2;
            }
            if (double_to_ulong(34359738368.5) != 34359738368ul) {
                return 3;
            }
            if (double_to_ulong(3458764513821589504.0) != 3458764513821589504ul) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function double_to_uint(d.0) { 
            tmp.0 = double_to_uint d.0
            return tmp.0
            return 0
        }
        global function double_to_ulong(d.1) { 
            tmp.1 = double_to_uint d.1
            return tmp.1
            return 0
        }
        global function main() { 
            tmp.2 = double_to_uint(10.9D)
            tmp.3 = tmp.2 != 10U
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = double_to_uint(2147483750.5D)
            tmp.5 = zero_extend tmp.4
            tmp.6 = tmp.5 != 2147483750L
            if !tmp.6 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = double_to_ulong(34359738368.5D)
            tmp.8 = tmp.7 != 34359738368UL
            if !tmp.8 jump end_if_4
            return 3
        
          end_if_4:
            tmp.9 = double_to_ulong(3458764513821589500D)
            tmp.10 = tmp.9 != 3458764513821589504UL
            if !tmp.10 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_explicit_casts_rewrite_cvttsd2si_regression() {
    let src = r#"
        int check_12_ints(int start, int a, int b, int c, int d, int e, int f, int g,
                          int h, int i, int j, int k, int l);
        double glob = 5000.;
        int main(void) {
            long should_spill = (long)glob;
            int one = glob - 4999;
            int two = one + one;
            int three = 2 + one;
            int four = two * two;
            int five = 6 - one;
            int six = two * three;
            int seven = one + 6;
            int eight = two * 4;
            int nine = three * three;
            int ten = four + six;
            int eleven = 16 - five;
            int twelve = six + six;
            check_12_ints(one, two, three, four, five, six, seven, eight, nine, ten,
                          eleven, twelve, 1);
            int thirteen = glob - 4987;
            int fourteen = thirteen + 1;
            int fifteen = 28 - thirteen;
            int sixteen = fourteen + 2;
            int seventeen = 4 + thirteen;
            int eighteen = 32 - fourteen;
            int nineteen = 35 - sixteen;
            int twenty = fifteen + 5;
            int twenty_one = thirteen * 2 - 5;
            int twenty_two = fifteen + 7;
            int twenty_three = 6 + seventeen;
            int twenty_four = thirteen + 11;
            check_12_ints(thirteen, fourteen, fifteen, sixteen, seventeen, eighteen,
                          nineteen, twenty, twenty_one, twenty_two, twenty_three,
                          twenty_four, 13);
            if (should_spill != 5000) {
                return -1;
            }
            return 0;
        }
        int check_12_ints(int a, int b, int c, int d, int e, int f, int g, int h, int i,
                          int j, int k, int l, int start) {
            int expected = 0;
            expected = start + 0;
            if (a != expected) {
                return expected;
            }
            expected = start + 1;
            if (b != expected) {
                return expected;
            }
            expected = start + 2;
            if (c != expected) {
                return expected;
            }
            expected = start + 3;
            if (d != expected) {
                return expected;
            }
            expected = start + 4;
            if (e != expected) {
                return expected;
            }
            expected = start + 5;
            if (f != expected) {
                return expected;
            }
            expected = start + 6;
            if (g != expected) {
                return expected;
            }
            expected = start + 7;
            if (h != expected) {
                return expected;
            }
            expected = start + 8;
            if (i != expected) {
                return expected;
            }
            expected = start + 9;
            if (j != expected) {
                return expected;
            }
            expected = start + 10;
            if (k != expected) {
                return expected;
            }
            expected = start + 11;
            if (l != expected) {
                return expected;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = double_to_int glob
            should_spill.13 = tmp.0
            tmp.2 = int_to_double 4999
            tmp.1 = glob - tmp.2
            tmp.3 = double_to_int tmp.1
            one.14 = tmp.3
            tmp.4 = one.14 + one.14
            two.15 = tmp.4
            tmp.5 = 2 + one.14
            three.16 = tmp.5
            tmp.6 = two.15 * two.15
            four.17 = tmp.6
            tmp.7 = 6 - one.14
            five.18 = tmp.7
            tmp.8 = two.15 * three.16
            six.19 = tmp.8
            tmp.9 = one.14 + 6
            seven.20 = tmp.9
            tmp.10 = two.15 * 4
            eight.21 = tmp.10
            tmp.11 = three.16 * three.16
            nine.22 = tmp.11
            tmp.12 = four.17 + six.19
            ten.23 = tmp.12
            tmp.13 = 16 - five.18
            eleven.24 = tmp.13
            tmp.14 = six.19 + six.19
            twelve.25 = tmp.14
            tmp.15 = check_12_ints(one.14, two.15, three.16, four.17, five.18, six.19, seven.20, eight.21, nine.22, ten.23, eleven.24, twelve.25, 1)
            tmp.17 = int_to_double 4987
            tmp.16 = glob - tmp.17
            tmp.18 = double_to_int tmp.16
            thirteen.26 = tmp.18
            tmp.19 = thirteen.26 + 1
            fourteen.27 = tmp.19
            tmp.20 = 28 - thirteen.26
            fifteen.28 = tmp.20
            tmp.21 = fourteen.27 + 2
            sixteen.29 = tmp.21
            tmp.22 = 4 + thirteen.26
            seventeen.30 = tmp.22
            tmp.23 = 32 - fourteen.27
            eighteen.31 = tmp.23
            tmp.24 = 35 - sixteen.29
            nineteen.32 = tmp.24
            tmp.25 = fifteen.28 + 5
            twenty.33 = tmp.25
            tmp.26 = thirteen.26 * 2
            tmp.27 = tmp.26 - 5
            twenty_one.34 = tmp.27
            tmp.28 = fifteen.28 + 7
            twenty_two.35 = tmp.28
            tmp.29 = 6 + seventeen.30
            twenty_three.36 = tmp.29
            tmp.30 = thirteen.26 + 11
            twenty_four.37 = tmp.30
            tmp.31 = check_12_ints(thirteen.26, fourteen.27, fifteen.28, sixteen.29, seventeen.30, eighteen.31, nineteen.32, twenty.33, twenty_one.34, twenty_two.35, twenty_three.36, twenty_four.37, 13)
            tmp.33 = sign_extend 5000
            tmp.32 = should_spill.13 != tmp.33
            if !tmp.32 jump end_if_0
            tmp.34 = - 1
            return tmp.34
        
          end_if_0:
            return 0
            return 0
        }
        global function check_12_ints(a.38, b.39, c.40, d.41, e.42, f.43, g.44, h.45, i.46, j.47, k.48, l.49, start.50) { 
            expected.51 = 0
            tmp.35 = start.50 + 0
            expected.51 = tmp.35
            tmp.36 = a.38 != expected.51
            if !tmp.36 jump end_if_2
            return expected.51
        
          end_if_2:
            tmp.37 = start.50 + 1
            expected.51 = tmp.37
            tmp.38 = b.39 != expected.51
            if !tmp.38 jump end_if_4
            return expected.51
        
          end_if_4:
            tmp.39 = start.50 + 2
            expected.51 = tmp.39
            tmp.40 = c.40 != expected.51
            if !tmp.40 jump end_if_6
            return expected.51
        
          end_if_6:
            tmp.41 = start.50 + 3
            expected.51 = tmp.41
            tmp.42 = d.41 != expected.51
            if !tmp.42 jump end_if_8
            return expected.51
        
          end_if_8:
            tmp.43 = start.50 + 4
            expected.51 = tmp.43
            tmp.44 = e.42 != expected.51
            if !tmp.44 jump end_if_10
            return expected.51
        
          end_if_10:
            tmp.45 = start.50 + 5
            expected.51 = tmp.45
            tmp.46 = f.43 != expected.51
            if !tmp.46 jump end_if_12
            return expected.51
        
          end_if_12:
            tmp.47 = start.50 + 6
            expected.51 = tmp.47
            tmp.48 = g.44 != expected.51
            if !tmp.48 jump end_if_14
            return expected.51
        
          end_if_14:
            tmp.49 = start.50 + 7
            expected.51 = tmp.49
            tmp.50 = h.45 != expected.51
            if !tmp.50 jump end_if_16
            return expected.51
        
          end_if_16:
            tmp.51 = start.50 + 8
            expected.51 = tmp.51
            tmp.52 = i.46 != expected.51
            if !tmp.52 jump end_if_18
            return expected.51
        
          end_if_18:
            tmp.53 = start.50 + 9
            expected.51 = tmp.53
            tmp.54 = j.47 != expected.51
            if !tmp.54 jump end_if_20
            return expected.51
        
          end_if_20:
            tmp.55 = start.50 + 10
            expected.51 = tmp.55
            tmp.56 = k.48 != expected.51
            if !tmp.56 jump end_if_22
            return expected.51
        
          end_if_22:
            tmp.57 = start.50 + 11
            expected.51 = tmp.57
            tmp.58 = l.49 != expected.51
            if !tmp.58 jump end_if_24
            return expected.51
        
          end_if_24:
            return 0
            return 0
        }
        static global glob: Double = 5000D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_explicit_casts_signed_to_double() {
    let src = r#"
        
        double int_to_double(int i) {
            return (double) i;
        }
        double long_to_double(long l) {
            return (double) l;
        }
        int main(void) {
            if (int_to_double(-100000) != -100000.0) {
                return 1;
            }
            if (long_to_double(-9007199254751227l) != -9007199254751228.0) {
                return 2;
            }
            double d = (double) 1152921504606846977l;
            if (d != 1152921504606846976.0) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function int_to_double(i.0) { 
            tmp.0 = int_to_double i.0
            return tmp.0
            return 0
        }
        global function long_to_double(l.1) { 
            tmp.1 = int_to_double l.1
            return tmp.1
            return 0
        }
        global function main() { 
            tmp.2 = - 100000
            tmp.3 = int_to_double(tmp.2)
            tmp.5 = - 100000D
            tmp.4 = tmp.3 != tmp.5
            if !tmp.4 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = - 9007199254751227L
            tmp.7 = long_to_double(tmp.6)
            tmp.9 = - 9007199254751228D
            tmp.8 = tmp.7 != tmp.9
            if !tmp.8 jump end_if_2
            return 2
        
          end_if_2:
            tmp.10 = int_to_double 1152921504606846977L
            d.2 = tmp.10
            tmp.11 = d.2 != 1152921504606847000D
            if !tmp.11 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_explicit_casts_unsigned_to_double() {
    let src = r#"
        
        double uint_to_double(unsigned int ui) {
            return (double) ui;
        }
        double ulong_to_double(unsigned long ul) {
            return (double) ul;
        }
        int main(void) {
            if (uint_to_double(1000u) != 1000.0) {
                return 1;
            }
            if (uint_to_double(4294967200u) != 4294967200.0) {
                return 2;
            }
            if (ulong_to_double(138512825844ul) != 138512825844.0) {
                return 3;
            }
            if (ulong_to_double(10223372036854775816ul) != 10223372036854775808.0) {
                return 4;
            }
            if (ulong_to_double(9223372036854776832ul) != 9223372036854775808.0) {
                return 5;
            }
            if (ulong_to_double(9223372036854776833ul) != 9223372036854777856.0) {
                return 6;
            }
            if (ulong_to_double(9223372036854776831ul) != 9223372036854775808.0) {
                return 7;
            }
            if (ulong_to_double(9223372036854776830ul) != 9223372036854775808.0) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function uint_to_double(ui.0) { 
            tmp.0 = uint_to_double ui.0
            return tmp.0
            return 0
        }
        global function ulong_to_double(ul.1) { 
            tmp.1 = uint_to_double ul.1
            return tmp.1
            return 0
        }
        global function main() { 
            tmp.2 = uint_to_double(1000U)
            tmp.3 = tmp.2 != 1000D
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = uint_to_double(4294967200U)
            tmp.5 = tmp.4 != 4294967200D
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            tmp.6 = ulong_to_double(138512825844UL)
            tmp.7 = tmp.6 != 138512825844D
            if !tmp.7 jump end_if_4
            return 3
        
          end_if_4:
            tmp.8 = ulong_to_double(10223372036854775816UL)
            tmp.9 = tmp.8 != 10223372036854776000D
            if !tmp.9 jump end_if_6
            return 4
        
          end_if_6:
            tmp.10 = ulong_to_double(9223372036854776832UL)
            tmp.11 = tmp.10 != 9223372036854776000D
            if !tmp.11 jump end_if_8
            return 5
        
          end_if_8:
            tmp.12 = ulong_to_double(9223372036854776833UL)
            tmp.13 = tmp.12 != 9223372036854778000D
            if !tmp.13 jump end_if_10
            return 6
        
          end_if_10:
            tmp.14 = ulong_to_double(9223372036854776831UL)
            tmp.15 = tmp.14 != 9223372036854776000D
            if !tmp.15 jump end_if_12
            return 7
        
          end_if_12:
            tmp.16 = ulong_to_double(9223372036854776830UL)
            tmp.17 = tmp.16 != 9223372036854776000D
            if !tmp.17 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_extra_credit_compound_assign() {
    let src = r#"
        
        int main(void) {
            double d = 10.0;
            d /= 4.0;
            if (d != 2.5) {
                return 1;
            }
            d *= 10000.0;
            if (d != 25000.0) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            d.0 = 10D
            tmp.0 = d.0 / 4D
            d.0 = tmp.0
            tmp.1 = d.0 != 2.5D
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = d.0 * 10000D
            d.0 = tmp.2
            tmp.3 = d.0 != 25000D
            if !tmp.3 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_extra_credit_compound_assign_implicit_cast() {
    let src = r#"
        int main(void) {
            double d = 1000.5;
            d += 1000;
            if (d != 2000.5) {
                return 1;
            }
            unsigned long ul = 18446744073709551586ul;
            ul -= 1.5E19;
            if (ul != 3446744073709551616ul) {
                return 2;
            }
            int i = 10;
            i += 0.99999;
            if (i != 10) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            d.0 = 1000.5D
            tmp.1 = int_to_double 1000
            tmp.0 = d.0 + tmp.1
            d.0 = tmp.0
            tmp.2 = d.0 != 2000.5D
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            ul.1 = 18446744073709551586UL
            tmp.3 = uint_to_double ul.1
            tmp.4 = tmp.3 - 15000000000000000000D
            tmp.5 = double_to_uint tmp.4
            ul.1 = tmp.5
            tmp.6 = double_to_uint tmp.5
            tmp.7 = ul.1 != 3446744073709551616UL
            if !tmp.7 jump end_if_2
            return 2
        
          end_if_2:
            i.2 = 10
            tmp.8 = int_to_double i.2
            tmp.9 = tmp.8 + 0.99999D
            tmp.10 = double_to_int tmp.9
            i.2 = tmp.10
            tmp.11 = double_to_int tmp.10
            tmp.12 = i.2 != 10
            if !tmp.12 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_extra_credit_incr_and_decr() {
    let src = r#"
        
        int main(void) {
            static double d = 0.75;
            if (d++ != 0.75) {
                return 1;
            }
            if (d != 1.75) {
                return 2;
            }
            d = -100.2;
            if (++d != -99.2) {
                return 3;
            }
            if (d != -99.2) {
                return 4;
            }
            if (d-- != -99.2) {
                return 5;
            }
            if (d != -100.2) {
                return 6;
            }
            if (--d != -101.2) {
                return 7;
            }
            if (d != -101.2) {
                return 8;
            }
            d = 0.000000000000000000001;
            d++;
            if (d != 1.0) {
                return 9;
            }
            d = 10e20;
            d--;
            if (d != 10e20) {
                return 10;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = d.0
            tmp.1 = inc d.0
            d.0 = tmp.1
            tmp.2 = tmp.0 != 0.75D
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.3 = d.0 != 1.75D
            if !tmp.3 jump end_if_2
            return 2
        
          end_if_2:
            tmp.4 = - 100.2D
            d.0 = tmp.4
            tmp.5 = inc d.0
            d.0 = tmp.5
            tmp.7 = - 99.2D
            tmp.6 = tmp.5 != tmp.7
            if !tmp.6 jump end_if_4
            return 3
        
          end_if_4:
            tmp.9 = - 99.2D
            tmp.8 = d.0 != tmp.9
            if !tmp.8 jump end_if_6
            return 4
        
          end_if_6:
            tmp.10 = d.0
            tmp.11 = dec d.0
            d.0 = tmp.11
            tmp.13 = - 99.2D
            tmp.12 = tmp.10 != tmp.13
            if !tmp.12 jump end_if_8
            return 5
        
          end_if_8:
            tmp.15 = - 100.2D
            tmp.14 = d.0 != tmp.15
            if !tmp.14 jump end_if_10
            return 6
        
          end_if_10:
            tmp.16 = dec d.0
            d.0 = tmp.16
            tmp.18 = - 101.2D
            tmp.17 = tmp.16 != tmp.18
            if !tmp.17 jump end_if_12
            return 7
        
          end_if_12:
            tmp.20 = - 101.2D
            tmp.19 = d.0 != tmp.20
            if !tmp.19 jump end_if_14
            return 8
        
          end_if_14:
            d.0 = 0.000000000000000000001D
            tmp.21 = d.0
            tmp.22 = inc d.0
            d.0 = tmp.22
            tmp.23 = d.0 != 1D
            if !tmp.23 jump end_if_16
            return 9
        
          end_if_16:
            d.0 = 1000000000000000000000D
            tmp.24 = d.0
            tmp.25 = dec d.0
            d.0 = tmp.25
            tmp.26 = d.0 != 1000000000000000000000D
            if !tmp.26 jump end_if_18
            return 10
        
          end_if_18:
            return 0
            return 0
        }
        static d.0: Double = 0.75D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_extra_credit_nan() {
    let src = r#"
        int double_isnan(double d);
        int main(void) {
            static double zero = 0.0;
            double nan = 0.0 / zero;
            if (nan < 0.0 || nan == 0.0 || nan > 0.0 || nan <= 0.0 || nan >= 0.0)
                return 1;
            if (1 < nan || 1 == nan || 1 > nan || 1 <= nan || 1 >= nan)
                return 2;
            if (nan == nan)
                return 3;
            if (!(nan != nan)) {
                return 4;
            }
            if (!double_isnan(nan)) {
                return 5;
            }
            if (!double_isnan(4 * nan)) {
                return 6;
            }
            if (!double_isnan(22e2 / nan)) {
                return 7;
            }
            if (!double_isnan(-nan)) {
                return 8;
            }
            if (!nan) {
                return 9;
            }
            if (nan) {
            } else {
                return 10;
            }
            int nan_is_nonzero;
            for (nan_is_nonzero = 0; nan;) {
                nan_is_nonzero = 1;
                break;
            }
            if (!nan_is_nonzero) {
                return 11;
            }
            nan_is_nonzero = 0;
            while (nan) {
                nan_is_nonzero = 1;
                break;
            }
            if (!nan_is_nonzero) {
                return 12;
            }
            nan_is_nonzero = -1;
            do {
                nan_is_nonzero = nan_is_nonzero + 1;
                if (nan_is_nonzero) {
                    break;
                }
            } while (nan);
            if (!nan_is_nonzero) {
                return 13;
            }
            nan_is_nonzero = nan ? 1 : 0;
            if (!nan_is_nonzero) {
                return 14;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 0D / zero.1
            nan.2 = tmp.0
            tmp.1 = nan.2 < 0D
            if tmp.1 jump or_true_0
            tmp.4 = nan.2 == 0D
            if tmp.4 jump or_true_0
            tmp.3 = 0
            jump or_end_1
        
          or_true_0:
            tmp.3 = 1
        
          or_end_1:
            if tmp.3 jump or_true_2
            tmp.7 = nan.2 > 0D
            if tmp.7 jump or_true_2
            tmp.6 = 0
            jump or_end_3
        
          or_true_2:
            tmp.6 = 1
        
          or_end_3:
            if tmp.6 jump or_true_4
            tmp.10 = nan.2 <= 0D
            if tmp.10 jump or_true_4
            tmp.9 = 0
            jump or_end_5
        
          or_true_4:
            tmp.9 = 1
        
          or_end_5:
            if tmp.9 jump or_true_6
            tmp.13 = nan.2 >= 0D
            if tmp.13 jump or_true_6
            tmp.12 = 0
            jump or_end_7
        
          or_true_6:
            tmp.12 = 1
        
          or_end_7:
            if !tmp.12 jump end_if_8
            return 1
        
          end_if_8:
            tmp.14 = int_to_double 1
            tmp.15 = tmp.14 < nan.2
            if tmp.15 jump or_true_10
            tmp.18 = int_to_double 1
            tmp.19 = tmp.18 == nan.2
            if tmp.19 jump or_true_10
            tmp.17 = 0
            jump or_end_11
        
          or_true_10:
            tmp.17 = 1
        
          or_end_11:
            if tmp.17 jump or_true_12
            tmp.22 = int_to_double 1
            tmp.23 = tmp.22 > nan.2
            if tmp.23 jump or_true_12
            tmp.21 = 0
            jump or_end_13
        
          or_true_12:
            tmp.21 = 1
        
          or_end_13:
            if tmp.21 jump or_true_14
            tmp.26 = int_to_double 1
            tmp.27 = tmp.26 <= nan.2
            if tmp.27 jump or_true_14
            tmp.25 = 0
            jump or_end_15
        
          or_true_14:
            tmp.25 = 1
        
          or_end_15:
            if tmp.25 jump or_true_16
            tmp.30 = int_to_double 1
            tmp.31 = tmp.30 >= nan.2
            if tmp.31 jump or_true_16
            tmp.29 = 0
            jump or_end_17
        
          or_true_16:
            tmp.29 = 1
        
          or_end_17:
            if !tmp.29 jump end_if_18
            return 2
        
          end_if_18:
            tmp.32 = nan.2 == nan.2
            if !tmp.32 jump end_if_20
            return 3
        
          end_if_20:
            tmp.33 = nan.2 != nan.2
            tmp.34 = ! tmp.33
            if !tmp.34 jump end_if_22
            return 4
        
          end_if_22:
            tmp.35 = double_isnan(nan.2)
            tmp.36 = ! tmp.35
            if !tmp.36 jump end_if_24
            return 5
        
          end_if_24:
            tmp.37 = int_to_double 4
            tmp.38 = tmp.37 * nan.2
            tmp.39 = double_isnan(tmp.38)
            tmp.40 = ! tmp.39
            if !tmp.40 jump end_if_26
            return 6
        
          end_if_26:
            tmp.41 = 2200D / nan.2
            tmp.42 = double_isnan(tmp.41)
            tmp.43 = ! tmp.42
            if !tmp.43 jump end_if_28
            return 7
        
          end_if_28:
            tmp.44 = - nan.2
            tmp.45 = double_isnan(tmp.44)
            tmp.46 = ! tmp.45
            if !tmp.46 jump end_if_30
            return 8
        
          end_if_30:
            tmp.47 = ! nan.2
            if !tmp.47 jump end_if_32
            return 9
        
          end_if_32:
            tmp.48 = nan.2 != 0D
            if !tmp.48 jump else_35
            jump end_if_34
        
          else_35:
            return 10
        
          end_if_34:
            nan_is_nonzero.3 = 0
        
          start_loop_0:
            tmp.49 = nan.2 != 0D
            if !tmp.49 jump break_loop_0
            nan_is_nonzero.3 = 1
            jump break_loop_0
        
          continue_loop_0:
            jump start_loop_0
        
          break_loop_0:
            tmp.50 = ! nan_is_nonzero.3
            if !tmp.50 jump end_if_36
            return 11
        
          end_if_36:
            nan_is_nonzero.3 = 0
        
          continue_loop_1:
            tmp.51 = nan.2 != 0D
            if !tmp.51 jump break_loop_1
            nan_is_nonzero.3 = 1
            jump break_loop_1
            jump continue_loop_1
        
          break_loop_1:
            tmp.52 = ! nan_is_nonzero.3
            if !tmp.52 jump end_if_38
            return 12
        
          end_if_38:
            tmp.53 = - 1
            nan_is_nonzero.3 = tmp.53
        
          start_loop_2:
            tmp.54 = nan_is_nonzero.3 + 1
            nan_is_nonzero.3 = tmp.54
            if !nan_is_nonzero.3 jump end_if_40
            jump break_loop_2
        
          end_if_40:
        
          continue_loop_2:
            tmp.55 = nan.2 != 0D
            if tmp.55 jump start_loop_2
        
          break_loop_2:
            tmp.56 = ! nan_is_nonzero.3
            if !tmp.56 jump end_if_42
            return 13
        
          end_if_42:
            tmp.57 = nan.2 != 0D
            if !tmp.57 jump else_45
            tmp.58 = 1
            jump end_if_44
        
          else_45:
            tmp.58 = 0
        
          end_if_44:
            nan_is_nonzero.3 = tmp.58
            tmp.59 = ! nan_is_nonzero.3
            if !tmp.59 jump end_if_46
            return 14
        
          end_if_46:
            return 0
            return 0
        }
        static zero.1: Double = 0D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_extra_credit_nan_compound_assign() {
    let src = r#"
        int double_isnan(double d);
        int main(void) {
            static double zero = 0.0;
            double nan = 0.0 / zero;
            if (!double_isnan(nan += 99.2)) {
                return 1;
            }
            if (!double_isnan(nan -= nan)) {
                return 2;
            }
            if (!double_isnan(nan *= 4.0)) {
                return 3;
            }
            if (!double_isnan(nan /= 0.0)) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 0D / zero.1
            nan.2 = tmp.0
            tmp.1 = nan.2 + 99.2D
            nan.2 = tmp.1
            tmp.2 = double_isnan(tmp.1)
            tmp.3 = ! tmp.2
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = nan.2 - nan.2
            nan.2 = tmp.4
            tmp.5 = double_isnan(tmp.4)
            tmp.6 = ! tmp.5
            if !tmp.6 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = nan.2 * 4D
            nan.2 = tmp.7
            tmp.8 = double_isnan(tmp.7)
            tmp.9 = ! tmp.8
            if !tmp.9 jump end_if_4
            return 3
        
          end_if_4:
            tmp.10 = nan.2 / 0D
            nan.2 = tmp.10
            tmp.11 = double_isnan(tmp.10)
            tmp.12 = ! tmp.11
            if !tmp.12 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        static zero.1: Double = 0D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_extra_credit_nan_incr_and_decr() {
    let src = r#"
        int double_isnan(double d);
        int main(void) {
            static double zero = 0.0;
            double nan = 0.0 / zero;
            if (!double_isnan(++nan)) {
                return 1;
            }
            if (!double_isnan(--nan)) {
                return 2;
            }
            if (!double_isnan(nan++)) {
                return 3;
            }
            if (!double_isnan(nan--)) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 0D / zero.1
            nan.2 = tmp.0
            tmp.1 = inc nan.2
            nan.2 = tmp.1
            tmp.2 = double_isnan(tmp.1)
            tmp.3 = ! tmp.2
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = dec nan.2
            nan.2 = tmp.4
            tmp.5 = double_isnan(tmp.4)
            tmp.6 = ! tmp.5
            if !tmp.6 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = nan.2
            tmp.8 = inc nan.2
            nan.2 = tmp.8
            tmp.9 = double_isnan(tmp.7)
            tmp.10 = ! tmp.9
            if !tmp.10 jump end_if_4
            return 3
        
          end_if_4:
            tmp.11 = nan.2
            tmp.12 = dec nan.2
            nan.2 = tmp.12
            tmp.13 = double_isnan(tmp.11)
            tmp.14 = ! tmp.13
            if !tmp.14 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        static zero.1: Double = 0D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_floating_expressions_arithmetic_ops() {
    let src = r#"
        double point_one = 0.1;
        double point_two = 0.2;
        double point_three = 0.3;
        double two = 2.0;
        double three = 3.0;
        double four = 4.0;
        double twelveE30 = 12e30;
        int addition(void) {
            return (point_one + point_two == 0.30000000000000004);
        }
        int subtraction(void) {
            return (four - 1.0 == 3.0);
        }
        int multiplication(void) {
            return (0.01 * point_three == 0.003);
        }
        int division(void) {
            return (7.0 / two == 3.5);
        }
        int negation(void) {
            double neg = -twelveE30;
            return !(12e30 + neg);
        }
        int complex_expression(void) {
            double complex_expression = (two + three) - 127.5 * four;
            return complex_expression == -505.0;
        }
        int main(void) {
            if (!addition()) {
                return 1;
            }
            if (!subtraction()){
                return 2;
            }
            if (!multiplication()) {
                return 3;
            }
            if (!division()) {
                return 4;
            }
            if (!negation()) {
                return 5;
            }
            if (!complex_expression()) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function addition() { 
            tmp.0 = point_one + point_two
            tmp.1 = tmp.0 == 0.30000000000000004D
            return tmp.1
            return 0
        }
        global function subtraction() { 
            tmp.2 = four - 1D
            tmp.3 = tmp.2 == 3D
            return tmp.3
            return 0
        }
        global function multiplication() { 
            tmp.4 = 0.01D * point_three
            tmp.5 = tmp.4 == 0.003D
            return tmp.5
            return 0
        }
        global function division() { 
            tmp.6 = 7D / two
            tmp.7 = tmp.6 == 3.5D
            return tmp.7
            return 0
        }
        global function negation() { 
            tmp.8 = - twelveE30
            neg.0 = tmp.8
            tmp.9 = 12000000000000000000000000000000D + neg.0
            tmp.10 = ! tmp.9
            return tmp.10
            return 0
        }
        global function complex_expression() { 
            tmp.11 = two + three
            tmp.13 = 127.5D * four
            tmp.12 = tmp.11 - tmp.13
            complex_expression.1 = tmp.12
            tmp.15 = - 505D
            tmp.14 = complex_expression.1 == tmp.15
            return tmp.14
            return 0
        }
        global function main() { 
            tmp.16 = addition()
            tmp.17 = ! tmp.16
            if !tmp.17 jump end_if_0
            return 1
        
          end_if_0:
            tmp.18 = subtraction()
            tmp.19 = ! tmp.18
            if !tmp.19 jump end_if_2
            return 2
        
          end_if_2:
            tmp.20 = multiplication()
            tmp.21 = ! tmp.20
            if !tmp.21 jump end_if_4
            return 3
        
          end_if_4:
            tmp.22 = division()
            tmp.23 = ! tmp.22
            if !tmp.23 jump end_if_6
            return 4
        
          end_if_6:
            tmp.24 = negation()
            tmp.25 = ! tmp.24
            if !tmp.25 jump end_if_8
            return 5
        
          end_if_8:
            tmp.26 = complex_expression()
            tmp.27 = ! tmp.26
            if !tmp.27 jump end_if_10
            return 5
        
          end_if_10:
            return 0
            return 0
        }
        static global four: Double = 4D
        static global point_one: Double = 0.1D
        static global point_three: Double = 0.3D
        static global point_two: Double = 0.2D
        static global three: Double = 3D
        static global twelveE30: Double = 12000000000000000000000000000000D
        static global two: Double = 2D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_floating_expressions_comparisons() {
    let src = r#"
        double fifty_fiveE5 = 55e5;
        double fifty_fourE4 = 54e4;
        double tiny = .00004;
        double four = 4.;
        double point_one = 0.1;
        int main(void) {
            if (fifty_fiveE5 < fifty_fourE4) {
                return 1;
            }
            if (four > 4.0) {
                return 2;
            }
            if (tiny <= 0.0) {
                return 3;
            }
            if (fifty_fourE4 >= fifty_fiveE5) {
                return 4;
            }
            if (tiny == 0.0) {
                return 5;
            }
            if (point_one != point_one) {
                return 6;
            }
            if (!(tiny > 00.000005)) {
                return 7;
            }
            if (!(-.00004 < four)) {
                return 8;
            }
            if (!(tiny <= tiny)) {
                return 9;
            }
            if (!(fifty_fiveE5 >= fifty_fiveE5)) {
                return 10;
            }
            if (!(0.1 == point_one)) {
                return 11;
            }
            if (!(tiny != .00003)) {
                return 12;
            }
            if (0.00003 < 0.000000000003) {
                return 13;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = fifty_fiveE5 < fifty_fourE4
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = four > 4D
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            tmp.2 = tiny <= 0D
            if !tmp.2 jump end_if_4
            return 3
        
          end_if_4:
            tmp.3 = fifty_fourE4 >= fifty_fiveE5
            if !tmp.3 jump end_if_6
            return 4
        
          end_if_6:
            tmp.4 = tiny == 0D
            if !tmp.4 jump end_if_8
            return 5
        
          end_if_8:
            tmp.5 = point_one != point_one
            if !tmp.5 jump end_if_10
            return 6
        
          end_if_10:
            tmp.6 = tiny > 0.000005D
            tmp.7 = ! tmp.6
            if !tmp.7 jump end_if_12
            return 7
        
          end_if_12:
            tmp.8 = - 0.00004D
            tmp.9 = tmp.8 < four
            tmp.10 = ! tmp.9
            if !tmp.10 jump end_if_14
            return 8
        
          end_if_14:
            tmp.11 = tiny <= tiny
            tmp.12 = ! tmp.11
            if !tmp.12 jump end_if_16
            return 9
        
          end_if_16:
            tmp.13 = fifty_fiveE5 >= fifty_fiveE5
            tmp.14 = ! tmp.13
            if !tmp.14 jump end_if_18
            return 10
        
          end_if_18:
            tmp.15 = 0.1D == point_one
            tmp.16 = ! tmp.15
            if !tmp.16 jump end_if_20
            return 11
        
          end_if_20:
            tmp.17 = tiny != 0.00003D
            tmp.18 = ! tmp.17
            if !tmp.18 jump end_if_22
            return 12
        
          end_if_22:
            tmp.19 = 0.00003D < 0.000000000003D
            if !tmp.19 jump end_if_24
            return 13
        
          end_if_24:
            return 0
            return 0
        }
        static global fifty_fiveE5: Double = 5500000D
        static global fifty_fourE4: Double = 540000D
        static global four: Double = 4D
        static global point_one: Double = 0.1D
        static global tiny: Double = 0.00004D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_floating_expressions_logical() {
    let src = r#"
        double zero = 0.0;
        double non_zero = 1E-20;
        double one = 1.0;
        double rounded_to_zero = 1e-330;
        int main(void) {
            if (zero) {
                return 1;
            }
            if (rounded_to_zero) {
                return 2;
            }
            if (non_zero) {
            } else {
                return 3;
            }
            if (0.e10) {
                return 4;
            }
            if (!non_zero) {
                return 4;
            }
            if (!(!zero)) {
                return 5;
            }
            if (!(!rounded_to_zero)) {
                return 6;
            }
            if (!(non_zero && 1.0)) {
                return 8;
            }
            if (3.0 && zero) {
                return 8;
            }
            if (rounded_to_zero && 1000e10) {
                return 9;
            }
            if (18446744073709551615UL && zero) {
                return 10;
            }
            if (!(non_zero && 5l)) {
                return 11;
            }
            if (!(5.0 || zero)) {
                return 12;
            }
            if (zero || rounded_to_zero) {
                return 13;
            }
            if (!(rounded_to_zero || 0.0001)) {
                return 14;
            }
            if (!(non_zero || 0u)) {
                return 15;
            }
            if (!(0 || 0.0000005)) {
                return 16;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = zero != 0D
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = rounded_to_zero != 0D
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            tmp.2 = non_zero != 0D
            if !tmp.2 jump else_5
            jump end_if_4
        
          else_5:
            return 3
        
          end_if_4:
            tmp.3 = 0D != 0D
            if !tmp.3 jump end_if_6
            return 4
        
          end_if_6:
            tmp.4 = ! non_zero
            if !tmp.4 jump end_if_8
            return 4
        
          end_if_8:
            tmp.5 = ! zero
            tmp.6 = ! tmp.5
            if !tmp.6 jump end_if_10
            return 5
        
          end_if_10:
            tmp.7 = ! rounded_to_zero
            tmp.8 = ! tmp.7
            if !tmp.8 jump end_if_12
            return 6
        
          end_if_12:
            if !non_zero jump and_false_14
            if !1D jump and_false_14
            tmp.10 = 1
            jump and_end_15
        
          and_false_14:
            tmp.10 = 0
        
          and_end_15:
            tmp.11 = ! tmp.10
            if !tmp.11 jump end_if_16
            return 8
        
          end_if_16:
            if !3D jump and_false_18
            if !zero jump and_false_18
            tmp.13 = 1
            jump and_end_19
        
          and_false_18:
            tmp.13 = 0
        
          and_end_19:
            if !tmp.13 jump end_if_20
            return 8
        
          end_if_20:
            if !rounded_to_zero jump and_false_22
            if !10000000000000D jump and_false_22
            tmp.15 = 1
            jump and_end_23
        
          and_false_22:
            tmp.15 = 0
        
          and_end_23:
            if !tmp.15 jump end_if_24
            return 9
        
          end_if_24:
            if !18446744073709551615UL jump and_false_26
            if !zero jump and_false_26
            tmp.17 = 1
            jump and_end_27
        
          and_false_26:
            tmp.17 = 0
        
          and_end_27:
            if !tmp.17 jump end_if_28
            return 10
        
          end_if_28:
            if !non_zero jump and_false_30
            if !5L jump and_false_30
            tmp.19 = 1
            jump and_end_31
        
          and_false_30:
            tmp.19 = 0
        
          and_end_31:
            tmp.20 = ! tmp.19
            if !tmp.20 jump end_if_32
            return 11
        
          end_if_32:
            if 5D jump or_true_34
            if zero jump or_true_34
            tmp.22 = 0
            jump or_end_35
        
          or_true_34:
            tmp.22 = 1
        
          or_end_35:
            tmp.23 = ! tmp.22
            if !tmp.23 jump end_if_36
            return 12
        
          end_if_36:
            if zero jump or_true_38
            if rounded_to_zero jump or_true_38
            tmp.25 = 0
            jump or_end_39
        
          or_true_38:
            tmp.25 = 1
        
          or_end_39:
            if !tmp.25 jump end_if_40
            return 13
        
          end_if_40:
            if rounded_to_zero jump or_true_42
            if 0.0001D jump or_true_42
            tmp.27 = 0
            jump or_end_43
        
          or_true_42:
            tmp.27 = 1
        
          or_end_43:
            tmp.28 = ! tmp.27
            if !tmp.28 jump end_if_44
            return 14
        
          end_if_44:
            if non_zero jump or_true_46
            if 0U jump or_true_46
            tmp.30 = 0
            jump or_end_47
        
          or_true_46:
            tmp.30 = 1
        
          or_end_47:
            tmp.31 = ! tmp.30
            if !tmp.31 jump end_if_48
            return 15
        
          end_if_48:
            if 0 jump or_true_50
            if 0.0000005D jump or_true_50
            tmp.33 = 0
            jump or_end_51
        
          or_true_50:
            tmp.33 = 1
        
          or_end_51:
            tmp.34 = ! tmp.33
            if !tmp.34 jump end_if_52
            return 16
        
          end_if_52:
            return 0
            return 0
        }
        static global non_zero: Double = 0.00000000000000000001D
        static global one: Double = 1D
        static global rounded_to_zero: Double = 0D
        static global zero: Double = 0D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_floating_expressions_loop_controlling_expression() {
    let src = r#"
        int main(void) {
            int a = 0;
            for(double d = 100.0; d > 0.0; d = d - 1.0) {
                a = a + 1;
            }
            return a;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            d.1 = 100D
        
          start_loop_0:
            tmp.0 = d.1 > 0D
            if !tmp.0 jump break_loop_0
            tmp.1 = a.0 + 1
            a.0 = tmp.1
        
          continue_loop_0:
            tmp.2 = d.1 - 1D
            d.1 = tmp.2
            jump start_loop_0
        
          break_loop_0:
            return a.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_floating_expressions_simple() {
    let src = r#"
        
        int main(void) {
            double x = 2.0;
            return (x * 2.0 == 4.0);
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 2D
            tmp.0 = x.0 * 2D
            tmp.1 = tmp.0 == 4D
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_floating_expressions_static_initialized_double() {
    let src = r#"
        double return_static_variable(void) {
            static double d = 0.5;
            double ret = d;
            d = d + 1.0;
            return ret;
        }
        int main(void) {
            double d1 = return_static_variable();
            double d2 = return_static_variable();
            double d3 = return_static_variable();
            if (d1 != 0.5) {
                return 1;
            }
            if (d2 != 1.5) {
                return 2;
            }
            if (d3 != 2.5) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function return_static_variable() { 
            ret.1 = d.0
            tmp.0 = d.0 + 1D
            d.0 = tmp.0
            return ret.1
            return 0
        }
        global function main() { 
            tmp.1 = return_static_variable()
            d1.2 = tmp.1
            tmp.2 = return_static_variable()
            d2.3 = tmp.2
            tmp.3 = return_static_variable()
            d3.4 = tmp.3
            tmp.4 = d1.2 != 0.5D
            if !tmp.4 jump end_if_0
            return 1
        
          end_if_0:
            tmp.5 = d2.3 != 1.5D
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            tmp.6 = d3.4 != 2.5D
            if !tmp.6 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
        static d.0: Double = 0.5D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_double_and_int_parameters() {
    let src = r#"
        int check_arguments(double d1, double d2, int i1, double d3, double d4, int i2, int i3,
                            int i4, double d5, double d6, double d7, int i5, double d8) {
            if (d1 != 1.0) {
                return 1;
            }
            if (d2 != 2.0) {
                return 2;
            }
            if (d3 != 3.0) {
                return 3;
            }
            if (d4 != 4.0 ){
                return 4;
            }
            if (d5 != 5.0){
                return 5;
            }
            if (d6 != 6.0 ){
                return 6;
            }
            if (d7 != 7.0 ){
                return 7;
            }
            if (d8 != 8.0 ){
                return 8;
            }
            if (i1 != 101 ){
                return 9;
            }
            if (i2 != 102 ){
                return 10;
            }
            if (i3 != 103){
                return 11;
            }
            if (i4 != 104) {
                return 12;
            }
            if (i5 != 105) {
                return 13;
            }
            return 0;
        }
        int main(void) {
            return check_arguments(1.0, 2.0, 101, 3.0, 4.0, 102, 103, 104, 5.0, 6.0, 7.0, 105, 8.0);
        }
    "#;
    let expected = r#"
        global function check_arguments(d1.0, d2.1, i1.2, d3.3, d4.4, i2.5, i3.6, i4.7, d5.8, d6.9, d7.10, i5.11, d8.12) { 
            tmp.0 = d1.0 != 1D
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = d2.1 != 2D
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            tmp.2 = d3.3 != 3D
            if !tmp.2 jump end_if_4
            return 3
        
          end_if_4:
            tmp.3 = d4.4 != 4D
            if !tmp.3 jump end_if_6
            return 4
        
          end_if_6:
            tmp.4 = d5.8 != 5D
            if !tmp.4 jump end_if_8
            return 5
        
          end_if_8:
            tmp.5 = d6.9 != 6D
            if !tmp.5 jump end_if_10
            return 6
        
          end_if_10:
            tmp.6 = d7.10 != 7D
            if !tmp.6 jump end_if_12
            return 7
        
          end_if_12:
            tmp.7 = d8.12 != 8D
            if !tmp.7 jump end_if_14
            return 8
        
          end_if_14:
            tmp.8 = i1.2 != 101
            if !tmp.8 jump end_if_16
            return 9
        
          end_if_16:
            tmp.9 = i2.5 != 102
            if !tmp.9 jump end_if_18
            return 10
        
          end_if_18:
            tmp.10 = i3.6 != 103
            if !tmp.10 jump end_if_20
            return 11
        
          end_if_20:
            tmp.11 = i4.7 != 104
            if !tmp.11 jump end_if_22
            return 12
        
          end_if_22:
            tmp.12 = i5.11 != 105
            if !tmp.12 jump end_if_24
            return 13
        
          end_if_24:
            return 0
            return 0
        }
        global function main() { 
            tmp.13 = check_arguments(1D, 2D, 101, 3D, 4D, 102, 103, 104, 5D, 6D, 7D, 105, 8D)
            return tmp.13
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_double_and_int_params_recursive() {
    let src = r#"
        int fun(int i1, double d1, int i2, double d2, int i3, double d3,
                int i4, double d4, int i5, double d5, int i6, double d6,
                int i7, double d7, int i8, double d8, int i9, double d9) {
            if (i1 != d9) {
                int call1 = fun(i1 + 1, d1, i2 + 1, d2, i3 + 1, d3, i4 + 1, d4, i5 + 1, d5, i6 + 1, d6, i7 + 1, d7, i8 + 1, d8, i9 + 1, d9);
                int call2 = fun(i1, d1 - 1, i2, d2 - 1, i3, d3 - 1, i4, d4 - 1, i5, d5 - 1, i6, d6 - 1, i7, d7 - 1, i8, d8 - 1, i9, d9 - 1);
                if (call1) {
                    return call1;
                }
                if (call2) {
                    return call2;
                }
            }
            if (i2 != i1 + 2) {
                return 2;
            }
            if (i3 != i1 + 4) {
                return 3;
            }
            if (i4 != i1 + 6) {
                return 4;
            }
            if (i5 != i1 + 8) {
                return 5;
            }
            if (i6 != i1 + 10) {
                return 6;
            }
            if (i7 != i1 + 12) {
                return 7;
            }
            if (i8 != i1 + 14) {
                return 8;
            }
            if (i9 != i1 + 16) {
                return 9;
            }
            if (d1 != d9 - 16) {
                return 11;
            }
            if (d2 != d9 - 14) {
                return 12;
            }
            if (d3 != d9 - 12) {
                return 13;
            }
            if (d4 != d9 - 10) {
                return 14;
            }
            if (d5 != d9 - 8) {
                return 15;
            }
            if (d6 != d9 - 6) {
                return 16;
            }
            if (d7 != d9 - 4) {
                return 17;
            }
            if (d8 != d9 - 2) {
                return 18;
            }
            return 0;
        }
        int main(void) {
            return fun(1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9, 10.0, 11, 12.0, 13, 14.0, 15, 16.0, 17, 18.0);
        }
    "#;
    let expected = r#"
        global function fun(i1.0, d1.1, i2.2, d2.3, i3.4, d3.5, i4.6, d4.7, i5.8, d5.9, i6.10, d6.11, i7.12, d7.13, i8.14, d8.15, i9.16, d9.17) { 
            tmp.0 = int_to_double i1.0
            tmp.1 = tmp.0 != d9.17
            if !tmp.1 jump end_if_0
            tmp.2 = i1.0 + 1
            tmp.3 = i2.2 + 1
            tmp.4 = i3.4 + 1
            tmp.5 = i4.6 + 1
            tmp.6 = i5.8 + 1
            tmp.7 = i6.10 + 1
            tmp.8 = i7.12 + 1
            tmp.9 = i8.14 + 1
            tmp.10 = i9.16 + 1
            tmp.11 = fun(tmp.2, d1.1, tmp.3, d2.3, tmp.4, d3.5, tmp.5, d4.7, tmp.6, d5.9, tmp.7, d6.11, tmp.8, d7.13, tmp.9, d8.15, tmp.10, d9.17)
            call1.18 = tmp.11
            tmp.13 = int_to_double 1
            tmp.12 = d1.1 - tmp.13
            tmp.15 = int_to_double 1
            tmp.14 = d2.3 - tmp.15
            tmp.17 = int_to_double 1
            tmp.16 = d3.5 - tmp.17
            tmp.19 = int_to_double 1
            tmp.18 = d4.7 - tmp.19
            tmp.21 = int_to_double 1
            tmp.20 = d5.9 - tmp.21
            tmp.23 = int_to_double 1
            tmp.22 = d6.11 - tmp.23
            tmp.25 = int_to_double 1
            tmp.24 = d7.13 - tmp.25
            tmp.27 = int_to_double 1
            tmp.26 = d8.15 - tmp.27
            tmp.29 = int_to_double 1
            tmp.28 = d9.17 - tmp.29
            tmp.30 = fun(i1.0, tmp.12, i2.2, tmp.14, i3.4, tmp.16, i4.6, tmp.18, i5.8, tmp.20, i6.10, tmp.22, i7.12, tmp.24, i8.14, tmp.26, i9.16, tmp.28)
            call2.19 = tmp.30
            if !call1.18 jump end_if_2
            return call1.18
        
          end_if_2:
            if !call2.19 jump end_if_4
            return call2.19
        
          end_if_4:
        
          end_if_0:
            tmp.32 = i1.0 + 2
            tmp.31 = i2.2 != tmp.32
            if !tmp.31 jump end_if_6
            return 2
        
          end_if_6:
            tmp.34 = i1.0 + 4
            tmp.33 = i3.4 != tmp.34
            if !tmp.33 jump end_if_8
            return 3
        
          end_if_8:
            tmp.36 = i1.0 + 6
            tmp.35 = i4.6 != tmp.36
            if !tmp.35 jump end_if_10
            return 4
        
          end_if_10:
            tmp.38 = i1.0 + 8
            tmp.37 = i5.8 != tmp.38
            if !tmp.37 jump end_if_12
            return 5
        
          end_if_12:
            tmp.40 = i1.0 + 10
            tmp.39 = i6.10 != tmp.40
            if !tmp.39 jump end_if_14
            return 6
        
          end_if_14:
            tmp.42 = i1.0 + 12
            tmp.41 = i7.12 != tmp.42
            if !tmp.41 jump end_if_16
            return 7
        
          end_if_16:
            tmp.44 = i1.0 + 14
            tmp.43 = i8.14 != tmp.44
            if !tmp.43 jump end_if_18
            return 8
        
          end_if_18:
            tmp.46 = i1.0 + 16
            tmp.45 = i9.16 != tmp.46
            if !tmp.45 jump end_if_20
            return 9
        
          end_if_20:
            tmp.49 = int_to_double 16
            tmp.48 = d9.17 - tmp.49
            tmp.47 = d1.1 != tmp.48
            if !tmp.47 jump end_if_22
            return 11
        
          end_if_22:
            tmp.52 = int_to_double 14
            tmp.51 = d9.17 - tmp.52
            tmp.50 = d2.3 != tmp.51
            if !tmp.50 jump end_if_24
            return 12
        
          end_if_24:
            tmp.55 = int_to_double 12
            tmp.54 = d9.17 - tmp.55
            tmp.53 = d3.5 != tmp.54
            if !tmp.53 jump end_if_26
            return 13
        
          end_if_26:
            tmp.58 = int_to_double 10
            tmp.57 = d9.17 - tmp.58
            tmp.56 = d4.7 != tmp.57
            if !tmp.56 jump end_if_28
            return 14
        
          end_if_28:
            tmp.61 = int_to_double 8
            tmp.60 = d9.17 - tmp.61
            tmp.59 = d5.9 != tmp.60
            if !tmp.59 jump end_if_30
            return 15
        
          end_if_30:
            tmp.64 = int_to_double 6
            tmp.63 = d9.17 - tmp.64
            tmp.62 = d6.11 != tmp.63
            if !tmp.62 jump end_if_32
            return 16
        
          end_if_32:
            tmp.67 = int_to_double 4
            tmp.66 = d9.17 - tmp.67
            tmp.65 = d7.13 != tmp.66
            if !tmp.65 jump end_if_34
            return 17
        
          end_if_34:
            tmp.70 = int_to_double 2
            tmp.69 = d9.17 - tmp.70
            tmp.68 = d8.15 != tmp.69
            if !tmp.68 jump end_if_36
            return 18
        
          end_if_36:
            return 0
            return 0
        }
        global function main() { 
            tmp.71 = fun(1, 2D, 3, 4D, 5, 6D, 7, 8D, 9, 10D, 11, 12D, 13, 14D, 15, 16D, 17, 18D)
            return tmp.71
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_double_parameters() {
    let src = r#"
        
        int check_arguments(double a, double b, double c, double d, double e, double f, double g, double h);
        int main(void) {
            return check_arguments(1.0, 2.0, 3.0, 4.0, -1.0, -2.0, -3.0, -4.0);
        }
        int check_arguments(double a, double b, double c, double d, double e, double f, double g, double h) {
            if (a != 1.0) {
                return 1;
            }
            if (b != 2.0) {
                return 2;
            }
            if (c != 3.0) {
                return 3;
            }
            if (d != 4.0) {
                return 4;
            }
            if (e != -1.0) {
                return 5;
            }
            if (f != -2.0) {
                return 6;
            }
            if (g != -3.0) {
                return 7;
            }
            if (h != -4.0) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1D
            tmp.1 = - 2D
            tmp.2 = - 3D
            tmp.3 = - 4D
            tmp.4 = check_arguments(1D, 2D, 3D, 4D, tmp.0, tmp.1, tmp.2, tmp.3)
            return tmp.4
            return 0
        }
        global function check_arguments(a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15) { 
            tmp.5 = a.8 != 1D
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = b.9 != 2D
            if !tmp.6 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = c.10 != 3D
            if !tmp.7 jump end_if_4
            return 3
        
          end_if_4:
            tmp.8 = d.11 != 4D
            if !tmp.8 jump end_if_6
            return 4
        
          end_if_6:
            tmp.10 = - 1D
            tmp.9 = e.12 != tmp.10
            if !tmp.9 jump end_if_8
            return 5
        
          end_if_8:
            tmp.12 = - 2D
            tmp.11 = f.13 != tmp.12
            if !tmp.11 jump end_if_10
            return 6
        
          end_if_10:
            tmp.14 = - 3D
            tmp.13 = g.14 != tmp.14
            if !tmp.13 jump end_if_12
            return 7
        
          end_if_12:
            tmp.16 = - 4D
            tmp.15 = h.15 != tmp.16
            if !tmp.15 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_push_xmm() {
    let src = r#"
        int callee(double a, double b, double c, double d, double e, double f, double g,
                   double h, double i, double j, double k) {
            if (a != 0.) {
                return 1;
            }
            if (b != 1.) {
                return 2;
            }
            if (c != 2.) {
                return 3;
            }
            if (d != 3.) {
                return 4;
            }
            if (e != 4.) {
                return 5;
            }
            if (f != 5.) {
                return 6;
            }
            if (g != 6.) {
                return 7;
            }
            if (h != 7.) {
                return 8;
            }
            if (i != 8.) {
                return 9;
            }
            if (j != 9.) {
                return 10;
            }
            if (k != 10.) {
                return 11;
            }
            return 0;
        }
        int target(int a, int b, int c, int d, int e) {
            return callee(0., 1., 2., 3., 4., 5., e + 1., d + 3., c + 5., b + 7.,
                          a + 9.);
        }
        int main(void) {
            return target(1, 2, 3, 4, 5);
        }
    "#;
    let expected = r#"
        global function callee(a.0, b.1, c.2, d.3, e.4, f.5, g.6, h.7, i.8, j.9, k.10) { 
            tmp.0 = a.0 != 0D
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = b.1 != 1D
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            tmp.2 = c.2 != 2D
            if !tmp.2 jump end_if_4
            return 3
        
          end_if_4:
            tmp.3 = d.3 != 3D
            if !tmp.3 jump end_if_6
            return 4
        
          end_if_6:
            tmp.4 = e.4 != 4D
            if !tmp.4 jump end_if_8
            return 5
        
          end_if_8:
            tmp.5 = f.5 != 5D
            if !tmp.5 jump end_if_10
            return 6
        
          end_if_10:
            tmp.6 = g.6 != 6D
            if !tmp.6 jump end_if_12
            return 7
        
          end_if_12:
            tmp.7 = h.7 != 7D
            if !tmp.7 jump end_if_14
            return 8
        
          end_if_14:
            tmp.8 = i.8 != 8D
            if !tmp.8 jump end_if_16
            return 9
        
          end_if_16:
            tmp.9 = j.9 != 9D
            if !tmp.9 jump end_if_18
            return 10
        
          end_if_18:
            tmp.10 = k.10 != 10D
            if !tmp.10 jump end_if_20
            return 11
        
          end_if_20:
            return 0
            return 0
        }
        global function target(a.11, b.12, c.13, d.14, e.15) { 
            tmp.11 = int_to_double e.15
            tmp.12 = tmp.11 + 1D
            tmp.13 = int_to_double d.14
            tmp.14 = tmp.13 + 3D
            tmp.15 = int_to_double c.13
            tmp.16 = tmp.15 + 5D
            tmp.17 = int_to_double b.12
            tmp.18 = tmp.17 + 7D
            tmp.19 = int_to_double a.11
            tmp.20 = tmp.19 + 9D
            tmp.21 = callee(0D, 1D, 2D, 3D, 4D, 5D, tmp.12, tmp.14, tmp.16, tmp.18, tmp.20)
            return tmp.21
            return 0
        }
        global function main() { 
            tmp.22 = target(1, 2, 3, 4, 5)
            return tmp.22
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_return_double() {
    let src = r#"
        
        double d(void) {
            return 1234.e75;
        }
        int main(void) {
            double retval = d();
            return retval == 1234.e75;
        }
    "#;
    let expected = r#"
        global function d() { 
            return 1234000000000000000000000000000000000000000000000000000000000000000000000000000D
            return 0
        }
        global function main() { 
            tmp.0 = d()
            retval.0 = tmp.0
            tmp.1 = retval.0 == 1234000000000000000000000000000000000000000000000000000000000000000000000000000D
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_standard_library_call() {
    let src = r#"
        double fma(double x, double y, double z);
        double ldexp(double x, int exp);
        int main(void) {
            double fma_result = fma(5.0, 1E22, 4000000.0);
            double ldexp_result = ldexp(92E73, 5);
            if (fma_result != 50000000000000004194304.0) {
                return 1;
            }
            if (ldexp_result != 2.944E76) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = fma(5D, 10000000000000000000000D, 4000000D)
            fma_result.5 = tmp.0
            tmp.1 = ldexp(920000000000000000000000000000000000000000000000000000000000000000000000000D, 5)
            ldexp_result.6 = tmp.1
            tmp.2 = fma_result.5 != 50000000000000004000000D
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.3 = ldexp_result.6 != 29440000000000000000000000000000000000000000000000000000000000000000000000000D
            if !tmp.3 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_use_arg_after_fun_call() {
    let src = r#"
        double fun(double x) {
            if (x > 2)
                return x;
            else {
                double ret = fun(x + 2);
                return ret + x;
            }
        }
        int main(void) {
            return fun(1.0);
        }
    "#;
    let expected = r#"
        global function fun(x.0) { 
            tmp.1 = int_to_double 2
            tmp.0 = x.0 > tmp.1
            if !tmp.0 jump else_1
            return x.0
            jump end_if_0
        
          else_1:
            tmp.3 = int_to_double 2
            tmp.2 = x.0 + tmp.3
            tmp.4 = fun(tmp.2)
            ret.1 = tmp.4
            tmp.5 = ret.1 + x.0
            return tmp.5
        
          end_if_0:
            return 0
        }
        global function main() { 
            tmp.6 = fun(1D)
            tmp.7 = double_to_int tmp.6
            return tmp.7
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_implicit_casts_common_type() {
    let src = r#"
        int lt(double d, long l) {
            return d < l;
        }
        double tern_double_flag(double flag) {
            return (double) (flag ? -30 : 10ul);
        }
        double tern_double_result(int flag) {
            return flag ? 5.0 : 9223372036854777850ul;
        }
        int ten = 10;
        int multiply(void) {
            int i = 10.75 * ten;
            return i == 107;
        }
        int main(void) {
            if (lt(-9007199254751228.0, -9007199254751227l)) {
                return 1;
            }
            if (tern_double_flag(20.0) != 18446744073709551586.0) {
                return 2;
            }
            if (tern_double_flag(0.0) != 10.0) {
                return 3;
            }
            if (tern_double_result(1) != 5.0) {
                return 4;
            }
            if (tern_double_result(0) != 9223372036854777856.0) {
                return 5;
            }
            if (!multiply()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function lt(d.0, l.1) { 
            tmp.1 = int_to_double l.1
            tmp.0 = d.0 < tmp.1
            return tmp.0
            return 0
        }
        global function tern_double_flag(flag.2) { 
            tmp.2 = flag.2 != 0D
            if !tmp.2 jump else_1
            tmp.4 = - 30
            tmp.5 = sign_extend tmp.4
            tmp.3 = tmp.5
            jump end_if_0
        
          else_1:
            tmp.3 = 10UL
        
          end_if_0:
            tmp.6 = uint_to_double tmp.3
            return tmp.6
            return 0
        }
        global function tern_double_result(flag.3) { 
            if !flag.3 jump else_3
            tmp.7 = 5D
            jump end_if_2
        
          else_3:
            tmp.8 = uint_to_double 9223372036854777850UL
            tmp.7 = tmp.8
        
          end_if_2:
            return tmp.7
            return 0
        }
        global function multiply() { 
            tmp.10 = int_to_double ten
            tmp.9 = 10.75D * tmp.10
            tmp.11 = double_to_int tmp.9
            i.4 = tmp.11
            tmp.12 = i.4 == 107
            return tmp.12
            return 0
        }
        global function main() { 
            tmp.13 = - 9007199254751228D
            tmp.14 = - 9007199254751227L
            tmp.15 = lt(tmp.13, tmp.14)
            if !tmp.15 jump end_if_4
            return 1
        
          end_if_4:
            tmp.16 = tern_double_flag(20D)
            tmp.17 = tmp.16 != 18446744073709552000D
            if !tmp.17 jump end_if_6
            return 2
        
          end_if_6:
            tmp.18 = tern_double_flag(0D)
            tmp.19 = tmp.18 != 10D
            if !tmp.19 jump end_if_8
            return 3
        
          end_if_8:
            tmp.20 = tern_double_result(1)
            tmp.21 = tmp.20 != 5D
            if !tmp.21 jump end_if_10
            return 4
        
          end_if_10:
            tmp.22 = tern_double_result(0)
            tmp.23 = tmp.22 != 9223372036854778000D
            if !tmp.23 jump end_if_12
            return 5
        
          end_if_12:
            tmp.24 = multiply()
            tmp.25 = ! tmp.24
            if !tmp.25 jump end_if_14
            return 6
        
          end_if_14:
            return 0
            return 0
        }
        static global ten: Int = 10
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_implicit_casts_complex_arithmetic_common_type() {
    let src = r#"
        unsigned long ul = 10000ul;
        int main(void) {
            int i = -50;
            double d = (ul + i) * 3.125;
            return d == 31093.75;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 50
            i.0 = tmp.0
            tmp.2 = sign_extend i.0
            tmp.1 = ul + tmp.2
            tmp.3 = uint_to_double tmp.1
            tmp.4 = tmp.3 * 3.125D
            d.1 = tmp.4
            tmp.5 = d.1 == 31093.75D
            return tmp.5
            return 0
        }
        static global ul: Unsigned Long = 10000UL
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_implicit_casts_convert_for_assignment() {
    let src = r#"
        int check_args(long l, double d) {
            return l == 2 && d == -6.0;
        }
        double return_double(void) {
            return 18446744073709551586ul;
        }
        int check_assignment(double arg) {
            int i = 0;
            i = arg;
            return i == 4;
        }
        int main(void) {
            if (!check_args(2.4, -6)) {
                return 1;
            }
            if (return_double() != 18446744073709551616.0) {
                return 2;
            }
            if (!check_assignment(4.9)) {
                return 3;
            }
            double d = 18446744073709551586ul;
            if (d != 18446744073709551616.) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function check_args(l.0, d.1) { 
            tmp.1 = sign_extend 2
            tmp.0 = l.0 == tmp.1
            if !tmp.0 jump and_false_0
            tmp.5 = - 6D
            tmp.4 = d.1 == tmp.5
            if !tmp.4 jump and_false_0
            tmp.3 = 1
            jump and_end_1
        
          and_false_0:
            tmp.3 = 0
        
          and_end_1:
            return tmp.3
            return 0
        }
        global function return_double() { 
            tmp.6 = uint_to_double 18446744073709551586UL
            return tmp.6
            return 0
        }
        global function check_assignment(arg.2) { 
            i.3 = 0
            tmp.7 = double_to_int arg.2
            i.3 = tmp.7
            tmp.8 = i.3 == 4
            return tmp.8
            return 0
        }
        global function main() { 
            tmp.9 = double_to_int 2.4D
            tmp.10 = - 6
            tmp.11 = int_to_double tmp.10
            tmp.12 = check_args(tmp.9, tmp.11)
            tmp.13 = ! tmp.12
            if !tmp.13 jump end_if_2
            return 1
        
          end_if_2:
            tmp.14 = return_double()
            tmp.15 = tmp.14 != 18446744073709552000D
            if !tmp.15 jump end_if_4
            return 2
        
          end_if_4:
            tmp.16 = check_assignment(4.9D)
            tmp.17 = ! tmp.16
            if !tmp.17 jump end_if_6
            return 3
        
          end_if_6:
            tmp.18 = uint_to_double 18446744073709551586UL
            d.4 = tmp.18
            tmp.19 = d.4 != 18446744073709552000D
            if !tmp.19 jump end_if_8
            return 4
        
          end_if_8:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_implicit_casts_static_initializers() {
    let src = r#"
        double d1 = 2147483647;
        double d2 = 4294967295u;
        double d3 = 4611686018427389440l;
        double d4 = 4611686018427389955l;
        double d5 = 9223372036854775810ul;
        double d6 = 4611686018427389955ul;
        double d7 = 9223372036854776832ul;
        double uninitialized;
        static int i = 4.9;
        int unsigned u = 42949.672923E5;
        long l = 4611686018427389440.;
        unsigned long ul = 18446744073709549568.;
        int main(void) {
            if (d1 != 2147483647.) {
                return 1;
            }
            if (d2 != 4294967295.) {
                return 2;
            }
            if (d3 != 4611686018427389952.) {
                return 3;
            }
            if (d4 != d3) {
                return 4;
            }
            if (d5 != 9223372036854775808.) {
                return 5;
            }
            if (d6 != d3) {
                return 6;
            }
            if (d7 != d5) {
                return 7;
            }
            if (uninitialized) {
                return 8;
            }
            if (i != 4) {
                return 9;
            }
            if (u != 4294967292u) {
                return 10;
            }
            if (l != 4611686018427389952l) {
                return 11;
            }
            if (ul != 18446744073709549568ul) {
                return 12;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = d1 != 2147483647D
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = d2 != 4294967295D
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            tmp.2 = d3 != 4611686018427390000D
            if !tmp.2 jump end_if_4
            return 3
        
          end_if_4:
            tmp.3 = d4 != d3
            if !tmp.3 jump end_if_6
            return 4
        
          end_if_6:
            tmp.4 = d5 != 9223372036854776000D
            if !tmp.4 jump end_if_8
            return 5
        
          end_if_8:
            tmp.5 = d6 != d3
            if !tmp.5 jump end_if_10
            return 6
        
          end_if_10:
            tmp.6 = d7 != d5
            if !tmp.6 jump end_if_12
            return 7
        
          end_if_12:
            tmp.7 = uninitialized != 0D
            if !tmp.7 jump end_if_14
            return 8
        
          end_if_14:
            tmp.8 = i != 4
            if !tmp.8 jump end_if_16
            return 9
        
          end_if_16:
            tmp.9 = u != 4294967292U
            if !tmp.9 jump end_if_18
            return 10
        
          end_if_18:
            tmp.10 = l != 4611686018427389952L
            if !tmp.10 jump end_if_20
            return 11
        
          end_if_20:
            tmp.11 = ul != 18446744073709549568UL
            if !tmp.11 jump end_if_22
            return 12
        
          end_if_22:
            return 0
            return 0
        }
        static global d1: Double = 2147483647D
        static global d2: Double = 4294967295D
        static global d3: Double = 4611686018427390000D
        static global d4: Double = 4611686018427390000D
        static global d5: Double = 9223372036854776000D
        static global d6: Double = 4611686018427390000D
        static global d7: Double = 9223372036854776000D
        static i: Int = 4
        static global l: Long = 4611686018427389952L
        static global u: Unsigned Int = 4294967292U
        static global ul: Unsigned Long = 18446744073709549568UL
        static global uninitialized: Double = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_double_and_int_params_recursive() {
    let src = r#"
        int fun(int i1, double d1, int i2, double d2, int i3, double d3,
                int i4, double d4, int i5, double d5, int i6, double d6,
                int i7, double d7, int i8, double d8, int i9, double d9) {
            if (i1 != d9) {
                int call1 = fun(i1 + 1, d1, i2 + 1, d2, i3 + 1, d3, i4 + 1, d4, i5 + 1, d5, i6 + 1, d6, i7 + 1, d7, i8 + 1, d8, i9 + 1, d9);
                int call2 = fun(i1, d1 - 1, i2, d2 - 1, i3, d3 - 1, i4, d4 - 1, i5, d5 - 1, i6, d6 - 1, i7, d7 - 1, i8, d8 - 1, i9, d9 - 1);
                if (call1) {
                    return call1;
                }
                if (call2) {
                    return call2;
                }
            }
            if (i2 != i1 + 2) {
                return 2;
            }
            if (i3 != i1 + 4) {
                return 3;
            }
            if (i4 != i1 + 6) {
                return 4;
            }
            if (i5 != i1 + 8) {
                return 5;
            }
            if (i6 != i1 + 10) {
                return 6;
            }
            if (i7 != i1 + 12) {
                return 7;
            }
            if (i8 != i1 + 14) {
                return 8;
            }
            if (i9 != i1 + 16) {
                return 9;
            }
            if (d1 != d9 - 16) {
                return 11;
            }
            if (d2 != d9 - 14) {
                return 12;
            }
            if (d3 != d9 - 12) {
                return 13;
            }
            if (d4 != d9 - 10) {
                return 14;
            }
            if (d5 != d9 - 8) {
                return 15;
            }
            if (d6 != d9 - 6) {
                return 16;
            }
            if (d7 != d9 - 4) {
                return 17;
            }
            if (d8 != d9 - 2) {
                return 18;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function fun(i1.0, d1.1, i2.2, d2.3, i3.4, d3.5, i4.6, d4.7, i5.8, d5.9, i6.10, d6.11, i7.12, d7.13, i8.14, d8.15, i9.16, d9.17) { 
            tmp.0 = int_to_double i1.0
            tmp.1 = tmp.0 != d9.17
            if !tmp.1 jump end_if_0
            tmp.2 = i1.0 + 1
            tmp.3 = i2.2 + 1
            tmp.4 = i3.4 + 1
            tmp.5 = i4.6 + 1
            tmp.6 = i5.8 + 1
            tmp.7 = i6.10 + 1
            tmp.8 = i7.12 + 1
            tmp.9 = i8.14 + 1
            tmp.10 = i9.16 + 1
            tmp.11 = fun(tmp.2, d1.1, tmp.3, d2.3, tmp.4, d3.5, tmp.5, d4.7, tmp.6, d5.9, tmp.7, d6.11, tmp.8, d7.13, tmp.9, d8.15, tmp.10, d9.17)
            call1.18 = tmp.11
            tmp.13 = int_to_double 1
            tmp.12 = d1.1 - tmp.13
            tmp.15 = int_to_double 1
            tmp.14 = d2.3 - tmp.15
            tmp.17 = int_to_double 1
            tmp.16 = d3.5 - tmp.17
            tmp.19 = int_to_double 1
            tmp.18 = d4.7 - tmp.19
            tmp.21 = int_to_double 1
            tmp.20 = d5.9 - tmp.21
            tmp.23 = int_to_double 1
            tmp.22 = d6.11 - tmp.23
            tmp.25 = int_to_double 1
            tmp.24 = d7.13 - tmp.25
            tmp.27 = int_to_double 1
            tmp.26 = d8.15 - tmp.27
            tmp.29 = int_to_double 1
            tmp.28 = d9.17 - tmp.29
            tmp.30 = fun(i1.0, tmp.12, i2.2, tmp.14, i3.4, tmp.16, i4.6, tmp.18, i5.8, tmp.20, i6.10, tmp.22, i7.12, tmp.24, i8.14, tmp.26, i9.16, tmp.28)
            call2.19 = tmp.30
            if !call1.18 jump end_if_2
            return call1.18
        
          end_if_2:
            if !call2.19 jump end_if_4
            return call2.19
        
          end_if_4:
        
          end_if_0:
            tmp.32 = i1.0 + 2
            tmp.31 = i2.2 != tmp.32
            if !tmp.31 jump end_if_6
            return 2
        
          end_if_6:
            tmp.34 = i1.0 + 4
            tmp.33 = i3.4 != tmp.34
            if !tmp.33 jump end_if_8
            return 3
        
          end_if_8:
            tmp.36 = i1.0 + 6
            tmp.35 = i4.6 != tmp.36
            if !tmp.35 jump end_if_10
            return 4
        
          end_if_10:
            tmp.38 = i1.0 + 8
            tmp.37 = i5.8 != tmp.38
            if !tmp.37 jump end_if_12
            return 5
        
          end_if_12:
            tmp.40 = i1.0 + 10
            tmp.39 = i6.10 != tmp.40
            if !tmp.39 jump end_if_14
            return 6
        
          end_if_14:
            tmp.42 = i1.0 + 12
            tmp.41 = i7.12 != tmp.42
            if !tmp.41 jump end_if_16
            return 7
        
          end_if_16:
            tmp.44 = i1.0 + 14
            tmp.43 = i8.14 != tmp.44
            if !tmp.43 jump end_if_18
            return 8
        
          end_if_18:
            tmp.46 = i1.0 + 16
            tmp.45 = i9.16 != tmp.46
            if !tmp.45 jump end_if_20
            return 9
        
          end_if_20:
            tmp.49 = int_to_double 16
            tmp.48 = d9.17 - tmp.49
            tmp.47 = d1.1 != tmp.48
            if !tmp.47 jump end_if_22
            return 11
        
          end_if_22:
            tmp.52 = int_to_double 14
            tmp.51 = d9.17 - tmp.52
            tmp.50 = d2.3 != tmp.51
            if !tmp.50 jump end_if_24
            return 12
        
          end_if_24:
            tmp.55 = int_to_double 12
            tmp.54 = d9.17 - tmp.55
            tmp.53 = d3.5 != tmp.54
            if !tmp.53 jump end_if_26
            return 13
        
          end_if_26:
            tmp.58 = int_to_double 10
            tmp.57 = d9.17 - tmp.58
            tmp.56 = d4.7 != tmp.57
            if !tmp.56 jump end_if_28
            return 14
        
          end_if_28:
            tmp.61 = int_to_double 8
            tmp.60 = d9.17 - tmp.61
            tmp.59 = d5.9 != tmp.60
            if !tmp.59 jump end_if_30
            return 15
        
          end_if_30:
            tmp.64 = int_to_double 6
            tmp.63 = d9.17 - tmp.64
            tmp.62 = d6.11 != tmp.63
            if !tmp.62 jump end_if_32
            return 16
        
          end_if_32:
            tmp.67 = int_to_double 4
            tmp.66 = d9.17 - tmp.67
            tmp.65 = d7.13 != tmp.66
            if !tmp.65 jump end_if_34
            return 17
        
          end_if_34:
            tmp.70 = int_to_double 2
            tmp.69 = d9.17 - tmp.70
            tmp.68 = d8.15 != tmp.69
            if !tmp.68 jump end_if_36
            return 18
        
          end_if_36:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_double_and_int_params_recursive_client() {
    let src = r#"
        int fun(int i1, double d1, int i2, double d2, int i3, double d3,
                int i4, double d4, int i5, double d5, int i6, double d6,
                int i7, double d7, int i8, double d8, int i9, double d9);
        int main(void) {
            double d = fun(1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9, 10.0, 11, 12.0, 13, 14.0, 15, 16.0, 17, 18.0);
            return (d == 78.00);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = fun(1, 2D, 3, 4D, 5, 6D, 7, 8D, 9, 10D, 11, 12D, 13, 14D, 15, 16D, 17, 18D)
            tmp.1 = int_to_double tmp.0
            d.18 = tmp.1
            tmp.2 = d.18 == 78D
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_double_parameters() {
    let src = r#"
        int check_arguments(double a, double b, double c, double d, double e, double f, double g, double h) {
            if (a != 1.0) {
                return 1;
            }
            if (b != 2.0) {
                return 2;
            }
            if (c != 3.0) {
                return 3;
            }
            if (d != 4.0) {
                return 4;
            }
            if (e != -1.0) {
                return 5;
            }
            if (f != -2.0) {
                return 6;
            }
            if (g != -3.0) {
                return 7;
            }
            if (h != -4.0) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function check_arguments(a.0, b.1, c.2, d.3, e.4, f.5, g.6, h.7) { 
            tmp.0 = a.0 != 1D
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = b.1 != 2D
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            tmp.2 = c.2 != 3D
            if !tmp.2 jump end_if_4
            return 3
        
          end_if_4:
            tmp.3 = d.3 != 4D
            if !tmp.3 jump end_if_6
            return 4
        
          end_if_6:
            tmp.5 = - 1D
            tmp.4 = e.4 != tmp.5
            if !tmp.4 jump end_if_8
            return 5
        
          end_if_8:
            tmp.7 = - 2D
            tmp.6 = f.5 != tmp.7
            if !tmp.6 jump end_if_10
            return 6
        
          end_if_10:
            tmp.9 = - 3D
            tmp.8 = g.6 != tmp.9
            if !tmp.8 jump end_if_12
            return 7
        
          end_if_12:
            tmp.11 = - 4D
            tmp.10 = h.7 != tmp.11
            if !tmp.10 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_double_parameters_client() {
    let src = r#"
        int check_arguments(double a, double b, double c, double d, double e, double f, double g, double h);
        int main(void) {
            return check_arguments(1.0, 2.0, 3.0, 4.0, -1.0, -2.0, -3.0, -4.0);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1D
            tmp.1 = - 2D
            tmp.2 = - 3D
            tmp.3 = - 4D
            tmp.4 = check_arguments(1D, 2D, 3D, 4D, tmp.0, tmp.1, tmp.2, tmp.3)
            return tmp.4
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_double_params_and_result() {
    let src = r#"
        double fmax(double x, double y);
        double get_max(double a, double b, double c, double d,
                       double e, double f, double g, double h,
                       double i, double j, double k)
        {
            double max = fmax(
                fmax(
                    fmax(
                        fmax(a, b),
                        fmax(c, d)),
                    fmax(
                        fmax(e, f),
                        fmax(g, h))),
                fmax(i, fmax(j, k)));
            return max;
        }
    "#;
    let expected = r#"
        global function get_max(a.2, b.3, c.4, d.5, e.6, f.7, g.8, h.9, i.10, j.11, k.12) { 
            tmp.0 = fmax(a.2, b.3)
            tmp.1 = fmax(c.4, d.5)
            tmp.2 = fmax(tmp.0, tmp.1)
            tmp.3 = fmax(e.6, f.7)
            tmp.4 = fmax(g.8, h.9)
            tmp.5 = fmax(tmp.3, tmp.4)
            tmp.6 = fmax(tmp.2, tmp.5)
            tmp.7 = fmax(j.11, k.12)
            tmp.8 = fmax(i.10, tmp.7)
            tmp.9 = fmax(tmp.6, tmp.8)
            max.13 = tmp.9
            return max.13
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_double_params_and_result_client() {
    let src = r#"
        double get_max(double a, double b, double c, double d,
                       double e, double f, double g, double h,
                       double i, double j, double k);
        int main(void)
        {
            double result = get_max(100.3, 200.1, 0.01, 1.00004e5, 55.555, -4., 6543.2,
                                    9e9, 8e8, 7.6, 10e3 * 11e5);
            return result == 10e3 * 11e5;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 4D
            tmp.1 = 10000D * 1100000D
            tmp.2 = get_max(100.3D, 200.1D, 0.01D, 100004D, 55.555D, tmp.0, 6543.2D, 9000000000D, 800000000D, 7.6D, tmp.1)
            result.11 = tmp.2
            tmp.4 = 10000D * 1100000D
            tmp.3 = result.11 == tmp.4
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_extern_double() {
    let src = r#"
        double d = 1e20;
    "#;
    let expected = r#"
        static global d: Double = 100000000000000000000D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_extern_double_client() {
    let src = r#"
        
        extern double d;
        int main(void) {
            return d == 1e20;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = d == 100000000000000000000D
            return tmp.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_use_arg_after_fun_call() {
    let src = r#"
        double fun(double x) {
            if (x > 2)
                return x;
            else {
                double ret = fun(x + 2);
                return ret + x;
            }
        }
    "#;
    let expected = r#"
        global function fun(x.0) { 
            tmp.1 = int_to_double 2
            tmp.0 = x.0 > tmp.1
            if !tmp.0 jump else_1
            return x.0
            jump end_if_0
        
          else_1:
            tmp.3 = int_to_double 2
            tmp.2 = x.0 + tmp.3
            tmp.4 = fun(tmp.2)
            ret.1 = tmp.4
            tmp.5 = ret.1 + x.0
            return tmp.5
        
          end_if_0:
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_use_arg_after_fun_call_client() {
    let src = r#"
        double fun(double x);
        int main(void) {
            return fun(1.0);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = fun(1D)
            tmp.1 = double_to_int tmp.0
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_special_values_infinity() {
    let src = r#"
        double inf = 2e308;
        double very_large = 1.79E308;
        double zero = 0.0;
        int main(void) {
            if (inf != 11e330) {
                return 1;
            }
            if (inf <= very_large) {
                return 2;
            }
            if(very_large * 10.0 != inf) {
                return 3;
            }
            if (1.0 / zero != inf) {
                return 4;
            }
            double negated_inf = -inf;
            double negated_inf2 = -1.0 / zero;
            if (negated_inf >= -very_large) {
                return 5;
            }
            if (negated_inf != negated_inf2) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = inf != infD
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = inf <= very_large
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            tmp.2 = very_large * 10D
            tmp.3 = tmp.2 != inf
            if !tmp.3 jump end_if_4
            return 3
        
          end_if_4:
            tmp.4 = 1D / zero
            tmp.5 = tmp.4 != inf
            if !tmp.5 jump end_if_6
            return 4
        
          end_if_6:
            tmp.6 = - inf
            negated_inf.0 = tmp.6
            tmp.7 = - 1D
            tmp.8 = tmp.7 / zero
            negated_inf2.1 = tmp.8
            tmp.10 = - very_large
            tmp.9 = negated_inf.0 >= tmp.10
            if !tmp.9 jump end_if_8
            return 5
        
          end_if_8:
            tmp.11 = negated_inf.0 != negated_inf2.1
            if !tmp.11 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
        static global inf: Double = infD
        static global very_large: Double = 179000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000D
        static global zero: Double = 0D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_special_values_negative_zero() {
    let src = r#"
        double copysign(double x, double y);
        double zero = 0.0;
        int main(void) {
            double negative_zero = -zero;
            if (negative_zero != 0)
                return 1;
            if ( 1/negative_zero != -10e308 )
                return 2;
            if ( (-10)/negative_zero != 10e308)
                return 3;
            int fail = 0;
            negative_zero && (fail = 1);
            if (fail)
                return 4;
            if (negative_zero) {
                return 5;
            }
            if (zero != -0.0) {
                return 6;
            }
            double negated = copysign(4.0, -0.0);
            double positive = copysign(-5.0, 0.0);
            if (negated != -4.0) {
                return 7;
            }
            if (positive != 5.0) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - zero
            negative_zero.2 = tmp.0
            tmp.2 = int_to_double 0
            tmp.1 = negative_zero.2 != tmp.2
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.3 = int_to_double 1
            tmp.4 = tmp.3 / negative_zero.2
            tmp.6 = - infD
            tmp.5 = tmp.4 != tmp.6
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = - 10
            tmp.8 = int_to_double tmp.7
            tmp.9 = tmp.8 / negative_zero.2
            tmp.10 = tmp.9 != infD
            if !tmp.10 jump end_if_4
            return 3
        
          end_if_4:
            fail.3 = 0
            if !negative_zero.2 jump and_false_6
            fail.3 = 1
            if !1 jump and_false_6
            tmp.12 = 1
            jump and_end_7
        
          and_false_6:
            tmp.12 = 0
        
          and_end_7:
            if !fail.3 jump end_if_8
            return 4
        
          end_if_8:
            tmp.13 = negative_zero.2 != 0D
            if !tmp.13 jump end_if_10
            return 5
        
          end_if_10:
            tmp.15 = - 0D
            tmp.14 = zero != tmp.15
            if !tmp.14 jump end_if_12
            return 6
        
          end_if_12:
            tmp.16 = - 0D
            tmp.17 = copysign(4D, tmp.16)
            negated.4 = tmp.17
            tmp.18 = - 5D
            tmp.19 = copysign(tmp.18, 0D)
            positive.5 = tmp.19
            tmp.21 = - 4D
            tmp.20 = negated.4 != tmp.21
            if !tmp.20 jump end_if_14
            return 7
        
          end_if_14:
            tmp.22 = positive.5 != 5D
            if !tmp.22 jump end_if_16
            return 8
        
          end_if_16:
            return 0
            return 0
        }
        static global zero: Double = 0D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_special_values_subnormal_not_zero() {
    let src = r#"
        int non_zero(double d) {
            return !d;
        }
        double multiply_by_large_num(double d) {
            return d * 2e20;
        }
        int main(void) {
            double subnormal = 2.5e-320;
            if (multiply_by_large_num(subnormal) != 4.99994433591341498562e-300) {
                return 2;
            }
            return non_zero(subnormal);
        }
    "#;
    let expected = r#"
        global function non_zero(d.0) { 
            tmp.0 = ! d.0
            return tmp.0
            return 0
        }
        global function multiply_by_large_num(d.1) { 
            tmp.1 = d.1 * 200000000000000000000D
            return tmp.1
            return 0
        }
        global function main() { 
            subnormal.2 = 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025D
            tmp.2 = multiply_by_large_num(subnormal.2)
            tmp.3 = tmp.2 != 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004999944335913415D
            if !tmp.3 jump end_if_0
            return 2
        
          end_if_0:
            tmp.4 = non_zero(subnormal.2)
            return tmp.4
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_casts_cast_between_pointer_types() {
    let src = r#"
        int check_null_ptr_cast(void) {
            static long *long_ptr = 0;
            double *dbl_ptr = (double *)long_ptr;
            unsigned int *int_ptr = (unsigned int *)long_ptr;
            int **ptr_ptr = (int **)long_ptr;
            if (long_ptr) {
                return 1;
            }
            if (dbl_ptr) {
                return 2;
            }
            if (int_ptr) {
                return 3;
            }
            if (ptr_ptr) {
                return 4;
            }
            return 0;
        }
        int check_round_trip(void) {
            long l = -1;
            long *long_ptr = &l;
            double *dbl_ptr = (double *)long_ptr;
            long *other_long_ptr = (long *)dbl_ptr;
            if (*other_long_ptr != -1) {
                return 5;
            }
            return 0;
        }
        int main(void)
        {
            int result = check_null_ptr_cast();
            if (result) {
                return result;
            }
            result = check_round_trip();
            return result;
        }
    "#;
    let expected = r#"
        global function check_null_ptr_cast() { 
            tmp.0 = long_ptr.0
            dbl_ptr.1 = tmp.0
            tmp.1 = long_ptr.0
            int_ptr.2 = tmp.1
            tmp.2 = long_ptr.0
            ptr_ptr.3 = tmp.2
            if !long_ptr.0 jump end_if_0
            return 1
        
          end_if_0:
            if !dbl_ptr.1 jump end_if_2
            return 2
        
          end_if_2:
            if !int_ptr.2 jump end_if_4
            return 3
        
          end_if_4:
            if !ptr_ptr.3 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        global function check_round_trip() { 
            tmp.3 = - 1
            tmp.4 = sign_extend tmp.3
            l.4 = tmp.4
            tmp.5 = &l.4
            long_ptr.5 = tmp.5
            tmp.6 = long_ptr.5
            dbl_ptr.6 = tmp.6
            tmp.7 = dbl_ptr.6
            other_long_ptr.7 = tmp.7
            tmp.8 = *other_long_ptr.7
            tmp.10 = - 1
            tmp.11 = sign_extend tmp.10
            tmp.9 = tmp.8 != tmp.11
            if !tmp.9 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
        global function main() { 
            tmp.12 = check_null_ptr_cast()
            result.8 = tmp.12
            if !result.8 jump end_if_10
            return result.8
        
          end_if_10:
            tmp.13 = check_round_trip()
            result.8 = tmp.13
            return result.8
            return 0
        }
        static long_ptr.0: Pointer(Long) = 0UL
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_casts_null_pointer_conversion() {
    let src = r#"
        double *d = 0l;
        int *i = 0ul;
        int *i2 = 0u;
        int expect_null_param(int *val)
        {
            return (val == 0ul);
        }
        long *return_null_ptr(void)
        {
            return 0;
        }
        int main(void)
        {
            int x = 10;
            int *ptr = &x;
            if (d) {
                return 1;
            }
            if (i) {
                return 2;
            }
            if (i2) {
                return 3;
            }
            ptr = 0ul;
            if (ptr) {
                return 4;
            }
            int *y = 0;
            if (y != 0)
                return 5;
            if (!expect_null_param(0)) {
                return 6;
            }
            long *null_ptr = return_null_ptr();
            if (null_ptr != 0) {
                return 7;
            }
            ptr = &x;
            int *ternary_result = 10 ? 0 : ptr;
            if (ternary_result) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function expect_null_param(val.0) { 
            tmp.1 = 0UL
            tmp.0 = val.0 == tmp.1
            return tmp.0
            return 0
        }
        global function return_null_ptr() { 
            tmp.2 = sign_extend 0
            return tmp.2
            return 0
        }
        global function main() { 
            x.1 = 10
            tmp.3 = &x.1
            ptr.2 = tmp.3
            if !d jump end_if_0
            return 1
        
          end_if_0:
            if !i jump end_if_2
            return 2
        
          end_if_2:
            if !i2 jump end_if_4
            return 3
        
          end_if_4:
            tmp.4 = 0UL
            ptr.2 = tmp.4
            if !ptr.2 jump end_if_6
            return 4
        
          end_if_6:
            tmp.5 = sign_extend 0
            y.3 = tmp.5
            tmp.7 = sign_extend 0
            tmp.6 = y.3 != tmp.7
            if !tmp.6 jump end_if_8
            return 5
        
          end_if_8:
            tmp.8 = sign_extend 0
            tmp.9 = expect_null_param(tmp.8)
            tmp.10 = ! tmp.9
            if !tmp.10 jump end_if_10
            return 6
        
          end_if_10:
            tmp.11 = return_null_ptr()
            null_ptr.4 = tmp.11
            tmp.13 = sign_extend 0
            tmp.12 = null_ptr.4 != tmp.13
            if !tmp.12 jump end_if_12
            return 7
        
          end_if_12:
            tmp.14 = &x.1
            ptr.2 = tmp.14
            if !10 jump else_15
            tmp.16 = sign_extend 0
            tmp.15 = tmp.16
            jump end_if_14
        
          else_15:
            tmp.15 = ptr.2
        
          end_if_14:
            ternary_result.5 = tmp.15
            if !ternary_result.5 jump end_if_16
            return 8
        
          end_if_16:
            return 0
            return 0
        }
        static global d: Pointer(Double) = 0UL
        static global i: Pointer(Int) = 0UL
        static global i2: Pointer(Int) = 0UL
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_casts_pointer_int_casts() {
    let src = r#"
        int i = 128;
        long l = 128l;
        int int_to_pointer(void) {
            int *a = (int *) i;
            int *b = (int *) l;
            return a == b;
        }
        int pointer_to_int(void) {
            static long l;
            long *ptr = &l;
            unsigned long ptr_as_long = (unsigned long) ptr;
            return (ptr_as_long % 8 == 0);
        }
        int cast_long_round_trip(void) {
            int *ptr = (int *) l;
            long l2 = (long) ptr;
            return (l == l2);
        }
        int cast_ulong_round_trip(void) {
            long *ptr = &l;
            unsigned long ptr_as_ulong = (unsigned long) ptr;
            long *ptr2 = (long *) ptr_as_ulong;
            return (ptr == ptr2);
        }
        int cast_int_round_trip(void) {
            double *a = (double *)i;
            int i2 = (int) a;
            return (i2 == 128);
        }
        int main(void) {
            if (!int_to_pointer()) {
                return 1;
            }
            if (!pointer_to_int()) {
                return 2;
            }
            if (!cast_long_round_trip()) {
                return 3;
            }
            if (!cast_ulong_round_trip()) {
                return 4;
            }
            if (!cast_int_round_trip()) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function int_to_pointer() { 
            tmp.0 = sign_extend i
            a.0 = tmp.0
            tmp.1 = l
            b.1 = tmp.1
            tmp.2 = a.0 == b.1
            return tmp.2
            return 0
        }
        global function pointer_to_int() { 
            tmp.3 = &l.2
            ptr.3 = tmp.3
            tmp.4 = ptr.3
            ptr_as_long.4 = tmp.4
            tmp.6 = sign_extend 8
            tmp.5 = ptr_as_long.4 % tmp.6
            tmp.8 = sign_extend 0
            tmp.7 = tmp.5 == tmp.8
            return tmp.7
            return 0
        }
        global function cast_long_round_trip() { 
            tmp.9 = l
            ptr.5 = tmp.9
            tmp.10 = ptr.5
            l2.6 = tmp.10
            tmp.11 = l == l2.6
            return tmp.11
            return 0
        }
        global function cast_ulong_round_trip() { 
            tmp.12 = &l
            ptr.7 = tmp.12
            tmp.13 = ptr.7
            ptr_as_ulong.8 = tmp.13
            tmp.14 = ptr_as_ulong.8
            ptr2.9 = tmp.14
            tmp.15 = ptr.7 == ptr2.9
            return tmp.15
            return 0
        }
        global function cast_int_round_trip() { 
            tmp.16 = sign_extend i
            a.10 = tmp.16
            tmp.17 = truncate a.10
            i2.11 = tmp.17
            tmp.18 = i2.11 == 128
            return tmp.18
            return 0
        }
        global function main() { 
            tmp.19 = int_to_pointer()
            tmp.20 = ! tmp.19
            if !tmp.20 jump end_if_0
            return 1
        
          end_if_0:
            tmp.21 = pointer_to_int()
            tmp.22 = ! tmp.21
            if !tmp.22 jump end_if_2
            return 2
        
          end_if_2:
            tmp.23 = cast_long_round_trip()
            tmp.24 = ! tmp.23
            if !tmp.24 jump end_if_4
            return 3
        
          end_if_4:
            tmp.25 = cast_ulong_round_trip()
            tmp.26 = ! tmp.25
            if !tmp.26 jump end_if_6
            return 4
        
          end_if_6:
            tmp.27 = cast_int_round_trip()
            tmp.28 = ! tmp.27
            if !tmp.28 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
        static global i: Int = 128
        static global l: Long = 128L
        static l.2: Long = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_comparisons_compare_pointers() {
    let src = r#"
        int main(void) {
            int a = 0;
            int b;
            int *a_ptr = &a;
            int *a_ptr2 = &a;
            int *b_ptr = &b;
            if (a_ptr == b_ptr) {
                return 1;
            }
            if (a_ptr != a_ptr2) {
                return 2;
            }
            if (!(a_ptr == a_ptr2)) {
                return 3;
            }
            if (!(a_ptr != b_ptr)) {
                return 4;
            }
            *b_ptr = *a_ptr;
            if (a_ptr == b_ptr) {
                return 5;
            }
            b_ptr = a_ptr;
            if (b_ptr != a_ptr) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            a.0 = 0
            tmp.0 = &a.0
            a_ptr.2 = tmp.0
            tmp.1 = &a.0
            a_ptr2.3 = tmp.1
            tmp.2 = &b.1
            b_ptr.4 = tmp.2
            tmp.3 = a_ptr.2 == b_ptr.4
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = a_ptr.2 != a_ptr2.3
            if !tmp.4 jump end_if_2
            return 2
        
          end_if_2:
            tmp.5 = a_ptr.2 == a_ptr2.3
            tmp.6 = ! tmp.5
            if !tmp.6 jump end_if_4
            return 3
        
          end_if_4:
            tmp.7 = a_ptr.2 != b_ptr.4
            tmp.8 = ! tmp.7
            if !tmp.8 jump end_if_6
            return 4
        
          end_if_6:
            tmp.9 = *a_ptr.2
            *b_ptr.4 = tmp.9
            tmp.10 = a_ptr.2 == b_ptr.4
            if !tmp.10 jump end_if_8
            return 5
        
          end_if_8:
            b_ptr.4 = a_ptr.2
            tmp.11 = b_ptr.4 != a_ptr.2
            if !tmp.11 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_comparisons_compare_to_null() {
    let src = r#"
        double *get_null_pointer(void) {
            return 0;
        }
        int main(void)
        {
            double x;
            double *null = get_null_pointer();
            double *non_null = &x;
            if (non_null == 0) {
                return 1;
            }
            if (!(null == 0l)) {
                return 2;
            }
            if (!(non_null != 0u)) {
                return 3;
            }
            if (null != 0ul) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function get_null_pointer() { 
            tmp.0 = sign_extend 0
            return tmp.0
            return 0
        }
        global function main() { 
            tmp.1 = get_null_pointer()
            null.1 = tmp.1
            tmp.2 = &x.0
            non_null.2 = tmp.2
            tmp.4 = sign_extend 0
            tmp.3 = non_null.2 == tmp.4
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = 0L
            tmp.5 = null.1 == tmp.6
            tmp.7 = ! tmp.5
            if !tmp.7 jump end_if_2
            return 2
        
          end_if_2:
            tmp.9 = zero_extend 0U
            tmp.8 = non_null.2 != tmp.9
            tmp.10 = ! tmp.8
            if !tmp.10 jump end_if_4
            return 3
        
          end_if_4:
            tmp.12 = 0UL
            tmp.11 = null.1 != tmp.12
            if !tmp.11 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_comparisons_pointers_as_conditions() {
    let src = r#"
        long *get_null_pointer(void) {
            return 0;
        }
        int main(void)
        {
            long x;
            long *ptr = &x;
            long *null_ptr = get_null_pointer();
            if (5.0 && null_ptr) {
                return 1;
            }
            int a = 0;
            if (!(ptr || (a = 10))) {
                return 2;
            }
            if (a != 0) {
                return 3;
            }
            if (!ptr) {
                return 4;
            }
            int j = ptr ? 1 : 2;
            int k = null_ptr ? 3 : 4;
            if (j != 1) {
                return 5;
            }
            if (k != 4) {
                return 6;
            }
            int i = 0;
            while (ptr)
            {
                if (i >= 10) {
                    ptr = 0;
                    continue;
                }
                i = i + 1;
            }
            if (i != 10) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function get_null_pointer() { 
            tmp.0 = sign_extend 0
            return tmp.0
            return 0
        }
        global function main() { 
            tmp.1 = &x.0
            ptr.1 = tmp.1
            tmp.2 = get_null_pointer()
            null_ptr.2 = tmp.2
            if !5D jump and_false_0
            if !null_ptr.2 jump and_false_0
            tmp.4 = 1
            jump and_end_1
        
          and_false_0:
            tmp.4 = 0
        
          and_end_1:
            if !tmp.4 jump end_if_2
            return 1
        
          end_if_2:
            a.3 = 0
            if ptr.1 jump or_true_4
            a.3 = 10
            if 10 jump or_true_4
            tmp.6 = 0
            jump or_end_5
        
          or_true_4:
            tmp.6 = 1
        
          or_end_5:
            tmp.7 = ! tmp.6
            if !tmp.7 jump end_if_6
            return 2
        
          end_if_6:
            tmp.8 = a.3 != 0
            if !tmp.8 jump end_if_8
            return 3
        
          end_if_8:
            if !tmp.9 jump end_if_10
            return 4
        
          end_if_10:
            if !ptr.1 jump else_13
            tmp.10 = 1
            jump end_if_12
        
          else_13:
            tmp.10 = 2
        
          end_if_12:
            j.4 = tmp.10
            if !null_ptr.2 jump else_15
            tmp.11 = 3
            jump end_if_14
        
          else_15:
            tmp.11 = 4
        
          end_if_14:
            k.5 = tmp.11
            tmp.12 = j.4 != 1
            if !tmp.12 jump end_if_16
            return 5
        
          end_if_16:
            tmp.13 = k.5 != 4
            if !tmp.13 jump end_if_18
            return 6
        
          end_if_18:
            i.6 = 0
        
          continue_loop_0:
            if !ptr.1 jump break_loop_0
            tmp.14 = i.6 >= 10
            if !tmp.14 jump end_if_20
            tmp.15 = sign_extend 0
            ptr.1 = tmp.15
            jump continue_loop_0
        
          end_if_20:
            tmp.16 = i.6 + 1
            i.6 = tmp.16
            jump continue_loop_0
        
          break_loop_0:
            tmp.17 = i.6 != 10
            if !tmp.17 jump end_if_22
            return 7
        
          end_if_22:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_declarators_abstract_declarators() {
    let src = r#"
        
        int main(void) {
            long int unsigned *x = 0;
            if (x != (unsigned long (*)) 0)
                return 1;
            if (x != (long unsigned int ((((*))))) 0)
                return 2;
            double ***y = 0;
            if (y != (double *(**)) 0)
                return 3;
            if (y != (double (***)) 0)
                return 4;
            if ((double (*(*(*)))) 0 != y)
                return 5;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = sign_extend 0
            x.0 = tmp.0
            tmp.2 = sign_extend 0
            tmp.1 = x.0 != tmp.2
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = sign_extend 0
            tmp.3 = x.0 != tmp.4
            if !tmp.3 jump end_if_2
            return 2
        
          end_if_2:
            tmp.5 = sign_extend 0
            y.1 = tmp.5
            tmp.7 = sign_extend 0
            tmp.6 = y.1 != tmp.7
            if !tmp.6 jump end_if_4
            return 3
        
          end_if_4:
            tmp.9 = sign_extend 0
            tmp.8 = y.1 != tmp.9
            if !tmp.8 jump end_if_6
            return 4
        
          end_if_6:
            tmp.10 = sign_extend 0
            tmp.11 = tmp.10 != y.1
            if !tmp.11 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_declarators_declarators() {
    let src = r#"
        int return_3(void);
        int(return_3(void));
        int(return_3)(void);
        int((return_3))(void)
        {
            return 3;
        }
        long l = 100;
        long *two_pointers(double val, double *ptr)
        {
            *ptr = val;
            return &l;
        }
        long(*two_pointers(double val, double(*d)));
        long *(two_pointers)(double val, double *(d));
        long *(two_pointers)(double val, double(*(d)));
        unsigned **pointers_to_pointers(int **p)
        {
            static unsigned u;
            static unsigned *u_ptr;
            u_ptr = &u;
            u = **p;
            return &u_ptr;
        }
        unsigned(**(pointers_to_pointers(int *(*p))));
        unsigned *(*pointers_to_pointers(int(**p)));
        unsigned(*(*((pointers_to_pointers)(int(*(*(p)))))));
        int main(void)
        {
            int i = 0;
            int(*i_ptr) = &i;
            int(**ptr_to_iptr) = &i_ptr;
            double(d1) = 0.0;
            double d2 = 10.0;
            double *(d_ptr) = &d1;
            long(*(l_ptr));
            unsigned *(*(ptr_to_uptr));
            i = return_3();
            if (i != 3)
                return 1;
            if (*i_ptr != 3) {
                return 2;
            }
            l_ptr = two_pointers(d2, d_ptr);
            if (l_ptr != &l) {
                return 3;
            }
            if (*l_ptr != 100) {
                return 4;
            }
            if (*d_ptr != 10.0) {
                return 5;
            }
            if (d1 != 10.0) {
                return 6;
            }
            ptr_to_uptr = pointers_to_pointers(ptr_to_iptr);
            if (**ptr_to_uptr != 3) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function return_3() { 
            return 3
            return 0
        }
        global function two_pointers(val.0, ptr.1) { 
            *ptr.1 = val.0
            tmp.0 = &l
            return tmp.0
            return 0
        }
        global function pointers_to_pointers(p.8) { 
            tmp.1 = &u.9
            u_ptr.10 = tmp.1
            tmp.2 = *p.8
            tmp.3 = *tmp.2
            tmp.4 = tmp.3
            u.9 = tmp.4
            tmp.5 = &u_ptr.10
            return tmp.5
            return 0
        }
        global function main() { 
            i.14 = 0
            tmp.6 = &i.14
            i_ptr.15 = tmp.6
            tmp.7 = &i_ptr.15
            ptr_to_iptr.16 = tmp.7
            d1.17 = 0D
            d2.18 = 10D
            tmp.8 = &d1.17
            d_ptr.19 = tmp.8
            tmp.9 = return_3()
            i.14 = tmp.9
            tmp.10 = i.14 != 3
            if !tmp.10 jump end_if_0
            return 1
        
          end_if_0:
            tmp.11 = *i_ptr.15
            tmp.12 = tmp.11 != 3
            if !tmp.12 jump end_if_2
            return 2
        
          end_if_2:
            tmp.13 = two_pointers(d2.18, d_ptr.19)
            l_ptr.20 = tmp.13
            tmp.15 = &l
            tmp.14 = l_ptr.20 != tmp.15
            if !tmp.14 jump end_if_4
            return 3
        
          end_if_4:
            tmp.16 = *l_ptr.20
            tmp.18 = sign_extend 100
            tmp.17 = tmp.16 != tmp.18
            if !tmp.17 jump end_if_6
            return 4
        
          end_if_6:
            tmp.19 = *d_ptr.19
            tmp.20 = tmp.19 != 10D
            if !tmp.20 jump end_if_8
            return 5
        
          end_if_8:
            tmp.21 = d1.17 != 10D
            if !tmp.21 jump end_if_10
            return 6
        
          end_if_10:
            tmp.22 = pointers_to_pointers(ptr_to_iptr.16)
            ptr_to_uptr.21 = tmp.22
            tmp.23 = *ptr_to_uptr.21
            tmp.24 = *tmp.23
            tmp.26 = 3
            tmp.25 = tmp.24 != tmp.26
            if !tmp.25 jump end_if_12
            return 7
        
          end_if_12:
            return 0
            return 0
        }
        static global l: Long = 100L
        static u.9: Unsigned Int = zero[4]
        static u_ptr.10: Pointer(Unsigned Int) = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_declarators_declare_pointer_in_for_loop() {
    let src = r#"
        int main(void) {
            int x = 10;
            for (int *i = &x; i != 0; ) {
                *i = 5;
                i = 0;
            }
            return x;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 10
            tmp.0 = &x.0
            i.1 = tmp.0
        
          start_loop_0:
            tmp.2 = sign_extend 0
            tmp.1 = i.1 != tmp.2
            if !tmp.1 jump break_loop_0
            *i.1 = 5
            tmp.3 = sign_extend 0
            i.1 = tmp.3
        
          continue_loop_0:
            jump start_loop_0
        
          break_loop_0:
            return x.0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_address_of_dereference() {
    let src = r#"
        int main(void) {
            int *null_ptr = 0;
            if (&*null_ptr != 0)
                return 1;
            int **ptr_to_null = &null_ptr;
            if (&**ptr_to_null)
                return 2;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = sign_extend 0
            null_ptr.0 = tmp.0
            tmp.2 = sign_extend 0
            tmp.1 = null_ptr.0 != tmp.2
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.3 = &null_ptr.0
            ptr_to_null.1 = tmp.3
            tmp.4 = *ptr_to_null.1
            if !tmp.4 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_dereference_expression_result() {
    let src = r#"
        int *return_pointer(void) {
            static int var = 10;
            return &var;
        }
        int one = 1;
        int main(void) {
            int val = 100;
            int *ptr_var = &val;
            if (*return_pointer() != 10) {
                return 1;
            }
            if (*(one ? return_pointer() : ptr_var) != 10)
                return 2;
            if (*(one - 1 ? return_pointer() : ptr_var) != 100) {
                return 3;
            }
            int *ptr_to_one = &one;
            if (*(ptr_var = ptr_to_one) != 1) {
                return 4;
            }
            *return_pointer() = 20;
            *(one ? ptr_var : return_pointer()) = 30;
            if (*return_pointer() != 20) {
                return 5;
            }
            if (*ptr_var != 30) {
                return 6;
            }
            if (one != 30) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function return_pointer() { 
            tmp.0 = &var.0
            return tmp.0
            return 0
        }
        global function main() { 
            val.1 = 100
            tmp.1 = &val.1
            ptr_var.2 = tmp.1
            tmp.2 = return_pointer()
            tmp.3 = *tmp.2
            tmp.4 = tmp.3 != 10
            if !tmp.4 jump end_if_0
            return 1
        
          end_if_0:
            if !one jump else_3
            tmp.6 = return_pointer()
            tmp.5 = tmp.6
            jump end_if_2
        
          else_3:
            tmp.5 = ptr_var.2
        
          end_if_2:
            tmp.7 = *tmp.5
            tmp.8 = tmp.7 != 10
            if !tmp.8 jump end_if_4
            return 2
        
          end_if_4:
            tmp.9 = one - 1
            if !tmp.9 jump else_7
            tmp.11 = return_pointer()
            tmp.10 = tmp.11
            jump end_if_6
        
          else_7:
            tmp.10 = ptr_var.2
        
          end_if_6:
            tmp.12 = *tmp.10
            tmp.13 = tmp.12 != 100
            if !tmp.13 jump end_if_8
            return 3
        
          end_if_8:
            tmp.14 = &one
            ptr_to_one.3 = tmp.14
            ptr_var.2 = ptr_to_one.3
            tmp.15 = *ptr_to_one.3
            tmp.16 = tmp.15 != 1
            if !tmp.16 jump end_if_10
            return 4
        
          end_if_10:
            tmp.17 = return_pointer()
            *tmp.17 = 20
            if !one jump else_13
            tmp.18 = ptr_var.2
            jump end_if_12
        
          else_13:
            tmp.19 = return_pointer()
            tmp.18 = tmp.19
        
          end_if_12:
            *tmp.18 = 30
            tmp.20 = return_pointer()
            tmp.21 = *tmp.20
            tmp.22 = tmp.21 != 20
            if !tmp.22 jump end_if_14
            return 5
        
          end_if_14:
            tmp.23 = *ptr_var.2
            tmp.24 = tmp.23 != 30
            if !tmp.24 jump end_if_16
            return 6
        
          end_if_16:
            tmp.25 = one != 30
            if !tmp.25 jump end_if_18
            return 7
        
          end_if_18:
            return 0
            return 0
        }
        static global one: Int = 1
        static var.0: Int = 10
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_multilevel_indirection() {
    let src = r#"
        
        int main(void) {
            double d = 10.0;
            double *d_ptr = &d;
            double **d_ptr_ptr = &d_ptr;
            double ***d_ptr_ptr_ptr = &d_ptr_ptr;
            if (d != 10.0) {
                return 1;
            }
            if (*d_ptr != 10.0) {
                return 2;
            }
            if (**d_ptr_ptr != 10.0) {
                return 3;
            }
            if (***d_ptr_ptr_ptr != 10.0) {
                return 4;
            }
            if (&d != d_ptr) {
                return 5;
            }
            if (*d_ptr_ptr != d_ptr) {
                return 6;
            }
            if (**d_ptr_ptr_ptr != d_ptr) {
                return 7;
            }
            ***d_ptr_ptr_ptr = 5.0;
            if (d != 5.0) {
                return 8;
            }
            if (*d_ptr != 5.0) {
                return 9;
            }
            if (**d_ptr_ptr != 5.0) {
                return 10;
            }
            if (***d_ptr_ptr_ptr != 5.0) {
                return 11;
            }
            double d2 = 1.0;
            double *d2_ptr = &d2;
            double *d2_ptr2 = d2_ptr;
            double **d2_ptr_ptr = &d2_ptr;
            *d_ptr_ptr_ptr = d2_ptr_ptr;
            if (**d_ptr_ptr_ptr != d2_ptr) {
                return 12;
            }
            if (***d_ptr_ptr_ptr != 1.0) {
                return 13;
            }
            if (d2_ptr_ptr == &d2_ptr2)
                return 14;
            d2_ptr = d_ptr;
            if (**d_ptr_ptr_ptr != d_ptr) {
                return 15;
            }
            if (*d2_ptr_ptr != d_ptr) {
                return 16;
            }
            if (**d_ptr_ptr_ptr == d2_ptr2) {
                return 17;
            }
            if (***d_ptr_ptr_ptr != 5.0) {
                return 18;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            d.0 = 10D
            tmp.0 = &d.0
            d_ptr.1 = tmp.0
            tmp.1 = &d_ptr.1
            d_ptr_ptr.2 = tmp.1
            tmp.2 = &d_ptr_ptr.2
            d_ptr_ptr_ptr.3 = tmp.2
            tmp.3 = d.0 != 10D
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = *d_ptr.1
            tmp.5 = tmp.4 != 10D
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            tmp.6 = *d_ptr_ptr.2
            tmp.7 = *tmp.6
            tmp.8 = tmp.7 != 10D
            if !tmp.8 jump end_if_4
            return 3
        
          end_if_4:
            tmp.9 = *d_ptr_ptr_ptr.3
            tmp.10 = *tmp.9
            tmp.11 = *tmp.10
            tmp.12 = tmp.11 != 10D
            if !tmp.12 jump end_if_6
            return 4
        
          end_if_6:
            tmp.13 = &d.0
            tmp.14 = tmp.13 != d_ptr.1
            if !tmp.14 jump end_if_8
            return 5
        
          end_if_8:
            tmp.15 = *d_ptr_ptr.2
            tmp.16 = tmp.15 != d_ptr.1
            if !tmp.16 jump end_if_10
            return 6
        
          end_if_10:
            tmp.17 = *d_ptr_ptr_ptr.3
            tmp.18 = *tmp.17
            tmp.19 = tmp.18 != d_ptr.1
            if !tmp.19 jump end_if_12
            return 7
        
          end_if_12:
            tmp.20 = *d_ptr_ptr_ptr.3
            tmp.21 = *tmp.20
            *tmp.21 = 5D
            tmp.22 = d.0 != 5D
            if !tmp.22 jump end_if_14
            return 8
        
          end_if_14:
            tmp.23 = *d_ptr.1
            tmp.24 = tmp.23 != 5D
            if !tmp.24 jump end_if_16
            return 9
        
          end_if_16:
            tmp.25 = *d_ptr_ptr.2
            tmp.26 = *tmp.25
            tmp.27 = tmp.26 != 5D
            if !tmp.27 jump end_if_18
            return 10
        
          end_if_18:
            tmp.28 = *d_ptr_ptr_ptr.3
            tmp.29 = *tmp.28
            tmp.30 = *tmp.29
            tmp.31 = tmp.30 != 5D
            if !tmp.31 jump end_if_20
            return 11
        
          end_if_20:
            d2.4 = 1D
            tmp.32 = &d2.4
            d2_ptr.5 = tmp.32
            d2_ptr2.6 = d2_ptr.5
            tmp.33 = &d2_ptr.5
            d2_ptr_ptr.7 = tmp.33
            *d_ptr_ptr_ptr.3 = d2_ptr_ptr.7
            tmp.34 = *d_ptr_ptr_ptr.3
            tmp.35 = *tmp.34
            tmp.36 = tmp.35 != d2_ptr.5
            if !tmp.36 jump end_if_22
            return 12
        
          end_if_22:
            tmp.37 = *d_ptr_ptr_ptr.3
            tmp.38 = *tmp.37
            tmp.39 = *tmp.38
            tmp.40 = tmp.39 != 1D
            if !tmp.40 jump end_if_24
            return 13
        
          end_if_24:
            tmp.42 = &d2_ptr2.6
            tmp.41 = d2_ptr_ptr.7 == tmp.42
            if !tmp.41 jump end_if_26
            return 14
        
          end_if_26:
            d2_ptr.5 = d_ptr.1
            tmp.43 = *d_ptr_ptr_ptr.3
            tmp.44 = *tmp.43
            tmp.45 = tmp.44 != d_ptr.1
            if !tmp.45 jump end_if_28
            return 15
        
          end_if_28:
            tmp.46 = *d2_ptr_ptr.7
            tmp.47 = tmp.46 != d_ptr.1
            if !tmp.47 jump end_if_30
            return 16
        
          end_if_30:
            tmp.48 = *d_ptr_ptr_ptr.3
            tmp.49 = *tmp.48
            tmp.50 = tmp.49 == d2_ptr2.6
            if !tmp.50 jump end_if_32
            return 17
        
          end_if_32:
            tmp.51 = *d_ptr_ptr_ptr.3
            tmp.52 = *tmp.51
            tmp.53 = *tmp.52
            tmp.54 = tmp.53 != 5D
            if !tmp.54 jump end_if_34
            return 18
        
          end_if_34:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_read_through_pointers() {
    let src = r#"
        
        int main(void) {
            int i = -100;
            unsigned long ul = 13835058055282163712ul;
            double d = 3.5;
            int *i_ptr = &i;
            unsigned long *ul_ptr = &ul;
            double *d_ptr = &d;
            if (*i_ptr != -100) {
                return 1;
            }
            if (*ul_ptr != 13835058055282163712ul) {
                return 2;
            }
            if (*d_ptr != 3.5) {
                return 3;
            }
            i = 12;
            ul = 1000;
            d = -000.001;
            if (*i_ptr != 12) {
                return 4;
            }
            if (*ul_ptr != 1000) {
                return 5;
            }
            if (*d_ptr != -000.001) {
                return 6;
            }
            int i2 = 1;
            unsigned long ul2 = 144115196665790464ul;
            double d2 = -33.3;
            i_ptr = &i2;
            ul_ptr = &ul2;
            d_ptr = &d2;
            if (*i_ptr != 1) {
                return 7;
            }
            if (*ul_ptr != 144115196665790464ul) {
                return 8;
            }
            if (*d_ptr != -33.3) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 100
            i.0 = tmp.0
            ul.1 = 13835058055282163712UL
            d.2 = 3.5D
            tmp.1 = &i.0
            i_ptr.3 = tmp.1
            tmp.2 = &ul.1
            ul_ptr.4 = tmp.2
            tmp.3 = &d.2
            d_ptr.5 = tmp.3
            tmp.4 = *i_ptr.3
            tmp.6 = - 100
            tmp.5 = tmp.4 != tmp.6
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
            tmp.7 = *ul_ptr.4
            tmp.8 = tmp.7 != 13835058055282163712UL
            if !tmp.8 jump end_if_2
            return 2
        
          end_if_2:
            tmp.9 = *d_ptr.5
            tmp.10 = tmp.9 != 3.5D
            if !tmp.10 jump end_if_4
            return 3
        
          end_if_4:
            i.0 = 12
            tmp.11 = sign_extend 1000
            ul.1 = tmp.11
            tmp.12 = - 0.001D
            d.2 = tmp.12
            tmp.13 = *i_ptr.3
            tmp.14 = tmp.13 != 12
            if !tmp.14 jump end_if_6
            return 4
        
          end_if_6:
            tmp.15 = *ul_ptr.4
            tmp.17 = sign_extend 1000
            tmp.16 = tmp.15 != tmp.17
            if !tmp.16 jump end_if_8
            return 5
        
          end_if_8:
            tmp.18 = *d_ptr.5
            tmp.20 = - 0.001D
            tmp.19 = tmp.18 != tmp.20
            if !tmp.19 jump end_if_10
            return 6
        
          end_if_10:
            i2.6 = 1
            ul2.7 = 144115196665790464UL
            tmp.21 = - 33.3D
            d2.8 = tmp.21
            tmp.22 = &i2.6
            i_ptr.3 = tmp.22
            tmp.23 = &ul2.7
            ul_ptr.4 = tmp.23
            tmp.24 = &d2.8
            d_ptr.5 = tmp.24
            tmp.25 = *i_ptr.3
            tmp.26 = tmp.25 != 1
            if !tmp.26 jump end_if_12
            return 7
        
          end_if_12:
            tmp.27 = *ul_ptr.4
            tmp.28 = tmp.27 != 144115196665790464UL
            if !tmp.28 jump end_if_14
            return 8
        
          end_if_14:
            tmp.29 = *d_ptr.5
            tmp.31 = - 33.3D
            tmp.30 = tmp.29 != tmp.31
            if !tmp.30 jump end_if_16
            return 9
        
          end_if_16:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_simple() {
    let src = r#"
        int main(void) {
            int x = 3;
            int *ptr = &x;
            return *ptr;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 3
            tmp.0 = &x.0
            ptr.1 = tmp.0
            tmp.1 = *ptr.1
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_static_var_indirection() {
    let src = r#"
        unsigned int w = 4294967295U;
        int x = 10;
        unsigned int y = 4294967295U;
        double *dbl_ptr;
        long modify_ptr(long *new_ptr) {
            static long *p;
            if (new_ptr)
            {
                p = new_ptr;
            }
            return *p;
        }
        int increment_ptr(void)
        {
            *dbl_ptr = *dbl_ptr + 5.0;
            return 0;
        }
        int main(void) {
            int *pointer_to_static = &x;
            x = 20;
            if (*pointer_to_static != 20) {
                return 1;
            }
            *pointer_to_static = 100;
            if (x != 100) {
                return 2;
            }
            if (w != 4294967295U) {
                return 3;
            }
            if (y != 4294967295U) {
                return 4;
            }
            if (dbl_ptr) {
                return 5;
            }
            long l = 1000l;
            if (modify_ptr(&l) != 1000l) {
                return 6;
            }
            l = -1;
            if (modify_ptr(0) != l) {
                return 7;
            }
            double d = 10.0;
            dbl_ptr = &d;
            increment_ptr();
            if (*dbl_ptr != 15) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function modify_ptr(new_ptr.0) { 
            if !new_ptr.0 jump end_if_0
            p.1 = new_ptr.0
        
          end_if_0:
            tmp.0 = *p.1
            return tmp.0
            return 0
        }
        global function increment_ptr() { 
            tmp.1 = *dbl_ptr
            tmp.2 = tmp.1 + 5D
            *dbl_ptr = tmp.2
            return 0
            return 0
        }
        global function main() { 
            tmp.3 = &x
            pointer_to_static.2 = tmp.3
            x = 20
            tmp.4 = *pointer_to_static.2
            tmp.5 = tmp.4 != 20
            if !tmp.5 jump end_if_2
            return 1
        
          end_if_2:
            *pointer_to_static.2 = 100
            tmp.6 = x != 100
            if !tmp.6 jump end_if_4
            return 2
        
          end_if_4:
            tmp.7 = w != 4294967295U
            if !tmp.7 jump end_if_6
            return 3
        
          end_if_6:
            tmp.8 = y != 4294967295U
            if !tmp.8 jump end_if_8
            return 4
        
          end_if_8:
            if !dbl_ptr jump end_if_10
            return 5
        
          end_if_10:
            l.3 = 1000L
            tmp.9 = &l.3
            tmp.10 = modify_ptr(tmp.9)
            tmp.11 = tmp.10 != 1000L
            if !tmp.11 jump end_if_12
            return 6
        
          end_if_12:
            tmp.12 = - 1
            tmp.13 = sign_extend tmp.12
            l.3 = tmp.13
            tmp.14 = sign_extend 0
            tmp.15 = modify_ptr(tmp.14)
            tmp.16 = tmp.15 != l.3
            if !tmp.16 jump end_if_14
            return 7
        
          end_if_14:
            d.4 = 10D
            tmp.17 = &d.4
            dbl_ptr = tmp.17
            tmp.18 = increment_ptr()
            tmp.19 = *dbl_ptr
            tmp.21 = int_to_double 15
            tmp.20 = tmp.19 != tmp.21
            if !tmp.20 jump end_if_16
            return 8
        
          end_if_16:
            return 0
            return 0
        }
        static global dbl_ptr: Pointer(Double) = zero[8]
        static p.1: Pointer(Long) = zero[8]
        static global w: Unsigned Int = 4294967295U
        static global x: Int = 10
        static global y: Unsigned Int = 4294967295U
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_update_through_pointers() {
    let src = r#"
        int main(void) {
            unsigned int i = 2185232384u;
            signed long l = 144115196665790464l;
            double d = 1e50;
            unsigned *i_ptr = &i;
            long *l_ptr = &l;
            double *d_ptr = &d;
            *i_ptr = 10;
            *l_ptr = -20;
            *d_ptr = 30.1;
            if (i != 10) {
                return 1;
            }
            if (l != -20) {
                return 2;
            }
            if (d != 30.1) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            i.0 = 2185232384U
            l.1 = 144115196665790464L
            d.2 = 100000000000000000000000000000000000000000000000000D
            tmp.0 = &i.0
            i_ptr.3 = tmp.0
            tmp.1 = &l.1
            l_ptr.4 = tmp.1
            tmp.2 = &d.2
            d_ptr.5 = tmp.2
            tmp.3 = 10
            *i_ptr.3 = tmp.3
            tmp.4 = - 20
            tmp.5 = sign_extend tmp.4
            *l_ptr.4 = tmp.5
            *d_ptr.5 = 30.1D
            tmp.7 = 10
            tmp.6 = i.0 != tmp.7
            if !tmp.6 jump end_if_0
            return 1
        
          end_if_0:
            tmp.9 = - 20
            tmp.10 = sign_extend tmp.9
            tmp.8 = l.1 != tmp.10
            if !tmp.8 jump end_if_2
            return 2
        
          end_if_2:
            tmp.11 = d.2 != 30.1D
            if !tmp.11 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_bitshift_dereferenced_ptrs() {
    let src = r#"
        unsigned int ui = 4294967295;
        unsigned int *get_ui_ptr(void){
            return &ui;
        }
        int shiftcount = 5;
        int main(void) {
            if ((*get_ui_ptr() << 2l) != 4294967292) {
                return 1;
            }
            if ((*get_ui_ptr() >> 2) != 1073741823) {
                return 2;
            }
            int *shiftcount_ptr = &shiftcount;
            if ((1000000u >> *shiftcount_ptr) != 31250) {
                return 3;
            }
            if ((1000000u << *shiftcount_ptr) != 32000000) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function get_ui_ptr() { 
            tmp.0 = &ui
            return tmp.0
            return 0
        }
        global function main() { 
            tmp.1 = get_ui_ptr()
            tmp.2 = *tmp.1
            tmp.3 = tmp.2 << 2L
            tmp.4 = zero_extend tmp.3
            tmp.5 = tmp.4 != 4294967292L
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = get_ui_ptr()
            tmp.7 = *tmp.6
            tmp.8 = tmp.7 >> 2
            tmp.10 = 1073741823
            tmp.9 = tmp.8 != tmp.10
            if !tmp.9 jump end_if_2
            return 2
        
          end_if_2:
            tmp.11 = &shiftcount
            shiftcount_ptr.0 = tmp.11
            tmp.13 = *shiftcount_ptr.0
            tmp.12 = 1000000U >> tmp.13
            tmp.15 = 31250
            tmp.14 = tmp.12 != tmp.15
            if !tmp.14 jump end_if_4
            return 3
        
          end_if_4:
            tmp.17 = *shiftcount_ptr.0
            tmp.16 = 1000000U << tmp.17
            tmp.19 = 32000000
            tmp.18 = tmp.16 != tmp.19
            if !tmp.18 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        static global shiftcount: Int = 5
        static global ui: Unsigned Int = 4294967295U
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_bitwise_ops_with_dereferenced_ptrs() {
    let src = r#"
        int main(void) {
            unsigned int ui = -1u;
            unsigned long ul = 9223372036854775808ul;
            unsigned int *ui_ptr = &ui;
            unsigned long *ul_ptr = &ul;
            if ((*ui_ptr & *ul_ptr) != 0) {
                return 1;
            }
            if ((*ui_ptr | *ul_ptr) != 9223372041149743103ul) {
                return 2;
            }
            int i = -1;
            signed int *i_ptr = &i;
            if ((*i_ptr & ul) != *ul_ptr) {
                return 3;
            }
            if ((*i_ptr | *ul_ptr) != i) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1U
            ui.0 = tmp.0
            ul.1 = 9223372036854775808UL
            tmp.1 = &ui.0
            ui_ptr.2 = tmp.1
            tmp.2 = &ul.1
            ul_ptr.3 = tmp.2
            tmp.3 = *ui_ptr.2
            tmp.4 = zero_extend tmp.3
            tmp.6 = *ul_ptr.3
            tmp.5 = tmp.4 & tmp.6
            tmp.8 = sign_extend 0
            tmp.7 = tmp.5 != tmp.8
            if !tmp.7 jump end_if_0
            return 1
        
          end_if_0:
            tmp.9 = *ui_ptr.2
            tmp.10 = zero_extend tmp.9
            tmp.12 = *ul_ptr.3
            tmp.11 = tmp.10 | tmp.12
            tmp.13 = tmp.11 != 9223372041149743103UL
            if !tmp.13 jump end_if_2
            return 2
        
          end_if_2:
            tmp.14 = - 1
            i.4 = tmp.14
            tmp.15 = &i.4
            i_ptr.5 = tmp.15
            tmp.16 = *i_ptr.5
            tmp.17 = sign_extend tmp.16
            tmp.18 = tmp.17 & ul.1
            tmp.20 = *ul_ptr.3
            tmp.19 = tmp.18 != tmp.20
            if !tmp.19 jump end_if_4
            return 3
        
          end_if_4:
            tmp.21 = *i_ptr.5
            tmp.22 = sign_extend tmp.21
            tmp.24 = *ul_ptr.3
            tmp.23 = tmp.22 | tmp.24
            tmp.26 = sign_extend i.4
            tmp.25 = tmp.23 != tmp.26
            if !tmp.25 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_compound_assign_conversion() {
    let src = r#"
        int main(void) {
            double d = 5.0;
            double *d_ptr = &d;
            *d_ptr *= 1000u;
            if (d != 5000.0) {
                return 1;
            }
            int i = -50;
            int *i_ptr = &i;
            *i_ptr %= 4294967200U;
            if (*i_ptr != 46) {
                return 2;
            }
            unsigned int ui = 4294967295U;
            ui /= *d_ptr;
            if (ui != 858993u) {
                return 3;
            }
            i = -10;
            unsigned long ul = 9223372036854775807ul;
            unsigned long *ul_ptr = &ul;
            *i_ptr -= *ul_ptr;
            if (i != -9) {
                return 4;
            }
            if (ul != 9223372036854775807ul) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            d.0 = 5D
            tmp.0 = &d.0
            d_ptr.1 = tmp.0
            tmp.1 = *d_ptr.1
            tmp.3 = uint_to_double 1000U
            tmp.2 = tmp.1 * tmp.3
            *d_ptr.1 = tmp.2
            tmp.4 = d.0 != 5000D
            if !tmp.4 jump end_if_0
            return 1
        
          end_if_0:
            tmp.5 = - 50
            i.2 = tmp.5
            tmp.6 = &i.2
            i_ptr.3 = tmp.6
            tmp.7 = *i_ptr.3
            tmp.8 = tmp.7
            tmp.9 = tmp.8 % 4294967200U
            tmp.10 = tmp.9
            *i_ptr.3 = tmp.10
            tmp.11 = tmp.10
            tmp.12 = *i_ptr.3
            tmp.13 = tmp.12 != 46
            if !tmp.13 jump end_if_2
            return 2
        
          end_if_2:
            ui.4 = 4294967295U
            tmp.14 = uint_to_double ui.4
            tmp.16 = *d_ptr.1
            tmp.15 = tmp.14 / tmp.16
            tmp.17 = double_to_uint tmp.15
            ui.4 = tmp.17
            tmp.18 = double_to_uint tmp.17
            tmp.19 = ui.4 != 858993U
            if !tmp.19 jump end_if_4
            return 3
        
          end_if_4:
            tmp.20 = - 10
            i.2 = tmp.20
            ul.5 = 9223372036854775807UL
            tmp.21 = &ul.5
            ul_ptr.6 = tmp.21
            tmp.22 = *i_ptr.3
            tmp.23 = sign_extend tmp.22
            tmp.25 = *ul_ptr.6
            tmp.24 = tmp.23 - tmp.25
            tmp.26 = truncate tmp.24
            *i_ptr.3 = tmp.26
            tmp.27 = truncate tmp.26
            tmp.29 = - 9
            tmp.28 = i.2 != tmp.29
            if !tmp.28 jump end_if_6
            return 4
        
          end_if_6:
            tmp.30 = ul.5 != 9223372036854775807UL
            if !tmp.30 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_compound_assign_through_pointer() {
    let src = r#"
        int main(void) {
            int x = 10;
            int *ptr = &x;
            *ptr += 5;
            if (x != 15) {
                return 1;
            }
            if ((*ptr -= 12) != 3) {
                return 2;
            }
            if (x != 3) {
                return 3;
            }
            *ptr *= 6;
            if (x != 18) {
                return 4;
            }
            *ptr /= 9;
            if (x != 2) {
                return 5;
            }
            *ptr %= 3;
            if (x != 2) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 10
            tmp.0 = &x.0
            ptr.1 = tmp.0
            tmp.1 = *ptr.1
            tmp.2 = tmp.1 + 5
            *ptr.1 = tmp.2
            tmp.3 = x.0 != 15
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = *ptr.1
            tmp.5 = tmp.4 - 12
            *ptr.1 = tmp.5
            tmp.6 = tmp.5 != 3
            if !tmp.6 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = x.0 != 3
            if !tmp.7 jump end_if_4
            return 3
        
          end_if_4:
            tmp.8 = *ptr.1
            tmp.9 = tmp.8 * 6
            *ptr.1 = tmp.9
            tmp.10 = x.0 != 18
            if !tmp.10 jump end_if_6
            return 4
        
          end_if_6:
            tmp.11 = *ptr.1
            tmp.12 = tmp.11 / 9
            *ptr.1 = tmp.12
            tmp.13 = x.0 != 2
            if !tmp.13 jump end_if_8
            return 5
        
          end_if_8:
            tmp.14 = *ptr.1
            tmp.15 = tmp.14 % 3
            *ptr.1 = tmp.15
            tmp.16 = x.0 != 2
            if !tmp.16 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_compound_bitwise_dereferenced_ptrs() {
    let src = r#"
        unsigned long ul = 18446460386757245432ul;
        int main(void) {
            unsigned long *ul_ptr = &ul;
            *ul_ptr &= -1000;
            if (ul != 18446460386757244952ul ) {
                return 1;
            }
            *ul_ptr |= 4294967040u;
            if (ul != 18446460386824683288ul ) {
                return 2;
            }
            int i = 123456;
            unsigned int ui = 4042322160u;
            long l = -252645136;
            unsigned int *ui_ptr = &ui;
            long *l_ptr = &l;
            if (*ui_ptr ^= *l_ptr) {
                return 3;
            }
            if (ui) {
                return 4;
            }
            if (i != 123456) {
                return 5;
            }
            if (l != -252645136) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &ul
            ul_ptr.0 = tmp.0
            tmp.1 = *ul_ptr.0
            tmp.3 = - 1000
            tmp.4 = sign_extend tmp.3
            tmp.2 = tmp.1 & tmp.4
            *ul_ptr.0 = tmp.2
            tmp.5 = ul != 18446460386757244952UL
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = *ul_ptr.0
            tmp.8 = zero_extend 4294967040U
            tmp.7 = tmp.6 | tmp.8
            *ul_ptr.0 = tmp.7
            tmp.9 = ul != 18446460386824683288UL
            if !tmp.9 jump end_if_2
            return 2
        
          end_if_2:
            i.1 = 123456
            ui.2 = 4042322160U
            tmp.10 = - 252645136
            tmp.11 = sign_extend tmp.10
            l.3 = tmp.11
            tmp.12 = &ui.2
            ui_ptr.4 = tmp.12
            tmp.13 = &l.3
            l_ptr.5 = tmp.13
            tmp.14 = *ui_ptr.4
            tmp.15 = zero_extend tmp.14
            tmp.17 = *l_ptr.5
            tmp.16 = tmp.15 ^ tmp.17
            tmp.18 = truncate tmp.16
            *ui_ptr.4 = tmp.18
            tmp.19 = truncate tmp.18
            if !tmp.19 jump end_if_4
            return 3
        
          end_if_4:
            if !ui.2 jump end_if_6
            return 4
        
          end_if_6:
            tmp.20 = i.1 != 123456
            if !tmp.20 jump end_if_8
            return 5
        
          end_if_8:
            tmp.22 = - 252645136
            tmp.23 = sign_extend tmp.22
            tmp.21 = l.3 != tmp.23
            if !tmp.21 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
        static global ul: Unsigned Long = 18446460386757245432UL
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_eval_compound_lhs_once() {
    let src = r#"
        int i = 0;
        int putchar(int c);
        int *print_A(void) {
            putchar(65);
            return &i;
        }
        int *print_B(void) {
            putchar(66);
            return &i;
        }
        int main(void) {
            *print_A() += 5;
            if (i != 5) {
                return 1;
            }
            *print_B() += 5l;
            if (i != 10) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function print_A() { 
            tmp.0 = putchar(65)
            tmp.1 = &i
            return tmp.1
            return 0
        }
        global function print_B() { 
            tmp.2 = putchar(66)
            tmp.3 = &i
            return tmp.3
            return 0
        }
        global function main() { 
            tmp.4 = print_A()
            tmp.5 = *tmp.4
            tmp.6 = tmp.5 + 5
            *tmp.4 = tmp.6
            tmp.7 = i != 5
            if !tmp.7 jump end_if_0
            return 1
        
          end_if_0:
            tmp.8 = print_B()
            tmp.9 = *tmp.8
            tmp.10 = sign_extend tmp.9
            tmp.11 = tmp.10 + 5L
            tmp.12 = truncate tmp.11
            *tmp.8 = tmp.12
            tmp.13 = truncate tmp.12
            tmp.14 = i != 10
            if !tmp.14 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
        static global i: Int = 0
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_incr_and_decr_through_pointer() {
    let src = r#"
        
        int main(void) {
            int x = 10;
            int *y = &x;
            if (++*y != 11) {
                return 1;
            }
            if (x != 11) {
                return 2;
            }
            if (--*y != 10) {
                return 3;
            }
            if (x != 10) {
                return 4;
            }
            if ((*y)++ != 10) {
                return 5;
            }
            if (x != 11) {
                return 6;
            }
            if ((*y)-- != 11) {
                return 7;
            }
            if (x != 10) {
                return 8;
            }
            unsigned long ul = 0;
            unsigned long *ul_ptr = &ul;
            if ((*ul_ptr)--) {
                return 9;
            }
            if (ul != 18446744073709551615UL) {
                return 10;
            }
            double d = 0.0;
            double *d_ptr = &d;
            if (++(*d_ptr) != 1.0) {
                return 11;
            }
            if (d != 1.0) {
                return 12;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 10
            tmp.0 = &x.0
            y.1 = tmp.0
            tmp.1 = *y.1
            tmp.2 = inc tmp.1
            *y.1 = tmp.2
            tmp.3 = tmp.2 != 11
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = x.0 != 11
            if !tmp.4 jump end_if_2
            return 2
        
          end_if_2:
            tmp.5 = *y.1
            tmp.6 = dec tmp.5
            *y.1 = tmp.6
            tmp.7 = tmp.6 != 10
            if !tmp.7 jump end_if_4
            return 3
        
          end_if_4:
            tmp.8 = x.0 != 10
            if !tmp.8 jump end_if_6
            return 4
        
          end_if_6:
            tmp.9 = *y.1
            tmp.10 = tmp.9
            tmp.11 = inc tmp.9
            *y.1 = tmp.11
            tmp.12 = tmp.10 != 10
            if !tmp.12 jump end_if_8
            return 5
        
          end_if_8:
            tmp.13 = x.0 != 11
            if !tmp.13 jump end_if_10
            return 6
        
          end_if_10:
            tmp.14 = *y.1
            tmp.15 = tmp.14
            tmp.16 = dec tmp.14
            *y.1 = tmp.16
            tmp.17 = tmp.15 != 11
            if !tmp.17 jump end_if_12
            return 7
        
          end_if_12:
            tmp.18 = x.0 != 10
            if !tmp.18 jump end_if_14
            return 8
        
          end_if_14:
            tmp.19 = sign_extend 0
            ul.2 = tmp.19
            tmp.20 = &ul.2
            ul_ptr.3 = tmp.20
            tmp.21 = *ul_ptr.3
            tmp.22 = tmp.21
            tmp.23 = dec tmp.21
            *ul_ptr.3 = tmp.23
            if !tmp.22 jump end_if_16
            return 9
        
          end_if_16:
            tmp.24 = ul.2 != 18446744073709551615UL
            if !tmp.24 jump end_if_18
            return 10
        
          end_if_18:
            d.4 = 0D
            tmp.25 = &d.4
            d_ptr.5 = tmp.25
            tmp.26 = *d_ptr.5
            tmp.27 = inc tmp.26
            *d_ptr.5 = tmp.27
            tmp.28 = tmp.27 != 1D
            if !tmp.28 jump end_if_20
            return 11
        
          end_if_20:
            tmp.29 = d.4 != 1D
            if !tmp.29 jump end_if_22
            return 12
        
          end_if_22:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_switch_dereferenced_pointer() {
    let src = r#"
        long l = 4294967300l;
        long *get_ptr(void) {
            return &l;
        }
        int main(void) {
            switch (*get_ptr()) {
                case 1:
                    return 1;
                case 4:
                    return 2;
                case 4294967300l:
                    return 0;
                case 18446744073709551600UL:
                    return 3;
                default:
                    return 4;
            }
        }
    "#;
    let expected = r#"
        global function get_ptr() { 
            tmp.0 = &l
            return tmp.0
            return 0
        }
        global function main() { 
            tmp.1 = get_ptr()
            tmp.2 = *tmp.1
            tmp.3 = tmp.2 == 1L
            if tmp.3 jump switch_0_case__1
            tmp.4 = tmp.2 == 4L
            if tmp.4 jump switch_0_case__2
            tmp.5 = tmp.2 == 4294967300L
            if tmp.5 jump switch_0_case__3
            tmp.6 = tmp.2 == -16L
            if tmp.6 jump switch_0_case__4
            jump switch_0_default_5
            jump break_switch_0
        
          switch_0_case__1:
            return 1
        
          switch_0_case__2:
            return 2
        
          switch_0_case__3:
            return 0
        
          switch_0_case__4:
            return 3
        
          switch_0_default_5:
            return 4
        
          break_switch_0:
            return 0
        }
        static global l: Long = 4294967300L
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_function_calls_address_of_argument() {
    let src = r#"
        int addr_of_arg(int a) {
            int *ptr = &a;
            *ptr = 10;
            return a;
        }
        int main(void) {
            int result = addr_of_arg(-20);
            if (result != 10) {
                return 1;
            }
            int var = 100;
            result = addr_of_arg(var);
            if (result != 10) {
                return 2;
            }
            if (var != 100) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function addr_of_arg(a.0) { 
            tmp.0 = &a.0
            ptr.1 = tmp.0
            *ptr.1 = 10
            return a.0
            return 0
        }
        global function main() { 
            tmp.1 = - 20
            tmp.2 = addr_of_arg(tmp.1)
            result.2 = tmp.2
            tmp.3 = result.2 != 10
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            var.3 = 100
            tmp.4 = addr_of_arg(var.3)
            result.2 = tmp.4
            tmp.5 = result.2 != 10
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            tmp.6 = var.3 != 100
            if !tmp.6 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_function_calls_return_pointer() {
    let src = r#"
        
        int *return_pointer(int *in) {
            return in;
        }
        int main(void) {
            int x = 10;
            int *x_ptr = return_pointer(&x);
            if (*x_ptr != 10)
                return 1;
            x = 100;
            if (*x_ptr != 100)
                return 2;
            if (x_ptr != &x)
                return 3;
            return 0;
        }
    "#;
    let expected = r#"
        global function return_pointer(in.0) { 
            return in.0
            return 0
        }
        global function main() { 
            x.1 = 10
            tmp.0 = &x.1
            tmp.1 = return_pointer(tmp.0)
            x_ptr.2 = tmp.1
            tmp.2 = *x_ptr.2
            tmp.3 = tmp.2 != 10
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            x.1 = 100
            tmp.4 = *x_ptr.2
            tmp.5 = tmp.4 != 100
            if !tmp.5 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = &x.1
            tmp.6 = x_ptr.2 != tmp.7
            if !tmp.6 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_function_calls_update_value_through_pointer_parameter() {
    let src = r#"
        
        int update_value(int *ptr) {
            int old_val = *ptr;
            *ptr = 10;
            return old_val;
        }
        int main(void) {
            int x = 20;
            int result = update_value(&x);
            if (result != 20) {
                return 1;
            }
            if (x != 10) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function update_value(ptr.0) { 
            tmp.0 = *ptr.0
            old_val.1 = tmp.0
            *ptr.0 = 10
            return old_val.1
            return 0
        }
        global function main() { 
            x.2 = 20
            tmp.1 = &x.2
            tmp.2 = update_value(tmp.1)
            result.3 = tmp.2
            tmp.3 = result.3 != 20
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = x.2 != 10
            if !tmp.4 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_libraries_global_pointer() {
    let src = r#"
        double *d_ptr;
        int update_thru_ptr(double new_val) {
            *d_ptr = new_val;
            return 0;
        }
    "#;
    let expected = r#"
        global function update_thru_ptr(new_val.0) { 
            *d_ptr = new_val.0
            return 0
            return 0
        }
        static global d_ptr: Pointer(Double) = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_libraries_global_pointer_client() {
    let src = r#"
        extern double *d_ptr;
        int update_thru_ptr(double new_val);
        int main(void) {
            double d = 0.0;
            d_ptr = &d;
            update_thru_ptr(10.0);
            return (d == 10.0);
        }
    "#;
    let expected = r#"
        global function main() { 
            d.1 = 0D
            tmp.0 = &d.1
            d_ptr = tmp.0
            tmp.1 = update_thru_ptr(10D)
            tmp.2 = d.1 == 10D
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_libraries_static_pointer() {
    let src = r#"
        static long *long_ptr;
        long *get_pointer(void) {
            return long_ptr;
        }
        int set_pointer(long *new_ptr) {
            long_ptr = new_ptr;
            return 0;
        }
    "#;
    let expected = r#"
        global function get_pointer() { 
            return long_ptr
            return 0
        }
        global function set_pointer(new_ptr.0) { 
            long_ptr = new_ptr.0
            return 0
            return 0
        }
        static long_ptr: Pointer(Long) = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_libraries_static_pointer_client() {
    let src = r#"
        long *get_pointer(void);
        int set_pointer(long *new_ptr);
        static long private_long = 100l;
        int main(void) {
            long *initial_ptr = get_pointer();
            if (initial_ptr) {
                return 1;
            }
            set_pointer(&private_long);
            long *new_ptr = get_pointer();
            if (initial_ptr == new_ptr) {
                return 2;
            }
            if (*new_ptr != 100l) {
                return 3;
            }
            if (new_ptr != &private_long) {
                return 4;
            }
            set_pointer(0);
            if (get_pointer()) {
                return 5;
            }
            if (new_ptr != &private_long) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = get_pointer()
            initial_ptr.1 = tmp.0
            if !initial_ptr.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = &private_long
            tmp.2 = set_pointer(tmp.1)
            tmp.3 = get_pointer()
            new_ptr.2 = tmp.3
            tmp.4 = initial_ptr.1 == new_ptr.2
            if !tmp.4 jump end_if_2
            return 2
        
          end_if_2:
            tmp.5 = *new_ptr.2
            tmp.6 = tmp.5 != 100L
            if !tmp.6 jump end_if_4
            return 3
        
          end_if_4:
            tmp.8 = &private_long
            tmp.7 = new_ptr.2 != tmp.8
            if !tmp.7 jump end_if_6
            return 4
        
          end_if_6:
            tmp.9 = sign_extend 0
            tmp.10 = set_pointer(tmp.9)
            tmp.11 = get_pointer()
            if !tmp.11 jump end_if_8
            return 5
        
          end_if_8:
            tmp.13 = &private_long
            tmp.12 = new_ptr.2 != tmp.13
            if !tmp.12 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
        static private_long: Long = 100L
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_allocation_test_alignment() {
    let src = r#"
        int check_alignment(int *ptr) {
            unsigned long addr = (unsigned long) ptr;
            return (addr % 16 == 0);
        }
        int main(void)
        {
            int arr[5] = {0};
            int arr2[7] = {0};
            int arr3[2][2] = {{0}};
            if (!check_alignment(arr)) {
                return 1;
            }
            for (int i = 0; i < 5; i = i + 1)
                arr[i] = i;
            if (!check_alignment(arr2)) {
                return 2;
            }
            for (int i = 0; i < 7; i = i + 1)
                if (arr2[i])
                    return 3;
            for (int i = 0; i < 7; i = i + 1){
                arr2[i] = -i;
            }
            if (!check_alignment((int *)arr3)) {
                return 4;
            }
            for (int i = 0; i < 5; i = i + 1) {
                if (arr[i] != i) {
                    return 5;
                }
            }
            for (int i = 0; i < 2; i = i + 1)
                for (int j = 0; j < 2; j = j + 1)
                    if (arr3[i][j] != 0)
                        return 6;
            return 0;
        }
    "#;
    let expected = r#"
        global function check_alignment(ptr.0) { 
            tmp.0 = ptr.0
            addr.1 = tmp.0
            tmp.2 = sign_extend 16
            tmp.1 = addr.1 % tmp.2
            tmp.4 = sign_extend 0
            tmp.3 = tmp.1 == tmp.4
            return tmp.3
            return 0
        }
        global function main() { 
            arr.2[0] = 0
            arr.2[4] = 0
            arr.2[8] = 0
            arr.2[12] = 0
            arr.2[16] = 0
            arr2.3[0] = 0
            arr2.3[4] = 0
            arr2.3[8] = 0
            arr2.3[12] = 0
            arr2.3[16] = 0
            arr2.3[20] = 0
            arr2.3[24] = 0
            arr3.4[0] = 0
            arr3.4[4] = 0
            arr3.4[8] = 0
            arr3.4[12] = 0
            tmp.5 = &arr.2
            tmp.6 = check_alignment(tmp.5)
            tmp.7 = ! tmp.6
            if !tmp.7 jump end_if_0
            return 1
        
          end_if_0:
            i.5 = 0
        
          start_loop_0:
            tmp.8 = i.5 < 5
            if !tmp.8 jump break_loop_0
            tmp.9 = &arr.2
            tmp.10 = sign_extend i.5
            tmp.11 = add_ptr(tmp.9, index=tmp.10, scale=4)
            *tmp.11 = i.5
        
          continue_loop_0:
            tmp.12 = i.5 + 1
            i.5 = tmp.12
            jump start_loop_0
        
          break_loop_0:
            tmp.13 = &arr2.3
            tmp.14 = check_alignment(tmp.13)
            tmp.15 = ! tmp.14
            if !tmp.15 jump end_if_2
            return 2
        
          end_if_2:
            i.6 = 0
        
          start_loop_1:
            tmp.16 = i.6 < 7
            if !tmp.16 jump break_loop_1
            tmp.17 = &arr2.3
            tmp.18 = sign_extend i.6
            tmp.19 = add_ptr(tmp.17, index=tmp.18, scale=4)
            tmp.20 = *tmp.19
            if !tmp.20 jump end_if_4
            return 3
        
          end_if_4:
        
          continue_loop_1:
            tmp.21 = i.6 + 1
            i.6 = tmp.21
            jump start_loop_1
        
          break_loop_1:
            i.7 = 0
        
          start_loop_2:
            tmp.22 = i.7 < 7
            if !tmp.22 jump break_loop_2
            tmp.23 = &arr2.3
            tmp.24 = sign_extend i.7
            tmp.25 = add_ptr(tmp.23, index=tmp.24, scale=4)
            tmp.26 = - i.7
            *tmp.25 = tmp.26
        
          continue_loop_2:
            tmp.27 = i.7 + 1
            i.7 = tmp.27
            jump start_loop_2
        
          break_loop_2:
            tmp.28 = &arr3.4
            tmp.29 = tmp.28
            tmp.30 = check_alignment(tmp.29)
            tmp.31 = ! tmp.30
            if !tmp.31 jump end_if_6
            return 4
        
          end_if_6:
            i.8 = 0
        
          start_loop_3:
            tmp.32 = i.8 < 5
            if !tmp.32 jump break_loop_3
            tmp.33 = &arr.2
            tmp.34 = sign_extend i.8
            tmp.35 = add_ptr(tmp.33, index=tmp.34, scale=4)
            tmp.36 = *tmp.35
            tmp.37 = tmp.36 != i.8
            if !tmp.37 jump end_if_8
            return 5
        
          end_if_8:
        
          continue_loop_3:
            tmp.38 = i.8 + 1
            i.8 = tmp.38
            jump start_loop_3
        
          break_loop_3:
            i.9 = 0
        
          start_loop_4:
            tmp.39 = i.9 < 2
            if !tmp.39 jump break_loop_4
            j.10 = 0
        
          start_loop_5:
            tmp.40 = j.10 < 2
            if !tmp.40 jump break_loop_5
            tmp.41 = &arr3.4
            tmp.42 = sign_extend i.9
            tmp.43 = add_ptr(tmp.41, index=tmp.42, scale=8)
            tmp.44 = sign_extend j.10
            tmp.45 = add_ptr(tmp.43, index=tmp.44, scale=4)
            tmp.46 = *tmp.45
            tmp.47 = tmp.46 != 0
            if !tmp.47 jump end_if_10
            return 6
        
          end_if_10:
        
          continue_loop_5:
            tmp.48 = j.10 + 1
            j.10 = tmp.48
            jump start_loop_5
        
          break_loop_5:
        
          continue_loop_4:
            tmp.49 = i.9 + 1
            i.9 = tmp.49
            jump start_loop_4
        
          break_loop_4:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_casts_cast_array_of_pointers() {
    let src = r#"
        int main(void) {
            int simple_array[2] = {1, 2};
            int(*ptr_arr[3])[2] = {&simple_array, 0, &simple_array};
            long *other_ptr = (long *)ptr_arr;
            return (int(**)[2])other_ptr == ptr_arr;
        }
    "#;
    let expected = r#"
        global function main() { 
            simple_array.0[0] = 1
            simple_array.0[4] = 2
            tmp.0 = &simple_array.0
            ptr_arr.1[0] = tmp.0
            tmp.1 = sign_extend 0
            ptr_arr.1[8] = tmp.1
            tmp.2 = &simple_array.0
            ptr_arr.1[16] = tmp.2
            tmp.3 = &ptr_arr.1
            tmp.4 = tmp.3
            other_ptr.2 = tmp.4
            tmp.5 = other_ptr.2
            tmp.7 = &ptr_arr.1
            tmp.6 = tmp.5 == tmp.7
            return tmp.6
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_casts_implicit_and_explicit_conversions() {
    let src = r#"
        int main(void) {
            long arr[4] = {-1,-2,-3,-4};
            if (arr != (long *) arr) {
                return 1;
            }
            if ((long (*)[4]) arr != &arr) {
                return 2;
            }
            unsigned long *unsigned_arr = (unsigned long *)arr;
            if (unsigned_arr[0] != 18446744073709551615UL) {
                return 3;
            }
            if (unsigned_arr[3] != 18446744073709551612UL) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1
            tmp.1 = sign_extend tmp.0
            arr.0[0] = tmp.1
            tmp.2 = - 2
            tmp.3 = sign_extend tmp.2
            arr.0[8] = tmp.3
            tmp.4 = - 3
            tmp.5 = sign_extend tmp.4
            arr.0[16] = tmp.5
            tmp.6 = - 4
            tmp.7 = sign_extend tmp.6
            arr.0[24] = tmp.7
            tmp.8 = &arr.0
            tmp.10 = &arr.0
            tmp.9 = tmp.8 != tmp.10
            if !tmp.9 jump end_if_0
            return 1
        
          end_if_0:
            tmp.11 = &arr.0
            tmp.12 = tmp.11
            tmp.14 = &arr.0
            tmp.13 = tmp.12 != tmp.14
            if !tmp.13 jump end_if_2
            return 2
        
          end_if_2:
            tmp.15 = &arr.0
            tmp.16 = tmp.15
            unsigned_arr.1 = tmp.16
            tmp.17 = sign_extend 0
            tmp.18 = add_ptr(unsigned_arr.1, index=tmp.17, scale=8)
            tmp.19 = *tmp.18
            tmp.20 = tmp.19 != 18446744073709551615UL
            if !tmp.20 jump end_if_4
            return 3
        
          end_if_4:
            tmp.21 = sign_extend 3
            tmp.22 = add_ptr(unsigned_arr.1, index=tmp.21, scale=8)
            tmp.23 = *tmp.22
            tmp.24 = tmp.23 != 18446744073709551612UL
            if !tmp.24 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_casts_multi_dim_casts() {
    let src = r#"
        int main(void) {
            int multi_dim[2][3] = {{0, 1, 2}, {3, 4, 5}};
            int (*array_pointer)[2][3] = &multi_dim;
            int (*row_pointer)[3] = (int (*)[3]) array_pointer;
            if (row_pointer != multi_dim) {
                return 1;
            }
            row_pointer = row_pointer + 1;
            if (row_pointer[0][1] != 4) {
                return 2;
            }
            int *elem_ptr = (int *) row_pointer;
            if (*elem_ptr != 3 ){
                return 3;
            }
            elem_ptr = elem_ptr + 2;
            if (*elem_ptr != 5) {
                return 4;
            }
            row_pointer = row_pointer - 1;
            if ((int (*)[2][3]) row_pointer != array_pointer) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            multi_dim.0[0] = 0
            multi_dim.0[4] = 1
            multi_dim.0[8] = 2
            multi_dim.0[12] = 3
            multi_dim.0[16] = 4
            multi_dim.0[20] = 5
            tmp.0 = &multi_dim.0
            array_pointer.1 = tmp.0
            tmp.1 = array_pointer.1
            row_pointer.2 = tmp.1
            tmp.3 = &multi_dim.0
            tmp.2 = row_pointer.2 != tmp.3
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.5 = sign_extend 1
            tmp.4 = add_ptr(row_pointer.2, index=tmp.5, scale=12)
            row_pointer.2 = tmp.4
            tmp.6 = sign_extend 0
            tmp.7 = add_ptr(row_pointer.2, index=tmp.6, scale=12)
            tmp.8 = sign_extend 1
            tmp.9 = add_ptr(tmp.7, index=tmp.8, scale=4)
            tmp.10 = *tmp.9
            tmp.11 = tmp.10 != 4
            if !tmp.11 jump end_if_2
            return 2
        
          end_if_2:
            tmp.12 = row_pointer.2
            elem_ptr.3 = tmp.12
            tmp.13 = *elem_ptr.3
            tmp.14 = tmp.13 != 3
            if !tmp.14 jump end_if_4
            return 3
        
          end_if_4:
            tmp.16 = sign_extend 2
            tmp.15 = add_ptr(elem_ptr.3, index=tmp.16, scale=4)
            elem_ptr.3 = tmp.15
            tmp.17 = *elem_ptr.3
            tmp.18 = tmp.17 != 5
            if !tmp.18 jump end_if_6
            return 4
        
          end_if_6:
            tmp.20 = sign_extend 1
            tmp.21 = - tmp.20
            tmp.19 = add_ptr(row_pointer.2, index=tmp.21, scale=12)
            row_pointer.2 = tmp.19
            tmp.22 = row_pointer.2
            tmp.23 = tmp.22 != array_pointer.1
            if !tmp.23 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_declarators_array_as_argument() {
    let src = r#"
        int array_param(int a[5]) {
            a[4] = 0;
            return 0;
        }
        int nested_array_param(int a[2][3]) {
            a[1][1] = 1;
            return 0;
        }
        int array_param(int a[2]);
        int nested_array_param(int (*a)[3]);
        int main(void) {
            int array_param(int a[6]);
            int nested_array_param(int a[5][3]);
            int arr[8] = {8, 7, 6, 5, 4, 3, 2, 1};
            array_param(arr);
            if (arr[4]) {
                return 1;
            }
            for (int i = 0; i < 8; i = i + 1) {
                if (i != 4 && arr[i] != 8 - i)
                    return 2;
            }
            int nested_arr[4][3] = { {-1, -1, -1}, {-2, -2, -2}, {-3, -3, -3}, {-4, -4, -4}};
            nested_array_param(nested_arr);
            if (nested_arr[1][1] != 1) {
                return 3;
            }
            for (int i = 0; i < 4; i = i + 1) {
                int expected = -1 - i;
                for (int j = 0; j < 3; j = j + 1) {
                    if ((i != 1 || j != 1) &&
                        (nested_arr[i][j] != expected)) {
                            return 4;
                    }
                }
            }
            return 0;
        }
        int array_param(int *a);
    "#;
    let expected = r#"
        global function array_param(a.0) { 
            tmp.0 = sign_extend 4
            tmp.1 = add_ptr(a.0, index=tmp.0, scale=4)
            *tmp.1 = 0
            return 0
            return 0
        }
        global function nested_array_param(a.1) { 
            tmp.2 = sign_extend 1
            tmp.3 = add_ptr(a.1, index=tmp.2, scale=12)
            tmp.4 = sign_extend 1
            tmp.5 = add_ptr(tmp.3, index=tmp.4, scale=4)
            *tmp.5 = 1
            return 0
            return 0
        }
        global function main() { 
            arr.6[0] = 8
            arr.6[4] = 7
            arr.6[8] = 6
            arr.6[12] = 5
            arr.6[16] = 4
            arr.6[20] = 3
            arr.6[24] = 2
            arr.6[28] = 1
            tmp.6 = &arr.6
            tmp.7 = array_param(tmp.6)
            tmp.8 = &arr.6
            tmp.9 = sign_extend 4
            tmp.10 = add_ptr(tmp.8, index=tmp.9, scale=4)
            tmp.11 = *tmp.10
            if !tmp.11 jump end_if_0
            return 1
        
          end_if_0:
            i.7 = 0
        
          start_loop_0:
            tmp.12 = i.7 < 8
            if !tmp.12 jump break_loop_0
            tmp.13 = i.7 != 4
            if !tmp.13 jump and_false_2
            tmp.16 = &arr.6
            tmp.17 = sign_extend i.7
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=4)
            tmp.19 = *tmp.18
            tmp.21 = 8 - i.7
            tmp.20 = tmp.19 != tmp.21
            if !tmp.20 jump and_false_2
            tmp.15 = 1
            jump and_end_3
        
          and_false_2:
            tmp.15 = 0
        
          and_end_3:
            if !tmp.15 jump end_if_4
            return 2
        
          end_if_4:
        
          continue_loop_0:
            tmp.22 = i.7 + 1
            i.7 = tmp.22
            jump start_loop_0
        
          break_loop_0:
            tmp.23 = - 1
            nested_arr.8[0] = tmp.23
            tmp.24 = - 1
            nested_arr.8[4] = tmp.24
            tmp.25 = - 1
            nested_arr.8[8] = tmp.25
            tmp.26 = - 2
            nested_arr.8[12] = tmp.26
            tmp.27 = - 2
            nested_arr.8[16] = tmp.27
            tmp.28 = - 2
            nested_arr.8[20] = tmp.28
            tmp.29 = - 3
            nested_arr.8[24] = tmp.29
            tmp.30 = - 3
            nested_arr.8[28] = tmp.30
            tmp.31 = - 3
            nested_arr.8[32] = tmp.31
            tmp.32 = - 4
            nested_arr.8[36] = tmp.32
            tmp.33 = - 4
            nested_arr.8[40] = tmp.33
            tmp.34 = - 4
            nested_arr.8[44] = tmp.34
            tmp.35 = &nested_arr.8
            tmp.36 = nested_array_param(tmp.35)
            tmp.37 = &nested_arr.8
            tmp.38 = sign_extend 1
            tmp.39 = add_ptr(tmp.37, index=tmp.38, scale=12)
            tmp.40 = sign_extend 1
            tmp.41 = add_ptr(tmp.39, index=tmp.40, scale=4)
            tmp.42 = *tmp.41
            tmp.43 = tmp.42 != 1
            if !tmp.43 jump end_if_6
            return 3
        
          end_if_6:
            i.9 = 0
        
          start_loop_1:
            tmp.44 = i.9 < 4
            if !tmp.44 jump break_loop_1
            tmp.45 = - 1
            tmp.46 = tmp.45 - i.9
            expected.10 = tmp.46
            j.11 = 0
        
          start_loop_2:
            tmp.47 = j.11 < 3
            if !tmp.47 jump break_loop_2
            tmp.48 = i.9 != 1
            if tmp.48 jump or_true_8
            tmp.51 = j.11 != 1
            if tmp.51 jump or_true_8
            tmp.50 = 0
            jump or_end_9
        
          or_true_8:
            tmp.50 = 1
        
          or_end_9:
            if !tmp.50 jump and_false_10
            tmp.54 = &nested_arr.8
            tmp.55 = sign_extend i.9
            tmp.56 = add_ptr(tmp.54, index=tmp.55, scale=12)
            tmp.57 = sign_extend j.11
            tmp.58 = add_ptr(tmp.56, index=tmp.57, scale=4)
            tmp.59 = *tmp.58
            tmp.60 = tmp.59 != expected.10
            if !tmp.60 jump and_false_10
            tmp.53 = 1
            jump and_end_11
        
          and_false_10:
            tmp.53 = 0
        
          and_end_11:
            if !tmp.53 jump end_if_12
            return 4
        
          end_if_12:
        
          continue_loop_2:
            tmp.61 = j.11 + 1
            j.11 = tmp.61
            jump start_loop_2
        
          break_loop_2:
        
          continue_loop_1:
            tmp.62 = i.9 + 1
            i.9 = tmp.62
            jump start_loop_1
        
          break_loop_1:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_declarators_big_array() {
    let src = r#"
        extern int x[4294967297L][100000000];
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_declarators_equivalent_declarators() {
    let src = r#"
        long int(arr)[4] = {1, 2, 3, 4};
        int long arr[4ul];
        int (*ptr_to_arr)[3][6l];
        int((*(ptr_to_arr))[3l])[6u] = 0;
        int *array_of_pointers[3] = {0, 0, 0};
        int test_arr(void) {
            for (int i = 0; i < 4; i = i + 1) {
                if (arr[i] != i + 1) {
                    return 1;
                }
            }
            return 0;
        }
        int test_ptr_to_arr(void) {
            if (ptr_to_arr) {
                return 2;
            }
            static int nested_arr[3][6];
            ptr_to_arr = &nested_arr;
            ptr_to_arr[0][2][4] = 100;
            if (nested_arr[2][4] != 100) {
                return 3;
            }
            return 0;
        }
        int test_array_of_pointers(int *ptr) {
            extern int *((array_of_pointers)[3]);
            for (int i = 0; i < 3; i = i + 1) {
                if (array_of_pointers[i])
                    return 4;
                array_of_pointers[i] = ptr;
            }
            array_of_pointers[2][0] = 11;
            if (*ptr != 11) {
                return 5;
            }
            for (int i = 0; i < 3; i = i + 1) {
                if (array_of_pointers[i][0] != 11) {
                    return 6;
                }
            }
            return 0;
        }
        int main(void)
        {
            int check = test_arr();
            if (check) {
                return check;
            }
            check = test_ptr_to_arr();
            if (check) {
                return check;
            }
            int x = 0;
            check = test_array_of_pointers(&x);
            if (check) {
                return check;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function test_arr() { 
            i.0 = 0
        
          start_loop_0:
            tmp.0 = i.0 < 4
            if !tmp.0 jump break_loop_0
            tmp.1 = &arr
            tmp.2 = sign_extend i.0
            tmp.3 = add_ptr(tmp.1, index=tmp.2, scale=8)
            tmp.4 = *tmp.3
            tmp.6 = i.0 + 1
            tmp.7 = sign_extend tmp.6
            tmp.5 = tmp.4 != tmp.7
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
        
          continue_loop_0:
            tmp.8 = i.0 + 1
            i.0 = tmp.8
            jump start_loop_0
        
          break_loop_0:
            return 0
            return 0
        }
        global function test_ptr_to_arr() { 
            if !ptr_to_arr jump end_if_2
            return 2
        
          end_if_2:
            tmp.9 = &nested_arr.1
            ptr_to_arr = tmp.9
            tmp.10 = sign_extend 0
            tmp.11 = add_ptr(ptr_to_arr, index=tmp.10, scale=72)
            tmp.12 = sign_extend 2
            tmp.13 = add_ptr(tmp.11, index=tmp.12, scale=24)
            tmp.14 = sign_extend 4
            tmp.15 = add_ptr(tmp.13, index=tmp.14, scale=4)
            *tmp.15 = 100
            tmp.16 = &nested_arr.1
            tmp.17 = sign_extend 2
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=24)
            tmp.19 = sign_extend 4
            tmp.20 = add_ptr(tmp.18, index=tmp.19, scale=4)
            tmp.21 = *tmp.20
            tmp.22 = tmp.21 != 100
            if !tmp.22 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
        global function test_array_of_pointers(ptr.2) { 
            i.4 = 0
        
          start_loop_1:
            tmp.23 = i.4 < 3
            if !tmp.23 jump break_loop_1
            tmp.24 = &array_of_pointers
            tmp.25 = sign_extend i.4
            tmp.26 = add_ptr(tmp.24, index=tmp.25, scale=8)
            tmp.27 = *tmp.26
            if !tmp.27 jump end_if_6
            return 4
        
          end_if_6:
            tmp.28 = &array_of_pointers
            tmp.29 = sign_extend i.4
            tmp.30 = add_ptr(tmp.28, index=tmp.29, scale=8)
            *tmp.30 = ptr.2
        
          continue_loop_1:
            tmp.31 = i.4 + 1
            i.4 = tmp.31
            jump start_loop_1
        
          break_loop_1:
            tmp.32 = &array_of_pointers
            tmp.33 = sign_extend 2
            tmp.34 = add_ptr(tmp.32, index=tmp.33, scale=8)
            tmp.35 = *tmp.34
            tmp.36 = sign_extend 0
            tmp.37 = add_ptr(tmp.35, index=tmp.36, scale=4)
            *tmp.37 = 11
            tmp.38 = *ptr.2
            tmp.39 = tmp.38 != 11
            if !tmp.39 jump end_if_8
            return 5
        
          end_if_8:
            i.5 = 0
        
          start_loop_2:
            tmp.40 = i.5 < 3
            if !tmp.40 jump break_loop_2
            tmp.41 = &array_of_pointers
            tmp.42 = sign_extend i.5
            tmp.43 = add_ptr(tmp.41, index=tmp.42, scale=8)
            tmp.44 = *tmp.43
            tmp.45 = sign_extend 0
            tmp.46 = add_ptr(tmp.44, index=tmp.45, scale=4)
            tmp.47 = *tmp.46
            tmp.48 = tmp.47 != 11
            if !tmp.48 jump end_if_10
            return 6
        
          end_if_10:
        
          continue_loop_2:
            tmp.49 = i.5 + 1
            i.5 = tmp.49
            jump start_loop_2
        
          break_loop_2:
            return 0
            return 0
        }
        global function main() { 
            tmp.50 = test_arr()
            check.6 = tmp.50
            if !check.6 jump end_if_12
            return check.6
        
          end_if_12:
            tmp.51 = test_ptr_to_arr()
            check.6 = tmp.51
            if !check.6 jump end_if_14
            return check.6
        
          end_if_14:
            x.7 = 0
            tmp.52 = &x.7
            tmp.53 = test_array_of_pointers(tmp.52)
            check.6 = tmp.53
            if !check.6 jump end_if_16
            return check.6
        
          end_if_16:
            return 0
            return 0
        }
        static global arr: Array(4,Long) = [ 1L, 2L, 3L, 4L]
        static global array_of_pointers: Array(3,Pointer(Int)) = [ 0UL, 0UL, 0UL]
        static nested_arr.1: Array(3,Array(6,Int)) = zero[72]
        static global ptr_to_arr: Pointer(Array(3,Array(6,Int))) = 0UL
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_declarators_for_loop_array() {
    let src = r#"
        
        int main(void) {
            int counter = 0;
            for (int i[3] = {1, 2, 3}; counter < 3; counter = counter + 1){
                if (i[counter] != counter + 1) {
                    return 1;
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            counter.0 = 0
            i.1[0] = 1
            i.1[4] = 2
            i.1[8] = 3
        
          start_loop_0:
            tmp.0 = counter.0 < 3
            if !tmp.0 jump break_loop_0
            tmp.1 = &i.1
            tmp.2 = sign_extend counter.0
            tmp.3 = add_ptr(tmp.1, index=tmp.2, scale=4)
            tmp.4 = *tmp.3
            tmp.6 = counter.0 + 1
            tmp.5 = tmp.4 != tmp.6
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
        
          continue_loop_0:
            tmp.7 = counter.0 + 1
            counter.0 = tmp.7
            jump start_loop_0
        
          break_loop_0:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_declarators_return_nested_array() {
    let src = r#"
        int arr[3] = {1, 1, 1};
        int (*foo(int x, int y))[3] {
            arr[1] = x;
            arr[2] = y;
            return &arr;
        }
        int main(void) {
            int (*arr)[3] = foo(2, 3);
            if (arr[0][0] != 1) {
                return 1;
            }
            if (arr[0][1] != 2) {
                return 2;
            }
            if (arr[0][2] != 3) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function foo(x.0, y.1) { 
            tmp.0 = &arr
            tmp.1 = sign_extend 1
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=4)
            *tmp.2 = x.0
            tmp.3 = &arr
            tmp.4 = sign_extend 2
            tmp.5 = add_ptr(tmp.3, index=tmp.4, scale=4)
            *tmp.5 = y.1
            tmp.6 = &arr
            return tmp.6
            return 0
        }
        global function main() { 
            tmp.7 = foo(2, 3)
            arr.2 = tmp.7
            tmp.8 = sign_extend 0
            tmp.9 = add_ptr(arr.2, index=tmp.8, scale=12)
            tmp.10 = sign_extend 0
            tmp.11 = add_ptr(tmp.9, index=tmp.10, scale=4)
            tmp.12 = *tmp.11
            tmp.13 = tmp.12 != 1
            if !tmp.13 jump end_if_0
            return 1
        
          end_if_0:
            tmp.14 = sign_extend 0
            tmp.15 = add_ptr(arr.2, index=tmp.14, scale=12)
            tmp.16 = sign_extend 1
            tmp.17 = add_ptr(tmp.15, index=tmp.16, scale=4)
            tmp.18 = *tmp.17
            tmp.19 = tmp.18 != 2
            if !tmp.19 jump end_if_2
            return 2
        
          end_if_2:
            tmp.20 = sign_extend 0
            tmp.21 = add_ptr(arr.2, index=tmp.20, scale=12)
            tmp.22 = sign_extend 2
            tmp.23 = add_ptr(tmp.21, index=tmp.22, scale=4)
            tmp.24 = *tmp.23
            tmp.25 = tmp.24 != 3
            if !tmp.25 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
        static global arr: Array(3,Int) = [ 1, 1, 1]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_bitwise_subscript() {
    let src = r#"
        
        int main(void) {
            int arr[6] = {-10, 10, -11, 11, -12, 12};
            if ((arr[0] & arr[5]) != 4) {
                return 1;
            }
            if ((arr[1] | arr[4]) != -2) {
                return 2;
            }
            if ((arr[2] ^ arr[3]) != -2) {
                return 3;
            }
            arr[0] = 2041302511;
            if ((arr[0] >> arr[1]) != 1993459) {
                return 4;
            }
            if ((arr[5] << 3 ) != 96) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 10
            arr.0[0] = tmp.0
            arr.0[4] = 10
            tmp.1 = - 11
            arr.0[8] = tmp.1
            arr.0[12] = 11
            tmp.2 = - 12
            arr.0[16] = tmp.2
            arr.0[20] = 12
            tmp.3 = &arr.0
            tmp.4 = sign_extend 0
            tmp.5 = add_ptr(tmp.3, index=tmp.4, scale=4)
            tmp.6 = *tmp.5
            tmp.8 = &arr.0
            tmp.9 = sign_extend 5
            tmp.10 = add_ptr(tmp.8, index=tmp.9, scale=4)
            tmp.11 = *tmp.10
            tmp.7 = tmp.6 & tmp.11
            tmp.12 = tmp.7 != 4
            if !tmp.12 jump end_if_0
            return 1
        
          end_if_0:
            tmp.13 = &arr.0
            tmp.14 = sign_extend 1
            tmp.15 = add_ptr(tmp.13, index=tmp.14, scale=4)
            tmp.16 = *tmp.15
            tmp.18 = &arr.0
            tmp.19 = sign_extend 4
            tmp.20 = add_ptr(tmp.18, index=tmp.19, scale=4)
            tmp.21 = *tmp.20
            tmp.17 = tmp.16 | tmp.21
            tmp.23 = - 2
            tmp.22 = tmp.17 != tmp.23
            if !tmp.22 jump end_if_2
            return 2
        
          end_if_2:
            tmp.24 = &arr.0
            tmp.25 = sign_extend 2
            tmp.26 = add_ptr(tmp.24, index=tmp.25, scale=4)
            tmp.27 = *tmp.26
            tmp.29 = &arr.0
            tmp.30 = sign_extend 3
            tmp.31 = add_ptr(tmp.29, index=tmp.30, scale=4)
            tmp.32 = *tmp.31
            tmp.28 = tmp.27 ^ tmp.32
            tmp.34 = - 2
            tmp.33 = tmp.28 != tmp.34
            if !tmp.33 jump end_if_4
            return 3
        
          end_if_4:
            tmp.35 = &arr.0
            tmp.36 = sign_extend 0
            tmp.37 = add_ptr(tmp.35, index=tmp.36, scale=4)
            *tmp.37 = 2041302511
            tmp.38 = &arr.0
            tmp.39 = sign_extend 0
            tmp.40 = add_ptr(tmp.38, index=tmp.39, scale=4)
            tmp.41 = *tmp.40
            tmp.43 = &arr.0
            tmp.44 = sign_extend 1
            tmp.45 = add_ptr(tmp.43, index=tmp.44, scale=4)
            tmp.46 = *tmp.45
            tmp.42 = tmp.41 >> tmp.46
            tmp.47 = tmp.42 != 1993459
            if !tmp.47 jump end_if_6
            return 4
        
          end_if_6:
            tmp.48 = &arr.0
            tmp.49 = sign_extend 5
            tmp.50 = add_ptr(tmp.48, index=tmp.49, scale=4)
            tmp.51 = *tmp.50
            tmp.52 = tmp.51 << 3
            tmp.53 = tmp.52 != 96
            if !tmp.53 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_assign_and_increment() {
    let src = r#"
        
        int main(void) {
            int arr[4] = {-1, -2, -3, -4};
            int *ptr = arr;
            int idx = 2;
            if ((ptr++[idx++] *= 3) != -9) {
                return 1;
            }
            if (*ptr != -2) {
                return 2;
            }
            if (idx != 3) {
                return 3;
            }
            idx--;
            if ((--ptr)[3] += 4) {
                return 4;
            }
            if (arr[0] != -1 || arr[1] != -2 || arr[2] != -9 || arr[3] != 0) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 1
            arr.0[0] = tmp.0
            tmp.1 = - 2
            arr.0[4] = tmp.1
            tmp.2 = - 3
            arr.0[8] = tmp.2
            tmp.3 = - 4
            arr.0[12] = tmp.3
            tmp.4 = &arr.0
            ptr.1 = tmp.4
            idx.2 = 2
            tmp.5 = ptr.1
            tmp.6 = add_ptr(ptr.1, index=1L, scale=4)
            ptr.1 = tmp.6
            tmp.7 = idx.2
            tmp.8 = inc idx.2
            idx.2 = tmp.8
            tmp.9 = sign_extend tmp.7
            tmp.10 = add_ptr(tmp.5, index=tmp.9, scale=4)
            tmp.11 = *tmp.10
            tmp.12 = tmp.11 * 3
            *tmp.10 = tmp.12
            tmp.14 = - 9
            tmp.13 = tmp.12 != tmp.14
            if !tmp.13 jump end_if_0
            return 1
        
          end_if_0:
            tmp.15 = *ptr.1
            tmp.17 = - 2
            tmp.16 = tmp.15 != tmp.17
            if !tmp.16 jump end_if_2
            return 2
        
          end_if_2:
            tmp.18 = idx.2 != 3
            if !tmp.18 jump end_if_4
            return 3
        
          end_if_4:
            tmp.19 = idx.2
            tmp.20 = dec idx.2
            idx.2 = tmp.20
            tmp.21 = add_ptr(ptr.1, index=-1L, scale=4)
            ptr.1 = tmp.21
            tmp.22 = sign_extend 3
            tmp.23 = add_ptr(tmp.21, index=tmp.22, scale=4)
            tmp.24 = *tmp.23
            tmp.25 = tmp.24 + 4
            *tmp.23 = tmp.25
            if !tmp.25 jump end_if_6
            return 4
        
          end_if_6:
            tmp.26 = &arr.0
            tmp.27 = sign_extend 0
            tmp.28 = add_ptr(tmp.26, index=tmp.27, scale=4)
            tmp.29 = *tmp.28
            tmp.31 = - 1
            tmp.30 = tmp.29 != tmp.31
            if tmp.30 jump or_true_8
            tmp.34 = &arr.0
            tmp.35 = sign_extend 1
            tmp.36 = add_ptr(tmp.34, index=tmp.35, scale=4)
            tmp.37 = *tmp.36
            tmp.39 = - 2
            tmp.38 = tmp.37 != tmp.39
            if tmp.38 jump or_true_8
            tmp.33 = 0
            jump or_end_9
        
          or_true_8:
            tmp.33 = 1
        
          or_end_9:
            if tmp.33 jump or_true_10
            tmp.42 = &arr.0
            tmp.43 = sign_extend 2
            tmp.44 = add_ptr(tmp.42, index=tmp.43, scale=4)
            tmp.45 = *tmp.44
            tmp.47 = - 9
            tmp.46 = tmp.45 != tmp.47
            if tmp.46 jump or_true_10
            tmp.41 = 0
            jump or_end_11
        
          or_true_10:
            tmp.41 = 1
        
          or_end_11:
            if tmp.41 jump or_true_12
            tmp.50 = &arr.0
            tmp.51 = sign_extend 3
            tmp.52 = add_ptr(tmp.50, index=tmp.51, scale=4)
            tmp.53 = *tmp.52
            tmp.54 = tmp.53 != 0
            if tmp.54 jump or_true_12
            tmp.49 = 0
            jump or_end_13
        
          or_true_12:
            tmp.49 = 1
        
          or_end_13:
            if !tmp.49 jump end_if_14
            return 5
        
          end_if_14:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_assign_array_of_pointers() {
    let src = r#"
        
        int main(void) {
            static int (*array_of_pointers[3])[4] = {0, 0, 0};
            int array1[4] = {100, 101, 102, 103};
            int nested_array[2][4] = {
                {200, 201, 202, 203},
                {300, 301, 302, 303}
            };
            array_of_pointers[0] = &array1;
            array_of_pointers[1] = &nested_array[0];
            array_of_pointers[2] = &nested_array[1];
            array_of_pointers[0] += 1;
            if (array_of_pointers[0][-1][3] != 103) {
                return 1;
            }
            array_of_pointers[1] += 1;
            array_of_pointers[2] -= 1;
            if (array_of_pointers[1][0][3] != 303) {
                return 2;
            }
            if (array_of_pointers[2][0][3] != 203) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            array1.1[0] = 100
            array1.1[4] = 101
            array1.1[8] = 102
            array1.1[12] = 103
            nested_array.2[0] = 200
            nested_array.2[4] = 201
            nested_array.2[8] = 202
            nested_array.2[12] = 203
            nested_array.2[16] = 300
            nested_array.2[20] = 301
            nested_array.2[24] = 302
            nested_array.2[28] = 303
            tmp.0 = &array_of_pointers.0
            tmp.1 = sign_extend 0
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=8)
            tmp.3 = &array1.1
            *tmp.2 = tmp.3
            tmp.4 = &array_of_pointers.0
            tmp.5 = sign_extend 1
            tmp.6 = add_ptr(tmp.4, index=tmp.5, scale=8)
            tmp.7 = &nested_array.2
            tmp.8 = sign_extend 0
            tmp.9 = add_ptr(tmp.7, index=tmp.8, scale=16)
            *tmp.6 = tmp.9
            tmp.10 = &array_of_pointers.0
            tmp.11 = sign_extend 2
            tmp.12 = add_ptr(tmp.10, index=tmp.11, scale=8)
            tmp.13 = &nested_array.2
            tmp.14 = sign_extend 1
            tmp.15 = add_ptr(tmp.13, index=tmp.14, scale=16)
            *tmp.12 = tmp.15
            tmp.16 = &array_of_pointers.0
            tmp.17 = sign_extend 0
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=8)
            tmp.19 = *tmp.18
            tmp.21 = sign_extend 1
            tmp.20 = add_ptr(tmp.19, index=tmp.21, scale=16)
            *tmp.18 = tmp.20
            tmp.22 = &array_of_pointers.0
            tmp.23 = sign_extend 0
            tmp.24 = add_ptr(tmp.22, index=tmp.23, scale=8)
            tmp.25 = *tmp.24
            tmp.26 = - 1
            tmp.27 = sign_extend tmp.26
            tmp.28 = add_ptr(tmp.25, index=tmp.27, scale=16)
            tmp.29 = sign_extend 3
            tmp.30 = add_ptr(tmp.28, index=tmp.29, scale=4)
            tmp.31 = *tmp.30
            tmp.32 = tmp.31 != 103
            if !tmp.32 jump end_if_0
            return 1
        
          end_if_0:
            tmp.33 = &array_of_pointers.0
            tmp.34 = sign_extend 1
            tmp.35 = add_ptr(tmp.33, index=tmp.34, scale=8)
            tmp.36 = *tmp.35
            tmp.38 = sign_extend 1
            tmp.37 = add_ptr(tmp.36, index=tmp.38, scale=16)
            *tmp.35 = tmp.37
            tmp.39 = &array_of_pointers.0
            tmp.40 = sign_extend 2
            tmp.41 = add_ptr(tmp.39, index=tmp.40, scale=8)
            tmp.42 = *tmp.41
            tmp.44 = sign_extend 1
            tmp.45 = - tmp.44
            tmp.43 = add_ptr(tmp.42, index=tmp.45, scale=16)
            *tmp.41 = tmp.43
            tmp.46 = &array_of_pointers.0
            tmp.47 = sign_extend 1
            tmp.48 = add_ptr(tmp.46, index=tmp.47, scale=8)
            tmp.49 = *tmp.48
            tmp.50 = sign_extend 0
            tmp.51 = add_ptr(tmp.49, index=tmp.50, scale=16)
            tmp.52 = sign_extend 3
            tmp.53 = add_ptr(tmp.51, index=tmp.52, scale=4)
            tmp.54 = *tmp.53
            tmp.55 = tmp.54 != 303
            if !tmp.55 jump end_if_2
            return 2
        
          end_if_2:
            tmp.56 = &array_of_pointers.0
            tmp.57 = sign_extend 2
            tmp.58 = add_ptr(tmp.56, index=tmp.57, scale=8)
            tmp.59 = *tmp.58
            tmp.60 = sign_extend 0
            tmp.61 = add_ptr(tmp.59, index=tmp.60, scale=16)
            tmp.62 = sign_extend 3
            tmp.63 = add_ptr(tmp.61, index=tmp.62, scale=4)
            tmp.64 = *tmp.63
            tmp.65 = tmp.64 != 203
            if !tmp.65 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
        static array_of_pointers.0: Array(3,Pointer(Array(4,Int))) = [ 0UL, 0UL, 0UL]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_assign_to_nested_subscript() {
    let src = r#"
        long long_nested_arr[2][3] = {{1, 2, 3}, {4, 5, 6}};
        double dbl_nested_arr[3][2] = {{100.0, 101.0}, {102.0, 103.0}, {104.0, 105.0}};
        unsigned unsigned_index = 10;
        int main(void) {
            if ((long_nested_arr[1][unsigned_index - 8] *= -1) != -6) {
                return 1;
            }
            if (long_nested_arr[1][2] != -6) {
                return 2;
            }
            for (int i = 0; i < 2; i += 1) {
                for (int j = 0; j < 3; j += 1) {
                    if (i == 1 && j == 2) {
                        break;
                    }
                    long expected = i * 3 + j + 1;
                    if (long_nested_arr[i][j] != expected) {
                        return 3;
                    }
                }
            }
            if ((dbl_nested_arr[1][1] += 100.0) != 203.0) {
                return 4;
            }
            for (int i = 0; i < 3; i += 1) {
                for (int j = 0; j < 2; j += 1) {
                    if (i == 1 && j == 1) {
                        continue;
                    }
                    int expected = 100 + i * 2 + j;
                    if (dbl_nested_arr[i][j] != expected) {
                        return 5;
                    }
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &long_nested_arr
            tmp.1 = sign_extend 1
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=24)
            tmp.4 = 8
            tmp.3 = unsigned_index - tmp.4
            tmp.5 = zero_extend tmp.3
            tmp.6 = add_ptr(tmp.2, index=tmp.5, scale=8)
            tmp.7 = *tmp.6
            tmp.9 = - 1
            tmp.10 = sign_extend tmp.9
            tmp.8 = tmp.7 * tmp.10
            *tmp.6 = tmp.8
            tmp.12 = - 6
            tmp.13 = sign_extend tmp.12
            tmp.11 = tmp.8 != tmp.13
            if !tmp.11 jump end_if_0
            return 1
        
          end_if_0:
            tmp.14 = &long_nested_arr
            tmp.15 = sign_extend 1
            tmp.16 = add_ptr(tmp.14, index=tmp.15, scale=24)
            tmp.17 = sign_extend 2
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=8)
            tmp.19 = *tmp.18
            tmp.21 = - 6
            tmp.22 = sign_extend tmp.21
            tmp.20 = tmp.19 != tmp.22
            if !tmp.20 jump end_if_2
            return 2
        
          end_if_2:
            i.0 = 0
        
          start_loop_0:
            tmp.23 = i.0 < 2
            if !tmp.23 jump break_loop_0
            j.1 = 0
        
          start_loop_1:
            tmp.24 = j.1 < 3
            if !tmp.24 jump break_loop_1
            tmp.25 = i.0 == 1
            if !tmp.25 jump and_false_4
            tmp.28 = j.1 == 2
            if !tmp.28 jump and_false_4
            tmp.27 = 1
            jump and_end_5
        
          and_false_4:
            tmp.27 = 0
        
          and_end_5:
            if !tmp.27 jump end_if_6
            jump break_loop_1
        
          end_if_6:
            tmp.29 = i.0 * 3
            tmp.30 = tmp.29 + j.1
            tmp.31 = tmp.30 + 1
            tmp.32 = sign_extend tmp.31
            expected.2 = tmp.32
            tmp.33 = &long_nested_arr
            tmp.34 = sign_extend i.0
            tmp.35 = add_ptr(tmp.33, index=tmp.34, scale=24)
            tmp.36 = sign_extend j.1
            tmp.37 = add_ptr(tmp.35, index=tmp.36, scale=8)
            tmp.38 = *tmp.37
            tmp.39 = tmp.38 != expected.2
            if !tmp.39 jump end_if_8
            return 3
        
          end_if_8:
        
          continue_loop_1:
            tmp.40 = j.1 + 1
            j.1 = tmp.40
            jump start_loop_1
        
          break_loop_1:
        
          continue_loop_0:
            tmp.41 = i.0 + 1
            i.0 = tmp.41
            jump start_loop_0
        
          break_loop_0:
            tmp.42 = &dbl_nested_arr
            tmp.43 = sign_extend 1
            tmp.44 = add_ptr(tmp.42, index=tmp.43, scale=16)
            tmp.45 = sign_extend 1
            tmp.46 = add_ptr(tmp.44, index=tmp.45, scale=8)
            tmp.47 = *tmp.46
            tmp.48 = tmp.47 + 100D
            *tmp.46 = tmp.48
            tmp.49 = tmp.48 != 203D
            if !tmp.49 jump end_if_10
            return 4
        
          end_if_10:
            i.3 = 0
        
          start_loop_2:
            tmp.50 = i.3 < 3
            if !tmp.50 jump break_loop_2
            j.4 = 0
        
          start_loop_3:
            tmp.51 = j.4 < 2
            if !tmp.51 jump break_loop_3
            tmp.52 = i.3 == 1
            if !tmp.52 jump and_false_12
            tmp.55 = j.4 == 1
            if !tmp.55 jump and_false_12
            tmp.54 = 1
            jump and_end_13
        
          and_false_12:
            tmp.54 = 0
        
          and_end_13:
            if !tmp.54 jump end_if_14
            jump continue_loop_3
        
          end_if_14:
            tmp.57 = i.3 * 2
            tmp.56 = 100 + tmp.57
            tmp.58 = tmp.56 + j.4
            expected.5 = tmp.58
            tmp.59 = &dbl_nested_arr
            tmp.60 = sign_extend i.3
            tmp.61 = add_ptr(tmp.59, index=tmp.60, scale=16)
            tmp.62 = sign_extend j.4
            tmp.63 = add_ptr(tmp.61, index=tmp.62, scale=8)
            tmp.64 = *tmp.63
            tmp.66 = int_to_double expected.5
            tmp.65 = tmp.64 != tmp.66
            if !tmp.65 jump end_if_16
            return 5
        
          end_if_16:
        
          continue_loop_3:
            tmp.67 = j.4 + 1
            j.4 = tmp.67
            jump start_loop_3
        
          break_loop_3:
        
          continue_loop_2:
            tmp.68 = i.3 + 1
            i.3 = tmp.68
            jump start_loop_2
        
          break_loop_2:
            return 0
            return 0
        }
        static global dbl_nested_arr: Array(3,Array(2,Double)) = [ 100D, 101D, 102D, 103D, 104D, 105D]
        static global long_nested_arr: Array(2,Array(3,Long)) = [ 1L, 2L, 3L, 4L, 5L, 6L]
        static global unsigned_index: Unsigned Int = 10U
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_assign_to_subscripted_val() {
    let src = r#"
        unsigned unsigned_arr[4] = {4294967295U, 4294967294U, 4294967293U, 4294967292U};
        int idx = 2;
        long long_idx = 1;
        int main(void) {
            long_idx = -long_idx;
            unsigned_arr[1] += 2;
            if (unsigned_arr[1]) {
                return 1;
            }
            unsigned_arr[idx] -= 10.0;
            if (unsigned_arr[idx] != 4294967283U) {
                return 2;
            }
            unsigned *unsigned_ptr = unsigned_arr + 4;
            unsigned_ptr[long_idx] /= 10;
            if (unsigned_arr[3] != 429496729U) {
                return 3;
            }
            unsigned_ptr[long_idx *= 2] *= unsigned_arr[0];
            if (unsigned_arr[2] != 13) {
                return 4;
            }
            if ((unsigned_arr[idx + long_idx] %= 10) != 5) {
                return 5;
            }
            if (unsigned_arr[0] != 5u) {
                return 6;
            }
            if (unsigned_arr[1]) {
                return 7;
            }
            if (unsigned_arr[2] != 13) {
                return 8;
            }
            if (unsigned_arr[3] != 429496729U) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - long_idx
            long_idx = tmp.0
            tmp.1 = &unsigned_arr
            tmp.2 = sign_extend 1
            tmp.3 = add_ptr(tmp.1, index=tmp.2, scale=4)
            tmp.4 = *tmp.3
            tmp.6 = 2
            tmp.5 = tmp.4 + tmp.6
            *tmp.3 = tmp.5
            tmp.7 = &unsigned_arr
            tmp.8 = sign_extend 1
            tmp.9 = add_ptr(tmp.7, index=tmp.8, scale=4)
            tmp.10 = *tmp.9
            if !tmp.10 jump end_if_0
            return 1
        
          end_if_0:
            tmp.11 = &unsigned_arr
            tmp.12 = sign_extend idx
            tmp.13 = add_ptr(tmp.11, index=tmp.12, scale=4)
            tmp.14 = *tmp.13
            tmp.15 = uint_to_double tmp.14
            tmp.16 = tmp.15 - 10D
            tmp.17 = double_to_uint tmp.16
            *tmp.13 = tmp.17
            tmp.18 = double_to_uint tmp.17
            tmp.19 = &unsigned_arr
            tmp.20 = sign_extend idx
            tmp.21 = add_ptr(tmp.19, index=tmp.20, scale=4)
            tmp.22 = *tmp.21
            tmp.23 = tmp.22 != 4294967283U
            if !tmp.23 jump end_if_2
            return 2
        
          end_if_2:
            tmp.24 = &unsigned_arr
            tmp.26 = sign_extend 4
            tmp.25 = add_ptr(tmp.24, index=tmp.26, scale=4)
            unsigned_ptr.0 = tmp.25
            tmp.27 = add_ptr(unsigned_ptr.0, index=long_idx, scale=4)
            tmp.28 = *tmp.27
            tmp.30 = 10
            tmp.29 = tmp.28 / tmp.30
            *tmp.27 = tmp.29
            tmp.31 = &unsigned_arr
            tmp.32 = sign_extend 3
            tmp.33 = add_ptr(tmp.31, index=tmp.32, scale=4)
            tmp.34 = *tmp.33
            tmp.35 = tmp.34 != 429496729U
            if !tmp.35 jump end_if_4
            return 3
        
          end_if_4:
            tmp.37 = sign_extend 2
            tmp.36 = long_idx * tmp.37
            long_idx = tmp.36
            tmp.38 = add_ptr(unsigned_ptr.0, index=tmp.36, scale=4)
            tmp.39 = *tmp.38
            tmp.41 = &unsigned_arr
            tmp.42 = sign_extend 0
            tmp.43 = add_ptr(tmp.41, index=tmp.42, scale=4)
            tmp.44 = *tmp.43
            tmp.40 = tmp.39 * tmp.44
            *tmp.38 = tmp.40
            tmp.45 = &unsigned_arr
            tmp.46 = sign_extend 2
            tmp.47 = add_ptr(tmp.45, index=tmp.46, scale=4)
            tmp.48 = *tmp.47
            tmp.50 = 13
            tmp.49 = tmp.48 != tmp.50
            if !tmp.49 jump end_if_6
            return 4
        
          end_if_6:
            tmp.51 = &unsigned_arr
            tmp.52 = sign_extend idx
            tmp.53 = tmp.52 + long_idx
            tmp.54 = add_ptr(tmp.51, index=tmp.53, scale=4)
            tmp.55 = *tmp.54
            tmp.57 = 10
            tmp.56 = tmp.55 % tmp.57
            *tmp.54 = tmp.56
            tmp.59 = 5
            tmp.58 = tmp.56 != tmp.59
            if !tmp.58 jump end_if_8
            return 5
        
          end_if_8:
            tmp.60 = &unsigned_arr
            tmp.61 = sign_extend 0
            tmp.62 = add_ptr(tmp.60, index=tmp.61, scale=4)
            tmp.63 = *tmp.62
            tmp.64 = tmp.63 != 5U
            if !tmp.64 jump end_if_10
            return 6
        
          end_if_10:
            tmp.65 = &unsigned_arr
            tmp.66 = sign_extend 1
            tmp.67 = add_ptr(tmp.65, index=tmp.66, scale=4)
            tmp.68 = *tmp.67
            if !tmp.68 jump end_if_12
            return 7
        
          end_if_12:
            tmp.69 = &unsigned_arr
            tmp.70 = sign_extend 2
            tmp.71 = add_ptr(tmp.69, index=tmp.70, scale=4)
            tmp.72 = *tmp.71
            tmp.74 = 13
            tmp.73 = tmp.72 != tmp.74
            if !tmp.73 jump end_if_14
            return 8
        
          end_if_14:
            tmp.75 = &unsigned_arr
            tmp.76 = sign_extend 3
            tmp.77 = add_ptr(tmp.75, index=tmp.76, scale=4)
            tmp.78 = *tmp.77
            tmp.79 = tmp.78 != 429496729U
            if !tmp.79 jump end_if_16
            return 9
        
          end_if_16:
            return 0
            return 0
        }
        static global idx: Int = 2
        static global long_idx: Long = 1L
        static global unsigned_arr: Array(4,Unsigned Int) = [ 4294967295U, 4294967294U, 4294967293U, 4294967292U]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_bitwise_subscript() {
    let src = r#"
        
        int main(void) {
            unsigned long arr[4] = {
                2147483648l,
                18446744069414584320ul,
                9223372036854775808ul,
                1085102592571150095l
            };
            arr[1] &= arr[3];
            if (arr[1] != 1085102592318504960 ) {
                return 1;
            }
            arr[0] |= arr[1];
            if (arr[0] != 1085102594465988608ul) {
                return 2;
            }
            arr[2] ^= arr[3];
            if (arr[2] != 10308474629425925903ul) {
                return 3;
            }
            arr[3] >>= 25;
            if (arr[3] != 32338577287l) {
                return 4;
            }
            arr[1] <<= 12;
            if (arr[1] != 17361640446303928320ul) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 2147483648L
            arr.0[0] = tmp.0
            arr.0[8] = 18446744069414584320UL
            arr.0[16] = 9223372036854775808UL
            tmp.1 = 1085102592571150095L
            arr.0[24] = tmp.1
            tmp.2 = &arr.0
            tmp.3 = sign_extend 1
            tmp.4 = add_ptr(tmp.2, index=tmp.3, scale=8)
            tmp.5 = *tmp.4
            tmp.7 = &arr.0
            tmp.8 = sign_extend 3
            tmp.9 = add_ptr(tmp.7, index=tmp.8, scale=8)
            tmp.10 = *tmp.9
            tmp.6 = tmp.5 & tmp.10
            *tmp.4 = tmp.6
            tmp.11 = &arr.0
            tmp.12 = sign_extend 1
            tmp.13 = add_ptr(tmp.11, index=tmp.12, scale=8)
            tmp.14 = *tmp.13
            tmp.16 = 1085102592318504960L
            tmp.15 = tmp.14 != tmp.16
            if !tmp.15 jump end_if_0
            return 1
        
          end_if_0:
            tmp.17 = &arr.0
            tmp.18 = sign_extend 0
            tmp.19 = add_ptr(tmp.17, index=tmp.18, scale=8)
            tmp.20 = *tmp.19
            tmp.22 = &arr.0
            tmp.23 = sign_extend 1
            tmp.24 = add_ptr(tmp.22, index=tmp.23, scale=8)
            tmp.25 = *tmp.24
            tmp.21 = tmp.20 | tmp.25
            *tmp.19 = tmp.21
            tmp.26 = &arr.0
            tmp.27 = sign_extend 0
            tmp.28 = add_ptr(tmp.26, index=tmp.27, scale=8)
            tmp.29 = *tmp.28
            tmp.30 = tmp.29 != 1085102594465988608UL
            if !tmp.30 jump end_if_2
            return 2
        
          end_if_2:
            tmp.31 = &arr.0
            tmp.32 = sign_extend 2
            tmp.33 = add_ptr(tmp.31, index=tmp.32, scale=8)
            tmp.34 = *tmp.33
            tmp.36 = &arr.0
            tmp.37 = sign_extend 3
            tmp.38 = add_ptr(tmp.36, index=tmp.37, scale=8)
            tmp.39 = *tmp.38
            tmp.35 = tmp.34 ^ tmp.39
            *tmp.33 = tmp.35
            tmp.40 = &arr.0
            tmp.41 = sign_extend 2
            tmp.42 = add_ptr(tmp.40, index=tmp.41, scale=8)
            tmp.43 = *tmp.42
            tmp.44 = tmp.43 != 10308474629425925903UL
            if !tmp.44 jump end_if_4
            return 3
        
          end_if_4:
            tmp.45 = &arr.0
            tmp.46 = sign_extend 3
            tmp.47 = add_ptr(tmp.45, index=tmp.46, scale=8)
            tmp.48 = *tmp.47
            tmp.50 = sign_extend 25
            tmp.49 = tmp.48 >> tmp.50
            *tmp.47 = tmp.49
            tmp.51 = &arr.0
            tmp.52 = sign_extend 3
            tmp.53 = add_ptr(tmp.51, index=tmp.52, scale=8)
            tmp.54 = *tmp.53
            tmp.56 = 32338577287L
            tmp.55 = tmp.54 != tmp.56
            if !tmp.55 jump end_if_6
            return 4
        
          end_if_6:
            tmp.57 = &arr.0
            tmp.58 = sign_extend 1
            tmp.59 = add_ptr(tmp.57, index=tmp.58, scale=8)
            tmp.60 = *tmp.59
            tmp.62 = sign_extend 12
            tmp.61 = tmp.60 << tmp.62
            *tmp.59 = tmp.61
            tmp.63 = &arr.0
            tmp.64 = sign_extend 1
            tmp.65 = add_ptr(tmp.63, index=tmp.64, scale=8)
            tmp.66 = *tmp.65
            tmp.67 = tmp.66 != 17361640446303928320UL
            if !tmp.67 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_lval_evaluated_once() {
    let src = r#"
        int get_call_count(void) {
            static int count = 0;
            count += 1;
            return count;
        }
        int main(void) {
            int arr[4] = {10, 11, 12, 13};
            if (arr[get_call_count()] != 11) {
                return 1;
            }
            int *end_ptr = arr + 4;
            if ((end_ptr - 1)[-get_call_count()] != 11) {
                return 2;
            }
            if (get_call_count() != 3) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function get_call_count() { 
            tmp.0 = count.0 + 1
            count.0 = tmp.0
            return count.0
            return 0
        }
        global function main() { 
            arr.1[0] = 10
            arr.1[4] = 11
            arr.1[8] = 12
            arr.1[12] = 13
            tmp.1 = &arr.1
            tmp.2 = get_call_count()
            tmp.3 = sign_extend tmp.2
            tmp.4 = add_ptr(tmp.1, index=tmp.3, scale=4)
            tmp.5 = *tmp.4
            tmp.6 = tmp.5 != 11
            if !tmp.6 jump end_if_0
            return 1
        
          end_if_0:
            tmp.7 = &arr.1
            tmp.9 = sign_extend 4
            tmp.8 = add_ptr(tmp.7, index=tmp.9, scale=4)
            end_ptr.2 = tmp.8
            tmp.11 = sign_extend 1
            tmp.12 = - tmp.11
            tmp.10 = add_ptr(end_ptr.2, index=tmp.12, scale=4)
            tmp.13 = get_call_count()
            tmp.14 = - tmp.13
            tmp.15 = sign_extend tmp.14
            tmp.16 = add_ptr(tmp.10, index=tmp.15, scale=4)
            tmp.17 = *tmp.16
            tmp.18 = tmp.17 != 11
            if !tmp.18 jump end_if_2
            return 2
        
          end_if_2:
            tmp.19 = get_call_count()
            tmp.20 = tmp.19 != 3
            if !tmp.20 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
        static count.0: Int = 0
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_nested_pointer_assignment() {
    let src = r#"
        static long nested_arr[3][4][5] = {{{10, 9, 8}, {1, 2}}, {{100, 99, 98}}};
        int main(void) {
            long(*outer_ptr)[4][5] = nested_arr;
            outer_ptr += 1;
            if (outer_ptr != nested_arr + 1) {
                return 1;
            }
            if (outer_ptr[0][0][0] != 100) {
                return 2;
            }
            long(*inner_ptr)[5] =
                nested_arr[0] + 4;
            inner_ptr -= 3;
            if (inner_ptr[0][1] != 2) {
                return 3;
            }
            unsigned long idx = nested_arr[0][0][0] - 9;
            if ((inner_ptr += idx) != &nested_arr[0][2]) {
                return 4;
            }
            if ((inner_ptr[-2][1] != 9)) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &nested_arr
            outer_ptr.0 = tmp.0
            tmp.2 = sign_extend 1
            tmp.1 = add_ptr(outer_ptr.0, index=tmp.2, scale=160)
            outer_ptr.0 = tmp.1
            tmp.4 = &nested_arr
            tmp.6 = sign_extend 1
            tmp.5 = add_ptr(tmp.4, index=tmp.6, scale=160)
            tmp.3 = outer_ptr.0 != tmp.5
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.7 = sign_extend 0
            tmp.8 = add_ptr(outer_ptr.0, index=tmp.7, scale=160)
            tmp.9 = sign_extend 0
            tmp.10 = add_ptr(tmp.8, index=tmp.9, scale=40)
            tmp.11 = sign_extend 0
            tmp.12 = add_ptr(tmp.10, index=tmp.11, scale=8)
            tmp.13 = *tmp.12
            tmp.15 = sign_extend 100
            tmp.14 = tmp.13 != tmp.15
            if !tmp.14 jump end_if_2
            return 2
        
          end_if_2:
            tmp.16 = &nested_arr
            tmp.17 = sign_extend 0
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=160)
            tmp.20 = sign_extend 4
            tmp.19 = add_ptr(tmp.18, index=tmp.20, scale=40)
            inner_ptr.1 = tmp.19
            tmp.22 = sign_extend 3
            tmp.23 = - tmp.22
            tmp.21 = add_ptr(inner_ptr.1, index=tmp.23, scale=40)
            inner_ptr.1 = tmp.21
            tmp.24 = sign_extend 0
            tmp.25 = add_ptr(inner_ptr.1, index=tmp.24, scale=40)
            tmp.26 = sign_extend 1
            tmp.27 = add_ptr(tmp.25, index=tmp.26, scale=8)
            tmp.28 = *tmp.27
            tmp.30 = sign_extend 2
            tmp.29 = tmp.28 != tmp.30
            if !tmp.29 jump end_if_4
            return 3
        
          end_if_4:
            tmp.31 = &nested_arr
            tmp.32 = sign_extend 0
            tmp.33 = add_ptr(tmp.31, index=tmp.32, scale=160)
            tmp.34 = sign_extend 0
            tmp.35 = add_ptr(tmp.33, index=tmp.34, scale=40)
            tmp.36 = sign_extend 0
            tmp.37 = add_ptr(tmp.35, index=tmp.36, scale=8)
            tmp.38 = *tmp.37
            tmp.40 = sign_extend 9
            tmp.39 = tmp.38 - tmp.40
            tmp.41 = tmp.39
            idx.2 = tmp.41
            tmp.43 = idx.2
            tmp.42 = add_ptr(inner_ptr.1, index=tmp.43, scale=40)
            inner_ptr.1 = tmp.42
            tmp.45 = &nested_arr
            tmp.46 = sign_extend 0
            tmp.47 = add_ptr(tmp.45, index=tmp.46, scale=160)
            tmp.48 = sign_extend 2
            tmp.49 = add_ptr(tmp.47, index=tmp.48, scale=40)
            tmp.44 = tmp.42 != tmp.49
            if !tmp.44 jump end_if_6
            return 4
        
          end_if_6:
            tmp.50 = - 2
            tmp.51 = sign_extend tmp.50
            tmp.52 = add_ptr(inner_ptr.1, index=tmp.51, scale=40)
            tmp.53 = sign_extend 1
            tmp.54 = add_ptr(tmp.52, index=tmp.53, scale=8)
            tmp.55 = *tmp.54
            tmp.57 = sign_extend 9
            tmp.56 = tmp.55 != tmp.57
            if !tmp.56 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
        static nested_arr: Array(3,Array(4,Array(5,Long))) = [ 10L, 9L, 8L, zero[16], 1L, 2L, zero[24], zero[80], 100L, 99L, 98L, zero[16], zero[120], zero[160]]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_pointer_assignment() {
    let src = r#"
        int i = 4;
        int int_array(void) {
            int arr[6] = {1, 2, 3, 4, 5, 6};
            int *ptr = arr;
            if (*(ptr += 5) != 6) {
                return 1;
            }
            if (ptr[0] != 6) {
                 return 2;
            }
            if (ptr != arr + 5) {
                return 3;
            }
            if (*(ptr -=3) != 3) {
                return 4;
            }
            if (ptr[0] != 3) {
                return 5;
            }
            if (ptr != arr + 2) {
                return 6;
            }
            if ((ptr += i - 1) != arr + 5) {
                return 7;
            }
            if (*ptr != 6) {
                return 8;
            }
            if ((ptr -= (4294967295U + i)) != arr + 2) {
                return 9;
            }
            if (*ptr != 3) {
                return 10;
            }
            long l = 9223372036854775807l;
            if ((ptr += l - 9223372036854775806l) != arr + 3) {
                return 11;
            }
            if (*ptr != 4) {
                return 12;
            }
            return 0;
        }
        int double_array(void) {
            static double arr[6] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0};
            double *ptr = arr;
            if (*(ptr += 5) != 6) {
                return 1;
            }
            if (ptr[0] != 6) {
                 return 2;
            }
            if (ptr != arr + 5) {
                return 3;
            }
            if (*(ptr -=3) != 3) {
                return 4;
            }
            if (ptr[0] != 3) {
                return 5;
            }
            if (ptr != arr + 2) {
                return 6;
            }
            if ((ptr += i - 1) != arr + 5) {
                return 7;
            }
            if (*ptr != 6) {
                return 8;
            }
            if ((ptr -= (4294967295U + i)) != arr + 2) {
                return 9;
            }
            if (*ptr != 3) {
                return 10;
            }
            long l = 9223372036854775807l;
            if ((ptr += l - 9223372036854775806l) != arr + 3) {
                return 11;
            }
            if (*ptr != 4) {
                return 12;
            }
            return 0;
        }
        int main(void) {
            int result;
            if ((result = int_array())) {
                return result;
            }
            if ((result = double_array())) {
                return result + 12;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function int_array() { 
            arr.0[0] = 1
            arr.0[4] = 2
            arr.0[8] = 3
            arr.0[12] = 4
            arr.0[16] = 5
            arr.0[20] = 6
            tmp.0 = &arr.0
            ptr.1 = tmp.0
            tmp.2 = sign_extend 5
            tmp.1 = add_ptr(ptr.1, index=tmp.2, scale=4)
            ptr.1 = tmp.1
            tmp.3 = *tmp.1
            tmp.4 = tmp.3 != 6
            if !tmp.4 jump end_if_0
            return 1
        
          end_if_0:
            tmp.5 = sign_extend 0
            tmp.6 = add_ptr(ptr.1, index=tmp.5, scale=4)
            tmp.7 = *tmp.6
            tmp.8 = tmp.7 != 6
            if !tmp.8 jump end_if_2
            return 2
        
          end_if_2:
            tmp.10 = &arr.0
            tmp.12 = sign_extend 5
            tmp.11 = add_ptr(tmp.10, index=tmp.12, scale=4)
            tmp.9 = ptr.1 != tmp.11
            if !tmp.9 jump end_if_4
            return 3
        
          end_if_4:
            tmp.14 = sign_extend 3
            tmp.15 = - tmp.14
            tmp.13 = add_ptr(ptr.1, index=tmp.15, scale=4)
            ptr.1 = tmp.13
            tmp.16 = *tmp.13
            tmp.17 = tmp.16 != 3
            if !tmp.17 jump end_if_6
            return 4
        
          end_if_6:
            tmp.18 = sign_extend 0
            tmp.19 = add_ptr(ptr.1, index=tmp.18, scale=4)
            tmp.20 = *tmp.19
            tmp.21 = tmp.20 != 3
            if !tmp.21 jump end_if_8
            return 5
        
          end_if_8:
            tmp.23 = &arr.0
            tmp.25 = sign_extend 2
            tmp.24 = add_ptr(tmp.23, index=tmp.25, scale=4)
            tmp.22 = ptr.1 != tmp.24
            if !tmp.22 jump end_if_10
            return 6
        
          end_if_10:
            tmp.27 = i - 1
            tmp.28 = sign_extend tmp.27
            tmp.26 = add_ptr(ptr.1, index=tmp.28, scale=4)
            ptr.1 = tmp.26
            tmp.30 = &arr.0
            tmp.32 = sign_extend 5
            tmp.31 = add_ptr(tmp.30, index=tmp.32, scale=4)
            tmp.29 = tmp.26 != tmp.31
            if !tmp.29 jump end_if_12
            return 7
        
          end_if_12:
            tmp.33 = *ptr.1
            tmp.34 = tmp.33 != 6
            if !tmp.34 jump end_if_14
            return 8
        
          end_if_14:
            tmp.37 = i
            tmp.36 = 4294967295U + tmp.37
            tmp.38 = zero_extend tmp.36
            tmp.39 = - tmp.38
            tmp.35 = add_ptr(ptr.1, index=tmp.39, scale=4)
            ptr.1 = tmp.35
            tmp.41 = &arr.0
            tmp.43 = sign_extend 2
            tmp.42 = add_ptr(tmp.41, index=tmp.43, scale=4)
            tmp.40 = tmp.35 != tmp.42
            if !tmp.40 jump end_if_16
            return 9
        
          end_if_16:
            tmp.44 = *ptr.1
            tmp.45 = tmp.44 != 3
            if !tmp.45 jump end_if_18
            return 10
        
          end_if_18:
            l.2 = 9223372036854775807L
            tmp.47 = l.2 - 9223372036854775806L
            tmp.48 = tmp.47
            tmp.46 = add_ptr(ptr.1, index=tmp.48, scale=4)
            ptr.1 = tmp.46
            tmp.50 = &arr.0
            tmp.52 = sign_extend 3
            tmp.51 = add_ptr(tmp.50, index=tmp.52, scale=4)
            tmp.49 = tmp.46 != tmp.51
            if !tmp.49 jump end_if_20
            return 11
        
          end_if_20:
            tmp.53 = *ptr.1
            tmp.54 = tmp.53 != 4
            if !tmp.54 jump end_if_22
            return 12
        
          end_if_22:
            return 0
            return 0
        }
        global function double_array() { 
            tmp.55 = &arr.3
            ptr.4 = tmp.55
            tmp.57 = sign_extend 5
            tmp.56 = add_ptr(ptr.4, index=tmp.57, scale=8)
            ptr.4 = tmp.56
            tmp.58 = *tmp.56
            tmp.60 = int_to_double 6
            tmp.59 = tmp.58 != tmp.60
            if !tmp.59 jump end_if_24
            return 1
        
          end_if_24:
            tmp.61 = sign_extend 0
            tmp.62 = add_ptr(ptr.4, index=tmp.61, scale=8)
            tmp.63 = *tmp.62
            tmp.65 = int_to_double 6
            tmp.64 = tmp.63 != tmp.65
            if !tmp.64 jump end_if_26
            return 2
        
          end_if_26:
            tmp.67 = &arr.3
            tmp.69 = sign_extend 5
            tmp.68 = add_ptr(tmp.67, index=tmp.69, scale=8)
            tmp.66 = ptr.4 != tmp.68
            if !tmp.66 jump end_if_28
            return 3
        
          end_if_28:
            tmp.71 = sign_extend 3
            tmp.72 = - tmp.71
            tmp.70 = add_ptr(ptr.4, index=tmp.72, scale=8)
            ptr.4 = tmp.70
            tmp.73 = *tmp.70
            tmp.75 = int_to_double 3
            tmp.74 = tmp.73 != tmp.75
            if !tmp.74 jump end_if_30
            return 4
        
          end_if_30:
            tmp.76 = sign_extend 0
            tmp.77 = add_ptr(ptr.4, index=tmp.76, scale=8)
            tmp.78 = *tmp.77
            tmp.80 = int_to_double 3
            tmp.79 = tmp.78 != tmp.80
            if !tmp.79 jump end_if_32
            return 5
        
          end_if_32:
            tmp.82 = &arr.3
            tmp.84 = sign_extend 2
            tmp.83 = add_ptr(tmp.82, index=tmp.84, scale=8)
            tmp.81 = ptr.4 != tmp.83
            if !tmp.81 jump end_if_34
            return 6
        
          end_if_34:
            tmp.86 = i - 1
            tmp.87 = sign_extend tmp.86
            tmp.85 = add_ptr(ptr.4, index=tmp.87, scale=8)
            ptr.4 = tmp.85
            tmp.89 = &arr.3
            tmp.91 = sign_extend 5
            tmp.90 = add_ptr(tmp.89, index=tmp.91, scale=8)
            tmp.88 = tmp.85 != tmp.90
            if !tmp.88 jump end_if_36
            return 7
        
          end_if_36:
            tmp.92 = *ptr.4
            tmp.94 = int_to_double 6
            tmp.93 = tmp.92 != tmp.94
            if !tmp.93 jump end_if_38
            return 8
        
          end_if_38:
            tmp.97 = i
            tmp.96 = 4294967295U + tmp.97
            tmp.98 = zero_extend tmp.96
            tmp.99 = - tmp.98
            tmp.95 = add_ptr(ptr.4, index=tmp.99, scale=8)
            ptr.4 = tmp.95
            tmp.101 = &arr.3
            tmp.103 = sign_extend 2
            tmp.102 = add_ptr(tmp.101, index=tmp.103, scale=8)
            tmp.100 = tmp.95 != tmp.102
            if !tmp.100 jump end_if_40
            return 9
        
          end_if_40:
            tmp.104 = *ptr.4
            tmp.106 = int_to_double 3
            tmp.105 = tmp.104 != tmp.106
            if !tmp.105 jump end_if_42
            return 10
        
          end_if_42:
            l.5 = 9223372036854775807L
            tmp.108 = l.5 - 9223372036854775806L
            tmp.109 = tmp.108
            tmp.107 = add_ptr(ptr.4, index=tmp.109, scale=8)
            ptr.4 = tmp.107
            tmp.111 = &arr.3
            tmp.113 = sign_extend 3
            tmp.112 = add_ptr(tmp.111, index=tmp.113, scale=8)
            tmp.110 = tmp.107 != tmp.112
            if !tmp.110 jump end_if_44
            return 11
        
          end_if_44:
            tmp.114 = *ptr.4
            tmp.116 = int_to_double 4
            tmp.115 = tmp.114 != tmp.116
            if !tmp.115 jump end_if_46
            return 12
        
          end_if_46:
            return 0
            return 0
        }
        global function main() { 
            tmp.117 = int_array()
            result.6 = tmp.117
            if !tmp.117 jump end_if_48
            return result.6
        
          end_if_48:
            tmp.118 = double_array()
            result.6 = tmp.118
            if !tmp.118 jump end_if_50
            tmp.119 = result.6 + 12
            return tmp.119
        
          end_if_50:
            return 0
            return 0
        }
        static arr.3: Array(6,Double) = [ 1D, 2D, 3D, 4D, 5D, 6D]
        static global i: Int = 4
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_incr_and_decr_nested_pointers() {
    let src = r#"
        
        int main(void) {
            long arr[2][3][4] = {
                {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}},
                {{13, 14, 15, 16}, {17, 18, 19, 20}, {21, 22, 23, 24}}};
            long (*outer_ptr)[3][4] = arr + 1;
            if (outer_ptr-- != &arr[1]) {
                return 1;
            }
            if (outer_ptr[0][1] != arr[0][1]) {
                return 2;
            }
            if ((++outer_ptr)[0][2][3] != 24) {
                return 3;
            }
            if (outer_ptr[0][2][3] != 24) {
                return 4;
            }
            long (*inner_ptr)[4] = arr[0] + 1;
            if (inner_ptr++[0][2] != 7) {
                return 5;
            }
            if (inner_ptr[0][2] != 11) {
                return 6;
            }
            if ((--inner_ptr)[0][1] != 6) {
                return 7;
            }
            long *scalar_ptr = arr[1][2];
            if (scalar_ptr--[2] != 23) {
                return 8;
            }
            if (scalar_ptr[2] != 22) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = sign_extend 1
            arr.0[0] = tmp.0
            tmp.1 = sign_extend 2
            arr.0[8] = tmp.1
            tmp.2 = sign_extend 3
            arr.0[16] = tmp.2
            tmp.3 = sign_extend 4
            arr.0[24] = tmp.3
            tmp.4 = sign_extend 5
            arr.0[32] = tmp.4
            tmp.5 = sign_extend 6
            arr.0[40] = tmp.5
            tmp.6 = sign_extend 7
            arr.0[48] = tmp.6
            tmp.7 = sign_extend 8
            arr.0[56] = tmp.7
            tmp.8 = sign_extend 9
            arr.0[64] = tmp.8
            tmp.9 = sign_extend 10
            arr.0[72] = tmp.9
            tmp.10 = sign_extend 11
            arr.0[80] = tmp.10
            tmp.11 = sign_extend 12
            arr.0[88] = tmp.11
            tmp.12 = sign_extend 13
            arr.0[96] = tmp.12
            tmp.13 = sign_extend 14
            arr.0[104] = tmp.13
            tmp.14 = sign_extend 15
            arr.0[112] = tmp.14
            tmp.15 = sign_extend 16
            arr.0[120] = tmp.15
            tmp.16 = sign_extend 17
            arr.0[128] = tmp.16
            tmp.17 = sign_extend 18
            arr.0[136] = tmp.17
            tmp.18 = sign_extend 19
            arr.0[144] = tmp.18
            tmp.19 = sign_extend 20
            arr.0[152] = tmp.19
            tmp.20 = sign_extend 21
            arr.0[160] = tmp.20
            tmp.21 = sign_extend 22
            arr.0[168] = tmp.21
            tmp.22 = sign_extend 23
            arr.0[176] = tmp.22
            tmp.23 = sign_extend 24
            arr.0[184] = tmp.23
            tmp.24 = &arr.0
            tmp.26 = sign_extend 1
            tmp.25 = add_ptr(tmp.24, index=tmp.26, scale=96)
            outer_ptr.1 = tmp.25
            tmp.27 = outer_ptr.1
            tmp.28 = add_ptr(outer_ptr.1, index=-1L, scale=96)
            outer_ptr.1 = tmp.28
            tmp.30 = &arr.0
            tmp.31 = sign_extend 1
            tmp.32 = add_ptr(tmp.30, index=tmp.31, scale=96)
            tmp.29 = tmp.27 != tmp.32
            if !tmp.29 jump end_if_0
            return 1
        
          end_if_0:
            tmp.33 = sign_extend 0
            tmp.34 = add_ptr(outer_ptr.1, index=tmp.33, scale=96)
            tmp.35 = sign_extend 1
            tmp.36 = add_ptr(tmp.34, index=tmp.35, scale=32)
            tmp.38 = &arr.0
            tmp.39 = sign_extend 0
            tmp.40 = add_ptr(tmp.38, index=tmp.39, scale=96)
            tmp.41 = sign_extend 1
            tmp.42 = add_ptr(tmp.40, index=tmp.41, scale=32)
            tmp.37 = tmp.36 != tmp.42
            if !tmp.37 jump end_if_2
            return 2
        
          end_if_2:
            tmp.43 = add_ptr(outer_ptr.1, index=1L, scale=96)
            outer_ptr.1 = tmp.43
            tmp.44 = sign_extend 0
            tmp.45 = add_ptr(tmp.43, index=tmp.44, scale=96)
            tmp.46 = sign_extend 2
            tmp.47 = add_ptr(tmp.45, index=tmp.46, scale=32)
            tmp.48 = sign_extend 3
            tmp.49 = add_ptr(tmp.47, index=tmp.48, scale=8)
            tmp.50 = *tmp.49
            tmp.52 = sign_extend 24
            tmp.51 = tmp.50 != tmp.52
            if !tmp.51 jump end_if_4
            return 3
        
          end_if_4:
            tmp.53 = sign_extend 0
            tmp.54 = add_ptr(outer_ptr.1, index=tmp.53, scale=96)
            tmp.55 = sign_extend 2
            tmp.56 = add_ptr(tmp.54, index=tmp.55, scale=32)
            tmp.57 = sign_extend 3
            tmp.58 = add_ptr(tmp.56, index=tmp.57, scale=8)
            tmp.59 = *tmp.58
            tmp.61 = sign_extend 24
            tmp.60 = tmp.59 != tmp.61
            if !tmp.60 jump end_if_6
            return 4
        
          end_if_6:
            tmp.62 = &arr.0
            tmp.63 = sign_extend 0
            tmp.64 = add_ptr(tmp.62, index=tmp.63, scale=96)
            tmp.66 = sign_extend 1
            tmp.65 = add_ptr(tmp.64, index=tmp.66, scale=32)
            inner_ptr.2 = tmp.65
            tmp.67 = inner_ptr.2
            tmp.68 = add_ptr(inner_ptr.2, index=1L, scale=32)
            inner_ptr.2 = tmp.68
            tmp.69 = sign_extend 0
            tmp.70 = add_ptr(tmp.67, index=tmp.69, scale=32)
            tmp.71 = sign_extend 2
            tmp.72 = add_ptr(tmp.70, index=tmp.71, scale=8)
            tmp.73 = *tmp.72
            tmp.75 = sign_extend 7
            tmp.74 = tmp.73 != tmp.75
            if !tmp.74 jump end_if_8
            return 5
        
          end_if_8:
            tmp.76 = sign_extend 0
            tmp.77 = add_ptr(inner_ptr.2, index=tmp.76, scale=32)
            tmp.78 = sign_extend 2
            tmp.79 = add_ptr(tmp.77, index=tmp.78, scale=8)
            tmp.80 = *tmp.79
            tmp.82 = sign_extend 11
            tmp.81 = tmp.80 != tmp.82
            if !tmp.81 jump end_if_10
            return 6
        
          end_if_10:
            tmp.83 = add_ptr(inner_ptr.2, index=-1L, scale=32)
            inner_ptr.2 = tmp.83
            tmp.84 = sign_extend 0
            tmp.85 = add_ptr(tmp.83, index=tmp.84, scale=32)
            tmp.86 = sign_extend 1
            tmp.87 = add_ptr(tmp.85, index=tmp.86, scale=8)
            tmp.88 = *tmp.87
            tmp.90 = sign_extend 6
            tmp.89 = tmp.88 != tmp.90
            if !tmp.89 jump end_if_12
            return 7
        
          end_if_12:
            tmp.91 = &arr.0
            tmp.92 = sign_extend 1
            tmp.93 = add_ptr(tmp.91, index=tmp.92, scale=96)
            tmp.94 = sign_extend 2
            tmp.95 = add_ptr(tmp.93, index=tmp.94, scale=32)
            scalar_ptr.3 = tmp.95
            tmp.96 = scalar_ptr.3
            tmp.97 = add_ptr(scalar_ptr.3, index=-1L, scale=8)
            scalar_ptr.3 = tmp.97
            tmp.98 = sign_extend 2
            tmp.99 = add_ptr(tmp.96, index=tmp.98, scale=8)
            tmp.100 = *tmp.99
            tmp.102 = sign_extend 23
            tmp.101 = tmp.100 != tmp.102
            if !tmp.101 jump end_if_14
            return 8
        
          end_if_14:
            tmp.103 = sign_extend 2
            tmp.104 = add_ptr(scalar_ptr.3, index=tmp.103, scale=8)
            tmp.105 = *tmp.104
            tmp.107 = sign_extend 22
            tmp.106 = tmp.105 != tmp.107
            if !tmp.106 jump end_if_16
            return 9
        
          end_if_16:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_incr_and_decr_pointers() {
    let src = r#"
        
        int main(void) {
            double x[3] = {0.0, 1.0, 2.0};
            double *ptr = x;
            if (++ptr != x + 1) {
                return 1;
            }
            if (*ptr != 1.0) {
                return 2;
            }
            if (ptr++ != x + 1) {
                return 3;
            }
            if (ptr != x + 2) {
                return 4;
            }
            if (*ptr != 2.0) {
                return 5;
            }
            if (--ptr != x + 1) {
                return 6;
            }
            if (*ptr != 1.0) {
                return 7;
            }
            if (ptr-- != x + 1) {
                return 8;
            }
            if (*ptr != 0.0) {
                return 9;
            }
            if (ptr != x) {
                return 10;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0[0] = 0D
            x.0[8] = 1D
            x.0[16] = 2D
            tmp.0 = &x.0
            ptr.1 = tmp.0
            tmp.1 = add_ptr(ptr.1, index=1L, scale=8)
            ptr.1 = tmp.1
            tmp.3 = &x.0
            tmp.5 = sign_extend 1
            tmp.4 = add_ptr(tmp.3, index=tmp.5, scale=8)
            tmp.2 = tmp.1 != tmp.4
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = *ptr.1
            tmp.7 = tmp.6 != 1D
            if !tmp.7 jump end_if_2
            return 2
        
          end_if_2:
            tmp.8 = ptr.1
            tmp.9 = add_ptr(ptr.1, index=1L, scale=8)
            ptr.1 = tmp.9
            tmp.11 = &x.0
            tmp.13 = sign_extend 1
            tmp.12 = add_ptr(tmp.11, index=tmp.13, scale=8)
            tmp.10 = tmp.8 != tmp.12
            if !tmp.10 jump end_if_4
            return 3
        
          end_if_4:
            tmp.15 = &x.0
            tmp.17 = sign_extend 2
            tmp.16 = add_ptr(tmp.15, index=tmp.17, scale=8)
            tmp.14 = ptr.1 != tmp.16
            if !tmp.14 jump end_if_6
            return 4
        
          end_if_6:
            tmp.18 = *ptr.1
            tmp.19 = tmp.18 != 2D
            if !tmp.19 jump end_if_8
            return 5
        
          end_if_8:
            tmp.20 = add_ptr(ptr.1, index=-1L, scale=8)
            ptr.1 = tmp.20
            tmp.22 = &x.0
            tmp.24 = sign_extend 1
            tmp.23 = add_ptr(tmp.22, index=tmp.24, scale=8)
            tmp.21 = tmp.20 != tmp.23
            if !tmp.21 jump end_if_10
            return 6
        
          end_if_10:
            tmp.25 = *ptr.1
            tmp.26 = tmp.25 != 1D
            if !tmp.26 jump end_if_12
            return 7
        
          end_if_12:
            tmp.27 = ptr.1
            tmp.28 = add_ptr(ptr.1, index=-1L, scale=8)
            ptr.1 = tmp.28
            tmp.30 = &x.0
            tmp.32 = sign_extend 1
            tmp.31 = add_ptr(tmp.30, index=tmp.32, scale=8)
            tmp.29 = tmp.27 != tmp.31
            if !tmp.29 jump end_if_14
            return 8
        
          end_if_14:
            tmp.33 = *ptr.1
            tmp.34 = tmp.33 != 0D
            if !tmp.34 jump end_if_16
            return 9
        
          end_if_16:
            tmp.36 = &x.0
            tmp.35 = ptr.1 != tmp.36
            if !tmp.35 jump end_if_18
            return 10
        
          end_if_18:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_incr_decr_subscripted_vals() {
    let src = r#"
        int i = 2;
        int j = 1;
        int k = 0;
        int main(void) {
            int arr[3][2][2] = {
                {{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}, {{9, 10}, {11, 12}}};
            if (arr[i][j][k]++ != 11) {
                return 1;
            }
            if (arr[i][j][k] != 12) {
                return 2;
            }
            if (++arr[--i][j--][++k] != 9) {
                return 3;
            }
            if (arr[i][j][k] != 6) {
                return 4;
            }
            if (--arr[i][j][k] != 5) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            arr.0[0] = 1
            arr.0[4] = 2
            arr.0[8] = 3
            arr.0[12] = 4
            arr.0[16] = 5
            arr.0[20] = 6
            arr.0[24] = 7
            arr.0[28] = 8
            arr.0[32] = 9
            arr.0[36] = 10
            arr.0[40] = 11
            arr.0[44] = 12
            tmp.0 = &arr.0
            tmp.1 = sign_extend i
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=16)
            tmp.3 = sign_extend j
            tmp.4 = add_ptr(tmp.2, index=tmp.3, scale=8)
            tmp.5 = sign_extend k
            tmp.6 = add_ptr(tmp.4, index=tmp.5, scale=4)
            tmp.7 = *tmp.6
            tmp.8 = tmp.7
            tmp.9 = inc tmp.7
            *tmp.6 = tmp.9
            tmp.10 = tmp.8 != 11
            if !tmp.10 jump end_if_0
            return 1
        
          end_if_0:
            tmp.11 = &arr.0
            tmp.12 = sign_extend i
            tmp.13 = add_ptr(tmp.11, index=tmp.12, scale=16)
            tmp.14 = sign_extend j
            tmp.15 = add_ptr(tmp.13, index=tmp.14, scale=8)
            tmp.16 = sign_extend k
            tmp.17 = add_ptr(tmp.15, index=tmp.16, scale=4)
            tmp.18 = *tmp.17
            tmp.19 = tmp.18 != 12
            if !tmp.19 jump end_if_2
            return 2
        
          end_if_2:
            tmp.20 = &arr.0
            tmp.21 = dec i
            i = tmp.21
            tmp.22 = sign_extend tmp.21
            tmp.23 = add_ptr(tmp.20, index=tmp.22, scale=16)
            tmp.24 = j
            tmp.25 = dec j
            j = tmp.25
            tmp.26 = sign_extend tmp.24
            tmp.27 = add_ptr(tmp.23, index=tmp.26, scale=8)
            tmp.28 = inc k
            k = tmp.28
            tmp.29 = sign_extend tmp.28
            tmp.30 = add_ptr(tmp.27, index=tmp.29, scale=4)
            tmp.31 = *tmp.30
            tmp.32 = inc tmp.31
            *tmp.30 = tmp.32
            tmp.33 = tmp.32 != 9
            if !tmp.33 jump end_if_4
            return 3
        
          end_if_4:
            tmp.34 = &arr.0
            tmp.35 = sign_extend i
            tmp.36 = add_ptr(tmp.34, index=tmp.35, scale=16)
            tmp.37 = sign_extend j
            tmp.38 = add_ptr(tmp.36, index=tmp.37, scale=8)
            tmp.39 = sign_extend k
            tmp.40 = add_ptr(tmp.38, index=tmp.39, scale=4)
            tmp.41 = *tmp.40
            tmp.42 = tmp.41 != 6
            if !tmp.42 jump end_if_6
            return 4
        
          end_if_6:
            tmp.43 = &arr.0
            tmp.44 = sign_extend i
            tmp.45 = add_ptr(tmp.43, index=tmp.44, scale=16)
            tmp.46 = sign_extend j
            tmp.47 = add_ptr(tmp.45, index=tmp.46, scale=8)
            tmp.48 = sign_extend k
            tmp.49 = add_ptr(tmp.47, index=tmp.48, scale=4)
            tmp.50 = *tmp.49
            tmp.51 = dec tmp.50
            *tmp.49 = tmp.51
            tmp.52 = tmp.51 != 5
            if !tmp.52 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
        static global i: Int = 2
        static global j: Int = 1
        static global k: Int = 0
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_postfix_prefix_precedence() {
    let src = r#"
        
        int idx = 3;
        int main(void) {
            int arr[5] = {1, 2, 3, 4, 5};
            int *ptr = arr + 1;
            int result = ++ptr--[idx];
            if (result != 6) {
                return 1;
            }
            if (*ptr != 1) {
                return 2;
            }
            if (ptr != arr) {
                return 3;
            }
            if (*ptr++ != 1) {
                return 4;
            }
            if (*ptr != 2) {
                return 5;
            }
            for (int i = 0; i < 4; i++) {
                if (arr[i] != i + 1) {
                    return 6;
                }
            }
            if (arr[4] != 6) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            arr.0[0] = 1
            arr.0[4] = 2
            arr.0[8] = 3
            arr.0[12] = 4
            arr.0[16] = 5
            tmp.0 = &arr.0
            tmp.2 = sign_extend 1
            tmp.1 = add_ptr(tmp.0, index=tmp.2, scale=4)
            ptr.1 = tmp.1
            tmp.3 = ptr.1
            tmp.4 = add_ptr(ptr.1, index=-1L, scale=4)
            ptr.1 = tmp.4
            tmp.5 = sign_extend idx
            tmp.6 = add_ptr(tmp.3, index=tmp.5, scale=4)
            tmp.7 = *tmp.6
            tmp.8 = inc tmp.7
            *tmp.6 = tmp.8
            result.2 = tmp.8
            tmp.9 = result.2 != 6
            if !tmp.9 jump end_if_0
            return 1
        
          end_if_0:
            tmp.10 = *ptr.1
            tmp.11 = tmp.10 != 1
            if !tmp.11 jump end_if_2
            return 2
        
          end_if_2:
            tmp.13 = &arr.0
            tmp.12 = ptr.1 != tmp.13
            if !tmp.12 jump end_if_4
            return 3
        
          end_if_4:
            tmp.14 = ptr.1
            tmp.15 = add_ptr(ptr.1, index=1L, scale=4)
            ptr.1 = tmp.15
            tmp.16 = *tmp.14
            tmp.17 = tmp.16 != 1
            if !tmp.17 jump end_if_6
            return 4
        
          end_if_6:
            tmp.18 = *ptr.1
            tmp.19 = tmp.18 != 2
            if !tmp.19 jump end_if_8
            return 5
        
          end_if_8:
            i.3 = 0
        
          start_loop_0:
            tmp.20 = i.3 < 4
            if !tmp.20 jump break_loop_0
            tmp.21 = &arr.0
            tmp.22 = sign_extend i.3
            tmp.23 = add_ptr(tmp.21, index=tmp.22, scale=4)
            tmp.24 = *tmp.23
            tmp.26 = i.3 + 1
            tmp.25 = tmp.24 != tmp.26
            if !tmp.25 jump end_if_10
            return 6
        
          end_if_10:
        
          continue_loop_0:
            tmp.27 = i.3
            tmp.28 = inc i.3
            i.3 = tmp.28
            jump start_loop_0
        
          break_loop_0:
            tmp.29 = &arr.0
            tmp.30 = sign_extend 4
            tmp.31 = add_ptr(tmp.29, index=tmp.30, scale=4)
            tmp.32 = *tmp.31
            tmp.33 = tmp.32 != 6
            if !tmp.33 jump end_if_12
            return 7
        
          end_if_12:
            return 0
            return 0
        }
        static global idx: Int = 3
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_initialization_automatic() {
    let src = r#"
        int test_simple(void) {
            unsigned long arr[3] = {18446744073709551615UL, 9223372036854775807UL,
                                    100ul};
            return (arr[0] == 18446744073709551615UL &&
                    arr[1] == 9223372036854775807UL && arr[2] == 100ul);
        }
        int test_partial(void) {
            double arr[5] = {1.0, 123e4};
            return (arr[0] == 1.0 && arr[1] == 123e4 && !arr[2] && !arr[3] && !arr[4]);
        }
        int test_non_constant(long negative_7billion, int *ptr) {
            *ptr = 1;
            extern int three(void);
            long var = negative_7billion * three();
            long arr[5] = {
                negative_7billion,
                three() * 7l,
                -(long)*ptr,
                var + (negative_7billion ? 2 : 3)
            };
            return (arr[0] == -7000000000 && arr[1] == 21l && arr[2] == -1l &&
                    arr[3] == -20999999998l && arr[4] == 0l);
        }
        int three(void) {
            return 3;
        }
        long global_one = 1l;
        int test_type_conversion(int *ptr) {
            *ptr = -100;
            unsigned long arr[4] = {
                3458764513821589504.0,
                *ptr,
                (unsigned int)18446744073709551615UL,
                -global_one
            };
            return (arr[0] == 3458764513821589504ul &&
                    arr[1] == 18446744073709551516ul && arr[2] == 4294967295U &&
                    arr[3] == 18446744073709551615UL);
        }
        int test_preserve_stack(void) {
            int i = -1;
            int arr[3] = {global_one * 2l, global_one + three()};
            unsigned int u = 2684366905;
            if (i != -1) {
                return 0;
            }
            if (u != 2684366905) {
                return 0;
            }
            return (arr[0] == 2 && arr[1] == 4 && !arr[2]);
        }
        int main(void) {
            if (!test_simple()) {
                return 1;
            }
            if (!test_partial()) {
                return 2;
            }
            long negative_seven_billion = -7000000000l;
            int i = 0;
            if (!test_non_constant(negative_seven_billion, &i)) {
                return 3;
            }
            if (!test_type_conversion(&i)) {
                return 4;
            }
            if (!test_preserve_stack()) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function test_simple() { 
            arr.0[0] = 18446744073709551615UL
            arr.0[8] = 9223372036854775807UL
            arr.0[16] = 100UL
            tmp.0 = &arr.0
            tmp.1 = sign_extend 0
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=8)
            tmp.3 = *tmp.2
            tmp.4 = tmp.3 == 18446744073709551615UL
            if !tmp.4 jump and_false_0
            tmp.7 = &arr.0
            tmp.8 = sign_extend 1
            tmp.9 = add_ptr(tmp.7, index=tmp.8, scale=8)
            tmp.10 = *tmp.9
            tmp.11 = tmp.10 == 9223372036854775807UL
            if !tmp.11 jump and_false_0
            tmp.6 = 1
            jump and_end_1
        
          and_false_0:
            tmp.6 = 0
        
          and_end_1:
            if !tmp.6 jump and_false_2
            tmp.14 = &arr.0
            tmp.15 = sign_extend 2
            tmp.16 = add_ptr(tmp.14, index=tmp.15, scale=8)
            tmp.17 = *tmp.16
            tmp.18 = tmp.17 == 100UL
            if !tmp.18 jump and_false_2
            tmp.13 = 1
            jump and_end_3
        
          and_false_2:
            tmp.13 = 0
        
          and_end_3:
            return tmp.13
            return 0
        }
        global function test_partial() { 
            arr.1[0] = 1D
            arr.1[8] = 1230000D
            arr.1[16] = 0D
            arr.1[24] = 0D
            arr.1[32] = 0D
            tmp.19 = &arr.1
            tmp.20 = sign_extend 0
            tmp.21 = add_ptr(tmp.19, index=tmp.20, scale=8)
            tmp.22 = *tmp.21
            tmp.23 = tmp.22 == 1D
            if !tmp.23 jump and_false_4
            tmp.26 = &arr.1
            tmp.27 = sign_extend 1
            tmp.28 = add_ptr(tmp.26, index=tmp.27, scale=8)
            tmp.29 = *tmp.28
            tmp.30 = tmp.29 == 1230000D
            if !tmp.30 jump and_false_4
            tmp.25 = 1
            jump and_end_5
        
          and_false_4:
            tmp.25 = 0
        
          and_end_5:
            if !tmp.25 jump and_false_6
            tmp.33 = &arr.1
            tmp.34 = sign_extend 2
            tmp.35 = add_ptr(tmp.33, index=tmp.34, scale=8)
            tmp.36 = *tmp.35
            tmp.37 = ! tmp.36
            if !tmp.37 jump and_false_6
            tmp.32 = 1
            jump and_end_7
        
          and_false_6:
            tmp.32 = 0
        
          and_end_7:
            if !tmp.32 jump and_false_8
            tmp.40 = &arr.1
            tmp.41 = sign_extend 3
            tmp.42 = add_ptr(tmp.40, index=tmp.41, scale=8)
            tmp.43 = *tmp.42
            tmp.44 = ! tmp.43
            if !tmp.44 jump and_false_8
            tmp.39 = 1
            jump and_end_9
        
          and_false_8:
            tmp.39 = 0
        
          and_end_9:
            if !tmp.39 jump and_false_10
            tmp.47 = &arr.1
            tmp.48 = sign_extend 4
            tmp.49 = add_ptr(tmp.47, index=tmp.48, scale=8)
            tmp.50 = *tmp.49
            tmp.51 = ! tmp.50
            if !tmp.51 jump and_false_10
            tmp.46 = 1
            jump and_end_11
        
          and_false_10:
            tmp.46 = 0
        
          and_end_11:
            return tmp.46
            return 0
        }
        global function test_non_constant(negative_7billion.2, ptr.3) { 
            *ptr.3 = 1
            tmp.53 = three()
            tmp.54 = sign_extend tmp.53
            tmp.52 = negative_7billion.2 * tmp.54
            var.4 = tmp.52
            arr.5[0] = negative_7billion.2
            tmp.55 = three()
            tmp.56 = sign_extend tmp.55
            tmp.57 = tmp.56 * 7L
            arr.5[8] = tmp.57
            tmp.58 = *ptr.3
            tmp.59 = sign_extend tmp.58
            tmp.60 = - tmp.59
            arr.5[16] = tmp.60
            if !negative_7billion.2 jump else_13
            tmp.62 = 2
            jump end_if_12
        
          else_13:
            tmp.62 = 3
        
          end_if_12:
            tmp.63 = sign_extend tmp.62
            tmp.61 = var.4 + tmp.63
            arr.5[24] = tmp.61
            arr.5[32] = 0L
            tmp.64 = &arr.5
            tmp.65 = sign_extend 0
            tmp.66 = add_ptr(tmp.64, index=tmp.65, scale=8)
            tmp.67 = *tmp.66
            tmp.69 = - 7000000000L
            tmp.68 = tmp.67 == tmp.69
            if !tmp.68 jump and_false_14
            tmp.72 = &arr.5
            tmp.73 = sign_extend 1
            tmp.74 = add_ptr(tmp.72, index=tmp.73, scale=8)
            tmp.75 = *tmp.74
            tmp.76 = tmp.75 == 21L
            if !tmp.76 jump and_false_14
            tmp.71 = 1
            jump and_end_15
        
          and_false_14:
            tmp.71 = 0
        
          and_end_15:
            if !tmp.71 jump and_false_16
            tmp.79 = &arr.5
            tmp.80 = sign_extend 2
            tmp.81 = add_ptr(tmp.79, index=tmp.80, scale=8)
            tmp.82 = *tmp.81
            tmp.84 = - 1L
            tmp.83 = tmp.82 == tmp.84
            if !tmp.83 jump and_false_16
            tmp.78 = 1
            jump and_end_17
        
          and_false_16:
            tmp.78 = 0
        
          and_end_17:
            if !tmp.78 jump and_false_18
            tmp.87 = &arr.5
            tmp.88 = sign_extend 3
            tmp.89 = add_ptr(tmp.87, index=tmp.88, scale=8)
            tmp.90 = *tmp.89
            tmp.92 = - 20999999998L
            tmp.91 = tmp.90 == tmp.92
            if !tmp.91 jump and_false_18
            tmp.86 = 1
            jump and_end_19
        
          and_false_18:
            tmp.86 = 0
        
          and_end_19:
            if !tmp.86 jump and_false_20
            tmp.95 = &arr.5
            tmp.96 = sign_extend 4
            tmp.97 = add_ptr(tmp.95, index=tmp.96, scale=8)
            tmp.98 = *tmp.97
            tmp.99 = tmp.98 == 0L
            if !tmp.99 jump and_false_20
            tmp.94 = 1
            jump and_end_21
        
          and_false_20:
            tmp.94 = 0
        
          and_end_21:
            return tmp.94
            return 0
        }
        global function three() { 
            return 3
            return 0
        }
        global function test_type_conversion(ptr.6) { 
            tmp.100 = - 100
            *ptr.6 = tmp.100
            tmp.101 = double_to_uint 3458764513821589500D
            arr.7[0] = tmp.101
            tmp.102 = *ptr.6
            tmp.103 = sign_extend tmp.102
            arr.7[8] = tmp.103
            tmp.104 = truncate 18446744073709551615UL
            tmp.105 = zero_extend tmp.104
            arr.7[16] = tmp.105
            tmp.106 = - global_one
            tmp.107 = tmp.106
            arr.7[24] = tmp.107
            tmp.108 = &arr.7
            tmp.109 = sign_extend 0
            tmp.110 = add_ptr(tmp.108, index=tmp.109, scale=8)
            tmp.111 = *tmp.110
            tmp.112 = tmp.111 == 3458764513821589504UL
            if !tmp.112 jump and_false_22
            tmp.115 = &arr.7
            tmp.116 = sign_extend 1
            tmp.117 = add_ptr(tmp.115, index=tmp.116, scale=8)
            tmp.118 = *tmp.117
            tmp.119 = tmp.118 == 18446744073709551516UL
            if !tmp.119 jump and_false_22
            tmp.114 = 1
            jump and_end_23
        
          and_false_22:
            tmp.114 = 0
        
          and_end_23:
            if !tmp.114 jump and_false_24
            tmp.122 = &arr.7
            tmp.123 = sign_extend 2
            tmp.124 = add_ptr(tmp.122, index=tmp.123, scale=8)
            tmp.125 = *tmp.124
            tmp.127 = zero_extend 4294967295U
            tmp.126 = tmp.125 == tmp.127
            if !tmp.126 jump and_false_24
            tmp.121 = 1
            jump and_end_25
        
          and_false_24:
            tmp.121 = 0
        
          and_end_25:
            if !tmp.121 jump and_false_26
            tmp.130 = &arr.7
            tmp.131 = sign_extend 3
            tmp.132 = add_ptr(tmp.130, index=tmp.131, scale=8)
            tmp.133 = *tmp.132
            tmp.134 = tmp.133 == 18446744073709551615UL
            if !tmp.134 jump and_false_26
            tmp.129 = 1
            jump and_end_27
        
          and_false_26:
            tmp.129 = 0
        
          and_end_27:
            return tmp.129
            return 0
        }
        global function test_preserve_stack() { 
            tmp.135 = - 1
            i.8 = tmp.135
            tmp.136 = global_one * 2L
            tmp.137 = truncate tmp.136
            arr.9[0] = tmp.137
            tmp.139 = three()
            tmp.140 = sign_extend tmp.139
            tmp.138 = global_one + tmp.140
            tmp.141 = truncate tmp.138
            arr.9[4] = tmp.141
            arr.9[8] = 0
            tmp.142 = truncate 2684366905L
            u.10 = tmp.142
            tmp.144 = - 1
            tmp.143 = i.8 != tmp.144
            if !tmp.143 jump end_if_28
            return 0
        
          end_if_28:
            tmp.145 = zero_extend u.10
            tmp.146 = tmp.145 != 2684366905L
            if !tmp.146 jump end_if_30
            return 0
        
          end_if_30:
            tmp.147 = &arr.9
            tmp.148 = sign_extend 0
            tmp.149 = add_ptr(tmp.147, index=tmp.148, scale=4)
            tmp.150 = *tmp.149
            tmp.151 = tmp.150 == 2
            if !tmp.151 jump and_false_32
            tmp.154 = &arr.9
            tmp.155 = sign_extend 1
            tmp.156 = add_ptr(tmp.154, index=tmp.155, scale=4)
            tmp.157 = *tmp.156
            tmp.158 = tmp.157 == 4
            if !tmp.158 jump and_false_32
            tmp.153 = 1
            jump and_end_33
        
          and_false_32:
            tmp.153 = 0
        
          and_end_33:
            if !tmp.153 jump and_false_34
            tmp.161 = &arr.9
            tmp.162 = sign_extend 2
            tmp.163 = add_ptr(tmp.161, index=tmp.162, scale=4)
            tmp.164 = *tmp.163
            tmp.165 = ! tmp.164
            if !tmp.165 jump and_false_34
            tmp.160 = 1
            jump and_end_35
        
          and_false_34:
            tmp.160 = 0
        
          and_end_35:
            return tmp.160
            return 0
        }
        global function main() { 
            tmp.166 = test_simple()
            tmp.167 = ! tmp.166
            if !tmp.167 jump end_if_36
            return 1
        
          end_if_36:
            tmp.168 = test_partial()
            tmp.169 = ! tmp.168
            if !tmp.169 jump end_if_38
            return 2
        
          end_if_38:
            tmp.170 = - 7000000000L
            negative_seven_billion.11 = tmp.170
            i.12 = 0
            tmp.171 = &i.12
            tmp.172 = test_non_constant(negative_seven_billion.11, tmp.171)
            tmp.173 = ! tmp.172
            if !tmp.173 jump end_if_40
            return 3
        
          end_if_40:
            tmp.174 = &i.12
            tmp.175 = test_type_conversion(tmp.174)
            tmp.176 = ! tmp.175
            if !tmp.176 jump end_if_42
            return 4
        
          end_if_42:
            tmp.177 = test_preserve_stack()
            tmp.178 = ! tmp.177
            if !tmp.178 jump end_if_44
            return 5
        
          end_if_44:
            return 0
            return 0
        }
        static global global_one: Long = 1L
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_initialization_automatic_nested() {
    let src = r#"
        int test_simple(void) {
            int arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
            for (int i = 0; i < 3; i = i + 1) {
                for (int j = 0; j < 3; j = j + 1) {
                    if (arr[i][j] != i * 3 + j + 1) {
                        return 0;
                    }
                }
            }
            return 1;
        }
        int test_partial(void) {
            int first_half_only[4][2][6] = {
                {{1, 2, 3}},
                {{4, 5, 6}}
            };
            int expected = 1;
            for (int i = 0; i < 4; i = i + 1) {
                for (int j = 0; j < 2; j = j + 1) {
                    for (int k = 0; k < 6; k = k + 1) {
                        int val = first_half_only[i][j][k];
                        if (i > 1 || j > 0 || k > 2) {
                            if (val) {
                                return 0;
                            }
                        } else {
                            if (val != expected) {
                                return 0;
                            }
                            expected = expected + 1;
                        }
                    }
                }
            }
            return 1;
        }
        int test_non_constant_and_type_conversion(void) {
            extern unsigned int three(void);
            static int x = 2000;
            int negative_four = -4;
            int *ptr = &negative_four;
            double arr[3][2] = {
                {x, x / *ptr},
                {three()},
            };
            if (arr[0][0] != 2000.0 || arr[0][1] != -500.0 || arr[1][0] != 3.0) {
                return 0;
            }
            if (arr[1][1] || arr[2][0] || arr[2][1]) {
                return 0;
            }
            return 1;
        }
        unsigned int three(void) {
            return 3u;
        }
        long one = 1l;
        int test_preserve_stack(void) {
            int i = -1;
            int arr[3][1] = {{one * 2l}, {one + three()}};
            unsigned int u = 2684366905;
            if (i != -1) {
                return 0;
            }
            if (u != 2684366905) {
                return 0;
            }
            if (arr[0][0] != 2 || arr[1][0] != 4 || arr[2][0] != 0) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_simple()) {
                return 1;
            }
            if (!test_partial()) {
                return 2;
            }
            if (!test_non_constant_and_type_conversion()) {
                return 3;
            }
            if (!test_preserve_stack()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function test_simple() { 
            arr.0[0] = 1
            arr.0[4] = 2
            arr.0[8] = 3
            arr.0[12] = 4
            arr.0[16] = 5
            arr.0[20] = 6
            arr.0[24] = 7
            arr.0[28] = 8
            arr.0[32] = 9
            i.1 = 0
        
          start_loop_0:
            tmp.0 = i.1 < 3
            if !tmp.0 jump break_loop_0
            j.2 = 0
        
          start_loop_1:
            tmp.1 = j.2 < 3
            if !tmp.1 jump break_loop_1
            tmp.2 = &arr.0
            tmp.3 = sign_extend i.1
            tmp.4 = add_ptr(tmp.2, index=tmp.3, scale=12)
            tmp.5 = sign_extend j.2
            tmp.6 = add_ptr(tmp.4, index=tmp.5, scale=4)
            tmp.7 = *tmp.6
            tmp.9 = i.1 * 3
            tmp.10 = tmp.9 + j.2
            tmp.11 = tmp.10 + 1
            tmp.8 = tmp.7 != tmp.11
            if !tmp.8 jump end_if_0
            return 0
        
          end_if_0:
        
          continue_loop_1:
            tmp.12 = j.2 + 1
            j.2 = tmp.12
            jump start_loop_1
        
          break_loop_1:
        
          continue_loop_0:
            tmp.13 = i.1 + 1
            i.1 = tmp.13
            jump start_loop_0
        
          break_loop_0:
            return 1
            return 0
        }
        global function test_partial() { 
            first_half_only.3[0] = 1
            first_half_only.3[4] = 2
            first_half_only.3[8] = 3
            first_half_only.3[12] = 0
            first_half_only.3[16] = 0
            first_half_only.3[20] = 0
            first_half_only.3[24] = 0
            first_half_only.3[28] = 0
            first_half_only.3[32] = 0
            first_half_only.3[36] = 0
            first_half_only.3[40] = 0
            first_half_only.3[44] = 0
            first_half_only.3[48] = 4
            first_half_only.3[52] = 5
            first_half_only.3[56] = 6
            first_half_only.3[60] = 0
            first_half_only.3[64] = 0
            first_half_only.3[68] = 0
            first_half_only.3[72] = 0
            first_half_only.3[76] = 0
            first_half_only.3[80] = 0
            first_half_only.3[84] = 0
            first_half_only.3[88] = 0
            first_half_only.3[92] = 0
            first_half_only.3[96] = 0
            first_half_only.3[100] = 0
            first_half_only.3[104] = 0
            first_half_only.3[108] = 0
            first_half_only.3[112] = 0
            first_half_only.3[116] = 0
            first_half_only.3[120] = 0
            first_half_only.3[124] = 0
            first_half_only.3[128] = 0
            first_half_only.3[132] = 0
            first_half_only.3[136] = 0
            first_half_only.3[140] = 0
            first_half_only.3[144] = 0
            first_half_only.3[148] = 0
            first_half_only.3[152] = 0
            first_half_only.3[156] = 0
            first_half_only.3[160] = 0
            first_half_only.3[164] = 0
            first_half_only.3[168] = 0
            first_half_only.3[172] = 0
            first_half_only.3[176] = 0
            first_half_only.3[180] = 0
            first_half_only.3[184] = 0
            first_half_only.3[188] = 0
            expected.4 = 1
            i.5 = 0
        
          start_loop_2:
            tmp.14 = i.5 < 4
            if !tmp.14 jump break_loop_2
            j.6 = 0
        
          start_loop_3:
            tmp.15 = j.6 < 2
            if !tmp.15 jump break_loop_3
            k.7 = 0
        
          start_loop_4:
            tmp.16 = k.7 < 6
            if !tmp.16 jump break_loop_4
            tmp.17 = &first_half_only.3
            tmp.18 = sign_extend i.5
            tmp.19 = add_ptr(tmp.17, index=tmp.18, scale=48)
            tmp.20 = sign_extend j.6
            tmp.21 = add_ptr(tmp.19, index=tmp.20, scale=24)
            tmp.22 = sign_extend k.7
            tmp.23 = add_ptr(tmp.21, index=tmp.22, scale=4)
            tmp.24 = *tmp.23
            val.8 = tmp.24
            tmp.25 = i.5 > 1
            if tmp.25 jump or_true_2
            tmp.28 = j.6 > 0
            if tmp.28 jump or_true_2
            tmp.27 = 0
            jump or_end_3
        
          or_true_2:
            tmp.27 = 1
        
          or_end_3:
            if tmp.27 jump or_true_4
            tmp.31 = k.7 > 2
            if tmp.31 jump or_true_4
            tmp.30 = 0
            jump or_end_5
        
          or_true_4:
            tmp.30 = 1
        
          or_end_5:
            if !tmp.30 jump else_7
            if !val.8 jump end_if_8
            return 0
        
          end_if_8:
            jump end_if_6
        
          else_7:
            tmp.32 = val.8 != expected.4
            if !tmp.32 jump end_if_10
            return 0
        
          end_if_10:
            tmp.33 = expected.4 + 1
            expected.4 = tmp.33
        
          end_if_6:
        
          continue_loop_4:
            tmp.34 = k.7 + 1
            k.7 = tmp.34
            jump start_loop_4
        
          break_loop_4:
        
          continue_loop_3:
            tmp.35 = j.6 + 1
            j.6 = tmp.35
            jump start_loop_3
        
          break_loop_3:
        
          continue_loop_2:
            tmp.36 = i.5 + 1
            i.5 = tmp.36
            jump start_loop_2
        
          break_loop_2:
            return 1
            return 0
        }
        global function test_non_constant_and_type_conversion() { 
            tmp.37 = - 4
            negative_four.10 = tmp.37
            tmp.38 = &negative_four.10
            ptr.11 = tmp.38
            tmp.39 = int_to_double x.9
            arr.12[0] = tmp.39
            tmp.41 = *ptr.11
            tmp.40 = x.9 / tmp.41
            tmp.42 = int_to_double tmp.40
            arr.12[8] = tmp.42
            tmp.43 = three()
            tmp.44 = uint_to_double tmp.43
            arr.12[16] = tmp.44
            arr.12[24] = 0D
            arr.12[32] = 0D
            arr.12[40] = 0D
            tmp.45 = &arr.12
            tmp.46 = sign_extend 0
            tmp.47 = add_ptr(tmp.45, index=tmp.46, scale=16)
            tmp.48 = sign_extend 0
            tmp.49 = add_ptr(tmp.47, index=tmp.48, scale=8)
            tmp.50 = *tmp.49
            tmp.51 = tmp.50 != 2000D
            if tmp.51 jump or_true_12
            tmp.54 = &arr.12
            tmp.55 = sign_extend 0
            tmp.56 = add_ptr(tmp.54, index=tmp.55, scale=16)
            tmp.57 = sign_extend 1
            tmp.58 = add_ptr(tmp.56, index=tmp.57, scale=8)
            tmp.59 = *tmp.58
            tmp.61 = - 500D
            tmp.60 = tmp.59 != tmp.61
            if tmp.60 jump or_true_12
            tmp.53 = 0
            jump or_end_13
        
          or_true_12:
            tmp.53 = 1
        
          or_end_13:
            if tmp.53 jump or_true_14
            tmp.64 = &arr.12
            tmp.65 = sign_extend 1
            tmp.66 = add_ptr(tmp.64, index=tmp.65, scale=16)
            tmp.67 = sign_extend 0
            tmp.68 = add_ptr(tmp.66, index=tmp.67, scale=8)
            tmp.69 = *tmp.68
            tmp.70 = tmp.69 != 3D
            if tmp.70 jump or_true_14
            tmp.63 = 0
            jump or_end_15
        
          or_true_14:
            tmp.63 = 1
        
          or_end_15:
            if !tmp.63 jump end_if_16
            return 0
        
          end_if_16:
            tmp.71 = &arr.12
            tmp.72 = sign_extend 1
            tmp.73 = add_ptr(tmp.71, index=tmp.72, scale=16)
            tmp.74 = sign_extend 1
            tmp.75 = add_ptr(tmp.73, index=tmp.74, scale=8)
            tmp.76 = *tmp.75
            if tmp.76 jump or_true_18
            tmp.79 = &arr.12
            tmp.80 = sign_extend 2
            tmp.81 = add_ptr(tmp.79, index=tmp.80, scale=16)
            tmp.82 = sign_extend 0
            tmp.83 = add_ptr(tmp.81, index=tmp.82, scale=8)
            tmp.84 = *tmp.83
            if tmp.84 jump or_true_18
            tmp.78 = 0
            jump or_end_19
        
          or_true_18:
            tmp.78 = 1
        
          or_end_19:
            if tmp.78 jump or_true_20
            tmp.87 = &arr.12
            tmp.88 = sign_extend 2
            tmp.89 = add_ptr(tmp.87, index=tmp.88, scale=16)
            tmp.90 = sign_extend 1
            tmp.91 = add_ptr(tmp.89, index=tmp.90, scale=8)
            tmp.92 = *tmp.91
            if tmp.92 jump or_true_20
            tmp.86 = 0
            jump or_end_21
        
          or_true_20:
            tmp.86 = 1
        
          or_end_21:
            if !tmp.86 jump end_if_22
            return 0
        
          end_if_22:
            return 1
            return 0
        }
        global function three() { 
            return 3U
            return 0
        }
        global function test_preserve_stack() { 
            tmp.93 = - 1
            i.13 = tmp.93
            tmp.94 = one * 2L
            tmp.95 = truncate tmp.94
            arr.14[0] = tmp.95
            tmp.97 = three()
            tmp.98 = zero_extend tmp.97
            tmp.96 = one + tmp.98
            tmp.99 = truncate tmp.96
            arr.14[4] = tmp.99
            arr.14[8] = 0
            tmp.100 = truncate 2684366905L
            u.15 = tmp.100
            tmp.102 = - 1
            tmp.101 = i.13 != tmp.102
            if !tmp.101 jump end_if_24
            return 0
        
          end_if_24:
            tmp.103 = zero_extend u.15
            tmp.104 = tmp.103 != 2684366905L
            if !tmp.104 jump end_if_26
            return 0
        
          end_if_26:
            tmp.105 = &arr.14
            tmp.106 = sign_extend 0
            tmp.107 = add_ptr(tmp.105, index=tmp.106, scale=4)
            tmp.108 = sign_extend 0
            tmp.109 = add_ptr(tmp.107, index=tmp.108, scale=4)
            tmp.110 = *tmp.109
            tmp.111 = tmp.110 != 2
            if tmp.111 jump or_true_28
            tmp.114 = &arr.14
            tmp.115 = sign_extend 1
            tmp.116 = add_ptr(tmp.114, index=tmp.115, scale=4)
            tmp.117 = sign_extend 0
            tmp.118 = add_ptr(tmp.116, index=tmp.117, scale=4)
            tmp.119 = *tmp.118
            tmp.120 = tmp.119 != 4
            if tmp.120 jump or_true_28
            tmp.113 = 0
            jump or_end_29
        
          or_true_28:
            tmp.113 = 1
        
          or_end_29:
            if tmp.113 jump or_true_30
            tmp.123 = &arr.14
            tmp.124 = sign_extend 2
            tmp.125 = add_ptr(tmp.123, index=tmp.124, scale=4)
            tmp.126 = sign_extend 0
            tmp.127 = add_ptr(tmp.125, index=tmp.126, scale=4)
            tmp.128 = *tmp.127
            tmp.129 = tmp.128 != 0
            if tmp.129 jump or_true_30
            tmp.122 = 0
            jump or_end_31
        
          or_true_30:
            tmp.122 = 1
        
          or_end_31:
            if !tmp.122 jump end_if_32
            return 0
        
          end_if_32:
            return 1
            return 0
        }
        global function main() { 
            tmp.130 = test_simple()
            tmp.131 = ! tmp.130
            if !tmp.131 jump end_if_34
            return 1
        
          end_if_34:
            tmp.132 = test_partial()
            tmp.133 = ! tmp.132
            if !tmp.133 jump end_if_36
            return 2
        
          end_if_36:
            tmp.134 = test_non_constant_and_type_conversion()
            tmp.135 = ! tmp.134
            if !tmp.135 jump end_if_38
            return 3
        
          end_if_38:
            tmp.136 = test_preserve_stack()
            tmp.137 = ! tmp.136
            if !tmp.137 jump end_if_40
            return 4
        
          end_if_40:
            return 0
            return 0
        }
        static global one: Long = 1L
        static x.9: Int = 2000
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_initialization_static() {
    let src = r#"
        double double_arr[3] = {1.0, 2.0, 3.0};
        int check_double_arr(double *arr) {
            if (arr[0] != 1.0) {
                return 1;
            }
            if (arr[1] != 2.0) {
                return 2;
            }
            if (arr[2] != 3.0) {
                return 3;
            }
            return 0;
        }
        unsigned uint_arr[5] = {
            1u,
            0u,
            2147497230u,
        };
        int check_uint_arr(unsigned *arr) {
            if (arr[0] != 1u) {
                return 4;
            }
            if (arr[1]) {
                return 5;
            }
            if (arr[2] != 2147497230u) {
                return 6;
            }
            if (arr[3] || arr[4]) {
                return 7;
            }
            return 0;
        }
        long long_arr[1000];
        int check_long_arr(long *arr) {
            for (int i = 0; i < 1000; i = i + 1) {
                if (arr[i]) {
                    return 8;
                }
            }
            return 0;
        }
        unsigned long ulong_arr[4] = {
            100.0, 11, 12345l, 4294967295U
        };
        int check_ulong_arr(unsigned long *arr) {
            if (arr[0] != 100ul) {
                return 9;
            }
            if (arr[1] != 11ul) {
                return 10;
            }
            if (arr[2] != 12345ul) {
                return 11;
            }
            if (arr[3] != 4294967295Ul) {
                return 12;
            }
            return 0;
        }
        int test_global(void) {
            int check = check_double_arr(double_arr);
            if (check) {
                return check;
            }
            check = check_uint_arr(uint_arr);
            if (check) {
                return check;
            }
            check = check_long_arr(long_arr);
            if (check) {
                return check;
            }
            check = check_ulong_arr(ulong_arr);
            if (check) {
                return check;
            }
            return 0;
        }
        int test_local(void) {
            double local_double_arr[3] = {1.0, 2.0, 3.0};
            static unsigned local_uint_arr[5] = {
                1u,
                0u,
                2147497230u,
            };
            static long local_long_arr[1000];
            static unsigned long local_ulong_arr[4] = {
                100.0, 11, 12345l, 4294967295U
            };
            int check = check_double_arr(local_double_arr);
            if (check) {
                return 100 + check;
            }
            check = check_uint_arr(local_uint_arr);
            if (check) {
                return 100 + check;
            }
            check = check_long_arr(local_long_arr);
            if (check) {
                return 100 + check;
            }
            check = check_ulong_arr(local_ulong_arr);
            if (check) {
                return 100 + check;
            }
            return 0;
        }
        int main(void) {
            int check = test_global();
            if (check) {
                return check;
            }
            return test_local();
        }
    "#;
    let expected = r#"
        global function check_double_arr(arr.0) { 
            tmp.0 = sign_extend 0
            tmp.1 = add_ptr(arr.0, index=tmp.0, scale=8)
            tmp.2 = *tmp.1
            tmp.3 = tmp.2 != 1D
            if !tmp.3 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = sign_extend 1
            tmp.5 = add_ptr(arr.0, index=tmp.4, scale=8)
            tmp.6 = *tmp.5
            tmp.7 = tmp.6 != 2D
            if !tmp.7 jump end_if_2
            return 2
        
          end_if_2:
            tmp.8 = sign_extend 2
            tmp.9 = add_ptr(arr.0, index=tmp.8, scale=8)
            tmp.10 = *tmp.9
            tmp.11 = tmp.10 != 3D
            if !tmp.11 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
        global function check_uint_arr(arr.1) { 
            tmp.12 = sign_extend 0
            tmp.13 = add_ptr(arr.1, index=tmp.12, scale=4)
            tmp.14 = *tmp.13
            tmp.15 = tmp.14 != 1U
            if !tmp.15 jump end_if_6
            return 4
        
          end_if_6:
            tmp.16 = sign_extend 1
            tmp.17 = add_ptr(arr.1, index=tmp.16, scale=4)
            tmp.18 = *tmp.17
            if !tmp.18 jump end_if_8
            return 5
        
          end_if_8:
            tmp.19 = sign_extend 2
            tmp.20 = add_ptr(arr.1, index=tmp.19, scale=4)
            tmp.21 = *tmp.20
            tmp.22 = tmp.21 != 2147497230U
            if !tmp.22 jump end_if_10
            return 6
        
          end_if_10:
            tmp.23 = sign_extend 3
            tmp.24 = add_ptr(arr.1, index=tmp.23, scale=4)
            tmp.25 = *tmp.24
            if tmp.25 jump or_true_12
            tmp.28 = sign_extend 4
            tmp.29 = add_ptr(arr.1, index=tmp.28, scale=4)
            tmp.30 = *tmp.29
            if tmp.30 jump or_true_12
            tmp.27 = 0
            jump or_end_13
        
          or_true_12:
            tmp.27 = 1
        
          or_end_13:
            if !tmp.27 jump end_if_14
            return 7
        
          end_if_14:
            return 0
            return 0
        }
        global function check_long_arr(arr.2) { 
            i.3 = 0
        
          start_loop_0:
            tmp.31 = i.3 < 1000
            if !tmp.31 jump break_loop_0
            tmp.32 = sign_extend i.3
            tmp.33 = add_ptr(arr.2, index=tmp.32, scale=8)
            tmp.34 = *tmp.33
            if !tmp.34 jump end_if_16
            return 8
        
          end_if_16:
        
          continue_loop_0:
            tmp.35 = i.3 + 1
            i.3 = tmp.35
            jump start_loop_0
        
          break_loop_0:
            return 0
            return 0
        }
        global function check_ulong_arr(arr.4) { 
            tmp.36 = sign_extend 0
            tmp.37 = add_ptr(arr.4, index=tmp.36, scale=8)
            tmp.38 = *tmp.37
            tmp.39 = tmp.38 != 100UL
            if !tmp.39 jump end_if_18
            return 9
        
          end_if_18:
            tmp.40 = sign_extend 1
            tmp.41 = add_ptr(arr.4, index=tmp.40, scale=8)
            tmp.42 = *tmp.41
            tmp.43 = tmp.42 != 11UL
            if !tmp.43 jump end_if_20
            return 10
        
          end_if_20:
            tmp.44 = sign_extend 2
            tmp.45 = add_ptr(arr.4, index=tmp.44, scale=8)
            tmp.46 = *tmp.45
            tmp.47 = tmp.46 != 12345UL
            if !tmp.47 jump end_if_22
            return 11
        
          end_if_22:
            tmp.48 = sign_extend 3
            tmp.49 = add_ptr(arr.4, index=tmp.48, scale=8)
            tmp.50 = *tmp.49
            tmp.51 = tmp.50 != 4294967295UL
            if !tmp.51 jump end_if_24
            return 12
        
          end_if_24:
            return 0
            return 0
        }
        global function test_global() { 
            tmp.52 = &double_arr
            tmp.53 = check_double_arr(tmp.52)
            check.5 = tmp.53
            if !check.5 jump end_if_26
            return check.5
        
          end_if_26:
            tmp.54 = &uint_arr
            tmp.55 = check_uint_arr(tmp.54)
            check.5 = tmp.55
            if !check.5 jump end_if_28
            return check.5
        
          end_if_28:
            tmp.56 = &long_arr
            tmp.57 = check_long_arr(tmp.56)
            check.5 = tmp.57
            if !check.5 jump end_if_30
            return check.5
        
          end_if_30:
            tmp.58 = &ulong_arr
            tmp.59 = check_ulong_arr(tmp.58)
            check.5 = tmp.59
            if !check.5 jump end_if_32
            return check.5
        
          end_if_32:
            return 0
            return 0
        }
        global function test_local() { 
            local_double_arr.6[0] = 1D
            local_double_arr.6[8] = 2D
            local_double_arr.6[16] = 3D
            tmp.60 = &local_double_arr.6
            tmp.61 = check_double_arr(tmp.60)
            check.10 = tmp.61
            if !check.10 jump end_if_34
            tmp.62 = 100 + check.10
            return tmp.62
        
          end_if_34:
            tmp.63 = &local_uint_arr.7
            tmp.64 = check_uint_arr(tmp.63)
            check.10 = tmp.64
            if !check.10 jump end_if_36
            tmp.65 = 100 + check.10
            return tmp.65
        
          end_if_36:
            tmp.66 = &local_long_arr.8
            tmp.67 = check_long_arr(tmp.66)
            check.10 = tmp.67
            if !check.10 jump end_if_38
            tmp.68 = 100 + check.10
            return tmp.68
        
          end_if_38:
            tmp.69 = &local_ulong_arr.9
            tmp.70 = check_ulong_arr(tmp.69)
            check.10 = tmp.70
            if !check.10 jump end_if_40
            tmp.71 = 100 + check.10
            return tmp.71
        
          end_if_40:
            return 0
            return 0
        }
        global function main() { 
            tmp.72 = test_global()
            check.11 = tmp.72
            if !check.11 jump end_if_42
            return check.11
        
          end_if_42:
            tmp.73 = test_local()
            return tmp.73
            return 0
        }
        static global double_arr: Array(3,Double) = [ 1D, 2D, 3D]
        static local_long_arr.8: Array(1000,Long) = zero[8000]
        static local_uint_arr.7: Array(5,Unsigned Int) = [ 1U, 0U, 2147497230U, zero[8]]
        static local_ulong_arr.9: Array(4,Unsigned Long) = [ 100UL, 11UL, 12345UL, 4294967295UL]
        static global long_arr: Array(1000,Long) = zero[8000]
        static global uint_arr: Array(5,Unsigned Int) = [ 1U, 0U, 2147497230U, zero[8]]
        static global ulong_arr: Array(4,Unsigned Long) = [ 100UL, 11UL, 12345UL, 4294967295UL]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_initialization_static_nested() {
    let src = r#"
        double double_arr[2][2] = {{1.1, 2.2}, {3.3, 4.4}};
        int check_double_arr(double (*arr)[2]) {
            if (arr[0][0] != 1.1) {
                return 1;
            }
            if (arr[0][1] != 2.2) {
                return 2;
            }
            if (arr[1][0] != 3.3) {
                return 3;
            }
            if (arr[1][1] != 4.4) {
                return 4;
            }
            return 0;
        }
        long long_arr[30][50][40];
        int check_long_arr(long (*arr)[50][40]) {
            for (int i = 0; i < 30; i = i + 1) {
                for (int j = 0; j < 50; j = j + 1) {
                    for (int k = 0; k < 40; k = k + 1) {
                        if (arr[i][j][k]) {
                            return 5;
                        }
                    }
                }
            }
            return 0;
        }
        unsigned long ulong_arr[4][6][2] = {
            {{
                 1000.3,
             },
             {12u}},
            {{2}}};
        int check_ulong_arr(unsigned long (*arr)[6][2]) {
            for (int i = 0; i < 4; i = i + 1) {
                for (int j = 0; j < 6; j = j + 1) {
                    for (int k = 0; k < 2; k = k + 1) {
                        int val = arr[i][j][k];
                        if (i == 0 && j == 0 && k == 0) {
                            if (val != 1000ul) {
                                return 6;
                            }
                        } else if (i == 0 && j == 1 && k == 0) {
                            if (val != 12ul) {
                                return 7;
                            }
                        } else if (i == 1 && j == 0 && k == 0) {
                            if (val != 2ul) {
                                return 8;
                            }
                        } else {
                            if (val) {
                                return 9;
                            }
                        }
                    }
                }
            }
            return 0;
        }
        int test_global(void) {
            int check = check_double_arr(double_arr);
            if (check) {
                return check;
            }
            check = check_long_arr(long_arr);
            if (check) {
                return check;
            }
            check = check_ulong_arr(ulong_arr);
            if (check) {
                return check;
            }
            return 0;
        }
        int test_local(void) {
            static double local_double_arr[2][2] = {{1.1, 2.2}, {3.3, 4.4}};
            int check = check_double_arr(local_double_arr);
            if (check) {
                return 100 + check;
            }
            static long local_long_arr[30][50][40];
            check = check_long_arr(local_long_arr);
            if (check) {
                return 100 + check;
            }
            static unsigned long local_ulong_arr[4][6][2] = {
                {{
                    1000.3,
                },
                {12u}},
                {{2}}};
            check = check_ulong_arr(local_ulong_arr);
            if (check) {
                return 100 + check;
            }
            return 0;
        }
        int main(void) {
            int check = test_global();
            if (check) {
                return check;
            }
            return test_local();
        }
    "#;
    let expected = r#"
        global function check_double_arr(arr.0) { 
            tmp.0 = sign_extend 0
            tmp.1 = add_ptr(arr.0, index=tmp.0, scale=16)
            tmp.2 = sign_extend 0
            tmp.3 = add_ptr(tmp.1, index=tmp.2, scale=8)
            tmp.4 = *tmp.3
            tmp.5 = tmp.4 != 1.1D
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = sign_extend 0
            tmp.7 = add_ptr(arr.0, index=tmp.6, scale=16)
            tmp.8 = sign_extend 1
            tmp.9 = add_ptr(tmp.7, index=tmp.8, scale=8)
            tmp.10 = *tmp.9
            tmp.11 = tmp.10 != 2.2D
            if !tmp.11 jump end_if_2
            return 2
        
          end_if_2:
            tmp.12 = sign_extend 1
            tmp.13 = add_ptr(arr.0, index=tmp.12, scale=16)
            tmp.14 = sign_extend 0
            tmp.15 = add_ptr(tmp.13, index=tmp.14, scale=8)
            tmp.16 = *tmp.15
            tmp.17 = tmp.16 != 3.3D
            if !tmp.17 jump end_if_4
            return 3
        
          end_if_4:
            tmp.18 = sign_extend 1
            tmp.19 = add_ptr(arr.0, index=tmp.18, scale=16)
            tmp.20 = sign_extend 1
            tmp.21 = add_ptr(tmp.19, index=tmp.20, scale=8)
            tmp.22 = *tmp.21
            tmp.23 = tmp.22 != 4.4D
            if !tmp.23 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        global function check_long_arr(arr.1) { 
            i.2 = 0
        
          start_loop_0:
            tmp.24 = i.2 < 30
            if !tmp.24 jump break_loop_0
            j.3 = 0
        
          start_loop_1:
            tmp.25 = j.3 < 50
            if !tmp.25 jump break_loop_1
            k.4 = 0
        
          start_loop_2:
            tmp.26 = k.4 < 40
            if !tmp.26 jump break_loop_2
            tmp.27 = sign_extend i.2
            tmp.28 = add_ptr(arr.1, index=tmp.27, scale=16000)
            tmp.29 = sign_extend j.3
            tmp.30 = add_ptr(tmp.28, index=tmp.29, scale=320)
            tmp.31 = sign_extend k.4
            tmp.32 = add_ptr(tmp.30, index=tmp.31, scale=8)
            tmp.33 = *tmp.32
            if !tmp.33 jump end_if_8
            return 5
        
          end_if_8:
        
          continue_loop_2:
            tmp.34 = k.4 + 1
            k.4 = tmp.34
            jump start_loop_2
        
          break_loop_2:
        
          continue_loop_1:
            tmp.35 = j.3 + 1
            j.3 = tmp.35
            jump start_loop_1
        
          break_loop_1:
        
          continue_loop_0:
            tmp.36 = i.2 + 1
            i.2 = tmp.36
            jump start_loop_0
        
          break_loop_0:
            return 0
            return 0
        }
        global function check_ulong_arr(arr.5) { 
            i.6 = 0
        
          start_loop_3:
            tmp.37 = i.6 < 4
            if !tmp.37 jump break_loop_3
            j.7 = 0
        
          start_loop_4:
            tmp.38 = j.7 < 6
            if !tmp.38 jump break_loop_4
            k.8 = 0
        
          start_loop_5:
            tmp.39 = k.8 < 2
            if !tmp.39 jump break_loop_5
            tmp.40 = sign_extend i.6
            tmp.41 = add_ptr(arr.5, index=tmp.40, scale=96)
            tmp.42 = sign_extend j.7
            tmp.43 = add_ptr(tmp.41, index=tmp.42, scale=16)
            tmp.44 = sign_extend k.8
            tmp.45 = add_ptr(tmp.43, index=tmp.44, scale=8)
            tmp.46 = *tmp.45
            tmp.47 = truncate tmp.46
            val.9 = tmp.47
            tmp.48 = i.6 == 0
            if !tmp.48 jump and_false_10
            tmp.51 = j.7 == 0
            if !tmp.51 jump and_false_10
            tmp.50 = 1
            jump and_end_11
        
          and_false_10:
            tmp.50 = 0
        
          and_end_11:
            if !tmp.50 jump and_false_12
            tmp.54 = k.8 == 0
            if !tmp.54 jump and_false_12
            tmp.53 = 1
            jump and_end_13
        
          and_false_12:
            tmp.53 = 0
        
          and_end_13:
            if !tmp.53 jump else_15
            tmp.55 = sign_extend val.9
            tmp.56 = tmp.55 != 1000UL
            if !tmp.56 jump end_if_16
            return 6
        
          end_if_16:
            jump end_if_14
        
          else_15:
            tmp.57 = i.6 == 0
            if !tmp.57 jump and_false_18
            tmp.60 = j.7 == 1
            if !tmp.60 jump and_false_18
            tmp.59 = 1
            jump and_end_19
        
          and_false_18:
            tmp.59 = 0
        
          and_end_19:
            if !tmp.59 jump and_false_20
            tmp.63 = k.8 == 0
            if !tmp.63 jump and_false_20
            tmp.62 = 1
            jump and_end_21
        
          and_false_20:
            tmp.62 = 0
        
          and_end_21:
            if !tmp.62 jump else_23
            tmp.64 = sign_extend val.9
            tmp.65 = tmp.64 != 12UL
            if !tmp.65 jump end_if_24
            return 7
        
          end_if_24:
            jump end_if_22
        
          else_23:
            tmp.66 = i.6 == 1
            if !tmp.66 jump and_false_26
            tmp.69 = j.7 == 0
            if !tmp.69 jump and_false_26
            tmp.68 = 1
            jump and_end_27
        
          and_false_26:
            tmp.68 = 0
        
          and_end_27:
            if !tmp.68 jump and_false_28
            tmp.72 = k.8 == 0
            if !tmp.72 jump and_false_28
            tmp.71 = 1
            jump and_end_29
        
          and_false_28:
            tmp.71 = 0
        
          and_end_29:
            if !tmp.71 jump else_31
            tmp.73 = sign_extend val.9
            tmp.74 = tmp.73 != 2UL
            if !tmp.74 jump end_if_32
            return 8
        
          end_if_32:
            jump end_if_30
        
          else_31:
            if !val.9 jump end_if_34
            return 9
        
          end_if_34:
        
          end_if_30:
        
          end_if_22:
        
          end_if_14:
        
          continue_loop_5:
            tmp.75 = k.8 + 1
            k.8 = tmp.75
            jump start_loop_5
        
          break_loop_5:
        
          continue_loop_4:
            tmp.76 = j.7 + 1
            j.7 = tmp.76
            jump start_loop_4
        
          break_loop_4:
        
          continue_loop_3:
            tmp.77 = i.6 + 1
            i.6 = tmp.77
            jump start_loop_3
        
          break_loop_3:
            return 0
            return 0
        }
        global function test_global() { 
            tmp.78 = &double_arr
            tmp.79 = check_double_arr(tmp.78)
            check.10 = tmp.79
            if !check.10 jump end_if_36
            return check.10
        
          end_if_36:
            tmp.80 = &long_arr
            tmp.81 = check_long_arr(tmp.80)
            check.10 = tmp.81
            if !check.10 jump end_if_38
            return check.10
        
          end_if_38:
            tmp.82 = &ulong_arr
            tmp.83 = check_ulong_arr(tmp.82)
            check.10 = tmp.83
            if !check.10 jump end_if_40
            return check.10
        
          end_if_40:
            return 0
            return 0
        }
        global function test_local() { 
            tmp.84 = &local_double_arr.11
            tmp.85 = check_double_arr(tmp.84)
            check.12 = tmp.85
            if !check.12 jump end_if_42
            tmp.86 = 100 + check.12
            return tmp.86
        
          end_if_42:
            tmp.87 = &local_long_arr.13
            tmp.88 = check_long_arr(tmp.87)
            check.12 = tmp.88
            if !check.12 jump end_if_44
            tmp.89 = 100 + check.12
            return tmp.89
        
          end_if_44:
            tmp.90 = &local_ulong_arr.14
            tmp.91 = check_ulong_arr(tmp.90)
            check.12 = tmp.91
            if !check.12 jump end_if_46
            tmp.92 = 100 + check.12
            return tmp.92
        
          end_if_46:
            return 0
            return 0
        }
        global function main() { 
            tmp.93 = test_global()
            check.15 = tmp.93
            if !check.15 jump end_if_48
            return check.15
        
          end_if_48:
            tmp.94 = test_local()
            return tmp.94
            return 0
        }
        static global double_arr: Array(2,Array(2,Double)) = [ 1.1D, 2.2D, 3.3D, 4.4D]
        static local_double_arr.11: Array(2,Array(2,Double)) = [ 1.1D, 2.2D, 3.3D, 4.4D]
        static local_long_arr.13: Array(30,Array(50,Array(40,Long))) = zero[480000]
        static local_ulong_arr.14: Array(4,Array(6,Array(2,Unsigned Long))) = [ 1000UL, zero[8], 12UL, zero[8], zero[64], 2UL, zero[8], zero[80], zero[192]]
        static global long_arr: Array(30,Array(50,Array(40,Long))) = zero[480000]
        static global ulong_arr: Array(4,Array(6,Array(2,Unsigned Long))) = [ 1000UL, zero[8], 12UL, zero[8], zero[64], 2UL, zero[8], zero[80], zero[192]]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_initialization_trailing_comma_initializer() {
    let src = r#"
        int foo(int a, int b, int c);
        int main(void) {
            int arr[3] = {
                1,
                2,
                3,
            };
            return arr[2];
        }
    "#;
    let expected = r#"
        global function main() { 
            arr.3[0] = 1
            arr.3[4] = 2
            arr.3[8] = 3
            tmp.0 = &arr.3
            tmp.1 = sign_extend 2
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=4)
            tmp.3 = *tmp.2
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_libraries_global_array() {
    let src = r#"
        long arr[4] = {1, 2, 3, 4};
        int double_each_element(void) {
            for (int i = 0; i < 4; i = i + 1) {
                arr[i] = arr[i] * 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function double_each_element() { 
            i.0 = 0
        
          start_loop_0:
            tmp.0 = i.0 < 4
            if !tmp.0 jump break_loop_0
            tmp.1 = &arr
            tmp.2 = sign_extend i.0
            tmp.3 = add_ptr(tmp.1, index=tmp.2, scale=8)
            tmp.4 = &arr
            tmp.5 = sign_extend i.0
            tmp.6 = add_ptr(tmp.4, index=tmp.5, scale=8)
            tmp.7 = *tmp.6
            tmp.9 = sign_extend 2
            tmp.8 = tmp.7 * tmp.9
            *tmp.3 = tmp.8
        
          continue_loop_0:
            tmp.10 = i.0 + 1
            i.0 = tmp.10
            jump start_loop_0
        
          break_loop_0:
            return 0
            return 0
        }
        static global arr: Array(4,Long) = [ 1L, 2L, 3L, 4L]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_libraries_global_array_client() {
    let src = r#"
        
        extern long arr[4];
        int double_each_element(void);
        int main(void) {
            for (int i = 0; i < 4; i = i + 1) {
                if (arr[i] != i + 1) {
                    return i + 1;
                }
            }
            double_each_element();
            for (int i = 0; i < 4; i = i + 1) {
                if (arr[i] != (i + 1) * 2) {
                    return i + 5;
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            i.0 = 0
        
          start_loop_0:
            tmp.0 = i.0 < 4
            if !tmp.0 jump break_loop_0
            tmp.1 = &arr
            tmp.2 = sign_extend i.0
            tmp.3 = add_ptr(tmp.1, index=tmp.2, scale=8)
            tmp.4 = *tmp.3
            tmp.6 = i.0 + 1
            tmp.7 = sign_extend tmp.6
            tmp.5 = tmp.4 != tmp.7
            if !tmp.5 jump end_if_0
            tmp.8 = i.0 + 1
            return tmp.8
        
          end_if_0:
        
          continue_loop_0:
            tmp.9 = i.0 + 1
            i.0 = tmp.9
            jump start_loop_0
        
          break_loop_0:
            tmp.10 = double_each_element()
            i.1 = 0
        
          start_loop_1:
            tmp.11 = i.1 < 4
            if !tmp.11 jump break_loop_1
            tmp.12 = &arr
            tmp.13 = sign_extend i.1
            tmp.14 = add_ptr(tmp.12, index=tmp.13, scale=8)
            tmp.15 = *tmp.14
            tmp.17 = i.1 + 1
            tmp.18 = tmp.17 * 2
            tmp.19 = sign_extend tmp.18
            tmp.16 = tmp.15 != tmp.19
            if !tmp.16 jump end_if_2
            tmp.20 = i.1 + 5
            return tmp.20
        
          end_if_2:
        
          continue_loop_1:
            tmp.21 = i.1 + 1
            i.1 = tmp.21
            jump start_loop_1
        
          break_loop_1:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_libraries_return_pointer_to_array() {
    let src = r#"
        
        long (*return_row(long (*arr)[3][4], int idx))[4] {
            return arr[idx];
        }
    "#;
    let expected = r#"
        global function return_row(arr.0, idx.1) { 
            tmp.0 = sign_extend idx.1
            tmp.1 = add_ptr(arr.0, index=tmp.0, scale=96)
            return tmp.1
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_libraries_return_pointer_to_array_client() {
    let src = r#"
        
        long (*return_row(long (*arr)[3][4], int idx))[4];
        int main(void) {
            long nested_array[2][3][4] = {
                {{0}},
                {{-12, -13, -14, -15}, {-16}}
            };
            long (*row_pointer)[4] = return_row(nested_array, 1);
            for (int i = 0; i < 3; i = i + 1) {
                for (int j = 0; j < 4; j = j + 1) {
                    if (row_pointer[i][j] != nested_array[1][i][j]) {
                        return 1;
                    }
                }
            }
            row_pointer[2][1] = 100;
            if (nested_array[1][2][1] != 100) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = sign_extend 0
            nested_array.2[0] = tmp.0
            nested_array.2[8] = 0L
            nested_array.2[16] = 0L
            nested_array.2[24] = 0L
            nested_array.2[32] = 0L
            nested_array.2[40] = 0L
            nested_array.2[48] = 0L
            nested_array.2[56] = 0L
            nested_array.2[64] = 0L
            nested_array.2[72] = 0L
            nested_array.2[80] = 0L
            nested_array.2[88] = 0L
            tmp.1 = - 12
            tmp.2 = sign_extend tmp.1
            nested_array.2[96] = tmp.2
            tmp.3 = - 13
            tmp.4 = sign_extend tmp.3
            nested_array.2[104] = tmp.4
            tmp.5 = - 14
            tmp.6 = sign_extend tmp.5
            nested_array.2[112] = tmp.6
            tmp.7 = - 15
            tmp.8 = sign_extend tmp.7
            nested_array.2[120] = tmp.8
            tmp.9 = - 16
            tmp.10 = sign_extend tmp.9
            nested_array.2[128] = tmp.10
            nested_array.2[136] = 0L
            nested_array.2[144] = 0L
            nested_array.2[152] = 0L
            nested_array.2[160] = 0L
            nested_array.2[168] = 0L
            nested_array.2[176] = 0L
            nested_array.2[184] = 0L
            tmp.11 = &nested_array.2
            tmp.12 = return_row(tmp.11, 1)
            row_pointer.3 = tmp.12
            i.4 = 0
        
          start_loop_0:
            tmp.13 = i.4 < 3
            if !tmp.13 jump break_loop_0
            j.5 = 0
        
          start_loop_1:
            tmp.14 = j.5 < 4
            if !tmp.14 jump break_loop_1
            tmp.15 = sign_extend i.4
            tmp.16 = add_ptr(row_pointer.3, index=tmp.15, scale=32)
            tmp.17 = sign_extend j.5
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=8)
            tmp.19 = *tmp.18
            tmp.21 = &nested_array.2
            tmp.22 = sign_extend 1
            tmp.23 = add_ptr(tmp.21, index=tmp.22, scale=96)
            tmp.24 = sign_extend i.4
            tmp.25 = add_ptr(tmp.23, index=tmp.24, scale=32)
            tmp.26 = sign_extend j.5
            tmp.27 = add_ptr(tmp.25, index=tmp.26, scale=8)
            tmp.28 = *tmp.27
            tmp.20 = tmp.19 != tmp.28
            if !tmp.20 jump end_if_0
            return 1
        
          end_if_0:
        
          continue_loop_1:
            tmp.29 = j.5 + 1
            j.5 = tmp.29
            jump start_loop_1
        
          break_loop_1:
        
          continue_loop_0:
            tmp.30 = i.4 + 1
            i.4 = tmp.30
            jump start_loop_0
        
          break_loop_0:
            tmp.31 = sign_extend 2
            tmp.32 = add_ptr(row_pointer.3, index=tmp.31, scale=32)
            tmp.33 = sign_extend 1
            tmp.34 = add_ptr(tmp.32, index=tmp.33, scale=8)
            tmp.35 = sign_extend 100
            *tmp.34 = tmp.35
            tmp.36 = &nested_array.2
            tmp.37 = sign_extend 1
            tmp.38 = add_ptr(tmp.36, index=tmp.37, scale=96)
            tmp.39 = sign_extend 2
            tmp.40 = add_ptr(tmp.38, index=tmp.39, scale=32)
            tmp.41 = sign_extend 1
            tmp.42 = add_ptr(tmp.40, index=tmp.41, scale=8)
            tmp.43 = *tmp.42
            tmp.45 = sign_extend 100
            tmp.44 = tmp.43 != tmp.45
            if !tmp.44 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_libraries_set_array_val() {
    let src = r#"
        int set_nth_element(double *arr, int idx) {
            for (int i = 0; i < 5; i = i + 1) {
                if (arr[i]) {
                    return 1;
                }
            }
            arr[idx] = 8;
            return 0;
        }
        int set_nested_element(int (*arr)[2], int i, int j) {
            for (int x = 0; x < 3; x = x + 1) {
                for (int y = 0; y < 2; y = y + 1) {
                    int expected = -10 + 2*x + y;
                    if (arr[x][y] != expected) {
                        return 4;
                    }
                }
            }
            arr[i][j] = 10;
            return 0;
        }
    "#;
    let expected = r#"
        global function set_nth_element(arr.0, idx.1) { 
            i.2 = 0
        
          start_loop_0:
            tmp.0 = i.2 < 5
            if !tmp.0 jump break_loop_0
            tmp.1 = sign_extend i.2
            tmp.2 = add_ptr(arr.0, index=tmp.1, scale=8)
            tmp.3 = *tmp.2
            tmp.4 = tmp.3 != 0D
            if !tmp.4 jump end_if_0
            return 1
        
          end_if_0:
        
          continue_loop_0:
            tmp.5 = i.2 + 1
            i.2 = tmp.5
            jump start_loop_0
        
          break_loop_0:
            tmp.6 = sign_extend idx.1
            tmp.7 = add_ptr(arr.0, index=tmp.6, scale=8)
            tmp.8 = int_to_double 8
            *tmp.7 = tmp.8
            return 0
            return 0
        }
        global function set_nested_element(arr.3, i.4, j.5) { 
            x.6 = 0
        
          start_loop_1:
            tmp.9 = x.6 < 3
            if !tmp.9 jump break_loop_1
            y.7 = 0
        
          start_loop_2:
            tmp.10 = y.7 < 2
            if !tmp.10 jump break_loop_2
            tmp.11 = - 10
            tmp.13 = 2 * x.6
            tmp.12 = tmp.11 + tmp.13
            tmp.14 = tmp.12 + y.7
            expected.8 = tmp.14
            tmp.15 = sign_extend x.6
            tmp.16 = add_ptr(arr.3, index=tmp.15, scale=8)
            tmp.17 = sign_extend y.7
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=4)
            tmp.19 = *tmp.18
            tmp.20 = tmp.19 != expected.8
            if !tmp.20 jump end_if_2
            return 4
        
          end_if_2:
        
          continue_loop_2:
            tmp.21 = y.7 + 1
            y.7 = tmp.21
            jump start_loop_2
        
          break_loop_2:
        
          continue_loop_1:
            tmp.22 = x.6 + 1
            x.6 = tmp.22
            jump start_loop_1
        
          break_loop_1:
            tmp.23 = sign_extend i.4
            tmp.24 = add_ptr(arr.3, index=tmp.23, scale=8)
            tmp.25 = sign_extend j.5
            tmp.26 = add_ptr(tmp.24, index=tmp.25, scale=4)
            *tmp.26 = 10
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_libraries_set_array_val_client() {
    let src = r#"
        int set_nth_element(double *arr, int idx);
        int set_nested_element(int (*arr)[2], int i, int j);
        int main(void) {
            double arr[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
            int check = set_nth_element(arr, 4);
            if (check) {
                return check;
            }
            for (int i = 0; i < 4; i = i + 1) {
                if (arr[i] != 0) {
                    return 2;
                }
            }
            if (arr[4] != 8)
                return 3;
            int nested_arr[3][2] = {{-10, -9}, {-8, -7}, {-6, -5}};
            check = set_nested_element(nested_arr, 2, 1);
            if (check) {
                return check;
            }
            for (int i = 0; i < 3; i = i + 1) {
                for (int j = 0; j < 2; j = j + 1) {
                    if (i == 2 && j == 1) {
                        if (nested_arr[i][j] != 10) {
                            return 5;
                        }
                    } else {
                        int expected = -10 + 2 * i + j;
                        if (nested_arr[i][j] != expected) {
                            return 6;
                        }
                    }
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            arr.5[0] = 0D
            arr.5[8] = 0D
            arr.5[16] = 0D
            arr.5[24] = 0D
            arr.5[32] = 0D
            tmp.0 = &arr.5
            tmp.1 = set_nth_element(tmp.0, 4)
            check.6 = tmp.1
            if !check.6 jump end_if_0
            return check.6
        
          end_if_0:
            i.7 = 0
        
          start_loop_0:
            tmp.2 = i.7 < 4
            if !tmp.2 jump break_loop_0
            tmp.3 = &arr.5
            tmp.4 = sign_extend i.7
            tmp.5 = add_ptr(tmp.3, index=tmp.4, scale=8)
            tmp.6 = *tmp.5
            tmp.8 = int_to_double 0
            tmp.7 = tmp.6 != tmp.8
            if !tmp.7 jump end_if_2
            return 2
        
          end_if_2:
        
          continue_loop_0:
            tmp.9 = i.7 + 1
            i.7 = tmp.9
            jump start_loop_0
        
          break_loop_0:
            tmp.10 = &arr.5
            tmp.11 = sign_extend 4
            tmp.12 = add_ptr(tmp.10, index=tmp.11, scale=8)
            tmp.13 = *tmp.12
            tmp.15 = int_to_double 8
            tmp.14 = tmp.13 != tmp.15
            if !tmp.14 jump end_if_4
            return 3
        
          end_if_4:
            tmp.16 = - 10
            nested_arr.8[0] = tmp.16
            tmp.17 = - 9
            nested_arr.8[4] = tmp.17
            tmp.18 = - 8
            nested_arr.8[8] = tmp.18
            tmp.19 = - 7
            nested_arr.8[12] = tmp.19
            tmp.20 = - 6
            nested_arr.8[16] = tmp.20
            tmp.21 = - 5
            nested_arr.8[20] = tmp.21
            tmp.22 = &nested_arr.8
            tmp.23 = set_nested_element(tmp.22, 2, 1)
            check.6 = tmp.23
            if !check.6 jump end_if_6
            return check.6
        
          end_if_6:
            i.9 = 0
        
          start_loop_1:
            tmp.24 = i.9 < 3
            if !tmp.24 jump break_loop_1
            j.10 = 0
        
          start_loop_2:
            tmp.25 = j.10 < 2
            if !tmp.25 jump break_loop_2
            tmp.26 = i.9 == 2
            if !tmp.26 jump and_false_8
            tmp.29 = j.10 == 1
            if !tmp.29 jump and_false_8
            tmp.28 = 1
            jump and_end_9
        
          and_false_8:
            tmp.28 = 0
        
          and_end_9:
            if !tmp.28 jump else_11
            tmp.30 = &nested_arr.8
            tmp.31 = sign_extend i.9
            tmp.32 = add_ptr(tmp.30, index=tmp.31, scale=8)
            tmp.33 = sign_extend j.10
            tmp.34 = add_ptr(tmp.32, index=tmp.33, scale=4)
            tmp.35 = *tmp.34
            tmp.36 = tmp.35 != 10
            if !tmp.36 jump end_if_12
            return 5
        
          end_if_12:
            jump end_if_10
        
          else_11:
            tmp.37 = - 10
            tmp.39 = 2 * i.9
            tmp.38 = tmp.37 + tmp.39
            tmp.40 = tmp.38 + j.10
            expected.11 = tmp.40
            tmp.41 = &nested_arr.8
            tmp.42 = sign_extend i.9
            tmp.43 = add_ptr(tmp.41, index=tmp.42, scale=8)
            tmp.44 = sign_extend j.10
            tmp.45 = add_ptr(tmp.43, index=tmp.44, scale=4)
            tmp.46 = *tmp.45
            tmp.47 = tmp.46 != expected.11
            if !tmp.47 jump end_if_14
            return 6
        
          end_if_14:
        
          end_if_10:
        
          continue_loop_2:
            tmp.48 = j.10 + 1
            j.10 = tmp.48
            jump start_loop_2
        
          break_loop_2:
        
          continue_loop_1:
            tmp.49 = i.9 + 1
            i.9 = tmp.49
            jump start_loop_1
        
          break_loop_1:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_pointer_arithmetic_add_dereference_and_assign() {
    let src = r#"
        int main(void) {
            int arr[2] = {1, 2};
            *arr = 3;
            *(arr + 1) = 4;
            if (arr[0] != 3) {
                return 1;
            }
            if (arr[1] != 4) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            arr.0[0] = 1
            arr.0[4] = 2
            tmp.0 = &arr.0
            *tmp.0 = 3
            tmp.1 = &arr.0
            tmp.3 = sign_extend 1
            tmp.2 = add_ptr(tmp.1, index=tmp.3, scale=4)
            *tmp.2 = 4
            tmp.4 = &arr.0
            tmp.5 = sign_extend 0
            tmp.6 = add_ptr(tmp.4, index=tmp.5, scale=4)
            tmp.7 = *tmp.6
            tmp.8 = tmp.7 != 3
            if !tmp.8 jump end_if_0
            return 1
        
          end_if_0:
            tmp.9 = &arr.0
            tmp.10 = sign_extend 1
            tmp.11 = add_ptr(tmp.9, index=tmp.10, scale=4)
            tmp.12 = *tmp.11
            tmp.13 = tmp.12 != 4
            if !tmp.13 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_pointer_arithmetic_compare() {
    let src = r#"
        unsigned long gt(unsigned long *a, unsigned long *b) {
            return a > b;
        }
        unsigned long lt(unsigned long *a, unsigned long *b) {
            return a < b;
        }
        unsigned long ge(unsigned long *a, unsigned long *b) {
            return a >= b;
        }
        unsigned long le(unsigned long *a, unsigned long *b) {
            return a <= b;
        }
        unsigned long gt_nested(unsigned long (*a)[5], unsigned long (*b)[5]) {
            return a > b;
        }
        unsigned long ge_nested(unsigned long (*a)[5], unsigned long (*b)[5]) {
            return a >= b;
        }
        int main(void)
        {
            unsigned long arr[5];
            unsigned long *elem_1 = arr + 1;
            unsigned long *elem_4 = arr + 4;
            if (gt(elem_1, elem_4)) {
                return 1;
            }
            if (!(lt(elem_1, elem_4))) {
                return 2;
            }
            if (!(ge(elem_1, elem_1))) {
                return 3;
            }
            if (le(elem_4, elem_1)) {
                return 4;
            }
            unsigned long *one_past_the_end = arr + 5;
            if (!(gt(one_past_the_end, elem_4))) {
                return 5;
            }
            if (one_past_the_end != elem_4 + 1) {
                return 6;
            }
            unsigned long nested_arr[4][5];
            unsigned long *elem_3_2 = *(nested_arr + 3) + 2;
            unsigned long *elem_3_3 = *(nested_arr + 3) + 3;
            if (lt(elem_3_3, elem_3_2)) {
                return 7;
            }
            if (!ge(elem_3_3, elem_3_2)) {
                return 8;
            }
            unsigned long (*subarray_0)[5] = nested_arr;
            unsigned long (*subarray_3)[5] = nested_arr + 3;
            unsigned long (*subarray_one_past_the_end)[5] = nested_arr + 4;
            if (ge_nested(subarray_0, subarray_3)){
                return 9;
            }
            if (!(gt_nested(subarray_one_past_the_end, subarray_3))) {
                return 10;
            }
            if (subarray_3 != subarray_one_past_the_end - 1) {
                return 11;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function gt(a.0, b.1) { 
            tmp.0 = a.0 > b.1
            tmp.1 = sign_extend tmp.0
            return tmp.1
            return 0
        }
        global function lt(a.2, b.3) { 
            tmp.2 = a.2 < b.3
            tmp.3 = sign_extend tmp.2
            return tmp.3
            return 0
        }
        global function ge(a.4, b.5) { 
            tmp.4 = a.4 >= b.5
            tmp.5 = sign_extend tmp.4
            return tmp.5
            return 0
        }
        global function le(a.6, b.7) { 
            tmp.6 = a.6 <= b.7
            tmp.7 = sign_extend tmp.6
            return tmp.7
            return 0
        }
        global function gt_nested(a.8, b.9) { 
            tmp.8 = a.8 > b.9
            tmp.9 = sign_extend tmp.8
            return tmp.9
            return 0
        }
        global function ge_nested(a.10, b.11) { 
            tmp.10 = a.10 >= b.11
            tmp.11 = sign_extend tmp.10
            return tmp.11
            return 0
        }
        global function main() { 
            tmp.12 = &arr.12
            tmp.14 = sign_extend 1
            tmp.13 = add_ptr(tmp.12, index=tmp.14, scale=8)
            elem_1.13 = tmp.13
            tmp.15 = &arr.12
            tmp.17 = sign_extend 4
            tmp.16 = add_ptr(tmp.15, index=tmp.17, scale=8)
            elem_4.14 = tmp.16
            tmp.18 = gt(elem_1.13, elem_4.14)
            if !tmp.18 jump end_if_0
            return 1
        
          end_if_0:
            tmp.19 = lt(elem_1.13, elem_4.14)
            tmp.20 = ! tmp.19
            if !tmp.20 jump end_if_2
            return 2
        
          end_if_2:
            tmp.21 = ge(elem_1.13, elem_1.13)
            tmp.22 = ! tmp.21
            if !tmp.22 jump end_if_4
            return 3
        
          end_if_4:
            tmp.23 = le(elem_4.14, elem_1.13)
            if !tmp.23 jump end_if_6
            return 4
        
          end_if_6:
            tmp.24 = &arr.12
            tmp.26 = sign_extend 5
            tmp.25 = add_ptr(tmp.24, index=tmp.26, scale=8)
            one_past_the_end.15 = tmp.25
            tmp.27 = gt(one_past_the_end.15, elem_4.14)
            tmp.28 = ! tmp.27
            if !tmp.28 jump end_if_8
            return 5
        
          end_if_8:
            tmp.31 = sign_extend 1
            tmp.30 = add_ptr(elem_4.14, index=tmp.31, scale=8)
            tmp.29 = one_past_the_end.15 != tmp.30
            if !tmp.29 jump end_if_10
            return 6
        
          end_if_10:
            tmp.32 = &nested_arr.16
            tmp.34 = sign_extend 3
            tmp.33 = add_ptr(tmp.32, index=tmp.34, scale=40)
            tmp.36 = sign_extend 2
            tmp.35 = add_ptr(tmp.33, index=tmp.36, scale=8)
            elem_3_2.17 = tmp.35
            tmp.37 = &nested_arr.16
            tmp.39 = sign_extend 3
            tmp.38 = add_ptr(tmp.37, index=tmp.39, scale=40)
            tmp.41 = sign_extend 3
            tmp.40 = add_ptr(tmp.38, index=tmp.41, scale=8)
            elem_3_3.18 = tmp.40
            tmp.42 = lt(elem_3_3.18, elem_3_2.17)
            if !tmp.42 jump end_if_12
            return 7
        
          end_if_12:
            tmp.43 = ge(elem_3_3.18, elem_3_2.17)
            tmp.44 = ! tmp.43
            if !tmp.44 jump end_if_14
            return 8
        
          end_if_14:
            tmp.45 = &nested_arr.16
            subarray_0.19 = tmp.45
            tmp.46 = &nested_arr.16
            tmp.48 = sign_extend 3
            tmp.47 = add_ptr(tmp.46, index=tmp.48, scale=40)
            subarray_3.20 = tmp.47
            tmp.49 = &nested_arr.16
            tmp.51 = sign_extend 4
            tmp.50 = add_ptr(tmp.49, index=tmp.51, scale=40)
            subarray_one_past_the_end.21 = tmp.50
            tmp.52 = ge_nested(subarray_0.19, subarray_3.20)
            if !tmp.52 jump end_if_16
            return 9
        
          end_if_16:
            tmp.53 = gt_nested(subarray_one_past_the_end.21, subarray_3.20)
            tmp.54 = ! tmp.53
            if !tmp.54 jump end_if_18
            return 10
        
          end_if_18:
            tmp.57 = sign_extend 1
            tmp.58 = - tmp.57
            tmp.56 = add_ptr(subarray_one_past_the_end.21, index=tmp.58, scale=40)
            tmp.55 = subarray_3.20 != tmp.56
            if !tmp.55 jump end_if_20
            return 11
        
          end_if_20:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_pointer_arithmetic_pointer_add() {
    let src = r#"
        int test_add_constant_to_pointer(void) {
            long long_arr[12] = {0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 13};
            long *ptr = long_arr + 10;
            return *ptr == 13;
        }
        int test_add_negative_index(void) {
            unsigned unsigned_arr[12] = {0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 42};
            unsigned *end_ptr = unsigned_arr + 12;
            unsigned *ptr = end_ptr + -10;
            return *ptr == 2;
        }
        int test_add_pointer_to_int(void) {
            int int_arr[5] = {0, 98, 99};
            int *ptr1 = int_arr + 2;
            int *ptr2 = 2 + int_arr;
            return (ptr1 == ptr2 && *ptr2 == 99);
        }
        int test_add_different_index_types(void) {
            double double_arr[11] = {0, 0, 0, 0, 0, 6.0};
            double *ptr1 = double_arr + 5;
            double *ptr2 = double_arr + 5l;
            double *ptr3 = double_arr + 5u;
            double *ptr4 = double_arr + 5ul;
            return (ptr1 == ptr2 && ptr1 == ptr3 && ptr1 == ptr4 && *ptr4 == 6.0);
        }
        int test_add_complex_expressions(void) {
            static int flag;
            int i = -2;
            int *small_int_ptr = &i;
            extern int return_one(void);
            extern int *get_elem1_ptr(int *arr);
            extern int *get_elem2_ptr(int *arr);
            static int arr[4] = {1, 2, 3, 4};
            int *ptr = return_one() + (*small_int_ptr) +
                       (flag ? get_elem1_ptr(arr) : get_elem2_ptr(arr));
            return (ptr == arr + 1 && *ptr == 2);
        }
        int return_one(void) {
            return 1;
        }
        int *get_elem1_ptr(int *arr) {
            return arr + 1;
        }
        int *get_elem2_ptr(int *arr) {
            return arr + 2;
        }
        int test_add_multi_dimensional(void) {
            static int index = 2;
            int nested_arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
            int(*row_pointer)[3] = nested_arr + index;
            return **row_pointer == 7;
        }
        int test_add_to_subarray_pointer(void) {
            static int index = 2;
            int nested_arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
            int *row1 = *(nested_arr + 1);
            int *elem_ptr = row1 + index;
            return *elem_ptr == 6;
        }
        int test_subtract_from_pointer(void) {
            long long_arr[5] = {10, 9, 8, 7, 6};
            long *one_past_the_end = long_arr + 5;
            static int index = 3;
            long *subtraction_result = one_past_the_end - index;
            return *subtraction_result == 8;
        }
        int test_subtract_negative_index(void) {
            unsigned arr[5] = {100, 101, 102, 103, 104};
            unsigned *ptr = arr - (-3);
            return *ptr == 103;
        }
        int test_subtract_different_index_types(void) {
            double double_arr[11] = {0, 0, 0, 0, 0, 0, 6.0};
            double *end_ptr = double_arr + 11;
            double *ptr1 = end_ptr - 5;
            double *ptr2 = end_ptr - 5l;
            double *ptr3 = end_ptr - 5u;
            double *ptr4 = end_ptr - 5ul;
            return (ptr1 == ptr2 && ptr1 == ptr3 && ptr1 == ptr4 && *ptr4 == 6.0);
        }
        int test_subtract_complex_expressions(void) {
            static int flag = 1;
            static int four = 4;
            static int arr[4] = {1, 2, 3, 4};
            int *ptr = (flag ? get_elem1_ptr(arr) : get_elem2_ptr(arr)) - (four / -2);
            return (*ptr == 4);
        }
        int test_subtract_multi_dimensional(void) {
            static int index = 1;
            int nested_arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
            int(*last_row_pointer)[3] = nested_arr + 2;
            int(*row_pointer)[3] = last_row_pointer - index;
            return (**row_pointer == 4);
        }
        int main(void) {
            if (!test_add_constant_to_pointer()) {
                return 1;
            }
            if (!test_add_negative_index()) {
                return 2;
            }
            if (!test_add_pointer_to_int()) {
                return 3;
            }
            if (!test_add_different_index_types()) {
                return 4;
            }
            if (!test_add_complex_expressions()) {
                return 5;
            }
            if (!test_add_multi_dimensional()) {
                return 6;
            }
            if (!test_add_to_subarray_pointer()) {
                return 7;
            }
            if (!test_subtract_from_pointer()) {
                return 8;
            }
            if (!test_subtract_negative_index()) {
                return 9;
            }
            if (!test_subtract_different_index_types()) {
                return 10;
            }
            if (!test_subtract_complex_expressions()) {
                return 11;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function test_add_constant_to_pointer() { 
            tmp.0 = sign_extend 0
            long_arr.0[0] = tmp.0
            tmp.1 = sign_extend 0
            long_arr.0[8] = tmp.1
            tmp.2 = sign_extend 3
            long_arr.0[16] = tmp.2
            tmp.3 = sign_extend 0
            long_arr.0[24] = tmp.3
            tmp.4 = sign_extend 0
            long_arr.0[32] = tmp.4
            tmp.5 = sign_extend 0
            long_arr.0[40] = tmp.5
            tmp.6 = sign_extend 0
            long_arr.0[48] = tmp.6
            tmp.7 = sign_extend 0
            long_arr.0[56] = tmp.7
            tmp.8 = sign_extend 0
            long_arr.0[64] = tmp.8
            tmp.9 = sign_extend 0
            long_arr.0[72] = tmp.9
            tmp.10 = sign_extend 13
            long_arr.0[80] = tmp.10
            long_arr.0[88] = 0L
            tmp.11 = &long_arr.0
            tmp.13 = sign_extend 10
            tmp.12 = add_ptr(tmp.11, index=tmp.13, scale=8)
            ptr.1 = tmp.12
            tmp.14 = *ptr.1
            tmp.16 = sign_extend 13
            tmp.15 = tmp.14 == tmp.16
            return tmp.15
            return 0
        }
        global function test_add_negative_index() { 
            tmp.17 = 0
            unsigned_arr.2[0] = tmp.17
            tmp.18 = 0
            unsigned_arr.2[4] = tmp.18
            tmp.19 = 2
            unsigned_arr.2[8] = tmp.19
            tmp.20 = 0
            unsigned_arr.2[12] = tmp.20
            tmp.21 = 0
            unsigned_arr.2[16] = tmp.21
            tmp.22 = 0
            unsigned_arr.2[20] = tmp.22
            tmp.23 = 0
            unsigned_arr.2[24] = tmp.23
            tmp.24 = 0
            unsigned_arr.2[28] = tmp.24
            tmp.25 = 0
            unsigned_arr.2[32] = tmp.25
            tmp.26 = 0
            unsigned_arr.2[36] = tmp.26
            tmp.27 = 42
            unsigned_arr.2[40] = tmp.27
            unsigned_arr.2[44] = 0U
            tmp.28 = &unsigned_arr.2
            tmp.30 = sign_extend 12
            tmp.29 = add_ptr(tmp.28, index=tmp.30, scale=4)
            end_ptr.3 = tmp.29
            tmp.32 = - 10
            tmp.33 = sign_extend tmp.32
            tmp.31 = add_ptr(end_ptr.3, index=tmp.33, scale=4)
            ptr.4 = tmp.31
            tmp.34 = *ptr.4
            tmp.36 = 2
            tmp.35 = tmp.34 == tmp.36
            return tmp.35
            return 0
        }
        global function test_add_pointer_to_int() { 
            int_arr.5[0] = 0
            int_arr.5[4] = 98
            int_arr.5[8] = 99
            int_arr.5[12] = 0
            int_arr.5[16] = 0
            tmp.37 = &int_arr.5
            tmp.39 = sign_extend 2
            tmp.38 = add_ptr(tmp.37, index=tmp.39, scale=4)
            ptr1.6 = tmp.38
            tmp.40 = sign_extend 2
            tmp.42 = &int_arr.5
            tmp.41 = add_ptr(tmp.42, index=tmp.40, scale=4)
            ptr2.7 = tmp.41
            tmp.43 = ptr1.6 == ptr2.7
            if !tmp.43 jump and_false_0
            tmp.46 = *ptr2.7
            tmp.47 = tmp.46 == 99
            if !tmp.47 jump and_false_0
            tmp.45 = 1
            jump and_end_1
        
          and_false_0:
            tmp.45 = 0
        
          and_end_1:
            return tmp.45
            return 0
        }
        global function test_add_different_index_types() { 
            tmp.48 = int_to_double 0
            double_arr.8[0] = tmp.48
            tmp.49 = int_to_double 0
            double_arr.8[8] = tmp.49
            tmp.50 = int_to_double 0
            double_arr.8[16] = tmp.50
            tmp.51 = int_to_double 0
            double_arr.8[24] = tmp.51
            tmp.52 = int_to_double 0
            double_arr.8[32] = tmp.52
            double_arr.8[40] = 6D
            double_arr.8[48] = 0D
            double_arr.8[56] = 0D
            double_arr.8[64] = 0D
            double_arr.8[72] = 0D
            double_arr.8[80] = 0D
            tmp.53 = &double_arr.8
            tmp.55 = sign_extend 5
            tmp.54 = add_ptr(tmp.53, index=tmp.55, scale=8)
            ptr1.9 = tmp.54
            tmp.56 = &double_arr.8
            tmp.57 = add_ptr(tmp.56, index=5L, scale=8)
            ptr2.10 = tmp.57
            tmp.58 = &double_arr.8
            tmp.60 = zero_extend 5U
            tmp.59 = add_ptr(tmp.58, index=tmp.60, scale=8)
            ptr3.11 = tmp.59
            tmp.61 = &double_arr.8
            tmp.63 = 5UL
            tmp.62 = add_ptr(tmp.61, index=tmp.63, scale=8)
            ptr4.12 = tmp.62
            tmp.64 = ptr1.9 == ptr2.10
            if !tmp.64 jump and_false_2
            tmp.67 = ptr1.9 == ptr3.11
            if !tmp.67 jump and_false_2
            tmp.66 = 1
            jump and_end_3
        
          and_false_2:
            tmp.66 = 0
        
          and_end_3:
            if !tmp.66 jump and_false_4
            tmp.70 = ptr1.9 == ptr4.12
            if !tmp.70 jump and_false_4
            tmp.69 = 1
            jump and_end_5
        
          and_false_4:
            tmp.69 = 0
        
          and_end_5:
            if !tmp.69 jump and_false_6
            tmp.73 = *ptr4.12
            tmp.74 = tmp.73 == 6D
            if !tmp.74 jump and_false_6
            tmp.72 = 1
            jump and_end_7
        
          and_false_6:
            tmp.72 = 0
        
          and_end_7:
            return tmp.72
            return 0
        }
        global function test_add_complex_expressions() { 
            tmp.75 = - 2
            i.14 = tmp.75
            tmp.76 = &i.14
            small_int_ptr.15 = tmp.76
            tmp.77 = return_one()
            tmp.79 = *small_int_ptr.15
            tmp.78 = tmp.77 + tmp.79
            tmp.80 = sign_extend tmp.78
            if !flag.13 jump else_9
            tmp.83 = &arr.18
            tmp.84 = get_elem1_ptr(tmp.83)
            tmp.82 = tmp.84
            jump end_if_8
        
          else_9:
            tmp.85 = &arr.18
            tmp.86 = get_elem2_ptr(tmp.85)
            tmp.82 = tmp.86
        
          end_if_8:
            tmp.81 = add_ptr(tmp.82, index=tmp.80, scale=4)
            ptr.19 = tmp.81
            tmp.88 = &arr.18
            tmp.90 = sign_extend 1
            tmp.89 = add_ptr(tmp.88, index=tmp.90, scale=4)
            tmp.87 = ptr.19 == tmp.89
            if !tmp.87 jump and_false_10
            tmp.93 = *ptr.19
            tmp.94 = tmp.93 == 2
            if !tmp.94 jump and_false_10
            tmp.92 = 1
            jump and_end_11
        
          and_false_10:
            tmp.92 = 0
        
          and_end_11:
            return tmp.92
            return 0
        }
        global function return_one() { 
            return 1
            return 0
        }
        global function get_elem1_ptr(arr.20) { 
            tmp.96 = sign_extend 1
            tmp.95 = add_ptr(arr.20, index=tmp.96, scale=4)
            return tmp.95
            return 0
        }
        global function get_elem2_ptr(arr.21) { 
            tmp.98 = sign_extend 2
            tmp.97 = add_ptr(arr.21, index=tmp.98, scale=4)
            return tmp.97
            return 0
        }
        global function test_add_multi_dimensional() { 
            nested_arr.23[0] = 1
            nested_arr.23[4] = 2
            nested_arr.23[8] = 3
            nested_arr.23[12] = 4
            nested_arr.23[16] = 5
            nested_arr.23[20] = 6
            nested_arr.23[24] = 7
            nested_arr.23[28] = 8
            nested_arr.23[32] = 9
            tmp.99 = &nested_arr.23
            tmp.101 = sign_extend index.22
            tmp.100 = add_ptr(tmp.99, index=tmp.101, scale=12)
            row_pointer.24 = tmp.100
            tmp.102 = *row_pointer.24
            tmp.103 = tmp.102 == 7
            return tmp.103
            return 0
        }
        global function test_add_to_subarray_pointer() { 
            nested_arr.26[0] = 1
            nested_arr.26[4] = 2
            nested_arr.26[8] = 3
            nested_arr.26[12] = 4
            nested_arr.26[16] = 5
            nested_arr.26[20] = 6
            nested_arr.26[24] = 7
            nested_arr.26[28] = 8
            nested_arr.26[32] = 9
            tmp.104 = &nested_arr.26
            tmp.106 = sign_extend 1
            tmp.105 = add_ptr(tmp.104, index=tmp.106, scale=12)
            row1.27 = tmp.105
            tmp.108 = sign_extend index.25
            tmp.107 = add_ptr(row1.27, index=tmp.108, scale=4)
            elem_ptr.28 = tmp.107
            tmp.109 = *elem_ptr.28
            tmp.110 = tmp.109 == 6
            return tmp.110
            return 0
        }
        global function test_subtract_from_pointer() { 
            tmp.111 = sign_extend 10
            long_arr.29[0] = tmp.111
            tmp.112 = sign_extend 9
            long_arr.29[8] = tmp.112
            tmp.113 = sign_extend 8
            long_arr.29[16] = tmp.113
            tmp.114 = sign_extend 7
            long_arr.29[24] = tmp.114
            tmp.115 = sign_extend 6
            long_arr.29[32] = tmp.115
            tmp.116 = &long_arr.29
            tmp.118 = sign_extend 5
            tmp.117 = add_ptr(tmp.116, index=tmp.118, scale=8)
            one_past_the_end.30 = tmp.117
            tmp.120 = sign_extend index.31
            tmp.121 = - tmp.120
            tmp.119 = add_ptr(one_past_the_end.30, index=tmp.121, scale=8)
            subtraction_result.32 = tmp.119
            tmp.122 = *subtraction_result.32
            tmp.124 = sign_extend 8
            tmp.123 = tmp.122 == tmp.124
            return tmp.123
            return 0
        }
        global function test_subtract_negative_index() { 
            tmp.125 = 100
            arr.33[0] = tmp.125
            tmp.126 = 101
            arr.33[4] = tmp.126
            tmp.127 = 102
            arr.33[8] = tmp.127
            tmp.128 = 103
            arr.33[12] = tmp.128
            tmp.129 = 104
            arr.33[16] = tmp.129
            tmp.130 = &arr.33
            tmp.132 = - 3
            tmp.133 = sign_extend tmp.132
            tmp.134 = - tmp.133
            tmp.131 = add_ptr(tmp.130, index=tmp.134, scale=4)
            ptr.34 = tmp.131
            tmp.135 = *ptr.34
            tmp.137 = 103
            tmp.136 = tmp.135 == tmp.137
            return tmp.136
            return 0
        }
        global function test_subtract_different_index_types() { 
            tmp.138 = int_to_double 0
            double_arr.35[0] = tmp.138
            tmp.139 = int_to_double 0
            double_arr.35[8] = tmp.139
            tmp.140 = int_to_double 0
            double_arr.35[16] = tmp.140
            tmp.141 = int_to_double 0
            double_arr.35[24] = tmp.141
            tmp.142 = int_to_double 0
            double_arr.35[32] = tmp.142
            tmp.143 = int_to_double 0
            double_arr.35[40] = tmp.143
            double_arr.35[48] = 6D
            double_arr.35[56] = 0D
            double_arr.35[64] = 0D
            double_arr.35[72] = 0D
            double_arr.35[80] = 0D
            tmp.144 = &double_arr.35
            tmp.146 = sign_extend 11
            tmp.145 = add_ptr(tmp.144, index=tmp.146, scale=8)
            end_ptr.36 = tmp.145
            tmp.148 = sign_extend 5
            tmp.149 = - tmp.148
            tmp.147 = add_ptr(end_ptr.36, index=tmp.149, scale=8)
            ptr1.37 = tmp.147
            tmp.151 = - 5L
            tmp.150 = add_ptr(end_ptr.36, index=tmp.151, scale=8)
            ptr2.38 = tmp.150
            tmp.153 = zero_extend 5U
            tmp.154 = - tmp.153
            tmp.152 = add_ptr(end_ptr.36, index=tmp.154, scale=8)
            ptr3.39 = tmp.152
            tmp.156 = 5UL
            tmp.157 = - tmp.156
            tmp.155 = add_ptr(end_ptr.36, index=tmp.157, scale=8)
            ptr4.40 = tmp.155
            tmp.158 = ptr1.37 == ptr2.38
            if !tmp.158 jump and_false_12
            tmp.161 = ptr1.37 == ptr3.39
            if !tmp.161 jump and_false_12
            tmp.160 = 1
            jump and_end_13
        
          and_false_12:
            tmp.160 = 0
        
          and_end_13:
            if !tmp.160 jump and_false_14
            tmp.164 = ptr1.37 == ptr4.40
            if !tmp.164 jump and_false_14
            tmp.163 = 1
            jump and_end_15
        
          and_false_14:
            tmp.163 = 0
        
          and_end_15:
            if !tmp.163 jump and_false_16
            tmp.167 = *ptr4.40
            tmp.168 = tmp.167 == 6D
            if !tmp.168 jump and_false_16
            tmp.166 = 1
            jump and_end_17
        
          and_false_16:
            tmp.166 = 0
        
          and_end_17:
            return tmp.166
            return 0
        }
        global function test_subtract_complex_expressions() { 
            if !flag.41 jump else_19
            tmp.170 = &arr.43
            tmp.171 = get_elem1_ptr(tmp.170)
            tmp.169 = tmp.171
            jump end_if_18
        
          else_19:
            tmp.172 = &arr.43
            tmp.173 = get_elem2_ptr(tmp.172)
            tmp.169 = tmp.173
        
          end_if_18:
            tmp.176 = - 2
            tmp.175 = four.42 / tmp.176
            tmp.177 = sign_extend tmp.175
            tmp.178 = - tmp.177
            tmp.174 = add_ptr(tmp.169, index=tmp.178, scale=4)
            ptr.44 = tmp.174
            tmp.179 = *ptr.44
            tmp.180 = tmp.179 == 4
            return tmp.180
            return 0
        }
        global function test_subtract_multi_dimensional() { 
            nested_arr.46[0] = 1
            nested_arr.46[4] = 2
            nested_arr.46[8] = 3
            nested_arr.46[12] = 4
            nested_arr.46[16] = 5
            nested_arr.46[20] = 6
            nested_arr.46[24] = 7
            nested_arr.46[28] = 8
            nested_arr.46[32] = 9
            tmp.181 = &nested_arr.46
            tmp.183 = sign_extend 2
            tmp.182 = add_ptr(tmp.181, index=tmp.183, scale=12)
            last_row_pointer.47 = tmp.182
            tmp.185 = sign_extend index.45
            tmp.186 = - tmp.185
            tmp.184 = add_ptr(last_row_pointer.47, index=tmp.186, scale=12)
            row_pointer.48 = tmp.184
            tmp.187 = *row_pointer.48
            tmp.188 = tmp.187 == 4
            return tmp.188
            return 0
        }
        global function main() { 
            tmp.189 = test_add_constant_to_pointer()
            tmp.190 = ! tmp.189
            if !tmp.190 jump end_if_20
            return 1
        
          end_if_20:
            tmp.191 = test_add_negative_index()
            tmp.192 = ! tmp.191
            if !tmp.192 jump end_if_22
            return 2
        
          end_if_22:
            tmp.193 = test_add_pointer_to_int()
            tmp.194 = ! tmp.193
            if !tmp.194 jump end_if_24
            return 3
        
          end_if_24:
            tmp.195 = test_add_different_index_types()
            tmp.196 = ! tmp.195
            if !tmp.196 jump end_if_26
            return 4
        
          end_if_26:
            tmp.197 = test_add_complex_expressions()
            tmp.198 = ! tmp.197
            if !tmp.198 jump end_if_28
            return 5
        
          end_if_28:
            tmp.199 = test_add_multi_dimensional()
            tmp.200 = ! tmp.199
            if !tmp.200 jump end_if_30
            return 6
        
          end_if_30:
            tmp.201 = test_add_to_subarray_pointer()
            tmp.202 = ! tmp.201
            if !tmp.202 jump end_if_32
            return 7
        
          end_if_32:
            tmp.203 = test_subtract_from_pointer()
            tmp.204 = ! tmp.203
            if !tmp.204 jump end_if_34
            return 8
        
          end_if_34:
            tmp.205 = test_subtract_negative_index()
            tmp.206 = ! tmp.205
            if !tmp.206 jump end_if_36
            return 9
        
          end_if_36:
            tmp.207 = test_subtract_different_index_types()
            tmp.208 = ! tmp.207
            if !tmp.208 jump end_if_38
            return 10
        
          end_if_38:
            tmp.209 = test_subtract_complex_expressions()
            tmp.210 = ! tmp.209
            if !tmp.210 jump end_if_40
            return 11
        
          end_if_40:
            return 0
            return 0
        }
        static arr.18: Array(4,Int) = [ 1, 2, 3, 4]
        static arr.43: Array(4,Int) = [ 1, 2, 3, 4]
        static flag.13: Int = zero[4]
        static flag.41: Int = 1
        static four.42: Int = 4
        static index.22: Int = 2
        static index.25: Int = 2
        static index.31: Int = 3
        static index.45: Int = 1
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_pointer_arithmetic_pointer_diff() {
    let src = r#"
        int get_ptr_diff(int *ptr1, int *ptr2) {
            return (ptr2 - ptr1);
        }
        int get_long_ptr_diff(long *ptr1, long *ptr2) {
            return (ptr2 - ptr1);
        }
        int get_multidim_ptr_diff(double (*ptr1)[3][5], double (*ptr2)[3][5]) {
            return (ptr2 - ptr1);
        }
        int get_multidim_ptr_diff_2(double (*ptr1)[5], double (*ptr2)[5]) {
            return (ptr2 - ptr1);
        }
        int main(void) {
            int arr[5] = {5, 4, 3, 2, 1};
            int *end_of_array = arr + 5;
            if (get_ptr_diff(arr, end_of_array) != 5) {
                return 1;
            }
            long long_arr[8];
            if (get_long_ptr_diff(long_arr + 3, long_arr) != -3) {
                return 2;
            }
            static double multidim[6][7][3][5];
            if (get_multidim_ptr_diff(multidim[2] + 1, multidim[2] + 4) != 3) {
                return 3;
            }
            if (get_multidim_ptr_diff_2(multidim[2][2] + 2, multidim[2][2]) != -2) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function get_ptr_diff(ptr1.0, ptr2.1) { 
            tmp.1 = ptr2.1 - ptr1.0
            tmp.0 = tmp.1 / 4L
            tmp.2 = truncate tmp.0
            return tmp.2
            return 0
        }
        global function get_long_ptr_diff(ptr1.2, ptr2.3) { 
            tmp.4 = ptr2.3 - ptr1.2
            tmp.3 = tmp.4 / 8L
            tmp.5 = truncate tmp.3
            return tmp.5
            return 0
        }
        global function get_multidim_ptr_diff(ptr1.4, ptr2.5) { 
            tmp.7 = ptr2.5 - ptr1.4
            tmp.6 = tmp.7 / 120L
            tmp.8 = truncate tmp.6
            return tmp.8
            return 0
        }
        global function get_multidim_ptr_diff_2(ptr1.6, ptr2.7) { 
            tmp.10 = ptr2.7 - ptr1.6
            tmp.9 = tmp.10 / 40L
            tmp.11 = truncate tmp.9
            return tmp.11
            return 0
        }
        global function main() { 
            arr.8[0] = 5
            arr.8[4] = 4
            arr.8[8] = 3
            arr.8[12] = 2
            arr.8[16] = 1
            tmp.12 = &arr.8
            tmp.14 = sign_extend 5
            tmp.13 = add_ptr(tmp.12, index=tmp.14, scale=4)
            end_of_array.9 = tmp.13
            tmp.15 = &arr.8
            tmp.16 = get_ptr_diff(tmp.15, end_of_array.9)
            tmp.17 = tmp.16 != 5
            if !tmp.17 jump end_if_0
            return 1
        
          end_if_0:
            tmp.18 = &long_arr.10
            tmp.20 = sign_extend 3
            tmp.19 = add_ptr(tmp.18, index=tmp.20, scale=8)
            tmp.21 = &long_arr.10
            tmp.22 = get_long_ptr_diff(tmp.19, tmp.21)
            tmp.24 = - 3
            tmp.23 = tmp.22 != tmp.24
            if !tmp.23 jump end_if_2
            return 2
        
          end_if_2:
            tmp.25 = &multidim.11
            tmp.26 = sign_extend 2
            tmp.27 = add_ptr(tmp.25, index=tmp.26, scale=840)
            tmp.29 = sign_extend 1
            tmp.28 = add_ptr(tmp.27, index=tmp.29, scale=120)
            tmp.30 = &multidim.11
            tmp.31 = sign_extend 2
            tmp.32 = add_ptr(tmp.30, index=tmp.31, scale=840)
            tmp.34 = sign_extend 4
            tmp.33 = add_ptr(tmp.32, index=tmp.34, scale=120)
            tmp.35 = get_multidim_ptr_diff(tmp.28, tmp.33)
            tmp.36 = tmp.35 != 3
            if !tmp.36 jump end_if_4
            return 3
        
          end_if_4:
            tmp.37 = &multidim.11
            tmp.38 = sign_extend 2
            tmp.39 = add_ptr(tmp.37, index=tmp.38, scale=840)
            tmp.40 = sign_extend 2
            tmp.41 = add_ptr(tmp.39, index=tmp.40, scale=120)
            tmp.43 = sign_extend 2
            tmp.42 = add_ptr(tmp.41, index=tmp.43, scale=40)
            tmp.44 = &multidim.11
            tmp.45 = sign_extend 2
            tmp.46 = add_ptr(tmp.44, index=tmp.45, scale=840)
            tmp.47 = sign_extend 2
            tmp.48 = add_ptr(tmp.46, index=tmp.47, scale=120)
            tmp.49 = get_multidim_ptr_diff_2(tmp.42, tmp.48)
            tmp.51 = - 2
            tmp.50 = tmp.49 != tmp.51
            if !tmp.50 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        static multidim.11: Array(6,Array(7,Array(3,Array(5,Double)))) = zero[5040]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_addition_subscript_equivalence() {
    let src = r#"
        int main(void)
        {
            unsigned long x[300][5];
            for (int i = 0; i < 300; i = i + 1) {
                for (int j = 0; j < 5; j = j + 1) {
                    x[i][j] = i * 5 + j;
                }
            }
            if (*(*(x + 20) + 3) != x[20][3]) {
                return 1;
            }
            if (&(*(*(x + 290) + 3)) != &x[290][3]) {
                return 2;
            }
            for (int i = 0; i < 300; i = i + 1) {
                for (int j = 0; j < 5; j = j + 1) {
                    if (*(*(x + i) + j) != x[i][j]) {
                        return 3;
                    }
                }
            }
            *(*(x + 275) + 4) = 22000ul;
            if (x[275][4] != 22000ul) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            i.1 = 0
        
          start_loop_0:
            tmp.0 = i.1 < 300
            if !tmp.0 jump break_loop_0
            j.2 = 0
        
          start_loop_1:
            tmp.1 = j.2 < 5
            if !tmp.1 jump break_loop_1
            tmp.2 = &x.0
            tmp.3 = sign_extend i.1
            tmp.4 = add_ptr(tmp.2, index=tmp.3, scale=40)
            tmp.5 = sign_extend j.2
            tmp.6 = add_ptr(tmp.4, index=tmp.5, scale=8)
            tmp.7 = i.1 * 5
            tmp.8 = tmp.7 + j.2
            tmp.9 = sign_extend tmp.8
            *tmp.6 = tmp.9
        
          continue_loop_1:
            tmp.10 = j.2 + 1
            j.2 = tmp.10
            jump start_loop_1
        
          break_loop_1:
        
          continue_loop_0:
            tmp.11 = i.1 + 1
            i.1 = tmp.11
            jump start_loop_0
        
          break_loop_0:
            tmp.12 = &x.0
            tmp.14 = sign_extend 20
            tmp.13 = add_ptr(tmp.12, index=tmp.14, scale=40)
            tmp.16 = sign_extend 3
            tmp.15 = add_ptr(tmp.13, index=tmp.16, scale=8)
            tmp.17 = *tmp.15
            tmp.19 = &x.0
            tmp.20 = sign_extend 20
            tmp.21 = add_ptr(tmp.19, index=tmp.20, scale=40)
            tmp.22 = sign_extend 3
            tmp.23 = add_ptr(tmp.21, index=tmp.22, scale=8)
            tmp.24 = *tmp.23
            tmp.18 = tmp.17 != tmp.24
            if !tmp.18 jump end_if_0
            return 1
        
          end_if_0:
            tmp.25 = &x.0
            tmp.27 = sign_extend 290
            tmp.26 = add_ptr(tmp.25, index=tmp.27, scale=40)
            tmp.29 = sign_extend 3
            tmp.28 = add_ptr(tmp.26, index=tmp.29, scale=8)
            tmp.31 = &x.0
            tmp.32 = sign_extend 290
            tmp.33 = add_ptr(tmp.31, index=tmp.32, scale=40)
            tmp.34 = sign_extend 3
            tmp.35 = add_ptr(tmp.33, index=tmp.34, scale=8)
            tmp.30 = tmp.28 != tmp.35
            if !tmp.30 jump end_if_2
            return 2
        
          end_if_2:
            i.3 = 0
        
          start_loop_2:
            tmp.36 = i.3 < 300
            if !tmp.36 jump break_loop_2
            j.4 = 0
        
          start_loop_3:
            tmp.37 = j.4 < 5
            if !tmp.37 jump break_loop_3
            tmp.38 = &x.0
            tmp.40 = sign_extend i.3
            tmp.39 = add_ptr(tmp.38, index=tmp.40, scale=40)
            tmp.42 = sign_extend j.4
            tmp.41 = add_ptr(tmp.39, index=tmp.42, scale=8)
            tmp.43 = *tmp.41
            tmp.45 = &x.0
            tmp.46 = sign_extend i.3
            tmp.47 = add_ptr(tmp.45, index=tmp.46, scale=40)
            tmp.48 = sign_extend j.4
            tmp.49 = add_ptr(tmp.47, index=tmp.48, scale=8)
            tmp.50 = *tmp.49
            tmp.44 = tmp.43 != tmp.50
            if !tmp.44 jump end_if_4
            return 3
        
          end_if_4:
        
          continue_loop_3:
            tmp.51 = j.4 + 1
            j.4 = tmp.51
            jump start_loop_3
        
          break_loop_3:
        
          continue_loop_2:
            tmp.52 = i.3 + 1
            i.3 = tmp.52
            jump start_loop_2
        
          break_loop_2:
            tmp.53 = &x.0
            tmp.55 = sign_extend 275
            tmp.54 = add_ptr(tmp.53, index=tmp.55, scale=40)
            tmp.57 = sign_extend 4
            tmp.56 = add_ptr(tmp.54, index=tmp.57, scale=8)
            *tmp.56 = 22000UL
            tmp.58 = &x.0
            tmp.59 = sign_extend 275
            tmp.60 = add_ptr(tmp.58, index=tmp.59, scale=40)
            tmp.61 = sign_extend 4
            tmp.62 = add_ptr(tmp.60, index=tmp.61, scale=8)
            tmp.63 = *tmp.62
            tmp.64 = tmp.63 != 22000UL
            if !tmp.64 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_array_of_pointers_to_arrays() {
    let src = r#"
        int main(void) {
            int x = 0;
            int y = 1;
            int z = 2;
            int *arr[3] = { &x, &y, &z };
            int *arr2[3] = {&z, &y, &x};
            int *(*array_of_pointers[3])[3] = {&arr, &arr2, &arr};
            if (array_of_pointers[0] != (int *(*)[3]) arr) {
                return 1;
            }
            if (array_of_pointers[1] != (int *(*)[3]) arr2) {
                return 2;
            }
            if (array_of_pointers[2] != (int *(*)[3]) arr) {
                return 3;
            }
            if (array_of_pointers[1][0][0] != &z) {
                return 4;
            }
            if (array_of_pointers[1][0][1] != &y) {
                return 5;
            }
            if (array_of_pointers[2][0][2][0] != 2) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 0
            y.1 = 1
            z.2 = 2
            tmp.0 = &x.0
            arr.3[0] = tmp.0
            tmp.1 = &y.1
            arr.3[8] = tmp.1
            tmp.2 = &z.2
            arr.3[16] = tmp.2
            tmp.3 = &z.2
            arr2.4[0] = tmp.3
            tmp.4 = &y.1
            arr2.4[8] = tmp.4
            tmp.5 = &x.0
            arr2.4[16] = tmp.5
            tmp.6 = &arr.3
            array_of_pointers.5[0] = tmp.6
            tmp.7 = &arr2.4
            array_of_pointers.5[8] = tmp.7
            tmp.8 = &arr.3
            array_of_pointers.5[16] = tmp.8
            tmp.9 = &array_of_pointers.5
            tmp.10 = sign_extend 0
            tmp.11 = add_ptr(tmp.9, index=tmp.10, scale=8)
            tmp.12 = *tmp.11
            tmp.14 = &arr.3
            tmp.15 = tmp.14
            tmp.13 = tmp.12 != tmp.15
            if !tmp.13 jump end_if_0
            return 1
        
          end_if_0:
            tmp.16 = &array_of_pointers.5
            tmp.17 = sign_extend 1
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=8)
            tmp.19 = *tmp.18
            tmp.21 = &arr2.4
            tmp.22 = tmp.21
            tmp.20 = tmp.19 != tmp.22
            if !tmp.20 jump end_if_2
            return 2
        
          end_if_2:
            tmp.23 = &array_of_pointers.5
            tmp.24 = sign_extend 2
            tmp.25 = add_ptr(tmp.23, index=tmp.24, scale=8)
            tmp.26 = *tmp.25
            tmp.28 = &arr.3
            tmp.29 = tmp.28
            tmp.27 = tmp.26 != tmp.29
            if !tmp.27 jump end_if_4
            return 3
        
          end_if_4:
            tmp.30 = &array_of_pointers.5
            tmp.31 = sign_extend 1
            tmp.32 = add_ptr(tmp.30, index=tmp.31, scale=8)
            tmp.33 = *tmp.32
            tmp.34 = sign_extend 0
            tmp.35 = add_ptr(tmp.33, index=tmp.34, scale=24)
            tmp.36 = sign_extend 0
            tmp.37 = add_ptr(tmp.35, index=tmp.36, scale=8)
            tmp.38 = *tmp.37
            tmp.40 = &z.2
            tmp.39 = tmp.38 != tmp.40
            if !tmp.39 jump end_if_6
            return 4
        
          end_if_6:
            tmp.41 = &array_of_pointers.5
            tmp.42 = sign_extend 1
            tmp.43 = add_ptr(tmp.41, index=tmp.42, scale=8)
            tmp.44 = *tmp.43
            tmp.45 = sign_extend 0
            tmp.46 = add_ptr(tmp.44, index=tmp.45, scale=24)
            tmp.47 = sign_extend 1
            tmp.48 = add_ptr(tmp.46, index=tmp.47, scale=8)
            tmp.49 = *tmp.48
            tmp.51 = &y.1
            tmp.50 = tmp.49 != tmp.51
            if !tmp.50 jump end_if_8
            return 5
        
          end_if_8:
            tmp.52 = &array_of_pointers.5
            tmp.53 = sign_extend 2
            tmp.54 = add_ptr(tmp.52, index=tmp.53, scale=8)
            tmp.55 = *tmp.54
            tmp.56 = sign_extend 0
            tmp.57 = add_ptr(tmp.55, index=tmp.56, scale=24)
            tmp.58 = sign_extend 2
            tmp.59 = add_ptr(tmp.57, index=tmp.58, scale=8)
            tmp.60 = *tmp.59
            tmp.61 = sign_extend 0
            tmp.62 = add_ptr(tmp.60, index=tmp.61, scale=4)
            tmp.63 = *tmp.62
            tmp.64 = tmp.63 != 2
            if !tmp.64 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_complex_operands() {
    let src = r#"
        int assign_in_index(int idx) {
            int arr[3] = {1, 2, 3};
            int val = arr[idx = idx + 2];
            if (idx != 1) {
                return 1;
            }
            if (val != 2) {
                return 2;
            }
            return 0;
        }
        int static_index(void) {
            static int index = 0;
            int retval = index;
            index = index + 1;
            return retval;
        }
        int funcall_in_index(void) {
            int arr[3] = {1, 2, 3};
            int v1 = arr[static_index()];
            int v2 = arr[static_index()];
            if (v1 != 1) {
                return 3;
            }
            if (v2 != 2) {
                return 4;
            }
            return 0;
        }
        int subscript_inception(long *arr, int *a, int b){
            return arr[a[b]];
        }
        int check_subscript_inception(void) {
            long arr[4] = {4, 3, 2, 1};
            int indices[2] = {1, 2};
            if (subscript_inception(arr, indices, 1) != 2) {
                return 5;
            }
            if (subscript_inception(arr, indices, 0) != 3) {
                return 6;
            }
            return 0;
        }
        int *get_array(void) {
            static int arr[3];
            return arr;
        }
        int subscript_function_result(void){
            get_array()[2] = 1;
            if (get_array()[2] != 1) {
                return 7;
            }
            return 0;
        }
        int negate_subscript(int *arr, int idx, int expected) {
            if (arr[-idx] != expected) {
                return 8;
            }
            return 0;
        }
        int main(void) {
            int check = assign_in_index(-1);
            if (check) {
                return check;
            }
            check = funcall_in_index();
            if (check) {
                return check;
            }
            check = check_subscript_inception();
            if (check) {
                return check;
            }
            check = subscript_function_result();
            if (check) {
                return check;
            }
            int arr[3] = {0, 1, 2};
            check = negate_subscript(arr + 2, 2, 0);
            if (check) {
                return check;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function assign_in_index(idx.0) { 
            arr.1[0] = 1
            arr.1[4] = 2
            arr.1[8] = 3
            tmp.0 = &arr.1
            tmp.1 = idx.0 + 2
            idx.0 = tmp.1
            tmp.2 = sign_extend tmp.1
            tmp.3 = add_ptr(tmp.0, index=tmp.2, scale=4)
            tmp.4 = *tmp.3
            val.2 = tmp.4
            tmp.5 = idx.0 != 1
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = val.2 != 2
            if !tmp.6 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
        global function static_index() { 
            retval.4 = index.3
            tmp.7 = index.3 + 1
            index.3 = tmp.7
            return retval.4
            return 0
        }
        global function funcall_in_index() { 
            arr.5[0] = 1
            arr.5[4] = 2
            arr.5[8] = 3
            tmp.8 = &arr.5
            tmp.9 = static_index()
            tmp.10 = sign_extend tmp.9
            tmp.11 = add_ptr(tmp.8, index=tmp.10, scale=4)
            tmp.12 = *tmp.11
            v1.6 = tmp.12
            tmp.13 = &arr.5
            tmp.14 = static_index()
            tmp.15 = sign_extend tmp.14
            tmp.16 = add_ptr(tmp.13, index=tmp.15, scale=4)
            tmp.17 = *tmp.16
            v2.7 = tmp.17
            tmp.18 = v1.6 != 1
            if !tmp.18 jump end_if_4
            return 3
        
          end_if_4:
            tmp.19 = v2.7 != 2
            if !tmp.19 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        global function subscript_inception(arr.8, a.9, b.10) { 
            tmp.20 = sign_extend b.10
            tmp.21 = add_ptr(a.9, index=tmp.20, scale=4)
            tmp.22 = *tmp.21
            tmp.23 = sign_extend tmp.22
            tmp.24 = add_ptr(arr.8, index=tmp.23, scale=8)
            tmp.25 = *tmp.24
            tmp.26 = truncate tmp.25
            return tmp.26
            return 0
        }
        global function check_subscript_inception() { 
            tmp.27 = sign_extend 4
            arr.11[0] = tmp.27
            tmp.28 = sign_extend 3
            arr.11[8] = tmp.28
            tmp.29 = sign_extend 2
            arr.11[16] = tmp.29
            tmp.30 = sign_extend 1
            arr.11[24] = tmp.30
            indices.12[0] = 1
            indices.12[4] = 2
            tmp.31 = &arr.11
            tmp.32 = &indices.12
            tmp.33 = subscript_inception(tmp.31, tmp.32, 1)
            tmp.34 = tmp.33 != 2
            if !tmp.34 jump end_if_8
            return 5
        
          end_if_8:
            tmp.35 = &arr.11
            tmp.36 = &indices.12
            tmp.37 = subscript_inception(tmp.35, tmp.36, 0)
            tmp.38 = tmp.37 != 3
            if !tmp.38 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
        global function get_array() { 
            tmp.39 = &arr.13
            return tmp.39
            return 0
        }
        global function subscript_function_result() { 
            tmp.40 = get_array()
            tmp.41 = sign_extend 2
            tmp.42 = add_ptr(tmp.40, index=tmp.41, scale=4)
            *tmp.42 = 1
            tmp.43 = get_array()
            tmp.44 = sign_extend 2
            tmp.45 = add_ptr(tmp.43, index=tmp.44, scale=4)
            tmp.46 = *tmp.45
            tmp.47 = tmp.46 != 1
            if !tmp.47 jump end_if_12
            return 7
        
          end_if_12:
            return 0
            return 0
        }
        global function negate_subscript(arr.14, idx.15, expected.16) { 
            tmp.48 = - idx.15
            tmp.49 = sign_extend tmp.48
            tmp.50 = add_ptr(arr.14, index=tmp.49, scale=4)
            tmp.51 = *tmp.50
            tmp.52 = tmp.51 != expected.16
            if !tmp.52 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
        global function main() { 
            tmp.53 = - 1
            tmp.54 = assign_in_index(tmp.53)
            check.17 = tmp.54
            if !check.17 jump end_if_16
            return check.17
        
          end_if_16:
            tmp.55 = funcall_in_index()
            check.17 = tmp.55
            if !check.17 jump end_if_18
            return check.17
        
          end_if_18:
            tmp.56 = check_subscript_inception()
            check.17 = tmp.56
            if !check.17 jump end_if_20
            return check.17
        
          end_if_20:
            tmp.57 = subscript_function_result()
            check.17 = tmp.57
            if !check.17 jump end_if_22
            return check.17
        
          end_if_22:
            arr.18[0] = 0
            arr.18[4] = 1
            arr.18[8] = 2
            tmp.58 = &arr.18
            tmp.60 = sign_extend 2
            tmp.59 = add_ptr(tmp.58, index=tmp.60, scale=4)
            tmp.61 = negate_subscript(tmp.59, 2, 0)
            check.17 = tmp.61
            if !check.17 jump end_if_24
            return check.17
        
          end_if_24:
            return 0
            return 0
        }
        static arr.13: Array(3,Int) = zero[12]
        static index.3: Int = 0
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_simple() {
    let src = r#"
        int main(void) {
            int arr[3] = {1, 2, 3};
            return arr[2];
        }
    "#;
    let expected = r#"
        global function main() { 
            arr.0[0] = 1
            arr.0[4] = 2
            arr.0[8] = 3
            tmp.0 = &arr.0
            tmp.1 = sign_extend 2
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=4)
            tmp.3 = *tmp.2
            return tmp.3
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_simple_subscripts() {
    let src = r#"
        int integer_types(unsigned *arr, unsigned expected) {
            unsigned val1 = arr[5];
            unsigned val2 = arr[5u];
            unsigned val3 = arr[5l];
            unsigned val4 = arr[5ul];
            if (val1 != expected) {
                return 1;
            }
            if (val2 != expected) {
                return 2;
            }
            if (val3 != expected) {
                return 3;
            }
            if (val4 != expected) {
                return 4;
            }
            return 0;
        }
        int reverse_subscript(long *arr, long expected) {
            if (arr[3] != expected) {
                return 5;
            }
            if (3[arr] != expected) {
                return 6;
            }
            if (&3[arr] != &arr[3]) {
                return 7;
            }
            return 0;
        }
        static double static_array[3] = {0.1, 0.2, 0.3};
        int subscript_static(void) {
            if (static_array[0] != 0.1) {
                return 8;
            }
            if (static_array[1] != 0.2) {
                return 9;
            }
            if (static_array[2] != 0.3) {
                return 10;
            }
            return 0;
        }
        int update_element(int *arr, int expected) {
            arr[10] = arr[10] * 2;
            if (arr[10] != expected) {
                return 11;
            }
            return 0;
        }
        int *increment_static_element(void) {
            static int arr[4];
            arr[3] = arr[3] + 1;
            return arr;
        }
        int check_increment_static_element(void) {
            int *arr1 = increment_static_element();
            if (arr1[3] != 1) {
                return 12;
            }
            if (arr1[0] || arr1[1] || arr1[2]) {
                return 13;
            }
            int *arr2 = increment_static_element();
            if (arr1 != arr2) {
                return 14;
            }
            if (arr1[3] != 2) {
                return 15;
            }
            return 0;
        }
        int main(void) {
            unsigned int unsigned_arr[6] = {0, 0, 0, 0, 0, 7u};
            int check = integer_types(unsigned_arr, 7u);
            if (check) {
                return check;
            }
            long int long_arr[4] = {100, 102, 104, 106};
            check = reverse_subscript(long_arr, 106);
            if (check) {
                return check;
            }
            check = subscript_static();
            if (check) {
                return check;
            }
            int int_arr[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15};
            check = update_element(int_arr, 30);
            if (check) {
                return check;
            }
            check = check_increment_static_element();
            if (check) {
                return check;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function integer_types(arr.0, expected.1) { 
            tmp.0 = sign_extend 5
            tmp.1 = add_ptr(arr.0, index=tmp.0, scale=4)
            tmp.2 = *tmp.1
            val1.2 = tmp.2
            tmp.3 = zero_extend 5U
            tmp.4 = add_ptr(arr.0, index=tmp.3, scale=4)
            tmp.5 = *tmp.4
            val2.3 = tmp.5
            tmp.6 = add_ptr(arr.0, index=5L, scale=4)
            tmp.7 = *tmp.6
            val3.4 = tmp.7
            tmp.8 = 5UL
            tmp.9 = add_ptr(arr.0, index=tmp.8, scale=4)
            tmp.10 = *tmp.9
            val4.5 = tmp.10
            tmp.11 = val1.2 != expected.1
            if !tmp.11 jump end_if_0
            return 1
        
          end_if_0:
            tmp.12 = val2.3 != expected.1
            if !tmp.12 jump end_if_2
            return 2
        
          end_if_2:
            tmp.13 = val3.4 != expected.1
            if !tmp.13 jump end_if_4
            return 3
        
          end_if_4:
            tmp.14 = val4.5 != expected.1
            if !tmp.14 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        global function reverse_subscript(arr.6, expected.7) { 
            tmp.15 = sign_extend 3
            tmp.16 = add_ptr(arr.6, index=tmp.15, scale=8)
            tmp.17 = *tmp.16
            tmp.18 = tmp.17 != expected.7
            if !tmp.18 jump end_if_8
            return 5
        
          end_if_8:
            tmp.19 = sign_extend 3
            tmp.20 = add_ptr(arr.6, index=tmp.19, scale=8)
            tmp.21 = *tmp.20
            tmp.22 = tmp.21 != expected.7
            if !tmp.22 jump end_if_10
            return 6
        
          end_if_10:
            tmp.23 = sign_extend 3
            tmp.24 = add_ptr(arr.6, index=tmp.23, scale=8)
            tmp.26 = sign_extend 3
            tmp.27 = add_ptr(arr.6, index=tmp.26, scale=8)
            tmp.25 = tmp.24 != tmp.27
            if !tmp.25 jump end_if_12
            return 7
        
          end_if_12:
            return 0
            return 0
        }
        global function subscript_static() { 
            tmp.28 = &static_array
            tmp.29 = sign_extend 0
            tmp.30 = add_ptr(tmp.28, index=tmp.29, scale=8)
            tmp.31 = *tmp.30
            tmp.32 = tmp.31 != 0.1D
            if !tmp.32 jump end_if_14
            return 8
        
          end_if_14:
            tmp.33 = &static_array
            tmp.34 = sign_extend 1
            tmp.35 = add_ptr(tmp.33, index=tmp.34, scale=8)
            tmp.36 = *tmp.35
            tmp.37 = tmp.36 != 0.2D
            if !tmp.37 jump end_if_16
            return 9
        
          end_if_16:
            tmp.38 = &static_array
            tmp.39 = sign_extend 2
            tmp.40 = add_ptr(tmp.38, index=tmp.39, scale=8)
            tmp.41 = *tmp.40
            tmp.42 = tmp.41 != 0.3D
            if !tmp.42 jump end_if_18
            return 10
        
          end_if_18:
            return 0
            return 0
        }
        global function update_element(arr.8, expected.9) { 
            tmp.43 = sign_extend 10
            tmp.44 = add_ptr(arr.8, index=tmp.43, scale=4)
            tmp.45 = sign_extend 10
            tmp.46 = add_ptr(arr.8, index=tmp.45, scale=4)
            tmp.47 = *tmp.46
            tmp.48 = tmp.47 * 2
            *tmp.44 = tmp.48
            tmp.49 = sign_extend 10
            tmp.50 = add_ptr(arr.8, index=tmp.49, scale=4)
            tmp.51 = *tmp.50
            tmp.52 = tmp.51 != expected.9
            if !tmp.52 jump end_if_20
            return 11
        
          end_if_20:
            return 0
            return 0
        }
        global function increment_static_element() { 
            tmp.53 = &arr.10
            tmp.54 = sign_extend 3
            tmp.55 = add_ptr(tmp.53, index=tmp.54, scale=4)
            tmp.56 = &arr.10
            tmp.57 = sign_extend 3
            tmp.58 = add_ptr(tmp.56, index=tmp.57, scale=4)
            tmp.59 = *tmp.58
            tmp.60 = tmp.59 + 1
            *tmp.55 = tmp.60
            tmp.61 = &arr.10
            return tmp.61
            return 0
        }
        global function check_increment_static_element() { 
            tmp.62 = increment_static_element()
            arr1.11 = tmp.62
            tmp.63 = sign_extend 3
            tmp.64 = add_ptr(arr1.11, index=tmp.63, scale=4)
            tmp.65 = *tmp.64
            tmp.66 = tmp.65 != 1
            if !tmp.66 jump end_if_22
            return 12
        
          end_if_22:
            tmp.67 = sign_extend 0
            tmp.68 = add_ptr(arr1.11, index=tmp.67, scale=4)
            tmp.69 = *tmp.68
            if tmp.69 jump or_true_24
            tmp.72 = sign_extend 1
            tmp.73 = add_ptr(arr1.11, index=tmp.72, scale=4)
            tmp.74 = *tmp.73
            if tmp.74 jump or_true_24
            tmp.71 = 0
            jump or_end_25
        
          or_true_24:
            tmp.71 = 1
        
          or_end_25:
            if tmp.71 jump or_true_26
            tmp.77 = sign_extend 2
            tmp.78 = add_ptr(arr1.11, index=tmp.77, scale=4)
            tmp.79 = *tmp.78
            if tmp.79 jump or_true_26
            tmp.76 = 0
            jump or_end_27
        
          or_true_26:
            tmp.76 = 1
        
          or_end_27:
            if !tmp.76 jump end_if_28
            return 13
        
          end_if_28:
            tmp.80 = increment_static_element()
            arr2.12 = tmp.80
            tmp.81 = arr1.11 != arr2.12
            if !tmp.81 jump end_if_30
            return 14
        
          end_if_30:
            tmp.82 = sign_extend 3
            tmp.83 = add_ptr(arr1.11, index=tmp.82, scale=4)
            tmp.84 = *tmp.83
            tmp.85 = tmp.84 != 2
            if !tmp.85 jump end_if_32
            return 15
        
          end_if_32:
            return 0
            return 0
        }
        global function main() { 
            tmp.86 = 0
            unsigned_arr.13[0] = tmp.86
            tmp.87 = 0
            unsigned_arr.13[4] = tmp.87
            tmp.88 = 0
            unsigned_arr.13[8] = tmp.88
            tmp.89 = 0
            unsigned_arr.13[12] = tmp.89
            tmp.90 = 0
            unsigned_arr.13[16] = tmp.90
            unsigned_arr.13[20] = 7U
            tmp.91 = &unsigned_arr.13
            tmp.92 = integer_types(tmp.91, 7U)
            check.14 = tmp.92
            if !check.14 jump end_if_34
            return check.14
        
          end_if_34:
            tmp.93 = sign_extend 100
            long_arr.15[0] = tmp.93
            tmp.94 = sign_extend 102
            long_arr.15[8] = tmp.94
            tmp.95 = sign_extend 104
            long_arr.15[16] = tmp.95
            tmp.96 = sign_extend 106
            long_arr.15[24] = tmp.96
            tmp.97 = &long_arr.15
            tmp.98 = sign_extend 106
            tmp.99 = reverse_subscript(tmp.97, tmp.98)
            check.14 = tmp.99
            if !check.14 jump end_if_36
            return check.14
        
          end_if_36:
            tmp.100 = subscript_static()
            check.14 = tmp.100
            if !check.14 jump end_if_38
            return check.14
        
          end_if_38:
            int_arr.16[0] = 0
            int_arr.16[4] = 0
            int_arr.16[8] = 0
            int_arr.16[12] = 0
            int_arr.16[16] = 0
            int_arr.16[20] = 0
            int_arr.16[24] = 0
            int_arr.16[28] = 0
            int_arr.16[32] = 0
            int_arr.16[36] = 0
            int_arr.16[40] = 15
            tmp.101 = &int_arr.16
            tmp.102 = update_element(tmp.101, 30)
            check.14 = tmp.102
            if !check.14 jump end_if_40
            return check.14
        
          end_if_40:
            tmp.103 = check_increment_static_element()
            check.14 = tmp.103
            if !check.14 jump end_if_42
            return check.14
        
          end_if_42:
            return 0
            return 0
        }
        static arr.10: Array(4,Int) = zero[16]
        static static_array: Array(3,Double) = [ 0.1D, 0.2D, 0.3D]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_subscript_nested() {
    let src = r#"
        int read_nested(int nested_arr[2][3], int i, int j, int expected) {
            return (nested_arr[i][j] == expected);
        }
        int write_nested(int nested_arr[2][3], int i, int j, int new_val) {
            nested_arr[i][j] = new_val;
            return 0;
        }
        int read_nested_negated(int (*nested_arr)[3], int i, int j, int expected) {
            return (nested_arr[-i][j] == expected);
        }
        int get_nested_addr(int nested_arr[2][3], int i, int j, int *expected) {
            return &nested_arr[i][j] == expected;
        }
        static int nested_arr[4][3][5] = {
            {{1, 2}, {3}},
            {{4}, {5}}
        };
        int read_static_nested(int i, int j, int k, int expected) {
            return nested_arr[i][j][k] == expected;
        }
        int (*get_array(void))[3][5] {
            return nested_arr;
        }
        int write_nested_complex(int i, int j, int k, int val) {
            get_array()[i][j][k] = val;
            return 0;
        }
        int *get_subarray(int nested[2][3], int i) {
            return nested[i];
        }
        int main(void) {
            int nested_arr[2][3] = {{1, 2, 3}, {4, 5, 6}};
            if (!read_nested(nested_arr, 1, 2, 6)) {
                return 1;
            }
            write_nested(nested_arr, 1, 2, -1);
            if (nested_arr[1][2] != -1) {
                return 2;
            }
            if (!read_nested_negated(nested_arr + 2, 2, 0, 1)) {
                return 3;
            }
            int *ptr = (nested_arr[0]) + 1;
            if (!get_nested_addr(nested_arr, 0, 1, ptr)) {
                return 4;
            }
            if (!read_static_nested(1, 1, 0, 5)) {
                return 5;
            }
            write_nested_complex(0, 2, 3, 111);
            if (get_array()[0][2][3] != 111) {
                return 6;
            }
            int *row_1 = get_subarray(nested_arr, 1);
            if (row_1 + 1 != &nested_arr[1][1]) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function read_nested(nested_arr.0, i.1, j.2, expected.3) { 
            tmp.0 = sign_extend i.1
            tmp.1 = add_ptr(nested_arr.0, index=tmp.0, scale=12)
            tmp.2 = sign_extend j.2
            tmp.3 = add_ptr(tmp.1, index=tmp.2, scale=4)
            tmp.4 = *tmp.3
            tmp.5 = tmp.4 == expected.3
            return tmp.5
            return 0
        }
        global function write_nested(nested_arr.4, i.5, j.6, new_val.7) { 
            tmp.6 = sign_extend i.5
            tmp.7 = add_ptr(nested_arr.4, index=tmp.6, scale=12)
            tmp.8 = sign_extend j.6
            tmp.9 = add_ptr(tmp.7, index=tmp.8, scale=4)
            *tmp.9 = new_val.7
            return 0
            return 0
        }
        global function read_nested_negated(nested_arr.8, i.9, j.10, expected.11) { 
            tmp.10 = - i.9
            tmp.11 = sign_extend tmp.10
            tmp.12 = add_ptr(nested_arr.8, index=tmp.11, scale=12)
            tmp.13 = sign_extend j.10
            tmp.14 = add_ptr(tmp.12, index=tmp.13, scale=4)
            tmp.15 = *tmp.14
            tmp.16 = tmp.15 == expected.11
            return tmp.16
            return 0
        }
        global function get_nested_addr(nested_arr.12, i.13, j.14, expected.15) { 
            tmp.17 = sign_extend i.13
            tmp.18 = add_ptr(nested_arr.12, index=tmp.17, scale=12)
            tmp.19 = sign_extend j.14
            tmp.20 = add_ptr(tmp.18, index=tmp.19, scale=4)
            tmp.21 = tmp.20 == expected.15
            return tmp.21
            return 0
        }
        global function read_static_nested(i.16, j.17, k.18, expected.19) { 
            tmp.22 = &nested_arr
            tmp.23 = sign_extend i.16
            tmp.24 = add_ptr(tmp.22, index=tmp.23, scale=60)
            tmp.25 = sign_extend j.17
            tmp.26 = add_ptr(tmp.24, index=tmp.25, scale=20)
            tmp.27 = sign_extend k.18
            tmp.28 = add_ptr(tmp.26, index=tmp.27, scale=4)
            tmp.29 = *tmp.28
            tmp.30 = tmp.29 == expected.19
            return tmp.30
            return 0
        }
        global function get_array() { 
            tmp.31 = &nested_arr
            return tmp.31
            return 0
        }
        global function write_nested_complex(i.20, j.21, k.22, val.23) { 
            tmp.32 = get_array()
            tmp.33 = sign_extend i.20
            tmp.34 = add_ptr(tmp.32, index=tmp.33, scale=60)
            tmp.35 = sign_extend j.21
            tmp.36 = add_ptr(tmp.34, index=tmp.35, scale=20)
            tmp.37 = sign_extend k.22
            tmp.38 = add_ptr(tmp.36, index=tmp.37, scale=4)
            *tmp.38 = val.23
            return 0
            return 0
        }
        global function get_subarray(nested.24, i.25) { 
            tmp.39 = sign_extend i.25
            tmp.40 = add_ptr(nested.24, index=tmp.39, scale=12)
            return tmp.40
            return 0
        }
        global function main() { 
            nested_arr.26[0] = 1
            nested_arr.26[4] = 2
            nested_arr.26[8] = 3
            nested_arr.26[12] = 4
            nested_arr.26[16] = 5
            nested_arr.26[20] = 6
            tmp.41 = &nested_arr.26
            tmp.42 = read_nested(tmp.41, 1, 2, 6)
            tmp.43 = ! tmp.42
            if !tmp.43 jump end_if_0
            return 1
        
          end_if_0:
            tmp.44 = &nested_arr.26
            tmp.45 = - 1
            tmp.46 = write_nested(tmp.44, 1, 2, tmp.45)
            tmp.47 = &nested_arr.26
            tmp.48 = sign_extend 1
            tmp.49 = add_ptr(tmp.47, index=tmp.48, scale=12)
            tmp.50 = sign_extend 2
            tmp.51 = add_ptr(tmp.49, index=tmp.50, scale=4)
            tmp.52 = *tmp.51
            tmp.54 = - 1
            tmp.53 = tmp.52 != tmp.54
            if !tmp.53 jump end_if_2
            return 2
        
          end_if_2:
            tmp.55 = &nested_arr.26
            tmp.57 = sign_extend 2
            tmp.56 = add_ptr(tmp.55, index=tmp.57, scale=12)
            tmp.58 = read_nested_negated(tmp.56, 2, 0, 1)
            tmp.59 = ! tmp.58
            if !tmp.59 jump end_if_4
            return 3
        
          end_if_4:
            tmp.60 = &nested_arr.26
            tmp.61 = sign_extend 0
            tmp.62 = add_ptr(tmp.60, index=tmp.61, scale=12)
            tmp.64 = sign_extend 1
            tmp.63 = add_ptr(tmp.62, index=tmp.64, scale=4)
            ptr.27 = tmp.63
            tmp.65 = &nested_arr.26
            tmp.66 = get_nested_addr(tmp.65, 0, 1, ptr.27)
            tmp.67 = ! tmp.66
            if !tmp.67 jump end_if_6
            return 4
        
          end_if_6:
            tmp.68 = read_static_nested(1, 1, 0, 5)
            tmp.69 = ! tmp.68
            if !tmp.69 jump end_if_8
            return 5
        
          end_if_8:
            tmp.70 = write_nested_complex(0, 2, 3, 111)
            tmp.71 = get_array()
            tmp.72 = sign_extend 0
            tmp.73 = add_ptr(tmp.71, index=tmp.72, scale=60)
            tmp.74 = sign_extend 2
            tmp.75 = add_ptr(tmp.73, index=tmp.74, scale=20)
            tmp.76 = sign_extend 3
            tmp.77 = add_ptr(tmp.75, index=tmp.76, scale=4)
            tmp.78 = *tmp.77
            tmp.79 = tmp.78 != 111
            if !tmp.79 jump end_if_10
            return 6
        
          end_if_10:
            tmp.80 = &nested_arr.26
            tmp.81 = get_subarray(tmp.80, 1)
            row_1.28 = tmp.81
            tmp.83 = sign_extend 1
            tmp.82 = add_ptr(row_1.28, index=tmp.83, scale=4)
            tmp.85 = &nested_arr.26
            tmp.86 = sign_extend 1
            tmp.87 = add_ptr(tmp.85, index=tmp.86, scale=12)
            tmp.88 = sign_extend 1
            tmp.89 = add_ptr(tmp.87, index=tmp.88, scale=4)
            tmp.84 = tmp.82 != tmp.89
            if !tmp.84 jump end_if_12
            return 7
        
          end_if_12:
            return 0
            return 0
        }
        static nested_arr: Array(4,Array(3,Array(5,Int))) = [ 1, 2, zero[12], 3, zero[16], zero[20], 4, zero[16], 5, zero[16], zero[20], zero[120]]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_subscript_pointer() {
    let src = r#"
        int subscript_pointer_to_pointer(int **x) {
            return x[0][0];
        }
        int main(void) {
            int a = 3;
            int *ptr = &a;
            if (ptr[0] != 3) {
                return 1;
            }
            int **ptr_ptr = &ptr;
            if (ptr_ptr[0][0] != 3) {
                return 2;
            }
            int dereferenced = subscript_pointer_to_pointer(ptr_ptr);
            if (dereferenced != 3) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function subscript_pointer_to_pointer(x.0) { 
            tmp.0 = sign_extend 0
            tmp.1 = add_ptr(x.0, index=tmp.0, scale=8)
            tmp.2 = *tmp.1
            tmp.3 = sign_extend 0
            tmp.4 = add_ptr(tmp.2, index=tmp.3, scale=4)
            tmp.5 = *tmp.4
            return tmp.5
            return 0
        }
        global function main() { 
            a.1 = 3
            tmp.6 = &a.1
            ptr.2 = tmp.6
            tmp.7 = sign_extend 0
            tmp.8 = add_ptr(ptr.2, index=tmp.7, scale=4)
            tmp.9 = *tmp.8
            tmp.10 = tmp.9 != 3
            if !tmp.10 jump end_if_0
            return 1
        
          end_if_0:
            tmp.11 = &ptr.2
            ptr_ptr.3 = tmp.11
            tmp.12 = sign_extend 0
            tmp.13 = add_ptr(ptr_ptr.3, index=tmp.12, scale=8)
            tmp.14 = *tmp.13
            tmp.15 = sign_extend 0
            tmp.16 = add_ptr(tmp.14, index=tmp.15, scale=4)
            tmp.17 = *tmp.16
            tmp.18 = tmp.17 != 3
            if !tmp.18 jump end_if_2
            return 2
        
          end_if_2:
            tmp.19 = subscript_pointer_to_pointer(ptr_ptr.3)
            dereferenced.4 = tmp.19
            tmp.20 = dereferenced.4 != 3
            if !tmp.20 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_subscript_precedence() {
    let src = r#"
        int main(void) {
            int arr[3] = {1, 2, 3};
            return (-arr[2] == -3);
        }
    "#;
    let expected = r#"
        global function main() { 
            arr.0[0] = 1
            arr.0[4] = 2
            arr.0[8] = 3
            tmp.0 = &arr.0
            tmp.1 = sign_extend 2
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=4)
            tmp.3 = *tmp.2
            tmp.4 = - tmp.3
            tmp.6 = - 3
            tmp.5 = tmp.4 == tmp.6
            return tmp.5
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_char_constants_char_constant_operations() {
    let src = r#"
        double d = '\\';
        int main(void) {
            if (d != 92.0) {
                return 1;
            }
            unsigned long array['\n'] = {1, 2, 'a', '\b', 3, 4, 5, '!', '%', '~'};
            if (array[2] != 97) {
                return 2;
            }
            if (array[3] != 8) {
                return 3;
            }
            if (array[7] != 33) {
                return 4;
            }
            if (array[8] != 37) {
                return 5;
            }
            if (array[9] != 126) {
                return 6;
            }
            unsigned long (*array_ptr)[10] = &array;
            if (array_ptr[0][9] != '~') {
                return 7;
            }
            int i = array['\a'];
            if (i != 33) {
                return 8;
            }
            double d = 10 % '\a' + 4.0 * '_' - ~'@';
            if (d != 448.0) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = d != 92D
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = sign_extend 1
            array.0[0] = tmp.1
            tmp.2 = sign_extend 2
            array.0[8] = tmp.2
            tmp.3 = sign_extend 97
            array.0[16] = tmp.3
            tmp.4 = sign_extend 8
            array.0[24] = tmp.4
            tmp.5 = sign_extend 3
            array.0[32] = tmp.5
            tmp.6 = sign_extend 4
            array.0[40] = tmp.6
            tmp.7 = sign_extend 5
            array.0[48] = tmp.7
            tmp.8 = sign_extend 33
            array.0[56] = tmp.8
            tmp.9 = sign_extend 37
            array.0[64] = tmp.9
            tmp.10 = sign_extend 126
            array.0[72] = tmp.10
            tmp.11 = &array.0
            tmp.12 = sign_extend 2
            tmp.13 = add_ptr(tmp.11, index=tmp.12, scale=8)
            tmp.14 = *tmp.13
            tmp.16 = sign_extend 97
            tmp.15 = tmp.14 != tmp.16
            if !tmp.15 jump end_if_2
            return 2
        
          end_if_2:
            tmp.17 = &array.0
            tmp.18 = sign_extend 3
            tmp.19 = add_ptr(tmp.17, index=tmp.18, scale=8)
            tmp.20 = *tmp.19
            tmp.22 = sign_extend 8
            tmp.21 = tmp.20 != tmp.22
            if !tmp.21 jump end_if_4
            return 3
        
          end_if_4:
            tmp.23 = &array.0
            tmp.24 = sign_extend 7
            tmp.25 = add_ptr(tmp.23, index=tmp.24, scale=8)
            tmp.26 = *tmp.25
            tmp.28 = sign_extend 33
            tmp.27 = tmp.26 != tmp.28
            if !tmp.27 jump end_if_6
            return 4
        
          end_if_6:
            tmp.29 = &array.0
            tmp.30 = sign_extend 8
            tmp.31 = add_ptr(tmp.29, index=tmp.30, scale=8)
            tmp.32 = *tmp.31
            tmp.34 = sign_extend 37
            tmp.33 = tmp.32 != tmp.34
            if !tmp.33 jump end_if_8
            return 5
        
          end_if_8:
            tmp.35 = &array.0
            tmp.36 = sign_extend 9
            tmp.37 = add_ptr(tmp.35, index=tmp.36, scale=8)
            tmp.38 = *tmp.37
            tmp.40 = sign_extend 126
            tmp.39 = tmp.38 != tmp.40
            if !tmp.39 jump end_if_10
            return 6
        
          end_if_10:
            tmp.41 = &array.0
            array_ptr.1 = tmp.41
            tmp.42 = sign_extend 0
            tmp.43 = add_ptr(array_ptr.1, index=tmp.42, scale=80)
            tmp.44 = sign_extend 9
            tmp.45 = add_ptr(tmp.43, index=tmp.44, scale=8)
            tmp.46 = *tmp.45
            tmp.48 = sign_extend 126
            tmp.47 = tmp.46 != tmp.48
            if !tmp.47 jump end_if_12
            return 7
        
          end_if_12:
            tmp.49 = &array.0
            tmp.50 = sign_extend 7
            tmp.51 = add_ptr(tmp.49, index=tmp.50, scale=8)
            tmp.52 = *tmp.51
            tmp.53 = truncate tmp.52
            i.2 = tmp.53
            tmp.54 = i.2 != 33
            if !tmp.54 jump end_if_14
            return 8
        
          end_if_14:
            tmp.55 = 10 % 7
            tmp.56 = int_to_double tmp.55
            tmp.59 = int_to_double 95
            tmp.58 = 4D * tmp.59
            tmp.57 = tmp.56 + tmp.58
            tmp.61 = ~ 64
            tmp.62 = int_to_double tmp.61
            tmp.60 = tmp.57 - tmp.62
            d.3 = tmp.60
            tmp.63 = d.3 != 448D
            if !tmp.63 jump end_if_16
            return 9
        
          end_if_16:
            return 0
            return 0
        }
        static global d: Double = 92D
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_char_constants_control_characters() {
    let src = r#"
        int main(void)
        {
            int tab = '	';
            int vertical_tab = '';
            int form_feed = '';
            if (tab != '\t') {
                return 1;
            }
            if (vertical_tab != '\v') {
                return 2;
            }
            if (form_feed != '\f') {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tab.0 = 9
            vertical_tab.1 = 11
            form_feed.2 = 12
            tmp.0 = tab.0 != 9
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = vertical_tab.1 != 11
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            tmp.2 = form_feed.2 != 12
            if !tmp.2 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_char_constants_escape_sequences() {
    let src = r#"
        
        int main(void) {
            if ('\?' != 63) {
                return 1;
            }
            if ('\"' != 34) {
                return 2;
            }
            if ('\'' != 39) {
                return 3;
            }
            if ('\\' != 92) {
                return 4;
            }
            if ('\a' != 7) {
                return 5;
            }
            if ('\b' != 8) {
                return 6;
            }
            if ('\f' != 12) {
                return 7;
            }
            if ('\n' != 10) {
                return 8;
            }
            if ('\r' != 13) {
                return 9;
            }
            if ('\t' != 9) {
                return 10;
            }
            if ('\v' != 11) {
                return 11;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 63 != 63
            if !tmp.0 jump end_if_0
            return 1
        
          end_if_0:
            tmp.1 = 34 != 34
            if !tmp.1 jump end_if_2
            return 2
        
          end_if_2:
            tmp.2 = 39 != 39
            if !tmp.2 jump end_if_4
            return 3
        
          end_if_4:
            tmp.3 = 92 != 92
            if !tmp.3 jump end_if_6
            return 4
        
          end_if_6:
            tmp.4 = 7 != 7
            if !tmp.4 jump end_if_8
            return 5
        
          end_if_8:
            tmp.5 = 8 != 8
            if !tmp.5 jump end_if_10
            return 6
        
          end_if_10:
            tmp.6 = 12 != 12
            if !tmp.6 jump end_if_12
            return 7
        
          end_if_12:
            tmp.7 = 10 != 10
            if !tmp.7 jump end_if_14
            return 8
        
          end_if_14:
            tmp.8 = 13 != 13
            if !tmp.8 jump end_if_16
            return 9
        
          end_if_16:
            tmp.9 = 9 != 9
            if !tmp.9 jump end_if_18
            return 10
        
          end_if_18:
            tmp.10 = 11 != 11
            if !tmp.10 jump end_if_20
            return 11
        
          end_if_20:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_char_constants_return_char_constant() {
    let src = r#"
        
        int main(void) {
            return 'c';
        }
    "#;
    let expected = r#"
        global function main() { 
            return 99
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_access_through_char_pointer() {
    let src = r#"
        int main(void) {
            int x = 100;
            char *byte_ptr = (char *) &x;
            if (byte_ptr[0] != 100) {
                return 1;
            }
            if (byte_ptr[1] || byte_ptr[2] || byte_ptr[3]) {
                return 2;
            }
            double d = -0.0;
            byte_ptr = (char *) &d;
            if (byte_ptr[7] != -128) {
                return 3;
            }
            for (int i = 0; i < 7; i = i + 1) {
                if (byte_ptr[i]) {
                    return 4;
                }
            }
            unsigned int array[3][2][1] = {
                {{-1}, {-1}},
                {{-1}, {-1}},
                {{4294901760u}}
            };
            byte_ptr = (char *) array;
            byte_ptr = byte_ptr + 16;
            if (byte_ptr[0] || byte_ptr[1]) {
                return 5;
            }
            if (byte_ptr[2] != -1) {
                return 6;
            }
            if (byte_ptr[3] != -1) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 100
            tmp.0 = &x.0
            tmp.1 = tmp.0
            byte_ptr.1 = tmp.1
            tmp.2 = sign_extend 0
            tmp.3 = add_ptr(byte_ptr.1, index=tmp.2, scale=1)
            tmp.4 = *tmp.3
            tmp.5 = sign_extend tmp.4
            tmp.6 = tmp.5 != 100
            if !tmp.6 jump end_if_0
            return 1
        
          end_if_0:
            tmp.7 = sign_extend 1
            tmp.8 = add_ptr(byte_ptr.1, index=tmp.7, scale=1)
            tmp.9 = *tmp.8
            if tmp.9 jump or_true_2
            tmp.12 = sign_extend 2
            tmp.13 = add_ptr(byte_ptr.1, index=tmp.12, scale=1)
            tmp.14 = *tmp.13
            if tmp.14 jump or_true_2
            tmp.11 = 0
            jump or_end_3
        
          or_true_2:
            tmp.11 = 1
        
          or_end_3:
            if tmp.11 jump or_true_4
            tmp.17 = sign_extend 3
            tmp.18 = add_ptr(byte_ptr.1, index=tmp.17, scale=1)
            tmp.19 = *tmp.18
            if tmp.19 jump or_true_4
            tmp.16 = 0
            jump or_end_5
        
          or_true_4:
            tmp.16 = 1
        
          or_end_5:
            if !tmp.16 jump end_if_6
            return 2
        
          end_if_6:
            tmp.20 = - 0D
            d.2 = tmp.20
            tmp.21 = &d.2
            tmp.22 = tmp.21
            byte_ptr.1 = tmp.22
            tmp.23 = sign_extend 7
            tmp.24 = add_ptr(byte_ptr.1, index=tmp.23, scale=1)
            tmp.25 = *tmp.24
            tmp.26 = sign_extend tmp.25
            tmp.28 = - 128
            tmp.27 = tmp.26 != tmp.28
            if !tmp.27 jump end_if_8
            return 3
        
          end_if_8:
            i.3 = 0
        
          start_loop_0:
            tmp.29 = i.3 < 7
            if !tmp.29 jump break_loop_0
            tmp.30 = sign_extend i.3
            tmp.31 = add_ptr(byte_ptr.1, index=tmp.30, scale=1)
            tmp.32 = *tmp.31
            if !tmp.32 jump end_if_10
            return 4
        
          end_if_10:
        
          continue_loop_0:
            tmp.33 = i.3 + 1
            i.3 = tmp.33
            jump start_loop_0
        
          break_loop_0:
            tmp.34 = - 1
            tmp.35 = tmp.34
            array.4[0] = tmp.35
            tmp.36 = - 1
            tmp.37 = tmp.36
            array.4[4] = tmp.37
            tmp.38 = - 1
            tmp.39 = tmp.38
            array.4[8] = tmp.39
            tmp.40 = - 1
            tmp.41 = tmp.40
            array.4[12] = tmp.41
            array.4[16] = 4294901760U
            array.4[20] = 0U
            tmp.42 = &array.4
            tmp.43 = tmp.42
            byte_ptr.1 = tmp.43
            tmp.45 = sign_extend 16
            tmp.44 = add_ptr(byte_ptr.1, index=tmp.45, scale=1)
            byte_ptr.1 = tmp.44
            tmp.46 = sign_extend 0
            tmp.47 = add_ptr(byte_ptr.1, index=tmp.46, scale=1)
            tmp.48 = *tmp.47
            if tmp.48 jump or_true_12
            tmp.51 = sign_extend 1
            tmp.52 = add_ptr(byte_ptr.1, index=tmp.51, scale=1)
            tmp.53 = *tmp.52
            if tmp.53 jump or_true_12
            tmp.50 = 0
            jump or_end_13
        
          or_true_12:
            tmp.50 = 1
        
          or_end_13:
            if !tmp.50 jump end_if_14
            return 5
        
          end_if_14:
            tmp.54 = sign_extend 2
            tmp.55 = add_ptr(byte_ptr.1, index=tmp.54, scale=1)
            tmp.56 = *tmp.55
            tmp.57 = sign_extend tmp.56
            tmp.59 = - 1
            tmp.58 = tmp.57 != tmp.59
            if !tmp.58 jump end_if_16
            return 6
        
          end_if_16:
            tmp.60 = sign_extend 3
            tmp.61 = add_ptr(byte_ptr.1, index=tmp.60, scale=1)
            tmp.62 = *tmp.61
            tmp.63 = sign_extend tmp.62
            tmp.65 = - 1
            tmp.64 = tmp.63 != tmp.65
            if !tmp.64 jump end_if_18
            return 7
        
          end_if_18:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_chained_casts() {
    let src = r#"
        unsigned int ui = 4294967200u;
        int main(void) {
            ui = (unsigned int)(unsigned char)ui;
            if (ui != 160) {
                return 1;
            }
            int i = (int)(signed char)ui;
            if (i != -96) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = truncate ui
            tmp.1 = zero_extend tmp.0
            ui = tmp.1
            tmp.3 = 160
            tmp.2 = ui != tmp.3
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.4 = truncate ui
            tmp.5 = sign_extend tmp.4
            i.0 = tmp.5
            tmp.7 = - 96
            tmp.6 = i.0 != tmp.7
            if !tmp.6 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
        static global ui: Unsigned Int = 4294967200U
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_char_arguments() {
    let src = r#"
        
        int check_args(char a, signed char b, char c, unsigned char d, char e, char f, signed char g, char h) {
            char expected_a = 5;
            signed char expected_b = -12;
            char expected_c = 117;
            unsigned char expected_d = 254;
            char expected_e = 1;
            char expected_f = -20;
            signed char expected_g = 60;
            char expected_h = 100;
            if (expected_a != a) {
             return 1;
            }
            if (expected_b != b) {
             return 2;
            }
            if (expected_c != c) {
             return 3;
            }
            if (expected_d != d) {
             return 4;
            }
            if (expected_e != e) {
             return 5;
            }
            if (expected_f != f) {
             return 6;
            }
            if (expected_g != g) {
             return 7;
            }
            if (expected_h != h) {
             return 8;
            }
            return 0;
        }
        int main(void) {
            char a = 5;
            signed char b = -12;
            char c = 117;
            unsigned char d = 254;
            char e = 1;
            char f = -20;
            signed char g = 60;
            char h = 100;
            return check_args(a, b, c, d, e, f, g, h);
        }
    "#;
    let expected = r#"
        global function check_args(a.0, b.1, c.2, d.3, e.4, f.5, g.6, h.7) { 
            tmp.0 = truncate 5
            expected_a.8 = tmp.0
            tmp.1 = - 12
            tmp.2 = truncate tmp.1
            expected_b.9 = tmp.2
            tmp.3 = truncate 117
            expected_c.10 = tmp.3
            tmp.4 = truncate 254
            expected_d.11 = tmp.4
            tmp.5 = truncate 1
            expected_e.12 = tmp.5
            tmp.6 = - 20
            tmp.7 = truncate tmp.6
            expected_f.13 = tmp.7
            tmp.8 = truncate 60
            expected_g.14 = tmp.8
            tmp.9 = truncate 100
            expected_h.15 = tmp.9
            tmp.10 = sign_extend expected_a.8
            tmp.12 = sign_extend a.0
            tmp.11 = tmp.10 != tmp.12
            if !tmp.11 jump end_if_0
            return 1
        
          end_if_0:
            tmp.13 = sign_extend expected_b.9
            tmp.15 = sign_extend b.1
            tmp.14 = tmp.13 != tmp.15
            if !tmp.14 jump end_if_2
            return 2
        
          end_if_2:
            tmp.16 = sign_extend expected_c.10
            tmp.18 = sign_extend c.2
            tmp.17 = tmp.16 != tmp.18
            if !tmp.17 jump end_if_4
            return 3
        
          end_if_4:
            tmp.19 = zero_extend expected_d.11
            tmp.21 = zero_extend d.3
            tmp.20 = tmp.19 != tmp.21
            if !tmp.20 jump end_if_6
            return 4
        
          end_if_6:
            tmp.22 = sign_extend expected_e.12
            tmp.24 = sign_extend e.4
            tmp.23 = tmp.22 != tmp.24
            if !tmp.23 jump end_if_8
            return 5
        
          end_if_8:
            tmp.25 = sign_extend expected_f.13
            tmp.27 = sign_extend f.5
            tmp.26 = tmp.25 != tmp.27
            if !tmp.26 jump end_if_10
            return 6
        
          end_if_10:
            tmp.28 = sign_extend expected_g.14
            tmp.30 = sign_extend g.6
            tmp.29 = tmp.28 != tmp.30
            if !tmp.29 jump end_if_12
            return 7
        
          end_if_12:
            tmp.31 = sign_extend expected_h.15
            tmp.33 = sign_extend h.7
            tmp.32 = tmp.31 != tmp.33
            if !tmp.32 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
        global function main() { 
            tmp.34 = truncate 5
            a.16 = tmp.34
            tmp.35 = - 12
            tmp.36 = truncate tmp.35
            b.17 = tmp.36
            tmp.37 = truncate 117
            c.18 = tmp.37
            tmp.38 = truncate 254
            d.19 = tmp.38
            tmp.39 = truncate 1
            e.20 = tmp.39
            tmp.40 = - 20
            tmp.41 = truncate tmp.40
            f.21 = tmp.41
            tmp.42 = truncate 60
            g.22 = tmp.42
            tmp.43 = truncate 100
            h.23 = tmp.43
            tmp.44 = check_args(a.16, b.17, c.18, d.19, e.20, f.21, g.22, h.23)
            return tmp.44
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_char_expressions() {
    let src = r#"
        int add_chars(char c1, char c2) {
            return c1 + c2;
        }
        int divide_chars(unsigned char c1, unsigned char c2) {
            return c1 / c2;
        }
        int le(char c1, char c2) {
            return c1 <= c2;
        }
        int subscript_char(int *ptr, char idx){
            return ptr[idx];
        }
        int *sub_char_from_pointer(int *ptr, signed char idx) {
            return ptr - idx;
        }
        int and_char(signed char c1, int i) {
            return c1 && i;
        }
        int or_char(signed char c1, unsigned char c2) {
            return c1 || c2;
        }
        int test_for_loop_char(void) {
            int counter = 0;
            for (signed char s = 127; s > 0; s = s - 1) {
                counter = counter + 1;
            }
            return (counter == 127);
        }
        int main(void) {
            char c1 = 8;
            char c2 = 4;
            if (add_chars(c1, c2) != 12) {
                return 1;
            }
            unsigned char uc1 = 250;
            unsigned char uc2 = 25;
            if (divide_chars(uc1, uc2) != 10) {
                return 2;
            }
            if (le(c1, c2)) {
                return 3;
            }
            if (!le(c2, c2)) {
                return 4;
            }
            int arr[4] = {11, 12, 13, 14};
            char idx = 2;
            if (subscript_char(arr, idx) != 13) {
                return 5;
            }
            signed char offset = 1;
            if (sub_char_from_pointer(arr + 1, offset) != arr) {
                return 6;
            }
            signed char zero = 0;
            if (zero) {
                return 7;
            }
            if (and_char(zero, 12)) {
                return 8;
            }
            uc2 = 0;
            if (or_char(zero, uc2)) {
                return 9;
            }
            if (!test_for_loop_char()) {
                return 10;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function add_chars(c1.0, c2.1) { 
            tmp.0 = sign_extend c1.0
            tmp.2 = sign_extend c2.1
            tmp.1 = tmp.0 + tmp.2
            return tmp.1
            return 0
        }
        global function divide_chars(c1.2, c2.3) { 
            tmp.3 = zero_extend c1.2
            tmp.5 = zero_extend c2.3
            tmp.4 = tmp.3 / tmp.5
            return tmp.4
            return 0
        }
        global function le(c1.4, c2.5) { 
            tmp.6 = sign_extend c1.4
            tmp.8 = sign_extend c2.5
            tmp.7 = tmp.6 <= tmp.8
            return tmp.7
            return 0
        }
        global function subscript_char(ptr.6, idx.7) { 
            tmp.9 = sign_extend idx.7
            tmp.10 = add_ptr(ptr.6, index=tmp.9, scale=4)
            tmp.11 = *tmp.10
            return tmp.11
            return 0
        }
        global function sub_char_from_pointer(ptr.8, idx.9) { 
            tmp.13 = sign_extend idx.9
            tmp.14 = - tmp.13
            tmp.12 = add_ptr(ptr.8, index=tmp.14, scale=4)
            return tmp.12
            return 0
        }
        global function and_char(c1.10, i.11) { 
            if !c1.10 jump and_false_0
            if !i.11 jump and_false_0
            tmp.16 = 1
            jump and_end_1
        
          and_false_0:
            tmp.16 = 0
        
          and_end_1:
            return tmp.16
            return 0
        }
        global function or_char(c1.12, c2.13) { 
            if c1.12 jump or_true_2
            if c2.13 jump or_true_2
            tmp.18 = 0
            jump or_end_3
        
          or_true_2:
            tmp.18 = 1
        
          or_end_3:
            return tmp.18
            return 0
        }
        global function test_for_loop_char() { 
            counter.14 = 0
            tmp.19 = truncate 127
            s.15 = tmp.19
        
          start_loop_0:
            tmp.20 = sign_extend s.15
            tmp.21 = tmp.20 > 0
            if !tmp.21 jump break_loop_0
            tmp.22 = counter.14 + 1
            counter.14 = tmp.22
        
          continue_loop_0:
            tmp.23 = sign_extend s.15
            tmp.24 = tmp.23 - 1
            tmp.25 = truncate tmp.24
            s.15 = tmp.25
            jump start_loop_0
        
          break_loop_0:
            tmp.26 = counter.14 == 127
            return tmp.26
            return 0
        }
        global function main() { 
            tmp.27 = truncate 8
            c1.16 = tmp.27
            tmp.28 = truncate 4
            c2.17 = tmp.28
            tmp.29 = add_chars(c1.16, c2.17)
            tmp.30 = tmp.29 != 12
            if !tmp.30 jump end_if_4
            return 1
        
          end_if_4:
            tmp.31 = truncate 250
            uc1.18 = tmp.31
            tmp.32 = truncate 25
            uc2.19 = tmp.32
            tmp.33 = divide_chars(uc1.18, uc2.19)
            tmp.34 = tmp.33 != 10
            if !tmp.34 jump end_if_6
            return 2
        
          end_if_6:
            tmp.35 = le(c1.16, c2.17)
            if !tmp.35 jump end_if_8
            return 3
        
          end_if_8:
            tmp.36 = le(c2.17, c2.17)
            tmp.37 = ! tmp.36
            if !tmp.37 jump end_if_10
            return 4
        
          end_if_10:
            arr.20[0] = 11
            arr.20[4] = 12
            arr.20[8] = 13
            arr.20[12] = 14
            tmp.38 = truncate 2
            idx.21 = tmp.38
            tmp.39 = &arr.20
            tmp.40 = subscript_char(tmp.39, idx.21)
            tmp.41 = tmp.40 != 13
            if !tmp.41 jump end_if_12
            return 5
        
          end_if_12:
            tmp.42 = truncate 1
            offset.22 = tmp.42
            tmp.43 = &arr.20
            tmp.45 = sign_extend 1
            tmp.44 = add_ptr(tmp.43, index=tmp.45, scale=4)
            tmp.46 = sub_char_from_pointer(tmp.44, offset.22)
            tmp.48 = &arr.20
            tmp.47 = tmp.46 != tmp.48
            if !tmp.47 jump end_if_14
            return 6
        
          end_if_14:
            tmp.49 = truncate 0
            zero.23 = tmp.49
            if !zero.23 jump end_if_16
            return 7
        
          end_if_16:
            tmp.50 = and_char(zero.23, 12)
            if !tmp.50 jump end_if_18
            return 8
        
          end_if_18:
            tmp.51 = truncate 0
            uc2.19 = tmp.51
            tmp.52 = or_char(zero.23, uc2.19)
            if !tmp.52 jump end_if_20
            return 9
        
          end_if_20:
            tmp.53 = test_for_loop_char()
            tmp.54 = ! tmp.53
            if !tmp.54 jump end_if_22
            return 10
        
          end_if_22:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_common_type() {
    let src = r#"
        long ternary(int flag, char c) {
            return flag ? c : 1u;
        }
        int char_lt_int(char c, int i) {
            return c < i;
        }
        int uchar_gt_long(unsigned char uc, long l) {
            return uc > l;
        }
        int char_lt_uchar(char c, unsigned char u) {
            return c < u;
        }
        int signed_char_le_char(signed char s, char c) {
            return s <= c;
        }
        char ten = 10;
        int multiply(void) {
            char i = 10.75 * ten;
            return i == 107;
        }
        int main(void) {
            if (ternary(1, -10) != 4294967286l) {
                return 1;
            }
            if (!char_lt_int((char)1, 256)) {
                return 2;
            }
            if (!uchar_gt_long((unsigned char)100, -2)) {
                return 3;
            }
            char c = -1;
            unsigned char u = 2;
            if (!char_lt_uchar(c, u)) {
                return 4;
            }
            signed char s = -1;
            if (!signed_char_le_char(s, c)) {
                return 5;
            }
            if (!multiply()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function ternary(flag.0, c.1) { 
            if !flag.0 jump else_1
            tmp.1 = sign_extend c.1
            tmp.0 = tmp.1
            jump end_if_0
        
          else_1:
            tmp.0 = 1U
        
          end_if_0:
            tmp.2 = zero_extend tmp.0
            return tmp.2
            return 0
        }
        global function char_lt_int(c.2, i.3) { 
            tmp.3 = sign_extend c.2
            tmp.4 = tmp.3 < i.3
            return tmp.4
            return 0
        }
        global function uchar_gt_long(uc.4, l.5) { 
            tmp.5 = zero_extend uc.4
            tmp.6 = tmp.5 > l.5
            return tmp.6
            return 0
        }
        global function char_lt_uchar(c.6, u.7) { 
            tmp.7 = sign_extend c.6
            tmp.9 = zero_extend u.7
            tmp.8 = tmp.7 < tmp.9
            return tmp.8
            return 0
        }
        global function signed_char_le_char(s.8, c.9) { 
            tmp.10 = sign_extend s.8
            tmp.12 = sign_extend c.9
            tmp.11 = tmp.10 <= tmp.12
            return tmp.11
            return 0
        }
        global function multiply() { 
            tmp.14 = int_to_double ten
            tmp.13 = 10.75D * tmp.14
            tmp.15 = double_to_int tmp.13
            i.10 = tmp.15
            tmp.16 = sign_extend i.10
            tmp.17 = tmp.16 == 107
            return tmp.17
            return 0
        }
        global function main() { 
            tmp.18 = - 10
            tmp.19 = truncate tmp.18
            tmp.20 = ternary(1, tmp.19)
            tmp.21 = tmp.20 != 4294967286L
            if !tmp.21 jump end_if_2
            return 1
        
          end_if_2:
            tmp.22 = truncate 1
            tmp.23 = char_lt_int(tmp.22, 256)
            tmp.24 = ! tmp.23
            if !tmp.24 jump end_if_4
            return 2
        
          end_if_4:
            tmp.25 = truncate 100
            tmp.26 = - 2
            tmp.27 = sign_extend tmp.26
            tmp.28 = uchar_gt_long(tmp.25, tmp.27)
            tmp.29 = ! tmp.28
            if !tmp.29 jump end_if_6
            return 3
        
          end_if_6:
            tmp.30 = - 1
            tmp.31 = truncate tmp.30
            c.11 = tmp.31
            tmp.32 = truncate 2
            u.12 = tmp.32
            tmp.33 = char_lt_uchar(c.11, u.12)
            tmp.34 = ! tmp.33
            if !tmp.34 jump end_if_8
            return 4
        
          end_if_8:
            tmp.35 = - 1
            tmp.36 = truncate tmp.35
            s.13 = tmp.36
            tmp.37 = signed_char_le_char(s.13, c.11)
            tmp.38 = ! tmp.37
            if !tmp.38 jump end_if_10
            return 5
        
          end_if_10:
            tmp.39 = multiply()
            tmp.40 = ! tmp.39
            if !tmp.40 jump end_if_12
            return 6
        
          end_if_12:
            return 0
            return 0
        }
        static global ten: Char = 10
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_convert_by_assignment() {
    let src = r#"
        int check_int(int converted, int expected) {
            return (converted == expected);
        }
        int check_uint(unsigned int converted, unsigned int expected) {
            return (converted == expected);
        }
        int check_long(long converted, long expected) {
            return (converted == expected);
        }
        int check_ulong(unsigned long converted, unsigned long expected) {
            return (converted == expected);
        }
        int check_double(double converted, double expected) {
            return (converted == expected);
        }
        int check_char(char converted, char expected) {
            return (converted == expected);
        }
        int check_uchar(unsigned char converted, unsigned char expected) {
            return (converted == expected);
        }
        int check_char_on_stack(signed char expected, int dummy1, int dummy2,
                                int dummy3, int dummy4, int dummy5, int dummy6,
                                signed char converted) {
            return converted == expected;
        }
        int return_extended_uchar(unsigned char c) {
            return c;
        }
        unsigned long return_extended_schar(signed char sc) {
            return sc;
        }
        unsigned char return_truncated_long(long l) {
            return l;
        }
        int main(void) {
            signed char sc = -10;
            if (!check_long(sc, -10l)) {
                return 1;
            }
            if (!check_uint(sc, 4294967286u)) {
                return 2;
            }
            if (!check_double(sc, -10.0)) {
                return 3;
            }
            unsigned char uc = 246;
            if (!check_uchar(sc, uc)) {
                return 4;
            }
            char c = -10;
            if (!check_char(-10, c)) {
                return 5;
            }
            if (!check_char(4294967286u, c)) {
                return 6;
            }
            if (!check_char(-10.0, c)) {
                return 7;
            }
            if (!check_char_on_stack(c, 0, 0, 0, 0, 0, 0, -10.0)) {
                return 8;
            }
            if (!check_int(uc, 246)) {
                return 9;
            }
            if (!check_ulong(uc, 246ul)) {
                return 10;
            }
            char expected_char = -10;
            if (!check_char(uc, expected_char)) {
                return 11;
            }
            if (!check_uchar(18446744073709551606ul, uc)) {
                return 12;
            }
            if (return_extended_uchar(uc) != 246) {
                return 13;
            }
            if (return_extended_schar(sc) != 18446744073709551606ul) {
                return 14;
            }
            if (return_truncated_long(5369233654l) != uc) {
                return 15;
            }
            char array[3] = {0, 0, 0};
            array[1] = 128;
            if (array[0] || array[2] || array[1] != -128) {
                return 16;
            }
            array[1] = 9224497936761618562ul;
            if (array[0] || array[2] || array[1] != -126) {
                return 17;
            }
            array[1] = -2.6;
            if (array[0] || array[2] || array[1] != -2) {
                return 18;
            }
            unsigned char uchar_array[3] = {0, 0, 0};
            uchar_array[1] = 17592186044416l;
            if (uchar_array[0] || uchar_array[2] || uchar_array[1] != 0) {
                return 19;
            }
            uchar_array[1] = 2147483898u;
            if (uchar_array[0] || uchar_array[2] || uchar_array[1] != 250) {
                return 20;
            }
            unsigned int ui = 4294967295U;
            static unsigned char
                uc_static;
            ui = uc_static;
            if (ui) {
                return 21;
            }
            signed long l = -1;
            static signed s_static =
                0;
            l = s_static;
            if (l) {
                return 22;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function check_int(converted.0, expected.1) { 
            tmp.0 = converted.0 == expected.1
            return tmp.0
            return 0
        }
        global function check_uint(converted.2, expected.3) { 
            tmp.1 = converted.2 == expected.3
            return tmp.1
            return 0
        }
        global function check_long(converted.4, expected.5) { 
            tmp.2 = converted.4 == expected.5
            return tmp.2
            return 0
        }
        global function check_ulong(converted.6, expected.7) { 
            tmp.3 = converted.6 == expected.7
            return tmp.3
            return 0
        }
        global function check_double(converted.8, expected.9) { 
            tmp.4 = converted.8 == expected.9
            return tmp.4
            return 0
        }
        global function check_char(converted.10, expected.11) { 
            tmp.5 = sign_extend converted.10
            tmp.7 = sign_extend expected.11
            tmp.6 = tmp.5 == tmp.7
            return tmp.6
            return 0
        }
        global function check_uchar(converted.12, expected.13) { 
            tmp.8 = zero_extend converted.12
            tmp.10 = zero_extend expected.13
            tmp.9 = tmp.8 == tmp.10
            return tmp.9
            return 0
        }
        global function check_char_on_stack(expected.14, dummy1.15, dummy2.16, dummy3.17, dummy4.18, dummy5.19, dummy6.20, converted.21) { 
            tmp.11 = sign_extend converted.21
            tmp.13 = sign_extend expected.14
            tmp.12 = tmp.11 == tmp.13
            return tmp.12
            return 0
        }
        global function return_extended_uchar(c.22) { 
            tmp.14 = zero_extend c.22
            return tmp.14
            return 0
        }
        global function return_extended_schar(sc.23) { 
            tmp.15 = sign_extend sc.23
            return tmp.15
            return 0
        }
        global function return_truncated_long(l.24) { 
            tmp.16 = truncate l.24
            return tmp.16
            return 0
        }
        global function main() { 
            tmp.17 = - 10
            tmp.18 = truncate tmp.17
            sc.25 = tmp.18
            tmp.19 = sign_extend sc.25
            tmp.20 = - 10L
            tmp.21 = check_long(tmp.19, tmp.20)
            tmp.22 = ! tmp.21
            if !tmp.22 jump end_if_0
            return 1
        
          end_if_0:
            tmp.23 = sign_extend sc.25
            tmp.24 = check_uint(tmp.23, 4294967286U)
            tmp.25 = ! tmp.24
            if !tmp.25 jump end_if_2
            return 2
        
          end_if_2:
            tmp.26 = int_to_double sc.25
            tmp.27 = - 10D
            tmp.28 = check_double(tmp.26, tmp.27)
            tmp.29 = ! tmp.28
            if !tmp.29 jump end_if_4
            return 3
        
          end_if_4:
            tmp.30 = truncate 246
            uc.26 = tmp.30
            tmp.31 = sc.25
            tmp.32 = check_uchar(tmp.31, uc.26)
            tmp.33 = ! tmp.32
            if !tmp.33 jump end_if_6
            return 4
        
          end_if_6:
            tmp.34 = - 10
            tmp.35 = truncate tmp.34
            c.27 = tmp.35
            tmp.36 = - 10
            tmp.37 = truncate tmp.36
            tmp.38 = check_char(tmp.37, c.27)
            tmp.39 = ! tmp.38
            if !tmp.39 jump end_if_8
            return 5
        
          end_if_8:
            tmp.40 = truncate 4294967286U
            tmp.41 = check_char(tmp.40, c.27)
            tmp.42 = ! tmp.41
            if !tmp.42 jump end_if_10
            return 6
        
          end_if_10:
            tmp.43 = - 10D
            tmp.44 = double_to_int tmp.43
            tmp.45 = check_char(tmp.44, c.27)
            tmp.46 = ! tmp.45
            if !tmp.46 jump end_if_12
            return 7
        
          end_if_12:
            tmp.47 = c.27
            tmp.48 = - 10D
            tmp.49 = double_to_int tmp.48
            tmp.50 = check_char_on_stack(tmp.47, 0, 0, 0, 0, 0, 0, tmp.49)
            tmp.51 = ! tmp.50
            if !tmp.51 jump end_if_14
            return 8
        
          end_if_14:
            tmp.52 = zero_extend uc.26
            tmp.53 = check_int(tmp.52, 246)
            tmp.54 = ! tmp.53
            if !tmp.54 jump end_if_16
            return 9
        
          end_if_16:
            tmp.55 = zero_extend uc.26
            tmp.56 = check_ulong(tmp.55, 246UL)
            tmp.57 = ! tmp.56
            if !tmp.57 jump end_if_18
            return 10
        
          end_if_18:
            tmp.58 = - 10
            tmp.59 = truncate tmp.58
            expected_char.28 = tmp.59
            tmp.60 = uc.26
            tmp.61 = check_char(tmp.60, expected_char.28)
            tmp.62 = ! tmp.61
            if !tmp.62 jump end_if_20
            return 11
        
          end_if_20:
            tmp.63 = truncate 18446744073709551606UL
            tmp.64 = check_uchar(tmp.63, uc.26)
            tmp.65 = ! tmp.64
            if !tmp.65 jump end_if_22
            return 12
        
          end_if_22:
            tmp.66 = return_extended_uchar(uc.26)
            tmp.67 = tmp.66 != 246
            if !tmp.67 jump end_if_24
            return 13
        
          end_if_24:
            tmp.68 = return_extended_schar(sc.25)
            tmp.69 = tmp.68 != 18446744073709551606UL
            if !tmp.69 jump end_if_26
            return 14
        
          end_if_26:
            tmp.70 = return_truncated_long(5369233654L)
            tmp.71 = zero_extend tmp.70
            tmp.73 = zero_extend uc.26
            tmp.72 = tmp.71 != tmp.73
            if !tmp.72 jump end_if_28
            return 15
        
          end_if_28:
            tmp.74 = truncate 0
            array.29[0] = tmp.74
            tmp.75 = truncate 0
            array.29[1] = tmp.75
            tmp.76 = truncate 0
            array.29[2] = tmp.76
            tmp.77 = &array.29
            tmp.78 = sign_extend 1
            tmp.79 = add_ptr(tmp.77, index=tmp.78, scale=1)
            tmp.80 = truncate 128
            *tmp.79 = tmp.80
            tmp.81 = &array.29
            tmp.82 = sign_extend 0
            tmp.83 = add_ptr(tmp.81, index=tmp.82, scale=1)
            tmp.84 = *tmp.83
            if tmp.84 jump or_true_30
            tmp.87 = &array.29
            tmp.88 = sign_extend 2
            tmp.89 = add_ptr(tmp.87, index=tmp.88, scale=1)
            tmp.90 = *tmp.89
            if tmp.90 jump or_true_30
            tmp.86 = 0
            jump or_end_31
        
          or_true_30:
            tmp.86 = 1
        
          or_end_31:
            if tmp.86 jump or_true_32
            tmp.93 = &array.29
            tmp.94 = sign_extend 1
            tmp.95 = add_ptr(tmp.93, index=tmp.94, scale=1)
            tmp.96 = *tmp.95
            tmp.97 = sign_extend tmp.96
            tmp.99 = - 128
            tmp.98 = tmp.97 != tmp.99
            if tmp.98 jump or_true_32
            tmp.92 = 0
            jump or_end_33
        
          or_true_32:
            tmp.92 = 1
        
          or_end_33:
            if !tmp.92 jump end_if_34
            return 16
        
          end_if_34:
            tmp.100 = &array.29
            tmp.101 = sign_extend 1
            tmp.102 = add_ptr(tmp.100, index=tmp.101, scale=1)
            tmp.103 = truncate 9224497936761618562UL
            *tmp.102 = tmp.103
            tmp.104 = &array.29
            tmp.105 = sign_extend 0
            tmp.106 = add_ptr(tmp.104, index=tmp.105, scale=1)
            tmp.107 = *tmp.106
            if tmp.107 jump or_true_36
            tmp.110 = &array.29
            tmp.111 = sign_extend 2
            tmp.112 = add_ptr(tmp.110, index=tmp.111, scale=1)
            tmp.113 = *tmp.112
            if tmp.113 jump or_true_36
            tmp.109 = 0
            jump or_end_37
        
          or_true_36:
            tmp.109 = 1
        
          or_end_37:
            if tmp.109 jump or_true_38
            tmp.116 = &array.29
            tmp.117 = sign_extend 1
            tmp.118 = add_ptr(tmp.116, index=tmp.117, scale=1)
            tmp.119 = *tmp.118
            tmp.120 = sign_extend tmp.119
            tmp.122 = - 126
            tmp.121 = tmp.120 != tmp.122
            if tmp.121 jump or_true_38
            tmp.115 = 0
            jump or_end_39
        
          or_true_38:
            tmp.115 = 1
        
          or_end_39:
            if !tmp.115 jump end_if_40
            return 17
        
          end_if_40:
            tmp.123 = &array.29
            tmp.124 = sign_extend 1
            tmp.125 = add_ptr(tmp.123, index=tmp.124, scale=1)
            tmp.126 = - 2.6D
            tmp.127 = double_to_int tmp.126
            *tmp.125 = tmp.127
            tmp.128 = &array.29
            tmp.129 = sign_extend 0
            tmp.130 = add_ptr(tmp.128, index=tmp.129, scale=1)
            tmp.131 = *tmp.130
            if tmp.131 jump or_true_42
            tmp.134 = &array.29
            tmp.135 = sign_extend 2
            tmp.136 = add_ptr(tmp.134, index=tmp.135, scale=1)
            tmp.137 = *tmp.136
            if tmp.137 jump or_true_42
            tmp.133 = 0
            jump or_end_43
        
          or_true_42:
            tmp.133 = 1
        
          or_end_43:
            if tmp.133 jump or_true_44
            tmp.140 = &array.29
            tmp.141 = sign_extend 1
            tmp.142 = add_ptr(tmp.140, index=tmp.141, scale=1)
            tmp.143 = *tmp.142
            tmp.144 = sign_extend tmp.143
            tmp.146 = - 2
            tmp.145 = tmp.144 != tmp.146
            if tmp.145 jump or_true_44
            tmp.139 = 0
            jump or_end_45
        
          or_true_44:
            tmp.139 = 1
        
          or_end_45:
            if !tmp.139 jump end_if_46
            return 18
        
          end_if_46:
            tmp.147 = truncate 0
            uchar_array.30[0] = tmp.147
            tmp.148 = truncate 0
            uchar_array.30[1] = tmp.148
            tmp.149 = truncate 0
            uchar_array.30[2] = tmp.149
            tmp.150 = &uchar_array.30
            tmp.151 = sign_extend 1
            tmp.152 = add_ptr(tmp.150, index=tmp.151, scale=1)
            tmp.153 = truncate 17592186044416L
            *tmp.152 = tmp.153
            tmp.154 = &uchar_array.30
            tmp.155 = sign_extend 0
            tmp.156 = add_ptr(tmp.154, index=tmp.155, scale=1)
            tmp.157 = *tmp.156
            if tmp.157 jump or_true_48
            tmp.160 = &uchar_array.30
            tmp.161 = sign_extend 2
            tmp.162 = add_ptr(tmp.160, index=tmp.161, scale=1)
            tmp.163 = *tmp.162
            if tmp.163 jump or_true_48
            tmp.159 = 0
            jump or_end_49
        
          or_true_48:
            tmp.159 = 1
        
          or_end_49:
            if tmp.159 jump or_true_50
            tmp.166 = &uchar_array.30
            tmp.167 = sign_extend 1
            tmp.168 = add_ptr(tmp.166, index=tmp.167, scale=1)
            tmp.169 = *tmp.168
            tmp.170 = zero_extend tmp.169
            tmp.171 = tmp.170 != 0
            if tmp.171 jump or_true_50
            tmp.165 = 0
            jump or_end_51
        
          or_true_50:
            tmp.165 = 1
        
          or_end_51:
            if !tmp.165 jump end_if_52
            return 19
        
          end_if_52:
            tmp.172 = &uchar_array.30
            tmp.173 = sign_extend 1
            tmp.174 = add_ptr(tmp.172, index=tmp.173, scale=1)
            tmp.175 = truncate 2147483898U
            *tmp.174 = tmp.175
            tmp.176 = &uchar_array.30
            tmp.177 = sign_extend 0
            tmp.178 = add_ptr(tmp.176, index=tmp.177, scale=1)
            tmp.179 = *tmp.178
            if tmp.179 jump or_true_54
            tmp.182 = &uchar_array.30
            tmp.183 = sign_extend 2
            tmp.184 = add_ptr(tmp.182, index=tmp.183, scale=1)
            tmp.185 = *tmp.184
            if tmp.185 jump or_true_54
            tmp.181 = 0
            jump or_end_55
        
          or_true_54:
            tmp.181 = 1
        
          or_end_55:
            if tmp.181 jump or_true_56
            tmp.188 = &uchar_array.30
            tmp.189 = sign_extend 1
            tmp.190 = add_ptr(tmp.188, index=tmp.189, scale=1)
            tmp.191 = *tmp.190
            tmp.192 = zero_extend tmp.191
            tmp.193 = tmp.192 != 250
            if tmp.193 jump or_true_56
            tmp.187 = 0
            jump or_end_57
        
          or_true_56:
            tmp.187 = 1
        
          or_end_57:
            if !tmp.187 jump end_if_58
            return 20
        
          end_if_58:
            ui.31 = 4294967295U
            tmp.194 = zero_extend uc_static.32
            ui.31 = tmp.194
            if !ui.31 jump end_if_60
            return 21
        
          end_if_60:
            tmp.195 = - 1
            tmp.196 = sign_extend tmp.195
            l.33 = tmp.196
            tmp.197 = sign_extend s_static.34
            l.33 = tmp.197
            if !l.33 jump end_if_62
            return 22
        
          end_if_62:
            return 0
            return 0
        }
        static s_static.34: Int = 0
        static uc_static.32: Unsigned Char = zero[1]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_explicit_casts() {
    let src = r#"
        unsigned char char_to_uchar(char c) {
            return (unsigned char)c;
        }
        signed char char_to_schar(char c) {
            return (signed char)c;
        }
        char uchar_to_char(unsigned char u) {
            return (char)u;
        }
        char schar_to_char(signed char u) {
            return (char)u;
        }
        signed char uchar_to_schar(unsigned char u) {
            return (signed char)u;
        }
        unsigned char schar_to_uchar(signed char u) {
            return (unsigned char)u;
        }
        int char_to_int(char c) {
            return (int)c;
        }
        unsigned int char_to_uint(char c) {
            return (unsigned int)c;
        }
        long char_to_long(char c) {
            return (long)c;
        }
        unsigned long char_to_ulong(char c) {
            return (unsigned long)c;
        }
        double char_to_double(char c) {
            return (double)c;
        }
        int schar_to_int(signed char s) {
            return (int)s;
        }
        unsigned int schar_to_uint(signed char s) {
            return (unsigned int)s;
        }
        long schar_to_long(signed char s) {
            return (long)s;
        }
        unsigned long schar_to_ulong(signed char s) {
            return (unsigned long)s;
        }
        double schar_to_double(signed char s) {
            return (double)s;
        }
        int uchar_to_int(unsigned char u) {
            return (int)u;
        }
        unsigned int uchar_to_uint(unsigned char u) {
            return (unsigned int)u;
        }
        long uchar_to_long(unsigned char u) {
            return (long)u;
        }
        unsigned long uchar_to_ulong(unsigned char u) {
            return (unsigned long)u;
        }
        double uchar_to_double(unsigned char u) {
            return (double)u;
        }
        char int_to_char(int i) {
            return (char)i;
        }
        char uint_to_char(unsigned int u) {
            return (char)u;
        }
        char double_to_char(double d) {
            return (char)d;
        }
        signed char long_to_schar(long l) {
            return (signed char)l;
        }
        signed char ulong_to_schar(unsigned long l) {
            return (signed char)l;
        }
        unsigned char int_to_uchar(int i) {
            return (unsigned char)i;
        }
        unsigned char uint_to_uchar(unsigned int ui) {
            return (unsigned char)ui;
        }
        unsigned char long_to_uchar(long l) {
            return (unsigned char)l;
        }
        unsigned char ulong_to_uchar(unsigned long ul) {
            return (unsigned char)ul;
        }
        unsigned char double_to_uchar(double d) {
            return (unsigned char)d;
        }
        int main(void) {
            char c = 127;
            if (char_to_uchar(c) != 127) {
                return 1;
            }
            if (char_to_int(c) != 127) {
                return 2;
            }
            if (char_to_ulong(c) != 127) {
                return 3;
            }
            signed char sc = -10;
            if (schar_to_uchar(sc) != 246) {
                return 4;
            }
            if (schar_to_long(sc) != -10) {
                return 5;
            }
            if (schar_to_uint(sc) != 4294967286u) {
                return 6;
            }
            if (schar_to_double(sc) != -10.0) {
                return 7;
            }
            unsigned char uc = 250;
            if (uchar_to_int(uc) != 250) {
                return 8;
            }
            if (uchar_to_long(uc) != 250) {
                return 9;
            }
            if (uchar_to_uint(uc) != 250) {
                return 10;
            }
            if (uchar_to_ulong(uc) != 250) {
                return 11;
            }
            if (uchar_to_double(uc) != 250.0) {
                return 12;
            }
            if (uchar_to_schar(uc) != -6) {
                return 13;
            }
            if (uchar_to_char(uc) != -6) {
                return 14;
            }
            c = (char)-128;
            if (int_to_char(128) != c) {
                return 15;
            }
            c = (char)-6;
            if (uint_to_char(2147483898u) != c) {
                return 16;
            }
            c = (char)-2;
            if (double_to_char(-2.6) != c) {
                return 17;
            }
            if (long_to_schar(17592186044416l)) {
                return 18;
            }
            sc = (signed char)-126;
            if (ulong_to_schar(9224497936761618562ul) != sc) {
                return 19;
            }
            uc = (unsigned char)200;
            if (int_to_uchar(-1234488) != uc) {
                return 20;
            }
            if (uint_to_uchar(4293732808) != uc) {
                return 21;
            }
            if (long_to_uchar(-36283884951096l) != uc) {
                return 22;
            }
            if (ulong_to_uchar(9224497936761618632ul) != uc) {
                return 23;
            }
            if (double_to_uchar(200.99) != uc) {
                return 24;
            }
            static long *null_ptr;
            char zero = (char)null_ptr;
            if (zero) {
                return 25;
            }
            c = 32;
            int *i = (int *)c;
            if ((char)i != c) {
                return 26;
            }
            if ((char)300 != (char)44) {
                return 27;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function char_to_uchar(c.0) { 
            tmp.0 = c.0
            return tmp.0
            return 0
        }
        global function char_to_schar(c.1) { 
            tmp.1 = c.1
            return tmp.1
            return 0
        }
        global function uchar_to_char(u.2) { 
            tmp.2 = u.2
            return tmp.2
            return 0
        }
        global function schar_to_char(u.3) { 
            tmp.3 = u.3
            return tmp.3
            return 0
        }
        global function uchar_to_schar(u.4) { 
            tmp.4 = u.4
            return tmp.4
            return 0
        }
        global function schar_to_uchar(u.5) { 
            tmp.5 = u.5
            return tmp.5
            return 0
        }
        global function char_to_int(c.6) { 
            tmp.6 = sign_extend c.6
            return tmp.6
            return 0
        }
        global function char_to_uint(c.7) { 
            tmp.7 = sign_extend c.7
            return tmp.7
            return 0
        }
        global function char_to_long(c.8) { 
            tmp.8 = sign_extend c.8
            return tmp.8
            return 0
        }
        global function char_to_ulong(c.9) { 
            tmp.9 = sign_extend c.9
            return tmp.9
            return 0
        }
        global function char_to_double(c.10) { 
            tmp.10 = int_to_double c.10
            return tmp.10
            return 0
        }
        global function schar_to_int(s.11) { 
            tmp.11 = sign_extend s.11
            return tmp.11
            return 0
        }
        global function schar_to_uint(s.12) { 
            tmp.12 = sign_extend s.12
            return tmp.12
            return 0
        }
        global function schar_to_long(s.13) { 
            tmp.13 = sign_extend s.13
            return tmp.13
            return 0
        }
        global function schar_to_ulong(s.14) { 
            tmp.14 = sign_extend s.14
            return tmp.14
            return 0
        }
        global function schar_to_double(s.15) { 
            tmp.15 = int_to_double s.15
            return tmp.15
            return 0
        }
        global function uchar_to_int(u.16) { 
            tmp.16 = zero_extend u.16
            return tmp.16
            return 0
        }
        global function uchar_to_uint(u.17) { 
            tmp.17 = zero_extend u.17
            return tmp.17
            return 0
        }
        global function uchar_to_long(u.18) { 
            tmp.18 = zero_extend u.18
            return tmp.18
            return 0
        }
        global function uchar_to_ulong(u.19) { 
            tmp.19 = zero_extend u.19
            return tmp.19
            return 0
        }
        global function uchar_to_double(u.20) { 
            tmp.20 = uint_to_double u.20
            return tmp.20
            return 0
        }
        global function int_to_char(i.21) { 
            tmp.21 = truncate i.21
            return tmp.21
            return 0
        }
        global function uint_to_char(u.22) { 
            tmp.22 = truncate u.22
            return tmp.22
            return 0
        }
        global function double_to_char(d.23) { 
            tmp.23 = double_to_int d.23
            return tmp.23
            return 0
        }
        global function long_to_schar(l.24) { 
            tmp.24 = truncate l.24
            return tmp.24
            return 0
        }
        global function ulong_to_schar(l.25) { 
            tmp.25 = truncate l.25
            return tmp.25
            return 0
        }
        global function int_to_uchar(i.26) { 
            tmp.26 = truncate i.26
            return tmp.26
            return 0
        }
        global function uint_to_uchar(ui.27) { 
            tmp.27 = truncate ui.27
            return tmp.27
            return 0
        }
        global function long_to_uchar(l.28) { 
            tmp.28 = truncate l.28
            return tmp.28
            return 0
        }
        global function ulong_to_uchar(ul.29) { 
            tmp.29 = truncate ul.29
            return tmp.29
            return 0
        }
        global function double_to_uchar(d.30) { 
            tmp.30 = double_to_uint d.30
            return tmp.30
            return 0
        }
        global function main() { 
            tmp.31 = truncate 127
            c.31 = tmp.31
            tmp.32 = char_to_uchar(c.31)
            tmp.33 = zero_extend tmp.32
            tmp.34 = tmp.33 != 127
            if !tmp.34 jump end_if_0
            return 1
        
          end_if_0:
            tmp.35 = char_to_int(c.31)
            tmp.36 = tmp.35 != 127
            if !tmp.36 jump end_if_2
            return 2
        
          end_if_2:
            tmp.37 = char_to_ulong(c.31)
            tmp.39 = sign_extend 127
            tmp.38 = tmp.37 != tmp.39
            if !tmp.38 jump end_if_4
            return 3
        
          end_if_4:
            tmp.40 = - 10
            tmp.41 = truncate tmp.40
            sc.32 = tmp.41
            tmp.42 = schar_to_uchar(sc.32)
            tmp.43 = zero_extend tmp.42
            tmp.44 = tmp.43 != 246
            if !tmp.44 jump end_if_6
            return 4
        
          end_if_6:
            tmp.45 = schar_to_long(sc.32)
            tmp.47 = - 10
            tmp.48 = sign_extend tmp.47
            tmp.46 = tmp.45 != tmp.48
            if !tmp.46 jump end_if_8
            return 5
        
          end_if_8:
            tmp.49 = schar_to_uint(sc.32)
            tmp.50 = tmp.49 != 4294967286U
            if !tmp.50 jump end_if_10
            return 6
        
          end_if_10:
            tmp.51 = schar_to_double(sc.32)
            tmp.53 = - 10D
            tmp.52 = tmp.51 != tmp.53
            if !tmp.52 jump end_if_12
            return 7
        
          end_if_12:
            tmp.54 = truncate 250
            uc.33 = tmp.54
            tmp.55 = uchar_to_int(uc.33)
            tmp.56 = tmp.55 != 250
            if !tmp.56 jump end_if_14
            return 8
        
          end_if_14:
            tmp.57 = uchar_to_long(uc.33)
            tmp.59 = sign_extend 250
            tmp.58 = tmp.57 != tmp.59
            if !tmp.58 jump end_if_16
            return 9
        
          end_if_16:
            tmp.60 = uchar_to_uint(uc.33)
            tmp.62 = 250
            tmp.61 = tmp.60 != tmp.62
            if !tmp.61 jump end_if_18
            return 10
        
          end_if_18:
            tmp.63 = uchar_to_ulong(uc.33)
            tmp.65 = sign_extend 250
            tmp.64 = tmp.63 != tmp.65
            if !tmp.64 jump end_if_20
            return 11
        
          end_if_20:
            tmp.66 = uchar_to_double(uc.33)
            tmp.67 = tmp.66 != 250D
            if !tmp.67 jump end_if_22
            return 12
        
          end_if_22:
            tmp.68 = uchar_to_schar(uc.33)
            tmp.69 = sign_extend tmp.68
            tmp.71 = - 6
            tmp.70 = tmp.69 != tmp.71
            if !tmp.70 jump end_if_24
            return 13
        
          end_if_24:
            tmp.72 = uchar_to_char(uc.33)
            tmp.73 = sign_extend tmp.72
            tmp.75 = - 6
            tmp.74 = tmp.73 != tmp.75
            if !tmp.74 jump end_if_26
            return 14
        
          end_if_26:
            tmp.76 = - 128
            tmp.77 = truncate tmp.76
            c.31 = tmp.77
            tmp.78 = int_to_char(128)
            tmp.79 = sign_extend tmp.78
            tmp.81 = sign_extend c.31
            tmp.80 = tmp.79 != tmp.81
            if !tmp.80 jump end_if_28
            return 15
        
          end_if_28:
            tmp.82 = - 6
            tmp.83 = truncate tmp.82
            c.31 = tmp.83
            tmp.84 = uint_to_char(2147483898U)
            tmp.85 = sign_extend tmp.84
            tmp.87 = sign_extend c.31
            tmp.86 = tmp.85 != tmp.87
            if !tmp.86 jump end_if_30
            return 16
        
          end_if_30:
            tmp.88 = - 2
            tmp.89 = truncate tmp.88
            c.31 = tmp.89
            tmp.90 = - 2.6D
            tmp.91 = double_to_char(tmp.90)
            tmp.92 = sign_extend tmp.91
            tmp.94 = sign_extend c.31
            tmp.93 = tmp.92 != tmp.94
            if !tmp.93 jump end_if_32
            return 17
        
          end_if_32:
            tmp.95 = long_to_schar(17592186044416L)
            if !tmp.95 jump end_if_34
            return 18
        
          end_if_34:
            tmp.96 = - 126
            tmp.97 = truncate tmp.96
            sc.32 = tmp.97
            tmp.98 = ulong_to_schar(9224497936761618562UL)
            tmp.99 = sign_extend tmp.98
            tmp.101 = sign_extend sc.32
            tmp.100 = tmp.99 != tmp.101
            if !tmp.100 jump end_if_36
            return 19
        
          end_if_36:
            tmp.102 = truncate 200
            uc.33 = tmp.102
            tmp.103 = - 1234488
            tmp.104 = int_to_uchar(tmp.103)
            tmp.105 = zero_extend tmp.104
            tmp.107 = zero_extend uc.33
            tmp.106 = tmp.105 != tmp.107
            if !tmp.106 jump end_if_38
            return 20
        
          end_if_38:
            tmp.108 = truncate 4293732808L
            tmp.109 = uint_to_uchar(tmp.108)
            tmp.110 = zero_extend tmp.109
            tmp.112 = zero_extend uc.33
            tmp.111 = tmp.110 != tmp.112
            if !tmp.111 jump end_if_40
            return 21
        
          end_if_40:
            tmp.113 = - 36283884951096L
            tmp.114 = long_to_uchar(tmp.113)
            tmp.115 = zero_extend tmp.114
            tmp.117 = zero_extend uc.33
            tmp.116 = tmp.115 != tmp.117
            if !tmp.116 jump end_if_42
            return 22
        
          end_if_42:
            tmp.118 = ulong_to_uchar(9224497936761618632UL)
            tmp.119 = zero_extend tmp.118
            tmp.121 = zero_extend uc.33
            tmp.120 = tmp.119 != tmp.121
            if !tmp.120 jump end_if_44
            return 23
        
          end_if_44:
            tmp.122 = double_to_uchar(200.99D)
            tmp.123 = zero_extend tmp.122
            tmp.125 = zero_extend uc.33
            tmp.124 = tmp.123 != tmp.125
            if !tmp.124 jump end_if_46
            return 24
        
          end_if_46:
            tmp.126 = truncate null_ptr.34
            zero.35 = tmp.126
            if !zero.35 jump end_if_48
            return 25
        
          end_if_48:
            tmp.127 = truncate 32
            c.31 = tmp.127
            tmp.128 = sign_extend c.31
            i.36 = tmp.128
            tmp.129 = truncate i.36
            tmp.130 = sign_extend tmp.129
            tmp.132 = sign_extend c.31
            tmp.131 = tmp.130 != tmp.132
            if !tmp.131 jump end_if_50
            return 26
        
          end_if_50:
            tmp.133 = truncate 300
            tmp.134 = sign_extend tmp.133
            tmp.136 = truncate 44
            tmp.137 = sign_extend tmp.136
            tmp.135 = tmp.134 != tmp.137
            if !tmp.135 jump end_if_52
            return 27
        
          end_if_52:
            return 0
            return 0
        }
        static null_ptr.34: Pointer(Long) = zero[8]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_integer_promotion() {
    let src = r#"
        int add_chars(char c1, char c2, char c3) {
            return c1 + c2 + c3;
        }
        int negate(unsigned char uc) {
            return -uc;
        }
        int complement(unsigned char uc) {
            return ~uc;
        }
        int add_then_div(signed char a, signed char b, signed char c) {
            return (a + b) / c;
        }
        int mixed_multiply(signed char s, unsigned char u) {
            return s * u;
        }
        signed char decrement(signed char s) {
            s = s - 1;
            return s;
        }
        int main(void) {
            char a = 100;
            char b = 109;
            if (add_chars(a, a, b) != 309) {
                return 1;
            }
            unsigned char one = 1;
            if (negate(one) != -1) {
                return 2;
            }
            if (complement(one) != -2) {
                return 3;
            }
            signed char w = 127;
            signed char x = 3;
            signed char y = 2;
            if (add_then_div(w, x, y) != 65)
                return 4;
            signed char sc = -3;
            unsigned char uc = 250;
            if (mixed_multiply(sc, uc) != -750)
                return 5;
            sc = -128;
            if (sc != -128) {
                return 6;
            }
            if (decrement(sc) != 127) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function add_chars(c1.0, c2.1, c3.2) { 
            tmp.0 = sign_extend c1.0
            tmp.2 = sign_extend c2.1
            tmp.1 = tmp.0 + tmp.2
            tmp.4 = sign_extend c3.2
            tmp.3 = tmp.1 + tmp.4
            return tmp.3
            return 0
        }
        global function negate(uc.3) { 
            tmp.5 = zero_extend uc.3
            tmp.6 = - tmp.5
            return tmp.6
            return 0
        }
        global function complement(uc.4) { 
            tmp.7 = zero_extend uc.4
            tmp.8 = ~ tmp.7
            return tmp.8
            return 0
        }
        global function add_then_div(a.5, b.6, c.7) { 
            tmp.9 = sign_extend a.5
            tmp.11 = sign_extend b.6
            tmp.10 = tmp.9 + tmp.11
            tmp.13 = sign_extend c.7
            tmp.12 = tmp.10 / tmp.13
            return tmp.12
            return 0
        }
        global function mixed_multiply(s.8, u.9) { 
            tmp.14 = sign_extend s.8
            tmp.16 = zero_extend u.9
            tmp.15 = tmp.14 * tmp.16
            return tmp.15
            return 0
        }
        global function decrement(s.10) { 
            tmp.17 = sign_extend s.10
            tmp.18 = tmp.17 - 1
            tmp.19 = truncate tmp.18
            s.10 = tmp.19
            return s.10
            return 0
        }
        global function main() { 
            tmp.20 = truncate 100
            a.11 = tmp.20
            tmp.21 = truncate 109
            b.12 = tmp.21
            tmp.22 = add_chars(a.11, a.11, b.12)
            tmp.23 = tmp.22 != 309
            if !tmp.23 jump end_if_0
            return 1
        
          end_if_0:
            tmp.24 = truncate 1
            one.13 = tmp.24
            tmp.25 = negate(one.13)
            tmp.27 = - 1
            tmp.26 = tmp.25 != tmp.27
            if !tmp.26 jump end_if_2
            return 2
        
          end_if_2:
            tmp.28 = complement(one.13)
            tmp.30 = - 2
            tmp.29 = tmp.28 != tmp.30
            if !tmp.29 jump end_if_4
            return 3
        
          end_if_4:
            tmp.31 = truncate 127
            w.14 = tmp.31
            tmp.32 = truncate 3
            x.15 = tmp.32
            tmp.33 = truncate 2
            y.16 = tmp.33
            tmp.34 = add_then_div(w.14, x.15, y.16)
            tmp.35 = tmp.34 != 65
            if !tmp.35 jump end_if_6
            return 4
        
          end_if_6:
            tmp.36 = - 3
            tmp.37 = truncate tmp.36
            sc.17 = tmp.37
            tmp.38 = truncate 250
            uc.18 = tmp.38
            tmp.39 = mixed_multiply(sc.17, uc.18)
            tmp.41 = - 750
            tmp.40 = tmp.39 != tmp.41
            if !tmp.40 jump end_if_8
            return 5
        
          end_if_8:
            tmp.42 = - 128
            tmp.43 = truncate tmp.42
            sc.17 = tmp.43
            tmp.44 = sign_extend sc.17
            tmp.46 = - 128
            tmp.45 = tmp.44 != tmp.46
            if !tmp.45 jump end_if_10
            return 6
        
          end_if_10:
            tmp.47 = decrement(sc.17)
            tmp.48 = sign_extend tmp.47
            tmp.49 = tmp.48 != 127
            if !tmp.49 jump end_if_12
            return 7
        
          end_if_12:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_partial_initialization() {
    let src = r#"
        char static1[4] = {1, 2};
        signed char static2[4] = {3, 4};
        unsigned char static3[3] = {5};
        int main(void)
        {
            if (static1[0] != 1 || static1[1] != 2 || static1[2] || static1[3])
                return 1;
            if (static2[0] != 3 || static2[1] != 4 || static2[2] || static2[3])
                return 2;
            if (static3[0] != 5 || static3[1] || static3[2])
                return 3;
            char auto1[5] = {-4, 66, 4.0};
            signed char auto2[3] = {static1[2], -static1[0]};
            unsigned char auto3[2] = {'a'};
            if (auto1[0] != -4 || auto1[1] != 66 || auto1[2] != 4 || auto1[3] || auto1[4])
                return 4;
            if (auto2[0] || auto2[1] != -1 || auto2[2])
                return 5;
            if (auto3[0] != 'a' || auto3[1])
                return 6;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &static1
            tmp.1 = sign_extend 0
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=1)
            tmp.3 = *tmp.2
            tmp.4 = sign_extend tmp.3
            tmp.5 = tmp.4 != 1
            if tmp.5 jump or_true_0
            tmp.8 = &static1
            tmp.9 = sign_extend 1
            tmp.10 = add_ptr(tmp.8, index=tmp.9, scale=1)
            tmp.11 = *tmp.10
            tmp.12 = sign_extend tmp.11
            tmp.13 = tmp.12 != 2
            if tmp.13 jump or_true_0
            tmp.7 = 0
            jump or_end_1
        
          or_true_0:
            tmp.7 = 1
        
          or_end_1:
            if tmp.7 jump or_true_2
            tmp.16 = &static1
            tmp.17 = sign_extend 2
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=1)
            tmp.19 = *tmp.18
            if tmp.19 jump or_true_2
            tmp.15 = 0
            jump or_end_3
        
          or_true_2:
            tmp.15 = 1
        
          or_end_3:
            if tmp.15 jump or_true_4
            tmp.22 = &static1
            tmp.23 = sign_extend 3
            tmp.24 = add_ptr(tmp.22, index=tmp.23, scale=1)
            tmp.25 = *tmp.24
            if tmp.25 jump or_true_4
            tmp.21 = 0
            jump or_end_5
        
          or_true_4:
            tmp.21 = 1
        
          or_end_5:
            if !tmp.21 jump end_if_6
            return 1
        
          end_if_6:
            tmp.26 = &static2
            tmp.27 = sign_extend 0
            tmp.28 = add_ptr(tmp.26, index=tmp.27, scale=1)
            tmp.29 = *tmp.28
            tmp.30 = sign_extend tmp.29
            tmp.31 = tmp.30 != 3
            if tmp.31 jump or_true_8
            tmp.34 = &static2
            tmp.35 = sign_extend 1
            tmp.36 = add_ptr(tmp.34, index=tmp.35, scale=1)
            tmp.37 = *tmp.36
            tmp.38 = sign_extend tmp.37
            tmp.39 = tmp.38 != 4
            if tmp.39 jump or_true_8
            tmp.33 = 0
            jump or_end_9
        
          or_true_8:
            tmp.33 = 1
        
          or_end_9:
            if tmp.33 jump or_true_10
            tmp.42 = &static2
            tmp.43 = sign_extend 2
            tmp.44 = add_ptr(tmp.42, index=tmp.43, scale=1)
            tmp.45 = *tmp.44
            if tmp.45 jump or_true_10
            tmp.41 = 0
            jump or_end_11
        
          or_true_10:
            tmp.41 = 1
        
          or_end_11:
            if tmp.41 jump or_true_12
            tmp.48 = &static2
            tmp.49 = sign_extend 3
            tmp.50 = add_ptr(tmp.48, index=tmp.49, scale=1)
            tmp.51 = *tmp.50
            if tmp.51 jump or_true_12
            tmp.47 = 0
            jump or_end_13
        
          or_true_12:
            tmp.47 = 1
        
          or_end_13:
            if !tmp.47 jump end_if_14
            return 2
        
          end_if_14:
            tmp.52 = &static3
            tmp.53 = sign_extend 0
            tmp.54 = add_ptr(tmp.52, index=tmp.53, scale=1)
            tmp.55 = *tmp.54
            tmp.56 = zero_extend tmp.55
            tmp.57 = tmp.56 != 5
            if tmp.57 jump or_true_16
            tmp.60 = &static3
            tmp.61 = sign_extend 1
            tmp.62 = add_ptr(tmp.60, index=tmp.61, scale=1)
            tmp.63 = *tmp.62
            if tmp.63 jump or_true_16
            tmp.59 = 0
            jump or_end_17
        
          or_true_16:
            tmp.59 = 1
        
          or_end_17:
            if tmp.59 jump or_true_18
            tmp.66 = &static3
            tmp.67 = sign_extend 2
            tmp.68 = add_ptr(tmp.66, index=tmp.67, scale=1)
            tmp.69 = *tmp.68
            if tmp.69 jump or_true_18
            tmp.65 = 0
            jump or_end_19
        
          or_true_18:
            tmp.65 = 1
        
          or_end_19:
            if !tmp.65 jump end_if_20
            return 3
        
          end_if_20:
            tmp.70 = - 4
            tmp.71 = truncate tmp.70
            auto1.0[0] = tmp.71
            tmp.72 = truncate 66
            auto1.0[1] = tmp.72
            tmp.73 = double_to_int 4D
            auto1.0[2] = tmp.73
            auto1.0[3] = 0SC
            auto1.0[4] = 0SC
            tmp.74 = &static1
            tmp.75 = sign_extend 2
            tmp.76 = add_ptr(tmp.74, index=tmp.75, scale=1)
            tmp.77 = *tmp.76
            tmp.78 = tmp.77
            auto2.1[0] = tmp.78
            tmp.79 = &static1
            tmp.80 = sign_extend 0
            tmp.81 = add_ptr(tmp.79, index=tmp.80, scale=1)
            tmp.82 = *tmp.81
            tmp.83 = sign_extend tmp.82
            tmp.84 = - tmp.83
            tmp.85 = truncate tmp.84
            auto2.1[1] = tmp.85
            auto2.1[2] = 0SC
            tmp.86 = truncate 97
            auto3.2[0] = tmp.86
            auto3.2[1] = 0UC
            tmp.87 = &auto1.0
            tmp.88 = sign_extend 0
            tmp.89 = add_ptr(tmp.87, index=tmp.88, scale=1)
            tmp.90 = *tmp.89
            tmp.91 = sign_extend tmp.90
            tmp.93 = - 4
            tmp.92 = tmp.91 != tmp.93
            if tmp.92 jump or_true_22
            tmp.96 = &auto1.0
            tmp.97 = sign_extend 1
            tmp.98 = add_ptr(tmp.96, index=tmp.97, scale=1)
            tmp.99 = *tmp.98
            tmp.100 = sign_extend tmp.99
            tmp.101 = tmp.100 != 66
            if tmp.101 jump or_true_22
            tmp.95 = 0
            jump or_end_23
        
          or_true_22:
            tmp.95 = 1
        
          or_end_23:
            if tmp.95 jump or_true_24
            tmp.104 = &auto1.0
            tmp.105 = sign_extend 2
            tmp.106 = add_ptr(tmp.104, index=tmp.105, scale=1)
            tmp.107 = *tmp.106
            tmp.108 = sign_extend tmp.107
            tmp.109 = tmp.108 != 4
            if tmp.109 jump or_true_24
            tmp.103 = 0
            jump or_end_25
        
          or_true_24:
            tmp.103 = 1
        
          or_end_25:
            if tmp.103 jump or_true_26
            tmp.112 = &auto1.0
            tmp.113 = sign_extend 3
            tmp.114 = add_ptr(tmp.112, index=tmp.113, scale=1)
            tmp.115 = *tmp.114
            if tmp.115 jump or_true_26
            tmp.111 = 0
            jump or_end_27
        
          or_true_26:
            tmp.111 = 1
        
          or_end_27:
            if tmp.111 jump or_true_28
            tmp.118 = &auto1.0
            tmp.119 = sign_extend 4
            tmp.120 = add_ptr(tmp.118, index=tmp.119, scale=1)
            tmp.121 = *tmp.120
            if tmp.121 jump or_true_28
            tmp.117 = 0
            jump or_end_29
        
          or_true_28:
            tmp.117 = 1
        
          or_end_29:
            if !tmp.117 jump end_if_30
            return 4
        
          end_if_30:
            tmp.122 = &auto2.1
            tmp.123 = sign_extend 0
            tmp.124 = add_ptr(tmp.122, index=tmp.123, scale=1)
            tmp.125 = *tmp.124
            if tmp.125 jump or_true_32
            tmp.128 = &auto2.1
            tmp.129 = sign_extend 1
            tmp.130 = add_ptr(tmp.128, index=tmp.129, scale=1)
            tmp.131 = *tmp.130
            tmp.132 = sign_extend tmp.131
            tmp.134 = - 1
            tmp.133 = tmp.132 != tmp.134
            if tmp.133 jump or_true_32
            tmp.127 = 0
            jump or_end_33
        
          or_true_32:
            tmp.127 = 1
        
          or_end_33:
            if tmp.127 jump or_true_34
            tmp.137 = &auto2.1
            tmp.138 = sign_extend 2
            tmp.139 = add_ptr(tmp.137, index=tmp.138, scale=1)
            tmp.140 = *tmp.139
            if tmp.140 jump or_true_34
            tmp.136 = 0
            jump or_end_35
        
          or_true_34:
            tmp.136 = 1
        
          or_end_35:
            if !tmp.136 jump end_if_36
            return 5
        
          end_if_36:
            tmp.141 = &auto3.2
            tmp.142 = sign_extend 0
            tmp.143 = add_ptr(tmp.141, index=tmp.142, scale=1)
            tmp.144 = *tmp.143
            tmp.145 = zero_extend tmp.144
            tmp.146 = tmp.145 != 97
            if tmp.146 jump or_true_38
            tmp.149 = &auto3.2
            tmp.150 = sign_extend 1
            tmp.151 = add_ptr(tmp.149, index=tmp.150, scale=1)
            tmp.152 = *tmp.151
            if tmp.152 jump or_true_38
            tmp.148 = 0
            jump or_end_39
        
          or_true_38:
            tmp.148 = 1
        
          or_end_39:
            if !tmp.148 jump end_if_40
            return 6
        
          end_if_40:
            return 0
            return 0
        }
        static global static1: Array(4,Char) = [ 1, 2, zero[2]]
        static global static2: Array(4,Signed Char) = [ 3, 4, zero[2]]
        static global static3: Array(3,Unsigned Char) = [ 5, zero[2]]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_push_arg_on_page_boundary() {
    let src = r#"
        extern char zed;
        int foo(int a, int b, int c, int d, int e, int f, char g) {
            return g + 1;
        }
        int main(void) {
            return foo(0, 0, 0, 0, 0, 0, zed);
        }
    "#;
    let expected = r#"
        global function foo(a.0, b.1, c.2, d.3, e.4, f.5, g.6) { 
            tmp.0 = sign_extend g.6
            tmp.1 = tmp.0 + 1
            return tmp.1
            return 0
        }
        global function main() { 
            tmp.2 = foo(0, 0, 0, 0, 0, 0, zed)
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_return_char() {
    let src = r#"
        char return_char(void) {
            return 5369233654l;
        }
        signed char return_schar(void) {
            return 5369233654l;
        }
        unsigned char return_uchar(void) {
            return 5369233654l;
        }
        int main(void) {
            char char_array[3] = {121, -122, -3};
            char retval_c = return_char();
            char char_array2[3] = {-5, 88, -100};
            signed char retval_sc = return_schar();
            char char_array3[3] = {10, 11, 12};
            unsigned char retval_uc = return_uchar();
            char char_array4[2] = {-5, -6};
            if (char_array[0] != 121 || char_array[1] != -122 || char_array[2] != -3) {
                return 1;
            }
            if (retval_c != -10) {
                return 2;
            }
            if (char_array2[0] != -5 || char_array2[1] != 88 ||
                char_array2[2] != -100) {
                return 3;
            }
            if (retval_sc != -10) {
                return 4;
            }
            if (char_array3[0] != 10 || char_array3[1] != 11 || char_array3[2] != 12) {
                return 5;
            }
            if (retval_uc != 246) {
                return 6;
            }
            if (char_array4[0] != -5 || char_array4[1] != -6) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function return_char() { 
            tmp.0 = truncate 5369233654L
            return tmp.0
            return 0
        }
        global function return_schar() { 
            tmp.1 = truncate 5369233654L
            return tmp.1
            return 0
        }
        global function return_uchar() { 
            tmp.2 = truncate 5369233654L
            return tmp.2
            return 0
        }
        global function main() { 
            tmp.3 = truncate 121
            char_array.0[0] = tmp.3
            tmp.4 = - 122
            tmp.5 = truncate tmp.4
            char_array.0[1] = tmp.5
            tmp.6 = - 3
            tmp.7 = truncate tmp.6
            char_array.0[2] = tmp.7
            tmp.8 = return_char()
            retval_c.1 = tmp.8
            tmp.9 = - 5
            tmp.10 = truncate tmp.9
            char_array2.2[0] = tmp.10
            tmp.11 = truncate 88
            char_array2.2[1] = tmp.11
            tmp.12 = - 100
            tmp.13 = truncate tmp.12
            char_array2.2[2] = tmp.13
            tmp.14 = return_schar()
            retval_sc.3 = tmp.14
            tmp.15 = truncate 10
            char_array3.4[0] = tmp.15
            tmp.16 = truncate 11
            char_array3.4[1] = tmp.16
            tmp.17 = truncate 12
            char_array3.4[2] = tmp.17
            tmp.18 = return_uchar()
            retval_uc.5 = tmp.18
            tmp.19 = - 5
            tmp.20 = truncate tmp.19
            char_array4.6[0] = tmp.20
            tmp.21 = - 6
            tmp.22 = truncate tmp.21
            char_array4.6[1] = tmp.22
            tmp.23 = &char_array.0
            tmp.24 = sign_extend 0
            tmp.25 = add_ptr(tmp.23, index=tmp.24, scale=1)
            tmp.26 = *tmp.25
            tmp.27 = sign_extend tmp.26
            tmp.28 = tmp.27 != 121
            if tmp.28 jump or_true_0
            tmp.31 = &char_array.0
            tmp.32 = sign_extend 1
            tmp.33 = add_ptr(tmp.31, index=tmp.32, scale=1)
            tmp.34 = *tmp.33
            tmp.35 = sign_extend tmp.34
            tmp.37 = - 122
            tmp.36 = tmp.35 != tmp.37
            if tmp.36 jump or_true_0
            tmp.30 = 0
            jump or_end_1
        
          or_true_0:
            tmp.30 = 1
        
          or_end_1:
            if tmp.30 jump or_true_2
            tmp.40 = &char_array.0
            tmp.41 = sign_extend 2
            tmp.42 = add_ptr(tmp.40, index=tmp.41, scale=1)
            tmp.43 = *tmp.42
            tmp.44 = sign_extend tmp.43
            tmp.46 = - 3
            tmp.45 = tmp.44 != tmp.46
            if tmp.45 jump or_true_2
            tmp.39 = 0
            jump or_end_3
        
          or_true_2:
            tmp.39 = 1
        
          or_end_3:
            if !tmp.39 jump end_if_4
            return 1
        
          end_if_4:
            tmp.47 = sign_extend retval_c.1
            tmp.49 = - 10
            tmp.48 = tmp.47 != tmp.49
            if !tmp.48 jump end_if_6
            return 2
        
          end_if_6:
            tmp.50 = &char_array2.2
            tmp.51 = sign_extend 0
            tmp.52 = add_ptr(tmp.50, index=tmp.51, scale=1)
            tmp.53 = *tmp.52
            tmp.54 = sign_extend tmp.53
            tmp.56 = - 5
            tmp.55 = tmp.54 != tmp.56
            if tmp.55 jump or_true_8
            tmp.59 = &char_array2.2
            tmp.60 = sign_extend 1
            tmp.61 = add_ptr(tmp.59, index=tmp.60, scale=1)
            tmp.62 = *tmp.61
            tmp.63 = sign_extend tmp.62
            tmp.64 = tmp.63 != 88
            if tmp.64 jump or_true_8
            tmp.58 = 0
            jump or_end_9
        
          or_true_8:
            tmp.58 = 1
        
          or_end_9:
            if tmp.58 jump or_true_10
            tmp.67 = &char_array2.2
            tmp.68 = sign_extend 2
            tmp.69 = add_ptr(tmp.67, index=tmp.68, scale=1)
            tmp.70 = *tmp.69
            tmp.71 = sign_extend tmp.70
            tmp.73 = - 100
            tmp.72 = tmp.71 != tmp.73
            if tmp.72 jump or_true_10
            tmp.66 = 0
            jump or_end_11
        
          or_true_10:
            tmp.66 = 1
        
          or_end_11:
            if !tmp.66 jump end_if_12
            return 3
        
          end_if_12:
            tmp.74 = sign_extend retval_sc.3
            tmp.76 = - 10
            tmp.75 = tmp.74 != tmp.76
            if !tmp.75 jump end_if_14
            return 4
        
          end_if_14:
            tmp.77 = &char_array3.4
            tmp.78 = sign_extend 0
            tmp.79 = add_ptr(tmp.77, index=tmp.78, scale=1)
            tmp.80 = *tmp.79
            tmp.81 = sign_extend tmp.80
            tmp.82 = tmp.81 != 10
            if tmp.82 jump or_true_16
            tmp.85 = &char_array3.4
            tmp.86 = sign_extend 1
            tmp.87 = add_ptr(tmp.85, index=tmp.86, scale=1)
            tmp.88 = *tmp.87
            tmp.89 = sign_extend tmp.88
            tmp.90 = tmp.89 != 11
            if tmp.90 jump or_true_16
            tmp.84 = 0
            jump or_end_17
        
          or_true_16:
            tmp.84 = 1
        
          or_end_17:
            if tmp.84 jump or_true_18
            tmp.93 = &char_array3.4
            tmp.94 = sign_extend 2
            tmp.95 = add_ptr(tmp.93, index=tmp.94, scale=1)
            tmp.96 = *tmp.95
            tmp.97 = sign_extend tmp.96
            tmp.98 = tmp.97 != 12
            if tmp.98 jump or_true_18
            tmp.92 = 0
            jump or_end_19
        
          or_true_18:
            tmp.92 = 1
        
          or_end_19:
            if !tmp.92 jump end_if_20
            return 5
        
          end_if_20:
            tmp.99 = zero_extend retval_uc.5
            tmp.100 = tmp.99 != 246
            if !tmp.100 jump end_if_22
            return 6
        
          end_if_22:
            tmp.101 = &char_array4.6
            tmp.102 = sign_extend 0
            tmp.103 = add_ptr(tmp.101, index=tmp.102, scale=1)
            tmp.104 = *tmp.103
            tmp.105 = sign_extend tmp.104
            tmp.107 = - 5
            tmp.106 = tmp.105 != tmp.107
            if tmp.106 jump or_true_24
            tmp.110 = &char_array4.6
            tmp.111 = sign_extend 1
            tmp.112 = add_ptr(tmp.110, index=tmp.111, scale=1)
            tmp.113 = *tmp.112
            tmp.114 = sign_extend tmp.113
            tmp.116 = - 6
            tmp.115 = tmp.114 != tmp.116
            if tmp.115 jump or_true_24
            tmp.109 = 0
            jump or_end_25
        
          or_true_24:
            tmp.109 = 1
        
          or_end_25:
            if !tmp.109 jump end_if_26
            return 7
        
          end_if_26:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_rewrite_movz_regression() {
    let src = r#"
        int check_12_ints(int start, int a, int b, int c, int d, int e, int f, int g,
                          int h, int i, int j, int k, int l);
        unsigned char glob = 5;
        int main(void) {
            int should_spill = (int)glob;
            int one = glob - 4;
            int two = one + one;
            int three = 2 + one;
            int four = two * two;
            int five = 6 - one;
            int six = two * three;
            int seven = one + 6;
            int eight = two * 4;
            int nine = three * three;
            int ten = four + six;
            int eleven = 16 - five;
            int twelve = six + six;
            check_12_ints(one, two, three, four, five, six, seven, eight, nine, ten,
                          eleven, twelve, 1);
            int thirteen = 8 + glob;
            int fourteen = thirteen + 1;
            int fifteen = 28 - thirteen;
            int sixteen = fourteen + 2;
            int seventeen = 4 + thirteen;
            int eighteen = 32 - fourteen;
            int nineteen = 35 - sixteen;
            int twenty = fifteen + 5;
            int twenty_one = thirteen * 2 - 5;
            int twenty_two = fifteen + 7;
            int twenty_three = 6 + seventeen;
            int twenty_four = thirteen + 11;
            check_12_ints(thirteen, fourteen, fifteen, sixteen, seventeen, eighteen,
                          nineteen, twenty, twenty_one, twenty_two, twenty_three,
                          twenty_four, 13);
            if (should_spill != 5) {
                return -1;
            }
            return 0;
        }
        int check_12_ints(int a, int b, int c, int d, int e, int f, int g, int h, int i,
                          int j, int k, int l, int start) {
            int expected = 0;
            expected = start + 0;
            if (a != expected) {
                return expected;
            }
            expected = start + 1;
            if (b != expected) {
                return expected;
            }
            expected = start + 2;
            if (c != expected) {
                return expected;
            }
            expected = start + 3;
            if (d != expected) {
                return expected;
            }
            expected = start + 4;
            if (e != expected) {
                return expected;
            }
            expected = start + 5;
            if (f != expected) {
                return expected;
            }
            expected = start + 6;
            if (g != expected) {
                return expected;
            }
            expected = start + 7;
            if (h != expected) {
                return expected;
            }
            expected = start + 8;
            if (i != expected) {
                return expected;
            }
            expected = start + 9;
            if (j != expected) {
                return expected;
            }
            expected = start + 10;
            if (k != expected) {
                return expected;
            }
            expected = start + 11;
            if (l != expected) {
                return expected;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = zero_extend glob
            should_spill.13 = tmp.0
            tmp.1 = zero_extend glob
            tmp.2 = tmp.1 - 4
            one.14 = tmp.2
            tmp.3 = one.14 + one.14
            two.15 = tmp.3
            tmp.4 = 2 + one.14
            three.16 = tmp.4
            tmp.5 = two.15 * two.15
            four.17 = tmp.5
            tmp.6 = 6 - one.14
            five.18 = tmp.6
            tmp.7 = two.15 * three.16
            six.19 = tmp.7
            tmp.8 = one.14 + 6
            seven.20 = tmp.8
            tmp.9 = two.15 * 4
            eight.21 = tmp.9
            tmp.10 = three.16 * three.16
            nine.22 = tmp.10
            tmp.11 = four.17 + six.19
            ten.23 = tmp.11
            tmp.12 = 16 - five.18
            eleven.24 = tmp.12
            tmp.13 = six.19 + six.19
            twelve.25 = tmp.13
            tmp.14 = check_12_ints(one.14, two.15, three.16, four.17, five.18, six.19, seven.20, eight.21, nine.22, ten.23, eleven.24, twelve.25, 1)
            tmp.16 = zero_extend glob
            tmp.15 = 8 + tmp.16
            thirteen.26 = tmp.15
            tmp.17 = thirteen.26 + 1
            fourteen.27 = tmp.17
            tmp.18 = 28 - thirteen.26
            fifteen.28 = tmp.18
            tmp.19 = fourteen.27 + 2
            sixteen.29 = tmp.19
            tmp.20 = 4 + thirteen.26
            seventeen.30 = tmp.20
            tmp.21 = 32 - fourteen.27
            eighteen.31 = tmp.21
            tmp.22 = 35 - sixteen.29
            nineteen.32 = tmp.22
            tmp.23 = fifteen.28 + 5
            twenty.33 = tmp.23
            tmp.24 = thirteen.26 * 2
            tmp.25 = tmp.24 - 5
            twenty_one.34 = tmp.25
            tmp.26 = fifteen.28 + 7
            twenty_two.35 = tmp.26
            tmp.27 = 6 + seventeen.30
            twenty_three.36 = tmp.27
            tmp.28 = thirteen.26 + 11
            twenty_four.37 = tmp.28
            tmp.29 = check_12_ints(thirteen.26, fourteen.27, fifteen.28, sixteen.29, seventeen.30, eighteen.31, nineteen.32, twenty.33, twenty_one.34, twenty_two.35, twenty_three.36, twenty_four.37, 13)
            tmp.30 = should_spill.13 != 5
            if !tmp.30 jump end_if_0
            tmp.31 = - 1
            return tmp.31
        
          end_if_0:
            return 0
            return 0
        }
        global function check_12_ints(a.38, b.39, c.40, d.41, e.42, f.43, g.44, h.45, i.46, j.47, k.48, l.49, start.50) { 
            expected.51 = 0
            tmp.32 = start.50 + 0
            expected.51 = tmp.32
            tmp.33 = a.38 != expected.51
            if !tmp.33 jump end_if_2
            return expected.51
        
          end_if_2:
            tmp.34 = start.50 + 1
            expected.51 = tmp.34
            tmp.35 = b.39 != expected.51
            if !tmp.35 jump end_if_4
            return expected.51
        
          end_if_4:
            tmp.36 = start.50 + 2
            expected.51 = tmp.36
            tmp.37 = c.40 != expected.51
            if !tmp.37 jump end_if_6
            return expected.51
        
          end_if_6:
            tmp.38 = start.50 + 3
            expected.51 = tmp.38
            tmp.39 = d.41 != expected.51
            if !tmp.39 jump end_if_8
            return expected.51
        
          end_if_8:
            tmp.40 = start.50 + 4
            expected.51 = tmp.40
            tmp.41 = e.42 != expected.51
            if !tmp.41 jump end_if_10
            return expected.51
        
          end_if_10:
            tmp.42 = start.50 + 5
            expected.51 = tmp.42
            tmp.43 = f.43 != expected.51
            if !tmp.43 jump end_if_12
            return expected.51
        
          end_if_12:
            tmp.44 = start.50 + 6
            expected.51 = tmp.44
            tmp.45 = g.44 != expected.51
            if !tmp.45 jump end_if_14
            return expected.51
        
          end_if_14:
            tmp.46 = start.50 + 7
            expected.51 = tmp.46
            tmp.47 = h.45 != expected.51
            if !tmp.47 jump end_if_16
            return expected.51
        
          end_if_16:
            tmp.48 = start.50 + 8
            expected.51 = tmp.48
            tmp.49 = i.46 != expected.51
            if !tmp.49 jump end_if_18
            return expected.51
        
          end_if_18:
            tmp.50 = start.50 + 9
            expected.51 = tmp.50
            tmp.51 = j.47 != expected.51
            if !tmp.51 jump end_if_20
            return expected.51
        
          end_if_20:
            tmp.52 = start.50 + 10
            expected.51 = tmp.52
            tmp.53 = k.48 != expected.51
            if !tmp.53 jump end_if_22
            return expected.51
        
          end_if_22:
            tmp.54 = start.50 + 11
            expected.51 = tmp.54
            tmp.55 = l.49 != expected.51
            if !tmp.55 jump end_if_24
            return expected.51
        
          end_if_24:
            return 0
            return 0
        }
        static global glob: Unsigned Char = 5
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_static_initializers() {
    let src = r#"
        char from_long = 17592186044416l;
        char from_double = 15.6;
        char from_uint = 2147483777u;
        char from_ulong = 9223372037928517642ul;
        signed char schar_from_long = 17592186044419l;
        signed char schar_from_uint = 2147483898u;
        signed char schar_from_ulong = 9223372037928517642ul;
        signed char schar_from_double = 1e-10;
        unsigned char uchar_from_int = 13526;
        unsigned char uchar_from_uint = 2147483898u;
        unsigned char uchar_from_long = 1101659111674l;
        unsigned char uchar_from_ulong = 9223372037928517642ul;
        unsigned char uchar_from_double = 77.7;
        int main(void) {
            if (from_long != 0) {
                return 1;
            }
            if (from_double != 15) {
                return 2;
            }
            if (from_uint != -127) {
                return 3;
            }
            if (from_ulong != 10) {
                return 4;
            }
            if (schar_from_uint != -6) {
                return 5;
            }
            if (schar_from_ulong != 10) {
                return 6;
            }
            if (schar_from_double != 0) {
                return 7;
            }
            if (uchar_from_int != 214) {
                return 8;
            }
            if (uchar_from_uint != 250) {
                return 9;
            }
            if (uchar_from_ulong != 10) {
                return 10;
            }
            if (uchar_from_double != 77) {
                return 11;
            }
            if (schar_from_long != 3) {
                return 12;
            }
            if (uchar_from_long != 250) {
                return 13;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = sign_extend from_long
            tmp.1 = tmp.0 != 0
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = sign_extend from_double
            tmp.3 = tmp.2 != 15
            if !tmp.3 jump end_if_2
            return 2
        
          end_if_2:
            tmp.4 = sign_extend from_uint
            tmp.6 = - 127
            tmp.5 = tmp.4 != tmp.6
            if !tmp.5 jump end_if_4
            return 3
        
          end_if_4:
            tmp.7 = sign_extend from_ulong
            tmp.8 = tmp.7 != 10
            if !tmp.8 jump end_if_6
            return 4
        
          end_if_6:
            tmp.9 = sign_extend schar_from_uint
            tmp.11 = - 6
            tmp.10 = tmp.9 != tmp.11
            if !tmp.10 jump end_if_8
            return 5
        
          end_if_8:
            tmp.12 = sign_extend schar_from_ulong
            tmp.13 = tmp.12 != 10
            if !tmp.13 jump end_if_10
            return 6
        
          end_if_10:
            tmp.14 = sign_extend schar_from_double
            tmp.15 = tmp.14 != 0
            if !tmp.15 jump end_if_12
            return 7
        
          end_if_12:
            tmp.16 = zero_extend uchar_from_int
            tmp.17 = tmp.16 != 214
            if !tmp.17 jump end_if_14
            return 8
        
          end_if_14:
            tmp.18 = zero_extend uchar_from_uint
            tmp.19 = tmp.18 != 250
            if !tmp.19 jump end_if_16
            return 9
        
          end_if_16:
            tmp.20 = zero_extend uchar_from_ulong
            tmp.21 = tmp.20 != 10
            if !tmp.21 jump end_if_18
            return 10
        
          end_if_18:
            tmp.22 = zero_extend uchar_from_double
            tmp.23 = tmp.22 != 77
            if !tmp.23 jump end_if_20
            return 11
        
          end_if_20:
            tmp.24 = sign_extend schar_from_long
            tmp.25 = tmp.24 != 3
            if !tmp.25 jump end_if_22
            return 12
        
          end_if_22:
            tmp.26 = zero_extend uchar_from_long
            tmp.27 = tmp.26 != 250
            if !tmp.27 jump end_if_24
            return 13
        
          end_if_24:
            return 0
            return 0
        }
        static global from_double: Char = 15
        static global from_long: Char = 0
        static global from_uint: Char = -2147483519
        static global from_ulong: Char = 1073741834
        static global schar_from_double: Signed Char = 0
        static global schar_from_long: Signed Char = 3
        static global schar_from_uint: Signed Char = -2147483398
        static global schar_from_ulong: Signed Char = 1073741834
        static global uchar_from_double: Unsigned Char = 77
        static global uchar_from_int: Unsigned Char = 13526
        static global uchar_from_long: Unsigned Char = -2147483398
        static global uchar_from_uint: Unsigned Char = -2147483398
        static global uchar_from_ulong: Unsigned Char = 1073741834
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_chars_type_specifiers() {
    let src = r#"
        char signed static a = 10;
        unsigned static char b = 20;
        char c = 30;
        int main(void)
        {
            extern signed char a;
            char unsigned extern b;
            extern char c;
            if (a != 10) {
                return 1;
            }
            if (b != 20) {
                return 2;
            }
            if (c != 30) {
                return 3;
            }
            int loop_counter = 0;
            for (unsigned char d = 0; d < 100; d = d + 1) {
                loop_counter = loop_counter + 1;
            }
            if (loop_counter != 100) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = sign_extend a
            tmp.1 = tmp.0 != 10
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = zero_extend b
            tmp.3 = tmp.2 != 20
            if !tmp.3 jump end_if_2
            return 2
        
          end_if_2:
            tmp.4 = sign_extend c
            tmp.5 = tmp.4 != 30
            if !tmp.5 jump end_if_4
            return 3
        
          end_if_4:
            loop_counter.3 = 0
            tmp.6 = truncate 0
            d.4 = tmp.6
        
          start_loop_0:
            tmp.7 = zero_extend d.4
            tmp.8 = tmp.7 < 100
            if !tmp.8 jump break_loop_0
            tmp.9 = loop_counter.3 + 1
            loop_counter.3 = tmp.9
        
          continue_loop_0:
            tmp.10 = zero_extend d.4
            tmp.11 = tmp.10 + 1
            tmp.12 = truncate tmp.11
            d.4 = tmp.12
            jump start_loop_0
        
          break_loop_0:
            tmp.13 = loop_counter.3 != 100
            if !tmp.13 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        static a: Signed Char = 10
        static b: Unsigned Char = 20
        static global c: Char = 30
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_extra_credit_bitshift_chars() {
    let src = r#"
        int main(void) {
            unsigned char uc = 255;
            if ((uc >> 3) != 31) {
                return 2;
            }
            signed char sc = -127;
            char c = 5;
            if ((sc >> c) != -4) {
                return 3;
            }
            if (((-(c << 3ul)) >> 3) != -5) {
                return 4;
            }
            if ((-(uc << 5u) >> 5u) != -255l) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = truncate 255
            uc.0 = tmp.0
            tmp.1 = uc.0 >> 3
            tmp.2 = zero_extend tmp.1
            tmp.3 = tmp.2 != 31
            if !tmp.3 jump end_if_0
            return 2
        
          end_if_0:
            tmp.4 = - 127
            tmp.5 = truncate tmp.4
            sc.1 = tmp.5
            tmp.6 = truncate 5
            c.2 = tmp.6
            tmp.7 = sc.1 >> c.2
            tmp.8 = sign_extend tmp.7
            tmp.10 = - 4
            tmp.9 = tmp.8 != tmp.10
            if !tmp.9 jump end_if_2
            return 3
        
          end_if_2:
            tmp.11 = c.2 << 3UL
            tmp.12 = sign_extend tmp.11
            tmp.13 = - tmp.12
            tmp.14 = tmp.13 >> 3
            tmp.16 = - 5
            tmp.15 = tmp.14 != tmp.16
            if !tmp.15 jump end_if_4
            return 4
        
          end_if_4:
            tmp.17 = uc.0 << 5U
            tmp.18 = zero_extend tmp.17
            tmp.19 = - tmp.18
            tmp.20 = tmp.19 >> 5U
            tmp.21 = sign_extend tmp.20
            tmp.23 = - 255L
            tmp.22 = tmp.21 != tmp.23
            if !tmp.22 jump end_if_6
            return 5
        
          end_if_6:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_extra_credit_bitwise_ops_character_constants() {
    let src = r#"
        int main(void) {
            int x = 10;
            if ((x ^ 'A') != 75) {
                return 1;
            }
            static char c = 132;
            if (('!' | c) != -91) {
                return 2;
            }
            static unsigned long ul = 9259400834947493926ul;
            if ((ul & '~') != 38) {
                return 3;
            }
            if ((ul << ' ') != 4611738958194278400ul) {
                return 4;
            }
            if (('{' >> 3) != 15) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            x.0 = 10
            tmp.0 = x.0 ^ 65
            tmp.1 = tmp.0 != 75
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.3 = sign_extend c.1
            tmp.2 = 33 | tmp.3
            tmp.5 = - 91
            tmp.4 = tmp.2 != tmp.5
            if !tmp.4 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = sign_extend 126
            tmp.6 = ul.2 & tmp.7
            tmp.9 = sign_extend 38
            tmp.8 = tmp.6 != tmp.9
            if !tmp.8 jump end_if_4
            return 3
        
          end_if_4:
            tmp.10 = ul.2 << 32
            tmp.11 = tmp.10 != 4611738958194278400UL
            if !tmp.11 jump end_if_6
            return 4
        
          end_if_6:
            tmp.12 = 123 >> 3
            tmp.13 = tmp.12 != 15
            if !tmp.13 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
        static c.1: Char = 132
        static ul.2: Unsigned Long = 9259400834947493926UL
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_extra_credit_bitwise_ops_chars() {
    let src = r#"
        int main(void) {
            unsigned char uc = 135;
            char c = -116;
            if ((uc & c) != 132) {
                return 1;
            }
            if ((uc | c) != -113) {
                return 2;
            }
            if (((c ^ 1001u) | 360l) != 4294966637) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = truncate 135
            uc.0 = tmp.0
            tmp.1 = - 116
            tmp.2 = truncate tmp.1
            c.1 = tmp.2
            tmp.3 = zero_extend uc.0
            tmp.5 = sign_extend c.1
            tmp.4 = tmp.3 & tmp.5
            tmp.6 = tmp.4 != 132
            if !tmp.6 jump end_if_0
            return 1
        
          end_if_0:
            tmp.7 = zero_extend uc.0
            tmp.9 = sign_extend c.1
            tmp.8 = tmp.7 | tmp.9
            tmp.11 = - 113
            tmp.10 = tmp.8 != tmp.11
            if !tmp.10 jump end_if_2
            return 2
        
          end_if_2:
            tmp.12 = sign_extend c.1
            tmp.13 = tmp.12 ^ 1001U
            tmp.14 = zero_extend tmp.13
            tmp.15 = tmp.14 | 360L
            tmp.16 = tmp.15 != 4294966637L
            if !tmp.16 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_extra_credit_char_consts_as_cases() {
    let src = r#"
        
        int main(void) {
            static int i = 65;
            switch (i) {
                case 100l:
                    return 1;
                case 'A':
                    return 0;
                case 'B':
                    return 2;
                case 2000u:
                    return 3;
                default:
                    return -1;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = i.0 == 100
            if tmp.0 jump switch_0_case__1
            tmp.1 = i.0 == 65
            if tmp.1 jump switch_0_case__2
            tmp.2 = i.0 == 66
            if tmp.2 jump switch_0_case__3
            tmp.3 = i.0 == 2000
            if tmp.3 jump switch_0_case__4
            jump switch_0_default_5
            jump break_switch_0
        
          switch_0_case__1:
            return 1
        
          switch_0_case__2:
            return 0
        
          switch_0_case__3:
            return 2
        
          switch_0_case__4:
            return 3
        
          switch_0_default_5:
            tmp.4 = - 1
            return tmp.4
        
          break_switch_0:
            return 0
        }
        static i.0: Int = 65
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_extra_credit_compound_assign_chars() {
    let src = r#"
        int main(void) {
            static char c = 100;
            char c2 = 100;
            c += c2;
            if (c != -56) {
                return 1;
            }
            static unsigned char uc = 200;
            c2 = -100;
            uc /= c2;
            if (uc != 254) {
                return 2;
            }
            uc -= 250.0;
            if (uc != 4) {
                 return 3;
            }
            static signed char sc = 70;
            sc = -sc;
            sc *= c;
            if (sc != 80) {
                return 4;
            }
            if ((sc %= c) != 24) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = truncate 100
            c2.1 = tmp.0
            tmp.1 = sign_extend c.0
            tmp.3 = sign_extend c2.1
            tmp.2 = tmp.1 + tmp.3
            tmp.4 = truncate tmp.2
            c.0 = tmp.4
            tmp.5 = truncate tmp.4
            tmp.6 = sign_extend c.0
            tmp.8 = - 56
            tmp.7 = tmp.6 != tmp.8
            if !tmp.7 jump end_if_0
            return 1
        
          end_if_0:
            tmp.9 = - 100
            tmp.10 = truncate tmp.9
            c2.1 = tmp.10
            tmp.11 = zero_extend uc.2
            tmp.13 = sign_extend c2.1
            tmp.12 = tmp.11 / tmp.13
            tmp.14 = truncate tmp.12
            uc.2 = tmp.14
            tmp.15 = truncate tmp.14
            tmp.16 = zero_extend uc.2
            tmp.17 = tmp.16 != 254
            if !tmp.17 jump end_if_2
            return 2
        
          end_if_2:
            tmp.18 = uint_to_double uc.2
            tmp.19 = tmp.18 - 250D
            tmp.20 = double_to_uint tmp.19
            uc.2 = tmp.20
            tmp.21 = double_to_uint tmp.20
            tmp.22 = zero_extend uc.2
            tmp.23 = tmp.22 != 4
            if !tmp.23 jump end_if_4
            return 3
        
          end_if_4:
            tmp.24 = sign_extend sc.3
            tmp.25 = - tmp.24
            tmp.26 = truncate tmp.25
            sc.3 = tmp.26
            tmp.27 = sign_extend sc.3
            tmp.29 = sign_extend c.0
            tmp.28 = tmp.27 * tmp.29
            tmp.30 = truncate tmp.28
            sc.3 = tmp.30
            tmp.31 = truncate tmp.30
            tmp.32 = sign_extend sc.3
            tmp.33 = tmp.32 != 80
            if !tmp.33 jump end_if_6
            return 4
        
          end_if_6:
            tmp.34 = sign_extend sc.3
            tmp.36 = sign_extend c.0
            tmp.35 = tmp.34 % tmp.36
            tmp.37 = truncate tmp.35
            sc.3 = tmp.37
            tmp.38 = truncate tmp.37
            tmp.39 = tmp.38 != 24
            if !tmp.39 jump end_if_8
            return 5
        
          end_if_8:
            return 0
            return 0
        }
        static c.0: Char = 100
        static sc.3: Signed Char = 70
        static uc.2: Unsigned Char = 200
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_extra_credit_compound_bitwise_ops_chars() {
    let src = r#"
        int main(void) {
            signed char arr[5] = {-128, -120, -2, 1, 120};
            unsigned char u_arr[4] = {0, 170, 250, 255};
            arr[0] ^= 12345;
            arr[1] |= u_arr[3];
            arr[2] &= u_arr[1] - (unsigned char) 185;
            arr[3] <<= 7u;
            static long x = 32;
            arr[4] >>= 31;
            u_arr[3] <<= 12;
            u_arr[2] >>= (x - 1);
            u_arr[1] |= -399;
            x = -4296140120l;
            u_arr[0] ^= x;
            if (arr[0] != -71) {
                return 1;
            }
            if (arr[1] != -1) {
                return 2;
            }
            if (arr[2] != -16) {
                return 3;
            }
            if (arr[3] != -128) {
                return 4;
            }
            if (arr[4] != 0) {
                return 5;
            }
            if (u_arr[0] != 168) {
                return 6;
            }
            if (u_arr[1] != 251) {
                return 7;
            }
            if (u_arr[2] != 0) {
                return 8;
            }
            if (u_arr[3] != 0) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 128
            tmp.1 = truncate tmp.0
            arr.0[0] = tmp.1
            tmp.2 = - 120
            tmp.3 = truncate tmp.2
            arr.0[1] = tmp.3
            tmp.4 = - 2
            tmp.5 = truncate tmp.4
            arr.0[2] = tmp.5
            tmp.6 = truncate 1
            arr.0[3] = tmp.6
            tmp.7 = truncate 120
            arr.0[4] = tmp.7
            tmp.8 = truncate 0
            u_arr.1[0] = tmp.8
            tmp.9 = truncate 170
            u_arr.1[1] = tmp.9
            tmp.10 = truncate 250
            u_arr.1[2] = tmp.10
            tmp.11 = truncate 255
            u_arr.1[3] = tmp.11
            tmp.12 = &arr.0
            tmp.13 = sign_extend 0
            tmp.14 = add_ptr(tmp.12, index=tmp.13, scale=1)
            tmp.15 = *tmp.14
            tmp.16 = sign_extend tmp.15
            tmp.17 = tmp.16 ^ 12345
            tmp.18 = truncate tmp.17
            *tmp.14 = tmp.18
            tmp.19 = truncate tmp.18
            tmp.20 = &arr.0
            tmp.21 = sign_extend 1
            tmp.22 = add_ptr(tmp.20, index=tmp.21, scale=1)
            tmp.23 = *tmp.22
            tmp.24 = sign_extend tmp.23
            tmp.26 = &u_arr.1
            tmp.27 = sign_extend 3
            tmp.28 = add_ptr(tmp.26, index=tmp.27, scale=1)
            tmp.29 = *tmp.28
            tmp.30 = zero_extend tmp.29
            tmp.25 = tmp.24 | tmp.30
            tmp.31 = truncate tmp.25
            *tmp.22 = tmp.31
            tmp.32 = truncate tmp.31
            tmp.33 = &arr.0
            tmp.34 = sign_extend 2
            tmp.35 = add_ptr(tmp.33, index=tmp.34, scale=1)
            tmp.36 = *tmp.35
            tmp.37 = sign_extend tmp.36
            tmp.39 = &u_arr.1
            tmp.40 = sign_extend 1
            tmp.41 = add_ptr(tmp.39, index=tmp.40, scale=1)
            tmp.42 = *tmp.41
            tmp.43 = zero_extend tmp.42
            tmp.45 = truncate 185
            tmp.46 = zero_extend tmp.45
            tmp.44 = tmp.43 - tmp.46
            tmp.38 = tmp.37 & tmp.44
            tmp.47 = truncate tmp.38
            *tmp.35 = tmp.47
            tmp.48 = truncate tmp.47
            tmp.49 = &arr.0
            tmp.50 = sign_extend 3
            tmp.51 = add_ptr(tmp.49, index=tmp.50, scale=1)
            tmp.52 = *tmp.51
            tmp.54 = truncate 7U
            tmp.53 = tmp.52 << tmp.54
            *tmp.51 = tmp.53
            tmp.55 = &arr.0
            tmp.56 = sign_extend 4
            tmp.57 = add_ptr(tmp.55, index=tmp.56, scale=1)
            tmp.58 = *tmp.57
            tmp.60 = truncate 31
            tmp.59 = tmp.58 >> tmp.60
            *tmp.57 = tmp.59
            tmp.61 = &u_arr.1
            tmp.62 = sign_extend 3
            tmp.63 = add_ptr(tmp.61, index=tmp.62, scale=1)
            tmp.64 = *tmp.63
            tmp.66 = truncate 12
            tmp.65 = tmp.64 << tmp.66
            *tmp.63 = tmp.65
            tmp.67 = &u_arr.1
            tmp.68 = sign_extend 2
            tmp.69 = add_ptr(tmp.67, index=tmp.68, scale=1)
            tmp.70 = *tmp.69
            tmp.73 = sign_extend 1
            tmp.72 = x.2 - tmp.73
            tmp.74 = truncate tmp.72
            tmp.71 = tmp.70 >> tmp.74
            *tmp.69 = tmp.71
            tmp.75 = &u_arr.1
            tmp.76 = sign_extend 1
            tmp.77 = add_ptr(tmp.75, index=tmp.76, scale=1)
            tmp.78 = *tmp.77
            tmp.79 = zero_extend tmp.78
            tmp.81 = - 399
            tmp.80 = tmp.79 | tmp.81
            tmp.82 = truncate tmp.80
            *tmp.77 = tmp.82
            tmp.83 = truncate tmp.82
            tmp.84 = - 4296140120L
            x.2 = tmp.84
            tmp.85 = &u_arr.1
            tmp.86 = sign_extend 0
            tmp.87 = add_ptr(tmp.85, index=tmp.86, scale=1)
            tmp.88 = *tmp.87
            tmp.89 = zero_extend tmp.88
            tmp.90 = tmp.89 ^ x.2
            tmp.91 = truncate tmp.90
            *tmp.87 = tmp.91
            tmp.92 = truncate tmp.91
            tmp.93 = &arr.0
            tmp.94 = sign_extend 0
            tmp.95 = add_ptr(tmp.93, index=tmp.94, scale=1)
            tmp.96 = *tmp.95
            tmp.97 = sign_extend tmp.96
            tmp.99 = - 71
            tmp.98 = tmp.97 != tmp.99
            if !tmp.98 jump end_if_0
            return 1
        
          end_if_0:
            tmp.100 = &arr.0
            tmp.101 = sign_extend 1
            tmp.102 = add_ptr(tmp.100, index=tmp.101, scale=1)
            tmp.103 = *tmp.102
            tmp.104 = sign_extend tmp.103
            tmp.106 = - 1
            tmp.105 = tmp.104 != tmp.106
            if !tmp.105 jump end_if_2
            return 2
        
          end_if_2:
            tmp.107 = &arr.0
            tmp.108 = sign_extend 2
            tmp.109 = add_ptr(tmp.107, index=tmp.108, scale=1)
            tmp.110 = *tmp.109
            tmp.111 = sign_extend tmp.110
            tmp.113 = - 16
            tmp.112 = tmp.111 != tmp.113
            if !tmp.112 jump end_if_4
            return 3
        
          end_if_4:
            tmp.114 = &arr.0
            tmp.115 = sign_extend 3
            tmp.116 = add_ptr(tmp.114, index=tmp.115, scale=1)
            tmp.117 = *tmp.116
            tmp.118 = sign_extend tmp.117
            tmp.120 = - 128
            tmp.119 = tmp.118 != tmp.120
            if !tmp.119 jump end_if_6
            return 4
        
          end_if_6:
            tmp.121 = &arr.0
            tmp.122 = sign_extend 4
            tmp.123 = add_ptr(tmp.121, index=tmp.122, scale=1)
            tmp.124 = *tmp.123
            tmp.125 = sign_extend tmp.124
            tmp.126 = tmp.125 != 0
            if !tmp.126 jump end_if_8
            return 5
        
          end_if_8:
            tmp.127 = &u_arr.1
            tmp.128 = sign_extend 0
            tmp.129 = add_ptr(tmp.127, index=tmp.128, scale=1)
            tmp.130 = *tmp.129
            tmp.131 = zero_extend tmp.130
            tmp.132 = tmp.131 != 168
            if !tmp.132 jump end_if_10
            return 6
        
          end_if_10:
            tmp.133 = &u_arr.1
            tmp.134 = sign_extend 1
            tmp.135 = add_ptr(tmp.133, index=tmp.134, scale=1)
            tmp.136 = *tmp.135
            tmp.137 = zero_extend tmp.136
            tmp.138 = tmp.137 != 251
            if !tmp.138 jump end_if_12
            return 7
        
          end_if_12:
            tmp.139 = &u_arr.1
            tmp.140 = sign_extend 2
            tmp.141 = add_ptr(tmp.139, index=tmp.140, scale=1)
            tmp.142 = *tmp.141
            tmp.143 = zero_extend tmp.142
            tmp.144 = tmp.143 != 0
            if !tmp.144 jump end_if_14
            return 8
        
          end_if_14:
            tmp.145 = &u_arr.1
            tmp.146 = sign_extend 3
            tmp.147 = add_ptr(tmp.145, index=tmp.146, scale=1)
            tmp.148 = *tmp.147
            tmp.149 = zero_extend tmp.148
            tmp.150 = tmp.149 != 0
            if !tmp.150 jump end_if_16
            return 9
        
          end_if_16:
            return 0
            return 0
        }
        static x.2: Long = 32L
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_extra_credit_incr_decr_chars() {
    let src = r#"
        
        int main(void) {
            static char chars[5] = {123, 124, 125, 126, 127};
            if (chars[0]++ != 123) {
                return 1;
            }
            if (chars[1]-- != 124) {
                return 2;
            }
            if (++chars[2] != 126) {
                return 3;
            }
            if (--chars[3] != 125) {
                return 4;
            }
            if (++chars[4] != -128) {
                return 5;
            }
            if (chars[0] != 124) {
                return 6;
            }
            if (chars[1] != 123) {
                return 7;
            }
            if (chars[2] != 126) {
                return 8;
            }
            if (chars[3] != 125) {
                return 9;
            }
            if (chars[4] != -128) {
                return 10;
            }
            signed char c = -128;
            c--;
            if (c != 127) {
                return 11;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &chars.0
            tmp.1 = sign_extend 0
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=1)
            tmp.3 = *tmp.2
            tmp.4 = tmp.3
            tmp.5 = inc tmp.3
            *tmp.2 = tmp.5
            tmp.6 = sign_extend tmp.4
            tmp.7 = tmp.6 != 123
            if !tmp.7 jump end_if_0
            return 1
        
          end_if_0:
            tmp.8 = &chars.0
            tmp.9 = sign_extend 1
            tmp.10 = add_ptr(tmp.8, index=tmp.9, scale=1)
            tmp.11 = *tmp.10
            tmp.12 = tmp.11
            tmp.13 = dec tmp.11
            *tmp.10 = tmp.13
            tmp.14 = sign_extend tmp.12
            tmp.15 = tmp.14 != 124
            if !tmp.15 jump end_if_2
            return 2
        
          end_if_2:
            tmp.16 = &chars.0
            tmp.17 = sign_extend 2
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=1)
            tmp.19 = *tmp.18
            tmp.20 = inc tmp.19
            *tmp.18 = tmp.20
            tmp.21 = sign_extend tmp.20
            tmp.22 = tmp.21 != 126
            if !tmp.22 jump end_if_4
            return 3
        
          end_if_4:
            tmp.23 = &chars.0
            tmp.24 = sign_extend 3
            tmp.25 = add_ptr(tmp.23, index=tmp.24, scale=1)
            tmp.26 = *tmp.25
            tmp.27 = dec tmp.26
            *tmp.25 = tmp.27
            tmp.28 = sign_extend tmp.27
            tmp.29 = tmp.28 != 125
            if !tmp.29 jump end_if_6
            return 4
        
          end_if_6:
            tmp.30 = &chars.0
            tmp.31 = sign_extend 4
            tmp.32 = add_ptr(tmp.30, index=tmp.31, scale=1)
            tmp.33 = *tmp.32
            tmp.34 = inc tmp.33
            *tmp.32 = tmp.34
            tmp.35 = sign_extend tmp.34
            tmp.37 = - 128
            tmp.36 = tmp.35 != tmp.37
            if !tmp.36 jump end_if_8
            return 5
        
          end_if_8:
            tmp.38 = &chars.0
            tmp.39 = sign_extend 0
            tmp.40 = add_ptr(tmp.38, index=tmp.39, scale=1)
            tmp.41 = *tmp.40
            tmp.42 = sign_extend tmp.41
            tmp.43 = tmp.42 != 124
            if !tmp.43 jump end_if_10
            return 6
        
          end_if_10:
            tmp.44 = &chars.0
            tmp.45 = sign_extend 1
            tmp.46 = add_ptr(tmp.44, index=tmp.45, scale=1)
            tmp.47 = *tmp.46
            tmp.48 = sign_extend tmp.47
            tmp.49 = tmp.48 != 123
            if !tmp.49 jump end_if_12
            return 7
        
          end_if_12:
            tmp.50 = &chars.0
            tmp.51 = sign_extend 2
            tmp.52 = add_ptr(tmp.50, index=tmp.51, scale=1)
            tmp.53 = *tmp.52
            tmp.54 = sign_extend tmp.53
            tmp.55 = tmp.54 != 126
            if !tmp.55 jump end_if_14
            return 8
        
          end_if_14:
            tmp.56 = &chars.0
            tmp.57 = sign_extend 3
            tmp.58 = add_ptr(tmp.56, index=tmp.57, scale=1)
            tmp.59 = *tmp.58
            tmp.60 = sign_extend tmp.59
            tmp.61 = tmp.60 != 125
            if !tmp.61 jump end_if_16
            return 9
        
          end_if_16:
            tmp.62 = &chars.0
            tmp.63 = sign_extend 4
            tmp.64 = add_ptr(tmp.62, index=tmp.63, scale=1)
            tmp.65 = *tmp.64
            tmp.66 = sign_extend tmp.65
            tmp.68 = - 128
            tmp.67 = tmp.66 != tmp.68
            if !tmp.67 jump end_if_18
            return 10
        
          end_if_18:
            tmp.69 = - 128
            tmp.70 = truncate tmp.69
            c.1 = tmp.70
            tmp.71 = c.1
            tmp.72 = dec c.1
            c.1 = tmp.72
            tmp.73 = sign_extend c.1
            tmp.74 = tmp.73 != 127
            if !tmp.74 jump end_if_20
            return 11
        
          end_if_20:
            return 0
            return 0
        }
        static chars.0: Array(5,Char) = [ 123, 124, 125, 126, 127]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_extra_credit_incr_decr_unsigned_chars() {
    let src = r#"
        
        int main(void) {
            unsigned char chars[5] = {0, 2, 4, 253, 255};
            if (chars[0]--) {
                return 1;
            }
            if (chars[1]++ != 2) {
                return 2;
            }
            if (--chars[3] != 252) {
                return 3;
            }
            if (++chars[4] != 0) {
                return 4;
            }
            if (chars[0] != 255) {
                return 5;
            }
            if (chars[1] != 3) {
                return 6;
            }
            if (chars[2] != 4) {
                return 7;
            }
            if (chars[3] != 252) {
                return 8;
            }
            if (chars[4]) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = truncate 0
            chars.0[0] = tmp.0
            tmp.1 = truncate 2
            chars.0[1] = tmp.1
            tmp.2 = truncate 4
            chars.0[2] = tmp.2
            tmp.3 = truncate 253
            chars.0[3] = tmp.3
            tmp.4 = truncate 255
            chars.0[4] = tmp.4
            tmp.5 = &chars.0
            tmp.6 = sign_extend 0
            tmp.7 = add_ptr(tmp.5, index=tmp.6, scale=1)
            tmp.8 = *tmp.7
            tmp.9 = tmp.8
            tmp.10 = dec tmp.8
            *tmp.7 = tmp.10
            if !tmp.9 jump end_if_0
            return 1
        
          end_if_0:
            tmp.11 = &chars.0
            tmp.12 = sign_extend 1
            tmp.13 = add_ptr(tmp.11, index=tmp.12, scale=1)
            tmp.14 = *tmp.13
            tmp.15 = tmp.14
            tmp.16 = inc tmp.14
            *tmp.13 = tmp.16
            tmp.17 = zero_extend tmp.15
            tmp.18 = tmp.17 != 2
            if !tmp.18 jump end_if_2
            return 2
        
          end_if_2:
            tmp.19 = &chars.0
            tmp.20 = sign_extend 3
            tmp.21 = add_ptr(tmp.19, index=tmp.20, scale=1)
            tmp.22 = *tmp.21
            tmp.23 = dec tmp.22
            *tmp.21 = tmp.23
            tmp.24 = zero_extend tmp.23
            tmp.25 = tmp.24 != 252
            if !tmp.25 jump end_if_4
            return 3
        
          end_if_4:
            tmp.26 = &chars.0
            tmp.27 = sign_extend 4
            tmp.28 = add_ptr(tmp.26, index=tmp.27, scale=1)
            tmp.29 = *tmp.28
            tmp.30 = inc tmp.29
            *tmp.28 = tmp.30
            tmp.31 = zero_extend tmp.30
            tmp.32 = tmp.31 != 0
            if !tmp.32 jump end_if_6
            return 4
        
          end_if_6:
            tmp.33 = &chars.0
            tmp.34 = sign_extend 0
            tmp.35 = add_ptr(tmp.33, index=tmp.34, scale=1)
            tmp.36 = *tmp.35
            tmp.37 = zero_extend tmp.36
            tmp.38 = tmp.37 != 255
            if !tmp.38 jump end_if_8
            return 5
        
          end_if_8:
            tmp.39 = &chars.0
            tmp.40 = sign_extend 1
            tmp.41 = add_ptr(tmp.39, index=tmp.40, scale=1)
            tmp.42 = *tmp.41
            tmp.43 = zero_extend tmp.42
            tmp.44 = tmp.43 != 3
            if !tmp.44 jump end_if_10
            return 6
        
          end_if_10:
            tmp.45 = &chars.0
            tmp.46 = sign_extend 2
            tmp.47 = add_ptr(tmp.45, index=tmp.46, scale=1)
            tmp.48 = *tmp.47
            tmp.49 = zero_extend tmp.48
            tmp.50 = tmp.49 != 4
            if !tmp.50 jump end_if_12
            return 7
        
          end_if_12:
            tmp.51 = &chars.0
            tmp.52 = sign_extend 3
            tmp.53 = add_ptr(tmp.51, index=tmp.52, scale=1)
            tmp.54 = *tmp.53
            tmp.55 = zero_extend tmp.54
            tmp.56 = tmp.55 != 252
            if !tmp.56 jump end_if_14
            return 8
        
          end_if_14:
            tmp.57 = &chars.0
            tmp.58 = sign_extend 4
            tmp.59 = add_ptr(tmp.57, index=tmp.58, scale=1)
            tmp.60 = *tmp.59
            if !tmp.60 jump end_if_16
            return 9
        
          end_if_16:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_extra_credit_promote_switch_cond() {
    let src = r#"
        int main(void) {
            char c = 100;
            switch (c) {
                case 0:
                    return 1;
                case 100:
                    return 0;
                case 356:
                    return 2;
                default:
                    return 3;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = truncate 100
            c.0 = tmp.0
            tmp.1 = c.0 == 0
            if tmp.1 jump switch_0_case__1
            tmp.2 = c.0 == 100
            if tmp.2 jump switch_0_case__2
            tmp.3 = c.0 == 356
            if tmp.3 jump switch_0_case__3
            jump switch_0_default_4
            jump break_switch_0
        
          switch_0_case__1:
            return 1
        
          switch_0_case__2:
            return 0
        
          switch_0_case__3:
            return 2
        
          switch_0_default_4:
            return 3
        
          break_switch_0:
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_extra_credit_promote_switch_cond_2() {
    let src = r#"
        int main(void) {
            char c = -56;
            switch (c) {
                case 33554632:
                    return 1;
                default:
                    return 0;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = - 56
            tmp.1 = truncate tmp.0
            c.0 = tmp.1
            tmp.2 = c.0 == 33554632
            if tmp.2 jump switch_0_case__1
            jump switch_0_default_2
            jump break_switch_0
        
          switch_0_case__1:
            return 1
        
          switch_0_default_2:
            return 0
        
          break_switch_0:
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_extra_credit_switch_on_char_const() {
    let src = r#"
        
        int main(void) {
            switch ('x') {
                case 1:
                    return 1;
                case 2:
                    return 2;
                case 120:
                    return 0;
                default:
                    return -1;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = 120 == 1
            if tmp.0 jump switch_0_case__1
            tmp.1 = 120 == 2
            if tmp.1 jump switch_0_case__2
            tmp.2 = 120 == 120
            if tmp.2 jump switch_0_case__3
            jump switch_0_default_4
            jump break_switch_0
        
          switch_0_case__1:
            return 1
        
          switch_0_case__2:
            return 2
        
          switch_0_case__3:
            return 0
        
          switch_0_default_4:
            tmp.3 = - 1
            return tmp.3
        
          break_switch_0:
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_libraries_char_arguments() {
    let src = r#"
        int check_args(char a, signed char b, char c, unsigned char d, char e, char f, signed char g, char h) {
            char expected_a = 5;
            signed char expected_b = -12;
            char expected_c = 117;
            unsigned char expected_d = 254;
            char expected_e = 1;
            char expected_f = -20;
            signed char expected_g = 60;
            char expected_h = 100;
            if (expected_a != a) {
             return 1;
            }
            if (expected_b != b) {
             return 2;
            }
            if (expected_c != c) {
             return 3;
            }
            if (expected_d != d) {
             return 4;
            }
            if (expected_e != e) {
             return 5;
            }
            if (expected_f != f) {
             return 6;
            }
            if (expected_g != g) {
             return 7;
            }
            if (expected_h != h) {
             return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function check_args(a.0, b.1, c.2, d.3, e.4, f.5, g.6, h.7) { 
            tmp.0 = truncate 5
            expected_a.8 = tmp.0
            tmp.1 = - 12
            tmp.2 = truncate tmp.1
            expected_b.9 = tmp.2
            tmp.3 = truncate 117
            expected_c.10 = tmp.3
            tmp.4 = truncate 254
            expected_d.11 = tmp.4
            tmp.5 = truncate 1
            expected_e.12 = tmp.5
            tmp.6 = - 20
            tmp.7 = truncate tmp.6
            expected_f.13 = tmp.7
            tmp.8 = truncate 60
            expected_g.14 = tmp.8
            tmp.9 = truncate 100
            expected_h.15 = tmp.9
            tmp.10 = sign_extend expected_a.8
            tmp.12 = sign_extend a.0
            tmp.11 = tmp.10 != tmp.12
            if !tmp.11 jump end_if_0
            return 1
        
          end_if_0:
            tmp.13 = sign_extend expected_b.9
            tmp.15 = sign_extend b.1
            tmp.14 = tmp.13 != tmp.15
            if !tmp.14 jump end_if_2
            return 2
        
          end_if_2:
            tmp.16 = sign_extend expected_c.10
            tmp.18 = sign_extend c.2
            tmp.17 = tmp.16 != tmp.18
            if !tmp.17 jump end_if_4
            return 3
        
          end_if_4:
            tmp.19 = zero_extend expected_d.11
            tmp.21 = zero_extend d.3
            tmp.20 = tmp.19 != tmp.21
            if !tmp.20 jump end_if_6
            return 4
        
          end_if_6:
            tmp.22 = sign_extend expected_e.12
            tmp.24 = sign_extend e.4
            tmp.23 = tmp.22 != tmp.24
            if !tmp.23 jump end_if_8
            return 5
        
          end_if_8:
            tmp.25 = sign_extend expected_f.13
            tmp.27 = sign_extend f.5
            tmp.26 = tmp.25 != tmp.27
            if !tmp.26 jump end_if_10
            return 6
        
          end_if_10:
            tmp.28 = sign_extend expected_g.14
            tmp.30 = sign_extend g.6
            tmp.29 = tmp.28 != tmp.30
            if !tmp.29 jump end_if_12
            return 7
        
          end_if_12:
            tmp.31 = sign_extend expected_h.15
            tmp.33 = sign_extend h.7
            tmp.32 = tmp.31 != tmp.33
            if !tmp.32 jump end_if_14
            return 8
        
          end_if_14:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_libraries_char_arguments_client() {
    let src = r#"
        
        int check_args(char a, signed char b, char c, unsigned char d, char e, char f, signed char g, char h);
        int main(void) {
            char a = 5;
            signed char b = -12;
            char c = 117;
            unsigned char d = 254;
            char e = 1;
            char f = -20;
            signed char g = 60;
            char h = 100;
            return check_args(a, b, c, d, e, f, g, h);
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = truncate 5
            a.8 = tmp.0
            tmp.1 = - 12
            tmp.2 = truncate tmp.1
            b.9 = tmp.2
            tmp.3 = truncate 117
            c.10 = tmp.3
            tmp.4 = truncate 254
            d.11 = tmp.4
            tmp.5 = truncate 1
            e.12 = tmp.5
            tmp.6 = - 20
            tmp.7 = truncate tmp.6
            f.13 = tmp.7
            tmp.8 = truncate 60
            g.14 = tmp.8
            tmp.9 = truncate 100
            h.15 = tmp.9
            tmp.10 = check_args(a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15)
            return tmp.10
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_libraries_global_char() {
    let src = r#"
        char c = 100;
        unsigned char uc = 250;
        signed char sc = 0;
        int update_global_chars(void) {
            c = c + 10;
            uc = uc + 10;
            sc = sc - 10;
            return 0;
        }
    "#;
    let expected = r#"
        global function update_global_chars() { 
            tmp.0 = sign_extend c
            tmp.1 = tmp.0 + 10
            tmp.2 = truncate tmp.1
            c = tmp.2
            tmp.3 = zero_extend uc
            tmp.4 = tmp.3 + 10
            tmp.5 = truncate tmp.4
            uc = tmp.5
            tmp.6 = sign_extend sc
            tmp.7 = tmp.6 - 10
            tmp.8 = truncate tmp.7
            sc = tmp.8
            return 0
            return 0
        }
        static global c: Char = 100
        static global sc: Signed Char = 0
        static global uc: Unsigned Char = 250
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_libraries_global_char_client() {
    let src = r#"
        extern char c;
        extern unsigned char uc;
        extern signed char sc;
        int update_global_chars(void);
        int main(void) {
            if (c != 100) {
                return 1;
            }
            if (uc != 250) {
                return 2;
            }
            if (sc != 0) {
                return 3;
            }
            update_global_chars();
            if (c != 110) {
                return 4;
            }
            if (uc != 4) {
                return 5;
            }
            if (sc != -10) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = sign_extend c
            tmp.1 = tmp.0 != 100
            if !tmp.1 jump end_if_0
            return 1
        
          end_if_0:
            tmp.2 = zero_extend uc
            tmp.3 = tmp.2 != 250
            if !tmp.3 jump end_if_2
            return 2
        
          end_if_2:
            tmp.4 = sign_extend sc
            tmp.5 = tmp.4 != 0
            if !tmp.5 jump end_if_4
            return 3
        
          end_if_4:
            tmp.6 = update_global_chars()
            tmp.7 = sign_extend c
            tmp.8 = tmp.7 != 110
            if !tmp.8 jump end_if_6
            return 4
        
          end_if_6:
            tmp.9 = zero_extend uc
            tmp.10 = tmp.9 != 4
            if !tmp.10 jump end_if_8
            return 5
        
          end_if_8:
            tmp.11 = sign_extend sc
            tmp.13 = - 10
            tmp.12 = tmp.11 != tmp.13
            if !tmp.12 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_libraries_return_char() {
    let src = r#"
        char return_char(void) {
            return 5369233654l;
        }
        signed char return_schar(void) {
            return 5369233654l;
        }
        unsigned char return_uchar(void) {
            return 5369233654l;
        }
    "#;
    let expected = r#"
        global function return_char() { 
            tmp.0 = truncate 5369233654L
            return tmp.0
            return 0
        }
        global function return_schar() { 
            tmp.1 = truncate 5369233654L
            return tmp.1
            return 0
        }
        global function return_uchar() { 
            tmp.2 = truncate 5369233654L
            return tmp.2
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_libraries_return_char_client() {
    let src = r#"
        char return_char(void);
        signed char return_schar(void);
        unsigned char return_uchar(void);
        int main(void) {
            char char_array[3] = {121, -122, -3};
            char retval_c = return_char();
            char char_array2[3] = {-5, 88, -100};
            signed char retval_sc = return_schar();
            char char_array3[3] = {10, 11, 12};
            unsigned char retval_uc = return_uchar();
            char char_array4[2] = {-5, -6};
            if (char_array[0] != 121 || char_array[1] != -122 || char_array[2] != -3) {
                return 1;
            }
            if (retval_c != -10) {
                return 2;
            }
            if (char_array2[0] != -5 || char_array2[1] != 88 ||
                char_array2[2] != -100) {
                return 3;
            }
            if (retval_sc != -10) {
                return 4;
            }
            if (char_array3[0] != 10 || char_array3[1] != 11 || char_array3[2] != 12) {
                return 5;
            }
            if (retval_uc != 246) {
                return 6;
            }
            if (char_array4[0] != -5 || char_array4[1] != -6) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = truncate 121
            char_array.0[0] = tmp.0
            tmp.1 = - 122
            tmp.2 = truncate tmp.1
            char_array.0[1] = tmp.2
            tmp.3 = - 3
            tmp.4 = truncate tmp.3
            char_array.0[2] = tmp.4
            tmp.5 = return_char()
            retval_c.1 = tmp.5
            tmp.6 = - 5
            tmp.7 = truncate tmp.6
            char_array2.2[0] = tmp.7
            tmp.8 = truncate 88
            char_array2.2[1] = tmp.8
            tmp.9 = - 100
            tmp.10 = truncate tmp.9
            char_array2.2[2] = tmp.10
            tmp.11 = return_schar()
            retval_sc.3 = tmp.11
            tmp.12 = truncate 10
            char_array3.4[0] = tmp.12
            tmp.13 = truncate 11
            char_array3.4[1] = tmp.13
            tmp.14 = truncate 12
            char_array3.4[2] = tmp.14
            tmp.15 = return_uchar()
            retval_uc.5 = tmp.15
            tmp.16 = - 5
            tmp.17 = truncate tmp.16
            char_array4.6[0] = tmp.17
            tmp.18 = - 6
            tmp.19 = truncate tmp.18
            char_array4.6[1] = tmp.19
            tmp.20 = &char_array.0
            tmp.21 = sign_extend 0
            tmp.22 = add_ptr(tmp.20, index=tmp.21, scale=1)
            tmp.23 = *tmp.22
            tmp.24 = sign_extend tmp.23
            tmp.25 = tmp.24 != 121
            if tmp.25 jump or_true_0
            tmp.28 = &char_array.0
            tmp.29 = sign_extend 1
            tmp.30 = add_ptr(tmp.28, index=tmp.29, scale=1)
            tmp.31 = *tmp.30
            tmp.32 = sign_extend tmp.31
            tmp.34 = - 122
            tmp.33 = tmp.32 != tmp.34
            if tmp.33 jump or_true_0
            tmp.27 = 0
            jump or_end_1
        
          or_true_0:
            tmp.27 = 1
        
          or_end_1:
            if tmp.27 jump or_true_2
            tmp.37 = &char_array.0
            tmp.38 = sign_extend 2
            tmp.39 = add_ptr(tmp.37, index=tmp.38, scale=1)
            tmp.40 = *tmp.39
            tmp.41 = sign_extend tmp.40
            tmp.43 = - 3
            tmp.42 = tmp.41 != tmp.43
            if tmp.42 jump or_true_2
            tmp.36 = 0
            jump or_end_3
        
          or_true_2:
            tmp.36 = 1
        
          or_end_3:
            if !tmp.36 jump end_if_4
            return 1
        
          end_if_4:
            tmp.44 = sign_extend retval_c.1
            tmp.46 = - 10
            tmp.45 = tmp.44 != tmp.46
            if !tmp.45 jump end_if_6
            return 2
        
          end_if_6:
            tmp.47 = &char_array2.2
            tmp.48 = sign_extend 0
            tmp.49 = add_ptr(tmp.47, index=tmp.48, scale=1)
            tmp.50 = *tmp.49
            tmp.51 = sign_extend tmp.50
            tmp.53 = - 5
            tmp.52 = tmp.51 != tmp.53
            if tmp.52 jump or_true_8
            tmp.56 = &char_array2.2
            tmp.57 = sign_extend 1
            tmp.58 = add_ptr(tmp.56, index=tmp.57, scale=1)
            tmp.59 = *tmp.58
            tmp.60 = sign_extend tmp.59
            tmp.61 = tmp.60 != 88
            if tmp.61 jump or_true_8
            tmp.55 = 0
            jump or_end_9
        
          or_true_8:
            tmp.55 = 1
        
          or_end_9:
            if tmp.55 jump or_true_10
            tmp.64 = &char_array2.2
            tmp.65 = sign_extend 2
            tmp.66 = add_ptr(tmp.64, index=tmp.65, scale=1)
            tmp.67 = *tmp.66
            tmp.68 = sign_extend tmp.67
            tmp.70 = - 100
            tmp.69 = tmp.68 != tmp.70
            if tmp.69 jump or_true_10
            tmp.63 = 0
            jump or_end_11
        
          or_true_10:
            tmp.63 = 1
        
          or_end_11:
            if !tmp.63 jump end_if_12
            return 3
        
          end_if_12:
            tmp.71 = sign_extend retval_sc.3
            tmp.73 = - 10
            tmp.72 = tmp.71 != tmp.73
            if !tmp.72 jump end_if_14
            return 4
        
          end_if_14:
            tmp.74 = &char_array3.4
            tmp.75 = sign_extend 0
            tmp.76 = add_ptr(tmp.74, index=tmp.75, scale=1)
            tmp.77 = *tmp.76
            tmp.78 = sign_extend tmp.77
            tmp.79 = tmp.78 != 10
            if tmp.79 jump or_true_16
            tmp.82 = &char_array3.4
            tmp.83 = sign_extend 1
            tmp.84 = add_ptr(tmp.82, index=tmp.83, scale=1)
            tmp.85 = *tmp.84
            tmp.86 = sign_extend tmp.85
            tmp.87 = tmp.86 != 11
            if tmp.87 jump or_true_16
            tmp.81 = 0
            jump or_end_17
        
          or_true_16:
            tmp.81 = 1
        
          or_end_17:
            if tmp.81 jump or_true_18
            tmp.90 = &char_array3.4
            tmp.91 = sign_extend 2
            tmp.92 = add_ptr(tmp.90, index=tmp.91, scale=1)
            tmp.93 = *tmp.92
            tmp.94 = sign_extend tmp.93
            tmp.95 = tmp.94 != 12
            if tmp.95 jump or_true_18
            tmp.89 = 0
            jump or_end_19
        
          or_true_18:
            tmp.89 = 1
        
          or_end_19:
            if !tmp.89 jump end_if_20
            return 5
        
          end_if_20:
            tmp.96 = zero_extend retval_uc.5
            tmp.97 = tmp.96 != 246
            if !tmp.97 jump end_if_22
            return 6
        
          end_if_22:
            tmp.98 = &char_array4.6
            tmp.99 = sign_extend 0
            tmp.100 = add_ptr(tmp.98, index=tmp.99, scale=1)
            tmp.101 = *tmp.100
            tmp.102 = sign_extend tmp.101
            tmp.104 = - 5
            tmp.103 = tmp.102 != tmp.104
            if tmp.103 jump or_true_24
            tmp.107 = &char_array4.6
            tmp.108 = sign_extend 1
            tmp.109 = add_ptr(tmp.107, index=tmp.108, scale=1)
            tmp.110 = *tmp.109
            tmp.111 = sign_extend tmp.110
            tmp.113 = - 6
            tmp.112 = tmp.111 != tmp.113
            if tmp.112 jump or_true_24
            tmp.106 = 0
            jump or_end_25
        
          or_true_24:
            tmp.106 = 1
        
          or_end_25:
            if !tmp.106 jump end_if_26
            return 7
        
          end_if_26:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_initializers_adjacent_strings_in_initializer() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int main(void) {
            char multi_string[6] =
                "yes"
                "no";
            char nested_multi_string[2][3] = {
                "a"
                "b",
                "c"
                "d"};
            if (strcmp(multi_string, "yesno"))
                return 1;
            if (strcmp(nested_multi_string[0], "ab"))
                return 2;
            if (strcmp(nested_multi_string[1], "cd"))
                return 3;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            multi_string.2[0] = 121SC
            multi_string.2[1] = 101SC
            multi_string.2[2] = 115SC
            multi_string.2[3] = 110SC
            multi_string.2[4] = 111SC
            multi_string.2[5] = 0UC
            nested_multi_string.3[0] = 97SC
            nested_multi_string.3[1] = 98SC
            nested_multi_string.3[2] = 0UC
            nested_multi_string.3[3] = 99SC
            nested_multi_string.3[4] = 100SC
            nested_multi_string.3[5] = 0UC
            tmp.0 = &multi_string.2
            tmp.1 = &string.0
            tmp.2 = strcmp(tmp.0, tmp.1)
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.3 = &nested_multi_string.3
            tmp.4 = sign_extend 0
            tmp.5 = add_ptr(tmp.3, index=tmp.4, scale=3)
            tmp.6 = &string.1
            tmp.7 = strcmp(tmp.5, tmp.6)
            if !tmp.7 jump end_if_2
            return 2
        
          end_if_2:
            tmp.8 = &nested_multi_string.3
            tmp.9 = sign_extend 1
            tmp.10 = add_ptr(tmp.8, index=tmp.9, scale=3)
            tmp.11 = &string.2
            tmp.12 = strcmp(tmp.10, tmp.11)
            if !tmp.12 jump end_if_4
            return 3
        
          end_if_4:
            return 0
            return 0
        }
        constant string.0: Array(6,Char) = "yesno\0"
        constant string.1: Array(3,Char) = "ab\0"
        constant string.2: Array(3,Char) = "cd\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_initializers_array_init_special_chars() {
    let src = r#"
        
        int main(void) {
            char special[6] = "\a\b\n	";
            if (special[0] != '\a') {
                return 1;
            }
            if (special[1] != '\b') {
                return 2;
            }
            if (special[2] != '\n') {
                return 3;
            }
            if (special[3] != '\v') {
                return 4;
            }
            if (special[4] != '\f') {
                return 5;
            }
            if (special[5] != '\t') {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            special.0[0] = 7SC
            special.0[1] = 8SC
            special.0[2] = 10SC
            special.0[3] = 11SC
            special.0[4] = 12SC
            special.0[5] = 9SC
            tmp.0 = &special.0
            tmp.1 = sign_extend 0
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=1)
            tmp.3 = *tmp.2
            tmp.4 = sign_extend tmp.3
            tmp.5 = tmp.4 != 7
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = &special.0
            tmp.7 = sign_extend 1
            tmp.8 = add_ptr(tmp.6, index=tmp.7, scale=1)
            tmp.9 = *tmp.8
            tmp.10 = sign_extend tmp.9
            tmp.11 = tmp.10 != 8
            if !tmp.11 jump end_if_2
            return 2
        
          end_if_2:
            tmp.12 = &special.0
            tmp.13 = sign_extend 2
            tmp.14 = add_ptr(tmp.12, index=tmp.13, scale=1)
            tmp.15 = *tmp.14
            tmp.16 = sign_extend tmp.15
            tmp.17 = tmp.16 != 10
            if !tmp.17 jump end_if_4
            return 3
        
          end_if_4:
            tmp.18 = &special.0
            tmp.19 = sign_extend 3
            tmp.20 = add_ptr(tmp.18, index=tmp.19, scale=1)
            tmp.21 = *tmp.20
            tmp.22 = sign_extend tmp.21
            tmp.23 = tmp.22 != 11
            if !tmp.23 jump end_if_6
            return 4
        
          end_if_6:
            tmp.24 = &special.0
            tmp.25 = sign_extend 4
            tmp.26 = add_ptr(tmp.24, index=tmp.25, scale=1)
            tmp.27 = *tmp.26
            tmp.28 = sign_extend tmp.27
            tmp.29 = tmp.28 != 12
            if !tmp.29 jump end_if_8
            return 5
        
          end_if_8:
            tmp.30 = &special.0
            tmp.31 = sign_extend 5
            tmp.32 = add_ptr(tmp.30, index=tmp.31, scale=1)
            tmp.33 = *tmp.32
            tmp.34 = sign_extend tmp.33
            tmp.35 = tmp.34 != 9
            if !tmp.35 jump end_if_10
            return 6
        
          end_if_10:
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_initializers_literals_and_compound_initializers() {
    let src = r#"
        signed char static_array[3][4] = {{'a', 'b', 'c', 'd'}, "efgh", "ijk"};
        int main(void) {
            unsigned char auto_array[2][3] = {"lmn", {'o', 'p'}};
            for (int i = 0; i < 3; i = i + 1)
                for (int j = 0; j < 4; j = j + 1)
                    if (static_array[i][j] != "abcdefghijk"[i * 4 + j])
                        return 1;
            for (int i = 0; i < 2; i = i + 1)
                for (int j = 0; j < 3; j = j + 1)
                    if (auto_array[i][j] != "lmnop"[i * 3 + j])
                        return 2;
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            auto_array.0[0] = 108UC
            auto_array.0[1] = 109UC
            auto_array.0[2] = 110UC
            tmp.0 = truncate 111
            auto_array.0[3] = tmp.0
            tmp.1 = truncate 112
            auto_array.0[4] = tmp.1
            auto_array.0[5] = 0UC
            i.1 = 0
        
          start_loop_0:
            tmp.2 = i.1 < 3
            if !tmp.2 jump break_loop_0
            j.2 = 0
        
          start_loop_1:
            tmp.3 = j.2 < 4
            if !tmp.3 jump break_loop_1
            tmp.4 = &static_array
            tmp.5 = sign_extend i.1
            tmp.6 = add_ptr(tmp.4, index=tmp.5, scale=4)
            tmp.7 = sign_extend j.2
            tmp.8 = add_ptr(tmp.6, index=tmp.7, scale=1)
            tmp.9 = *tmp.8
            tmp.10 = sign_extend tmp.9
            tmp.12 = &string.0
            tmp.13 = i.1 * 4
            tmp.14 = tmp.13 + j.2
            tmp.15 = sign_extend tmp.14
            tmp.16 = add_ptr(tmp.12, index=tmp.15, scale=1)
            tmp.17 = *tmp.16
            tmp.18 = sign_extend tmp.17
            tmp.11 = tmp.10 != tmp.18
            if !tmp.11 jump end_if_0
            return 1
        
          end_if_0:
        
          continue_loop_1:
            tmp.19 = j.2 + 1
            j.2 = tmp.19
            jump start_loop_1
        
          break_loop_1:
        
          continue_loop_0:
            tmp.20 = i.1 + 1
            i.1 = tmp.20
            jump start_loop_0
        
          break_loop_0:
            i.3 = 0
        
          start_loop_2:
            tmp.21 = i.3 < 2
            if !tmp.21 jump break_loop_2
            j.4 = 0
        
          start_loop_3:
            tmp.22 = j.4 < 3
            if !tmp.22 jump break_loop_3
            tmp.23 = &auto_array.0
            tmp.24 = sign_extend i.3
            tmp.25 = add_ptr(tmp.23, index=tmp.24, scale=3)
            tmp.26 = sign_extend j.4
            tmp.27 = add_ptr(tmp.25, index=tmp.26, scale=1)
            tmp.28 = *tmp.27
            tmp.29 = zero_extend tmp.28
            tmp.31 = &string.1
            tmp.32 = i.3 * 3
            tmp.33 = tmp.32 + j.4
            tmp.34 = sign_extend tmp.33
            tmp.35 = add_ptr(tmp.31, index=tmp.34, scale=1)
            tmp.36 = *tmp.35
            tmp.37 = sign_extend tmp.36
            tmp.30 = tmp.29 != tmp.37
            if !tmp.30 jump end_if_2
            return 2
        
          end_if_2:
        
          continue_loop_3:
            tmp.38 = j.4 + 1
            j.4 = tmp.38
            jump start_loop_3
        
          break_loop_3:
        
          continue_loop_2:
            tmp.39 = i.3 + 1
            i.3 = tmp.39
            jump start_loop_2
        
          break_loop_2:
            return 0
            return 0
        }
        static global static_array: Array(3,Array(4,Signed Char)) = [ 97, 98, 99, 100, "efgh", "ijk\0", zero[1]]
        constant string.0: Array(12,Char) = "abcdefghijk\0"
        constant string.1: Array(6,Char) = "lmnop\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_initializers_partial_initialize_via_string() {
    let src = r#"
        static char static_arr[5] = "hi";
        int test_static(void) {
            return (static_arr[0] == 'h' && static_arr[1] == 'i' &&
                    !(static_arr[2] || static_arr[3] || static_arr[4]));
        }
        static signed char nested_static_arr[3][4] = {
            "", "bc"};
        int test_static_nested(void) {
            for (int i = 0; i < 3; i = i + 1)
                for (int j = 0; j < 4; j = j + 1) {
                    signed char c = nested_static_arr[i][j];
                    signed char expected = 0;
                    if (i == 1 && j == 0) {
                        expected = 'b';
                    } else if (i == 1 && j == 1) {
                        expected = 'c';
                    }
                    if (c != expected) {
                        return 0;
                    }
                }
            return 1;
        }
        int test_automatic(void) {
            unsigned char aut[4] = "ab";
            return (aut[0] == 'a' && aut[1] == 'b' && !(aut[2] || aut[3]));
        }
        int test_automatic_nested(void) {
            signed char nested_auto[2][2][4] = {{"foo"}, {"x", "yz"}};
            for (int i = 0; i < 2; i = i + 1) {
                for (int j = 0; j < 2; j = j + 1) {
                    for (int k = 0; k < 4; k = k + 1) {
                        signed char c = nested_auto[i][j][k];
                        signed char expected = 0;
                        if (i == 0 && j == 0) {
                            if (k == 0) {
                                expected = 'f';
                            } else if (k == 1 || k == 2) {
                                expected = 'o';
                            }
                        } else if (i == 1 && j == 0 && k == 0) {
                            expected = 'x';
                        } else if (i == 1 && j == 1 && k == 0) {
                            expected = 'y';
                        } else if (i == 1 && j == 1 && k == 1) {
                            expected = 'z';
                        }
                        if (c != expected) {
                            return 0;
                        }
                    }
                }
            }
            return 1;
        }
        int main(void) {
            if (!test_static()) {
                return 1;
            }
            if (!test_static_nested()) {
                return 2;
            }
            if (!test_automatic()) {
                return 3;
            }
            if (!test_automatic_nested()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function test_static() { 
            tmp.0 = &static_arr
            tmp.1 = sign_extend 0
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=1)
            tmp.3 = *tmp.2
            tmp.4 = sign_extend tmp.3
            tmp.5 = tmp.4 == 104
            if !tmp.5 jump and_false_0
            tmp.8 = &static_arr
            tmp.9 = sign_extend 1
            tmp.10 = add_ptr(tmp.8, index=tmp.9, scale=1)
            tmp.11 = *tmp.10
            tmp.12 = sign_extend tmp.11
            tmp.13 = tmp.12 == 105
            if !tmp.13 jump and_false_0
            tmp.7 = 1
            jump and_end_1
        
          and_false_0:
            tmp.7 = 0
        
          and_end_1:
            if !tmp.7 jump and_false_2
            tmp.16 = &static_arr
            tmp.17 = sign_extend 2
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=1)
            tmp.19 = *tmp.18
            if tmp.19 jump or_true_4
            tmp.22 = &static_arr
            tmp.23 = sign_extend 3
            tmp.24 = add_ptr(tmp.22, index=tmp.23, scale=1)
            tmp.25 = *tmp.24
            if tmp.25 jump or_true_4
            tmp.21 = 0
            jump or_end_5
        
          or_true_4:
            tmp.21 = 1
        
          or_end_5:
            if tmp.21 jump or_true_6
            tmp.28 = &static_arr
            tmp.29 = sign_extend 4
            tmp.30 = add_ptr(tmp.28, index=tmp.29, scale=1)
            tmp.31 = *tmp.30
            if tmp.31 jump or_true_6
            tmp.27 = 0
            jump or_end_7
        
          or_true_6:
            tmp.27 = 1
        
          or_end_7:
            tmp.32 = ! tmp.27
            if !tmp.32 jump and_false_2
            tmp.15 = 1
            jump and_end_3
        
          and_false_2:
            tmp.15 = 0
        
          and_end_3:
            return tmp.15
            return 0
        }
        global function test_static_nested() { 
            i.0 = 0
        
          start_loop_0:
            tmp.33 = i.0 < 3
            if !tmp.33 jump break_loop_0
            j.1 = 0
        
          start_loop_1:
            tmp.34 = j.1 < 4
            if !tmp.34 jump break_loop_1
            tmp.35 = &nested_static_arr
            tmp.36 = sign_extend i.0
            tmp.37 = add_ptr(tmp.35, index=tmp.36, scale=4)
            tmp.38 = sign_extend j.1
            tmp.39 = add_ptr(tmp.37, index=tmp.38, scale=1)
            tmp.40 = *tmp.39
            c.2 = tmp.40
            tmp.41 = truncate 0
            expected.3 = tmp.41
            tmp.42 = i.0 == 1
            if !tmp.42 jump and_false_8
            tmp.45 = j.1 == 0
            if !tmp.45 jump and_false_8
            tmp.44 = 1
            jump and_end_9
        
          and_false_8:
            tmp.44 = 0
        
          and_end_9:
            if !tmp.44 jump else_11
            tmp.46 = truncate 98
            expected.3 = tmp.46
            jump end_if_10
        
          else_11:
            tmp.47 = i.0 == 1
            if !tmp.47 jump and_false_12
            tmp.50 = j.1 == 1
            if !tmp.50 jump and_false_12
            tmp.49 = 1
            jump and_end_13
        
          and_false_12:
            tmp.49 = 0
        
          and_end_13:
            if !tmp.49 jump end_if_14
            tmp.51 = truncate 99
            expected.3 = tmp.51
        
          end_if_14:
        
          end_if_10:
            tmp.52 = sign_extend c.2
            tmp.54 = sign_extend expected.3
            tmp.53 = tmp.52 != tmp.54
            if !tmp.53 jump end_if_16
            return 0
        
          end_if_16:
        
          continue_loop_1:
            tmp.55 = j.1 + 1
            j.1 = tmp.55
            jump start_loop_1
        
          break_loop_1:
        
          continue_loop_0:
            tmp.56 = i.0 + 1
            i.0 = tmp.56
            jump start_loop_0
        
          break_loop_0:
            return 1
            return 0
        }
        global function test_automatic() { 
            aut.4[0] = 97UC
            aut.4[1] = 98UC
            aut.4[2] = 0UC
            tmp.57 = &aut.4
            tmp.58 = sign_extend 0
            tmp.59 = add_ptr(tmp.57, index=tmp.58, scale=1)
            tmp.60 = *tmp.59
            tmp.61 = zero_extend tmp.60
            tmp.62 = tmp.61 == 97
            if !tmp.62 jump and_false_18
            tmp.65 = &aut.4
            tmp.66 = sign_extend 1
            tmp.67 = add_ptr(tmp.65, index=tmp.66, scale=1)
            tmp.68 = *tmp.67
            tmp.69 = zero_extend tmp.68
            tmp.70 = tmp.69 == 98
            if !tmp.70 jump and_false_18
            tmp.64 = 1
            jump and_end_19
        
          and_false_18:
            tmp.64 = 0
        
          and_end_19:
            if !tmp.64 jump and_false_20
            tmp.73 = &aut.4
            tmp.74 = sign_extend 2
            tmp.75 = add_ptr(tmp.73, index=tmp.74, scale=1)
            tmp.76 = *tmp.75
            if tmp.76 jump or_true_22
            tmp.79 = &aut.4
            tmp.80 = sign_extend 3
            tmp.81 = add_ptr(tmp.79, index=tmp.80, scale=1)
            tmp.82 = *tmp.81
            if tmp.82 jump or_true_22
            tmp.78 = 0
            jump or_end_23
        
          or_true_22:
            tmp.78 = 1
        
          or_end_23:
            tmp.83 = ! tmp.78
            if !tmp.83 jump and_false_20
            tmp.72 = 1
            jump and_end_21
        
          and_false_20:
            tmp.72 = 0
        
          and_end_21:
            return tmp.72
            return 0
        }
        global function test_automatic_nested() { 
            nested_auto.5[0] = 102SC
            nested_auto.5[1] = 111SC
            nested_auto.5[2] = 111SC
            nested_auto.5[3] = 0UC
            nested_auto.5[4] = 0SC
            nested_auto.5[5] = 0SC
            nested_auto.5[6] = 0SC
            nested_auto.5[7] = 0SC
            nested_auto.5[8] = 120SC
            nested_auto.5[9] = 0UC
            nested_auto.5[12] = 121SC
            nested_auto.5[13] = 122SC
            nested_auto.5[14] = 0UC
            i.6 = 0
        
          start_loop_2:
            tmp.84 = i.6 < 2
            if !tmp.84 jump break_loop_2
            j.7 = 0
        
          start_loop_3:
            tmp.85 = j.7 < 2
            if !tmp.85 jump break_loop_3
            k.8 = 0
        
          start_loop_4:
            tmp.86 = k.8 < 4
            if !tmp.86 jump break_loop_4
            tmp.87 = &nested_auto.5
            tmp.88 = sign_extend i.6
            tmp.89 = add_ptr(tmp.87, index=tmp.88, scale=8)
            tmp.90 = sign_extend j.7
            tmp.91 = add_ptr(tmp.89, index=tmp.90, scale=4)
            tmp.92 = sign_extend k.8
            tmp.93 = add_ptr(tmp.91, index=tmp.92, scale=1)
            tmp.94 = *tmp.93
            c.9 = tmp.94
            tmp.95 = truncate 0
            expected.10 = tmp.95
            tmp.96 = i.6 == 0
            if !tmp.96 jump and_false_24
            tmp.99 = j.7 == 0
            if !tmp.99 jump and_false_24
            tmp.98 = 1
            jump and_end_25
        
          and_false_24:
            tmp.98 = 0
        
          and_end_25:
            if !tmp.98 jump else_27
            tmp.100 = k.8 == 0
            if !tmp.100 jump else_29
            tmp.101 = truncate 102
            expected.10 = tmp.101
            jump end_if_28
        
          else_29:
            tmp.102 = k.8 == 1
            if tmp.102 jump or_true_30
            tmp.105 = k.8 == 2
            if tmp.105 jump or_true_30
            tmp.104 = 0
            jump or_end_31
        
          or_true_30:
            tmp.104 = 1
        
          or_end_31:
            if !tmp.104 jump end_if_32
            tmp.106 = truncate 111
            expected.10 = tmp.106
        
          end_if_32:
        
          end_if_28:
            jump end_if_26
        
          else_27:
            tmp.107 = i.6 == 1
            if !tmp.107 jump and_false_34
            tmp.110 = j.7 == 0
            if !tmp.110 jump and_false_34
            tmp.109 = 1
            jump and_end_35
        
          and_false_34:
            tmp.109 = 0
        
          and_end_35:
            if !tmp.109 jump and_false_36
            tmp.113 = k.8 == 0
            if !tmp.113 jump and_false_36
            tmp.112 = 1
            jump and_end_37
        
          and_false_36:
            tmp.112 = 0
        
          and_end_37:
            if !tmp.112 jump else_39
            tmp.114 = truncate 120
            expected.10 = tmp.114
            jump end_if_38
        
          else_39:
            tmp.115 = i.6 == 1
            if !tmp.115 jump and_false_40
            tmp.118 = j.7 == 1
            if !tmp.118 jump and_false_40
            tmp.117 = 1
            jump and_end_41
        
          and_false_40:
            tmp.117 = 0
        
          and_end_41:
            if !tmp.117 jump and_false_42
            tmp.121 = k.8 == 0
            if !tmp.121 jump and_false_42
            tmp.120 = 1
            jump and_end_43
        
          and_false_42:
            tmp.120 = 0
        
          and_end_43:
            if !tmp.120 jump else_45
            tmp.122 = truncate 121
            expected.10 = tmp.122
            jump end_if_44
        
          else_45:
            tmp.123 = i.6 == 1
            if !tmp.123 jump and_false_46
            tmp.126 = j.7 == 1
            if !tmp.126 jump and_false_46
            tmp.125 = 1
            jump and_end_47
        
          and_false_46:
            tmp.125 = 0
        
          and_end_47:
            if !tmp.125 jump and_false_48
            tmp.129 = k.8 == 1
            if !tmp.129 jump and_false_48
            tmp.128 = 1
            jump and_end_49
        
          and_false_48:
            tmp.128 = 0
        
          and_end_49:
            if !tmp.128 jump end_if_50
            tmp.130 = truncate 122
            expected.10 = tmp.130
        
          end_if_50:
        
          end_if_44:
        
          end_if_38:
        
          end_if_26:
            tmp.131 = sign_extend c.9
            tmp.133 = sign_extend expected.10
            tmp.132 = tmp.131 != tmp.133
            if !tmp.132 jump end_if_52
            return 0
        
          end_if_52:
        
          continue_loop_4:
            tmp.134 = k.8 + 1
            k.8 = tmp.134
            jump start_loop_4
        
          break_loop_4:
        
          continue_loop_3:
            tmp.135 = j.7 + 1
            j.7 = tmp.135
            jump start_loop_3
        
          break_loop_3:
        
          continue_loop_2:
            tmp.136 = i.6 + 1
            i.6 = tmp.136
            jump start_loop_2
        
          break_loop_2:
            return 1
            return 0
        }
        global function main() { 
            tmp.137 = test_static()
            tmp.138 = ! tmp.137
            if !tmp.138 jump end_if_54
            return 1
        
          end_if_54:
            tmp.139 = test_static_nested()
            tmp.140 = ! tmp.139
            if !tmp.140 jump end_if_56
            return 2
        
          end_if_56:
            tmp.141 = test_automatic()
            tmp.142 = ! tmp.141
            if !tmp.142 jump end_if_58
            return 3
        
          end_if_58:
            tmp.143 = test_automatic_nested()
            tmp.144 = ! tmp.143
            if !tmp.144 jump end_if_60
            return 4
        
          end_if_60:
            return 0
            return 0
        }
        static nested_static_arr: Array(3,Array(4,Signed Char)) = [ "\0", zero[4], "bc\0", zero[2], zero[4]]
        static static_arr: Array(5,Char) = [ "hi\0", zero[3]]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_initializers_simple() {
    let src = r#"
        int main(void) {
            unsigned char chars[4] = "abc";
            return chars[2];
        }
    "#;
    let expected = r#"
        global function main() { 
            chars.0[0] = 97UC
            chars.0[1] = 98UC
            chars.0[2] = 99UC
            chars.0[3] = 0UC
            tmp.0 = &chars.0
            tmp.1 = sign_extend 2
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=1)
            tmp.3 = *tmp.2
            tmp.4 = zero_extend tmp.3
            return tmp.4
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_initializers_terminating_null_bytes() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int test_flat_static_with_null_byte(void) {
            static unsigned char flat[4] = "dog";
            return (flat[0] == 'd' && flat[1] == 'o' && flat[2] == 'g' && flat[3] == 0);
        }
        int test_nested_static_with_null_byte(void) {
            static char nested[2][4] = {"yes", "yup"};
            return (nested[0][0] == 'y' && nested[0][1] == 'e' && nested[0][2] == 's' &&
                    nested[0][3] == 0 && nested[1][0] == 'y' && nested[1][1] == 'u' &&
                    nested[1][2] == 'p' && nested[1][3] == 0);
        }
        int test_flat_auto_with_null_byte(void) {
            char flat_auto[2] = "x";
            return (flat_auto[0] == 'x' && flat_auto[1] == 0);
        }
        int test_nested_auto_with_null_byte(void) {
            char nested_auto[2][2][2] = {{"a", "b"}, {"c", "d"}};
            return (nested_auto[0][0][0] == 'a' && nested_auto[0][0][1] == 0 &&
                    nested_auto[0][1][0] == 'b' && nested_auto[0][1][1] == 0 &&
                    nested_auto[1][0][0] == 'c' && nested_auto[1][0][1] == 0 &&
                    nested_auto[1][1][0] == 'd' && nested_auto[1][1][1] == 0);
        }
        int test_flat_static_without_null_byte(void) {
            static char letters[4] = "abcd";
            return letters[0] == 'a' && letters[1] == 'b' && letters[2] == 'c' &&
                   letters[3] == 'd';
        }
        char nested[3][3] = {"yes", "no", "ok"};
        int test_nested_static_without_null_byte(void) {
            char *whole_array = (char *)nested;
            char *word1 = (char *)nested[0];
            char *word2 = (char *)nested[1];
            char *word3 = (char *)nested[2];
            return !(strcmp(whole_array, "yesno") || strcmp(word1, "yesno") ||
                     strcmp(word2, "no") || strcmp(word3, "ok"));
        }
        int test_flat_auto_without_null_byte(void) {
            int x = -1;
            char letters[4] = "abcd";
            int y = -1;
            return (x == -1 && y == -1 && letters[0] == 'a' && letters[1] == 'b' &&
                    letters[2] == 'c' && letters[3] == 'd');
        }
        int test_nested_auto_without_null_byte(void) {
            char nested[3][3] = {"yes", "no", "ok"};
            char *whole_array = (char *)nested;
            char *word1 = (char *)nested[0];
            char *word2 = (char *)nested[1];
            char *word3 = (char *)nested[2];
            return !(strcmp(whole_array, "yesno") || strcmp(word1, "yesno") ||
                     strcmp(word2, "no") || strcmp(word3, "ok"));
        }
        int main(void) {
            if (!test_flat_static_with_null_byte()) {
                return 1;
            }
            if (!test_nested_static_with_null_byte()) {
                return 2;
            }
            if (!test_flat_auto_with_null_byte()) {
                return 3;
            }
            if (!test_nested_auto_with_null_byte()) {
                return 4;
            }
            if (!test_flat_static_without_null_byte()) {
                return 5;
            }
            if (!test_nested_static_without_null_byte()) {
                return 6;
            }
            if (!test_flat_auto_without_null_byte()) {
                return 7;
            }
            if (!test_nested_auto_without_null_byte()) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function test_flat_static_with_null_byte() { 
            tmp.0 = &flat.2
            tmp.1 = sign_extend 0
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=1)
            tmp.3 = *tmp.2
            tmp.4 = zero_extend tmp.3
            tmp.5 = tmp.4 == 100
            if !tmp.5 jump and_false_0
            tmp.8 = &flat.2
            tmp.9 = sign_extend 1
            tmp.10 = add_ptr(tmp.8, index=tmp.9, scale=1)
            tmp.11 = *tmp.10
            tmp.12 = zero_extend tmp.11
            tmp.13 = tmp.12 == 111
            if !tmp.13 jump and_false_0
            tmp.7 = 1
            jump and_end_1
        
          and_false_0:
            tmp.7 = 0
        
          and_end_1:
            if !tmp.7 jump and_false_2
            tmp.16 = &flat.2
            tmp.17 = sign_extend 2
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=1)
            tmp.19 = *tmp.18
            tmp.20 = zero_extend tmp.19
            tmp.21 = tmp.20 == 103
            if !tmp.21 jump and_false_2
            tmp.15 = 1
            jump and_end_3
        
          and_false_2:
            tmp.15 = 0
        
          and_end_3:
            if !tmp.15 jump and_false_4
            tmp.24 = &flat.2
            tmp.25 = sign_extend 3
            tmp.26 = add_ptr(tmp.24, index=tmp.25, scale=1)
            tmp.27 = *tmp.26
            tmp.28 = zero_extend tmp.27
            tmp.29 = tmp.28 == 0
            if !tmp.29 jump and_false_4
            tmp.23 = 1
            jump and_end_5
        
          and_false_4:
            tmp.23 = 0
        
          and_end_5:
            return tmp.23
            return 0
        }
        global function test_nested_static_with_null_byte() { 
            tmp.30 = &nested.3
            tmp.31 = sign_extend 0
            tmp.32 = add_ptr(tmp.30, index=tmp.31, scale=4)
            tmp.33 = sign_extend 0
            tmp.34 = add_ptr(tmp.32, index=tmp.33, scale=1)
            tmp.35 = *tmp.34
            tmp.36 = sign_extend tmp.35
            tmp.37 = tmp.36 == 121
            if !tmp.37 jump and_false_6
            tmp.40 = &nested.3
            tmp.41 = sign_extend 0
            tmp.42 = add_ptr(tmp.40, index=tmp.41, scale=4)
            tmp.43 = sign_extend 1
            tmp.44 = add_ptr(tmp.42, index=tmp.43, scale=1)
            tmp.45 = *tmp.44
            tmp.46 = sign_extend tmp.45
            tmp.47 = tmp.46 == 101
            if !tmp.47 jump and_false_6
            tmp.39 = 1
            jump and_end_7
        
          and_false_6:
            tmp.39 = 0
        
          and_end_7:
            if !tmp.39 jump and_false_8
            tmp.50 = &nested.3
            tmp.51 = sign_extend 0
            tmp.52 = add_ptr(tmp.50, index=tmp.51, scale=4)
            tmp.53 = sign_extend 2
            tmp.54 = add_ptr(tmp.52, index=tmp.53, scale=1)
            tmp.55 = *tmp.54
            tmp.56 = sign_extend tmp.55
            tmp.57 = tmp.56 == 115
            if !tmp.57 jump and_false_8
            tmp.49 = 1
            jump and_end_9
        
          and_false_8:
            tmp.49 = 0
        
          and_end_9:
            if !tmp.49 jump and_false_10
            tmp.60 = &nested.3
            tmp.61 = sign_extend 0
            tmp.62 = add_ptr(tmp.60, index=tmp.61, scale=4)
            tmp.63 = sign_extend 3
            tmp.64 = add_ptr(tmp.62, index=tmp.63, scale=1)
            tmp.65 = *tmp.64
            tmp.66 = sign_extend tmp.65
            tmp.67 = tmp.66 == 0
            if !tmp.67 jump and_false_10
            tmp.59 = 1
            jump and_end_11
        
          and_false_10:
            tmp.59 = 0
        
          and_end_11:
            if !tmp.59 jump and_false_12
            tmp.70 = &nested.3
            tmp.71 = sign_extend 1
            tmp.72 = add_ptr(tmp.70, index=tmp.71, scale=4)
            tmp.73 = sign_extend 0
            tmp.74 = add_ptr(tmp.72, index=tmp.73, scale=1)
            tmp.75 = *tmp.74
            tmp.76 = sign_extend tmp.75
            tmp.77 = tmp.76 == 121
            if !tmp.77 jump and_false_12
            tmp.69 = 1
            jump and_end_13
        
          and_false_12:
            tmp.69 = 0
        
          and_end_13:
            if !tmp.69 jump and_false_14
            tmp.80 = &nested.3
            tmp.81 = sign_extend 1
            tmp.82 = add_ptr(tmp.80, index=tmp.81, scale=4)
            tmp.83 = sign_extend 1
            tmp.84 = add_ptr(tmp.82, index=tmp.83, scale=1)
            tmp.85 = *tmp.84
            tmp.86 = sign_extend tmp.85
            tmp.87 = tmp.86 == 117
            if !tmp.87 jump and_false_14
            tmp.79 = 1
            jump and_end_15
        
          and_false_14:
            tmp.79 = 0
        
          and_end_15:
            if !tmp.79 jump and_false_16
            tmp.90 = &nested.3
            tmp.91 = sign_extend 1
            tmp.92 = add_ptr(tmp.90, index=tmp.91, scale=4)
            tmp.93 = sign_extend 2
            tmp.94 = add_ptr(tmp.92, index=tmp.93, scale=1)
            tmp.95 = *tmp.94
            tmp.96 = sign_extend tmp.95
            tmp.97 = tmp.96 == 112
            if !tmp.97 jump and_false_16
            tmp.89 = 1
            jump and_end_17
        
          and_false_16:
            tmp.89 = 0
        
          and_end_17:
            if !tmp.89 jump and_false_18
            tmp.100 = &nested.3
            tmp.101 = sign_extend 1
            tmp.102 = add_ptr(tmp.100, index=tmp.101, scale=4)
            tmp.103 = sign_extend 3
            tmp.104 = add_ptr(tmp.102, index=tmp.103, scale=1)
            tmp.105 = *tmp.104
            tmp.106 = sign_extend tmp.105
            tmp.107 = tmp.106 == 0
            if !tmp.107 jump and_false_18
            tmp.99 = 1
            jump and_end_19
        
          and_false_18:
            tmp.99 = 0
        
          and_end_19:
            return tmp.99
            return 0
        }
        global function test_flat_auto_with_null_byte() { 
            flat_auto.4[0] = 120SC
            flat_auto.4[1] = 0UC
            tmp.108 = &flat_auto.4
            tmp.109 = sign_extend 0
            tmp.110 = add_ptr(tmp.108, index=tmp.109, scale=1)
            tmp.111 = *tmp.110
            tmp.112 = sign_extend tmp.111
            tmp.113 = tmp.112 == 120
            if !tmp.113 jump and_false_20
            tmp.116 = &flat_auto.4
            tmp.117 = sign_extend 1
            tmp.118 = add_ptr(tmp.116, index=tmp.117, scale=1)
            tmp.119 = *tmp.118
            tmp.120 = sign_extend tmp.119
            tmp.121 = tmp.120 == 0
            if !tmp.121 jump and_false_20
            tmp.115 = 1
            jump and_end_21
        
          and_false_20:
            tmp.115 = 0
        
          and_end_21:
            return tmp.115
            return 0
        }
        global function test_nested_auto_with_null_byte() { 
            nested_auto.5[0] = 97SC
            nested_auto.5[1] = 0UC
            nested_auto.5[2] = 98SC
            nested_auto.5[3] = 0UC
            nested_auto.5[4] = 99SC
            nested_auto.5[5] = 0UC
            nested_auto.5[6] = 100SC
            nested_auto.5[7] = 0UC
            tmp.122 = &nested_auto.5
            tmp.123 = sign_extend 0
            tmp.124 = add_ptr(tmp.122, index=tmp.123, scale=4)
            tmp.125 = sign_extend 0
            tmp.126 = add_ptr(tmp.124, index=tmp.125, scale=2)
            tmp.127 = sign_extend 0
            tmp.128 = add_ptr(tmp.126, index=tmp.127, scale=1)
            tmp.129 = *tmp.128
            tmp.130 = sign_extend tmp.129
            tmp.131 = tmp.130 == 97
            if !tmp.131 jump and_false_22
            tmp.134 = &nested_auto.5
            tmp.135 = sign_extend 0
            tmp.136 = add_ptr(tmp.134, index=tmp.135, scale=4)
            tmp.137 = sign_extend 0
            tmp.138 = add_ptr(tmp.136, index=tmp.137, scale=2)
            tmp.139 = sign_extend 1
            tmp.140 = add_ptr(tmp.138, index=tmp.139, scale=1)
            tmp.141 = *tmp.140
            tmp.142 = sign_extend tmp.141
            tmp.143 = tmp.142 == 0
            if !tmp.143 jump and_false_22
            tmp.133 = 1
            jump and_end_23
        
          and_false_22:
            tmp.133 = 0
        
          and_end_23:
            if !tmp.133 jump and_false_24
            tmp.146 = &nested_auto.5
            tmp.147 = sign_extend 0
            tmp.148 = add_ptr(tmp.146, index=tmp.147, scale=4)
            tmp.149 = sign_extend 1
            tmp.150 = add_ptr(tmp.148, index=tmp.149, scale=2)
            tmp.151 = sign_extend 0
            tmp.152 = add_ptr(tmp.150, index=tmp.151, scale=1)
            tmp.153 = *tmp.152
            tmp.154 = sign_extend tmp.153
            tmp.155 = tmp.154 == 98
            if !tmp.155 jump and_false_24
            tmp.145 = 1
            jump and_end_25
        
          and_false_24:
            tmp.145 = 0
        
          and_end_25:
            if !tmp.145 jump and_false_26
            tmp.158 = &nested_auto.5
            tmp.159 = sign_extend 0
            tmp.160 = add_ptr(tmp.158, index=tmp.159, scale=4)
            tmp.161 = sign_extend 1
            tmp.162 = add_ptr(tmp.160, index=tmp.161, scale=2)
            tmp.163 = sign_extend 1
            tmp.164 = add_ptr(tmp.162, index=tmp.163, scale=1)
            tmp.165 = *tmp.164
            tmp.166 = sign_extend tmp.165
            tmp.167 = tmp.166 == 0
            if !tmp.167 jump and_false_26
            tmp.157 = 1
            jump and_end_27
        
          and_false_26:
            tmp.157 = 0
        
          and_end_27:
            if !tmp.157 jump and_false_28
            tmp.170 = &nested_auto.5
            tmp.171 = sign_extend 1
            tmp.172 = add_ptr(tmp.170, index=tmp.171, scale=4)
            tmp.173 = sign_extend 0
            tmp.174 = add_ptr(tmp.172, index=tmp.173, scale=2)
            tmp.175 = sign_extend 0
            tmp.176 = add_ptr(tmp.174, index=tmp.175, scale=1)
            tmp.177 = *tmp.176
            tmp.178 = sign_extend tmp.177
            tmp.179 = tmp.178 == 99
            if !tmp.179 jump and_false_28
            tmp.169 = 1
            jump and_end_29
        
          and_false_28:
            tmp.169 = 0
        
          and_end_29:
            if !tmp.169 jump and_false_30
            tmp.182 = &nested_auto.5
            tmp.183 = sign_extend 1
            tmp.184 = add_ptr(tmp.182, index=tmp.183, scale=4)
            tmp.185 = sign_extend 0
            tmp.186 = add_ptr(tmp.184, index=tmp.185, scale=2)
            tmp.187 = sign_extend 1
            tmp.188 = add_ptr(tmp.186, index=tmp.187, scale=1)
            tmp.189 = *tmp.188
            tmp.190 = sign_extend tmp.189
            tmp.191 = tmp.190 == 0
            if !tmp.191 jump and_false_30
            tmp.181 = 1
            jump and_end_31
        
          and_false_30:
            tmp.181 = 0
        
          and_end_31:
            if !tmp.181 jump and_false_32
            tmp.194 = &nested_auto.5
            tmp.195 = sign_extend 1
            tmp.196 = add_ptr(tmp.194, index=tmp.195, scale=4)
            tmp.197 = sign_extend 1
            tmp.198 = add_ptr(tmp.196, index=tmp.197, scale=2)
            tmp.199 = sign_extend 0
            tmp.200 = add_ptr(tmp.198, index=tmp.199, scale=1)
            tmp.201 = *tmp.200
            tmp.202 = sign_extend tmp.201
            tmp.203 = tmp.202 == 100
            if !tmp.203 jump and_false_32
            tmp.193 = 1
            jump and_end_33
        
          and_false_32:
            tmp.193 = 0
        
          and_end_33:
            if !tmp.193 jump and_false_34
            tmp.206 = &nested_auto.5
            tmp.207 = sign_extend 1
            tmp.208 = add_ptr(tmp.206, index=tmp.207, scale=4)
            tmp.209 = sign_extend 1
            tmp.210 = add_ptr(tmp.208, index=tmp.209, scale=2)
            tmp.211 = sign_extend 1
            tmp.212 = add_ptr(tmp.210, index=tmp.211, scale=1)
            tmp.213 = *tmp.212
            tmp.214 = sign_extend tmp.213
            tmp.215 = tmp.214 == 0
            if !tmp.215 jump and_false_34
            tmp.205 = 1
            jump and_end_35
        
          and_false_34:
            tmp.205 = 0
        
          and_end_35:
            return tmp.205
            return 0
        }
        global function test_flat_static_without_null_byte() { 
            tmp.216 = &letters.6
            tmp.217 = sign_extend 0
            tmp.218 = add_ptr(tmp.216, index=tmp.217, scale=1)
            tmp.219 = *tmp.218
            tmp.220 = sign_extend tmp.219
            tmp.221 = tmp.220 == 97
            if !tmp.221 jump and_false_36
            tmp.224 = &letters.6
            tmp.225 = sign_extend 1
            tmp.226 = add_ptr(tmp.224, index=tmp.225, scale=1)
            tmp.227 = *tmp.226
            tmp.228 = sign_extend tmp.227
            tmp.229 = tmp.228 == 98
            if !tmp.229 jump and_false_36
            tmp.223 = 1
            jump and_end_37
        
          and_false_36:
            tmp.223 = 0
        
          and_end_37:
            if !tmp.223 jump and_false_38
            tmp.232 = &letters.6
            tmp.233 = sign_extend 2
            tmp.234 = add_ptr(tmp.232, index=tmp.233, scale=1)
            tmp.235 = *tmp.234
            tmp.236 = sign_extend tmp.235
            tmp.237 = tmp.236 == 99
            if !tmp.237 jump and_false_38
            tmp.231 = 1
            jump and_end_39
        
          and_false_38:
            tmp.231 = 0
        
          and_end_39:
            if !tmp.231 jump and_false_40
            tmp.240 = &letters.6
            tmp.241 = sign_extend 3
            tmp.242 = add_ptr(tmp.240, index=tmp.241, scale=1)
            tmp.243 = *tmp.242
            tmp.244 = sign_extend tmp.243
            tmp.245 = tmp.244 == 100
            if !tmp.245 jump and_false_40
            tmp.239 = 1
            jump and_end_41
        
          and_false_40:
            tmp.239 = 0
        
          and_end_41:
            return tmp.239
            return 0
        }
        global function test_nested_static_without_null_byte() { 
            tmp.246 = &nested
            tmp.247 = tmp.246
            whole_array.7 = tmp.247
            tmp.248 = &nested
            tmp.249 = sign_extend 0
            tmp.250 = add_ptr(tmp.248, index=tmp.249, scale=3)
            word1.8 = tmp.250
            tmp.251 = &nested
            tmp.252 = sign_extend 1
            tmp.253 = add_ptr(tmp.251, index=tmp.252, scale=3)
            word2.9 = tmp.253
            tmp.254 = &nested
            tmp.255 = sign_extend 2
            tmp.256 = add_ptr(tmp.254, index=tmp.255, scale=3)
            word3.10 = tmp.256
            tmp.257 = &string.0
            tmp.258 = strcmp(whole_array.7, tmp.257)
            if tmp.258 jump or_true_42
            tmp.261 = &string.0
            tmp.262 = strcmp(word1.8, tmp.261)
            if tmp.262 jump or_true_42
            tmp.260 = 0
            jump or_end_43
        
          or_true_42:
            tmp.260 = 1
        
          or_end_43:
            if tmp.260 jump or_true_44
            tmp.265 = &string.1
            tmp.266 = strcmp(word2.9, tmp.265)
            if tmp.266 jump or_true_44
            tmp.264 = 0
            jump or_end_45
        
          or_true_44:
            tmp.264 = 1
        
          or_end_45:
            if tmp.264 jump or_true_46
            tmp.269 = &string.2
            tmp.270 = strcmp(word3.10, tmp.269)
            if tmp.270 jump or_true_46
            tmp.268 = 0
            jump or_end_47
        
          or_true_46:
            tmp.268 = 1
        
          or_end_47:
            tmp.271 = ! tmp.268
            return tmp.271
            return 0
        }
        global function test_flat_auto_without_null_byte() { 
            tmp.272 = - 1
            x.11 = tmp.272
            letters.12[0] = 97SC
            letters.12[1] = 98SC
            letters.12[2] = 99SC
            letters.12[3] = 100SC
            tmp.273 = - 1
            y.13 = tmp.273
            tmp.275 = - 1
            tmp.274 = x.11 == tmp.275
            if !tmp.274 jump and_false_48
            tmp.279 = - 1
            tmp.278 = y.13 == tmp.279
            if !tmp.278 jump and_false_48
            tmp.277 = 1
            jump and_end_49
        
          and_false_48:
            tmp.277 = 0
        
          and_end_49:
            if !tmp.277 jump and_false_50
            tmp.282 = &letters.12
            tmp.283 = sign_extend 0
            tmp.284 = add_ptr(tmp.282, index=tmp.283, scale=1)
            tmp.285 = *tmp.284
            tmp.286 = sign_extend tmp.285
            tmp.287 = tmp.286 == 97
            if !tmp.287 jump and_false_50
            tmp.281 = 1
            jump and_end_51
        
          and_false_50:
            tmp.281 = 0
        
          and_end_51:
            if !tmp.281 jump and_false_52
            tmp.290 = &letters.12
            tmp.291 = sign_extend 1
            tmp.292 = add_ptr(tmp.290, index=tmp.291, scale=1)
            tmp.293 = *tmp.292
            tmp.294 = sign_extend tmp.293
            tmp.295 = tmp.294 == 98
            if !tmp.295 jump and_false_52
            tmp.289 = 1
            jump and_end_53
        
          and_false_52:
            tmp.289 = 0
        
          and_end_53:
            if !tmp.289 jump and_false_54
            tmp.298 = &letters.12
            tmp.299 = sign_extend 2
            tmp.300 = add_ptr(tmp.298, index=tmp.299, scale=1)
            tmp.301 = *tmp.300
            tmp.302 = sign_extend tmp.301
            tmp.303 = tmp.302 == 99
            if !tmp.303 jump and_false_54
            tmp.297 = 1
            jump and_end_55
        
          and_false_54:
            tmp.297 = 0
        
          and_end_55:
            if !tmp.297 jump and_false_56
            tmp.306 = &letters.12
            tmp.307 = sign_extend 3
            tmp.308 = add_ptr(tmp.306, index=tmp.307, scale=1)
            tmp.309 = *tmp.308
            tmp.310 = sign_extend tmp.309
            tmp.311 = tmp.310 == 100
            if !tmp.311 jump and_false_56
            tmp.305 = 1
            jump and_end_57
        
          and_false_56:
            tmp.305 = 0
        
          and_end_57:
            return tmp.305
            return 0
        }
        global function test_nested_auto_without_null_byte() { 
            nested.14[0] = 121SC
            nested.14[1] = 101SC
            nested.14[2] = 115SC
            nested.14[3] = 110SC
            nested.14[4] = 111SC
            nested.14[5] = 0UC
            nested.14[6] = 111SC
            nested.14[7] = 107SC
            nested.14[8] = 0UC
            tmp.312 = &nested.14
            tmp.313 = tmp.312
            whole_array.15 = tmp.313
            tmp.314 = &nested.14
            tmp.315 = sign_extend 0
            tmp.316 = add_ptr(tmp.314, index=tmp.315, scale=3)
            word1.16 = tmp.316
            tmp.317 = &nested.14
            tmp.318 = sign_extend 1
            tmp.319 = add_ptr(tmp.317, index=tmp.318, scale=3)
            word2.17 = tmp.319
            tmp.320 = &nested.14
            tmp.321 = sign_extend 2
            tmp.322 = add_ptr(tmp.320, index=tmp.321, scale=3)
            word3.18 = tmp.322
            tmp.323 = &string.0
            tmp.324 = strcmp(whole_array.15, tmp.323)
            if tmp.324 jump or_true_58
            tmp.327 = &string.0
            tmp.328 = strcmp(word1.16, tmp.327)
            if tmp.328 jump or_true_58
            tmp.326 = 0
            jump or_end_59
        
          or_true_58:
            tmp.326 = 1
        
          or_end_59:
            if tmp.326 jump or_true_60
            tmp.331 = &string.1
            tmp.332 = strcmp(word2.17, tmp.331)
            if tmp.332 jump or_true_60
            tmp.330 = 0
            jump or_end_61
        
          or_true_60:
            tmp.330 = 1
        
          or_end_61:
            if tmp.330 jump or_true_62
            tmp.335 = &string.2
            tmp.336 = strcmp(word3.18, tmp.335)
            if tmp.336 jump or_true_62
            tmp.334 = 0
            jump or_end_63
        
          or_true_62:
            tmp.334 = 1
        
          or_end_63:
            tmp.337 = ! tmp.334
            return tmp.337
            return 0
        }
        global function main() { 
            tmp.338 = test_flat_static_with_null_byte()
            tmp.339 = ! tmp.338
            if !tmp.339 jump end_if_64
            return 1
        
          end_if_64:
            tmp.340 = test_nested_static_with_null_byte()
            tmp.341 = ! tmp.340
            if !tmp.341 jump end_if_66
            return 2
        
          end_if_66:
            tmp.342 = test_flat_auto_with_null_byte()
            tmp.343 = ! tmp.342
            if !tmp.343 jump end_if_68
            return 3
        
          end_if_68:
            tmp.344 = test_nested_auto_with_null_byte()
            tmp.345 = ! tmp.344
            if !tmp.345 jump end_if_70
            return 4
        
          end_if_70:
            tmp.346 = test_flat_static_without_null_byte()
            tmp.347 = ! tmp.346
            if !tmp.347 jump end_if_72
            return 5
        
          end_if_72:
            tmp.348 = test_nested_static_without_null_byte()
            tmp.349 = ! tmp.348
            if !tmp.349 jump end_if_74
            return 6
        
          end_if_74:
            tmp.350 = test_flat_auto_without_null_byte()
            tmp.351 = ! tmp.350
            if !tmp.351 jump end_if_76
            return 7
        
          end_if_76:
            tmp.352 = test_nested_auto_without_null_byte()
            tmp.353 = ! tmp.352
            if !tmp.353 jump end_if_78
            return 8
        
          end_if_78:
            return 0
            return 0
        }
        static flat.2: Array(4,Unsigned Char) = [ "dog\0", zero[1]]
        static letters.6: Array(4,Char) = "abcd"
        static global nested: Array(3,Array(3,Char)) = [ "yes", "no\0", zero[1], "ok\0", zero[1]]
        static nested.3: Array(2,Array(4,Char)) = [ "yes\0", zero[1], "yup\0", zero[1]]
        constant string.0: Array(6,Char) = "yesno\0"
        constant string.1: Array(3,Char) = "no\0"
        constant string.2: Array(3,Char) = "ok\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_initializers_test_alignment() {
    let src = r#"
        int check_aligment(char *c) {
            unsigned long l = (unsigned long)c;
            return (l % 16 == 0);
        }
        static signed char flat_static[16] = "x";
        static unsigned char nested_static[3][4][2] = {{"a"}, {"b"}};
        int main(void) {
            char flat_auto[22];
            char nested_auto[10][3];
            if (!check_aligment((char *)flat_static)) {
                return 1;
            }
            if (!check_aligment((char *)nested_static)) {
                return 2;
            }
            if (!check_aligment((char *)flat_auto)) {
                return 3;
            }
            if (!check_aligment((char *)nested_auto)) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function check_aligment(c.0) { 
            tmp.0 = c.0
            l.1 = tmp.0
            tmp.2 = sign_extend 16
            tmp.1 = l.1 % tmp.2
            tmp.4 = sign_extend 0
            tmp.3 = tmp.1 == tmp.4
            return tmp.3
            return 0
        }
        global function main() { 
            tmp.5 = &flat_static
            tmp.6 = tmp.5
            tmp.7 = check_aligment(tmp.6)
            tmp.8 = ! tmp.7
            if !tmp.8 jump end_if_0
            return 1
        
          end_if_0:
            tmp.9 = &nested_static
            tmp.10 = tmp.9
            tmp.11 = check_aligment(tmp.10)
            tmp.12 = ! tmp.11
            if !tmp.12 jump end_if_2
            return 2
        
          end_if_2:
            tmp.13 = &flat_auto.2
            tmp.14 = check_aligment(tmp.13)
            tmp.15 = ! tmp.14
            if !tmp.15 jump end_if_4
            return 3
        
          end_if_4:
            tmp.16 = &nested_auto.3
            tmp.17 = tmp.16
            tmp.18 = check_aligment(tmp.17)
            tmp.19 = ! tmp.18
            if !tmp.19 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        static flat_static: Array(16,Signed Char) = [ "x\0", zero[15]]
        static nested_static: Array(3,Array(4,Array(2,Unsigned Char))) = [ "a\0", zero[1], zero[6], "b\0", zero[1], zero[6], zero[8]]
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_initializers_transfer_by_eightbyte() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int main(void) {
            char strings[2][13] = {"abcdefghijkl", "z"};
            if (strcmp(strings[0], "abcdefghijkl"))
                return 1;
            if (strings[1][0] != 'z')
                return 2;
            for (int i = 1; i < 13; i = i + 1) {
                if (strings[1][i])
                    return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            strings.2[0] = 97SC
            strings.2[1] = 98SC
            strings.2[2] = 99SC
            strings.2[3] = 100SC
            strings.2[4] = 101SC
            strings.2[5] = 102SC
            strings.2[6] = 103SC
            strings.2[7] = 104SC
            strings.2[8] = 105SC
            strings.2[9] = 106SC
            strings.2[10] = 107SC
            strings.2[11] = 108SC
            strings.2[12] = 0UC
            strings.2[13] = 122SC
            strings.2[14] = 0UC
            tmp.0 = &strings.2
            tmp.1 = sign_extend 0
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=13)
            tmp.3 = &string.0
            tmp.4 = strcmp(tmp.2, tmp.3)
            if !tmp.4 jump end_if_0
            return 1
        
          end_if_0:
            tmp.5 = &strings.2
            tmp.6 = sign_extend 1
            tmp.7 = add_ptr(tmp.5, index=tmp.6, scale=13)
            tmp.8 = sign_extend 0
            tmp.9 = add_ptr(tmp.7, index=tmp.8, scale=1)
            tmp.10 = *tmp.9
            tmp.11 = sign_extend tmp.10
            tmp.12 = tmp.11 != 122
            if !tmp.12 jump end_if_2
            return 2
        
          end_if_2:
            i.3 = 1
        
          start_loop_0:
            tmp.13 = i.3 < 13
            if !tmp.13 jump break_loop_0
            tmp.14 = &strings.2
            tmp.15 = sign_extend 1
            tmp.16 = add_ptr(tmp.14, index=tmp.15, scale=13)
            tmp.17 = sign_extend i.3
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=1)
            tmp.19 = *tmp.18
            if !tmp.19 jump end_if_4
            return 3
        
          end_if_4:
        
          continue_loop_0:
            tmp.20 = i.3 + 1
            i.3 = tmp.20
            jump start_loop_0
        
          break_loop_0:
            return 0
            return 0
        }
        constant string.0: Array(13,Char) = "abcdefghijkl\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_initializers_write_to_array() {
    let src = r#"
        int puts(char *s);
        int main(void) {
            char flat_arr[4] = "abc";
            puts(flat_arr);
            flat_arr[2] = 'x';
            puts(flat_arr);
            char nested_array[2][6] = {"Hello", "World"};
            puts(nested_array[0]);
            puts(nested_array[1]);
            nested_array[0][0] = 'J';
            puts(nested_array[0]);
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            flat_arr.1[0] = 97SC
            flat_arr.1[1] = 98SC
            flat_arr.1[2] = 99SC
            flat_arr.1[3] = 0UC
            tmp.0 = &flat_arr.1
            tmp.1 = puts(tmp.0)
            tmp.2 = &flat_arr.1
            tmp.3 = sign_extend 2
            tmp.4 = add_ptr(tmp.2, index=tmp.3, scale=1)
            tmp.5 = truncate 120
            *tmp.4 = tmp.5
            tmp.6 = &flat_arr.1
            tmp.7 = puts(tmp.6)
            nested_array.2[0] = 72SC
            nested_array.2[1] = 101SC
            nested_array.2[2] = 108SC
            nested_array.2[3] = 108SC
            nested_array.2[4] = 111SC
            nested_array.2[5] = 0UC
            nested_array.2[6] = 87SC
            nested_array.2[7] = 111SC
            nested_array.2[8] = 114SC
            nested_array.2[9] = 108SC
            nested_array.2[10] = 100SC
            nested_array.2[11] = 0UC
            tmp.8 = &nested_array.2
            tmp.9 = sign_extend 0
            tmp.10 = add_ptr(tmp.8, index=tmp.9, scale=6)
            tmp.11 = puts(tmp.10)
            tmp.12 = &nested_array.2
            tmp.13 = sign_extend 1
            tmp.14 = add_ptr(tmp.12, index=tmp.13, scale=6)
            tmp.15 = puts(tmp.14)
            tmp.16 = &nested_array.2
            tmp.17 = sign_extend 0
            tmp.18 = add_ptr(tmp.16, index=tmp.17, scale=6)
            tmp.19 = sign_extend 0
            tmp.20 = add_ptr(tmp.18, index=tmp.19, scale=1)
            tmp.21 = truncate 74
            *tmp.20 = tmp.21
            tmp.22 = &nested_array.2
            tmp.23 = sign_extend 0
            tmp.24 = add_ptr(tmp.22, index=tmp.23, scale=6)
            tmp.25 = puts(tmp.24)
            return 0
            return 0
        }
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_lvalues_addr_of_string() {
    let src = r#"
        int puts(char *s);
        int main(void) {
            char(*str)[16] = &"Sample\tstring!\n";
            puts(*str);
            char (*one_past_the_end)[16] = str + 1;
            char *last_byte_pointer = (char *)one_past_the_end - 1;
            if (*last_byte_pointer != 0) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &string.0
            str.1 = tmp.0
            tmp.1 = puts(str.1)
            tmp.3 = sign_extend 1
            tmp.2 = add_ptr(str.1, index=tmp.3, scale=16)
            one_past_the_end.2 = tmp.2
            tmp.4 = one_past_the_end.2
            tmp.6 = sign_extend 1
            tmp.7 = - tmp.6
            tmp.5 = add_ptr(tmp.4, index=tmp.7, scale=1)
            last_byte_pointer.3 = tmp.5
            tmp.8 = *last_byte_pointer.3
            tmp.9 = sign_extend tmp.8
            tmp.10 = tmp.9 != 0
            if !tmp.10 jump end_if_0
            return 1
        
          end_if_0:
            return 0
            return 0
        }
        constant string.0: Array(16,Char) = "Sample	string!
        \0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_lvalues_adjacent_strings() {
    let src = r#"
        int puts(char *s);
        int main(void) {
            char *strings = "Hello," " World";
            puts(strings);
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &string.0
            strings.1 = tmp.0
            tmp.1 = puts(strings.1)
            return 0
            return 0
        }
        constant string.0: Array(13,Char) = "Hello, World\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_lvalues_array_of_strings() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int main(void) {
            char *strings[4] = {"yes", "no", "maybe"};
            if (strcmp(strings[0], "yes")) {
                return 1;
            }
            if (strcmp(strings[1], "no")) {
                return 2;
            }
            if (strcmp(strings[2], "maybe")) {
                return 3;
            }
            if (strings[3]) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &string.0
            strings.2[0] = tmp.0
            tmp.1 = &string.1
            strings.2[8] = tmp.1
            tmp.2 = &string.2
            strings.2[16] = tmp.2
            strings.2[24] = 0UL
            tmp.3 = &strings.2
            tmp.4 = sign_extend 0
            tmp.5 = add_ptr(tmp.3, index=tmp.4, scale=8)
            tmp.6 = *tmp.5
            tmp.7 = &string.0
            tmp.8 = strcmp(tmp.6, tmp.7)
            if !tmp.8 jump end_if_0
            return 1
        
          end_if_0:
            tmp.9 = &strings.2
            tmp.10 = sign_extend 1
            tmp.11 = add_ptr(tmp.9, index=tmp.10, scale=8)
            tmp.12 = *tmp.11
            tmp.13 = &string.1
            tmp.14 = strcmp(tmp.12, tmp.13)
            if !tmp.14 jump end_if_2
            return 2
        
          end_if_2:
            tmp.15 = &strings.2
            tmp.16 = sign_extend 2
            tmp.17 = add_ptr(tmp.15, index=tmp.16, scale=8)
            tmp.18 = *tmp.17
            tmp.19 = &string.2
            tmp.20 = strcmp(tmp.18, tmp.19)
            if !tmp.20 jump end_if_4
            return 3
        
          end_if_4:
            tmp.21 = &strings.2
            tmp.22 = sign_extend 3
            tmp.23 = add_ptr(tmp.21, index=tmp.22, scale=8)
            tmp.24 = *tmp.23
            if !tmp.24 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        constant string.0: Array(4,Char) = "yes\0"
        constant string.1: Array(3,Char) = "no\0"
        constant string.2: Array(6,Char) = "maybe\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_lvalues_cast_string_pointer() {
    let src = r#"
        int main(void) {
            char *c = "This is a string!";
            unsigned char *uc = (unsigned char *)c;
            if (uc[3] != 's') {
                return 1;
            }
            signed char *sc = (signed char *)c;
            if (sc[3] != 's'){
                    return 2;
                }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &string.0
            c.0 = tmp.0
            tmp.1 = c.0
            uc.1 = tmp.1
            tmp.2 = sign_extend 3
            tmp.3 = add_ptr(uc.1, index=tmp.2, scale=1)
            tmp.4 = *tmp.3
            tmp.5 = zero_extend tmp.4
            tmp.6 = tmp.5 != 115
            if !tmp.6 jump end_if_0
            return 1
        
          end_if_0:
            tmp.7 = c.0
            sc.2 = tmp.7
            tmp.8 = sign_extend 3
            tmp.9 = add_ptr(sc.2, index=tmp.8, scale=1)
            tmp.10 = *tmp.9
            tmp.11 = sign_extend tmp.10
            tmp.12 = tmp.11 != 115
            if !tmp.12 jump end_if_2
            return 2
        
          end_if_2:
            return 0
            return 0
        }
        constant string.0: Array(18,Char) = "This is a string!\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_lvalues_empty_string() {
    let src = r#"
        
        int main(void) {
            char *empty = "";
            return empty[0];
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &string.0
            empty.0 = tmp.0
            tmp.1 = sign_extend 0
            tmp.2 = add_ptr(empty.0, index=tmp.1, scale=1)
            tmp.3 = *tmp.2
            tmp.4 = sign_extend tmp.3
            return tmp.4
            return 0
        }
        constant string.0: Array(1,Char) = "\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_lvalues_pointer_operations() {
    let src = r#"
        int main(void) {
            if ("abcdefg"[2] != 'c') {
                return 1;
            }
            char *ptr = "This is a string!" + 10;
            if (*ptr != 's') {
                return 2;
            }
            if (ptr[6] != '!') {
                return 3;
            }
            if (ptr[7]) {
                return 4;
            }
            if (!"Not a null pointer!") {
                return 5;
            }
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &string.0
            tmp.1 = sign_extend 2
            tmp.2 = add_ptr(tmp.0, index=tmp.1, scale=1)
            tmp.3 = *tmp.2
            tmp.4 = sign_extend tmp.3
            tmp.5 = tmp.4 != 99
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = &string.1
            tmp.8 = sign_extend 10
            tmp.7 = add_ptr(tmp.6, index=tmp.8, scale=1)
            ptr.0 = tmp.7
            tmp.9 = *ptr.0
            tmp.10 = sign_extend tmp.9
            tmp.11 = tmp.10 != 115
            if !tmp.11 jump end_if_2
            return 2
        
          end_if_2:
            tmp.12 = sign_extend 6
            tmp.13 = add_ptr(ptr.0, index=tmp.12, scale=1)
            tmp.14 = *tmp.13
            tmp.15 = sign_extend tmp.14
            tmp.16 = tmp.15 != 33
            if !tmp.16 jump end_if_4
            return 3
        
          end_if_4:
            tmp.17 = sign_extend 7
            tmp.18 = add_ptr(ptr.0, index=tmp.17, scale=1)
            tmp.19 = *tmp.18
            if !tmp.19 jump end_if_6
            return 4
        
          end_if_6:
            tmp.20 = ! string.2
            if !tmp.20 jump end_if_8
            return 5
        
          end_if_8:
            return 0
        }
        constant string.0: Array(8,Char) = "abcdefg\0"
        constant string.1: Array(18,Char) = "This is a string!\0"
        constant string.2: Array(20,Char) = "Not a null pointer!\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_lvalues_simple() {
    let src = r#"
        int main(void) {
            char *x = "Hello, World!";
            return x[2];
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &string.0
            x.0 = tmp.0
            tmp.1 = sign_extend 2
            tmp.2 = add_ptr(x.0, index=tmp.1, scale=1)
            tmp.3 = *tmp.2
            tmp.4 = sign_extend tmp.3
            return tmp.4
            return 0
        }
        constant string.0: Array(14,Char) = "Hello, World!\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_lvalues_standard_library_calls() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int puts(char *s);
        unsigned long strlen(char *s);
        int atoi(char *s);
        int main(void) {
            if (strcmp("abc", "abc")) {
                return 1;
            }
            if (strcmp("ab", "xy") >= 0) {
                return 2;
            }
            puts("Hello, World!");
            if (strlen("")) {
                return 3;
            }
            int i = atoi("10");
            if (i != 10) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &string.0
            tmp.1 = &string.0
            tmp.2 = strcmp(tmp.0, tmp.1)
            if !tmp.2 jump end_if_0
            return 1
        
          end_if_0:
            tmp.3 = &string.1
            tmp.4 = &string.2
            tmp.5 = strcmp(tmp.3, tmp.4)
            tmp.6 = tmp.5 >= 0
            if !tmp.6 jump end_if_2
            return 2
        
          end_if_2:
            tmp.7 = &string.3
            tmp.8 = puts(tmp.7)
            tmp.9 = &string.4
            tmp.10 = strlen(tmp.9)
            if !tmp.10 jump end_if_4
            return 3
        
          end_if_4:
            tmp.11 = &string.5
            tmp.12 = atoi(tmp.11)
            i.5 = tmp.12
            tmp.13 = i.5 != 10
            if !tmp.13 jump end_if_6
            return 4
        
          end_if_6:
            return 0
            return 0
        }
        constant string.0: Array(4,Char) = "abc\0"
        constant string.1: Array(3,Char) = "ab\0"
        constant string.2: Array(3,Char) = "xy\0"
        constant string.3: Array(14,Char) = "Hello, World!\0"
        constant string.4: Array(1,Char) = "\0"
        constant string.5: Array(3,Char) = "10\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_lvalues_string_special_characters() {
    let src = r#"
        int puts(char *s);
        int strcmp(char *s1, char *s2);
        int main(void) {
            char *escape_sequence = "\a\b";
            if (escape_sequence[0] != 7) {
                return 1;
            }
            if (escape_sequence[1] != 8) {
                return 2;
            }
            if (escape_sequence[2]) {
                return 3;
            }
            char *with_double_quote = "Hello\"world";
            if (with_double_quote[5] != '"') {
                return 4;
            }
            puts(with_double_quote);
            char *with_backslash = "Hello\\World";
            if (with_backslash[5] != '\\') {
                return 5;
            }
            puts(with_backslash);
            char *with_newline = "Line\nbreak!";
            if (with_newline[4] != 10) {
                return 6;
            }
            puts(with_newline);
            char *tab = "	";
            if (strcmp(tab, "\t")) {
                return 7;
            }
           puts("Testing, 123.");
            puts("^@1 _\\]");
            return 0;
        }
    "#;
    let expected = r#"
        global function main() { 
            tmp.0 = &string.0
            escape_sequence.3 = tmp.0
            tmp.1 = sign_extend 0
            tmp.2 = add_ptr(escape_sequence.3, index=tmp.1, scale=1)
            tmp.3 = *tmp.2
            tmp.4 = sign_extend tmp.3
            tmp.5 = tmp.4 != 7
            if !tmp.5 jump end_if_0
            return 1
        
          end_if_0:
            tmp.6 = sign_extend 1
            tmp.7 = add_ptr(escape_sequence.3, index=tmp.6, scale=1)
            tmp.8 = *tmp.7
            tmp.9 = sign_extend tmp.8
            tmp.10 = tmp.9 != 8
            if !tmp.10 jump end_if_2
            return 2
        
          end_if_2:
            tmp.11 = sign_extend 2
            tmp.12 = add_ptr(escape_sequence.3, index=tmp.11, scale=1)
            tmp.13 = *tmp.12
            if !tmp.13 jump end_if_4
            return 3
        
          end_if_4:
            tmp.14 = &string.1
            with_double_quote.4 = tmp.14
            tmp.15 = sign_extend 5
            tmp.16 = add_ptr(with_double_quote.4, index=tmp.15, scale=1)
            tmp.17 = *tmp.16
            tmp.18 = sign_extend tmp.17
            tmp.19 = tmp.18 != 34
            if !tmp.19 jump end_if_6
            return 4
        
          end_if_6:
            tmp.20 = puts(with_double_quote.4)
            tmp.21 = &string.2
            with_backslash.5 = tmp.21
            tmp.22 = sign_extend 5
            tmp.23 = add_ptr(with_backslash.5, index=tmp.22, scale=1)
            tmp.24 = *tmp.23
            tmp.25 = sign_extend tmp.24
            tmp.26 = tmp.25 != 92
            if !tmp.26 jump end_if_8
            return 5
        
          end_if_8:
            tmp.27 = puts(with_backslash.5)
            tmp.28 = &string.3
            with_newline.6 = tmp.28
            tmp.29 = sign_extend 4
            tmp.30 = add_ptr(with_newline.6, index=tmp.29, scale=1)
            tmp.31 = *tmp.30
            tmp.32 = sign_extend tmp.31
            tmp.33 = tmp.32 != 10
            if !tmp.33 jump end_if_10
            return 6
        
          end_if_10:
            tmp.34 = puts(with_newline.6)
            tmp.35 = &string.4
            tab.7 = tmp.35
            tmp.36 = &string.4
            tmp.37 = strcmp(tab.7, tmp.36)
            if !tmp.37 jump end_if_12
            return 7
        
          end_if_12:
            tmp.38 = &string.5
            tmp.39 = puts(tmp.38)
            tmp.40 = &string.6
            tmp.41 = puts(tmp.40)
            return 0
            return 0
        }
        constant string.0: Array(3,Char) = "\0"
        constant string.1: Array(12,Char) = "Hello"world\0"
        constant string.2: Array(12,Char) = "Hello\World\0"
        constant string.3: Array(12,Char) = "Line
        break!\0"
        constant string.4: Array(2,Char) = "	\0"
        constant string.5: Array(14,Char) = "Testing, 123.\0"
        constant string.6: Array(8,Char) = "^@1 _\]\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}

#[test]
fn test_chapter_16_valid_strings_as_lvalues_strings_in_function_calls() {
    let src = r#"
        unsigned long strlen(char *s);
        char *return_string(void) {
            return "I'm a string!";
        }
        int pass_string_args(char *s1, char *s2) {
            if (s1 == 0 || s2 == 0) {
                return 0;
            }
            if (strlen(s1) != 45) {
                return 0;
            }
            if (s1[41] != 'd' || s1[42] != 'o' || s1[43] != 'g') {
                return 0;
            }
            if (s2[0]) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            char *ptr = 0;
            ptr = return_string();
            if (!ptr)
                return 1;
            if (ptr[0] != 'I' || ptr[1] != '\'' || ptr[13]) {
                return 2;
            }
            if (!pass_string_args("The quick brown fox jumped over the lazy dog.",
                                  "")) {
                return 3;
            }
            return 0;
            char *ptr2;
            ptr2 = 1 ? ptr + 2 : ptr + 4;
            return *ptr2 == 'm';
        }
    "#;
    let expected = r#"
        global function return_string() { 
            tmp.0 = &string.0
            return tmp.0
            return 0
        }
        global function pass_string_args(s1.1, s2.2) { 
            tmp.2 = sign_extend 0
            tmp.1 = s1.1 == tmp.2
            if tmp.1 jump or_true_0
            tmp.6 = sign_extend 0
            tmp.5 = s2.2 == tmp.6
            if tmp.5 jump or_true_0
            tmp.4 = 0
            jump or_end_1
        
          or_true_0:
            tmp.4 = 1
        
          or_end_1:
            if !tmp.4 jump end_if_2
            return 0
        
          end_if_2:
            tmp.7 = strlen(s1.1)
            tmp.9 = sign_extend 45
            tmp.8 = tmp.7 != tmp.9
            if !tmp.8 jump end_if_4
            return 0
        
          end_if_4:
            tmp.10 = sign_extend 41
            tmp.11 = add_ptr(s1.1, index=tmp.10, scale=1)
            tmp.12 = *tmp.11
            tmp.13 = sign_extend tmp.12
            tmp.14 = tmp.13 != 100
            if tmp.14 jump or_true_6
            tmp.17 = sign_extend 42
            tmp.18 = add_ptr(s1.1, index=tmp.17, scale=1)
            tmp.19 = *tmp.18
            tmp.20 = sign_extend tmp.19
            tmp.21 = tmp.20 != 111
            if tmp.21 jump or_true_6
            tmp.16 = 0
            jump or_end_7
        
          or_true_6:
            tmp.16 = 1
        
          or_end_7:
            if tmp.16 jump or_true_8
            tmp.24 = sign_extend 43
            tmp.25 = add_ptr(s1.1, index=tmp.24, scale=1)
            tmp.26 = *tmp.25
            tmp.27 = sign_extend tmp.26
            tmp.28 = tmp.27 != 103
            if tmp.28 jump or_true_8
            tmp.23 = 0
            jump or_end_9
        
          or_true_8:
            tmp.23 = 1
        
          or_end_9:
            if !tmp.23 jump end_if_10
            return 0
        
          end_if_10:
            tmp.29 = sign_extend 0
            tmp.30 = add_ptr(s2.2, index=tmp.29, scale=1)
            tmp.31 = *tmp.30
            if !tmp.31 jump end_if_12
            return 0
        
          end_if_12:
            return 1
            return 0
        }
        global function main() { 
            tmp.32 = sign_extend 0
            ptr.3 = tmp.32
            tmp.33 = return_string()
            ptr.3 = tmp.33
            if !tmp.34 jump end_if_14
            return 1
        
          end_if_14:
            tmp.35 = sign_extend 0
            tmp.36 = add_ptr(ptr.3, index=tmp.35, scale=1)
            tmp.37 = *tmp.36
            tmp.38 = sign_extend tmp.37
            tmp.39 = tmp.38 != 73
            if tmp.39 jump or_true_16
            tmp.42 = sign_extend 1
            tmp.43 = add_ptr(ptr.3, index=tmp.42, scale=1)
            tmp.44 = *tmp.43
            tmp.45 = sign_extend tmp.44
            tmp.46 = tmp.45 != 39
            if tmp.46 jump or_true_16
            tmp.41 = 0
            jump or_end_17
        
          or_true_16:
            tmp.41 = 1
        
          or_end_17:
            if tmp.41 jump or_true_18
            tmp.49 = sign_extend 13
            tmp.50 = add_ptr(ptr.3, index=tmp.49, scale=1)
            tmp.51 = *tmp.50
            if tmp.51 jump or_true_18
            tmp.48 = 0
            jump or_end_19
        
          or_true_18:
            tmp.48 = 1
        
          or_end_19:
            if !tmp.48 jump end_if_20
            return 2
        
          end_if_20:
            tmp.52 = &string.1
            tmp.53 = &string.2
            tmp.54 = pass_string_args(tmp.52, tmp.53)
            tmp.55 = ! tmp.54
            if !tmp.55 jump end_if_22
            return 3
        
          end_if_22:
            return 0
            if !1 jump else_25
            tmp.58 = sign_extend 2
            tmp.57 = add_ptr(ptr.3, index=tmp.58, scale=1)
            tmp.56 = tmp.57
            jump end_if_24
        
          else_25:
            tmp.60 = sign_extend 4
            tmp.59 = add_ptr(ptr.3, index=tmp.60, scale=1)
            tmp.56 = tmp.59
        
          end_if_24:
            ptr2.4 = tmp.56
            tmp.61 = *ptr2.4
            tmp.62 = sign_extend tmp.61
            tmp.63 = tmp.62 == 109
            return tmp.63
            return 0
        }
        constant string.0: Array(14,Char) = "I'm a string!\0"
        constant string.1: Array(46,Char) = "The quick brown fox jumped over the lazy dog.\0"
        constant string.2: Array(1,Char) = "\0"
    "#;
    assert_eq!(dump_tacky(src), dedent(expected));
}
