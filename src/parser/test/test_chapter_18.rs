use super::{assert_error, assert_parse};

#[test]
fn test_invalid_parse_arrow_missing_member() {
    assert_error(
        r#"
        struct s {
            int y;
        };
        int main(void) {
            struct s *ptr = 0;
            return ptr->;
                      //^ Expected identifier, but found ';'
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_dot_invalid_member() {
    assert_error(
        r#"
        struct s {
            int y;
        };
        struct s x;
        int main(void) {
            return x.(y);
                   //^ Expected identifier, but found '('
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_dot_no_left_expr() {
    assert_error(
        r#"
        int main(void) {
            return .a;
                 //^ Expected expression, but found '.'
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_dot_operator_in_declarator() {
    assert_error(
        r#"
        struct pair {
            int a;
            int b;
        };
        int main(void) {
            struct pair x.a = 10;
                       //^ Expected ';', but found '.'
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_empty_initializer_list() {
    assert_error(
        r#"
        struct s {int a;};
        int main(void) {
            struct s foo = {};
                          //^ Expected expression, but found '}'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_case_struct_decl() {
    assert_error(
        r#"
        int main(void) {
            switch (0) {
                case 0:
                    struct s {
                  //^^^^^^ Expected statement, but found 'struct'
                        int a;
                    };
                    return 0;
            }
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_default_kw_member_name() {
    assert_error(
        r#"
        
        struct s {
            int default;
              //^^^^^^^ Expected identifier, but found 'default'
        };
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_goto_kw_struct_tag() {
    assert_error(
        r#"
        
        struct goto { int a; };
             //^^^^ Expected identifier, but found 'goto'
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_label_inside_struct_decl() {
    assert_error(
        r#"
        struct s {
            int i;
            foo : int j;
          //^^^ Expected type specifier
        };
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_labeled_struct_decl() {
    assert_error(
        r#"
        int main(void) {
        foo:
            struct s {
          //^^^^^^ Expected statement, but found 'struct'
                int a;
            };
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_misplaced_storage_class() {
    assert_error(
        r#"
        struct s {
            int a;
        };
        struct static s foo;
             //^^^^^^ Expected identifier, but found 'static'
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_double_semicolon() {
    assert_error(
        r#"
        struct s {
            int a;
            ;
          //^ Expected type specifier
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_empty_member_list() {
    assert_error(
        r#"
        struct s {};
                 //^ Expected struct field but found '}}'
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_extra_semicolon() {
    assert_error(
        r#"
        struct s {
            ;
          //^ Expected type specifier
            int a;
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_kw_wrong_order() {
    assert_error(
        r#"
        
        s struct x { int a; };
      //^ Expected type specifier
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_missing_end_semicolon() {
    assert_error(
        r#"
        struct s {
            int a;
        }
        int main(void) {
      //^^^ Expected ';', but found 'int'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_tag_kw() {
    assert_error(
        r#"
        
        struct for {
             //^^^ Expected identifier, but found 'for'
            int a;
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_two_kws() {
    assert_error(
        r#"
        struct struct s;
             //^^^^^^ Expected identifier, but found 'struct'
        int main(void) {
            return 1;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_initializer() {
    assert_error(
        r#"
        struct a {
            int member = 1;
                     //^ Expected ';', but found '='
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_is_function() {
    assert_error(
        r#"
        struct s {
            int foo(void);
              //^^^ Structs can't have fields
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_name_kw() {
    assert_error(
        r#"
        struct s {
            int return;
              //^^^^^^ Expected identifier, but found 'return'
        }
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_no_declarator() {
    assert_error(
        r#"
        struct s {
            int;
             //^ Expected identifier, but found ';'
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_no_semicolon() {
    assert_error(
        r#"
        struct s {
            int a
        };
      //^ Expected ';', but found '}'
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_no_type() {
    assert_error(
        r#"
        struct s {
            a;
          //^ Expected type specifier
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_storage_class() {
    assert_error(
        r#"
        struct y {
            static int a;
          //^^^^^^ Expected type specifier
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_var_decl_bad_tag_1() {
    assert_error(
        r#"
        int main(void) {
            struct 4 foo;
                 //^ Expected identifier, but found '4'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_var_decl_bad_tag_2() {
    assert_error(
        r#"
        struct s {
            int y;
        };
        int main(void) {
            struct(s) var;
                //^ Expected identifier, but found '('
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_var_decl_bad_type_specifier() {
    assert_error(
        r#"
        struct s;
        struct s long a;
               //^^^^ Expected identifier, but found 'long'
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_var_decl_missing_struct_kw() {
    assert_error(
        r#"
        int main(void) {
            struct x;
            x y;
            //^ Expected ';', but found 'y'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_var_decl_two_struct_kws() {
    assert_error(
        r#"
        struct s {
            int a;
        };
        struct struct s x;
             //^^^^^^ Expected identifier, but found 'struct'
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_var_decl_two_tags() {
    assert_error(
        r#"
        struct x y {
                 //^ Expected ';', but found '{'
            int a;
        };
    "#,
    );
}

#[test]
fn test_invalid_struct_tags_array_of_undeclared() {
    let src = r#"
        int main(void) {
            struct s arr[2];
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ╰── Type
                    │       ╰── Array
                    │           ├── 2
                    │           ╰── Struct [s]
                    ╰── Return
                        ╰── <12> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_cast_undeclared() {
    let src = r#"
        int main(void) {
            (struct s)0;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── <9> Cast
                    │   ├── Target
                    │   │   ╰── Struct [s]
                    │   ╰── Expression
                    │       ╰── <8> Constant Int [0]
                    ╰── Return
                        ╰── <11> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_deref_undeclared() {
    let src = r#"
        int main(void) {
            struct s *ptr = 0;
            *ptr;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── <10> Constant Int [0]
                    ├── <15> Dereference
                    │   ╰── <14> Var [ptr]
                    ╰── Return
                        ╰── <17> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_file_scope_var_type_undeclared() {
    let src = r#"
        struct s var;
    "#;
    let expected = r#"
        Program
            ╰── VarDeclaration
                ├── Name
                │   ╰── var
                ╰── Type
                    ╰── Struct [s]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_for_loop_scope() {
    let src = r#"
        int main(void) {
            for (int i = 0; i < 10; i = i + 1) {
                struct s {
                    int a;
                };
            }
            struct s x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <8> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <16>  [<]
                    │   │       ├── <13> Var [i]
                    │   │       ╰── <15> Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <25> Assign [=]
                    │   │       ├── <18> Var [i]
                    │   │       ╰── <24>  [+]
                    │   │           ├── <21> Var [i]
                    │   │           ╰── <23> Constant Int [1]
                    │   ╰── Block
                    │       ╰── Struct [s]
                    │           ╰── Field
                    │               ├── Name
                    │               │   ╰── a
                    │               ╰── Type
                    │                   ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Struct [s]
                    ╰── Return
                        ╰── <40> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_for_loop_scope_2() {
    let src = r#"
        int main(void) {
            void *ptr;
            for (;; ((struct s *)ptr)->i) {
                struct s {
                    int i;
                };
                struct s x = {1};
                ptr = &x;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ╰── Type
                    │       ╰── Pointer
                    │           ╰── Void
                    ╰── For
                        ├── Condition
                        │   ╰── <19> Arrow
                        │       ├── <17> Cast
                        │       │   ├── Target
                        │       │   │   ╰── Pointer
                        │       │   │       ╰── Struct [s]
                        │       │   ╰── Expression
                        │       │       ╰── <15> Var [ptr]
                        │       ╰── i
                        ╰── Block
                            ├── Struct [s]
                            │   ╰── Field
                            │       ├── Name
                            │       │   ╰── i
                            │       ╰── Type
                            │           ╰── Int
                            ├── VarDeclaration
                            │   ├── Name
                            │   │   ╰── x
                            │   ├── Type
                            │   │   ╰── Struct [s]
                            │   ╰── Initializer
                            │       ╰── Compound
                            │           ╰── <30> Constant Int [1]
                            ╰── <40> Assign [=]
                                ├── <35> Var [ptr]
                                ╰── <39> AddressOf
                                    ╰── <38> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_member_type_undeclared() {
    let src = r#"
        struct s {
            struct a b;
        };
    "#;
    let expected = r#"
        Program
            ╰── Struct [s]
                ╰── Field
                    ├── Name
                    │   ╰── b
                    ╰── Type
                        ╰── Struct [a]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_param_undeclared() {
    let src = r#"
        int foo(struct s x) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [foo]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── x
                │       ╰── Type
                │           ╰── Struct [s]
                ╰── Body
                    ╰── Return
                        ╰── <9> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_return_type_undeclared() {
    let src = r#"
        void exit(int status);
        struct s foo(void) {
            exit(0);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ╰── Function [foo]
                ╰── Body
                    ╰── <16> FunctionCall [exit]
                        ╰── <15> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_sizeof_undeclared() {
    let src = r#"
        int main(void) {
            return sizeof(struct c);
        }
        struct c {
            int x;
        };
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <8> SizeOfType
            │               ╰── Struct [c]
            ╰── Struct [c]
                ╰── Field
                    ├── Name
                    │   ╰── x
                    ╰── Type
                        ╰── Int
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_var_type_undeclared() {
    let src = r#"
        int main(void) {
            struct s var;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── var
                    │   ╰── Type
                    │       ╰── Struct [s]
                    ╰── Return
                        ╰── <10> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_bitwise_op_structure() {
    let src = r#"
        
        struct s {int i;};
        int main(void) {
            struct s x = {100};
            int i = 1000;
            x & i;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [100]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <22> Constant Int [1000]
                    ├── <30>  [&]
                    │   ├── <26> Var [x]
                    │   ╰── <29> Var [i]
                    ╰── Return
                        ╰── <32> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_compound_assign_struct_rval() {
    let src = r#"
        
        struct s { int i; };
        int main(void) {
            int i = 100;
            struct s x = { 100 };
            i += x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <14> Constant Int [100]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <21> Constant Int [100]
                    ├── <30> Assign [+=]
                    │   ├── <26> Var [i]
                    │   ╰── <29> Var [x]
                    ╰── Return
                        ╰── <32> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_compound_assign_to_nested_struct() {
    let src = r#"
        struct inner {
            int i;
        };
        struct outer {
            struct inner s;
        };
        int main(void) {
            struct outer x = {{1}};
            x.s *= 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <22> Constant Int [1]
                    ├── <33> Assign [*=]
                    │   ├── <30> Dot
                    │   │   ├── <28> Var [x]
                    │   │   ╰── s
                    │   ╰── <32> Constant Int [10]
                    ╰── Return
                        ╰── <35> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_compound_assign_to_struct() {
    let src = r#"
        
        struct s { int i; };
        int main(void) {
            struct s x = {10};
            x += 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [10]
                    ├── <23> Assign [+=]
                    │   ├── <20> Var [x]
                    │   ╰── <22> Constant Int [10]
                    ╰── Return
                        ╰── <25> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_duplicate_struct_types_after_label() {
    let src = r#"
        int main(void) {
            struct s {
                int a;
            };
        foo:;
            struct s {
                int b;
            };
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ├── Label [foo]
                    │   ╰── Empty
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── b
                    │       ╰── Type
                    │           ╰── Int
                    ╰── Return
                        ╰── <20> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_postfix_decr_struct_arrow() {
    let src = r#"
        
        struct inner {int i;};
        struct outer{struct inner s;};
        int main(void) {
            struct outer my_struct = {{1}};
            struct outer *ptr = &my_struct;
            ptr->s--;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <22> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── <34> AddressOf
                    │           ╰── <33> Var [my_struct]
                    ├── <42> Postfix [--]
                    │   ╰── <40> Arrow
                    │       ├── <38> Var [ptr]
                    │       ╰── s
                    ╰── Return
                        ╰── <44> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_postfix_incr_struct() {
    let src = r#"
        
        struct s {
            int i;
        };
        int main(void) {
            struct s my_struct = {1};
            my_struct++;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ├── <22> Postfix [++]
                    │   ╰── <20> Var [my_struct]
                    ╰── Return
                        ╰── <24> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_prefix_decr_struct() {
    let src = r#"
        
        struct s {
            int i;
        };
        int main(void) {
            struct s my_struct = {1};
            --my_struct;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ├── <22> Unary [--]
                    │   ╰── <21> Var [my_struct]
                    ╰── Return
                        ╰── <24> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_prefix_incr_nested_struct() {
    let src = r#"
        
        struct inner {
            int i;
        };
        struct outer {
            struct inner s;
        };
        int main(void) {
            struct outer x = {{1}};
            ++x.s;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <22> Constant Int [1]
                    ├── <32> Unary [++]
                    │   ╰── <31> Dot
                    │       ├── <29> Var [x]
                    │       ╰── s
                    ╰── Return
                        ╰── <34> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_switch_on_struct() {
    let src = r#"
        
        struct s {
            int i;
        };
        int main(void) {
            struct s x = {1};
            switch (x) {
                case 1:
                    return 0;
                default:
                    return 1;
            }
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ╰── Switch
                        ├── Expression
                        │   ╰── <20> Var [x]
                        ╰── Block
                            ├── Case [1]
                            │   ╰── Return
                            │       ╰── <22> Constant Int [0]
                            ╰── Default
                                ╰── Return
                                    ╰── <25> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_assign_different_pointer_type() {
    let src = r#"
        struct s1;
        struct s2;
        int main(void) {
            struct s1 *p1 = 0;
            struct s2 *p2 = 0;
            p2 = p1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s1]
            ├── Struct [s2]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── p1
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s1]
                    │   ╰── Initializer
                    │       ╰── <14> Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── p2
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s2]
                    │   ╰── Initializer
                    │       ╰── <22> Constant Int [0]
                    ├── <30> Assign [=]
                    │   ├── <26> Var [p2]
                    │   ╰── <29> Var [p1]
                    ╰── Return
                        ╰── <32> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_assign_different_struct_type() {
    let src = r#"
        struct s1 {
            int field;
        };
        struct s2 {
            int field;
        };
        int main(void) {
            struct s1 a = {1} ;
            struct s2 b;
            b = a;
            return b.field;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── field
            │       ╰── Type
            │           ╰── Int
            ├── Struct [s2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── field
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Struct [s1]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <21> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ╰── Type
                    │       ╰── Struct [s2]
                    ├── <35> Assign [=]
                    │   ├── <31> Var [b]
                    │   ╰── <34> Var [a]
                    ╰── Return
                        ╰── <40> Dot
                            ├── <38> Var [b]
                            ╰── field
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_branch_mismatch() {
    let src = r#"
        struct s1 {
          int a;
        };
        struct s2 {
          int b;
        };
        int main(void) {
          struct s1 x = {1};
          struct s2 y = {2};
          1 ? x : y;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── Struct [s2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s1]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <21> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Struct [s2]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <29> Constant Int [2]
                    ╰── <38> Conditional [?]
                        ├── <33> Constant Int [1]
                        ├── Then
                        │   ╰── <35> Var [x]
                        ╰── Else
                            ╰── <37> Var [y]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_branch_mismatch_2() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s x = {1};
            1 ? x : (void) 2;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ╰── <26> Conditional [?]
                        ├── <19> Constant Int [1]
                        ├── Then
                        │   ╰── <21> Var [x]
                        ╰── Else
                            ╰── <25> Cast
                                ├── Target
                                │   ╰── Void
                                ╰── Expression
                                    ╰── <24> Constant Int [2]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_compare_different_struct_pointers() {
    let src = r#"
        struct s1;
        struct s2;
        struct s1 *get_s1_ptr(void);
        struct s2 *get_s2_ptr(void);
        int main(void) {
          struct s1 *s1_ptr = get_s1_ptr();
          struct s2 *s2_ptr = get_s2_ptr();
          return s1_ptr == s2_ptr;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s1]
            ├── Struct [s2]
            ├── Function [get_s1_ptr]
            ├── Function [get_s2_ptr]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s1_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s1]
                    │   ╰── Initializer
                    │       ╰── <29> FunctionCall [get_s1_ptr]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s2_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s2]
                    │   ╰── Initializer
                    │       ╰── <38> FunctionCall [get_s2_ptr]
                    ╰── Return
                        ╰── <46>  [==]
                            ├── <42> Var [s1_ptr]
                            ╰── <45> Var [s2_ptr]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_return_wrong_struct_type() {
    let src = r#"
        struct one {
          int x;
          int y;
        };
        struct two {
          int a;
          int b;
        };
        struct one return_struct(void) {
            struct two retval = {1, 2};
            return retval;
        }
        int main(void) {
            return return_struct().x;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [one]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Struct [two]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Function [return_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [two]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <30> Constant Int [1]
            │       │           ╰── <32> Constant Int [2]
            │       ╰── Return
            │           ╰── <37> Var [retval]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <48> Dot
                            ├── <46> FunctionCall [return_struct]
                            ╰── x
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_struct_param_mismatch() {
    let src = r#"
        struct one {
          int x;
          int y;
        };
        struct two {
          int a;
          int b;
        };
        int take_struct_param(struct one param) {
            return param.x;
        }
        int main(void) {
            struct two arg = {1, 2};
            return take_struct_param(arg);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [one]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Struct [two]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Function [take_struct_param]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── param
            │   │       ╰── Type
            │   │           ╰── Struct [one]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <32> Dot
            │               ├── <30> Var [param]
            │               ╰── x
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arg
                    │   ├── Type
                    │   │   ╰── Struct [two]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <44> Constant Int [1]
                    │           ╰── <46> Constant Int [2]
                    ╰── Return
                        ╰── <53> FunctionCall [take_struct_param]
                            ╰── <52> Var [arg]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_struct_pointer_param_mismatch() {
    let src = r#"
        struct s1 {
            int a;
        };
        struct s2 {
            int a;
        };
        int get_a(struct s1 *ptr) {
            return ptr->a;
        }
        int main(void) {
            struct s2 arg = {1};
            return get_a(&arg);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── Struct [s2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── Function [get_a]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [s1]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <25> Arrow
            │               ├── <23> Var [ptr]
            │               ╰── a
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arg
                    │   ├── Type
                    │   │   ╰── Struct [s2]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <37> Constant Int [1]
                    ╰── Return
                        ╰── <45> FunctionCall [get_a]
                            ╰── <44> AddressOf
                                ╰── <43> Var [arg]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_compound_initializer_too_long() {
    let src = r#"
        struct pair {
            int a;
            int b;
        };
        int main(void) {
            struct pair p = {1, 2, 3};
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── p
                    │   ├── Type
                    │   │   ╰── Struct [pair]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <19> Constant Int [1]
                    │           ├── <21> Constant Int [2]
                    │           ╰── <23> Constant Int [3]
                    ╰── Return
                        ╰── <27> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_init_struct_with_string() {
    let src = r#"
        struct chars {
            char a;
            char b;
            char c;
            char null;
        };
        int main(void) {
            struct chars my_chars = "abc";
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [chars]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── null
            │       ╰── Type
            │           ╰── Char
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_chars
                    │   ├── Type
                    │   │   ╰── Struct [chars]
                    │   ╰── Initializer
                    │       ╰── <27> "abc"
                    ╰── Return
                        ╰── <30> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_initialize_nested_static_struct_member_wrong_type() {
    let src = r#"
        struct s {
          double d;
          void *arr[3];
        };
        struct s x = {0.0, {1.0}};
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Pointer
            │                   ╰── Void
            ╰── VarDeclaration
                ├── Name
                │   ╰── x
                ├── Type
                │   ╰── Struct [s]
                ╰── Initializer
                    ╰── Compound
                        ├── <18> Constant Double [+0e0]
                        ╰── Compound
                            ╰── <20> Constant Double [+1e0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_initialize_static_struct_with_zero() {
    let src = r#"
        struct s {
            int a;
        };
        struct s x = 0;
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── VarDeclaration
                ├── Name
                │   ╰── x
                ├── Type
                │   ╰── Struct [s]
                ╰── Initializer
                    ╰── <11> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_initialize_struct_member_wrong_type() {
    let src = r#"
        struct s {
            signed char *char_ptr;
        };
        int main(void) {
            struct s x = {"It's a string"};
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── char_ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Signed Char
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> "It's a string"
                    ╰── Return
                        ╰── <20> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_initialize_struct_with_scalar() {
    let src = r#"
        int main(void) {
            struct pair {
                int x;
                int y;
            };
            struct pair p = 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [pair]
                    │   ├── Field
                    │   │   ├── Name
                    │   │   │   ╰── x
                    │   │   ╰── Type
                    │   │       ╰── Int
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── y
                    │       ╰── Type
                    │           ╰── Int
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── p
                        ├── Type
                        │   ╰── Struct [pair]
                        ╰── Initializer
                            ╰── <19> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_initialize_struct_wrong_type() {
    let src = r#"
        struct one {
          int x;
          int y;
        };
        struct two {
          int a;
          int b;
        };
        int main(void) {
          struct one x = {1, 2};
          struct two y = x;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [one]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Struct [two]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [one]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <29> Constant Int [1]
                    │           ╰── <31> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Struct [two]
                    │   ╰── Initializer
                    │       ╰── <40> Var [x]
                    ╰── Return
                        ╰── <43> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_nested_compound_initializer_too_long() {
    let src = r#"
        struct inner {
            int i;
        };
        struct outer {
            struct inner foo;
        };
        int main(void) {
            struct outer x = {{1, 2}};
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── foo
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <22> Constant Int [1]
                    │               ╰── <24> Constant Int [2]
                    ╰── Return
                        ╰── <29> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_nested_static_compound_initializer_too_long() {
    let src = r#"
        struct inner {
            int i;
        };
        struct outer {
            struct inner foo;
        };
        struct outer x = {{1, 2}};
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── foo
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── VarDeclaration
                ├── Name
                │   ╰── x
                ├── Type
                │   ╰── Struct [outer]
                ╰── Initializer
                    ╰── Compound
                        ╰── Compound
                            ├── <18> Constant Int [1]
                            ╰── <20> Constant Int [2]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_nested_struct_initializer_wrong_type() {
    let src = r#"
        struct inner {
          int a;
          int b;
        };
        struct outer {
          struct inner x;
        };
        int main(void) {
          struct outer x = {{1, 2}};
          struct outer y = {1, x};
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── x
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <26> Constant Int [1]
                    │               ╰── <28> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <37> Constant Int [1]
                    │           ╰── <40> Var [x]
                    ╰── Return
                        ╰── <44> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_non_constant_static_elem_init() {
    let src = r#"
        struct pair {
          int a;
          int b;
        };
        struct pair x = {1, 2};
        struct outer {
            double d;
            struct pair inner;
        };
        struct outer y = {1.0, x};
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [pair]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <15> Constant Int [1]
            │           ╰── <17> Constant Int [2]
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── inner
            │       ╰── Type
            │           ╰── Struct [pair]
            ╰── VarDeclaration
                ├── Name
                │   ╰── y
                ├── Type
                │   ╰── Struct [outer]
                ╰── Initializer
                    ╰── Compound
                        ├── <36> Constant Double [+1e0]
                        ╰── <39> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_non_constant_static_init() {
    let src = r#"
        struct pair {
          int a;
          int b;
        };
        struct pair x = {1, 2};
        struct pair y = x;
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [pair]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <15> Constant Int [1]
            │           ╰── <17> Constant Int [2]
            ╰── VarDeclaration
                ├── Name
                │   ╰── y
                ├── Type
                │   ╰── Struct [pair]
                ╰── Initializer
                    ╰── <26> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_static_initializer_too_long() {
    let src = r#"
        struct pair {
            int a;
            int b;
        };
        struct pair p = {1, 2, 3};
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── VarDeclaration
                ├── Name
                │   ╰── p
                ├── Type
                │   ╰── Struct [pair]
                ╰── Initializer
                    ╰── Compound
                        ├── <15> Constant Int [1]
                        ├── <17> Constant Int [2]
                        ╰── <19> Constant Int [3]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_assign_to_incomplete_var() {
    let src = r#"
        struct s;
        extern struct s x;
        extern struct s y;
        int main(void) {
          x = y;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── y
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ├── <24> Assign [=]
                    │   ├── <20> Var [x]
                    │   ╰── <23> Var [y]
                    ╰── Return
                        ╰── <26> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_cast_incomplete_struct() {
    let src = r#"
        struct s;
        extern struct s v;
        int main(void) {
          (void)v;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── v
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ├── <17> Cast
                    │   ├── Target
                    │   │   ╰── Void
                    │   ╰── Expression
                    │       ╰── <16> Var [v]
                    ╰── Return
                        ╰── <19> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_deref_incomplete_struct_pointer() {
    let src = r#"
        struct s;
        struct s *ptr = 0;
        int main(void) {
          *ptr;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── <8> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <17> Dereference
                    │   ╰── <16> Var [ptr]
                    ╰── Return
                        ╰── <19> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_arg_funcall() {
    let src = r#"
        struct s;
        void f(struct s param);
        extern struct s extern_var;
        int main(void) {
          f(extern_var);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [f]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── param
            │           ╰── Type
            │               ╰── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── extern_var
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── <25> FunctionCall [f]
                        ╰── <24> Var [extern_var]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_array_element() {
    let src = r#"
        struct s;
        struct s arr[3];
        struct s {
            int a;
            int b;
        };
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── arr
            │   ╰── Type
            │       ╰── Array
            │           ├── 3
            │           ╰── Struct [s]
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <24> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_local_var() {
    let src = r#"
        struct s;
        int main(void) {
          struct s v;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── v
                    │   ╰── Type
                    │       ╰── Struct [s]
                    ╰── Return
                        ╰── <12> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_param() {
    let src = r#"
        struct s;
        int foo(struct s x) { return 0; }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ╰── Function [foo]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── x
                │       ╰── Type
                │           ╰── Struct [s]
                ╰── Body
                    ╰── Return
                        ╰── <11> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_ptr_addition() {
    let src = r#"
        struct s;
        extern struct s *ptr;
        int main(void) {
          return ptr + 0 == ptr;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <22>  [==]
                            ├── <18>  [+]
                            │   ├── <15> Var [ptr]
                            │   ╰── <17> Constant Int [0]
                            ╰── <21> Var [ptr]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_ptr_subtraction() {
    let src = r#"
        struct s;
        extern struct s *ptr;
        int main(void) {
          return (ptr - ptr) == 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <23>  [==]
                            ├── <20>  [-]
                            │   ├── <15> Var [ptr]
                            │   ╰── <18> Var [ptr]
                            ╰── <22> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_return_type_fun_def() {
    let src = r#"
        void exit(int status);
        struct s;
        struct s return_struct_def(void) {
          exit(0);
        }
        int main(void) { return 0; }
    "#;
    let expected = r#"
        Program
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Struct [s]
            ├── Function [return_struct_def]
            │   ╰── Body
            │       ╰── <18> FunctionCall [exit]
            │           ╰── <17> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <26> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_return_type_funcall() {
    let src = r#"
        struct s;
        struct s f(void);
        int main(void) {
          f();
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [f]
            ╰── Function [main]
                ╰── Body
                    ├── <14> FunctionCall [f]
                    ╰── Return
                        ╰── <16> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_struct_conditional() {
    let src = r#"
        struct s;
        extern struct s v1;
        extern struct s v2;
        int main(void) {
          1 ? v1 : v2;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── v1
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── v2
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── <24> Conditional [?]
                        ├── <19> Constant Int [1]
                        ├── Then
                        │   ╰── <21> Var [v1]
                        ╰── Else
                            ╰── <23> Var [v2]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_struct_full_expr() {
    let src = r#"
        struct s;
        extern struct s x;
        int main(void) {
          for (x;;)
            ;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ├── For
                    │   ├── Init
                    │   │   ╰── <14> Var [x]
                    │   ╰── Empty
                    ╰── Return
                        ╰── <17> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_struct_member() {
    let src = r#"
        struct s;
        extern struct s foo;
        int main(void) {
          return foo.a;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <16> Dot
                            ├── <14> Var [foo]
                            ╰── a
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_subscript() {
    let src = r#"
        struct s;
        extern struct s *ptr;
        int main(void) { ptr[0]; }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── <17> Subscript
                        ├── <15> Var [ptr]
                        ╰── <16> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_tentative_def() {
    let src = r#"
        struct s;
        static struct s x;
        int main(void) { return 0; }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Static
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <13> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_initialize_incomplete() {
    let src = r#"
        struct s;
        extern struct s x = {1};
        int main(void) { return 0; }
        struct s {
          int a;
        };
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ├── Initializer
            │   │   ╰── Compound
            │   │       ╰── <8> Constant Int [1]
            │   ╰── Extern
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <16> Constant Int [0]
            ╰── Struct [s]
                ╰── Field
                    ├── Name
                    │   ╰── a
                    ╰── Type
                        ╰── Int
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_sizeof_incomplete() {
    let src = r#"
        struct s;
        int main(void) {
          return sizeof(struct s);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <10> SizeOfType
                            ╰── Struct [s]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_sizeof_incomplete_expr() {
    let src = r#"
        struct s;
        struct s *get_ptr(void);
        int main(void) {
            struct s *struct_ptr = get_ptr();
            return sizeof(*struct_ptr);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [get_ptr]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── struct_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── <20> FunctionCall [get_ptr]
                    ╰── Return
                        ╰── <27> SizeOfExpr
                            ╰── <26> Dereference
                                ╰── <24> Var [struct_ptr]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_lvalues_address_of_non_lvalue() {
    let src = r#"
        struct s {
          int arr[3];
          double d;
        };
        int main(void) {
          struct s x = {{1, 2, 3}, 4.0};
          struct s y = {{9, 8, 7}, 6.0};
          int *arr[3] = &((1 ? x : y).arr);
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <21> Constant Int [1]
                    │           │   ├── <23> Constant Int [2]
                    │           │   ╰── <25> Constant Int [3]
                    │           ╰── <28> Constant Double [+4e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <36> Constant Int [9]
                    │           │   ├── <38> Constant Int [8]
                    │           │   ╰── <40> Constant Int [7]
                    │           ╰── <43> Constant Double [+6e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Pointer
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── <63> AddressOf
                    │           ╰── <62> Dot
                    │               ├── <59> Conditional [?]
                    │               │   ├── <53> Constant Int [1]
                    │               │   ├── Then
                    │               │   │   ╰── <55> Var [x]
                    │               │   ╰── Else
                    │               │       ╰── <57> Var [y]
                    │               ╰── arr
                    ╰── Return
                        ╰── <66> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_lvalues_assign_nested_non_lvalue() {
    let src = r#"
        struct inner {
          int x;
          int y;
        };
        struct outer {
          int a;
          struct inner b;
        };
        struct outer return_struct(void) {
          struct outer result = {1, {2, 3}};
          return result;
        }
        int main(void) {
          return_struct().b.x = 10;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [return_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <31> Constant Int [1]
            │       │           ╰── Compound
            │       │               ├── <33> Constant Int [2]
            │       │               ╰── <35> Constant Int [3]
            │       ╰── Return
            │           ╰── <41> Var [result]
            ╰── Function [main]
                ╰── Body
                    ├── <57> Assign [=]
                    │   ├── <54> Dot
                    │   │   ├── <52> Dot
                    │   │   │   ├── <50> FunctionCall [return_struct]
                    │   │   │   ╰── b
                    │   │   ╰── x
                    │   ╰── <56> Constant Int [10]
                    ╰── Return
                        ╰── <59> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_lvalues_assign_to_array() {
    let src = r#"
        struct chars {
          char char_array[5];
        };
        int main(void) {
          struct chars x = {{1, 2, 3, 4, 5}};
          char arr[5] = {9, 8, 7, 6, 5};
          x.char_array = arr;
          return x.char_array[0];
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [chars]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── char_array
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [chars]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <17> Constant Int [1]
                    │               ├── <19> Constant Int [2]
                    │               ├── <21> Constant Int [3]
                    │               ├── <23> Constant Int [4]
                    │               ╰── <25> Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 5
                    │   │       ╰── Char
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <35> Constant Int [9]
                    │           ├── <37> Constant Int [8]
                    │           ├── <39> Constant Int [7]
                    │           ├── <41> Constant Int [6]
                    │           ╰── <43> Constant Int [5]
                    ├── <54> Assign [=]
                    │   ├── <50> Dot
                    │   │   ├── <48> Var [x]
                    │   │   ╰── char_array
                    │   ╰── <53> Var [arr]
                    ╰── Return
                        ╰── <61> Subscript
                            ├── <59> Dot
                            │   ├── <57> Var [x]
                            │   ╰── char_array
                            ╰── <60> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_lvalues_assign_to_non_lvalue() {
    let src = r#"
        struct s {
          int arr[3];
          double d;
        };
        int main(void) {
          struct s x = {{1, 2, 3}, 4.0};
          struct s y = {{9, 8, 7}, 6.0};
          (1 ? x : y).d = 0.0;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <21> Constant Int [1]
                    │           │   ├── <23> Constant Int [2]
                    │           │   ╰── <25> Constant Int [3]
                    │           ╰── <28> Constant Double [+4e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <36> Constant Int [9]
                    │           │   ├── <38> Constant Int [8]
                    │           │   ╰── <40> Constant Int [7]
                    │           ╰── <43> Constant Double [+6e0]
                    ├── <58> Assign [=]
                    │   ├── <55> Dot
                    │   │   ├── <53> Conditional [?]
                    │   │   │   ├── <47> Constant Int [1]
                    │   │   │   ├── Then
                    │   │   │   │   ╰── <49> Var [x]
                    │   │   │   ╰── Else
                    │   │   │       ╰── <51> Var [y]
                    │   │   ╰── d
                    │   ╰── <57> Constant Double [+0e0]
                    ╰── Return
                        ╰── <60> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_arrow_pointer_to_non_struct() {
    let src = r#"
        struct s {
            long l;
        };
        int main(void) {
            double d = 0.0;
            double* ptr = &d;
            return ptr->l;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <14> Constant Double [+0e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <23> AddressOf
                    │           ╰── <22> Var [d]
                    ╰── Return
                        ╰── <29> Arrow
                            ├── <27> Var [ptr]
                            ╰── l
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_bad_member() {
    let src = r#"
        struct s {
            int x;
            int y;
        };
        struct t {
            int blah;
            int y;
        };
        int main(void) {
            struct s foo = {1, 2};
            return foo.blah;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Struct [t]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── blah
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <29> Constant Int [1]
                    │           ╰── <31> Constant Int [2]
                    ╰── Return
                        ╰── <38> Dot
                            ├── <36> Var [foo]
                            ╰── blah
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_bad_pointer_member() {
    let src = r#"
        void *malloc(unsigned long size);
        struct a {
          int x;
          int y;
        };
        struct b {
          int m;
          int n;
        };
        int main(void) {
          struct a *ptr = malloc(sizeof(struct a));
          ptr->m = 10;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [a]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Struct [b]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── m
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── n
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [a]
                    │   ╰── Initializer
                    │       ╰── <44> FunctionCall [malloc]
                    │           ╰── <43> SizeOfType
                    │               ╰── Struct [a]
                    ├── <53> Assign [=]
                    │   ├── <50> Arrow
                    │   │   ├── <48> Var [ptr]
                    │   │   ╰── m
                    │   ╰── <52> Constant Int [10]
                    ╰── Return
                        ╰── <55> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_member_of_non_struct() {
    let src = r#"
        void *malloc(unsigned long size);
        struct a {
          int x;
          int y;
        };
        int main(void) {
          struct a *ptr = malloc(sizeof(struct a));
          ptr.x = 10;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [a]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [a]
                    │   ╰── Initializer
                    │       ╰── <34> FunctionCall [malloc]
                    │           ╰── <33> SizeOfType
                    │               ╰── Struct [a]
                    ╰── <43> Assign [=]
                        ├── <40> Dot
                        │   ├── <38> Var [ptr]
                        │   ╰── x
                        ╰── <42> Constant Int [10]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_member_pointer_non_struct_pointer() {
    let src = r#"
        struct a {
          int x;
          int y;
        };
        int main(void) {
          struct a my_struct = {1, 2};
          return my_struct->x;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [a]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [a]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <19> Constant Int [1]
                    │           ╰── <21> Constant Int [2]
                    ╰── Return
                        ╰── <28> Arrow
                            ├── <26> Var [my_struct]
                            ╰── x
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_nested_arrow_pointer_to_non_struct() {
    let src = r#"
        struct s {
            long l;
        };
        struct has_ptr {
            double *ptr;
        };
        int main(void) {
            double d = 0.0;
            struct has_ptr p_struct = { &d };
            return p_struct.ptr->l;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Struct [has_ptr]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <21> Constant Double [+0e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── p_struct
                    │   ├── Type
                    │   │   ╰── Struct [has_ptr]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <30> AddressOf
                    │               ╰── <29> Var [d]
                    ╰── Return
                        ╰── <39> Arrow
                            ├── <37> Dot
                            │   ├── <35> Var [p_struct]
                            │   ╰── ptr
                            ╰── l
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_postfix_precedence() {
    let src = r#"
        int main(void) {
            struct s {
                int a;
            };
            struct s x = {10};
            return &x->a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [10]
                    ╰── Return
                        ╰── <23> AddressOf
                            ╰── <22> Arrow
                                ├── <20> Var [x]
                                ╰── a
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_struct_declaration_duplicate_member_name() {
    let src = r#"
        struct s {
          int x;
          double x;
        };
    "#;
    let expected = r#"
        Program
            ╰── Struct [s]
                ├── Field
                │   ├── Name
                │   │   ╰── x
                │   ╰── Type
                │       ╰── Int
                ╰── Field
                    ├── Name
                    │   ╰── x
                    ╰── Type
                        ╰── Double
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_struct_declaration_duplicate_struct_declaration() {
    let src = r#"
        int main(void) {
            struct x {
                int x;
            };
            struct x {
                int y;
            };
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [x]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── x
                    │       ╰── Type
                    │           ╰── Int
                    ├── Struct [x]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── y
                    │       ╰── Type
                    │           ╰── Int
                    ╰── Return
                        ╰── <17> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_struct_declaration_incomplete_member() {
    let src = r#"
        struct s;
        struct a {
          struct s g;
        };
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ╰── Struct [a]
                ╰── Field
                    ├── Name
                    │   ╰── g
                    ╰── Type
                        ╰── Struct [s]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_struct_declaration_invalid_array_member() {
    let src = r#"
        struct incomplete;
        struct s {
          struct incomplete (*array_pointer)[3];
        };
    "#;
    let expected = r#"
        Program
            ├── Struct [incomplete]
            ╰── Struct [s]
                ╰── Field
                    ├── Name
                    │   ╰── array_pointer
                    ╰── Type
                        ╰── Pointer
                            ╰── Array
                                ├── 3
                                ╰── Struct [incomplete]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_struct_declaration_invalid_self_reference() {
    let src = r#"
        struct s {
            int x;
            struct s y;
        };
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <16> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_struct_declaration_void_member() {
    let src = r#"
        struct s {
          void x;
        };
    "#;
    let expected = r#"
        Program
            ╰── Struct [s]
                ╰── Field
                    ├── Name
                    │   ╰── x
                    ╰── Type
                        ╰── Void
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_and_struct() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s x = {1};
            return 0 && x;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ╰── Return
                        ╰── <23>  [&&]
                            ├── <19> Constant Int [0]
                            ╰── <22> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_assign_null_ptr_to_struct() {
    let src = r#"
        struct s {
          int a;
        };
        struct s x = {1};
        int main(void) {
          x = 0;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── <11> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── <23> Assign [=]
                    │   ├── <20> Var [x]
                    │   ╰── <22> Constant Int [0]
                    ╰── Return
                        ╰── <25> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_assign_scalar_to_struct() {
    let src = r#"
        struct s {
          int a;
        };
        struct s x = {1};
        int main(void) {
          struct s *ptr = &x;
          *ptr = 2;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── <11> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── <26> AddressOf
                    │           ╰── <25> Var [x]
                    ├── <34> Assign [=]
                    │   ├── <31> Dereference
                    │   │   ╰── <30> Var [ptr]
                    │   ╰── <33> Constant Int [2]
                    ╰── Return
                        ╰── <36> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_cast_struct_to_scalar() {
    let src = r#"
        struct s {
          int a;
        };
        int main(void) {
          struct s x = {1};
          int y = (int)x;
          return y;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <26> Cast
                    │           ├── Target
                    │           │   ╰── Int
                    │           ╰── Expression
                    │               ╰── <25> Var [x]
                    ╰── Return
                        ╰── <30> Var [y]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_cast_to_struct() {
    let src = r#"
        struct s {
          int a;
        };
        struct s x;
        int main(void) { (struct s) x; }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ╰── Type
            │       ╰── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ╰── <21> Cast
                        ├── Target
                        │   ╰── Struct [s]
                        ╰── Expression
                            ╰── <20> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_compare_structs() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s x = {1};
            struct s y = {2};
            return x == y;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <23> Constant Int [2]
                    ╰── Return
                        ╰── <32>  [==]
                            ├── <28> Var [x]
                            ╰── <31> Var [y]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_not_struct() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s x = {1};
            return !x;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ╰── Return
                        ╰── <22> Unary [!]
                            ╰── <21> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_pass_struct_as_scalar_param() {
    let src = r#"
        struct s {
          int a;
        };
        int foo(int a) { return a; }
        int main(void) {
          struct s x = {1};
          return foo(x);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── Function [foo]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── a
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <15> Var [a]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <27> Constant Int [1]
                    ╰── Return
                        ╰── <34> FunctionCall [foo]
                            ╰── <33> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_struct_as_int() {
    let src = r#"
        struct s {
          int a;
        };
        int main(void) {
          struct s x = {1};
          (void)~x;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ├── <25> Cast
                    │   ├── Target
                    │   │   ╰── Void
                    │   ╰── Expression
                    │       ╰── <24> Unary [~]
                    │           ╰── <23> Var [x]
                    ╰── Return
                        ╰── <27> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_struct_controlling_expression() {
    let src = r#"
        struct s {
          int a;
        };
        int main(void) {
          struct s x = {1};
          if (x)
            return 1;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <20> Var [x]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <21> Constant Int [1]
                    ╰── Return
                        ╰── <24> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_subscript_struct() {
    let src = r#"
        struct s {
          int a;
        };
        int main(void) {
          struct s x = {1};
          return x[0];
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ╰── Return
                        ╰── <22> Subscript
                            ├── <20> Var [x]
                            ╰── <21> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_address_of_wrong_type() {
    let src = r#"
        struct s {
            int i;
        };
        int main(void) {
            struct s foo = {0};
            struct s {
                int i;
            };
            struct s *ptr = &foo;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [0]
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── i
                    │       ╰── Type
                    │           ╰── Int
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── ptr
                        ├── Type
                        │   ╰── Pointer
                        │       ╰── Struct [s]
                        ╰── Initializer
                            ╰── <32> AddressOf
                                ╰── <31> Var [foo]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_conflicting_fun_param_types() {
    let src = r#"
        struct s;
        int foo(struct s x);
        int main(void) {
            struct s;
            int foo(struct s x);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [foo]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── x
            │           ╰── Type
            │               ╰── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    ├── Function [foo]
                    │   ╰── Parameters
                    │       ╰── Param
                    │           ├── Name
                    │           │   ╰── x
                    │           ╰── Type
                    │               ╰── Struct [s]
                    ╰── Return
                        ╰── <27> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_conflicting_fun_ret_types() {
    let src = r#"
        struct s;
        struct s foo(void);
        int main(void) {
            struct s;
            struct s foo(void);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [foo]
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    ├── Function [foo]
                    ╰── Return
                        ╰── <21> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_distinct_struct_types() {
    let src = r#"
        int foo(void) {
            struct s {
                int a;
                int b;
            };
            struct s result = {1, 2};
            return result.a + result.b;
        }
        int main(void) {
            struct s;
            struct s blah = {foo(), foo()};
            return blah.a;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── a
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── b
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <19> Constant Int [1]
            │       │           ╰── <21> Constant Int [2]
            │       ╰── Return
            │           ╰── <34>  [+]
            │               ├── <28> Dot
            │               │   ├── <26> Var [result]
            │               │   ╰── a
            │               ╰── <33> Dot
            │                   ├── <31> Var [result]
            │                   ╰── b
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── blah
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <49> FunctionCall [foo]
                    │           ╰── <52> FunctionCall [foo]
                    ╰── Return
                        ╰── <59> Dot
                            ├── <57> Var [blah]
                            ╰── a
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_incomplete_shadows_complete() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s;
            struct s *x;
            x->a = 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Pointer
                    │           ╰── Struct [s]
                    ├── <25> Assign [=]
                    │   ├── <22> Arrow
                    │   │   ├── <20> Var [x]
                    │   │   ╰── a
                    │   ╰── <24> Constant Int [10]
                    ╰── Return
                        ╰── <27> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_incomplete_shadows_complete_cast() {
    let src = r#"
        
        void *malloc(unsigned long size);
        struct s {
            int a;
        };
        int main(void) {
            void *ptr = malloc(sizeof(struct s));
            struct s;
            ((struct s *)ptr)->a = 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Void
                    │   ╰── Initializer
                    │       ╰── <29> FunctionCall [malloc]
                    │           ╰── <28> SizeOfType
                    │               ╰── Struct [s]
                    ├── Struct [s]
                    ├── <46> Assign [=]
                    │   ├── <43> Arrow
                    │   │   ├── <41> Cast
                    │   │   │   ├── Target
                    │   │   │   │   ╰── Pointer
                    │   │   │   │       ╰── Struct [s]
                    │   │   │   ╰── Expression
                    │   │   │       ╰── <39> Var [ptr]
                    │   │   ╰── a
                    │   ╰── <45> Constant Int [10]
                    ╰── Return
                        ╰── <48> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_invalid_shadow_self_reference() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s {
                struct s nested;
            };
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── nested
                    │       ╰── Type
                    │           ╰── Struct [s]
                    ╰── Return
                        ╰── <18> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_member_name_wrong_scope() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s foo = {1};
            struct s {
                int b;
            };
            return foo.b;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── b
                    │       ╰── Type
                    │           ╰── Int
                    ╰── Return
                        ╰── <28> Dot
                            ├── <26> Var [foo]
                            ╰── b
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_member_name_wrong_scope_nested() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct outer {
                struct s inner;
            };
            struct outer foo = {{1}};
            struct s {
                int b;
            };
            struct outer *ptr = &foo;
            return ptr->inner.b;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── Struct [outer]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── inner
                    │       ╰── Type
                    │           ╰── Struct [s]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <22> Constant Int [1]
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── b
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── <40> AddressOf
                    │           ╰── <39> Var [foo]
                    ╰── Return
                        ╰── <48> Dot
                            ├── <46> Arrow
                            │   ├── <44> Var [ptr]
                            │   ╰── inner
                            ╰── b
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_mismatched_return_type() {
    let src = r#"
        struct s {
          int a;
          int b;
        };
        struct s return_struct(void) {
          struct s {
            int a;
            int b;
          };
          struct s result = {1, 2};
          return result;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [return_struct]
                ╰── Body
                    ├── Struct [s]
                    │   ├── Field
                    │   │   ├── Name
                    │   │   │   ╰── a
                    │   │   ╰── Type
                    │   │       ╰── Int
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── b
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <30> Constant Int [1]
                    │           ╰── <32> Constant Int [2]
                    ╰── Return
                        ╰── <37> Var [result]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_shadow_struct() {
    let src = r#"
        struct s;
        struct s *ptr1 = 0;
        int main(void) {
          struct s;
          struct s *ptr2 = 0;
          return ptr1 == ptr2;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr1
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── <8> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr2
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── <22> Constant Int [0]
                    ╰── Return
                        ╰── <30>  [==]
                            ├── <26> Var [ptr1]
                            ╰── <29> Var [ptr2]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_shadowed_tag_branch_mismatch() {
    let src = r#"
        int main(void) {
            struct s {
                int i;
            };
            struct s struct1 = {1};
            {
                struct s {
                    int i;
                };
                struct s struct2 = {2};
                (void)(1 ? struct1 : struct2);
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── i
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── struct1
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [1]
                    ╰── Block
                        ├── Struct [s]
                        │   ╰── Field
                        │       ├── Name
                        │       │   ╰── i
                        │       ╰── Type
                        │           ╰── Int
                        ├── VarDeclaration
                        │   ├── Name
                        │   │   ╰── struct2
                        │   ├── Type
                        │   │   ╰── Struct [s]
                        │   ╰── Initializer
                        │       ╰── Compound
                        │           ╰── <29> Constant Int [2]
                        ╰── <42> Cast
                            ├── Target
                            │   ╰── Void
                            ╰── Expression
                                ╰── <41> Conditional [?]
                                    ├── <35> Constant Int [1]
                                    ├── Then
                                    │   ╰── <37> Var [struct1]
                                    ╰── Else
                                        ╰── <39> Var [struct2]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_other_features_bitwise_ops_struct_members() {
    let src = r#"
        struct inner {
            char b;
            unsigned int u;
        };
        struct outer {
            unsigned long l;
            struct inner *in_ptr;
            int bar;
            struct inner in;
        };
        int main(void) {
            struct inner i = {'a', 100000u};
            struct outer o = {9223372036854775810ul, &i, 100, {-80, 4294967295U}};
            if ((i.b | o.l) != 9223372036854775907ul) {
                return 1;
            }
            if ((o.bar ^ i.u) != 100036u) {
                return 2;
            }
            if ((o.in_ptr->b & o.in.b) != 32) {
                return 3;
            }
            if ((o.l >> 26) != 137438953472ul) {
                return 4;
            }
            o.bar = 12;
            if ((i.b << o.bar) != 397312) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── in_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── bar
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── in
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Struct [inner]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <40> Constant Int [97]
                    │           ╰── <42> Constant UInt [100000]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── o
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <50> Constant ULong [9223372036854775810]
                    │           ├── <54> AddressOf
                    │           │   ╰── <53> Var [i]
                    │           ├── <56> Constant Int [100]
                    │           ╰── Compound
                    │               ├── <60> Unary [-]
                    │               │   ╰── <59> Constant Int [80]
                    │               ╰── <62> Constant UInt [4294967295]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <80>  [!=]
                    │   │       ├── <77>  [|]
                    │   │       │   ├── <70> Dot
                    │   │       │   │   ├── <68> Var [i]
                    │   │       │   │   ╰── b
                    │   │       │   ╰── <75> Dot
                    │   │       │       ├── <73> Var [o]
                    │   │       │       ╰── l
                    │   │       ╰── <79> Constant ULong [9223372036854775907]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <81> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <99>  [!=]
                    │   │       ├── <96>  [^]
                    │   │       │   ├── <89> Dot
                    │   │       │   │   ├── <87> Var [o]
                    │   │       │   │   ╰── bar
                    │   │       │   ╰── <94> Dot
                    │   │       │       ├── <92> Var [i]
                    │   │       │       ╰── u
                    │   │       ╰── <98> Constant UInt [100036]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <100> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <122>  [!=]
                    │   │       ├── <119>  [&]
                    │   │       │   ├── <110> Arrow
                    │   │       │   │   ├── <108> Dot
                    │   │       │   │   │   ├── <106> Var [o]
                    │   │       │   │   │   ╰── in_ptr
                    │   │       │   │   ╰── b
                    │   │       │   ╰── <117> Dot
                    │   │       │       ├── <115> Dot
                    │   │       │       │   ├── <113> Var [o]
                    │   │       │       │   ╰── in
                    │   │       │       ╰── b
                    │   │       ╰── <121> Constant Int [32]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <123> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <138>  [!=]
                    │   │       ├── <135>  [>>]
                    │   │       │   ├── <131> Dot
                    │   │       │   │   ├── <129> Var [o]
                    │   │       │   │   ╰── l
                    │   │       │   ╰── <133> Constant Int [26]
                    │   │       ╰── <137> Constant ULong [137438953472]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <139> Constant Int [4]
                    ├── <150> Assign [=]
                    │   ├── <147> Dot
                    │   │   ├── <145> Var [o]
                    │   │   ╰── bar
                    │   ╰── <149> Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <165>  [!=]
                    │   │       ├── <162>  [<<]
                    │   │       │   ├── <155> Dot
                    │   │       │   │   ├── <153> Var [i]
                    │   │       │   │   ╰── b
                    │   │       │   ╰── <160> Dot
                    │   │       │       ├── <158> Var [o]
                    │   │       │       ╰── bar
                    │   │       ╰── <164> Constant Int [397312]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <166> Constant Int [5]
                    ╰── Return
                        ╰── <171> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_other_features_compound_assign_struct_members() {
    let src = r#"
        
        struct inner {
            double a;
            char b;
            int *ptr;
        };
        struct outer {
            unsigned long l;
            struct inner *in_ptr;
            struct inner in_array[4];
            int bar;
        };
        int main(void) {
            int i = -1;
            int i2 = -2;
            struct inner si = {150., -12, &i};
            struct outer o = {
                              18446744073709551615UL,
                              &si,
                              {si, {-20e20, 120, 0}, {0, 0, 0}, {1, 1, &i2}},
                              2000};
            si.a += 10;
            if (si.a != 160) {
                return 1;
            }
            o.in_array[0].b -= 460;
            if (o.in_array[0].b != 40) {
                return 2;
            }
            o.in_array[1].a *= -4;
            if (o.in_array[1].a != 80e20) {
                return 4;
            }
            o.in_ptr->a /= 5;
            if (si.a != 32) {
                return 5;
            }
            (&o)->l %= o.bar;
            if (o.l != 1615) {
                return 6;
            }
            o.in_ptr = o.in_array;
            if ((o.in_ptr += 3)->a != 1) {
                return 7;
            }
            if (*o.in_ptr->ptr != -2) {
                return 8;
            }
            o.in_ptr -= 1u;
            if (o.in_ptr->a || o.in_ptr->b || o.in_ptr->ptr) {
                return 9;
            }
            if (si.a != 32 || si.b != -12 || si.ptr != &i) {
                return 10;
            }
            if (o.l != 1615) {
                return 11;
            }
            if (o.in_ptr != &o.in_array[2]) {
                return 12;
            }
            if (o.in_array[0].a != 150. || o.in_array[0].b != 40 ||
                o.in_array[0].ptr != &i) {
                return 13;
            }
            if (o.in_array[1].a != 80e20 || o.in_array[1].b != 120 ||
                o.in_array[1].ptr) {
                return 14;
            }
            if (o.in_array[2].a || o.in_array[2].b || o.in_array[2].ptr) {
                return 15;
            }
            if (o.in_array[3].a != 1 || o.in_array[3].b != 1 ||
                o.in_array[3].ptr != &i2) {
                return 16;
            }
            if (o.bar != 2000) {
                return 17;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── in_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── in_array
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 4
            │   │           ╰── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── bar
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <48> Unary [-]
                    │           ╰── <47> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i2
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <56> Unary [-]
                    │           ╰── <55> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── si
                    │   ├── Type
                    │   │   ╰── Struct [inner]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <63> Constant Double [+1.5e2]
                    │           ├── <67> Unary [-]
                    │           │   ╰── <66> Constant Int [12]
                    │           ╰── <71> AddressOf
                    │               ╰── <70> Var [i]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── o
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <79> Constant ULong [18446744073709551615]
                    │           ├── <83> AddressOf
                    │           │   ╰── <82> Var [si]
                    │           ├── Compound
                    │           │   ├── <86> Var [si]
                    │           │   ├── Compound
                    │           │   │   ├── <90> Unary [-]
                    │           │   │   │   ╰── <89> Constant Double [+2e21]
                    │           │   │   ├── <92> Constant Int [120]
                    │           │   │   ╰── <94> Constant Int [0]
                    │           │   ├── Compound
                    │           │   │   ├── <97> Constant Int [0]
                    │           │   │   ├── <99> Constant Int [0]
                    │           │   │   ╰── <101> Constant Int [0]
                    │           │   ╰── Compound
                    │           │       ├── <104> Constant Int [1]
                    │           │       ├── <106> Constant Int [1]
                    │           │       ╰── <110> AddressOf
                    │           │           ╰── <109> Var [i2]
                    │           ╰── <114> Constant Int [2000]
                    ├── <124> Assign [+=]
                    │   ├── <121> Dot
                    │   │   ├── <119> Var [si]
                    │   │   ╰── a
                    │   ╰── <123> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <132>  [!=]
                    │   │       ├── <129> Dot
                    │   │       │   ├── <127> Var [si]
                    │   │       │   ╰── a
                    │   │       ╰── <131> Constant Int [160]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <133> Constant Int [1]
                    ├── <148> Assign [-=]
                    │   ├── <145> Dot
                    │   │   ├── <143> Subscript
                    │   │   │   ├── <141> Dot
                    │   │   │   │   ├── <139> Var [o]
                    │   │   │   │   ╰── in_array
                    │   │   │   ╰── <142> Constant Int [0]
                    │   │   ╰── b
                    │   ╰── <147> Constant Int [460]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <160>  [!=]
                    │   │       ├── <157> Dot
                    │   │       │   ├── <155> Subscript
                    │   │       │   │   ├── <153> Dot
                    │   │       │   │   │   ├── <151> Var [o]
                    │   │       │   │   │   ╰── in_array
                    │   │       │   │   ╰── <154> Constant Int [0]
                    │   │       │   ╰── b
                    │   │       ╰── <159> Constant Int [40]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <161> Constant Int [2]
                    ├── <178> Assign [*=]
                    │   ├── <173> Dot
                    │   │   ├── <171> Subscript
                    │   │   │   ├── <169> Dot
                    │   │   │   │   ├── <167> Var [o]
                    │   │   │   │   ╰── in_array
                    │   │   │   ╰── <170> Constant Int [1]
                    │   │   ╰── a
                    │   ╰── <177> Unary [-]
                    │       ╰── <176> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <190>  [!=]
                    │   │       ├── <187> Dot
                    │   │       │   ├── <185> Subscript
                    │   │       │   │   ├── <183> Dot
                    │   │       │   │   │   ├── <181> Var [o]
                    │   │       │   │   │   ╰── in_array
                    │   │       │   │   ╰── <184> Constant Int [1]
                    │   │       │   ╰── a
                    │   │       ╰── <189> Constant Double [+8e21]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <191> Constant Int [4]
                    ├── <204> Assign [/=]
                    │   ├── <201> Arrow
                    │   │   ├── <199> Dot
                    │   │   │   ├── <197> Var [o]
                    │   │   │   ╰── in_ptr
                    │   │   ╰── a
                    │   ╰── <203> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <212>  [!=]
                    │   │       ├── <209> Dot
                    │   │       │   ├── <207> Var [si]
                    │   │       │   ╰── a
                    │   │       ╰── <211> Constant Int [32]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <213> Constant Int [5]
                    ├── <229> Assign [&=]
                    │   ├── <223> Arrow
                    │   │   ├── <221> AddressOf
                    │   │   │   ╰── <219> Var [o]
                    │   │   ╰── l
                    │   ╰── <228> Dot
                    │       ├── <226> Var [o]
                    │       ╰── bar
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <237>  [!=]
                    │   │       ├── <234> Dot
                    │   │       │   ├── <232> Var [o]
                    │   │       │   ╰── l
                    │   │       ╰── <236> Constant Int [1615]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <238> Constant Int [6]
                    ├── <252> Assign [=]
                    │   ├── <246> Dot
                    │   │   ├── <244> Var [o]
                    │   │   ╰── in_ptr
                    │   ╰── <251> Dot
                    │       ├── <249> Var [o]
                    │       ╰── in_array
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <266>  [!=]
                    │   │       ├── <263> Arrow
                    │   │       │   ├── <261> Assign [+=]
                    │   │       │   │   ├── <257> Dot
                    │   │       │   │   │   ├── <255> Var [o]
                    │   │       │   │   │   ╰── in_ptr
                    │   │       │   │   ╰── <259> Constant Int [3]
                    │   │       │   ╰── a
                    │   │       ╰── <265> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <267> Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <283>  [!=]
                    │   │       ├── <278> Dereference
                    │   │       │   ╰── <277> Arrow
                    │   │       │       ├── <275> Dot
                    │   │       │       │   ├── <273> Var [o]
                    │   │       │       │   ╰── in_ptr
                    │   │       │       ╰── ptr
                    │   │       ╰── <282> Unary [-]
                    │   │           ╰── <281> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <284> Constant Int [8]
                    ├── <295> Assign [-=]
                    │   ├── <292> Dot
                    │   │   ├── <290> Var [o]
                    │   │   ╰── in_ptr
                    │   ╰── <294> Constant UInt [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <318>  [||]
                    │   │       ├── <310>  [||]
                    │   │       │   ├── <302> Arrow
                    │   │       │   │   ├── <300> Dot
                    │   │       │   │   │   ├── <298> Var [o]
                    │   │       │   │   │   ╰── in_ptr
                    │   │       │   │   ╰── a
                    │   │       │   ╰── <309> Arrow
                    │   │       │       ├── <307> Dot
                    │   │       │       │   ├── <305> Var [o]
                    │   │       │       │   ╰── in_ptr
                    │   │       │       ╰── b
                    │   │       ╰── <317> Arrow
                    │   │           ├── <315> Dot
                    │   │           │   ├── <313> Var [o]
                    │   │           │   ╰── in_ptr
                    │   │           ╰── ptr
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <319> Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <352>  [||]
                    │   │       ├── <341>  [||]
                    │   │       │   ├── <330>  [!=]
                    │   │       │   │   ├── <327> Dot
                    │   │       │   │   │   ├── <325> Var [si]
                    │   │       │   │   │   ╰── a
                    │   │       │   │   ╰── <329> Constant Int [32]
                    │   │       │   ╰── <340>  [!=]
                    │   │       │       ├── <335> Dot
                    │   │       │       │   ├── <333> Var [si]
                    │   │       │       │   ╰── b
                    │   │       │       ╰── <339> Unary [-]
                    │   │       │           ╰── <338> Constant Int [12]
                    │   │       ╰── <351>  [!=]
                    │   │           ├── <346> Dot
                    │   │           │   ├── <344> Var [si]
                    │   │           │   ╰── ptr
                    │   │           ╰── <350> AddressOf
                    │   │               ╰── <349> Var [i]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <353> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <364>  [!=]
                    │   │       ├── <361> Dot
                    │   │       │   ├── <359> Var [o]
                    │   │       │   ╰── l
                    │   │       ╰── <363> Constant Int [1615]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <365> Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <382>  [!=]
                    │   │       ├── <373> Dot
                    │   │       │   ├── <371> Var [o]
                    │   │       │   ╰── in_ptr
                    │   │       ╰── <381> AddressOf
                    │   │           ╰── <380> Subscript
                    │   │               ├── <378> Dot
                    │   │               │   ├── <376> Var [o]
                    │   │               │   ╰── in_array
                    │   │               ╰── <379> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <383> Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <426>  [||]
                    │   │       ├── <411>  [||]
                    │   │       │   ├── <398>  [!=]
                    │   │       │   │   ├── <395> Dot
                    │   │       │   │   │   ├── <393> Subscript
                    │   │       │   │   │   │   ├── <391> Dot
                    │   │       │   │   │   │   │   ├── <389> Var [o]
                    │   │       │   │   │   │   │   ╰── in_array
                    │   │       │   │   │   │   ╰── <392> Constant Int [0]
                    │   │       │   │   │   ╰── a
                    │   │       │   │   ╰── <397> Constant Double [+1.5e2]
                    │   │       │   ╰── <410>  [!=]
                    │   │       │       ├── <407> Dot
                    │   │       │       │   ├── <405> Subscript
                    │   │       │       │   │   ├── <403> Dot
                    │   │       │       │   │   │   ├── <401> Var [o]
                    │   │       │       │   │   │   ╰── in_array
                    │   │       │       │   │   ╰── <404> Constant Int [0]
                    │   │       │       │   ╰── b
                    │   │       │       ╰── <409> Constant Int [40]
                    │   │       ╰── <425>  [!=]
                    │   │           ├── <420> Dot
                    │   │           │   ├── <418> Subscript
                    │   │           │   │   ├── <416> Dot
                    │   │           │   │   │   ├── <414> Var [o]
                    │   │           │   │   │   ╰── in_array
                    │   │           │   │   ╰── <417> Constant Int [0]
                    │   │           │   ╰── ptr
                    │   │           ╰── <424> AddressOf
                    │   │               ╰── <423> Var [i]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <427> Constant Int [13]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <465>  [||]
                    │   │       ├── <455>  [||]
                    │   │       │   ├── <442>  [!=]
                    │   │       │   │   ├── <439> Dot
                    │   │       │   │   │   ├── <437> Subscript
                    │   │       │   │   │   │   ├── <435> Dot
                    │   │       │   │   │   │   │   ├── <433> Var [o]
                    │   │       │   │   │   │   │   ╰── in_array
                    │   │       │   │   │   │   ╰── <436> Constant Int [1]
                    │   │       │   │   │   ╰── a
                    │   │       │   │   ╰── <441> Constant Double [+8e21]
                    │   │       │   ╰── <454>  [!=]
                    │   │       │       ├── <451> Dot
                    │   │       │       │   ├── <449> Subscript
                    │   │       │       │   │   ├── <447> Dot
                    │   │       │       │   │   │   ├── <445> Var [o]
                    │   │       │       │   │   │   ╰── in_array
                    │   │       │       │   │   ╰── <448> Constant Int [1]
                    │   │       │       │   ╰── b
                    │   │       │       ╰── <453> Constant Int [120]
                    │   │       ╰── <464> Dot
                    │   │           ├── <462> Subscript
                    │   │           │   ├── <460> Dot
                    │   │           │   │   ├── <458> Var [o]
                    │   │           │   │   ╰── in_array
                    │   │           │   ╰── <461> Constant Int [1]
                    │   │           ╰── ptr
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <466> Constant Int [14]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <498>  [||]
                    │   │       ├── <488>  [||]
                    │   │       │   ├── <478> Dot
                    │   │       │   │   ├── <476> Subscript
                    │   │       │   │   │   ├── <474> Dot
                    │   │       │   │   │   │   ├── <472> Var [o]
                    │   │       │   │   │   │   ╰── in_array
                    │   │       │   │   │   ╰── <475> Constant Int [2]
                    │   │       │   │   ╰── a
                    │   │       │   ╰── <487> Dot
                    │   │       │       ├── <485> Subscript
                    │   │       │       │   ├── <483> Dot
                    │   │       │       │   │   ├── <481> Var [o]
                    │   │       │       │   │   ╰── in_array
                    │   │       │       │   ╰── <484> Constant Int [2]
                    │   │       │       ╰── b
                    │   │       ╰── <497> Dot
                    │   │           ├── <495> Subscript
                    │   │           │   ├── <493> Dot
                    │   │           │   │   ├── <491> Var [o]
                    │   │           │   │   ╰── in_array
                    │   │           │   ╰── <494> Constant Int [2]
                    │   │           ╰── ptr
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <499> Constant Int [15]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <542>  [||]
                    │   │       ├── <527>  [||]
                    │   │       │   ├── <514>  [!=]
                    │   │       │   │   ├── <511> Dot
                    │   │       │   │   │   ├── <509> Subscript
                    │   │       │   │   │   │   ├── <507> Dot
                    │   │       │   │   │   │   │   ├── <505> Var [o]
                    │   │       │   │   │   │   │   ╰── in_array
                    │   │       │   │   │   │   ╰── <508> Constant Int [3]
                    │   │       │   │   │   ╰── a
                    │   │       │   │   ╰── <513> Constant Int [1]
                    │   │       │   ╰── <526>  [!=]
                    │   │       │       ├── <523> Dot
                    │   │       │       │   ├── <521> Subscript
                    │   │       │       │   │   ├── <519> Dot
                    │   │       │       │   │   │   ├── <517> Var [o]
                    │   │       │       │   │   │   ╰── in_array
                    │   │       │       │   │   ╰── <520> Constant Int [3]
                    │   │       │       │   ╰── b
                    │   │       │       ╰── <525> Constant Int [1]
                    │   │       ╰── <541>  [!=]
                    │   │           ├── <536> Dot
                    │   │           │   ├── <534> Subscript
                    │   │           │   │   ├── <532> Dot
                    │   │           │   │   │   ├── <530> Var [o]
                    │   │           │   │   │   ╰── in_array
                    │   │           │   │   ╰── <533> Constant Int [3]
                    │   │           │   ╰── ptr
                    │   │           ╰── <540> AddressOf
                    │   │               ╰── <539> Var [i2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <543> Constant Int [16]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <554>  [!=]
                    │   │       ├── <551> Dot
                    │   │       │   ├── <549> Var [o]
                    │   │       │   ╰── bar
                    │   │       ╰── <553> Constant Int [2000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <555> Constant Int [17]
                    ╰── Return
                        ╰── <560> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_other_features_decr_arrow_lexing() {
    let src = r#"
        
        int main(void) {
            int arr[3] = {0, 1, 2};
            int *ptr = arr + 2;
            if(ptr-->arr) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <10> Constant Int [0]
                    │           ├── <12> Constant Int [1]
                    │           ╰── <14> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <26>  [+]
                    │           ├── <23> Var [arr]
                    │           ╰── <25> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <36>  [>]
                    │   │       ├── <32> Postfix [--]
                    │   │       │   ╰── <30> Var [ptr]
                    │   │       ╰── <35> Var [arr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <37> Constant Int [0]
                    ╰── Return
                        ╰── <42> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_other_features_incr_struct_members() {
    let src = r#"
        struct inner {
            char c;
            unsigned int u;
        };
        struct outer {
            unsigned long l;
            struct inner *in_ptr;
            int array[3];
        };
        void *calloc(unsigned long nmemb, unsigned long size);
        int main(void) {
            struct outer my_struct = {
                9223372036854775900ul,
                calloc(3, sizeof (struct inner)),
                {-1000, -2000, -3000},
            };
            struct outer *my_struct_ptr = &my_struct;
            if (++my_struct.l != 9223372036854775901ul) {
                return 1;
            }
            if (--my_struct.in_ptr[0].u != 4294967295U) {
                return 2;
            }
            if (my_struct.in_ptr->c++) {
                return 3;
            }
            if (my_struct_ptr->array[1]-- != -2000) {
                return 4;
            }
            if (my_struct_ptr->l != 9223372036854775901ul) {
                return 5;
            }
            if (my_struct.in_ptr->c != 1) {
                return 6;
            }
            if (my_struct_ptr->in_ptr->u != 4294967295U) {
                return 7;
            }
            if (my_struct_ptr->array[1] != -2001) {
                return 8;
            }
            if (my_struct_ptr->array[0] != -1000 || my_struct_ptr->array[2] != -3000) {
                return 9;
            }
            my_struct_ptr->in_ptr[1].c = -1;
            my_struct_ptr->in_ptr[1].u = 1u;
            my_struct_ptr->in_ptr[2].c = 'X';
            my_struct_ptr->in_ptr[2].u = 100000u;
            (++my_struct_ptr->in_ptr)->c--;
            my_struct_ptr->in_ptr++->u++;
            if (my_struct_ptr->in_ptr[-2].c != 1 || my_struct_ptr->in_ptr[-2].u != 4294967295U) {
                return 10;
            }
            if (my_struct_ptr->in_ptr[-1].c != -2) {
                return 11;
            }
            if (my_struct_ptr->in_ptr[-1].u != 2) {
                return 12;
            }
            if (my_struct_ptr->in_ptr[0].c != 'X' || my_struct_ptr->in_ptr[0].u != 100000u) {
                return 13;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── in_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── array
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <49> Constant ULong [9223372036854775900]
                    │           ├── <57> FunctionCall [calloc]
                    │           │   ├── <52> Constant Int [3]
                    │           │   ╰── <56> SizeOfType
                    │           │       ╰── Struct [inner]
                    │           ╰── Compound
                    │               ├── <61> Unary [-]
                    │               │   ╰── <60> Constant Int [1000]
                    │               ├── <65> Unary [-]
                    │               │   ╰── <64> Constant Int [2000]
                    │               ╰── <69> Unary [-]
                    │                   ╰── <68> Constant Int [3000]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── <81> AddressOf
                    │           ╰── <80> Var [my_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <92>  [!=]
                    │   │       ├── <89> Unary [++]
                    │   │       │   ╰── <88> Dot
                    │   │       │       ├── <86> Var [my_struct]
                    │   │       │       ╰── l
                    │   │       ╰── <91> Constant ULong [9223372036854775901]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <93> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <110>  [!=]
                    │   │       ├── <107> Unary [--]
                    │   │       │   ╰── <106> Dot
                    │   │       │       ├── <104> Subscript
                    │   │       │       │   ├── <102> Dot
                    │   │       │       │   │   ├── <100> Var [my_struct]
                    │   │       │       │   │   ╰── in_ptr
                    │   │       │       │   ╰── <103> Constant Int [0]
                    │   │       │       ╰── u
                    │   │       ╰── <109> Constant UInt [4294967295]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <111> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <123> Postfix [++]
                    │   │       ╰── <121> Arrow
                    │   │           ├── <119> Dot
                    │   │           │   ├── <117> Var [my_struct]
                    │   │           │   ╰── in_ptr
                    │   │           ╰── c
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <124> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <141>  [!=]
                    │   │       ├── <136> Postfix [--]
                    │   │       │   ╰── <134> Subscript
                    │   │       │       ├── <132> Arrow
                    │   │       │       │   ├── <130> Var [my_struct_ptr]
                    │   │       │       │   ╰── array
                    │   │       │       ╰── <133> Constant Int [1]
                    │   │       ╰── <140> Unary [-]
                    │   │           ╰── <139> Constant Int [2000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <142> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <153>  [!=]
                    │   │       ├── <150> Arrow
                    │   │       │   ├── <148> Var [my_struct_ptr]
                    │   │       │   ╰── l
                    │   │       ╰── <152> Constant ULong [9223372036854775901]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <154> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <167>  [!=]
                    │   │       ├── <164> Arrow
                    │   │       │   ├── <162> Dot
                    │   │       │   │   ├── <160> Var [my_struct]
                    │   │       │   │   ╰── in_ptr
                    │   │       │   ╰── c
                    │   │       ╰── <166> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <168> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <181>  [!=]
                    │   │       ├── <178> Arrow
                    │   │       │   ├── <176> Arrow
                    │   │       │   │   ├── <174> Var [my_struct_ptr]
                    │   │       │   │   ╰── in_ptr
                    │   │       │   ╰── u
                    │   │       ╰── <180> Constant UInt [4294967295]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <182> Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <197>  [!=]
                    │   │       ├── <192> Subscript
                    │   │       │   ├── <190> Arrow
                    │   │       │   │   ├── <188> Var [my_struct_ptr]
                    │   │       │   │   ╰── array
                    │   │       │   ╰── <191> Constant Int [1]
                    │   │       ╰── <196> Unary [-]
                    │   │           ╰── <195> Constant Int [2001]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <198> Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <226>  [||]
                    │   │       ├── <213>  [!=]
                    │   │       │   ├── <208> Subscript
                    │   │       │   │   ├── <206> Arrow
                    │   │       │   │   │   ├── <204> Var [my_struct_ptr]
                    │   │       │   │   │   ╰── array
                    │   │       │   │   ╰── <207> Constant Int [0]
                    │   │       │   ╰── <212> Unary [-]
                    │   │       │       ╰── <211> Constant Int [1000]
                    │   │       ╰── <225>  [!=]
                    │   │           ├── <220> Subscript
                    │   │           │   ├── <218> Arrow
                    │   │           │   │   ├── <216> Var [my_struct_ptr]
                    │   │           │   │   ╰── array
                    │   │           │   ╰── <219> Constant Int [2]
                    │   │           ╰── <224> Unary [-]
                    │   │               ╰── <223> Constant Int [3000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <227> Constant Int [9]
                    ├── <244> Assign [=]
                    │   ├── <239> Dot
                    │   │   ├── <237> Subscript
                    │   │   │   ├── <235> Arrow
                    │   │   │   │   ├── <233> Var [my_struct_ptr]
                    │   │   │   │   ╰── in_ptr
                    │   │   │   ╰── <236> Constant Int [1]
                    │   │   ╰── c
                    │   ╰── <243> Unary [-]
                    │       ╰── <242> Constant Int [1]
                    ├── <256> Assign [=]
                    │   ├── <253> Dot
                    │   │   ├── <251> Subscript
                    │   │   │   ├── <249> Arrow
                    │   │   │   │   ├── <247> Var [my_struct_ptr]
                    │   │   │   │   ╰── in_ptr
                    │   │   │   ╰── <250> Constant Int [1]
                    │   │   ╰── u
                    │   ╰── <255> Constant UInt [1]
                    ├── <268> Assign [=]
                    │   ├── <265> Dot
                    │   │   ├── <263> Subscript
                    │   │   │   ├── <261> Arrow
                    │   │   │   │   ├── <259> Var [my_struct_ptr]
                    │   │   │   │   ╰── in_ptr
                    │   │   │   ╰── <262> Constant Int [2]
                    │   │   ╰── c
                    │   ╰── <267> Constant Int [88]
                    ├── <280> Assign [=]
                    │   ├── <277> Dot
                    │   │   ├── <275> Subscript
                    │   │   │   ├── <273> Arrow
                    │   │   │   │   ├── <271> Var [my_struct_ptr]
                    │   │   │   │   ╰── in_ptr
                    │   │   │   ╰── <274> Constant Int [2]
                    │   │   ╰── u
                    │   ╰── <279> Constant UInt [100000]
                    ├── <292> Postfix [--]
                    │   ╰── <290> Arrow
                    │       ├── <288> Unary [++]
                    │       │   ╰── <286> Arrow
                    │       │       ├── <284> Var [my_struct_ptr]
                    │       │       ╰── in_ptr
                    │       ╰── c
                    ├── <303> Postfix [++]
                    │   ╰── <301> Arrow
                    │       ├── <299> Postfix [++]
                    │       │   ╰── <297> Arrow
                    │       │       ├── <295> Var [my_struct_ptr]
                    │       │       ╰── in_ptr
                    │       ╰── u
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <332>  [||]
                    │   │       ├── <317>  [!=]
                    │   │       │   ├── <314> Dot
                    │   │       │   │   ├── <312> Subscript
                    │   │       │   │   │   ├── <308> Arrow
                    │   │       │   │   │   │   ├── <306> Var [my_struct_ptr]
                    │   │       │   │   │   │   ╰── in_ptr
                    │   │       │   │   │   ╰── <311> Unary [-]
                    │   │       │   │   │       ╰── <310> Constant Int [2]
                    │   │       │   │   ╰── c
                    │   │       │   ╰── <316> Constant Int [1]
                    │   │       ╰── <331>  [!=]
                    │   │           ├── <328> Dot
                    │   │           │   ├── <326> Subscript
                    │   │           │   │   ├── <322> Arrow
                    │   │           │   │   │   ├── <320> Var [my_struct_ptr]
                    │   │           │   │   │   ╰── in_ptr
                    │   │           │   │   ╰── <325> Unary [-]
                    │   │           │   │       ╰── <324> Constant Int [2]
                    │   │           │   ╰── u
                    │   │           ╰── <330> Constant UInt [4294967295]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <333> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <352>  [!=]
                    │   │       ├── <347> Dot
                    │   │       │   ├── <345> Subscript
                    │   │       │   │   ├── <341> Arrow
                    │   │       │   │   │   ├── <339> Var [my_struct_ptr]
                    │   │       │   │   │   ╰── in_ptr
                    │   │       │   │   ╰── <344> Unary [-]
                    │   │       │   │       ╰── <343> Constant Int [1]
                    │   │       │   ╰── c
                    │   │       ╰── <351> Unary [-]
                    │   │           ╰── <350> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <353> Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <370>  [!=]
                    │   │       ├── <367> Dot
                    │   │       │   ├── <365> Subscript
                    │   │       │   │   ├── <361> Arrow
                    │   │       │   │   │   ├── <359> Var [my_struct_ptr]
                    │   │       │   │   │   ╰── in_ptr
                    │   │       │   │   ╰── <364> Unary [-]
                    │   │       │   │       ╰── <363> Constant Int [1]
                    │   │       │   ╰── u
                    │   │       ╰── <369> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <371> Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <399>  [||]
                    │   │       ├── <386>  [!=]
                    │   │       │   ├── <383> Dot
                    │   │       │   │   ├── <381> Subscript
                    │   │       │   │   │   ├── <379> Arrow
                    │   │       │   │   │   │   ├── <377> Var [my_struct_ptr]
                    │   │       │   │   │   │   ╰── in_ptr
                    │   │       │   │   │   ╰── <380> Constant Int [0]
                    │   │       │   │   ╰── c
                    │   │       │   ╰── <385> Constant Int [88]
                    │   │       ╰── <398>  [!=]
                    │   │           ├── <395> Dot
                    │   │           │   ├── <393> Subscript
                    │   │           │   │   ├── <391> Arrow
                    │   │           │   │   │   ├── <389> Var [my_struct_ptr]
                    │   │           │   │   │   ╰── in_ptr
                    │   │           │   │   ╰── <392> Constant Int [0]
                    │   │           │   ╰── u
                    │   │           ╰── <397> Constant UInt [100000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <400> Constant Int [13]
                    ╰── Return
                        ╰── <405> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_other_features_label_tag_member_namespace() {
    let src = r#"
        int main(void) {
            struct x {
                int x;
            };
            struct x x = {10};
            goto x;
            return 0;
        x:
            return x.x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [x]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── x
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [x]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [10]
                    ├── Goto [x]
                    ├── Return
                    │   ╰── <21> Constant Int [0]
                    ╰── Label [x]
                        ╰── Return
                            ╰── <27> Dot
                                ├── <25> Var [x]
                                ╰── x
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_other_features_struct_decl_in_switch_statement() {
    let src = r#"
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s my_struct = {1, 2};
            int result = 0;
            switch (my_struct.a) {
                struct s {
                    double x;
                    double y;
                    double z;
                };
                struct s my_struct;
                case 1:
                    my_struct.x = 20.0;
                    my_struct.y = 30.0;
                    result = my_struct.x + my_struct.y;
                    break;
                case 2:
                    my_struct.x = 11.;
                    my_struct.y = 12.;
                    result = my_struct.x + my_struct.y;
                    break;
                default:
                    my_struct.x = 0.;
                    my_struct.y = 0.;
                    result = my_struct.x + my_struct.y;
            }
            return result;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <19> Constant Int [1]
                    │           ╰── <21> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <28> Constant Int [0]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <34> Dot
                    │   │       ├── <32> Var [my_struct]
                    │   │       ╰── a
                    │   ╰── Block
                    │       ├── Struct [s]
                    │       │   ├── Field
                    │       │   │   ├── Name
                    │       │   │   │   ╰── x
                    │       │   │   ╰── Type
                    │       │   │       ╰── Double
                    │       │   ├── Field
                    │       │   │   ├── Name
                    │       │   │   │   ╰── y
                    │       │   │   ╰── Type
                    │       │   │       ╰── Double
                    │       │   ╰── Field
                    │       │       ├── Name
                    │       │       │   ╰── z
                    │       │       ╰── Type
                    │       │           ╰── Double
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── my_struct
                    │       │   ╰── Type
                    │       │       ╰── Struct [s]
                    │       ├── Case [1]
                    │       │   ╰── <61> Assign [=]
                    │       │       ├── <58> Dot
                    │       │       │   ├── <56> Var [my_struct]
                    │       │       │   ╰── x
                    │       │       ╰── <60> Constant Double [+2e1]
                    │       ├── <70> Assign [=]
                    │       │   ├── <67> Dot
                    │       │   │   ├── <65> Var [my_struct]
                    │       │   │   ╰── y
                    │       │   ╰── <69> Constant Double [+3e1]
                    │       ├── <85> Assign [=]
                    │       │   ├── <73> Var [result]
                    │       │   ╰── <84>  [+]
                    │       │       ├── <78> Dot
                    │       │       │   ├── <76> Var [my_struct]
                    │       │       │   ╰── x
                    │       │       ╰── <83> Dot
                    │       │           ├── <81> Var [my_struct]
                    │       │           ╰── y
                    │       ├── Break
                    │       ├── Case [2]
                    │       │   ╰── <95> Assign [=]
                    │       │       ├── <92> Dot
                    │       │       │   ├── <90> Var [my_struct]
                    │       │       │   ╰── x
                    │       │       ╰── <94> Constant Double [+1.1e1]
                    │       ├── <104> Assign [=]
                    │       │   ├── <101> Dot
                    │       │   │   ├── <99> Var [my_struct]
                    │       │   │   ╰── y
                    │       │   ╰── <103> Constant Double [+1.2e1]
                    │       ├── <119> Assign [=]
                    │       │   ├── <107> Var [result]
                    │       │   ╰── <118>  [+]
                    │       │       ├── <112> Dot
                    │       │       │   ├── <110> Var [my_struct]
                    │       │       │   ╰── x
                    │       │       ╰── <117> Dot
                    │       │           ├── <115> Var [my_struct]
                    │       │           ╰── y
                    │       ├── Break
                    │       ├── Default
                    │       │   ╰── <128> Assign [=]
                    │       │       ├── <125> Dot
                    │       │       │   ├── <123> Var [my_struct]
                    │       │       │   ╰── x
                    │       │       ╰── <127> Constant Double [+0e0]
                    │       ├── <137> Assign [=]
                    │       │   ├── <134> Dot
                    │       │   │   ├── <132> Var [my_struct]
                    │       │   │   ╰── y
                    │       │   ╰── <136> Constant Double [+0e0]
                    │       ╰── <152> Assign [=]
                    │           ├── <140> Var [result]
                    │           ╰── <151>  [+]
                    │               ├── <145> Dot
                    │               │   ├── <143> Var [my_struct]
                    │               │   ╰── x
                    │               ╰── <150> Dot
                    │                   ├── <148> Var [my_struct]
                    │                   ╰── y
                    ╰── Return
                        ╰── <158> Var [result]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_array_of_structs() {
    let src = r#"
        struct inner {
            long l;
            char arr[2];
        };
        struct outer {
            char a;
            struct inner b;
        };
        int validate_struct_array(struct outer *struct_array);
        
        int validate_struct_array(struct outer *struct_array) {
            for (int i = 0; i < 3; i = i + 1) {
                if (struct_array[i].a != i * 2)
                    return 0;
                if (struct_array[i].b.l != i * 3)
                    return 0;
                if (struct_array[i].b.arr[0] != i * 4)
                    return 0;
                if (struct_array[i].b.arr[1] != i * 5)
                    return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Char
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [validate_struct_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── struct_array
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ╰── Function [validate_struct_array]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── struct_array
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Struct [outer]
                ╰── Body
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <46> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <54>  [<]
                    │   │       ├── <51> Var [i]
                    │   │       ╰── <53> Constant Int [3]
                    │   ├── Condition
                    │   │   ╰── <63> Assign [=]
                    │   │       ├── <56> Var [i]
                    │   │       ╰── <62>  [+]
                    │   │           ├── <59> Var [i]
                    │   │           ╰── <61> Constant Int [1]
                    │   ╰── Block
                    │       ├── If
                    │       │   ├── Condition
                    │       │   │   ╰── <77>  [!=]
                    │       │   │       ├── <70> Dot
                    │       │   │       │   ├── <68> Subscript
                    │       │   │       │   │   ├── <65> Var [struct_array]
                    │       │   │       │   │   ╰── <67> Var [i]
                    │       │   │       │   ╰── a
                    │       │   │       ╰── <76>  [*]
                    │       │   │           ├── <73> Var [i]
                    │       │   │           ╰── <75> Constant Int [2]
                    │       │   ╰── Then
                    │       │       ╰── Return
                    │       │           ╰── <78> Constant Int [0]
                    │       ├── If
                    │       │   ├── Condition
                    │       │   │   ╰── <96>  [!=]
                    │       │   │       ├── <89> Dot
                    │       │   │       │   ├── <87> Dot
                    │       │   │       │   │   ├── <85> Subscript
                    │       │   │       │   │   │   ├── <82> Var [struct_array]
                    │       │   │       │   │   │   ╰── <84> Var [i]
                    │       │   │       │   │   ╰── b
                    │       │   │       │   ╰── l
                    │       │   │       ╰── <95>  [*]
                    │       │   │           ├── <92> Var [i]
                    │       │   │           ╰── <94> Constant Int [3]
                    │       │   ╰── Then
                    │       │       ╰── Return
                    │       │           ╰── <97> Constant Int [0]
                    │       ├── If
                    │       │   ├── Condition
                    │       │   │   ╰── <117>  [!=]
                    │       │   │       ├── <110> Subscript
                    │       │   │       │   ├── <108> Dot
                    │       │   │       │   │   ├── <106> Dot
                    │       │   │       │   │   │   ├── <104> Subscript
                    │       │   │       │   │   │   │   ├── <101> Var [struct_array]
                    │       │   │       │   │   │   │   ╰── <103> Var [i]
                    │       │   │       │   │   │   ╰── b
                    │       │   │       │   │   ╰── arr
                    │       │   │       │   ╰── <109> Constant Int [0]
                    │       │   │       ╰── <116>  [*]
                    │       │   │           ├── <113> Var [i]
                    │       │   │           ╰── <115> Constant Int [4]
                    │       │   ╰── Then
                    │       │       ╰── Return
                    │       │           ╰── <118> Constant Int [0]
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <138>  [!=]
                    │           │       ├── <131> Subscript
                    │           │       │   ├── <129> Dot
                    │           │       │   │   ├── <127> Dot
                    │           │       │   │   │   ├── <125> Subscript
                    │           │       │   │   │   │   ├── <122> Var [struct_array]
                    │           │       │   │   │   │   ╰── <124> Var [i]
                    │           │       │   │   │   ╰── b
                    │           │       │   │   ╰── arr
                    │           │       │   ╰── <130> Constant Int [1]
                    │           │       ╰── <137>  [*]
                    │           │           ├── <134> Var [i]
                    │           │           ╰── <136> Constant Int [5]
                    │           ╰── Then
                    │               ╰── Return
                    │                   ╰── <139> Constant Int [0]
                    ╰── Return
                        ╰── <145> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_array_of_structs_client() {
    let src = r#"
        struct inner {
            long l;
            char arr[2];
        };
        struct outer {
            char a;
            struct inner b;
        };
        int validate_struct_array(struct outer *struct_array);
        
        static struct outer static_array[3] = {
            {0, {0, {0, 0}}}, {2, {3, {4, 5}}}, {4, {6, {8, 10}}}};
        int main(void) {
            struct outer auto_array[3] = {
                {0, {0, {0, 0}}}, {2, {3, {4, 5}}}, {4, {6, {8, 10}}}};
            if (!validate_struct_array(static_array)) {
                return 1;
            }
            if (!validate_struct_array(auto_array)) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Char
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [validate_struct_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── struct_array
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── static_array
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Struct [outer]
            │   ├── Initializer
            │   │   ╰── Compound
            │   │       ├── Compound
            │   │       │   ├── <41> Constant Int [0]
            │   │       │   ╰── Compound
            │   │       │       ├── <43> Constant Int [0]
            │   │       │       ╰── Compound
            │   │       │           ├── <45> Constant Int [0]
            │   │       │           ╰── <47> Constant Int [0]
            │   │       ├── Compound
            │   │       │   ├── <52> Constant Int [2]
            │   │       │   ╰── Compound
            │   │       │       ├── <54> Constant Int [3]
            │   │       │       ╰── Compound
            │   │       │           ├── <56> Constant Int [4]
            │   │       │           ╰── <58> Constant Int [5]
            │   │       ╰── Compound
            │   │           ├── <63> Constant Int [4]
            │   │           ╰── Compound
            │   │               ├── <65> Constant Int [6]
            │   │               ╰── Compound
            │   │                   ├── <67> Constant Int [8]
            │   │                   ╰── <69> Constant Int [10]
            │   ╰── Static
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── auto_array
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <86> Constant Int [0]
                    │           │   ╰── Compound
                    │           │       ├── <88> Constant Int [0]
                    │           │       ╰── Compound
                    │           │           ├── <90> Constant Int [0]
                    │           │           ╰── <92> Constant Int [0]
                    │           ├── Compound
                    │           │   ├── <97> Constant Int [2]
                    │           │   ╰── Compound
                    │           │       ├── <99> Constant Int [3]
                    │           │       ╰── Compound
                    │           │           ├── <101> Constant Int [4]
                    │           │           ╰── <103> Constant Int [5]
                    │           ╰── Compound
                    │               ├── <108> Constant Int [4]
                    │               ╰── Compound
                    │                   ├── <110> Constant Int [6]
                    │                   ╰── Compound
                    │                       ├── <112> Constant Int [8]
                    │                       ╰── <114> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <126> Unary [!]
                    │   │       ╰── <125> FunctionCall [validate_struct_array]
                    │   │           ╰── <124> Var [static_array]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <127> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <137> Unary [!]
                    │   │       ╰── <136> FunctionCall [validate_struct_array]
                    │   │           ╰── <135> Var [auto_array]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <138> Constant Int [2]
                    ╰── Return
                        ╰── <143> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_global_struct() {
    let src = r#"
        struct s {
            int i;
            char arr[2];
            double d;
        };
        struct outer {
            char c;
            struct s inner;
        };
        extern struct s global;
        extern struct outer global_outer;
        void update_struct(void);
        void update_outer_struct(void);
        
        void update_struct(void) {
            global.arr[1] = global.arr[0] * 2;
            global.d = 5.0;
        }
        void update_outer_struct(void) {
            struct s inner = {0, {-1, -1}, 0};
            global_outer.inner = inner;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── inner
            │       ╰── Type
            │           ╰── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global_outer
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── Function [update_struct]
            ├── Function [update_outer_struct]
            ├── Function [update_struct]
            │   ╰── Body
            │       ├── <70> Assign [=]
            │       │   ├── <59> Subscript
            │       │   │   ├── <57> Dot
            │       │   │   │   ├── <55> Var [global]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <58> Constant Int [1]
            │       │   ╰── <69>  [*]
            │       │       ├── <66> Subscript
            │       │       │   ├── <64> Dot
            │       │       │   │   ├── <62> Var [global]
            │       │       │   │   ╰── arr
            │       │       │   ╰── <65> Constant Int [0]
            │       │       ╰── <68> Constant Int [2]
            │       ╰── <78> Assign [=]
            │           ├── <75> Dot
            │           │   ├── <73> Var [global]
            │           │   ╰── d
            │           ╰── <77> Constant Double [+5e0]
            ╰── Function [update_outer_struct]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── inner
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <90> Constant Int [0]
                    │           ├── Compound
                    │           │   ├── <94> Unary [-]
                    │           │   │   ╰── <93> Constant Int [1]
                    │           │   ╰── <98> Unary [-]
                    │           │       ╰── <97> Constant Int [1]
                    │           ╰── <101> Constant Int [0]
                    ╰── <112> Assign [=]
                        ├── <108> Dot
                        │   ├── <106> Var [global_outer]
                        │   ╰── inner
                        ╰── <111> Var [inner]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_global_struct_client() {
    let src = r#"
        struct s {
            int i;
            char arr[2];
            double d;
        };
        struct outer {
            char c;
            struct s inner;
        };
        extern struct s global;
        extern struct outer global_outer;
        void update_struct(void);
        void update_outer_struct(void);
        
        struct s global = {1, {2, 3}, 4.0};
        struct outer global_outer = {5, {6, {7, 8}, 9.0}};
        int main(void) {
            update_struct();
            if (global.arr[1] != 4) {
                return 1;
            }
            if (global.d != 5.0) {
                return 2;
            }
            update_outer_struct();
            if (global_outer.c != 5) {
                return 3;
            }
            if (global_outer.inner.i || global_outer.inner.d) {
                return 4;
            }
            if (global_outer.inner.arr[0] != -1 || global_outer.inner.arr[1] != -1) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── inner
            │       ╰── Type
            │           ╰── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global_outer
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── Function [update_struct]
            ├── Function [update_outer_struct]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <54> Constant Int [1]
            │           ├── Compound
            │           │   ├── <56> Constant Int [2]
            │           │   ╰── <58> Constant Int [3]
            │           ╰── <61> Constant Double [+4e0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global_outer
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <69> Constant Int [5]
            │           ╰── Compound
            │               ├── <71> Constant Int [6]
            │               ├── Compound
            │               │   ├── <73> Constant Int [7]
            │               │   ╰── <75> Constant Int [8]
            │               ╰── <78> Constant Double [+9e0]
            ╰── Function [main]
                ╰── Body
                    ├── <88> FunctionCall [update_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <98>  [!=]
                    │   │       ├── <95> Subscript
                    │   │       │   ├── <93> Dot
                    │   │       │   │   ├── <91> Var [global]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <94> Constant Int [1]
                    │   │       ╰── <97> Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <99> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <110>  [!=]
                    │   │       ├── <107> Dot
                    │   │       │   ├── <105> Var [global]
                    │   │       │   ╰── d
                    │   │       ╰── <109> Constant Double [+5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <111> Constant Int [2]
                    ├── <117> FunctionCall [update_outer_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <125>  [!=]
                    │   │       ├── <122> Dot
                    │   │       │   ├── <120> Var [global_outer]
                    │   │       │   ╰── c
                    │   │       ╰── <124> Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <126> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <144>  [||]
                    │   │       ├── <136> Dot
                    │   │       │   ├── <134> Dot
                    │   │       │   │   ├── <132> Var [global_outer]
                    │   │       │   │   ╰── inner
                    │   │       │   ╰── i
                    │   │       ╰── <143> Dot
                    │   │           ├── <141> Dot
                    │   │           │   ├── <139> Var [global_outer]
                    │   │           │   ╰── inner
                    │   │           ╰── d
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <145> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <177>  [||]
                    │   │       ├── <162>  [!=]
                    │   │       │   ├── <157> Subscript
                    │   │       │   │   ├── <155> Dot
                    │   │       │   │   │   ├── <153> Dot
                    │   │       │   │   │   │   ├── <151> Var [global_outer]
                    │   │       │   │   │   │   ╰── inner
                    │   │       │   │   │   ╰── arr
                    │   │       │   │   ╰── <156> Constant Int [0]
                    │   │       │   ╰── <161> Unary [-]
                    │   │       │       ╰── <160> Constant Int [1]
                    │   │       ╰── <176>  [!=]
                    │   │           ├── <171> Subscript
                    │   │           │   ├── <169> Dot
                    │   │           │   │   ├── <167> Dot
                    │   │           │   │   │   ├── <165> Var [global_outer]
                    │   │           │   │   │   ╰── inner
                    │   │           │   │   ╰── arr
                    │   │           │   ╰── <170> Constant Int [1]
                    │   │           ╰── <175> Unary [-]
                    │   │               ╰── <174> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <178> Constant Int [5]
                    ╰── Return
                        ╰── <183> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_auto_struct_initializers() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void *malloc(unsigned long size);
        void *calloc(unsigned long nmemb, unsigned long size);
        struct s {
            char *one_msg;
            unsigned char two_arr[3];
            struct s *three_self_ptr;
            double four_d;
            double *five_d_ptr;
        };
        int validate_full_initialization(struct s *ptr);
        int validate_partial_initialization(struct s *ptr, char *expected_msg);
        int validate_converted(struct s *ptr);
        int validate_two_structs(struct s *ptr1, struct s *ptr2);
        
        int validate_full_initialization(struct s *ptr) {
            if (strcmp(ptr->one_msg, "I'm a struct!") || ptr->two_arr[0] != 's' ||
                ptr->two_arr[1] != 'u' || ptr->two_arr[2] != 'p' ||
                ptr->three_self_ptr != ptr || ptr->four_d != 2e12 ||
                *ptr->five_d_ptr != 2e12) {
                return 0;
            }
            return 1;
        }
        int validate_partial_initialization(struct s *ptr, char *expected_msg) {
            if (ptr->one_msg != expected_msg || ptr->two_arr[0] != 'a' ||
                ptr->two_arr[1] != 'b') {
                return 0;
            }
            if (ptr->three_self_ptr->one_msg) {
                return 0;
            }
            if (ptr->two_arr[2] || ptr->four_d || ptr->five_d_ptr) {
                return 0;
            }
            return 1;
        }
        int validate_converted(struct s *ptr) {
            if (!ptr->one_msg ||
                ptr->two_arr[0] != 220 || ptr->two_arr[1] != 232 ||
                ptr->two_arr[2] != 224 || ptr->three_self_ptr ||
                ptr->four_d != 2999.0 || *ptr->five_d_ptr != 0.0) {
                return 0;
            }
            return 1;
        }
        int validate_two_structs(struct s *ptr1, struct s *ptr2) {
            if (strcmp(ptr2->one_msg, "Yet another string") ||
                ptr2->one_msg != ptr1->one_msg ||
                ptr2->two_arr[0] != 'x' || ptr2->two_arr[1] != 'y' ||
                ptr2->three_self_ptr !=
                    ptr1 ||
                ptr2->four_d != 150.0 ||
                *ptr1->five_d_ptr != 123.4) {
                return 0;
            }
            if (ptr1->two_arr == ptr2->two_arr) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Unsigned Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_self_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── four_d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── five_d_ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Double
            ├── Function [validate_full_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [validate_partial_initialization]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [s]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── expected_msg
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [validate_converted]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [validate_two_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [s]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [validate_full_initialization]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [s]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <189>  [||]
            │       │   │       ├── <179>  [||]
            │       │   │       │   ├── <170>  [||]
            │       │   │       │   │   ├── <160>  [||]
            │       │   │       │   │   │   ├── <149>  [||]
            │       │   │       │   │   │   │   ├── <138>  [||]
            │       │   │       │   │   │   │   │   ├── <127> FunctionCall [strcmp]
            │       │   │       │   │   │   │   │   │   ├── <125> Arrow
            │       │   │       │   │   │   │   │   │   │   ├── <123> Var [ptr]
            │       │   │       │   │   │   │   │   │   │   ╰── one_msg
            │       │   │       │   │   │   │   │   │   ╰── <126> "I'm a struct!"
            │       │   │       │   │   │   │   │   ╰── <137>  [!=]
            │       │   │       │   │   │   │   │       ├── <134> Subscript
            │       │   │       │   │   │   │   │       │   ├── <132> Arrow
            │       │   │       │   │   │   │   │       │   │   ├── <130> Var [ptr]
            │       │   │       │   │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │   │       │   ╰── <133> Constant Int [0]
            │       │   │       │   │   │   │   │       ╰── <136> Constant Int [115]
            │       │   │       │   │   │   │   ╰── <148>  [!=]
            │       │   │       │   │   │   │       ├── <145> Subscript
            │       │   │       │   │   │   │       │   ├── <143> Arrow
            │       │   │       │   │   │   │       │   │   ├── <141> Var [ptr]
            │       │   │       │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │       │   ╰── <144> Constant Int [1]
            │       │   │       │   │   │   │       ╰── <147> Constant Int [117]
            │       │   │       │   │   │   ╰── <159>  [!=]
            │       │   │       │   │   │       ├── <156> Subscript
            │       │   │       │   │   │       │   ├── <154> Arrow
            │       │   │       │   │   │       │   │   ├── <152> Var [ptr]
            │       │   │       │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │       │   ╰── <155> Constant Int [2]
            │       │   │       │   │   │       ╰── <158> Constant Int [112]
            │       │   │       │   │   ╰── <169>  [!=]
            │       │   │       │   │       ├── <165> Arrow
            │       │   │       │   │       │   ├── <163> Var [ptr]
            │       │   │       │   │       │   ╰── three_self_ptr
            │       │   │       │   │       ╰── <168> Var [ptr]
            │       │   │       │   ╰── <178>  [!=]
            │       │   │       │       ├── <175> Arrow
            │       │   │       │       │   ├── <173> Var [ptr]
            │       │   │       │       │   ╰── four_d
            │       │   │       │       ╰── <177> Constant Double [+2e12]
            │       │   │       ╰── <188>  [!=]
            │       │   │           ├── <185> Dereference
            │       │   │           │   ╰── <184> Arrow
            │       │   │           │       ├── <182> Var [ptr]
            │       │   │           │       ╰── five_d_ptr
            │       │   │           ╰── <187> Constant Double [+2e12]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <190> Constant Int [0]
            │       ╰── Return
            │           ╰── <195> Constant Int [1]
            ├── Function [validate_partial_initialization]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ptr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Struct [s]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected_msg
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <241>  [||]
            │       │   │       ├── <230>  [||]
            │       │   │       │   ├── <219>  [!=]
            │       │   │       │   │   ├── <215> Arrow
            │       │   │       │   │   │   ├── <213> Var [ptr]
            │       │   │       │   │   │   ╰── one_msg
            │       │   │       │   │   ╰── <218> Var [expected_msg]
            │       │   │       │   ╰── <229>  [!=]
            │       │   │       │       ├── <226> Subscript
            │       │   │       │       │   ├── <224> Arrow
            │       │   │       │       │   │   ├── <222> Var [ptr]
            │       │   │       │       │   │   ╰── two_arr
            │       │   │       │       │   ╰── <225> Constant Int [0]
            │       │   │       │       ╰── <228> Constant Int [97]
            │       │   │       ╰── <240>  [!=]
            │       │   │           ├── <237> Subscript
            │       │   │           │   ├── <235> Arrow
            │       │   │           │   │   ├── <233> Var [ptr]
            │       │   │           │   │   ╰── two_arr
            │       │   │           │   ╰── <236> Constant Int [1]
            │       │   │           ╰── <239> Constant Int [98]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <242> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <252> Arrow
            │       │   │       ├── <250> Arrow
            │       │   │       │   ├── <248> Var [ptr]
            │       │   │       │   ╰── three_self_ptr
            │       │   │       ╰── one_msg
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <253> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <275>  [||]
            │       │   │       ├── <269>  [||]
            │       │   │       │   ├── <263> Subscript
            │       │   │       │   │   ├── <261> Arrow
            │       │   │       │   │   │   ├── <259> Var [ptr]
            │       │   │       │   │   │   ╰── two_arr
            │       │   │       │   │   ╰── <262> Constant Int [2]
            │       │   │       │   ╰── <268> Arrow
            │       │   │       │       ├── <266> Var [ptr]
            │       │   │       │       ╰── four_d
            │       │   │       ╰── <274> Arrow
            │       │   │           ├── <272> Var [ptr]
            │       │   │           ╰── five_d_ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <276> Constant Int [0]
            │       ╰── Return
            │           ╰── <281> Constant Int [1]
            ├── Function [validate_converted]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [s]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <357>  [||]
            │       │   │       ├── <347>  [||]
            │       │   │       │   ├── <338>  [||]
            │       │   │       │   │   ├── <332>  [||]
            │       │   │       │   │   │   ├── <321>  [||]
            │       │   │       │   │   │   │   ├── <310>  [||]
            │       │   │       │   │   │   │   │   ├── <299> Unary [!]
            │       │   │       │   │   │   │   │   │   ╰── <298> Arrow
            │       │   │       │   │   │   │   │   │       ├── <296> Var [ptr]
            │       │   │       │   │   │   │   │   │       ╰── one_msg
            │       │   │       │   │   │   │   │   ╰── <309>  [!=]
            │       │   │       │   │   │   │   │       ├── <306> Subscript
            │       │   │       │   │   │   │   │       │   ├── <304> Arrow
            │       │   │       │   │   │   │   │       │   │   ├── <302> Var [ptr]
            │       │   │       │   │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │   │       │   ╰── <305> Constant Int [0]
            │       │   │       │   │   │   │   │       ╰── <308> Constant Int [220]
            │       │   │       │   │   │   │   ╰── <320>  [!=]
            │       │   │       │   │   │   │       ├── <317> Subscript
            │       │   │       │   │   │   │       │   ├── <315> Arrow
            │       │   │       │   │   │   │       │   │   ├── <313> Var [ptr]
            │       │   │       │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │       │   ╰── <316> Constant Int [1]
            │       │   │       │   │   │   │       ╰── <319> Constant Int [232]
            │       │   │       │   │   │   ╰── <331>  [!=]
            │       │   │       │   │   │       ├── <328> Subscript
            │       │   │       │   │   │       │   ├── <326> Arrow
            │       │   │       │   │   │       │   │   ├── <324> Var [ptr]
            │       │   │       │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │       │   ╰── <327> Constant Int [2]
            │       │   │       │   │   │       ╰── <330> Constant Int [224]
            │       │   │       │   │   ╰── <337> Arrow
            │       │   │       │   │       ├── <335> Var [ptr]
            │       │   │       │   │       ╰── three_self_ptr
            │       │   │       │   ╰── <346>  [!=]
            │       │   │       │       ├── <343> Arrow
            │       │   │       │       │   ├── <341> Var [ptr]
            │       │   │       │       │   ╰── four_d
            │       │   │       │       ╰── <345> Constant Double [+2.999e3]
            │       │   │       ╰── <356>  [!=]
            │       │   │           ├── <353> Dereference
            │       │   │           │   ╰── <352> Arrow
            │       │   │           │       ├── <350> Var [ptr]
            │       │   │           │       ╰── five_d_ptr
            │       │   │           ╰── <355> Constant Double [+0e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <358> Constant Int [0]
            │       ╰── Return
            │           ╰── <363> Constant Int [1]
            ╰── Function [validate_two_structs]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── ptr1
                │   │   ╰── Type
                │   │       ╰── Pointer
                │   │           ╰── Struct [s]
                │   ╰── Param
                │       ├── Name
                │       │   ╰── ptr2
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Struct [s]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <450>  [||]
                    │   │       ├── <440>  [||]
                    │   │       │   ├── <431>  [||]
                    │   │       │   │   ├── <421>  [||]
                    │   │       │   │   │   ├── <410>  [||]
                    │   │       │   │   │   │   ├── <399>  [||]
                    │   │       │   │   │   │   │   ├── <387> FunctionCall [strcmp]
                    │   │       │   │   │   │   │   │   ├── <385> Arrow
                    │   │       │   │   │   │   │   │   │   ├── <383> Var [ptr2]
                    │   │       │   │   │   │   │   │   │   ╰── one_msg
                    │   │       │   │   │   │   │   │   ╰── <386> "Yet another string"
                    │   │       │   │   │   │   │   ╰── <398>  [!=]
                    │   │       │   │   │   │   │       ├── <392> Arrow
                    │   │       │   │   │   │   │       │   ├── <390> Var [ptr2]
                    │   │       │   │   │   │   │       │   ╰── one_msg
                    │   │       │   │   │   │   │       ╰── <397> Arrow
                    │   │       │   │   │   │   │           ├── <395> Var [ptr1]
                    │   │       │   │   │   │   │           ╰── one_msg
                    │   │       │   │   │   │   ╰── <409>  [!=]
                    │   │       │   │   │   │       ├── <406> Subscript
                    │   │       │   │   │   │       │   ├── <404> Arrow
                    │   │       │   │   │   │       │   │   ├── <402> Var [ptr2]
                    │   │       │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │       │   ╰── <405> Constant Int [0]
                    │   │       │   │   │   │       ╰── <408> Constant Int [120]
                    │   │       │   │   │   ╰── <420>  [!=]
                    │   │       │   │   │       ├── <417> Subscript
                    │   │       │   │   │       │   ├── <415> Arrow
                    │   │       │   │   │       │   │   ├── <413> Var [ptr2]
                    │   │       │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │       │   ╰── <416> Constant Int [1]
                    │   │       │   │   │       ╰── <419> Constant Int [121]
                    │   │       │   │   ╰── <430>  [!=]
                    │   │       │   │       ├── <426> Arrow
                    │   │       │   │       │   ├── <424> Var [ptr2]
                    │   │       │   │       │   ╰── three_self_ptr
                    │   │       │   │       ╰── <429> Var [ptr1]
                    │   │       │   ╰── <439>  [!=]
                    │   │       │       ├── <436> Arrow
                    │   │       │       │   ├── <434> Var [ptr2]
                    │   │       │       │   ╰── four_d
                    │   │       │       ╰── <438> Constant Double [+1.5e2]
                    │   │       ╰── <449>  [!=]
                    │   │           ├── <446> Dereference
                    │   │           │   ╰── <445> Arrow
                    │   │           │       ├── <443> Var [ptr1]
                    │   │           │       ╰── five_d_ptr
                    │   │           ╰── <448> Constant Double [+1.234e2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <451> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <465>  [==]
                    │   │       ├── <459> Arrow
                    │   │       │   ├── <457> Var [ptr1]
                    │   │       │   ╰── two_arr
                    │   │       ╰── <464> Arrow
                    │   │           ├── <462> Var [ptr2]
                    │   │           ╰── two_arr
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <466> Constant Int [0]
                    ╰── Return
                        ╰── <471> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_auto_struct_initializers_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void *malloc(unsigned long size);
        void *calloc(unsigned long nmemb, unsigned long size);
        struct s {
            char *one_msg;
            unsigned char two_arr[3];
            struct s *three_self_ptr;
            double four_d;
            double *five_d_ptr;
        };
        int validate_full_initialization(struct s *ptr);
        int validate_partial_initialization(struct s *ptr, char *expected_msg);
        int validate_converted(struct s *ptr);
        int validate_two_structs(struct s *ptr1, struct s *ptr2);
        double get_double(void) {
            return 2e12;
        }
        int test_full_initialization(void) {
            struct s full = {
                "I'm a struct!", "sup",
                &full,
                get_double(),
                &(full.four_d)
            };
            return validate_full_initialization(&full);
        }
        int test_partial_initialization(void) {
            static char *msg = "Another string literal";
            struct s partial = {
                msg,
                {'a', 'b'},
                (struct s *)calloc(
                    1,
                    sizeof(struct s))
            };
            return validate_partial_initialization(&partial, msg);
        }
        int test_implicit_type_conversions(void) {
            static int i = 3000;
            struct s converted = {
                malloc(5),
                {i / 2, i / 3, i * 4},
                0l,
                i - 1,
                calloc(1, sizeof(double))
            };
            return validate_converted(&converted);
        }
        int test_single_exp_initializer(void) {
            double d = 123.4;
            struct s s1 = {"Yet another string", "xy", &s1, 150.0, &d};
            struct s s2 = s1;
            return validate_two_structs(&s1, &s2);
        }
        int main(void) {
            if (!test_full_initialization()) {
                return 1;
            }
            if (!test_partial_initialization()) {
                return 2;
            }
            if (!test_implicit_type_conversions()) {
                return 3;
            }
            if (!test_single_exp_initializer()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Unsigned Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_self_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── four_d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── five_d_ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Double
            ├── Function [validate_full_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [validate_partial_initialization]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [s]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── expected_msg
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [validate_converted]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [validate_two_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [s]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [get_double]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <116> Constant Double [+2e12]
            ├── Function [test_full_initialization]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── full
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <128> "I'm a struct!"
            │       │           ├── <130> "sup"
            │       │           ├── <134> AddressOf
            │       │           │   ╰── <133> Var [full]
            │       │           ├── <137> FunctionCall [get_double]
            │       │           ╰── <144> AddressOf
            │       │               ╰── <143> Dot
            │       │                   ├── <140> Var [full]
            │       │                   ╰── four_d
            │       ╰── Return
            │           ╰── <152> FunctionCall [validate_full_initialization]
            │               ╰── <151> AddressOf
            │                   ╰── <150> Var [full]
            ├── Function [test_partial_initialization]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── msg
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ├── Initializer
            │       │   │   ╰── <165> "Another string literal"
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── partial
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <173> Var [msg]
            │       │           ├── Compound
            │       │           │   ├── <175> Constant Int [97]
            │       │           │   ╰── <177> Constant Int [98]
            │       │           ╰── <191> Cast
            │       │               ├── Target
            │       │               │   ╰── Pointer
            │       │               │       ╰── Struct [s]
            │       │               ╰── Expression
            │       │                   ╰── <190> FunctionCall [calloc]
            │       │                       ├── <185> Constant Int [1]
            │       │                       ╰── <189> SizeOfType
            │       │                           ╰── Struct [s]
            │       ╰── Return
            │           ╰── <201> FunctionCall [validate_partial_initialization]
            │               ├── <198> AddressOf
            │               │   ╰── <197> Var [partial]
            │               ╰── <200> Var [msg]
            ├── Function [test_implicit_type_conversions]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <213> Constant Int [3000]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── converted
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <222> FunctionCall [malloc]
            │       │           │   ╰── <221> Constant Int [5]
            │       │           ├── Compound
            │       │           │   ├── <228>  [/]
            │       │           │   │   ├── <225> Var [i]
            │       │           │   │   ╰── <227> Constant Int [2]
            │       │           │   ├── <234>  [/]
            │       │           │   │   ├── <231> Var [i]
            │       │           │   │   ╰── <233> Constant Int [3]
            │       │           │   ╰── <240>  [*]
            │       │           │       ├── <237> Var [i]
            │       │           │       ╰── <239> Constant Int [4]
            │       │           ├── <243> Constant Long [0]
            │       │           ├── <249>  [-]
            │       │           │   ├── <246> Var [i]
            │       │           │   ╰── <248> Constant Int [1]
            │       │           ╰── <256> FunctionCall [calloc]
            │       │               ├── <252> Constant Int [1]
            │       │               ╰── <255> SizeOfType
            │       │                   ╰── Double
            │       ╰── Return
            │           ╰── <264> FunctionCall [validate_converted]
            │               ╰── <263> AddressOf
            │                   ╰── <262> Var [converted]
            ├── Function [test_single_exp_initializer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ├── Type
            │       │   │   ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <275> Constant Double [+1.234e2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <282> "Yet another string"
            │       │           ├── <284> "xy"
            │       │           ├── <288> AddressOf
            │       │           │   ╰── <287> Var [s1]
            │       │           ├── <290> Constant Double [+1.5e2]
            │       │           ╰── <294> AddressOf
            │       │               ╰── <293> Var [d]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <303> Var [s1]
            │       ╰── Return
            │           ╰── <313> FunctionCall [validate_two_structs]
            │               ├── <309> AddressOf
            │               │   ╰── <308> Var [s1]
            │               ╰── <312> AddressOf
            │                   ╰── <311> Var [s2]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <324> Unary [!]
                    │   │       ╰── <323> FunctionCall [test_full_initialization]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <325> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <333> Unary [!]
                    │   │       ╰── <332> FunctionCall [test_partial_initialization]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <334> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <342> Unary [!]
                    │   │       ╰── <341> FunctionCall [test_implicit_type_conversions]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <343> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <351> Unary [!]
                    │   │       ╰── <350> FunctionCall [test_single_exp_initializer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <352> Constant Int [4]
                    ╰── Return
                        ╰── <357> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_nested_auto_struct_initializers() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct pair {
            int a;
            int b;
        };
        struct inner {
            int one_i;
            unsigned char two_arr[3];
            unsigned three_u;
        };
        struct outer {
            long one_l;
            struct inner two_struct;
            char *three_msg;
            double four_d;
            struct pair five_pair;
        };
        int validate_full_initialization(struct outer *ptr);
        int validate_partial_initialization(struct outer *ptr);
        int validate_mixed_initialization(struct outer *ptr);
        int validate_array_of_structs(struct outer *struct_array);
        
        int validate_full_initialization(struct outer *ptr) {
            if (ptr->one_l != -200l || ptr->two_struct.one_i != -171 ||
                ptr->two_struct.two_arr[0] != 200 ||
                ptr->two_struct.two_arr[1] != 202 ||
                ptr->two_struct.two_arr[2] != 203 || ptr->two_struct.three_u != 40u ||
                strcmp(ptr->three_msg, "Important message!") || ptr->four_d != -22. ||
                ptr->five_pair.a != 1 || ptr->five_pair.b != 2) {
                return 0;
            }
            return 1;
        }
        int validate_partial_initialization(struct outer *ptr) {
            if (ptr->one_l != 1000 || ptr->two_struct.one_i != 1 ||
                strcmp(ptr->three_msg, "Partial")) {
                return 0;
            }
            if (ptr->two_struct.two_arr[0] || ptr->two_struct.two_arr[1] ||
                ptr->two_struct.two_arr[2] || ptr->two_struct.three_u || ptr->four_d ||
                ptr->five_pair.a || ptr->five_pair.b) {
                return 0;
            }
            return 1;
        }
        int validate_mixed_initialization(struct outer *ptr) {
            if (ptr->one_l != 200 || ptr->two_struct.one_i != 20 ||
                ptr->two_struct.two_arr[0] != 21 || ptr->two_struct.three_u != 22u ||
                strcmp(ptr->three_msg, "mixed") || ptr->four_d != 10.0 ||
                ptr->five_pair.a != 99 || ptr->five_pair.b != 100) {
                return 0;
            }
            if (ptr->two_struct.two_arr[1] || ptr->two_struct.two_arr[2]) {
                return 0;
            }
            return 1;
        }
        int validate_array_of_structs(struct outer *struct_array) {
            if (struct_array[0].one_l != 1 || struct_array[0].two_struct.one_i != 2 ||
                struct_array[0].two_struct.two_arr[0] != 3 ||
                struct_array[0].two_struct.two_arr[1] != 4 ||
                struct_array[0].two_struct.two_arr[2] != 5 ||
                struct_array[0].two_struct.three_u != 6 ||
                strcmp(struct_array[0].three_msg, "7") ||
                struct_array[0].four_d != 8.0 || struct_array[0].five_pair.a != 9 ||
                struct_array[0].five_pair.b != 10) {
                return 0;
            }
            if (struct_array[1].one_l != 101 ||
                struct_array[1].two_struct.one_i != 102 ||
                struct_array[1].two_struct.two_arr[0] != 103 ||
                struct_array[1].two_struct.two_arr[1] != 104 ||
                struct_array[1].two_struct.two_arr[2] != 105 ||
                struct_array[1].two_struct.three_u != 106 ||
                strcmp(struct_array[1].three_msg, "107") ||
                struct_array[1].four_d != 108.0 || struct_array[1].five_pair.a != 109 ||
                struct_array[1].five_pair.b != 110) {
                return 0;
            }
            if (struct_array[2].one_l != 201 ||
                struct_array[2].two_struct.one_i != 202 ||
                struct_array[2].two_struct.two_arr[0] != 203 ||
                struct_array[2].two_struct.two_arr[1] ||
                struct_array[2].two_struct.two_arr[2] ||
                struct_array[2].two_struct.three_u ||
                strcmp(struct_array[2].three_msg, "207") ||
                struct_array[2].four_d != 208.0 || struct_array[2].five_pair.a != 209 ||
                struct_array[2].five_pair.b) {
                return 0;
            }
            if (struct_array[3].one_l != 301 || struct_array[3].two_struct.one_i ||
                struct_array[3].two_struct.two_arr[0] ||
                struct_array[3].two_struct.two_arr[1] ||
                struct_array[3].two_struct.two_arr[2] ||
                struct_array[3].two_struct.three_u || struct_array[3].three_msg ||
                struct_array[3].four_d || struct_array[3].five_pair.a ||
                struct_array[3].five_pair.b) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Unsigned Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three_u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_struct
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── four_d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── five_pair
            │       ╰── Type
            │           ╰── Struct [pair]
            ├── Function [validate_full_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_partial_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_mixed_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_array_of_structs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── struct_array
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_full_initialization]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [outer]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <227>  [||]
            │       │   │       ├── <216>  [||]
            │       │   │       │   ├── <205>  [||]
            │       │   │       │   │   ├── <194>  [||]
            │       │   │       │   │   │   ├── <185>  [||]
            │       │   │       │   │   │   │   ├── <174>  [||]
            │       │   │       │   │   │   │   │   ├── <161>  [||]
            │       │   │       │   │   │   │   │   │   ├── <148>  [||]
            │       │   │       │   │   │   │   │   │   │   ├── <135>  [||]
            │       │   │       │   │   │   │   │   │   │   │   ├── <122>  [!=]
            │       │   │       │   │   │   │   │   │   │   │   │   ├── <117> Arrow
            │       │   │       │   │   │   │   │   │   │   │   │   │   ├── <115> Var [ptr]
            │       │   │       │   │   │   │   │   │   │   │   │   │   ╰── one_l
            │       │   │       │   │   │   │   │   │   │   │   │   ╰── <121> Unary [-]
            │       │   │       │   │   │   │   │   │   │   │   │       ╰── <120> Constant Long [200]
            │       │   │       │   │   │   │   │   │   │   │   ╰── <134>  [!=]
            │       │   │       │   │   │   │   │   │   │   │       ├── <129> Dot
            │       │   │       │   │   │   │   │   │   │   │       │   ├── <127> Arrow
            │       │   │       │   │   │   │   │   │   │   │       │   │   ├── <125> Var [ptr]
            │       │   │       │   │   │   │   │   │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   │   │   │       │   ╰── one_i
            │       │   │       │   │   │   │   │   │   │   │       ╰── <133> Unary [-]
            │       │   │       │   │   │   │   │   │   │   │           ╰── <132> Constant Int [171]
            │       │   │       │   │   │   │   │   │   │   ╰── <147>  [!=]
            │       │   │       │   │   │   │   │   │   │       ├── <144> Subscript
            │       │   │       │   │   │   │   │   │   │       │   ├── <142> Dot
            │       │   │       │   │   │   │   │   │   │       │   │   ├── <140> Arrow
            │       │   │       │   │   │   │   │   │   │       │   │   │   ├── <138> Var [ptr]
            │       │   │       │   │   │   │   │   │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │   │   │   │       │   ╰── <143> Constant Int [0]
            │       │   │       │   │   │   │   │   │   │       ╰── <146> Constant Int [200]
            │       │   │       │   │   │   │   │   │   ╰── <160>  [!=]
            │       │   │       │   │   │   │   │   │       ├── <157> Subscript
            │       │   │       │   │   │   │   │   │       │   ├── <155> Dot
            │       │   │       │   │   │   │   │   │       │   │   ├── <153> Arrow
            │       │   │       │   │   │   │   │   │       │   │   │   ├── <151> Var [ptr]
            │       │   │       │   │   │   │   │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │   │   │       │   ╰── <156> Constant Int [1]
            │       │   │       │   │   │   │   │   │       ╰── <159> Constant Int [202]
            │       │   │       │   │   │   │   │   ╰── <173>  [!=]
            │       │   │       │   │   │   │   │       ├── <170> Subscript
            │       │   │       │   │   │   │   │       │   ├── <168> Dot
            │       │   │       │   │   │   │   │       │   │   ├── <166> Arrow
            │       │   │       │   │   │   │   │       │   │   │   ├── <164> Var [ptr]
            │       │   │       │   │   │   │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │   │       │   ╰── <169> Constant Int [2]
            │       │   │       │   │   │   │   │       ╰── <172> Constant Int [203]
            │       │   │       │   │   │   │   ╰── <184>  [!=]
            │       │   │       │   │   │   │       ├── <181> Dot
            │       │   │       │   │   │   │       │   ├── <179> Arrow
            │       │   │       │   │   │   │       │   │   ├── <177> Var [ptr]
            │       │   │       │   │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │   │       │   ╰── three_u
            │       │   │       │   │   │   │       ╰── <183> Constant UInt [40]
            │       │   │       │   │   │   ╰── <193> FunctionCall [strcmp]
            │       │   │       │   │   │       ├── <191> Arrow
            │       │   │       │   │   │       │   ├── <189> Var [ptr]
            │       │   │       │   │   │       │   ╰── three_msg
            │       │   │       │   │   │       ╰── <192> "Important message!"
            │       │   │       │   │   ╰── <204>  [!=]
            │       │   │       │   │       ├── <199> Arrow
            │       │   │       │   │       │   ├── <197> Var [ptr]
            │       │   │       │   │       │   ╰── four_d
            │       │   │       │   │       ╰── <203> Unary [-]
            │       │   │       │   │           ╰── <202> Constant Double [+2.2e1]
            │       │   │       │   ╰── <215>  [!=]
            │       │   │       │       ├── <212> Dot
            │       │   │       │       │   ├── <210> Arrow
            │       │   │       │       │   │   ├── <208> Var [ptr]
            │       │   │       │       │   │   ╰── five_pair
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <214> Constant Int [1]
            │       │   │       ╰── <226>  [!=]
            │       │   │           ├── <223> Dot
            │       │   │           │   ├── <221> Arrow
            │       │   │           │   │   ├── <219> Var [ptr]
            │       │   │           │   │   ╰── five_pair
            │       │   │           │   ╰── b
            │       │   │           ╰── <225> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <228> Constant Int [0]
            │       ╰── Return
            │           ╰── <233> Constant Int [1]
            ├── Function [validate_partial_initialization]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [outer]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <272>  [||]
            │       │   │       ├── <263>  [||]
            │       │   │       │   ├── <252>  [!=]
            │       │   │       │   │   ├── <249> Arrow
            │       │   │       │   │   │   ├── <247> Var [ptr]
            │       │   │       │   │   │   ╰── one_l
            │       │   │       │   │   ╰── <251> Constant Int [1000]
            │       │   │       │   ╰── <262>  [!=]
            │       │   │       │       ├── <259> Dot
            │       │   │       │       │   ├── <257> Arrow
            │       │   │       │       │   │   ├── <255> Var [ptr]
            │       │   │       │       │   │   ╰── two_struct
            │       │   │       │       │   ╰── one_i
            │       │   │       │       ╰── <261> Constant Int [1]
            │       │   │       ╰── <271> FunctionCall [strcmp]
            │       │   │           ├── <269> Arrow
            │       │   │           │   ├── <267> Var [ptr]
            │       │   │           │   ╰── three_msg
            │       │   │           ╰── <270> "Partial"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <273> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <335>  [||]
            │       │   │       ├── <327>  [||]
            │       │   │       │   ├── <319>  [||]
            │       │   │       │   │   ├── <313>  [||]
            │       │   │       │   │   │   ├── <305>  [||]
            │       │   │       │   │   │   │   ├── <295>  [||]
            │       │   │       │   │   │   │   │   ├── <285> Subscript
            │       │   │       │   │   │   │   │   │   ├── <283> Dot
            │       │   │       │   │   │   │   │   │   │   ├── <281> Arrow
            │       │   │       │   │   │   │   │   │   │   │   ├── <279> Var [ptr]
            │       │   │       │   │   │   │   │   │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   │   │   ╰── two_arr
            │       │   │       │   │   │   │   │   │   ╰── <284> Constant Int [0]
            │       │   │       │   │   │   │   │   ╰── <294> Subscript
            │       │   │       │   │   │   │   │       ├── <292> Dot
            │       │   │       │   │   │   │   │       │   ├── <290> Arrow
            │       │   │       │   │   │   │   │       │   │   ├── <288> Var [ptr]
            │       │   │       │   │   │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │   │   │       │   ╰── two_arr
            │       │   │       │   │   │   │   │       ╰── <293> Constant Int [1]
            │       │   │       │   │   │   │   ╰── <304> Subscript
            │       │   │       │   │   │   │       ├── <302> Dot
            │       │   │       │   │   │   │       │   ├── <300> Arrow
            │       │   │       │   │   │   │       │   │   ├── <298> Var [ptr]
            │       │   │       │   │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │   │       │   ╰── two_arr
            │       │   │       │   │   │   │       ╰── <303> Constant Int [2]
            │       │   │       │   │   │   ╰── <312> Dot
            │       │   │       │   │   │       ├── <310> Arrow
            │       │   │       │   │   │       │   ├── <308> Var [ptr]
            │       │   │       │   │   │       │   ╰── two_struct
            │       │   │       │   │   │       ╰── three_u
            │       │   │       │   │   ╰── <318> Arrow
            │       │   │       │   │       ├── <316> Var [ptr]
            │       │   │       │   │       ╰── four_d
            │       │   │       │   ╰── <326> Dot
            │       │   │       │       ├── <324> Arrow
            │       │   │       │       │   ├── <322> Var [ptr]
            │       │   │       │       │   ╰── five_pair
            │       │   │       │       ╰── a
            │       │   │       ╰── <334> Dot
            │       │   │           ├── <332> Arrow
            │       │   │           │   ├── <330> Var [ptr]
            │       │   │           │   ╰── five_pair
            │       │   │           ╰── b
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <336> Constant Int [0]
            │       ╰── Return
            │           ╰── <341> Constant Int [1]
            ├── Function [validate_mixed_initialization]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [outer]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <435>  [||]
            │       │   │       ├── <424>  [||]
            │       │   │       │   ├── <413>  [||]
            │       │   │       │   │   ├── <404>  [||]
            │       │   │       │   │   │   ├── <395>  [||]
            │       │   │       │   │   │   │   ├── <384>  [||]
            │       │   │       │   │   │   │   │   ├── <371>  [||]
            │       │   │       │   │   │   │   │   │   ├── <360>  [!=]
            │       │   │       │   │   │   │   │   │   │   ├── <357> Arrow
            │       │   │       │   │   │   │   │   │   │   │   ├── <355> Var [ptr]
            │       │   │       │   │   │   │   │   │   │   │   ╰── one_l
            │       │   │       │   │   │   │   │   │   │   ╰── <359> Constant Int [200]
            │       │   │       │   │   │   │   │   │   ╰── <370>  [!=]
            │       │   │       │   │   │   │   │   │       ├── <367> Dot
            │       │   │       │   │   │   │   │   │       │   ├── <365> Arrow
            │       │   │       │   │   │   │   │   │       │   │   ├── <363> Var [ptr]
            │       │   │       │   │   │   │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   │       │   ╰── one_i
            │       │   │       │   │   │   │   │   │       ╰── <369> Constant Int [20]
            │       │   │       │   │   │   │   │   ╰── <383>  [!=]
            │       │   │       │   │   │   │   │       ├── <380> Subscript
            │       │   │       │   │   │   │   │       │   ├── <378> Dot
            │       │   │       │   │   │   │   │       │   │   ├── <376> Arrow
            │       │   │       │   │   │   │   │       │   │   │   ├── <374> Var [ptr]
            │       │   │       │   │   │   │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │   │       │   ╰── <379> Constant Int [0]
            │       │   │       │   │   │   │   │       ╰── <382> Constant Int [21]
            │       │   │       │   │   │   │   ╰── <394>  [!=]
            │       │   │       │   │   │   │       ├── <391> Dot
            │       │   │       │   │   │   │       │   ├── <389> Arrow
            │       │   │       │   │   │   │       │   │   ├── <387> Var [ptr]
            │       │   │       │   │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │   │       │   ╰── three_u
            │       │   │       │   │   │   │       ╰── <393> Constant UInt [22]
            │       │   │       │   │   │   ╰── <403> FunctionCall [strcmp]
            │       │   │       │   │   │       ├── <401> Arrow
            │       │   │       │   │   │       │   ├── <399> Var [ptr]
            │       │   │       │   │   │       │   ╰── three_msg
            │       │   │       │   │   │       ╰── <402> "mixed"
            │       │   │       │   │   ╰── <412>  [!=]
            │       │   │       │   │       ├── <409> Arrow
            │       │   │       │   │       │   ├── <407> Var [ptr]
            │       │   │       │   │       │   ╰── four_d
            │       │   │       │   │       ╰── <411> Constant Double [+1e1]
            │       │   │       │   ╰── <423>  [!=]
            │       │   │       │       ├── <420> Dot
            │       │   │       │       │   ├── <418> Arrow
            │       │   │       │       │   │   ├── <416> Var [ptr]
            │       │   │       │       │   │   ╰── five_pair
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <422> Constant Int [99]
            │       │   │       ╰── <434>  [!=]
            │       │   │           ├── <431> Dot
            │       │   │           │   ├── <429> Arrow
            │       │   │           │   │   ├── <427> Var [ptr]
            │       │   │           │   │   ╰── five_pair
            │       │   │           │   ╰── b
            │       │   │           ╰── <433> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <436> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <458>  [||]
            │       │   │       ├── <448> Subscript
            │       │   │       │   ├── <446> Dot
            │       │   │       │   │   ├── <444> Arrow
            │       │   │       │   │   │   ├── <442> Var [ptr]
            │       │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   ╰── two_arr
            │       │   │       │   ╰── <447> Constant Int [1]
            │       │   │       ╰── <457> Subscript
            │       │   │           ├── <455> Dot
            │       │   │           │   ├── <453> Arrow
            │       │   │           │   │   ├── <451> Var [ptr]
            │       │   │           │   │   ╰── two_struct
            │       │   │           │   ╰── two_arr
            │       │   │           ╰── <456> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <459> Constant Int [0]
            │       ╰── Return
            │           ╰── <464> Constant Int [1]
            ╰── Function [validate_array_of_structs]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── struct_array
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Struct [outer]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <604>  [||]
                    │   │       ├── <591>  [||]
                    │   │       │   ├── <578>  [||]
                    │   │       │   │   ├── <567>  [||]
                    │   │       │   │   │   ├── <556>  [||]
                    │   │       │   │   │   │   ├── <543>  [||]
                    │   │       │   │   │   │   │   ├── <528>  [||]
                    │   │       │   │   │   │   │   │   ├── <513>  [||]
                    │   │       │   │   │   │   │   │   │   ├── <498>  [||]
                    │   │       │   │   │   │   │   │   │   │   ├── <485>  [!=]
                    │   │       │   │   │   │   │   │   │   │   │   ├── <482> Dot
                    │   │       │   │   │   │   │   │   │   │   │   │   ├── <480> Subscript
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ├── <478> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ╰── <479> Constant Int [0]
                    │   │       │   │   │   │   │   │   │   │   │   │   ╰── one_l
                    │   │       │   │   │   │   │   │   │   │   │   ╰── <484> Constant Int [1]
                    │   │       │   │   │   │   │   │   │   │   ╰── <497>  [!=]
                    │   │       │   │   │   │   │   │   │   │       ├── <494> Dot
                    │   │       │   │   │   │   │   │   │   │       │   ├── <492> Dot
                    │   │       │   │   │   │   │   │   │   │       │   │   ├── <490> Subscript
                    │   │       │   │   │   │   │   │   │   │       │   │   │   ├── <488> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │       │   │   │   ╰── <489> Constant Int [0]
                    │   │       │   │   │   │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │   │       │   ╰── one_i
                    │   │       │   │   │   │   │   │   │   │       ╰── <496> Constant Int [2]
                    │   │       │   │   │   │   │   │   │   ╰── <512>  [!=]
                    │   │       │   │   │   │   │   │   │       ├── <509> Subscript
                    │   │       │   │   │   │   │   │   │       │   ├── <507> Dot
                    │   │       │   │   │   │   │   │   │       │   │   ├── <505> Dot
                    │   │       │   │   │   │   │   │   │       │   │   │   ├── <503> Subscript
                    │   │       │   │   │   │   │   │   │       │   │   │   │   ├── <501> Var [struct_array]
                    │   │       │   │   │   │   │   │   │       │   │   │   │   ╰── <502> Constant Int [0]
                    │   │       │   │   │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │   │   │       │   ╰── <508> Constant Int [0]
                    │   │       │   │   │   │   │   │   │       ╰── <511> Constant Int [3]
                    │   │       │   │   │   │   │   │   ╰── <527>  [!=]
                    │   │       │   │   │   │   │   │       ├── <524> Subscript
                    │   │       │   │   │   │   │   │       │   ├── <522> Dot
                    │   │       │   │   │   │   │   │       │   │   ├── <520> Dot
                    │   │       │   │   │   │   │   │       │   │   │   ├── <518> Subscript
                    │   │       │   │   │   │   │   │       │   │   │   │   ├── <516> Var [struct_array]
                    │   │       │   │   │   │   │   │       │   │   │   │   ╰── <517> Constant Int [0]
                    │   │       │   │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │   │       │   ╰── <523> Constant Int [1]
                    │   │       │   │   │   │   │   │       ╰── <526> Constant Int [4]
                    │   │       │   │   │   │   │   ╰── <542>  [!=]
                    │   │       │   │   │   │   │       ├── <539> Subscript
                    │   │       │   │   │   │   │       │   ├── <537> Dot
                    │   │       │   │   │   │   │       │   │   ├── <535> Dot
                    │   │       │   │   │   │   │       │   │   │   ├── <533> Subscript
                    │   │       │   │   │   │   │       │   │   │   │   ├── <531> Var [struct_array]
                    │   │       │   │   │   │   │       │   │   │   │   ╰── <532> Constant Int [0]
                    │   │       │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │       │   ╰── <538> Constant Int [2]
                    │   │       │   │   │   │   │       ╰── <541> Constant Int [5]
                    │   │       │   │   │   │   ╰── <555>  [!=]
                    │   │       │   │   │   │       ├── <552> Dot
                    │   │       │   │   │   │       │   ├── <550> Dot
                    │   │       │   │   │   │       │   │   ├── <548> Subscript
                    │   │       │   │   │   │       │   │   │   ├── <546> Var [struct_array]
                    │   │       │   │   │   │       │   │   │   ╰── <547> Constant Int [0]
                    │   │       │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │       │   ╰── three_u
                    │   │       │   │   │   │       ╰── <554> Constant Int [6]
                    │   │       │   │   │   ╰── <566> FunctionCall [strcmp]
                    │   │       │   │   │       ├── <564> Dot
                    │   │       │   │   │       │   ├── <562> Subscript
                    │   │       │   │   │       │   │   ├── <560> Var [struct_array]
                    │   │       │   │   │       │   │   ╰── <561> Constant Int [0]
                    │   │       │   │   │       │   ╰── three_msg
                    │   │       │   │   │       ╰── <565> "7"
                    │   │       │   │   ╰── <577>  [!=]
                    │   │       │   │       ├── <574> Dot
                    │   │       │   │       │   ├── <572> Subscript
                    │   │       │   │       │   │   ├── <570> Var [struct_array]
                    │   │       │   │       │   │   ╰── <571> Constant Int [0]
                    │   │       │   │       │   ╰── four_d
                    │   │       │   │       ╰── <576> Constant Double [+8e0]
                    │   │       │   ╰── <590>  [!=]
                    │   │       │       ├── <587> Dot
                    │   │       │       │   ├── <585> Dot
                    │   │       │       │   │   ├── <583> Subscript
                    │   │       │       │   │   │   ├── <581> Var [struct_array]
                    │   │       │       │   │   │   ╰── <582> Constant Int [0]
                    │   │       │       │   │   ╰── five_pair
                    │   │       │       │   ╰── a
                    │   │       │       ╰── <589> Constant Int [9]
                    │   │       ╰── <603>  [!=]
                    │   │           ├── <600> Dot
                    │   │           │   ├── <598> Dot
                    │   │           │   │   ├── <596> Subscript
                    │   │           │   │   │   ├── <594> Var [struct_array]
                    │   │           │   │   │   ╰── <595> Constant Int [0]
                    │   │           │   │   ╰── five_pair
                    │   │           │   ╰── b
                    │   │           ╰── <602> Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <605> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <737>  [||]
                    │   │       ├── <724>  [||]
                    │   │       │   ├── <711>  [||]
                    │   │       │   │   ├── <700>  [||]
                    │   │       │   │   │   ├── <689>  [||]
                    │   │       │   │   │   │   ├── <676>  [||]
                    │   │       │   │   │   │   │   ├── <661>  [||]
                    │   │       │   │   │   │   │   │   ├── <646>  [||]
                    │   │       │   │   │   │   │   │   │   ├── <631>  [||]
                    │   │       │   │   │   │   │   │   │   │   ├── <618>  [!=]
                    │   │       │   │   │   │   │   │   │   │   │   ├── <615> Dot
                    │   │       │   │   │   │   │   │   │   │   │   │   ├── <613> Subscript
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ├── <611> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ╰── <612> Constant Int [1]
                    │   │       │   │   │   │   │   │   │   │   │   │   ╰── one_l
                    │   │       │   │   │   │   │   │   │   │   │   ╰── <617> Constant Int [101]
                    │   │       │   │   │   │   │   │   │   │   ╰── <630>  [!=]
                    │   │       │   │   │   │   │   │   │   │       ├── <627> Dot
                    │   │       │   │   │   │   │   │   │   │       │   ├── <625> Dot
                    │   │       │   │   │   │   │   │   │   │       │   │   ├── <623> Subscript
                    │   │       │   │   │   │   │   │   │   │       │   │   │   ├── <621> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │       │   │   │   ╰── <622> Constant Int [1]
                    │   │       │   │   │   │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │   │       │   ╰── one_i
                    │   │       │   │   │   │   │   │   │   │       ╰── <629> Constant Int [102]
                    │   │       │   │   │   │   │   │   │   ╰── <645>  [!=]
                    │   │       │   │   │   │   │   │   │       ├── <642> Subscript
                    │   │       │   │   │   │   │   │   │       │   ├── <640> Dot
                    │   │       │   │   │   │   │   │   │       │   │   ├── <638> Dot
                    │   │       │   │   │   │   │   │   │       │   │   │   ├── <636> Subscript
                    │   │       │   │   │   │   │   │   │       │   │   │   │   ├── <634> Var [struct_array]
                    │   │       │   │   │   │   │   │   │       │   │   │   │   ╰── <635> Constant Int [1]
                    │   │       │   │   │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │   │   │       │   ╰── <641> Constant Int [0]
                    │   │       │   │   │   │   │   │   │       ╰── <644> Constant Int [103]
                    │   │       │   │   │   │   │   │   ╰── <660>  [!=]
                    │   │       │   │   │   │   │   │       ├── <657> Subscript
                    │   │       │   │   │   │   │   │       │   ├── <655> Dot
                    │   │       │   │   │   │   │   │       │   │   ├── <653> Dot
                    │   │       │   │   │   │   │   │       │   │   │   ├── <651> Subscript
                    │   │       │   │   │   │   │   │       │   │   │   │   ├── <649> Var [struct_array]
                    │   │       │   │   │   │   │   │       │   │   │   │   ╰── <650> Constant Int [1]
                    │   │       │   │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │   │       │   ╰── <656> Constant Int [1]
                    │   │       │   │   │   │   │   │       ╰── <659> Constant Int [104]
                    │   │       │   │   │   │   │   ╰── <675>  [!=]
                    │   │       │   │   │   │   │       ├── <672> Subscript
                    │   │       │   │   │   │   │       │   ├── <670> Dot
                    │   │       │   │   │   │   │       │   │   ├── <668> Dot
                    │   │       │   │   │   │   │       │   │   │   ├── <666> Subscript
                    │   │       │   │   │   │   │       │   │   │   │   ├── <664> Var [struct_array]
                    │   │       │   │   │   │   │       │   │   │   │   ╰── <665> Constant Int [1]
                    │   │       │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │       │   ╰── <671> Constant Int [2]
                    │   │       │   │   │   │   │       ╰── <674> Constant Int [105]
                    │   │       │   │   │   │   ╰── <688>  [!=]
                    │   │       │   │   │   │       ├── <685> Dot
                    │   │       │   │   │   │       │   ├── <683> Dot
                    │   │       │   │   │   │       │   │   ├── <681> Subscript
                    │   │       │   │   │   │       │   │   │   ├── <679> Var [struct_array]
                    │   │       │   │   │   │       │   │   │   ╰── <680> Constant Int [1]
                    │   │       │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │       │   ╰── three_u
                    │   │       │   │   │   │       ╰── <687> Constant Int [106]
                    │   │       │   │   │   ╰── <699> FunctionCall [strcmp]
                    │   │       │   │   │       ├── <697> Dot
                    │   │       │   │   │       │   ├── <695> Subscript
                    │   │       │   │   │       │   │   ├── <693> Var [struct_array]
                    │   │       │   │   │       │   │   ╰── <694> Constant Int [1]
                    │   │       │   │   │       │   ╰── three_msg
                    │   │       │   │   │       ╰── <698> "107"
                    │   │       │   │   ╰── <710>  [!=]
                    │   │       │   │       ├── <707> Dot
                    │   │       │   │       │   ├── <705> Subscript
                    │   │       │   │       │   │   ├── <703> Var [struct_array]
                    │   │       │   │       │   │   ╰── <704> Constant Int [1]
                    │   │       │   │       │   ╰── four_d
                    │   │       │   │       ╰── <709> Constant Double [+1.08e2]
                    │   │       │   ╰── <723>  [!=]
                    │   │       │       ├── <720> Dot
                    │   │       │       │   ├── <718> Dot
                    │   │       │       │   │   ├── <716> Subscript
                    │   │       │       │   │   │   ├── <714> Var [struct_array]
                    │   │       │       │   │   │   ╰── <715> Constant Int [1]
                    │   │       │       │   │   ╰── five_pair
                    │   │       │       │   ╰── a
                    │   │       │       ╰── <722> Constant Int [109]
                    │   │       ╰── <736>  [!=]
                    │   │           ├── <733> Dot
                    │   │           │   ├── <731> Dot
                    │   │           │   │   ├── <729> Subscript
                    │   │           │   │   │   ├── <727> Var [struct_array]
                    │   │           │   │   │   ╰── <728> Constant Int [1]
                    │   │           │   │   ╰── five_pair
                    │   │           │   ╰── b
                    │   │           ╰── <735> Constant Int [110]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <738> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <858>  [||]
                    │   │       ├── <848>  [||]
                    │   │       │   ├── <835>  [||]
                    │   │       │   │   ├── <824>  [||]
                    │   │       │   │   │   ├── <813>  [||]
                    │   │       │   │   │   │   ├── <803>  [||]
                    │   │       │   │   │   │   │   ├── <791>  [||]
                    │   │       │   │   │   │   │   │   ├── <779>  [||]
                    │   │       │   │   │   │   │   │   │   ├── <764>  [||]
                    │   │       │   │   │   │   │   │   │   │   ├── <751>  [!=]
                    │   │       │   │   │   │   │   │   │   │   │   ├── <748> Dot
                    │   │       │   │   │   │   │   │   │   │   │   │   ├── <746> Subscript
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ├── <744> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ╰── <745> Constant Int [2]
                    │   │       │   │   │   │   │   │   │   │   │   │   ╰── one_l
                    │   │       │   │   │   │   │   │   │   │   │   ╰── <750> Constant Int [201]
                    │   │       │   │   │   │   │   │   │   │   ╰── <763>  [!=]
                    │   │       │   │   │   │   │   │   │   │       ├── <760> Dot
                    │   │       │   │   │   │   │   │   │   │       │   ├── <758> Dot
                    │   │       │   │   │   │   │   │   │   │       │   │   ├── <756> Subscript
                    │   │       │   │   │   │   │   │   │   │       │   │   │   ├── <754> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │       │   │   │   ╰── <755> Constant Int [2]
                    │   │       │   │   │   │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │   │       │   ╰── one_i
                    │   │       │   │   │   │   │   │   │   │       ╰── <762> Constant Int [202]
                    │   │       │   │   │   │   │   │   │   ╰── <778>  [!=]
                    │   │       │   │   │   │   │   │   │       ├── <775> Subscript
                    │   │       │   │   │   │   │   │   │       │   ├── <773> Dot
                    │   │       │   │   │   │   │   │   │       │   │   ├── <771> Dot
                    │   │       │   │   │   │   │   │   │       │   │   │   ├── <769> Subscript
                    │   │       │   │   │   │   │   │   │       │   │   │   │   ├── <767> Var [struct_array]
                    │   │       │   │   │   │   │   │   │       │   │   │   │   ╰── <768> Constant Int [2]
                    │   │       │   │   │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │   │   │       │   ╰── <774> Constant Int [0]
                    │   │       │   │   │   │   │   │   │       ╰── <777> Constant Int [203]
                    │   │       │   │   │   │   │   │   ╰── <790> Subscript
                    │   │       │   │   │   │   │   │       ├── <788> Dot
                    │   │       │   │   │   │   │   │       │   ├── <786> Dot
                    │   │       │   │   │   │   │   │       │   │   ├── <784> Subscript
                    │   │       │   │   │   │   │   │       │   │   │   ├── <782> Var [struct_array]
                    │   │       │   │   │   │   │   │       │   │   │   ╰── <783> Constant Int [2]
                    │   │       │   │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │       │   ╰── two_arr
                    │   │       │   │   │   │   │   │       ╰── <789> Constant Int [1]
                    │   │       │   │   │   │   │   ╰── <802> Subscript
                    │   │       │   │   │   │   │       ├── <800> Dot
                    │   │       │   │   │   │   │       │   ├── <798> Dot
                    │   │       │   │   │   │   │       │   │   ├── <796> Subscript
                    │   │       │   │   │   │   │       │   │   │   ├── <794> Var [struct_array]
                    │   │       │   │   │   │   │       │   │   │   ╰── <795> Constant Int [2]
                    │   │       │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │       │   ╰── two_arr
                    │   │       │   │   │   │   │       ╰── <801> Constant Int [2]
                    │   │       │   │   │   │   ╰── <812> Dot
                    │   │       │   │   │   │       ├── <810> Dot
                    │   │       │   │   │   │       │   ├── <808> Subscript
                    │   │       │   │   │   │       │   │   ├── <806> Var [struct_array]
                    │   │       │   │   │   │       │   │   ╰── <807> Constant Int [2]
                    │   │       │   │   │   │       │   ╰── two_struct
                    │   │       │   │   │   │       ╰── three_u
                    │   │       │   │   │   ╰── <823> FunctionCall [strcmp]
                    │   │       │   │   │       ├── <821> Dot
                    │   │       │   │   │       │   ├── <819> Subscript
                    │   │       │   │   │       │   │   ├── <817> Var [struct_array]
                    │   │       │   │   │       │   │   ╰── <818> Constant Int [2]
                    │   │       │   │   │       │   ╰── three_msg
                    │   │       │   │   │       ╰── <822> "207"
                    │   │       │   │   ╰── <834>  [!=]
                    │   │       │   │       ├── <831> Dot
                    │   │       │   │       │   ├── <829> Subscript
                    │   │       │   │       │   │   ├── <827> Var [struct_array]
                    │   │       │   │       │   │   ╰── <828> Constant Int [2]
                    │   │       │   │       │   ╰── four_d
                    │   │       │   │       ╰── <833> Constant Double [+2.08e2]
                    │   │       │   ╰── <847>  [!=]
                    │   │       │       ├── <844> Dot
                    │   │       │       │   ├── <842> Dot
                    │   │       │       │   │   ├── <840> Subscript
                    │   │       │       │   │   │   ├── <838> Var [struct_array]
                    │   │       │       │   │   │   ╰── <839> Constant Int [2]
                    │   │       │       │   │   ╰── five_pair
                    │   │       │       │   ╰── a
                    │   │       │       ╰── <846> Constant Int [209]
                    │   │       ╰── <857> Dot
                    │   │           ├── <855> Dot
                    │   │           │   ├── <853> Subscript
                    │   │           │   │   ├── <851> Var [struct_array]
                    │   │           │   │   ╰── <852> Constant Int [2]
                    │   │           │   ╰── five_pair
                    │   │           ╰── b
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <859> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <964>  [||]
                    │   │       ├── <954>  [||]
                    │   │       │   ├── <944>  [||]
                    │   │       │   │   ├── <936>  [||]
                    │   │       │   │   │   ├── <928>  [||]
                    │   │       │   │   │   │   ├── <918>  [||]
                    │   │       │   │   │   │   │   ├── <906>  [||]
                    │   │       │   │   │   │   │   │   ├── <894>  [||]
                    │   │       │   │   │   │   │   │   │   ├── <882>  [||]
                    │   │       │   │   │   │   │   │   │   │   ├── <872>  [!=]
                    │   │       │   │   │   │   │   │   │   │   │   ├── <869> Dot
                    │   │       │   │   │   │   │   │   │   │   │   │   ├── <867> Subscript
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ├── <865> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ╰── <866> Constant Int [3]
                    │   │       │   │   │   │   │   │   │   │   │   │   ╰── one_l
                    │   │       │   │   │   │   │   │   │   │   │   ╰── <871> Constant Int [301]
                    │   │       │   │   │   │   │   │   │   │   ╰── <881> Dot
                    │   │       │   │   │   │   │   │   │   │       ├── <879> Dot
                    │   │       │   │   │   │   │   │   │   │       │   ├── <877> Subscript
                    │   │       │   │   │   │   │   │   │   │       │   │   ├── <875> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │       │   │   ╰── <876> Constant Int [3]
                    │   │       │   │   │   │   │   │   │   │       │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │   │       ╰── one_i
                    │   │       │   │   │   │   │   │   │   ╰── <893> Subscript
                    │   │       │   │   │   │   │   │   │       ├── <891> Dot
                    │   │       │   │   │   │   │   │   │       │   ├── <889> Dot
                    │   │       │   │   │   │   │   │   │       │   │   ├── <887> Subscript
                    │   │       │   │   │   │   │   │   │       │   │   │   ├── <885> Var [struct_array]
                    │   │       │   │   │   │   │   │   │       │   │   │   ╰── <886> Constant Int [3]
                    │   │       │   │   │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │       │   ╰── two_arr
                    │   │       │   │   │   │   │   │   │       ╰── <892> Constant Int [0]
                    │   │       │   │   │   │   │   │   ╰── <905> Subscript
                    │   │       │   │   │   │   │   │       ├── <903> Dot
                    │   │       │   │   │   │   │   │       │   ├── <901> Dot
                    │   │       │   │   │   │   │   │       │   │   ├── <899> Subscript
                    │   │       │   │   │   │   │   │       │   │   │   ├── <897> Var [struct_array]
                    │   │       │   │   │   │   │   │       │   │   │   ╰── <898> Constant Int [3]
                    │   │       │   │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │       │   ╰── two_arr
                    │   │       │   │   │   │   │   │       ╰── <904> Constant Int [1]
                    │   │       │   │   │   │   │   ╰── <917> Subscript
                    │   │       │   │   │   │   │       ├── <915> Dot
                    │   │       │   │   │   │   │       │   ├── <913> Dot
                    │   │       │   │   │   │   │       │   │   ├── <911> Subscript
                    │   │       │   │   │   │   │       │   │   │   ├── <909> Var [struct_array]
                    │   │       │   │   │   │   │       │   │   │   ╰── <910> Constant Int [3]
                    │   │       │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │       │   ╰── two_arr
                    │   │       │   │   │   │   │       ╰── <916> Constant Int [2]
                    │   │       │   │   │   │   ╰── <927> Dot
                    │   │       │   │   │   │       ├── <925> Dot
                    │   │       │   │   │   │       │   ├── <923> Subscript
                    │   │       │   │   │   │       │   │   ├── <921> Var [struct_array]
                    │   │       │   │   │   │       │   │   ╰── <922> Constant Int [3]
                    │   │       │   │   │   │       │   ╰── two_struct
                    │   │       │   │   │   │       ╰── three_u
                    │   │       │   │   │   ╰── <935> Dot
                    │   │       │   │   │       ├── <933> Subscript
                    │   │       │   │   │       │   ├── <931> Var [struct_array]
                    │   │       │   │   │       │   ╰── <932> Constant Int [3]
                    │   │       │   │   │       ╰── three_msg
                    │   │       │   │   ╰── <943> Dot
                    │   │       │   │       ├── <941> Subscript
                    │   │       │   │       │   ├── <939> Var [struct_array]
                    │   │       │   │       │   ╰── <940> Constant Int [3]
                    │   │       │   │       ╰── four_d
                    │   │       │   ╰── <953> Dot
                    │   │       │       ├── <951> Dot
                    │   │       │       │   ├── <949> Subscript
                    │   │       │       │   │   ├── <947> Var [struct_array]
                    │   │       │       │   │   ╰── <948> Constant Int [3]
                    │   │       │       │   ╰── five_pair
                    │   │       │       ╰── a
                    │   │       ╰── <963> Dot
                    │   │           ├── <961> Dot
                    │   │           │   ├── <959> Subscript
                    │   │           │   │   ├── <957> Var [struct_array]
                    │   │           │   │   ╰── <958> Constant Int [3]
                    │   │           │   ╰── five_pair
                    │   │           ╰── b
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <965> Constant Int [0]
                    ╰── Return
                        ╰── <970> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_nested_auto_struct_initializers_client(
) {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct pair {
            int a;
            int b;
        };
        struct inner {
            int one_i;
            unsigned char two_arr[3];
            unsigned three_u;
        };
        struct outer {
            long one_l;
            struct inner two_struct;
            char *three_msg;
            double four_d;
            struct pair five_pair;
        };
        int validate_full_initialization(struct outer *ptr);
        int validate_partial_initialization(struct outer *ptr);
        int validate_mixed_initialization(struct outer *ptr);
        int validate_array_of_structs(struct outer *struct_array);
        int test_full_initialization(void) {
            struct outer full = {-200,
                                 {-171l, {-56, -54, -53}, 40.5},
                                 "Important message!",
                                 -22,
                                 {1, 2}};
            return validate_full_initialization(&full);
        }
        int test_partial_initialization(void) {
            struct outer partial = {1000,
                                    {
                                        1,
                                    },
                                    "Partial"};
            return validate_partial_initialization(&partial);
        }
        int test_mixed_initialization(void) {
            struct inner inner1 = {10};
            struct inner inner2 = {20, {21}, 22u};
            static int flag = 0;
            struct outer mixed = {
                200,
                flag ? inner1 : inner2,
                "mixed",
                10.0,
                {99,
                 100}
            };
            return validate_mixed_initialization(&mixed);
        }
        int test_array_of_structs(void) {
            struct outer s0 = {1, {2, {3, 4, 5}, 6}, "7", 8.0, {9, 10}};
            struct inner in1 = {102, {103, 104, 105}, 106};
            struct pair pair1 = {109, 110};
            struct pair pair2 = {209};
            struct outer s3 = {301};
            struct outer struct_array[4] = {
                s0,
                {101, in1, "107", 108.0, pair1},
                {201,
                 {202, {203}},
                 "207",
                 208.0,
                 pair2},
                s3};
            return validate_array_of_structs(struct_array);
        }
        int main(void) {
            if (!test_full_initialization()) {
                return 1;
            }
            if (!test_partial_initialization()) {
                return 2;
            }
            if (!test_mixed_initialization()) {
                return 3;
            }
            if (!test_array_of_structs()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Unsigned Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three_u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_struct
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── four_d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── five_pair
            │       ╰── Type
            │           ╰── Struct [pair]
            ├── Function [validate_full_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_partial_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_mixed_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_array_of_structs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── struct_array
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [test_full_initialization]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── full
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <115> Unary [-]
            │       │           │   ╰── <114> Constant Int [200]
            │       │           ├── Compound
            │       │           │   ├── <119> Unary [-]
            │       │           │   │   ╰── <118> Constant Long [171]
            │       │           │   ├── Compound
            │       │           │   │   ├── <123> Unary [-]
            │       │           │   │   │   ╰── <122> Constant Int [56]
            │       │           │   │   ├── <127> Unary [-]
            │       │           │   │   │   ╰── <126> Constant Int [54]
            │       │           │   │   ╰── <131> Unary [-]
            │       │           │   │       ╰── <130> Constant Int [53]
            │       │           │   ╰── <134> Constant Double [+4.05e1]
            │       │           ├── <137> "Important message!"
            │       │           ├── <141> Unary [-]
            │       │           │   ╰── <140> Constant Int [22]
            │       │           ╰── Compound
            │       │               ├── <143> Constant Int [1]
            │       │               ╰── <145> Constant Int [2]
            │       ╰── Return
            │           ╰── <154> FunctionCall [validate_full_initialization]
            │               ╰── <153> AddressOf
            │                   ╰── <152> Var [full]
            ├── Function [test_partial_initialization]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── partial
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <166> Constant Int [1000]
            │       │           ├── Compound
            │       │           │   ╰── <168> Constant Int [1]
            │       │           ╰── <171> "Partial"
            │       ╰── Return
            │           ╰── <179> FunctionCall [validate_partial_initialization]
            │               ╰── <178> AddressOf
            │                   ╰── <177> Var [partial]
            ├── Function [test_mixed_initialization]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── inner1
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <191> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── inner2
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <199> Constant Int [20]
            │       │           ├── Compound
            │       │           │   ╰── <201> Constant Int [21]
            │       │           ╰── <204> Constant UInt [22]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── flag
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <212> Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── mixed
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <219> Constant Int [200]
            │       │           ├── <227> Conditional [?]
            │       │           │   ├── <222> Var [flag]
            │       │           │   ├── Then
            │       │           │   │   ╰── <224> Var [inner1]
            │       │           │   ╰── Else
            │       │           │       ╰── <226> Var [inner2]
            │       │           ├── <229> "mixed"
            │       │           ├── <231> Constant Double [+1e1]
            │       │           ╰── Compound
            │       │               ├── <233> Constant Int [99]
            │       │               ╰── <235> Constant Int [100]
            │       ╰── Return
            │           ╰── <244> FunctionCall [validate_mixed_initialization]
            │               ╰── <243> AddressOf
            │                   ╰── <242> Var [mixed]
            ├── Function [test_array_of_structs]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s0
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <256> Constant Int [1]
            │       │           ├── Compound
            │       │           │   ├── <258> Constant Int [2]
            │       │           │   ├── Compound
            │       │           │   │   ├── <260> Constant Int [3]
            │       │           │   │   ├── <262> Constant Int [4]
            │       │           │   │   ╰── <264> Constant Int [5]
            │       │           │   ╰── <267> Constant Int [6]
            │       │           ├── <270> "7"
            │       │           ├── <272> Constant Double [+8e0]
            │       │           ╰── Compound
            │       │               ├── <274> Constant Int [9]
            │       │               ╰── <276> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── in1
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <285> Constant Int [102]
            │       │           ├── Compound
            │       │           │   ├── <287> Constant Int [103]
            │       │           │   ├── <289> Constant Int [104]
            │       │           │   ╰── <291> Constant Int [105]
            │       │           ╰── <294> Constant Int [106]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── pair1
            │       │   ├── Type
            │       │   │   ╰── Struct [pair]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <302> Constant Int [109]
            │       │           ╰── <304> Constant Int [110]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── pair2
            │       │   ├── Type
            │       │   │   ╰── Struct [pair]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <312> Constant Int [209]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s3
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <320> Constant Int [301]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── struct_array
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 4
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <331> Var [s0]
            │       │           ├── Compound
            │       │           │   ├── <333> Constant Int [101]
            │       │           │   ├── <336> Var [in1]
            │       │           │   ├── <338> "107"
            │       │           │   ├── <340> Constant Double [+1.08e2]
            │       │           │   ╰── <343> Var [pair1]
            │       │           ├── Compound
            │       │           │   ├── <346> Constant Int [201]
            │       │           │   ├── Compound
            │       │           │   │   ├── <348> Constant Int [202]
            │       │           │   │   ╰── Compound
            │       │           │   │       ╰── <350> Constant Int [203]
            │       │           │   ├── <354> "207"
            │       │           │   ├── <356> Constant Double [+2.08e2]
            │       │           │   ╰── <359> Var [pair2]
            │       │           ╰── <363> Var [s3]
            │       ╰── Return
            │           ╰── <370> FunctionCall [validate_array_of_structs]
            │               ╰── <369> Var [struct_array]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <381> Unary [!]
                    │   │       ╰── <380> FunctionCall [test_full_initialization]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <382> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <390> Unary [!]
                    │   │       ╰── <389> FunctionCall [test_partial_initialization]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <391> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <399> Unary [!]
                    │   │       ╰── <398> FunctionCall [test_mixed_initialization]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <400> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <408> Unary [!]
                    │   │       ╰── <407> FunctionCall [test_array_of_structs]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <409> Constant Int [4]
                    ╰── Return
                        ╰── <414> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_nested_static_struct_initializers() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct inner {
            int one_i;
            signed char two_arr[3];
            unsigned three_u;
        };
        struct outer {
            long one_l;
            struct inner two_struct;
            char *three_msg;
            double four_d;
        };
        extern struct outer all_zeros;
        extern struct outer partial;
        extern struct outer full;
        extern struct outer converted;
        extern struct outer struct_array[3];
        int test_uninitialized(void);
        int test_partially_initialized(void);
        int test_fully_intialized(void);
        int test_implicit_conversions(void);
        int test_array_of_structs(void);
        int test_uninitialized(void) {
            if (all_zeros.one_l || all_zeros.three_msg || all_zeros.four_d) {
                return 0;
            }
            if (all_zeros.two_struct.one_i || all_zeros.two_struct.two_arr[0] ||
                all_zeros.two_struct.two_arr[1] || all_zeros.two_struct.two_arr[2] ||
                all_zeros.two_struct.three_u) {
                return 0;
            }
            return 1;
        }
        int test_partially_initialized(void) {
            if (partial.one_l != 100l || strcmp(partial.three_msg, "Hello!")) {
                return 0;
            }
            if (partial.four_d) {
                return 0;
            }
            if (partial.two_struct.one_i != 10 || partial.two_struct.two_arr[0] != 10) {
                return 0;
            }
            if (partial.two_struct.two_arr[1] || partial.two_struct.two_arr[2] ||
                partial.two_struct
                    .three_u) {
                return 0;
            }
            return 1;
        }
        int test_fully_intialized(void) {
            if (full.one_l != 18014398509481979l ||
                strcmp(full.three_msg, "Another message") || full.four_d != 2e12) {
                return 0;
            }
            if (full.two_struct.one_i != 1000 || full.two_struct.two_arr[0] != 'o' ||
                full.two_struct.two_arr[1] != 'k' || full.two_struct.two_arr[2] != 0 ||
                full.two_struct.three_u != 4292870144u) {
                return 0;
            }
            return 1;
        }
        int test_implicit_conversions(void) {
            if (converted.one_l != 10l || converted.three_msg != 0 ||
                converted.four_d != 9223372036854777856.0) {
                return 0;
            }
            if (converted.two_struct.one_i != -2147483646 ||
                converted.two_struct.two_arr[0] != 15 ||
                converted.two_struct.two_arr[1] != 3 ||
                converted.two_struct.two_arr[2] != -127 ||
                converted.two_struct.three_u != 2147483648u) {
                return 0;
            }
            return 1;
        }
        int test_array_of_structs(void) {
            if (struct_array[0].one_l != 1 || struct_array[0].three_msg != 0 ||
                struct_array[0].four_d != 5) {
                return 0;
            }
            if (struct_array[0].two_struct.one_i != 2 ||
                strcmp((char *)struct_array[0].two_struct.two_arr, "ab") ||
                struct_array[0].two_struct.three_u != 3) {
                return 0;
            }
            if (struct_array[1].one_l != 6 ||
                strcmp((char *)struct_array[1].three_msg, "Message") ||
                struct_array[1].four_d != 9) {
                return 0;
            }
            if (struct_array[1].two_struct.one_i != 7 ||
                strcmp((char *)struct_array[1].two_struct.two_arr, "cd") ||
                struct_array[1].two_struct.three_u != 8) {
                return 0;
            }
            if (struct_array[2].one_l || struct_array[2].three_msg ||
                struct_array[2].four_d) {
                return 0;
            }
            if (struct_array[2].two_struct.one_i ||
                struct_array[2].two_struct.two_arr[0] ||
                struct_array[2].two_struct.two_arr[1] ||
                struct_array[2].two_struct.two_arr[2] ||
                struct_array[2].two_struct.three_u) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Signed Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three_u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_struct
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── four_d
            │       ╰── Type
            │           ╰── Double
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── all_zeros
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── full
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── converted
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── struct_array
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Struct [outer]
            │   ╰── Extern
            ├── Function [test_uninitialized]
            ├── Function [test_partially_initialized]
            ├── Function [test_fully_intialized]
            ├── Function [test_implicit_conversions]
            ├── Function [test_array_of_structs]
            ├── Function [test_uninitialized]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <126>  [||]
            │       │   │       ├── <120>  [||]
            │       │   │       │   ├── <114> Dot
            │       │   │       │   │   ├── <112> Var [all_zeros]
            │       │   │       │   │   ╰── one_l
            │       │   │       │   ╰── <119> Dot
            │       │   │       │       ├── <117> Var [all_zeros]
            │       │   │       │       ╰── three_msg
            │       │   │       ╰── <125> Dot
            │       │   │           ├── <123> Var [all_zeros]
            │       │   │           ╰── four_d
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <127> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <175>  [||]
            │       │   │       ├── <167>  [||]
            │       │   │       │   ├── <157>  [||]
            │       │   │       │   │   ├── <147>  [||]
            │       │   │       │   │   │   ├── <137> Dot
            │       │   │       │   │   │   │   ├── <135> Dot
            │       │   │       │   │   │   │   │   ├── <133> Var [all_zeros]
            │       │   │       │   │   │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   ╰── one_i
            │       │   │       │   │   │   ╰── <146> Subscript
            │       │   │       │   │   │       ├── <144> Dot
            │       │   │       │   │   │       │   ├── <142> Dot
            │       │   │       │   │   │       │   │   ├── <140> Var [all_zeros]
            │       │   │       │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │       │   ╰── two_arr
            │       │   │       │   │   │       ╰── <145> Constant Int [0]
            │       │   │       │   │   ╰── <156> Subscript
            │       │   │       │   │       ├── <154> Dot
            │       │   │       │   │       │   ├── <152> Dot
            │       │   │       │   │       │   │   ├── <150> Var [all_zeros]
            │       │   │       │   │       │   │   ╰── two_struct
            │       │   │       │   │       │   ╰── two_arr
            │       │   │       │   │       ╰── <155> Constant Int [1]
            │       │   │       │   ╰── <166> Subscript
            │       │   │       │       ├── <164> Dot
            │       │   │       │       │   ├── <162> Dot
            │       │   │       │       │   │   ├── <160> Var [all_zeros]
            │       │   │       │       │   │   ╰── two_struct
            │       │   │       │       │   ╰── two_arr
            │       │   │       │       ╰── <165> Constant Int [2]
            │       │   │       ╰── <174> Dot
            │       │   │           ├── <172> Dot
            │       │   │           │   ├── <170> Var [all_zeros]
            │       │   │           │   ╰── two_struct
            │       │   │           ╰── three_u
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <176> Constant Int [0]
            │       ╰── Return
            │           ╰── <181> Constant Int [1]
            ├── Function [test_partially_initialized]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <204>  [||]
            │       │   │       ├── <195>  [!=]
            │       │   │       │   ├── <192> Dot
            │       │   │       │   │   ├── <190> Var [partial]
            │       │   │       │   │   ╰── one_l
            │       │   │       │   ╰── <194> Constant Long [100]
            │       │   │       ╰── <203> FunctionCall [strcmp]
            │       │   │           ├── <201> Dot
            │       │   │           │   ├── <199> Var [partial]
            │       │   │           │   ╰── three_msg
            │       │   │           ╰── <202> "Hello!"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <205> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <213> Dot
            │       │   │       ├── <211> Var [partial]
            │       │   │       ╰── four_d
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <214> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <240>  [||]
            │       │   │       ├── <227>  [!=]
            │       │   │       │   ├── <224> Dot
            │       │   │       │   │   ├── <222> Dot
            │       │   │       │   │   │   ├── <220> Var [partial]
            │       │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   ╰── one_i
            │       │   │       │   ╰── <226> Constant Int [10]
            │       │   │       ╰── <239>  [!=]
            │       │   │           ├── <236> Subscript
            │       │   │           │   ├── <234> Dot
            │       │   │           │   │   ├── <232> Dot
            │       │   │           │   │   │   ├── <230> Var [partial]
            │       │   │           │   │   │   ╰── two_struct
            │       │   │           │   │   ╰── two_arr
            │       │   │           │   ╰── <235> Constant Int [0]
            │       │   │           ╰── <238> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <241> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <271>  [||]
            │       │   │       ├── <263>  [||]
            │       │   │       │   ├── <253> Subscript
            │       │   │       │   │   ├── <251> Dot
            │       │   │       │   │   │   ├── <249> Dot
            │       │   │       │   │   │   │   ├── <247> Var [partial]
            │       │   │       │   │   │   │   ╰── two_struct
            │       │   │       │   │   │   ╰── two_arr
            │       │   │       │   │   ╰── <252> Constant Int [1]
            │       │   │       │   ╰── <262> Subscript
            │       │   │       │       ├── <260> Dot
            │       │   │       │       │   ├── <258> Dot
            │       │   │       │       │   │   ├── <256> Var [partial]
            │       │   │       │       │   │   ╰── two_struct
            │       │   │       │       │   ╰── two_arr
            │       │   │       │       ╰── <261> Constant Int [2]
            │       │   │       ╰── <270> Dot
            │       │   │           ├── <268> Dot
            │       │   │           │   ├── <266> Var [partial]
            │       │   │           │   ╰── two_struct
            │       │   │           ╰── three_u
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <272> Constant Int [0]
            │       ╰── Return
            │           ╰── <277> Constant Int [1]
            ├── Function [test_fully_intialized]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <309>  [||]
            │       │   │       ├── <300>  [||]
            │       │   │       │   ├── <291>  [!=]
            │       │   │       │   │   ├── <288> Dot
            │       │   │       │   │   │   ├── <286> Var [full]
            │       │   │       │   │   │   ╰── one_l
            │       │   │       │   │   ╰── <290> Constant Long [18014398509481979]
            │       │   │       │   ╰── <299> FunctionCall [strcmp]
            │       │   │       │       ├── <297> Dot
            │       │   │       │       │   ├── <295> Var [full]
            │       │   │       │       │   ╰── three_msg
            │       │   │       │       ╰── <298> "Another message"
            │       │   │       ╰── <308>  [!=]
            │       │   │           ├── <305> Dot
            │       │   │           │   ├── <303> Var [full]
            │       │   │           │   ╰── four_d
            │       │   │           ╰── <307> Constant Double [+2e12]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <310> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <373>  [||]
            │       │   │       ├── <362>  [||]
            │       │   │       │   ├── <349>  [||]
            │       │   │       │   │   ├── <336>  [||]
            │       │   │       │   │   │   ├── <323>  [!=]
            │       │   │       │   │   │   │   ├── <320> Dot
            │       │   │       │   │   │   │   │   ├── <318> Dot
            │       │   │       │   │   │   │   │   │   ├── <316> Var [full]
            │       │   │       │   │   │   │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   ╰── one_i
            │       │   │       │   │   │   │   ╰── <322> Constant Int [1000]
            │       │   │       │   │   │   ╰── <335>  [!=]
            │       │   │       │   │   │       ├── <332> Subscript
            │       │   │       │   │   │       │   ├── <330> Dot
            │       │   │       │   │   │       │   │   ├── <328> Dot
            │       │   │       │   │   │       │   │   │   ├── <326> Var [full]
            │       │   │       │   │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │       │   ╰── <331> Constant Int [0]
            │       │   │       │   │   │       ╰── <334> Constant Int [111]
            │       │   │       │   │   ╰── <348>  [!=]
            │       │   │       │   │       ├── <345> Subscript
            │       │   │       │   │       │   ├── <343> Dot
            │       │   │       │   │       │   │   ├── <341> Dot
            │       │   │       │   │       │   │   │   ├── <339> Var [full]
            │       │   │       │   │       │   │   │   ╰── two_struct
            │       │   │       │   │       │   │   ╰── two_arr
            │       │   │       │   │       │   ╰── <344> Constant Int [1]
            │       │   │       │   │       ╰── <347> Constant Int [107]
            │       │   │       │   ╰── <361>  [!=]
            │       │   │       │       ├── <358> Subscript
            │       │   │       │       │   ├── <356> Dot
            │       │   │       │       │   │   ├── <354> Dot
            │       │   │       │       │   │   │   ├── <352> Var [full]
            │       │   │       │       │   │   │   ╰── two_struct
            │       │   │       │       │   │   ╰── two_arr
            │       │   │       │       │   ╰── <357> Constant Int [2]
            │       │   │       │       ╰── <360> Constant Int [0]
            │       │   │       ╰── <372>  [!=]
            │       │   │           ├── <369> Dot
            │       │   │           │   ├── <367> Dot
            │       │   │           │   │   ├── <365> Var [full]
            │       │   │           │   │   ╰── two_struct
            │       │   │           │   ╰── three_u
            │       │   │           ╰── <371> Constant UInt [4292870144]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <374> Constant Int [0]
            │       ╰── Return
            │           ╰── <379> Constant Int [1]
            ├── Function [test_implicit_conversions]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <411>  [||]
            │       │   │       ├── <402>  [||]
            │       │   │       │   ├── <393>  [!=]
            │       │   │       │   │   ├── <390> Dot
            │       │   │       │   │   │   ├── <388> Var [converted]
            │       │   │       │   │   │   ╰── one_l
            │       │   │       │   │   ╰── <392> Constant Long [10]
            │       │   │       │   ╰── <401>  [!=]
            │       │   │       │       ├── <398> Dot
            │       │   │       │       │   ├── <396> Var [converted]
            │       │   │       │       │   ╰── three_msg
            │       │   │       │       ╰── <400> Constant Int [0]
            │       │   │       ╰── <410>  [!=]
            │       │   │           ├── <407> Dot
            │       │   │           │   ├── <405> Var [converted]
            │       │   │           │   ╰── four_d
            │       │   │           ╰── <409> Constant Double [+9.223372036854778e18]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <412> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <479>  [||]
            │       │   │       ├── <468>  [||]
            │       │   │       │   ├── <453>  [||]
            │       │   │       │   │   ├── <440>  [||]
            │       │   │       │   │   │   ├── <427>  [!=]
            │       │   │       │   │   │   │   ├── <422> Dot
            │       │   │       │   │   │   │   │   ├── <420> Dot
            │       │   │       │   │   │   │   │   │   ├── <418> Var [converted]
            │       │   │       │   │   │   │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   ╰── one_i
            │       │   │       │   │   │   │   ╰── <426> Unary [-]
            │       │   │       │   │   │   │       ╰── <425> Constant Int [2147483646]
            │       │   │       │   │   │   ╰── <439>  [!=]
            │       │   │       │   │   │       ├── <436> Subscript
            │       │   │       │   │   │       │   ├── <434> Dot
            │       │   │       │   │   │       │   │   ├── <432> Dot
            │       │   │       │   │   │       │   │   │   ├── <430> Var [converted]
            │       │   │       │   │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │       │   ╰── <435> Constant Int [0]
            │       │   │       │   │   │       ╰── <438> Constant Int [15]
            │       │   │       │   │   ╰── <452>  [!=]
            │       │   │       │   │       ├── <449> Subscript
            │       │   │       │   │       │   ├── <447> Dot
            │       │   │       │   │       │   │   ├── <445> Dot
            │       │   │       │   │       │   │   │   ├── <443> Var [converted]
            │       │   │       │   │       │   │   │   ╰── two_struct
            │       │   │       │   │       │   │   ╰── two_arr
            │       │   │       │   │       │   ╰── <448> Constant Int [1]
            │       │   │       │   │       ╰── <451> Constant Int [3]
            │       │   │       │   ╰── <467>  [!=]
            │       │   │       │       ├── <462> Subscript
            │       │   │       │       │   ├── <460> Dot
            │       │   │       │       │   │   ├── <458> Dot
            │       │   │       │       │   │   │   ├── <456> Var [converted]
            │       │   │       │       │   │   │   ╰── two_struct
            │       │   │       │       │   │   ╰── two_arr
            │       │   │       │       │   ╰── <461> Constant Int [2]
            │       │   │       │       ╰── <466> Unary [-]
            │       │   │       │           ╰── <465> Constant Int [127]
            │       │   │       ╰── <478>  [!=]
            │       │   │           ├── <475> Dot
            │       │   │           │   ├── <473> Dot
            │       │   │           │   │   ├── <471> Var [converted]
            │       │   │           │   │   ╰── two_struct
            │       │   │           │   ╰── three_u
            │       │   │           ╰── <477> Constant UInt [2147483648]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <480> Constant Int [0]
            │       ╰── Return
            │           ╰── <485> Constant Int [1]
            ╰── Function [test_array_of_structs]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <523>  [||]
                    │   │       ├── <512>  [||]
                    │   │       │   ├── <501>  [!=]
                    │   │       │   │   ├── <498> Dot
                    │   │       │   │   │   ├── <496> Subscript
                    │   │       │   │   │   │   ├── <494> Var [struct_array]
                    │   │       │   │   │   │   ╰── <495> Constant Int [0]
                    │   │       │   │   │   ╰── one_l
                    │   │       │   │   ╰── <500> Constant Int [1]
                    │   │       │   ╰── <511>  [!=]
                    │   │       │       ├── <508> Dot
                    │   │       │       │   ├── <506> Subscript
                    │   │       │       │   │   ├── <504> Var [struct_array]
                    │   │       │       │   │   ╰── <505> Constant Int [0]
                    │   │       │       │   ╰── three_msg
                    │   │       │       ╰── <510> Constant Int [0]
                    │   │       ╰── <522>  [!=]
                    │   │           ├── <519> Dot
                    │   │           │   ├── <517> Subscript
                    │   │           │   │   ├── <515> Var [struct_array]
                    │   │           │   │   ╰── <516> Constant Int [0]
                    │   │           │   ╰── four_d
                    │   │           ╰── <521> Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <524> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <569>  [||]
                    │   │       ├── <556>  [||]
                    │   │       │   ├── <539>  [!=]
                    │   │       │   │   ├── <536> Dot
                    │   │       │   │   │   ├── <534> Dot
                    │   │       │   │   │   │   ├── <532> Subscript
                    │   │       │   │   │   │   │   ├── <530> Var [struct_array]
                    │   │       │   │   │   │   │   ╰── <531> Constant Int [0]
                    │   │       │   │   │   │   ╰── two_struct
                    │   │       │   │   │   ╰── one_i
                    │   │       │   │   ╰── <538> Constant Int [2]
                    │   │       │   ╰── <555> FunctionCall [strcmp]
                    │   │       │       ├── <553> Cast
                    │   │       │       │   ├── Target
                    │   │       │       │   │   ╰── Pointer
                    │   │       │       │   │       ╰── Char
                    │   │       │       │   ╰── Expression
                    │   │       │       │       ╰── <552> Dot
                    │   │       │       │           ├── <550> Dot
                    │   │       │       │           │   ├── <548> Subscript
                    │   │       │       │           │   │   ├── <546> Var [struct_array]
                    │   │       │       │           │   │   ╰── <547> Constant Int [0]
                    │   │       │       │           │   ╰── two_struct
                    │   │       │       │           ╰── two_arr
                    │   │       │       ╰── <554> "ab"
                    │   │       ╰── <568>  [!=]
                    │   │           ├── <565> Dot
                    │   │           │   ├── <563> Dot
                    │   │           │   │   ├── <561> Subscript
                    │   │           │   │   │   ├── <559> Var [struct_array]
                    │   │           │   │   │   ╰── <560> Constant Int [0]
                    │   │           │   │   ╰── two_struct
                    │   │           │   ╰── three_u
                    │   │           ╰── <567> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <570> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <609>  [||]
                    │   │       ├── <598>  [||]
                    │   │       │   ├── <583>  [!=]
                    │   │       │   │   ├── <580> Dot
                    │   │       │   │   │   ├── <578> Subscript
                    │   │       │   │   │   │   ├── <576> Var [struct_array]
                    │   │       │   │   │   │   ╰── <577> Constant Int [1]
                    │   │       │   │   │   ╰── one_l
                    │   │       │   │   ╰── <582> Constant Int [6]
                    │   │       │   ╰── <597> FunctionCall [strcmp]
                    │   │       │       ├── <595> Cast
                    │   │       │       │   ├── Target
                    │   │       │       │   │   ╰── Pointer
                    │   │       │       │   │       ╰── Char
                    │   │       │       │   ╰── Expression
                    │   │       │       │       ╰── <594> Dot
                    │   │       │       │           ├── <592> Subscript
                    │   │       │       │           │   ├── <590> Var [struct_array]
                    │   │       │       │           │   ╰── <591> Constant Int [1]
                    │   │       │       │           ╰── three_msg
                    │   │       │       ╰── <596> "Message"
                    │   │       ╰── <608>  [!=]
                    │   │           ├── <605> Dot
                    │   │           │   ├── <603> Subscript
                    │   │           │   │   ├── <601> Var [struct_array]
                    │   │           │   │   ╰── <602> Constant Int [1]
                    │   │           │   ╰── four_d
                    │   │           ╰── <607> Constant Int [9]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <610> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <655>  [||]
                    │   │       ├── <642>  [||]
                    │   │       │   ├── <625>  [!=]
                    │   │       │   │   ├── <622> Dot
                    │   │       │   │   │   ├── <620> Dot
                    │   │       │   │   │   │   ├── <618> Subscript
                    │   │       │   │   │   │   │   ├── <616> Var [struct_array]
                    │   │       │   │   │   │   │   ╰── <617> Constant Int [1]
                    │   │       │   │   │   │   ╰── two_struct
                    │   │       │   │   │   ╰── one_i
                    │   │       │   │   ╰── <624> Constant Int [7]
                    │   │       │   ╰── <641> FunctionCall [strcmp]
                    │   │       │       ├── <639> Cast
                    │   │       │       │   ├── Target
                    │   │       │       │   │   ╰── Pointer
                    │   │       │       │   │       ╰── Char
                    │   │       │       │   ╰── Expression
                    │   │       │       │       ╰── <638> Dot
                    │   │       │       │           ├── <636> Dot
                    │   │       │       │           │   ├── <634> Subscript
                    │   │       │       │           │   │   ├── <632> Var [struct_array]
                    │   │       │       │           │   │   ╰── <633> Constant Int [1]
                    │   │       │       │           │   ╰── two_struct
                    │   │       │       │           ╰── two_arr
                    │   │       │       ╰── <640> "cd"
                    │   │       ╰── <654>  [!=]
                    │   │           ├── <651> Dot
                    │   │           │   ├── <649> Dot
                    │   │           │   │   ├── <647> Subscript
                    │   │           │   │   │   ├── <645> Var [struct_array]
                    │   │           │   │   │   ╰── <646> Constant Int [1]
                    │   │           │   │   ╰── two_struct
                    │   │           │   ╰── three_u
                    │   │           ╰── <653> Constant Int [8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <656> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <682>  [||]
                    │   │       ├── <674>  [||]
                    │   │       │   ├── <666> Dot
                    │   │       │   │   ├── <664> Subscript
                    │   │       │   │   │   ├── <662> Var [struct_array]
                    │   │       │   │   │   ╰── <663> Constant Int [2]
                    │   │       │   │   ╰── one_l
                    │   │       │   ╰── <673> Dot
                    │   │       │       ├── <671> Subscript
                    │   │       │       │   ├── <669> Var [struct_array]
                    │   │       │       │   ╰── <670> Constant Int [2]
                    │   │       │       ╰── three_msg
                    │   │       ╰── <681> Dot
                    │   │           ├── <679> Subscript
                    │   │           │   ├── <677> Var [struct_array]
                    │   │           │   ╰── <678> Constant Int [2]
                    │   │           ╰── four_d
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <683> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <741>  [||]
                    │   │       ├── <731>  [||]
                    │   │       │   ├── <719>  [||]
                    │   │       │   │   ├── <707>  [||]
                    │   │       │   │   │   ├── <695> Dot
                    │   │       │   │   │   │   ├── <693> Dot
                    │   │       │   │   │   │   │   ├── <691> Subscript
                    │   │       │   │   │   │   │   │   ├── <689> Var [struct_array]
                    │   │       │   │   │   │   │   │   ╰── <690> Constant Int [2]
                    │   │       │   │   │   │   │   ╰── two_struct
                    │   │       │   │   │   │   ╰── one_i
                    │   │       │   │   │   ╰── <706> Subscript
                    │   │       │   │   │       ├── <704> Dot
                    │   │       │   │   │       │   ├── <702> Dot
                    │   │       │   │   │       │   │   ├── <700> Subscript
                    │   │       │   │   │       │   │   │   ├── <698> Var [struct_array]
                    │   │       │   │   │       │   │   │   ╰── <699> Constant Int [2]
                    │   │       │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │       │   ╰── two_arr
                    │   │       │   │   │       ╰── <705> Constant Int [0]
                    │   │       │   │   ╰── <718> Subscript
                    │   │       │   │       ├── <716> Dot
                    │   │       │   │       │   ├── <714> Dot
                    │   │       │   │       │   │   ├── <712> Subscript
                    │   │       │   │       │   │   │   ├── <710> Var [struct_array]
                    │   │       │   │       │   │   │   ╰── <711> Constant Int [2]
                    │   │       │   │       │   │   ╰── two_struct
                    │   │       │   │       │   ╰── two_arr
                    │   │       │   │       ╰── <717> Constant Int [1]
                    │   │       │   ╰── <730> Subscript
                    │   │       │       ├── <728> Dot
                    │   │       │       │   ├── <726> Dot
                    │   │       │       │   │   ├── <724> Subscript
                    │   │       │       │   │   │   ├── <722> Var [struct_array]
                    │   │       │       │   │   │   ╰── <723> Constant Int [2]
                    │   │       │       │   │   ╰── two_struct
                    │   │       │       │   ╰── two_arr
                    │   │       │       ╰── <729> Constant Int [2]
                    │   │       ╰── <740> Dot
                    │   │           ├── <738> Dot
                    │   │           │   ├── <736> Subscript
                    │   │           │   │   ├── <734> Var [struct_array]
                    │   │           │   │   ╰── <735> Constant Int [2]
                    │   │           │   ╰── two_struct
                    │   │           ╰── three_u
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <742> Constant Int [0]
                    ╰── Return
                        ╰── <747> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_nested_static_struct_initializers_client(
) {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct inner {
            int one_i;
            signed char two_arr[3];
            unsigned three_u;
        };
        struct outer {
            long one_l;
            struct inner two_struct;
            char *three_msg;
            double four_d;
        };
        extern struct outer all_zeros;
        extern struct outer partial;
        extern struct outer full;
        extern struct outer converted;
        extern struct outer struct_array[3];
        int test_uninitialized(void);
        int test_partially_initialized(void);
        int test_fully_intialized(void);
        int test_implicit_conversions(void);
        int test_array_of_structs(void);
        struct outer all_zeros;
        struct outer partial = {
            100l,
            {10, {10}},
            "Hello!"};
        struct outer full = {
            18014398509481979l,
            {1000, "ok",
             4292870144u},
            "Another message",
            2e12};
        struct outer converted = {
            10.5,
            {
                2147483650u,
                {
                    15.6,
                    17592186044419l,
                    2147483777u
                },
                1152921506754330624ul
            },
            0ul,
            9223372036854776833ul
        };
        struct outer struct_array[3] = {{1, {2, "ab", 3}, 0, 5},
                                        {6, {7, "cd", 8}, "Message", 9}};
        int main(void) {
            if (!test_uninitialized()) {
                return 1;
            }
            if (!test_partially_initialized()) {
                return 2;
            }
            if (!test_fully_intialized()) {
                return 3;
            }
            if (!test_implicit_conversions()) {
                return 4;
            }
            if (!test_array_of_structs()) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Signed Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three_u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_struct
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── four_d
            │       ╰── Type
            │           ╰── Double
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── all_zeros
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── full
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── converted
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── struct_array
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Struct [outer]
            │   ╰── Extern
            ├── Function [test_uninitialized]
            ├── Function [test_partially_initialized]
            ├── Function [test_fully_intialized]
            ├── Function [test_implicit_conversions]
            ├── Function [test_array_of_structs]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── all_zeros
            │   ╰── Type
            │       ╰── Struct [outer]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <116> Constant Long [100]
            │           ├── Compound
            │           │   ├── <118> Constant Int [10]
            │           │   ╰── Compound
            │           │       ╰── <120> Constant Int [10]
            │           ╰── <124> "Hello!"
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── full
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <132> Constant Long [18014398509481979]
            │           ├── Compound
            │           │   ├── <134> Constant Int [1000]
            │           │   ├── <136> "ok"
            │           │   ╰── <138> Constant UInt [4292870144]
            │           ├── <141> "Another message"
            │           ╰── <143> Constant Double [+2e12]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── converted
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <151> Constant Double [+1.05e1]
            │           ├── Compound
            │           │   ├── <153> Constant UInt [2147483650]
            │           │   ├── Compound
            │           │   │   ├── <155> Constant Double [+1.56e1]
            │           │   │   ├── <157> Constant Long [17592186044419]
            │           │   │   ╰── <159> Constant UInt [2147483777]
            │           │   ╰── <162> Constant ULong [1152921506754330624]
            │           ├── <165> Constant ULong [0]
            │           ╰── <167> Constant ULong [9223372036854776833]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── struct_array
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Struct [outer]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Compound
            │           │   ├── <177> Constant Int [1]
            │           │   ├── Compound
            │           │   │   ├── <179> Constant Int [2]
            │           │   │   ├── <181> "ab"
            │           │   │   ╰── <183> Constant Int [3]
            │           │   ├── <186> Constant Int [0]
            │           │   ╰── <188> Constant Int [5]
            │           ╰── Compound
            │               ├── <191> Constant Int [6]
            │               ├── Compound
            │               │   ├── <193> Constant Int [7]
            │               │   ├── <195> "cd"
            │               │   ╰── <197> Constant Int [8]
            │               ├── <200> "Message"
            │               ╰── <202> Constant Int [9]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <214> Unary [!]
                    │   │       ╰── <213> FunctionCall [test_uninitialized]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <215> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <223> Unary [!]
                    │   │       ╰── <222> FunctionCall [test_partially_initialized]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <224> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <232> Unary [!]
                    │   │       ╰── <231> FunctionCall [test_fully_intialized]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <233> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <241> Unary [!]
                    │   │       ╰── <240> FunctionCall [test_implicit_conversions]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <242> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <250> Unary [!]
                    │   │       ╰── <249> FunctionCall [test_array_of_structs]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <251> Constant Int [5]
                    ╰── Return
                        ╰── <256> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_static_struct_initializers() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct s {
            double one_d;
            char *two_msg;
            unsigned char three_arr[3];
            int four_i;
        };
        extern struct s uninitialized;
        extern struct s partial;
        extern struct s partial_with_array;
        extern struct s converted;
        int test_uninitialized(void);
        int test_partially_initialized(void);
        int test_partial_inner_init(void);
        int test_implicit_conversion(void);
        int test_uninitialized(void) {
            if (uninitialized.one_d || uninitialized.two_msg ||
                uninitialized.three_arr[0] || uninitialized.three_arr[1] ||
                uninitialized.three_arr[2] || uninitialized.four_i) {
                return 0;
            }
            return 1;
        }
        int test_partially_initialized(void) {
            if (partial.one_d != 1.0 || strcmp(partial.two_msg, "Hello")) {
                return 0;
            }
            if (partial.three_arr[0] || partial.three_arr[1] || partial.three_arr[2] ||
                partial.four_i) {
                return 0;
            }
            return 1;
        }
        int test_partial_inner_init(void) {
            if (partial_with_array.one_d != 3.0 ||
                strcmp(partial_with_array.two_msg, "!") ||
                partial_with_array.three_arr[0] != 1 ||
                partial_with_array.four_i != 2) {
                return 0;
            }
            if (partial_with_array.three_arr[1] || partial_with_array.three_arr[2]) {
                return 0;
            }
            return 1;
        }
        int test_implicit_conversion(void) {
            if (converted.one_d != 1152921504606846976.0 || converted.two_msg ||
                converted.three_arr[0] != 'a' || converted.three_arr[1] != 'b' ||
                converted.three_arr[2] != 'c' || converted.four_i != 5) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Unsigned Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── four_i
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── uninitialized
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial_with_array
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── converted
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── Function [test_uninitialized]
            ├── Function [test_partially_initialized]
            ├── Function [test_partial_inner_init]
            ├── Function [test_implicit_conversion]
            ├── Function [test_uninitialized]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <122>  [||]
            │       │   │       ├── <116>  [||]
            │       │   │       │   ├── <108>  [||]
            │       │   │       │   │   ├── <100>  [||]
            │       │   │       │   │   │   ├── <92>  [||]
            │       │   │       │   │   │   │   ├── <86> Dot
            │       │   │       │   │   │   │   │   ├── <84> Var [uninitialized]
            │       │   │       │   │   │   │   │   ╰── one_d
            │       │   │       │   │   │   │   ╰── <91> Dot
            │       │   │       │   │   │   │       ├── <89> Var [uninitialized]
            │       │   │       │   │   │   │       ╰── two_msg
            │       │   │       │   │   │   ╰── <99> Subscript
            │       │   │       │   │   │       ├── <97> Dot
            │       │   │       │   │   │       │   ├── <95> Var [uninitialized]
            │       │   │       │   │   │       │   ╰── three_arr
            │       │   │       │   │   │       ╰── <98> Constant Int [0]
            │       │   │       │   │   ╰── <107> Subscript
            │       │   │       │   │       ├── <105> Dot
            │       │   │       │   │       │   ├── <103> Var [uninitialized]
            │       │   │       │   │       │   ╰── three_arr
            │       │   │       │   │       ╰── <106> Constant Int [1]
            │       │   │       │   ╰── <115> Subscript
            │       │   │       │       ├── <113> Dot
            │       │   │       │       │   ├── <111> Var [uninitialized]
            │       │   │       │       │   ╰── three_arr
            │       │   │       │       ╰── <114> Constant Int [2]
            │       │   │       ╰── <121> Dot
            │       │   │           ├── <119> Var [uninitialized]
            │       │   │           ╰── four_i
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <123> Constant Int [0]
            │       ╰── Return
            │           ╰── <128> Constant Int [1]
            ├── Function [test_partially_initialized]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <151>  [||]
            │       │   │       ├── <142>  [!=]
            │       │   │       │   ├── <139> Dot
            │       │   │       │   │   ├── <137> Var [partial]
            │       │   │       │   │   ╰── one_d
            │       │   │       │   ╰── <141> Constant Double [+1e0]
            │       │   │       ╰── <150> FunctionCall [strcmp]
            │       │   │           ├── <148> Dot
            │       │   │           │   ├── <146> Var [partial]
            │       │   │           │   ╰── two_msg
            │       │   │           ╰── <149> "Hello"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <152> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <184>  [||]
            │       │   │       ├── <178>  [||]
            │       │   │       │   ├── <170>  [||]
            │       │   │       │   │   ├── <162> Subscript
            │       │   │       │   │   │   ├── <160> Dot
            │       │   │       │   │   │   │   ├── <158> Var [partial]
            │       │   │       │   │   │   │   ╰── three_arr
            │       │   │       │   │   │   ╰── <161> Constant Int [0]
            │       │   │       │   │   ╰── <169> Subscript
            │       │   │       │   │       ├── <167> Dot
            │       │   │       │   │       │   ├── <165> Var [partial]
            │       │   │       │   │       │   ╰── three_arr
            │       │   │       │   │       ╰── <168> Constant Int [1]
            │       │   │       │   ╰── <177> Subscript
            │       │   │       │       ├── <175> Dot
            │       │   │       │       │   ├── <173> Var [partial]
            │       │   │       │       │   ╰── three_arr
            │       │   │       │       ╰── <176> Constant Int [2]
            │       │   │       ╰── <183> Dot
            │       │   │           ├── <181> Var [partial]
            │       │   │           ╰── four_i
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <185> Constant Int [0]
            │       ╰── Return
            │           ╰── <190> Constant Int [1]
            ├── Function [test_partial_inner_init]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <233>  [||]
            │       │   │       ├── <224>  [||]
            │       │   │       │   ├── <213>  [||]
            │       │   │       │   │   ├── <204>  [!=]
            │       │   │       │   │   │   ├── <201> Dot
            │       │   │       │   │   │   │   ├── <199> Var [partial_with_array]
            │       │   │       │   │   │   │   ╰── one_d
            │       │   │       │   │   │   ╰── <203> Constant Double [+3e0]
            │       │   │       │   │   ╰── <212> FunctionCall [strcmp]
            │       │   │       │   │       ├── <210> Dot
            │       │   │       │   │       │   ├── <208> Var [partial_with_array]
            │       │   │       │   │       │   ╰── two_msg
            │       │   │       │   │       ╰── <211> "!"
            │       │   │       │   ╰── <223>  [!=]
            │       │   │       │       ├── <220> Subscript
            │       │   │       │       │   ├── <218> Dot
            │       │   │       │       │   │   ├── <216> Var [partial_with_array]
            │       │   │       │       │   │   ╰── three_arr
            │       │   │       │       │   ╰── <219> Constant Int [0]
            │       │   │       │       ╰── <222> Constant Int [1]
            │       │   │       ╰── <232>  [!=]
            │       │   │           ├── <229> Dot
            │       │   │           │   ├── <227> Var [partial_with_array]
            │       │   │           │   ╰── four_i
            │       │   │           ╰── <231> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <234> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <252>  [||]
            │       │   │       ├── <244> Subscript
            │       │   │       │   ├── <242> Dot
            │       │   │       │   │   ├── <240> Var [partial_with_array]
            │       │   │       │   │   ╰── three_arr
            │       │   │       │   ╰── <243> Constant Int [1]
            │       │   │       ╰── <251> Subscript
            │       │   │           ├── <249> Dot
            │       │   │           │   ├── <247> Var [partial_with_array]
            │       │   │           │   ╰── three_arr
            │       │   │           ╰── <250> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <253> Constant Int [0]
            │       ╰── Return
            │           ╰── <258> Constant Int [1]
            ╰── Function [test_implicit_conversion]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <320>  [||]
                    │   │       ├── <311>  [||]
                    │   │       │   ├── <300>  [||]
                    │   │       │   │   ├── <289>  [||]
                    │   │       │   │   │   ├── <278>  [||]
                    │   │       │   │   │   │   ├── <272>  [!=]
                    │   │       │   │   │   │   │   ├── <269> Dot
                    │   │       │   │   │   │   │   │   ├── <267> Var [converted]
                    │   │       │   │   │   │   │   │   ╰── one_d
                    │   │       │   │   │   │   │   ╰── <271> Constant Double [+1.152921504606847e18]
                    │   │       │   │   │   │   ╰── <277> Dot
                    │   │       │   │   │   │       ├── <275> Var [converted]
                    │   │       │   │   │   │       ╰── two_msg
                    │   │       │   │   │   ╰── <288>  [!=]
                    │   │       │   │   │       ├── <285> Subscript
                    │   │       │   │   │       │   ├── <283> Dot
                    │   │       │   │   │       │   │   ├── <281> Var [converted]
                    │   │       │   │   │       │   │   ╰── three_arr
                    │   │       │   │   │       │   ╰── <284> Constant Int [0]
                    │   │       │   │   │       ╰── <287> Constant Int [97]
                    │   │       │   │   ╰── <299>  [!=]
                    │   │       │   │       ├── <296> Subscript
                    │   │       │   │       │   ├── <294> Dot
                    │   │       │   │       │   │   ├── <292> Var [converted]
                    │   │       │   │       │   │   ╰── three_arr
                    │   │       │   │       │   ╰── <295> Constant Int [1]
                    │   │       │   │       ╰── <298> Constant Int [98]
                    │   │       │   ╰── <310>  [!=]
                    │   │       │       ├── <307> Subscript
                    │   │       │       │   ├── <305> Dot
                    │   │       │       │   │   ├── <303> Var [converted]
                    │   │       │       │   │   ╰── three_arr
                    │   │       │       │   ╰── <306> Constant Int [2]
                    │   │       │       ╰── <309> Constant Int [99]
                    │   │       ╰── <319>  [!=]
                    │   │           ├── <316> Dot
                    │   │           │   ├── <314> Var [converted]
                    │   │           │   ╰── four_i
                    │   │           ╰── <318> Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <321> Constant Int [0]
                    ╰── Return
                        ╰── <326> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_static_struct_initializers_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct s {
            double one_d;
            char *two_msg;
            unsigned char three_arr[3];
            int four_i;
        };
        extern struct s uninitialized;
        extern struct s partial;
        extern struct s partial_with_array;
        extern struct s converted;
        int test_uninitialized(void);
        int test_partially_initialized(void);
        int test_partial_inner_init(void);
        int test_implicit_conversion(void);
        struct s uninitialized;
        struct s partial = {1.0, "Hello"};
        struct s partial_with_array = {3.0, "!", {1}, 2};
        struct s converted = {
            1152921504606846977l,
            0l,
            "abc",
            17179869189l
        };
        int main(void) {
            if (!test_uninitialized()) {
                return 1;
            }
            if (!test_partially_initialized()) {
                return 2;
            }
            if (!test_partial_inner_init()) {
                return 3;
            }
            if (!test_implicit_conversion()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Unsigned Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── four_i
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── uninitialized
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial_with_array
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── converted
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── Function [test_uninitialized]
            ├── Function [test_partially_initialized]
            ├── Function [test_partial_inner_init]
            ├── Function [test_implicit_conversion]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── uninitialized
            │   ╰── Type
            │       ╰── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <88> Constant Double [+1e0]
            │           ╰── <90> "Hello"
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial_with_array
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <98> Constant Double [+3e0]
            │           ├── <100> "!"
            │           ├── Compound
            │           │   ╰── <102> Constant Int [1]
            │           ╰── <105> Constant Int [2]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── converted
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <113> Constant Long [1152921504606846977]
            │           ├── <115> Constant Long [0]
            │           ├── <117> "abc"
            │           ╰── <119> Constant Long [17179869189]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <130> Unary [!]
                    │   │       ╰── <129> FunctionCall [test_uninitialized]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <131> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <139> Unary [!]
                    │   │       ╰── <138> FunctionCall [test_partially_initialized]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <140> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <148> Unary [!]
                    │   │       ╰── <147> FunctionCall [test_partial_inner_init]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <149> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <157> Unary [!]
                    │   │       ╰── <156> FunctionCall [test_implicit_conversion]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <158> Constant Int [4]
                    ╰── Return
                        ╰── <163> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_opaque_struct() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int puts(char *s);
        void *malloc(unsigned long size);
        struct s {
            int member1;
            double member2;
            char *member3;
        };
        struct s *create_struct(int i, double d, char *s) {
            struct s *ptr = malloc(sizeof(struct s));
            ptr->member1 = i;
            ptr->member2 = d;
            ptr->member3 = s;
            return ptr;
        }
        void increment_struct(struct s *ptr) {
            ptr->member1 = ptr->member1 + 1;
            ptr->member2 = ptr->member2 + 1;
            ptr->member3 = ptr->member3;
        }
        int check_struct(struct s *ptr, int expected_i, double expected_d,
                         char *expected_s) {
            if (ptr->member1 != expected_i) {
                return 0;
            }
            if (ptr->member2 != expected_d) {
                return 0;
            }
            if (strcmp(ptr->member3, expected_s)) {
                return 0;
            }
            return 1;
        }
        void print_struct_msg(struct s *ptr) {
            puts(ptr->member3);
        }
        static struct s internal = {1, 2.0, "static struct"};
        struct s *get_internal_struct(void) {
            return &internal;
        }
        struct s incomplete_var = {3, 4.0, "global struct"};
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [puts]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member2
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member3
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Char
            ├── Function [create_struct]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Char
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <73> FunctionCall [malloc]
            │       │           ╰── <72> SizeOfType
            │       │               ╰── Struct [s]
            │       ├── <83> Assign [=]
            │       │   ├── <79> Arrow
            │       │   │   ├── <77> Var [ptr]
            │       │   │   ╰── member1
            │       │   ╰── <82> Var [i]
            │       ├── <92> Assign [=]
            │       │   ├── <88> Arrow
            │       │   │   ├── <86> Var [ptr]
            │       │   │   ╰── member2
            │       │   ╰── <91> Var [d]
            │       ├── <101> Assign [=]
            │       │   ├── <97> Arrow
            │       │   │   ├── <95> Var [ptr]
            │       │   │   ╰── member3
            │       │   ╰── <100> Var [s]
            │       ╰── Return
            │           ╰── <104> Var [ptr]
            ├── Function [increment_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [s]
            │   ╰── Body
            │       ├── <129> Assign [=]
            │       │   ├── <120> Arrow
            │       │   │   ├── <118> Var [ptr]
            │       │   │   ╰── member1
            │       │   ╰── <128>  [+]
            │       │       ├── <125> Arrow
            │       │       │   ├── <123> Var [ptr]
            │       │       │   ╰── member1
            │       │       ╰── <127> Constant Int [1]
            │       ├── <143> Assign [=]
            │       │   ├── <134> Arrow
            │       │   │   ├── <132> Var [ptr]
            │       │   │   ╰── member2
            │       │   ╰── <142>  [+]
            │       │       ├── <139> Arrow
            │       │       │   ├── <137> Var [ptr]
            │       │       │   ╰── member2
            │       │       ╰── <141> Constant Int [1]
            │       ╰── <154> Assign [=]
            │           ├── <148> Arrow
            │           │   ├── <146> Var [ptr]
            │           │   ╰── member3
            │           ╰── <153> Arrow
            │               ├── <151> Var [ptr]
            │               ╰── member3
            ├── Function [check_struct]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ptr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Struct [s]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── expected_i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── expected_d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected_s
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <184>  [!=]
            │       │   │       ├── <180> Arrow
            │       │   │       │   ├── <178> Var [ptr]
            │       │   │       │   ╰── member1
            │       │   │       ╰── <183> Var [expected_i]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <185> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <197>  [!=]
            │       │   │       ├── <193> Arrow
            │       │   │       │   ├── <191> Var [ptr]
            │       │   │       │   ╰── member2
            │       │   │       ╰── <196> Var [expected_d]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <198> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <210> FunctionCall [strcmp]
            │       │   │       ├── <207> Arrow
            │       │   │       │   ├── <205> Var [ptr]
            │       │   │       │   ╰── member3
            │       │   │       ╰── <209> Var [expected_s]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <211> Constant Int [0]
            │       ╰── Return
            │           ╰── <216> Constant Int [1]
            ├── Function [print_struct_msg]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [s]
            │   ╰── Body
            │       ╰── <234> FunctionCall [puts]
            │           ╰── <233> Arrow
            │               ├── <231> Var [ptr]
            │               ╰── member3
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── internal
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ├── Initializer
            │   │   ╰── Compound
            │   │       ├── <243> Constant Int [1]
            │   │       ├── <245> Constant Double [+2e0]
            │   │       ╰── <247> "static struct"
            │   ╰── Static
            ├── Function [get_internal_struct]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <259> AddressOf
            │               ╰── <258> Var [internal]
            ╰── VarDeclaration
                ├── Name
                │   ╰── incomplete_var
                ├── Type
                │   ╰── Struct [s]
                ╰── Initializer
                    ╰── Compound
                        ├── <267> Constant Int [3]
                        ├── <269> Constant Double [+4e0]
                        ╰── <271> "global struct"
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_opaque_struct_client() {
    let src = r#"
        struct s;
        struct s *create_struct(int i, double d, char *s);
        void increment_struct(struct s *src_ptr);
        int check_struct(struct s *ptr, int expected_i, double expected_d,
                         char *expected_s);
        void print_struct_msg(struct s *ptr);
        struct s *get_internal_struct(void);
        extern struct s incomplete_var;
        int main(void) {
            struct s *new_struct = create_struct(101, 102.0, "new struct");
            struct s *internal_struct = get_internal_struct();
            print_struct_msg(new_struct);
            print_struct_msg(internal_struct);
            print_struct_msg(&incomplete_var);
            increment_struct(new_struct);
            increment_struct(&incomplete_var);
            if (!check_struct(new_struct, 102, 103.0, "new struct")) {
                return 1;
            }
            if (!check_struct(&incomplete_var, 4, 5.0, "global struct")) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [create_struct]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [increment_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── src_ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [check_struct]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [s]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_i
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── expected_s
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [print_struct_msg]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [get_internal_struct]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── incomplete_var
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── new_struct
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── <86> FunctionCall [create_struct]
                    │           ├── <83> Constant Int [101]
                    │           ├── <84> Constant Double [+1.02e2]
                    │           ╰── <85> "new struct"
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── internal_struct
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── <95> FunctionCall [get_internal_struct]
                    ├── <101> FunctionCall [print_struct_msg]
                    │   ╰── <100> Var [new_struct]
                    ├── <106> FunctionCall [print_struct_msg]
                    │   ╰── <105> Var [internal_struct]
                    ├── <112> FunctionCall [print_struct_msg]
                    │   ╰── <111> AddressOf
                    │       ╰── <110> Var [incomplete_var]
                    ├── <117> FunctionCall [increment_struct]
                    │   ╰── <116> Var [new_struct]
                    ├── <123> FunctionCall [increment_struct]
                    │   ╰── <122> AddressOf
                    │       ╰── <121> Var [incomplete_var]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <133> Unary [!]
                    │   │       ╰── <132> FunctionCall [check_struct]
                    │   │           ├── <128> Var [new_struct]
                    │   │           ├── <129> Constant Int [102]
                    │   │           ├── <130> Constant Double [+1.03e2]
                    │   │           ╰── <131> "new struct"
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <134> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <148> Unary [!]
                    │   │       ╰── <147> FunctionCall [check_struct]
                    │   │           ├── <143> AddressOf
                    │   │           │   ╰── <142> Var [incomplete_var]
                    │   │           ├── <144> Constant Int [4]
                    │   │           ├── <145> Constant Double [+5e0]
                    │   │           ╰── <146> "global struct"
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <149> Constant Int [2]
                    ╰── Return
                        ╰── <154> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_param_struct_pointer() {
    let src = r#"
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        int access_members_through_pointer(struct outer *ptr, int expected_a,
                                           int expected_b, double expected_d,
                                           int expected_i);
        void update_members_through_pointer(struct outer *ptr, int a, int b,
                                            struct inner *inner_ptr);
        
        int access_members_through_pointer(struct outer *ptr, int expected_a,
                                           int expected_b, double expected_d,
                                           int expected_i) {
            if (ptr->a != expected_a) {
                return 0;
            }
            if (ptr->b != expected_b) {
                return 0;
            }
            if (ptr->substruct.d != expected_d) {
                return 0;
            }
            if (ptr->substruct.i != expected_i) {
                return 0;
            }
            return 1;
        }
        void update_members_through_pointer(struct outer *ptr, int a, int b,
                                            struct inner *inner_ptr) {
            ptr->a = a;
            ptr->b = b;
            ptr->substruct = *inner_ptr;
            return;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── substruct
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [access_members_through_pointer]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [outer]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── expected_i
            │           ╰── Type
            │               ╰── Int
            ├── Function [update_members_through_pointer]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [outer]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── inner_ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [inner]
            ├── Function [access_members_through_pointer]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ptr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Struct [outer]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── expected_a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── expected_b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── expected_d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected_i
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <106>  [!=]
            │       │   │       ├── <102> Arrow
            │       │   │       │   ├── <100> Var [ptr]
            │       │   │       │   ╰── a
            │       │   │       ╰── <105> Var [expected_a]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <107> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <119>  [!=]
            │       │   │       ├── <115> Arrow
            │       │   │       │   ├── <113> Var [ptr]
            │       │   │       │   ╰── b
            │       │   │       ╰── <118> Var [expected_b]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <120> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <134>  [!=]
            │       │   │       ├── <130> Dot
            │       │   │       │   ├── <128> Arrow
            │       │   │       │   │   ├── <126> Var [ptr]
            │       │   │       │   │   ╰── substruct
            │       │   │       │   ╰── d
            │       │   │       ╰── <133> Var [expected_d]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <135> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <149>  [!=]
            │       │   │       ├── <145> Dot
            │       │   │       │   ├── <143> Arrow
            │       │   │       │   │   ├── <141> Var [ptr]
            │       │   │       │   │   ╰── substruct
            │       │   │       │   ╰── i
            │       │   │       ╰── <148> Var [expected_i]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <150> Constant Int [0]
            │       ╰── Return
            │           ╰── <155> Constant Int [1]
            ╰── Function [update_members_through_pointer]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── ptr
                │   │   ╰── Type
                │   │       ╰── Pointer
                │   │           ╰── Struct [outer]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── inner_ptr
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Struct [inner]
                ╰── Body
                    ├── <186> Assign [=]
                    │   ├── <182> Arrow
                    │   │   ├── <180> Var [ptr]
                    │   │   ╰── a
                    │   ╰── <185> Var [a]
                    ├── <195> Assign [=]
                    │   ├── <191> Arrow
                    │   │   ├── <189> Var [ptr]
                    │   │   ╰── b
                    │   ╰── <194> Var [b]
                    ├── <205> Assign [=]
                    │   ├── <200> Arrow
                    │   │   ├── <198> Var [ptr]
                    │   │   ╰── substruct
                    │   ╰── <204> Dereference
                    │       ╰── <203> Var [inner_ptr]
                    ╰── Return
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_param_struct_pointer_client() {
    let src = r#"
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        int access_members_through_pointer(struct outer *ptr, int expected_a,
                                           int expected_b, double expected_d,
                                           int expected_i);
        void update_members_through_pointer(struct outer *ptr, int a, int b,
                                            struct inner *inner_ptr);
        
        int main(void) {
            struct outer s = {1, 2, {3.0, 4}};
            if (!access_members_through_pointer(&s, 1, 2, 3.0, 4)) {
                return 1;
            }
            struct inner inner_struct = {7, 8};
            update_members_through_pointer(&s, 5, 6, &inner_struct);
            if (s.a != 5 || s.b != 6 || s.substruct.d != 7 || s.substruct.i != 8) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── substruct
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [access_members_through_pointer]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [outer]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── expected_i
            │           ╰── Type
            │               ╰── Int
            ├── Function [update_members_through_pointer]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [outer]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── inner_ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <86> Constant Int [1]
                    │           ├── <88> Constant Int [2]
                    │           ╰── Compound
                    │               ├── <90> Constant Double [+3e0]
                    │               ╰── <92> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <107> Unary [!]
                    │   │       ╰── <106> FunctionCall [access_members_through_pointer]
                    │   │           ├── <101> AddressOf
                    │   │           │   ╰── <100> Var [s]
                    │   │           ├── <102> Constant Int [1]
                    │   │           ├── <103> Constant Int [2]
                    │   │           ├── <104> Constant Double [+3e0]
                    │   │           ╰── <105> Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <108> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── inner_struct
                    │   ├── Type
                    │   │   ╰── Struct [inner]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <117> Constant Int [7]
                    │           ╰── <119> Constant Int [8]
                    ├── <132> FunctionCall [update_members_through_pointer]
                    │   ├── <126> AddressOf
                    │   │   ╰── <125> Var [s]
                    │   ├── <127> Constant Int [5]
                    │   ├── <128> Constant Int [6]
                    │   ╰── <131> AddressOf
                    │       ╰── <130> Var [inner_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <171>  [||]
                    │   │       ├── <160>  [||]
                    │   │       │   ├── <149>  [||]
                    │   │       │   │   ├── <140>  [!=]
                    │   │       │   │   │   ├── <137> Dot
                    │   │       │   │   │   │   ├── <135> Var [s]
                    │   │       │   │   │   │   ╰── a
                    │   │       │   │   │   ╰── <139> Constant Int [5]
                    │   │       │   │   ╰── <148>  [!=]
                    │   │       │   │       ├── <145> Dot
                    │   │       │   │       │   ├── <143> Var [s]
                    │   │       │   │       │   ╰── b
                    │   │       │   │       ╰── <147> Constant Int [6]
                    │   │       │   ╰── <159>  [!=]
                    │   │       │       ├── <156> Dot
                    │   │       │       │   ├── <154> Dot
                    │   │       │       │   │   ├── <152> Var [s]
                    │   │       │       │   │   ╰── substruct
                    │   │       │       │   ╰── d
                    │   │       │       ╰── <158> Constant Int [7]
                    │   │       ╰── <170>  [!=]
                    │   │           ├── <167> Dot
                    │   │           │   ├── <165> Dot
                    │   │           │   │   ├── <163> Var [s]
                    │   │           │   │   ╰── substruct
                    │   │           │   ╰── i
                    │   │           ╰── <169> Constant Int [8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <172> Constant Int [2]
                    ╰── Return
                        ╰── <177> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_return_struct_pointer() {
    let src = r#"
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        struct outermost {
            int i;
            struct outer *nested_ptr;
            struct outer nested_struct;
        };
        struct inner *make_struct_inner(int seed);
        struct outer *make_struct_outer(int seed);
        struct outermost *make_struct_outermost(int seed);
        struct inner *make_struct_inner(int seed) {
            struct inner *ptr = malloc(sizeof(struct inner));
            ptr->d = seed;
            ptr->i = seed;
            return ptr;
        }
        struct outer *make_struct_outer(int seed) {
            struct outer *ptr = malloc(sizeof(struct outer));
            ptr->a = seed;
            ptr->b = seed + 1;
            ptr->substruct.d = seed + 2;
            ptr->substruct.i = seed + 3;
            return ptr;
        }
        struct outermost *make_struct_outermost(int seed) {
            struct outermost *ptr = malloc(sizeof(struct outermost));
            ptr->i = seed;
            ptr->nested_ptr = make_struct_outer(seed + 1);
            ptr->nested_struct.a = seed + 5;
            ptr->nested_struct.b = seed + 6;
            ptr->nested_struct.substruct.d = seed + 7;
            ptr->nested_struct.substruct.i = seed + 8;
            return ptr;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── substruct
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Struct [outermost]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── nested_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── nested_struct
            │       ╰── Type
            │           ╰── Struct [outer]
            ├── Function [make_struct_inner]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── seed
            │           ╰── Type
            │               ╰── Int
            ├── Function [make_struct_outer]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── seed
            │           ╰── Type
            │               ╰── Int
            ├── Function [make_struct_outermost]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── seed
            │           ╰── Type
            │               ╰── Int
            ├── Function [make_struct_inner]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── seed
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── <101> FunctionCall [malloc]
            │       │           ╰── <100> SizeOfType
            │       │               ╰── Struct [inner]
            │       ├── <111> Assign [=]
            │       │   ├── <107> Arrow
            │       │   │   ├── <105> Var [ptr]
            │       │   │   ╰── d
            │       │   ╰── <110> Var [seed]
            │       ├── <120> Assign [=]
            │       │   ├── <116> Arrow
            │       │   │   ├── <114> Var [ptr]
            │       │   │   ╰── i
            │       │   ╰── <119> Var [seed]
            │       ╰── Return
            │           ╰── <123> Var [ptr]
            ├── Function [make_struct_outer]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── seed
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── <146> FunctionCall [malloc]
            │       │           ╰── <145> SizeOfType
            │       │               ╰── Struct [outer]
            │       ├── <156> Assign [=]
            │       │   ├── <152> Arrow
            │       │   │   ├── <150> Var [ptr]
            │       │   │   ╰── a
            │       │   ╰── <155> Var [seed]
            │       ├── <168> Assign [=]
            │       │   ├── <161> Arrow
            │       │   │   ├── <159> Var [ptr]
            │       │   │   ╰── b
            │       │   ╰── <167>  [+]
            │       │       ├── <164> Var [seed]
            │       │       ╰── <166> Constant Int [1]
            │       ├── <182> Assign [=]
            │       │   ├── <175> Dot
            │       │   │   ├── <173> Arrow
            │       │   │   │   ├── <171> Var [ptr]
            │       │   │   │   ╰── substruct
            │       │   │   ╰── d
            │       │   ╰── <181>  [+]
            │       │       ├── <178> Var [seed]
            │       │       ╰── <180> Constant Int [2]
            │       ├── <196> Assign [=]
            │       │   ├── <189> Dot
            │       │   │   ├── <187> Arrow
            │       │   │   │   ├── <185> Var [ptr]
            │       │   │   │   ╰── substruct
            │       │   │   ╰── i
            │       │   ╰── <195>  [+]
            │       │       ├── <192> Var [seed]
            │       │       ╰── <194> Constant Int [3]
            │       ╰── Return
            │           ╰── <199> Var [ptr]
            ╰── Function [make_struct_outermost]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── seed
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [outermost]
                    │   ╰── Initializer
                    │       ╰── <222> FunctionCall [malloc]
                    │           ╰── <221> SizeOfType
                    │               ╰── Struct [outermost]
                    ├── <232> Assign [=]
                    │   ├── <228> Arrow
                    │   │   ├── <226> Var [ptr]
                    │   │   ╰── i
                    │   ╰── <231> Var [seed]
                    ├── <246> Assign [=]
                    │   ├── <237> Arrow
                    │   │   ├── <235> Var [ptr]
                    │   │   ╰── nested_ptr
                    │   ╰── <245> FunctionCall [make_struct_outer]
                    │       ╰── <244>  [+]
                    │           ├── <241> Var [seed]
                    │           ╰── <243> Constant Int [1]
                    ├── <260> Assign [=]
                    │   ├── <253> Dot
                    │   │   ├── <251> Arrow
                    │   │   │   ├── <249> Var [ptr]
                    │   │   │   ╰── nested_struct
                    │   │   ╰── a
                    │   ╰── <259>  [+]
                    │       ├── <256> Var [seed]
                    │       ╰── <258> Constant Int [5]
                    ├── <274> Assign [=]
                    │   ├── <267> Dot
                    │   │   ├── <265> Arrow
                    │   │   │   ├── <263> Var [ptr]
                    │   │   │   ╰── nested_struct
                    │   │   ╰── b
                    │   ╰── <273>  [+]
                    │       ├── <270> Var [seed]
                    │       ╰── <272> Constant Int [6]
                    ├── <290> Assign [=]
                    │   ├── <283> Dot
                    │   │   ├── <281> Dot
                    │   │   │   ├── <279> Arrow
                    │   │   │   │   ├── <277> Var [ptr]
                    │   │   │   │   ╰── nested_struct
                    │   │   │   ╰── substruct
                    │   │   ╰── d
                    │   ╰── <289>  [+]
                    │       ├── <286> Var [seed]
                    │       ╰── <288> Constant Int [7]
                    ├── <306> Assign [=]
                    │   ├── <299> Dot
                    │   │   ├── <297> Dot
                    │   │   │   ├── <295> Arrow
                    │   │   │   │   ├── <293> Var [ptr]
                    │   │   │   │   ╰── nested_struct
                    │   │   │   ╰── substruct
                    │   │   ╰── i
                    │   ╰── <305>  [+]
                    │       ├── <302> Var [seed]
                    │       ╰── <304> Constant Int [8]
                    ╰── Return
                        ╰── <309> Var [ptr]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_return_struct_pointer_client() {
    let src = r#"
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        struct outermost {
            int i;
            struct outer *nested_ptr;
            struct outer nested_struct;
        };
        struct inner *make_struct_inner(int seed);
        struct outer *make_struct_outer(int seed);
        struct outermost *make_struct_outermost(int seed);
        int test_get_struct_ptr(void) {
            struct inner *inner_ptr = make_struct_inner(11);
            if (inner_ptr->d != 11 || inner_ptr->i != 11) {
                return 0;
            }
            struct outermost o = {0, 0, {0, 0, {0, 0}}};
            o.nested_ptr = make_struct_outer(20);
            if (o.nested_ptr->a != 20 || o.nested_ptr->b != 21 ||
                o.nested_ptr->substruct.d != 22 || o.nested_ptr->substruct.i != 23) {
                return 0;
            }
            return 1;
        }
        int test_get_struct_pointer_member(void) {
            if (make_struct_inner(2)->d != 2) {
                return 0;
            }
            if (make_struct_outer(2)->substruct.d != 4) {
                return 0;
            }
            if (make_struct_outermost(0)->nested_ptr->a != 1) {
                return 0;
            }
            return 1;
        }
        struct outer *get_static_struct_ptr(void) {
            static struct outer s;
            return &s;
        }
        int test_update_member_thru_retval(void) {
            get_static_struct_ptr()->a = 10;
            get_static_struct_ptr()->substruct.d = 20.0;
            struct outer *ptr = get_static_struct_ptr();
            if (ptr->a != 10 || ptr->substruct.d != 20.0) {
                return 0;
            }
            return 1;
        }
        int test_update_nested_struct_thru_retval(void) {
            struct inner small = {12.0, 13};
            get_static_struct_ptr()->substruct = small;
            if (get_static_struct_ptr()->substruct.d != 12.0) {
                return 0;
            }
            if (get_static_struct_ptr()->substruct.i != 13) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_get_struct_ptr()) {
                return 1;
            }
            if (!test_get_struct_pointer_member()) {
                return 2;
            }
            if (!test_update_member_thru_retval()) {
                return 3;
            }
            if (!test_update_nested_struct_thru_retval()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── substruct
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Struct [outermost]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── nested_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── nested_struct
            │       ╰── Type
            │           ╰── Struct [outer]
            ├── Function [make_struct_inner]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── seed
            │           ╰── Type
            │               ╰── Int
            ├── Function [make_struct_outer]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── seed
            │           ╰── Type
            │               ╰── Int
            ├── Function [make_struct_outermost]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── seed
            │           ╰── Type
            │               ╰── Int
            ├── Function [test_get_struct_ptr]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── inner_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── <93> FunctionCall [make_struct_inner]
            │       │           ╰── <92> Constant Int [11]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <111>  [||]
            │       │   │       ├── <102>  [!=]
            │       │   │       │   ├── <99> Arrow
            │       │   │       │   │   ├── <97> Var [inner_ptr]
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <101> Constant Int [11]
            │       │   │       ╰── <110>  [!=]
            │       │   │           ├── <107> Arrow
            │       │   │           │   ├── <105> Var [inner_ptr]
            │       │   │           │   ╰── i
            │       │   │           ╰── <109> Constant Int [11]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <112> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── o
            │       │   ├── Type
            │       │   │   ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <121> Constant Int [0]
            │       │           ├── <123> Constant Int [0]
            │       │           ╰── Compound
            │       │               ├── <125> Constant Int [0]
            │       │               ├── <127> Constant Int [0]
            │       │               ╰── Compound
            │       │                   ├── <129> Constant Int [0]
            │       │                   ╰── <131> Constant Int [0]
            │       ├── <145> Assign [=]
            │       │   ├── <140> Dot
            │       │   │   ├── <138> Var [o]
            │       │   │   ╰── nested_ptr
            │       │   ╰── <144> FunctionCall [make_struct_outer]
            │       │       ╰── <143> Constant Int [20]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <192>  [||]
            │       │   │       ├── <179>  [||]
            │       │   │       │   ├── <166>  [||]
            │       │   │       │   │   ├── <155>  [!=]
            │       │   │       │   │   │   ├── <152> Arrow
            │       │   │       │   │   │   │   ├── <150> Dot
            │       │   │       │   │   │   │   │   ├── <148> Var [o]
            │       │   │       │   │   │   │   │   ╰── nested_ptr
            │       │   │       │   │   │   │   ╰── a
            │       │   │       │   │   │   ╰── <154> Constant Int [20]
            │       │   │       │   │   ╰── <165>  [!=]
            │       │   │       │   │       ├── <162> Arrow
            │       │   │       │   │       │   ├── <160> Dot
            │       │   │       │   │       │   │   ├── <158> Var [o]
            │       │   │       │   │       │   │   ╰── nested_ptr
            │       │   │       │   │       │   ╰── b
            │       │   │       │   │       ╰── <164> Constant Int [21]
            │       │   │       │   ╰── <178>  [!=]
            │       │   │       │       ├── <175> Dot
            │       │   │       │       │   ├── <173> Arrow
            │       │   │       │       │   │   ├── <171> Dot
            │       │   │       │       │   │   │   ├── <169> Var [o]
            │       │   │       │       │   │   │   ╰── nested_ptr
            │       │   │       │       │   │   ╰── substruct
            │       │   │       │       │   ╰── d
            │       │   │       │       ╰── <177> Constant Int [22]
            │       │   │       ╰── <191>  [!=]
            │       │   │           ├── <188> Dot
            │       │   │           │   ├── <186> Arrow
            │       │   │           │   │   ├── <184> Dot
            │       │   │           │   │   │   ├── <182> Var [o]
            │       │   │           │   │   │   ╰── nested_ptr
            │       │   │           │   │   ╰── substruct
            │       │   │           │   ╰── i
            │       │   │           ╰── <190> Constant Int [23]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <193> Constant Int [0]
            │       ╰── Return
            │           ╰── <198> Constant Int [1]
            ├── Function [test_get_struct_pointer_member]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <213>  [!=]
            │       │   │       ├── <210> Arrow
            │       │   │       │   ├── <208> FunctionCall [make_struct_inner]
            │       │   │       │   │   ╰── <207> Constant Int [2]
            │       │   │       │   ╰── d
            │       │   │       ╰── <212> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <214> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <228>  [!=]
            │       │   │       ├── <225> Dot
            │       │   │       │   ├── <223> Arrow
            │       │   │       │   │   ├── <221> FunctionCall [make_struct_outer]
            │       │   │       │   │   │   ╰── <220> Constant Int [2]
            │       │   │       │   │   ╰── substruct
            │       │   │       │   ╰── d
            │       │   │       ╰── <227> Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <229> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <243>  [!=]
            │       │   │       ├── <240> Arrow
            │       │   │       │   ├── <238> Arrow
            │       │   │       │   │   ├── <236> FunctionCall [make_struct_outermost]
            │       │   │       │   │   │   ╰── <235> Constant Int [0]
            │       │   │       │   │   ╰── nested_ptr
            │       │   │       │   ╰── a
            │       │   │       ╰── <242> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <244> Constant Int [0]
            │       ╰── Return
            │           ╰── <249> Constant Int [1]
            ├── Function [get_static_struct_ptr]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Static
            │       ╰── Return
            │           ╰── <267> AddressOf
            │               ╰── <266> Var [s]
            ├── Function [test_update_member_thru_retval]
            │   ╰── Body
            │       ├── <281> Assign [=]
            │       │   ├── <278> Arrow
            │       │   │   ├── <276> FunctionCall [get_static_struct_ptr]
            │       │   │   ╰── a
            │       │   ╰── <280> Constant Int [10]
            │       ├── <291> Assign [=]
            │       │   ├── <288> Dot
            │       │   │   ├── <286> Arrow
            │       │   │   │   ├── <284> FunctionCall [get_static_struct_ptr]
            │       │   │   │   ╰── substruct
            │       │   │   ╰── d
            │       │   ╰── <290> Constant Double [+2e1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── <299> FunctionCall [get_static_struct_ptr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <319>  [||]
            │       │   │       ├── <308>  [!=]
            │       │   │       │   ├── <305> Arrow
            │       │   │       │   │   ├── <303> Var [ptr]
            │       │   │       │   │   ╰── a
            │       │   │       │   ╰── <307> Constant Int [10]
            │       │   │       ╰── <318>  [!=]
            │       │   │           ├── <315> Dot
            │       │   │           │   ├── <313> Arrow
            │       │   │           │   │   ├── <311> Var [ptr]
            │       │   │           │   │   ╰── substruct
            │       │   │           │   ╰── d
            │       │   │           ╰── <317> Constant Double [+2e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <320> Constant Int [0]
            │       ╰── Return
            │           ╰── <325> Constant Int [1]
            ├── Function [test_update_nested_struct_thru_retval]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <337> Constant Double [+1.2e1]
            │       │           ╰── <339> Constant Int [13]
            │       ├── <350> Assign [=]
            │       │   ├── <346> Arrow
            │       │   │   ├── <344> FunctionCall [get_static_struct_ptr]
            │       │   │   ╰── substruct
            │       │   ╰── <349> Var [small]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <360>  [!=]
            │       │   │       ├── <357> Dot
            │       │   │       │   ├── <355> Arrow
            │       │   │       │   │   ├── <353> FunctionCall [get_static_struct_ptr]
            │       │   │       │   │   ╰── substruct
            │       │   │       │   ╰── d
            │       │   │       ╰── <359> Constant Double [+1.2e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <361> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <374>  [!=]
            │       │   │       ├── <371> Dot
            │       │   │       │   ├── <369> Arrow
            │       │   │       │   │   ├── <367> FunctionCall [get_static_struct_ptr]
            │       │   │       │   │   ╰── substruct
            │       │   │       │   ╰── i
            │       │   │       ╰── <373> Constant Int [13]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <375> Constant Int [0]
            │       ╰── Return
            │           ╰── <380> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <391> Unary [!]
                    │   │       ╰── <390> FunctionCall [test_get_struct_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <392> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <400> Unary [!]
                    │   │       ╰── <399> FunctionCall [test_get_struct_pointer_member]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <401> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <409> Unary [!]
                    │   │       ╰── <408> FunctionCall [test_update_member_thru_retval]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <410> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <418> Unary [!]
                    │   │       ╰── <417> FunctionCall [test_update_nested_struct_thru_retval]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <419> Constant Int [4]
                    ╰── Return
                        ╰── <424> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_parse_and_lex_postfix_precedence() {
    let src = r#"
        
        struct inner {
            int inner_arr[3];
        };
        struct outer {
            int a;
            struct inner b;
        };
        int main(void) {
            struct outer array[4] = {{1, {{2, 3, 4}}},
                                     {5, {{6, 7, 8}}},
                                     {9, {{10, 11, 12}}},
                                     {13, {{14, 15, 16}}}};
            int i = -array[2].b.inner_arr[1];
            return i == -11;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── inner_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── array
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <30> Constant Int [1]
                    │           │   ╰── Compound
                    │           │       ╰── Compound
                    │           │           ├── <32> Constant Int [2]
                    │           │           ├── <34> Constant Int [3]
                    │           │           ╰── <36> Constant Int [4]
                    │           ├── Compound
                    │           │   ├── <41> Constant Int [5]
                    │           │   ╰── Compound
                    │           │       ╰── Compound
                    │           │           ├── <43> Constant Int [6]
                    │           │           ├── <45> Constant Int [7]
                    │           │           ╰── <47> Constant Int [8]
                    │           ├── Compound
                    │           │   ├── <52> Constant Int [9]
                    │           │   ╰── Compound
                    │           │       ╰── Compound
                    │           │           ├── <54> Constant Int [10]
                    │           │           ├── <56> Constant Int [11]
                    │           │           ╰── <58> Constant Int [12]
                    │           ╰── Compound
                    │               ├── <63> Constant Int [13]
                    │               ╰── Compound
                    │                   ╰── Compound
                    │                       ├── <65> Constant Int [14]
                    │                       ├── <67> Constant Int [15]
                    │                       ╰── <69> Constant Int [16]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <90> Unary [-]
                    │           ╰── <89> Subscript
                    │               ├── <87> Dot
                    │               │   ├── <85> Dot
                    │               │   │   ├── <83> Subscript
                    │               │   │   │   ├── <81> Var [array]
                    │               │   │   │   ╰── <82> Constant Int [2]
                    │               │   │   ╰── b
                    │               │   ╰── inner_arr
                    │               ╰── <88> Constant Int [1]
                    ╰── Return
                        ╰── <99>  [==]
                            ├── <94> Var [i]
                            ╰── <98> Unary [-]
                                ╰── <97> Constant Int [11]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_parse_and_lex_space_around_struct_member() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s foo;
            foo .a = 10;
            int b = foo .a;
            return foo . a == b;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ╰── Type
                    │       ╰── Struct [s]
                    ├── <22> Assign [=]
                    │   ├── <19> Dot
                    │   │   ├── <17> Var [foo]
                    │   │   ╰── a
                    │   ╰── <21> Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <30> Dot
                    │           ├── <28> Var [foo]
                    │           ╰── a
                    ╰── Return
                        ╰── <40>  [==]
                            ├── <36> Dot
                            │   ├── <34> Var [foo]
                            │   ╰── a
                            ╰── <39> Var [b]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_parse_and_lex_struct_member_looks_like_const() {
    let src = r#"
        struct s {
            int E10;
        };
        int main(void) {
            struct s x1 = {3};
            return x1.E10;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── E10
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x1
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <15> Constant Int [3]
                    ╰── Return
                        ╰── <22> Dot
                            ├── <20> Var [x1]
                            ╰── E10
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_parse_and_lex_trailing_comma() {
    let src = r#"
        
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s x = {
                1,
                2,
            };
            if (x.a != 1 || x.b != 2) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <19> Constant Int [1]
                    │           ╰── <21> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <40>  [||]
                    │   │       ├── <31>  [!=]
                    │   │       │   ├── <28> Dot
                    │   │       │   │   ├── <26> Var [x]
                    │   │       │   │   ╰── a
                    │   │       │   ╰── <30> Constant Int [1]
                    │   │       ╰── <39>  [!=]
                    │   │           ├── <36> Dot
                    │   │           │   ├── <34> Var [x]
                    │   │           │   ╰── b
                    │   │           ╰── <38> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <41> Constant Int [1]
                    ╰── Return
                        ╰── <46> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_arrow() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        struct four_members {
            double d;
            char c;
            long l;
            char *ptr;
        };
        double get_double(void) {
            return 2e12;
        }
        static long l = 34359738378l;
        int accept_params(int d_divided, int c_doubled, double l_cast,
                          int dereferenced_ptr, double d, int c, long l, char *ptr) {
            if (d != -1845381177299.0 || c != 127 || l != 58 || *ptr != 100 ||
                d_divided != -922690588 || c_doubled != 254 || l_cast != 58.0 ||
                dereferenced_ptr != 100) {
                return 0;
            }
            return 1;
        }
        int test_auto(void) {
            struct four_members autom;
            struct four_members *autom_ptr = &autom;
            autom_ptr->d = (l - get_double()) + (l * 3.5);
            autom_ptr->c = 127;
            autom_ptr->l = get_double() / l;
            char chr = 100;
            autom_ptr->ptr = &chr;
            if (autom_ptr->d != -1845381177299.0 || autom_ptr->c != 127 ||
                autom_ptr->l != 58 || autom_ptr->ptr != &chr) {
                return 0;
            }
            double *d_ptr = &autom_ptr->d;
            char *c_ptr = &autom_ptr->c;
            if (*d_ptr != -1845381177299.0 || *c_ptr != 127) {
                return 0;
            }
            if (*autom_ptr->ptr != 100) {
                return 0;
            }
            if (!accept_params(autom.d / 2000, autom.c * 2, (double)autom.l, *autom.ptr,
                               autom.d, autom.c, autom.l, autom.ptr)) {
                return 0;
            }
            return 1;
        }
        int test_static(void) {
            static struct four_members stat;
            static struct four_members *stat_ptr;
            stat_ptr = &stat;
            static char chr = 100;
            stat_ptr->d = (l - get_double()) + (l * 3.5);
            stat_ptr->c = 127;
            stat_ptr->l = get_double() / l;
            stat_ptr->ptr = &chr;
            if (stat_ptr->d != -1845381177299.0 || stat_ptr->c != 127 ||
                stat_ptr->l != 58 || stat_ptr->ptr != &chr) {
                return 0;
            }
            double *d_ptr = &stat_ptr->d;
            char *c_ptr = &stat_ptr->c;
            if (*d_ptr != -1845381177299.0 || *c_ptr != 127) {
                return 0;
            }
            if (*stat_ptr->ptr != 100) {
                return 0;
            }
            if (!accept_params(stat.d / 2000, stat.c * 2, (double)stat.l, *stat.ptr,
                               stat.d, stat.c, stat.l, stat.ptr)) {
                return 0;
            }
            return 1;
        }
        int test_exp_result_member(void) {
            static int flag = 1;
            struct four_members s1;
            s1.d = 10.0;
            s1.c = 99;
            s1.l = 9223372036854775807l;
            s1.ptr = 0;
            struct four_members s2;
            s2.d = 12.0;
            s2.c = 98;
            s2.l = -9223372036854775807l;
            s2.ptr = 0;
            struct four_members *s1_ptr = &s1;
            struct four_members *s2_ptr = &s2;
            (flag ? s1_ptr : s2_ptr)->c = 127;
            if (s1.c != 127) {
                return 0;
            }
            if (s2.c != 98) {
                return 0;
            }
            struct four_members *result_ptr = 0;
            if ((result_ptr = s2_ptr)->d != 12.0 ||
                result_ptr->l != -9223372036854775807l) {
                return 0;
            }
            void *void_ptr = calloc(1, sizeof(struct four_members));
            ((struct four_members *)void_ptr)->c = 80;
            result_ptr = void_ptr;
            if (result_ptr->c != 80) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto()) {
                return 1;
            }
            if (!test_static()) {
                return 2;
            }
            if (!test_exp_result_member()) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [four_members]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Char
            ├── Function [get_double]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <36> Constant Double [+2e12]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ├── Type
            │   │   ╰── Long
            │   ├── Initializer
            │   │   ╰── <44> Constant Long [34359738378]
            │   ╰── Static
            ├── Function [accept_params]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d_divided
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c_doubled
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l_cast
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── dereferenced_ptr
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <134>  [||]
            │       │   │       ├── <127>  [||]
            │       │   │       │   ├── <120>  [||]
            │       │   │       │   │   ├── <113>  [||]
            │       │   │       │   │   │   ├── <104>  [||]
            │       │   │       │   │   │   │   ├── <96>  [||]
            │       │   │       │   │   │   │   │   ├── <89>  [||]
            │       │   │       │   │   │   │   │   │   ├── <82>  [!=]
            │       │   │       │   │   │   │   │   │   │   ├── <77> Var [d]
            │       │   │       │   │   │   │   │   │   │   ╰── <81> Unary [-]
            │       │   │       │   │   │   │   │   │   │       ╰── <80> Constant Double [+1.845381177299e12]
            │       │   │       │   │   │   │   │   │   ╰── <88>  [!=]
            │       │   │       │   │   │   │   │   │       ├── <85> Var [c]
            │       │   │       │   │   │   │   │   │       ╰── <87> Constant Int [127]
            │       │   │       │   │   │   │   │   ╰── <95>  [!=]
            │       │   │       │   │   │   │   │       ├── <92> Var [l]
            │       │   │       │   │   │   │   │       ╰── <94> Constant Int [58]
            │       │   │       │   │   │   │   ╰── <103>  [!=]
            │       │   │       │   │   │   │       ├── <100> Dereference
            │       │   │       │   │   │   │       │   ╰── <99> Var [ptr]
            │       │   │       │   │   │   │       ╰── <102> Constant Int [100]
            │       │   │       │   │   │   ╰── <112>  [!=]
            │       │   │       │   │   │       ├── <107> Var [d_divided]
            │       │   │       │   │   │       ╰── <111> Unary [-]
            │       │   │       │   │   │           ╰── <110> Constant Int [922690588]
            │       │   │       │   │   ╰── <119>  [!=]
            │       │   │       │   │       ├── <116> Var [c_doubled]
            │       │   │       │   │       ╰── <118> Constant Int [254]
            │       │   │       │   ╰── <126>  [!=]
            │       │   │       │       ├── <123> Var [l_cast]
            │       │   │       │       ╰── <125> Constant Double [+5.8e1]
            │       │   │       ╰── <133>  [!=]
            │       │   │           ├── <130> Var [dereferenced_ptr]
            │       │   │           ╰── <132> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <135> Constant Int [0]
            │       ╰── Return
            │           ╰── <140> Constant Int [1]
            ├── Function [test_auto]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── autom
            │       │   ╰── Type
            │       │       ╰── Struct [four_members]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── autom_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [four_members]
            │       │   ╰── Initializer
            │       │       ╰── <160> AddressOf
            │       │           ╰── <159> Var [autom]
            │       ├── <183> Assign [=]
            │       │   ├── <166> Arrow
            │       │   │   ├── <164> Var [autom_ptr]
            │       │   │   ╰── d
            │       │   ╰── <182>  [+]
            │       │       ├── <174>  [-]
            │       │       │   ├── <169> Var [l]
            │       │       │   ╰── <172> FunctionCall [get_double]
            │       │       ╰── <181>  [*]
            │       │           ├── <177> Var [l]
            │       │           ╰── <179> Constant Double [+3.5e0]
            │       ├── <191> Assign [=]
            │       │   ├── <188> Arrow
            │       │   │   ├── <186> Var [autom_ptr]
            │       │   │   ╰── c
            │       │   ╰── <190> Constant Int [127]
            │       ├── <204> Assign [=]
            │       │   ├── <196> Arrow
            │       │   │   ├── <194> Var [autom_ptr]
            │       │   │   ╰── l
            │       │   ╰── <203>  [/]
            │       │       ├── <199> FunctionCall [get_double]
            │       │       ╰── <202> Var [l]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── chr
            │       │   ├── Type
            │       │   │   ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <209> Constant Int [100]
            │       ├── <220> Assign [=]
            │       │   ├── <215> Arrow
            │       │   │   ├── <213> Var [autom_ptr]
            │       │   │   ╰── ptr
            │       │   ╰── <219> AddressOf
            │       │       ╰── <218> Var [chr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <259>  [||]
            │       │   │       ├── <248>  [||]
            │       │   │       │   ├── <239>  [||]
            │       │   │       │   │   ├── <230>  [!=]
            │       │   │       │   │   │   ├── <225> Arrow
            │       │   │       │   │   │   │   ├── <223> Var [autom_ptr]
            │       │   │       │   │   │   │   ╰── d
            │       │   │       │   │   │   ╰── <229> Unary [-]
            │       │   │       │   │   │       ╰── <228> Constant Double [+1.845381177299e12]
            │       │   │       │   │   ╰── <238>  [!=]
            │       │   │       │   │       ├── <235> Arrow
            │       │   │       │   │       │   ├── <233> Var [autom_ptr]
            │       │   │       │   │       │   ╰── c
            │       │   │       │   │       ╰── <237> Constant Int [127]
            │       │   │       │   ╰── <247>  [!=]
            │       │   │       │       ├── <244> Arrow
            │       │   │       │       │   ├── <242> Var [autom_ptr]
            │       │   │       │       │   ╰── l
            │       │   │       │       ╰── <246> Constant Int [58]
            │       │   │       ╰── <258>  [!=]
            │       │   │           ├── <253> Arrow
            │       │   │           │   ├── <251> Var [autom_ptr]
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <257> AddressOf
            │       │   │               ╰── <256> Var [chr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <260> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <273> AddressOf
            │       │           ╰── <272> Arrow
            │       │               ├── <270> Var [autom_ptr]
            │       │               ╰── d
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <284> AddressOf
            │       │           ╰── <283> Arrow
            │       │               ├── <281> Var [autom_ptr]
            │       │               ╰── c
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <302>  [||]
            │       │   │       ├── <294>  [!=]
            │       │   │       │   ├── <289> Dereference
            │       │   │       │   │   ╰── <288> Var [d_ptr]
            │       │   │       │   ╰── <293> Unary [-]
            │       │   │       │       ╰── <292> Constant Double [+1.845381177299e12]
            │       │   │       ╰── <301>  [!=]
            │       │   │           ├── <298> Dereference
            │       │   │           │   ╰── <297> Var [c_ptr]
            │       │   │           ╰── <300> Constant Int [127]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <303> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <315>  [!=]
            │       │   │       ├── <312> Dereference
            │       │   │       │   ╰── <311> Arrow
            │       │   │       │       ├── <309> Var [autom_ptr]
            │       │   │       │       ╰── ptr
            │       │   │       ╰── <314> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <316> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <366> Unary [!]
            │       │   │       ╰── <365> FunctionCall [accept_params]
            │       │   │           ├── <329>  [/]
            │       │   │           │   ├── <326> Dot
            │       │   │           │   │   ├── <324> Var [autom]
            │       │   │           │   │   ╰── d
            │       │   │           │   ╰── <328> Constant Int [2000]
            │       │   │           ├── <336>  [*]
            │       │   │           │   ├── <333> Dot
            │       │   │           │   │   ├── <331> Var [autom]
            │       │   │           │   │   ╰── c
            │       │   │           │   ╰── <335> Constant Int [2]
            │       │   │           ├── <343> Cast
            │       │   │           │   ├── Target
            │       │   │           │   │   ╰── Double
            │       │   │           │   ╰── Expression
            │       │   │           │       ╰── <342> Dot
            │       │   │           │           ├── <340> Var [autom]
            │       │   │           │           ╰── l
            │       │   │           ├── <348> Dereference
            │       │   │           │   ╰── <347> Dot
            │       │   │           │       ├── <345> Var [autom]
            │       │   │           │       ╰── ptr
            │       │   │           ├── <352> Dot
            │       │   │           │   ├── <350> Var [autom]
            │       │   │           │   ╰── d
            │       │   │           ├── <356> Dot
            │       │   │           │   ├── <354> Var [autom]
            │       │   │           │   ╰── c
            │       │   │           ├── <360> Dot
            │       │   │           │   ├── <358> Var [autom]
            │       │   │           │   ╰── l
            │       │   │           ╰── <364> Dot
            │       │   │               ├── <362> Var [autom]
            │       │   │               ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <367> Constant Int [0]
            │       ╰── Return
            │           ╰── <372> Constant Int [1]
            ├── Function [test_static]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── stat
            │       │   ├── Type
            │       │   │   ╰── Struct [four_members]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── stat_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [four_members]
            │       │   ╰── Static
            │       ├── <399> Assign [=]
            │       │   ├── <394> Var [stat_ptr]
            │       │   ╰── <398> AddressOf
            │       │       ╰── <397> Var [stat]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── chr
            │       │   ├── Type
            │       │   │   ╰── Char
            │       │   ├── Initializer
            │       │   │   ╰── <405> Constant Int [100]
            │       │   ╰── Static
            │       ├── <428> Assign [=]
            │       │   ├── <411> Arrow
            │       │   │   ├── <409> Var [stat_ptr]
            │       │   │   ╰── d
            │       │   ╰── <427>  [+]
            │       │       ├── <419>  [-]
            │       │       │   ├── <414> Var [l]
            │       │       │   ╰── <417> FunctionCall [get_double]
            │       │       ╰── <426>  [*]
            │       │           ├── <422> Var [l]
            │       │           ╰── <424> Constant Double [+3.5e0]
            │       ├── <436> Assign [=]
            │       │   ├── <433> Arrow
            │       │   │   ├── <431> Var [stat_ptr]
            │       │   │   ╰── c
            │       │   ╰── <435> Constant Int [127]
            │       ├── <449> Assign [=]
            │       │   ├── <441> Arrow
            │       │   │   ├── <439> Var [stat_ptr]
            │       │   │   ╰── l
            │       │   ╰── <448>  [/]
            │       │       ├── <444> FunctionCall [get_double]
            │       │       ╰── <447> Var [l]
            │       ├── <459> Assign [=]
            │       │   ├── <454> Arrow
            │       │   │   ├── <452> Var [stat_ptr]
            │       │   │   ╰── ptr
            │       │   ╰── <458> AddressOf
            │       │       ╰── <457> Var [chr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <498>  [||]
            │       │   │       ├── <487>  [||]
            │       │   │       │   ├── <478>  [||]
            │       │   │       │   │   ├── <469>  [!=]
            │       │   │       │   │   │   ├── <464> Arrow
            │       │   │       │   │   │   │   ├── <462> Var [stat_ptr]
            │       │   │       │   │   │   │   ╰── d
            │       │   │       │   │   │   ╰── <468> Unary [-]
            │       │   │       │   │   │       ╰── <467> Constant Double [+1.845381177299e12]
            │       │   │       │   │   ╰── <477>  [!=]
            │       │   │       │   │       ├── <474> Arrow
            │       │   │       │   │       │   ├── <472> Var [stat_ptr]
            │       │   │       │   │       │   ╰── c
            │       │   │       │   │       ╰── <476> Constant Int [127]
            │       │   │       │   ╰── <486>  [!=]
            │       │   │       │       ├── <483> Arrow
            │       │   │       │       │   ├── <481> Var [stat_ptr]
            │       │   │       │       │   ╰── l
            │       │   │       │       ╰── <485> Constant Int [58]
            │       │   │       ╰── <497>  [!=]
            │       │   │           ├── <492> Arrow
            │       │   │           │   ├── <490> Var [stat_ptr]
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <496> AddressOf
            │       │   │               ╰── <495> Var [chr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <499> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <512> AddressOf
            │       │           ╰── <511> Arrow
            │       │               ├── <509> Var [stat_ptr]
            │       │               ╰── d
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <523> AddressOf
            │       │           ╰── <522> Arrow
            │       │               ├── <520> Var [stat_ptr]
            │       │               ╰── c
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <541>  [||]
            │       │   │       ├── <533>  [!=]
            │       │   │       │   ├── <528> Dereference
            │       │   │       │   │   ╰── <527> Var [d_ptr]
            │       │   │       │   ╰── <532> Unary [-]
            │       │   │       │       ╰── <531> Constant Double [+1.845381177299e12]
            │       │   │       ╰── <540>  [!=]
            │       │   │           ├── <537> Dereference
            │       │   │           │   ╰── <536> Var [c_ptr]
            │       │   │           ╰── <539> Constant Int [127]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <542> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <554>  [!=]
            │       │   │       ├── <551> Dereference
            │       │   │       │   ╰── <550> Arrow
            │       │   │       │       ├── <548> Var [stat_ptr]
            │       │   │       │       ╰── ptr
            │       │   │       ╰── <553> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <555> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <605> Unary [!]
            │       │   │       ╰── <604> FunctionCall [accept_params]
            │       │   │           ├── <568>  [/]
            │       │   │           │   ├── <565> Dot
            │       │   │           │   │   ├── <563> Var [stat]
            │       │   │           │   │   ╰── d
            │       │   │           │   ╰── <567> Constant Int [2000]
            │       │   │           ├── <575>  [*]
            │       │   │           │   ├── <572> Dot
            │       │   │           │   │   ├── <570> Var [stat]
            │       │   │           │   │   ╰── c
            │       │   │           │   ╰── <574> Constant Int [2]
            │       │   │           ├── <582> Cast
            │       │   │           │   ├── Target
            │       │   │           │   │   ╰── Double
            │       │   │           │   ╰── Expression
            │       │   │           │       ╰── <581> Dot
            │       │   │           │           ├── <579> Var [stat]
            │       │   │           │           ╰── l
            │       │   │           ├── <587> Dereference
            │       │   │           │   ╰── <586> Dot
            │       │   │           │       ├── <584> Var [stat]
            │       │   │           │       ╰── ptr
            │       │   │           ├── <591> Dot
            │       │   │           │   ├── <589> Var [stat]
            │       │   │           │   ╰── d
            │       │   │           ├── <595> Dot
            │       │   │           │   ├── <593> Var [stat]
            │       │   │           │   ╰── c
            │       │   │           ├── <599> Dot
            │       │   │           │   ├── <597> Var [stat]
            │       │   │           │   ╰── l
            │       │   │           ╰── <603> Dot
            │       │   │               ├── <601> Var [stat]
            │       │   │               ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <606> Constant Int [0]
            │       ╰── Return
            │           ╰── <611> Constant Int [1]
            ├── Function [test_exp_result_member]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── flag
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <623> Constant Int [1]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Struct [four_members]
            │       ├── <637> Assign [=]
            │       │   ├── <634> Dot
            │       │   │   ├── <632> Var [s1]
            │       │   │   ╰── d
            │       │   ╰── <636> Constant Double [+1e1]
            │       ├── <645> Assign [=]
            │       │   ├── <642> Dot
            │       │   │   ├── <640> Var [s1]
            │       │   │   ╰── c
            │       │   ╰── <644> Constant Int [99]
            │       ├── <653> Assign [=]
            │       │   ├── <650> Dot
            │       │   │   ├── <648> Var [s1]
            │       │   │   ╰── l
            │       │   ╰── <652> Constant Long [9223372036854775807]
            │       ├── <661> Assign [=]
            │       │   ├── <658> Dot
            │       │   │   ├── <656> Var [s1]
            │       │   │   ╰── ptr
            │       │   ╰── <660> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Struct [four_members]
            │       ├── <674> Assign [=]
            │       │   ├── <671> Dot
            │       │   │   ├── <669> Var [s2]
            │       │   │   ╰── d
            │       │   ╰── <673> Constant Double [+1.2e1]
            │       ├── <682> Assign [=]
            │       │   ├── <679> Dot
            │       │   │   ├── <677> Var [s2]
            │       │   │   ╰── c
            │       │   ╰── <681> Constant Int [98]
            │       ├── <692> Assign [=]
            │       │   ├── <687> Dot
            │       │   │   ├── <685> Var [s2]
            │       │   │   ╰── l
            │       │   ╰── <691> Unary [-]
            │       │       ╰── <690> Constant Long [9223372036854775807]
            │       ├── <700> Assign [=]
            │       │   ├── <697> Dot
            │       │   │   ├── <695> Var [s2]
            │       │   │   ╰── ptr
            │       │   ╰── <699> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s1_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [four_members]
            │       │   ╰── Initializer
            │       │       ╰── <709> AddressOf
            │       │           ╰── <708> Var [s1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s2_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [four_members]
            │       │   ╰── Initializer
            │       │       ╰── <719> AddressOf
            │       │           ╰── <718> Var [s2]
            │       ├── <734> Assign [=]
            │       │   ├── <731> Arrow
            │       │   │   ├── <729> Conditional [?]
            │       │   │   │   ├── <723> Var [flag]
            │       │   │   │   ├── Then
            │       │   │   │   │   ╰── <725> Var [s1_ptr]
            │       │   │   │   ╰── Else
            │       │   │   │       ╰── <727> Var [s2_ptr]
            │       │   │   ╰── c
            │       │   ╰── <733> Constant Int [127]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <742>  [!=]
            │       │   │       ├── <739> Dot
            │       │   │       │   ├── <737> Var [s1]
            │       │   │       │   ╰── c
            │       │   │       ╰── <741> Constant Int [127]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <743> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <754>  [!=]
            │       │   │       ├── <751> Dot
            │       │   │       │   ├── <749> Var [s2]
            │       │   │       │   ╰── c
            │       │   │       ╰── <753> Constant Int [98]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <755> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [four_members]
            │       │   ╰── Initializer
            │       │       ╰── <765> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <790>  [||]
            │       │   │       ├── <779>  [!=]
            │       │   │       │   ├── <776> Arrow
            │       │   │       │   │   ├── <774> Assign [=]
            │       │   │       │   │   │   ├── <769> Var [result_ptr]
            │       │   │       │   │   │   ╰── <772> Var [s2_ptr]
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <778> Constant Double [+1.2e1]
            │       │   │       ╰── <789>  [!=]
            │       │   │           ├── <784> Arrow
            │       │   │           │   ├── <782> Var [result_ptr]
            │       │   │           │   ╰── l
            │       │   │           ╰── <788> Unary [-]
            │       │   │               ╰── <787> Constant Long [9223372036854775807]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <791> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── void_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Void
            │       │   ╰── Initializer
            │       │       ╰── <806> FunctionCall [calloc]
            │       │           ├── <801> Constant Int [1]
            │       │           ╰── <805> SizeOfType
            │       │               ╰── Struct [four_members]
            │       ├── <821> Assign [=]
            │       │   ├── <818> Arrow
            │       │   │   ├── <816> Cast
            │       │   │   │   ├── Target
            │       │   │   │   │   ╰── Pointer
            │       │   │   │   │       ╰── Struct [four_members]
            │       │   │   │   ╰── Expression
            │       │   │   │       ╰── <814> Var [void_ptr]
            │       │   │   ╰── c
            │       │   ╰── <820> Constant Int [80]
            │       ├── <828> Assign [=]
            │       │   ├── <824> Var [result_ptr]
            │       │   ╰── <827> Var [void_ptr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <836>  [!=]
            │       │   │       ├── <833> Arrow
            │       │   │       │   ├── <831> Var [result_ptr]
            │       │   │       │   ╰── c
            │       │   │       ╰── <835> Constant Int [80]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <837> Constant Int [0]
            │       ╰── Return
            │           ╰── <842> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <853> Unary [!]
                    │   │       ╰── <852> FunctionCall [test_auto]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <854> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <862> Unary [!]
                    │   │       ╰── <861> FunctionCall [test_static]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <863> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <871> Unary [!]
                    │   │       ╰── <870> FunctionCall [test_exp_result_member]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <872> Constant Int [3]
                    ╰── Return
                        ╰── <877> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_dot() {
    let src = r#"
        struct four_members {
            double d;
            char c;
            long l;
            char *ptr;
        };
        double get_double(void) {
            return 2e12;
        }
        static long l = 34359738378l;
        int accept_params(int d_divided, int c_doubled, double l_cast,
                          int dereferenced_ptr, double d, int c, long l, char *ptr) {
            if (d != 4e12 || c != 127 || l != 8589934594l || *ptr != 100 ||
                d_divided != 100.0 || c_doubled != 254 || l_cast != 8589934594.0 ||
                dereferenced_ptr != 100) {
                return 0;
            }
            return 1;
        }
        int test_auto(void) {
            struct four_members autom;
            autom.d = get_double() * 2.0;
            autom.c = 127;
            autom.l = l / 4;
            char chr = 100;
            autom.ptr = &chr;
            if (autom.d != 4e12 || autom.c != 127 || autom.l != 8589934594l ||
                autom.ptr != &chr) {
                return 0;
            }
            double *d_ptr = &autom.d;
            char *c_ptr = &autom.c;
            if (*d_ptr != 4e12 || *c_ptr != 127) {
                return 0;
            }
            if (*autom.ptr != 100) {
                return 0;
            }
            if (!accept_params(autom.d / 4e10, autom.c * 2, (double)autom.l, *autom.ptr,
                               autom.d, autom.c, autom.l, autom.ptr)) {
                return 0;
            }
            return 1;
        }
        int test_static(void) {
            static struct four_members stat;
            static char chr = 100;
            stat.d = get_double() * 2.0;
            stat.c = 127;
            stat.l = l / 4;
            stat.ptr = &chr;
            if (stat.d != 4e12 || stat.c != 127 || stat.l != 8589934594l ||
                stat.ptr != &chr) {
                return 0;
            }
            double *d_ptr = &stat.d;
            char *c_ptr = &stat.c;
            if (*d_ptr != 4e12 || *c_ptr != 127) {
                return 0;
            }
            if (*stat.ptr != 100) {
                return 0;
            }
            if (!accept_params(stat.d / 4e10, stat.c * 2, (double)stat.l, *stat.ptr,
                               stat.d, stat.c, stat.l, stat.ptr)) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto()) {
                return 1;
            }
            if (!test_static()) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [four_members]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Char
            ├── Function [get_double]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <24> Constant Double [+2e12]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ├── Type
            │   │   ╰── Long
            │   ├── Initializer
            │   │   ╰── <32> Constant Long [34359738378]
            │   ╰── Static
            ├── Function [accept_params]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d_divided
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c_doubled
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l_cast
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── dereferenced_ptr
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <118>  [||]
            │       │   │       ├── <111>  [||]
            │       │   │       │   ├── <104>  [||]
            │       │   │       │   │   ├── <97>  [||]
            │       │   │       │   │   │   ├── <90>  [||]
            │       │   │       │   │   │   │   ├── <82>  [||]
            │       │   │       │   │   │   │   │   ├── <75>  [||]
            │       │   │       │   │   │   │   │   │   ├── <68>  [!=]
            │       │   │       │   │   │   │   │   │   │   ├── <65> Var [d]
            │       │   │       │   │   │   │   │   │   │   ╰── <67> Constant Double [+4e12]
            │       │   │       │   │   │   │   │   │   ╰── <74>  [!=]
            │       │   │       │   │   │   │   │   │       ├── <71> Var [c]
            │       │   │       │   │   │   │   │   │       ╰── <73> Constant Int [127]
            │       │   │       │   │   │   │   │   ╰── <81>  [!=]
            │       │   │       │   │   │   │   │       ├── <78> Var [l]
            │       │   │       │   │   │   │   │       ╰── <80> Constant Long [8589934594]
            │       │   │       │   │   │   │   ╰── <89>  [!=]
            │       │   │       │   │   │   │       ├── <86> Dereference
            │       │   │       │   │   │   │       │   ╰── <85> Var [ptr]
            │       │   │       │   │   │   │       ╰── <88> Constant Int [100]
            │       │   │       │   │   │   ╰── <96>  [!=]
            │       │   │       │   │   │       ├── <93> Var [d_divided]
            │       │   │       │   │   │       ╰── <95> Constant Double [+1e2]
            │       │   │       │   │   ╰── <103>  [!=]
            │       │   │       │   │       ├── <100> Var [c_doubled]
            │       │   │       │   │       ╰── <102> Constant Int [254]
            │       │   │       │   ╰── <110>  [!=]
            │       │   │       │       ├── <107> Var [l_cast]
            │       │   │       │       ╰── <109> Constant Double [+8.589934594e9]
            │       │   │       ╰── <117>  [!=]
            │       │   │           ├── <114> Var [dereferenced_ptr]
            │       │   │           ╰── <116> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <119> Constant Int [0]
            │       ╰── Return
            │           ╰── <124> Constant Int [1]
            ├── Function [test_auto]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── autom
            │       │   ╰── Type
            │       │       ╰── Struct [four_members]
            │       ├── <147> Assign [=]
            │       │   ├── <140> Dot
            │       │   │   ├── <138> Var [autom]
            │       │   │   ╰── d
            │       │   ╰── <146>  [*]
            │       │       ├── <143> FunctionCall [get_double]
            │       │       ╰── <145> Constant Double [+2e0]
            │       ├── <155> Assign [=]
            │       │   ├── <152> Dot
            │       │   │   ├── <150> Var [autom]
            │       │   │   ╰── c
            │       │   ╰── <154> Constant Int [127]
            │       ├── <167> Assign [=]
            │       │   ├── <160> Dot
            │       │   │   ├── <158> Var [autom]
            │       │   │   ╰── l
            │       │   ╰── <166>  [/]
            │       │       ├── <163> Var [l]
            │       │       ╰── <165> Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── chr
            │       │   ├── Type
            │       │   │   ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <172> Constant Int [100]
            │       ├── <183> Assign [=]
            │       │   ├── <178> Dot
            │       │   │   ├── <176> Var [autom]
            │       │   │   ╰── ptr
            │       │   ╰── <182> AddressOf
            │       │       ╰── <181> Var [chr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <220>  [||]
            │       │   │       ├── <209>  [||]
            │       │   │       │   ├── <200>  [||]
            │       │   │       │   │   ├── <191>  [!=]
            │       │   │       │   │   │   ├── <188> Dot
            │       │   │       │   │   │   │   ├── <186> Var [autom]
            │       │   │       │   │   │   │   ╰── d
            │       │   │       │   │   │   ╰── <190> Constant Double [+4e12]
            │       │   │       │   │   ╰── <199>  [!=]
            │       │   │       │   │       ├── <196> Dot
            │       │   │       │   │       │   ├── <194> Var [autom]
            │       │   │       │   │       │   ╰── c
            │       │   │       │   │       ╰── <198> Constant Int [127]
            │       │   │       │   ╰── <208>  [!=]
            │       │   │       │       ├── <205> Dot
            │       │   │       │       │   ├── <203> Var [autom]
            │       │   │       │       │   ╰── l
            │       │   │       │       ╰── <207> Constant Long [8589934594]
            │       │   │       ╰── <219>  [!=]
            │       │   │           ├── <214> Dot
            │       │   │           │   ├── <212> Var [autom]
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <218> AddressOf
            │       │   │               ╰── <217> Var [chr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <221> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <234> AddressOf
            │       │           ╰── <233> Dot
            │       │               ├── <231> Var [autom]
            │       │               ╰── d
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <245> AddressOf
            │       │           ╰── <244> Dot
            │       │               ├── <242> Var [autom]
            │       │               ╰── c
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <261>  [||]
            │       │   │       ├── <253>  [!=]
            │       │   │       │   ├── <250> Dereference
            │       │   │       │   │   ╰── <249> Var [d_ptr]
            │       │   │       │   ╰── <252> Constant Double [+4e12]
            │       │   │       ╰── <260>  [!=]
            │       │   │           ├── <257> Dereference
            │       │   │           │   ╰── <256> Var [c_ptr]
            │       │   │           ╰── <259> Constant Int [127]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <262> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <274>  [!=]
            │       │   │       ├── <271> Dereference
            │       │   │       │   ╰── <270> Dot
            │       │   │       │       ├── <268> Var [autom]
            │       │   │       │       ╰── ptr
            │       │   │       ╰── <273> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <275> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <325> Unary [!]
            │       │   │       ╰── <324> FunctionCall [accept_params]
            │       │   │           ├── <288>  [/]
            │       │   │           │   ├── <285> Dot
            │       │   │           │   │   ├── <283> Var [autom]
            │       │   │           │   │   ╰── d
            │       │   │           │   ╰── <287> Constant Double [+4e10]
            │       │   │           ├── <295>  [*]
            │       │   │           │   ├── <292> Dot
            │       │   │           │   │   ├── <290> Var [autom]
            │       │   │           │   │   ╰── c
            │       │   │           │   ╰── <294> Constant Int [2]
            │       │   │           ├── <302> Cast
            │       │   │           │   ├── Target
            │       │   │           │   │   ╰── Double
            │       │   │           │   ╰── Expression
            │       │   │           │       ╰── <301> Dot
            │       │   │           │           ├── <299> Var [autom]
            │       │   │           │           ╰── l
            │       │   │           ├── <307> Dereference
            │       │   │           │   ╰── <306> Dot
            │       │   │           │       ├── <304> Var [autom]
            │       │   │           │       ╰── ptr
            │       │   │           ├── <311> Dot
            │       │   │           │   ├── <309> Var [autom]
            │       │   │           │   ╰── d
            │       │   │           ├── <315> Dot
            │       │   │           │   ├── <313> Var [autom]
            │       │   │           │   ╰── c
            │       │   │           ├── <319> Dot
            │       │   │           │   ├── <317> Var [autom]
            │       │   │           │   ╰── l
            │       │   │           ╰── <323> Dot
            │       │   │               ├── <321> Var [autom]
            │       │   │               ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <326> Constant Int [0]
            │       ╰── Return
            │           ╰── <331> Constant Int [1]
            ├── Function [test_static]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── stat
            │       │   ├── Type
            │       │   │   ╰── Struct [four_members]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── chr
            │       │   ├── Type
            │       │   │   ╰── Char
            │       │   ├── Initializer
            │       │   │   ╰── <349> Constant Int [100]
            │       │   ╰── Static
            │       ├── <362> Assign [=]
            │       │   ├── <355> Dot
            │       │   │   ├── <353> Var [stat]
            │       │   │   ╰── d
            │       │   ╰── <361>  [*]
            │       │       ├── <358> FunctionCall [get_double]
            │       │       ╰── <360> Constant Double [+2e0]
            │       ├── <370> Assign [=]
            │       │   ├── <367> Dot
            │       │   │   ├── <365> Var [stat]
            │       │   │   ╰── c
            │       │   ╰── <369> Constant Int [127]
            │       ├── <382> Assign [=]
            │       │   ├── <375> Dot
            │       │   │   ├── <373> Var [stat]
            │       │   │   ╰── l
            │       │   ╰── <381>  [/]
            │       │       ├── <378> Var [l]
            │       │       ╰── <380> Constant Int [4]
            │       ├── <392> Assign [=]
            │       │   ├── <387> Dot
            │       │   │   ├── <385> Var [stat]
            │       │   │   ╰── ptr
            │       │   ╰── <391> AddressOf
            │       │       ╰── <390> Var [chr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <429>  [||]
            │       │   │       ├── <418>  [||]
            │       │   │       │   ├── <409>  [||]
            │       │   │       │   │   ├── <400>  [!=]
            │       │   │       │   │   │   ├── <397> Dot
            │       │   │       │   │   │   │   ├── <395> Var [stat]
            │       │   │       │   │   │   │   ╰── d
            │       │   │       │   │   │   ╰── <399> Constant Double [+4e12]
            │       │   │       │   │   ╰── <408>  [!=]
            │       │   │       │   │       ├── <405> Dot
            │       │   │       │   │       │   ├── <403> Var [stat]
            │       │   │       │   │       │   ╰── c
            │       │   │       │   │       ╰── <407> Constant Int [127]
            │       │   │       │   ╰── <417>  [!=]
            │       │   │       │       ├── <414> Dot
            │       │   │       │       │   ├── <412> Var [stat]
            │       │   │       │       │   ╰── l
            │       │   │       │       ╰── <416> Constant Long [8589934594]
            │       │   │       ╰── <428>  [!=]
            │       │   │           ├── <423> Dot
            │       │   │           │   ├── <421> Var [stat]
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <427> AddressOf
            │       │   │               ╰── <426> Var [chr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <430> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <443> AddressOf
            │       │           ╰── <442> Dot
            │       │               ├── <440> Var [stat]
            │       │               ╰── d
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <454> AddressOf
            │       │           ╰── <453> Dot
            │       │               ├── <451> Var [stat]
            │       │               ╰── c
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <470>  [||]
            │       │   │       ├── <462>  [!=]
            │       │   │       │   ├── <459> Dereference
            │       │   │       │   │   ╰── <458> Var [d_ptr]
            │       │   │       │   ╰── <461> Constant Double [+4e12]
            │       │   │       ╰── <469>  [!=]
            │       │   │           ├── <466> Dereference
            │       │   │           │   ╰── <465> Var [c_ptr]
            │       │   │           ╰── <468> Constant Int [127]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <471> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <483>  [!=]
            │       │   │       ├── <480> Dereference
            │       │   │       │   ╰── <479> Dot
            │       │   │       │       ├── <477> Var [stat]
            │       │   │       │       ╰── ptr
            │       │   │       ╰── <482> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <484> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <534> Unary [!]
            │       │   │       ╰── <533> FunctionCall [accept_params]
            │       │   │           ├── <497>  [/]
            │       │   │           │   ├── <494> Dot
            │       │   │           │   │   ├── <492> Var [stat]
            │       │   │           │   │   ╰── d
            │       │   │           │   ╰── <496> Constant Double [+4e10]
            │       │   │           ├── <504>  [*]
            │       │   │           │   ├── <501> Dot
            │       │   │           │   │   ├── <499> Var [stat]
            │       │   │           │   │   ╰── c
            │       │   │           │   ╰── <503> Constant Int [2]
            │       │   │           ├── <511> Cast
            │       │   │           │   ├── Target
            │       │   │           │   │   ╰── Double
            │       │   │           │   ╰── Expression
            │       │   │           │       ╰── <510> Dot
            │       │   │           │           ├── <508> Var [stat]
            │       │   │           │           ╰── l
            │       │   │           ├── <516> Dereference
            │       │   │           │   ╰── <515> Dot
            │       │   │           │       ├── <513> Var [stat]
            │       │   │           │       ╰── ptr
            │       │   │           ├── <520> Dot
            │       │   │           │   ├── <518> Var [stat]
            │       │   │           │   ╰── d
            │       │   │           ├── <524> Dot
            │       │   │           │   ├── <522> Var [stat]
            │       │   │           │   ╰── c
            │       │   │           ├── <528> Dot
            │       │   │           │   ├── <526> Var [stat]
            │       │   │           │   ╰── l
            │       │   │           ╰── <532> Dot
            │       │   │               ├── <530> Var [stat]
            │       │   │               ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <535> Constant Int [0]
            │       ╰── Return
            │           ╰── <540> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <551> Unary [!]
                    │   │       ╰── <550> FunctionCall [test_auto]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <552> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <560> Unary [!]
                    │   │       ╰── <559> FunctionCall [test_static]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <561> Constant Int [2]
                    ╰── Return
                        ╰── <566> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_linked_list() {
    let src = r#"
        void *malloc(unsigned long size);
        struct linked_list_node {
            int val;
            struct linked_list_node *next;
        };
        struct linked_list_node *array_to_list(int *array, int count) {
            struct linked_list_node *head =
                (struct linked_list_node *)malloc(sizeof(struct linked_list_node));
            head->val = array[0];
            head->next = 0;
            struct linked_list_node *current = head;
            for (int i = 1; i < count; i = i + 1) {
                current->next =
                    (struct linked_list_node *)malloc(sizeof(struct linked_list_node));
                current->next->next = 0;
                current->next->val = array[i];
                current = current->next;
            }
            return head;
        }
        int main(void) {
            int arr[4] = {9, 8, 7, 6};
            struct linked_list_node *elem = array_to_list(arr, 4);
            for (int i = 0; i < 4; i = i + 1) {
                int expected = arr[i];
                if (elem->val != expected) {
                    return i + 1;
                }
                elem = elem->next;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [linked_list_node]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── val
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── next
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Struct [linked_list_node]
            ├── Function [array_to_list]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── array
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── count
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── head
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [linked_list_node]
            │       │   ╰── Initializer
            │       │       ╰── <50> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Struct [linked_list_node]
            │       │           ╰── Expression
            │       │               ╰── <49> FunctionCall [malloc]
            │       │                   ╰── <48> SizeOfType
            │       │                       ╰── Struct [linked_list_node]
            │       ├── <62> Assign [=]
            │       │   ├── <56> Arrow
            │       │   │   ├── <54> Var [head]
            │       │   │   ╰── val
            │       │   ╰── <61> Subscript
            │       │       ├── <59> Var [array]
            │       │       ╰── <60> Constant Int [0]
            │       ├── <70> Assign [=]
            │       │   ├── <67> Arrow
            │       │   │   ├── <65> Var [head]
            │       │   │   ╰── next
            │       │   ╰── <69> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── current
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [linked_list_node]
            │       │   ╰── Initializer
            │       │       ╰── <78> Var [head]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <84> Constant Int [1]
            │       │   ├── Condition
            │       │   │   ╰── <93>  [<]
            │       │   │       ├── <89> Var [i]
            │       │   │       ╰── <92> Var [count]
            │       │   ├── Condition
            │       │   │   ╰── <102> Assign [=]
            │       │   │       ├── <95> Var [i]
            │       │   │       ╰── <101>  [+]
            │       │   │           ├── <98> Var [i]
            │       │   │           ╰── <100> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── <119> Assign [=]
            │       │       │   ├── <106> Arrow
            │       │       │   │   ├── <104> Var [current]
            │       │       │   │   ╰── next
            │       │       │   ╰── <118> Cast
            │       │       │       ├── Target
            │       │       │       │   ╰── Pointer
            │       │       │       │       ╰── Struct [linked_list_node]
            │       │       │       ╰── Expression
            │       │       │           ╰── <117> FunctionCall [malloc]
            │       │       │               ╰── <116> SizeOfType
            │       │       │                   ╰── Struct [linked_list_node]
            │       │       ├── <129> Assign [=]
            │       │       │   ├── <126> Arrow
            │       │       │   │   ├── <124> Arrow
            │       │       │   │   │   ├── <122> Var [current]
            │       │       │   │   │   ╰── next
            │       │       │   │   ╰── next
            │       │       │   ╰── <128> Constant Int [0]
            │       │       ├── <143> Assign [=]
            │       │       │   ├── <136> Arrow
            │       │       │   │   ├── <134> Arrow
            │       │       │   │   │   ├── <132> Var [current]
            │       │       │   │   │   ╰── next
            │       │       │   │   ╰── val
            │       │       │   ╰── <142> Subscript
            │       │       │       ├── <139> Var [array]
            │       │       │       ╰── <141> Var [i]
            │       │       ╰── <152> Assign [=]
            │       │           ├── <146> Var [current]
            │       │           ╰── <151> Arrow
            │       │               ├── <149> Var [current]
            │       │               ╰── next
            │       ╰── Return
            │           ╰── <158> Var [head]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <171> Constant Int [9]
                    │           ├── <173> Constant Int [8]
                    │           ├── <175> Constant Int [7]
                    │           ╰── <177> Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── elem
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [linked_list_node]
                    │   ╰── Initializer
                    │       ╰── <190> FunctionCall [array_to_list]
                    │           ├── <188> Var [arr]
                    │           ╰── <189> Constant Int [4]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <196> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <204>  [<]
                    │   │       ├── <201> Var [i]
                    │   │       ╰── <203> Constant Int [4]
                    │   ├── Condition
                    │   │   ╰── <213> Assign [=]
                    │   │       ├── <206> Var [i]
                    │   │       ╰── <212>  [+]
                    │   │           ├── <209> Var [i]
                    │   │           ╰── <211> Constant Int [1]
                    │   ╰── Block
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── expected
                    │       │   ├── Type
                    │       │   │   ╰── Int
                    │       │   ╰── Initializer
                    │       │       ╰── <221> Subscript
                    │       │           ├── <218> Var [arr]
                    │       │           ╰── <220> Var [i]
                    │       ├── If
                    │       │   ├── Condition
                    │       │   │   ╰── <231>  [!=]
                    │       │   │       ├── <227> Arrow
                    │       │   │       │   ├── <225> Var [elem]
                    │       │   │       │   ╰── val
                    │       │   │       ╰── <230> Var [expected]
                    │       │   ╰── Then
                    │       │       ╰── Block
                    │       │           ╰── Return
                    │       │               ╰── <236>  [+]
                    │       │                   ├── <233> Var [i]
                    │       │                   ╰── <235> Constant Int [1]
                    │       ╰── <248> Assign [=]
                    │           ├── <242> Var [elem]
                    │           ╰── <247> Arrow
                    │               ├── <245> Var [elem]
                    │               ╰── next
                    ╰── Return
                        ╰── <253> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_nested_struct() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        void *malloc(unsigned long size);
        struct inner {
            double a;
            char b;
            int *ptr;
        };
        struct outer {
            unsigned long l;
            struct inner *in_ptr;
            struct inner in_array[4];
            int bar;
            struct inner in;
        };
        int ptr_target;
        int test_auto_dot(void) {
            struct outer s;
            s.in.a = 1.0;
            s.in.b = 2;
            s.in.ptr = &ptr_target;
            if (s.in.a != 1.0 || s.in.b != 2 || s.in.ptr != &ptr_target) {
                return 0;
            }
            char *char_ptr = &s.in.b;
            if (*char_ptr != 2) {
                return 0;
            }
            *s.in.ptr = 5;
            if (ptr_target != 5) {
                return 0;
            }
            s.in.a = s.in.b;
            if (s.in.a != 2.0) {
                return 0;
            }
            return 1;
        }
        int test_static_dot(void) {
            static struct outer s;
            s.in.a = 1.0;
            s.in.b = 2;
            s.in.ptr = &ptr_target;
            if (s.in.a != 1.0 || s.in.b != 2 || s.in.ptr != &ptr_target) {
                return 0;
            }
            char *char_ptr = &s.in.b;
            if (*char_ptr != 2) {
                return 0;
            }
            *s.in.ptr = 6;
            if (ptr_target != 6) {
                return 0;
            }
            s.in.a = s.in.b;
            if (s.in.a != 2.0) {
                return 0;
            }
            return 1;
        }
        int test_auto_arrow(void) {
            struct inner in;
            struct outer s;
            struct outer *s_ptr = &s;
            s_ptr->in_ptr = &in;
            s_ptr->l = 4294967295ul;
            s_ptr->bar = -5;
            s_ptr->in_ptr->a = 10.0;
            s_ptr->in_ptr->b = 'x';
            s_ptr->in_array->a = 11.0;
            (s_ptr->in_array + 3)->a = 12.0;
            s_ptr->in_array->ptr = &s_ptr->bar;
            if (s_ptr->l != 4294967295ul || s_ptr->bar != -5) {
                return 0;
            }
            if (s_ptr->in_ptr->a != 10.0 || s_ptr->in_ptr->b != 'x' ||
                s_ptr->in_array->a != 11.0 || (s_ptr->in_array + 3)->a != 12.0) {
                return 0;
            }
            char *char_ptr = &s_ptr->in_ptr->b;
            if (*char_ptr != 'x') {
                return 0;
            }
            *s_ptr->in_array->ptr = 123;
            if (s_ptr->bar != 123) {
                return 0;
            }
            s_ptr->in_array->b = s_ptr->in_ptr->b;
            if (s_ptr->in_array[0].b != 'x') {
                return 0;
            }
            return 1;
        }
        int test_static_arrow(void) {
            static struct inner in;
            static struct outer s;
            static struct outer *s_ptr;
            s_ptr = &s;
            s_ptr->in_ptr = &in;
            s_ptr->l = 4294967295ul;
            s_ptr->bar = -5;
            s_ptr->in_ptr->a = 10.0;
            s_ptr->in_ptr->b = 'x';
            s_ptr->in_array->a = 11.0;
            (s_ptr->in_array + 3)->a = 12.0;
            s_ptr->in_array->ptr = &s_ptr->bar;
            if (s_ptr->l != 4294967295ul || s_ptr->bar != -5) {
                return 0;
            }
            if (s_ptr->in_ptr->a != 10.0 || s_ptr->in_ptr->b != 'x' ||
                s_ptr->in_array->a != 11.0 || (s_ptr->in_array + 3)->a != 12.0) {
                return 0;
            }
            char *char_ptr = &s_ptr->in_ptr->b;
            if (*char_ptr != 'x') {
                return 0;
            }
            *s_ptr->in_array->ptr = 123;
            if (s_ptr->bar != 123) {
                return 0;
            }
            s_ptr->in_ptr->b = s_ptr->in_ptr->a;
            if (s_ptr->in_ptr->b != 10) {
                return 0;
            }
            return 1;
        }
        int test_mixed(void) {
            struct inner *in_ptr = malloc(sizeof(struct inner));
            struct outer out;
            out.in_ptr = in_ptr;
            struct outer *out_ptr = &out;
            out.l = 10;
            out.bar = 20;
            out.in_ptr->a = -1.0;
            out.in_ptr->b = '!';
            out.in_ptr->ptr = 0;
            out_ptr->in_array[0].a = -2.0;
            out_ptr->in_array[0].b = '?';
            out_ptr->in_array[0].ptr = 0;
            out_ptr->in_array[3].a = -3.0;
            out_ptr->in_array[3].b = '*';
            out_ptr->in_array[3].ptr = malloc(sizeof(int));
            out_ptr->in.a = -3.0;
            out_ptr->in.b = '&';
            int i = 9;
            out_ptr->in.ptr = &i;
            if (out.l != 10 || out.bar != 20) {
                return 0;
            }
            if (out.in_ptr->a != -1.0 || out.in_ptr->b != '!' || out.in_ptr->ptr) {
                return 0;
            }
            if (out_ptr->in_array[0].a != -2.0 || out_ptr->in_array[0].b != '?' ||
                out_ptr->in_array[0].ptr || out_ptr->in_array[3].a != -3.0 ||
                out_ptr->in_array[3].b != '*' || out_ptr->in.a != -3.0 ||
                out_ptr->in.b != '&' || out_ptr->in.ptr != &i) {
                return 0;
            }
            *out_ptr->in_array[3].ptr = 5;
            if (*out_ptr->in_array[3].ptr != 5) {
                return 0;
            }
            out_ptr->in.b = out.in_ptr->b;
            if (out_ptr->in.b != out.in_ptr->b) {
                return 0;
            }
            return 1;
        }
        int test_array_of_structs(void) {
            static struct outer struct_array[3];
            struct inner *in_ptr = malloc(sizeof(struct inner));
            struct_array[0].in_ptr = in_ptr;
            struct_array[1].in_ptr = in_ptr;
            struct_array[0].in_ptr->a = 20.0;
            struct_array[1].in_ptr->b = '@';
            struct_array[0].in_ptr->ptr = 0;
            struct_array[1].in_array[1].a = 30.0;
            struct_array[1].in_array[0].b = '#';
            struct_array[2].in.a = 40.0;
            struct_array[2].in.b = '$';
            if (struct_array[1].in_ptr->a != 20.0 || struct_array[0].in_ptr->b != '@' ||
                struct_array[1].in_ptr->ptr) {
                return 0;
            }
            if (struct_array[1].in_array[1].a != 30.0 ||
                struct_array[1].in_array[0].b != '#' || struct_array[2].in.a != 40.0 ||
                struct_array[2].in.b != '$') {
                return 0;
            }
            return 1;
        }
        int test_array_of_struct_pointers(void) {
            struct outer *ptr_array[2];
            ptr_array[0] = calloc(1, sizeof(struct outer));
            ptr_array[1] = calloc(1, sizeof(struct outer));
            ptr_array[1]->in_ptr = calloc(1, sizeof(struct inner));
            ptr_array[1]->in_ptr->ptr = 0;
            ptr_array[1]->in_ptr->b = '%';
            ptr_array[1]->in_ptr->a = 876.5;
            ptr_array[1]->in_array[2].a = 1000.5;
            ptr_array[1]->in.a = 7e6;
            ptr_array[0]->in_ptr = calloc(1, sizeof(struct inner));
            ptr_array[0]->in_ptr->ptr = 0;
            ptr_array[0]->in_ptr->b = '^';
            ptr_array[0]->in_ptr->a = 123.4;
            ptr_array[0]->in_array[1].b = '&';
            ptr_array[0]->in.ptr = &ptr_array[0]->bar;
            ptr_array[0]->bar = 900;
            if (ptr_array[0]->in_array[1].b != '&') {
                return 0;
            }
            if (ptr_array[0]->in_ptr->a != 123.4 || ptr_array[0]->in_ptr->b != '^' ||
                ptr_array[0]->in_ptr->ptr) {
                return 0;
            }
            if (ptr_array[1]->in.a != 7e6) {
                return 0;
            }
            if (ptr_array[1]->in_array[2].a != 1000.5) {
                return 0;
            }
            if (ptr_array[1]->in_ptr->a != 876.5 || ptr_array[1]->in_ptr->b != '%' ||
                ptr_array[1]->in_ptr->ptr) {
                return 0;
            }
            if (*ptr_array[0]->in.ptr != 900) {
                return 0;
            }
            if (ptr_array[0]->l) {
                return 0;
            }
            for (int i = 0; i < 4; i = i + 1) {
                struct inner *elem_ptr = &ptr_array[0]->in_array[i];
                if (elem_ptr->a || elem_ptr->ptr) {
                    return 0;
                }
                if (elem_ptr->b && i != 1) {
                    return 0;
                }
            }
            if (ptr_array[0]->in.a || ptr_array[0]->in.b) {
                return 0;
            }
            if (ptr_array[1]->l || ptr_array[1]->bar) {
                return 0;
            }
            for (int i = 0; i < 4; i = i + 1) {
                struct inner *elem_ptr = &ptr_array[1]->in_array[i];
                if (elem_ptr->b || elem_ptr->ptr) {
                    return 0;
                }
                if (elem_ptr->a && i != 2) {
                    return 0;
                }
            }
            if (ptr_array[1]->in.b || ptr_array[1]->in.ptr) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto_dot()) {
                return 1;
            }
            if (!test_static_dot()) {
                return 2;
            }
            if (!test_auto_arrow()) {
                return 3;
            }
            if (!test_static_arrow()) {
                return 4;
            }
            if (!test_mixed()) {
                return 5;
            }
            if (!test_array_of_structs()) {
                return 6;
            }
            if (!test_array_of_struct_pointers()) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── in_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── in_array
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 4
            │   │           ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── bar
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── in
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr_target
            │   ╰── Type
            │       ╰── Int
            ├── Function [test_auto_dot]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ╰── Type
            │       │       ╰── Struct [outer]
            │       ├── <86> Assign [=]
            │       │   ├── <83> Dot
            │       │   │   ├── <81> Dot
            │       │   │   │   ├── <79> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <85> Constant Double [+1e0]
            │       ├── <96> Assign [=]
            │       │   ├── <93> Dot
            │       │   │   ├── <91> Dot
            │       │   │   │   ├── <89> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── b
            │       │   ╰── <95> Constant Int [2]
            │       ├── <108> Assign [=]
            │       │   ├── <103> Dot
            │       │   │   ├── <101> Dot
            │       │   │   │   ├── <99> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── ptr
            │       │   ╰── <107> AddressOf
            │       │       ╰── <106> Var [ptr_target]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <142>  [||]
            │       │   │       ├── <129>  [||]
            │       │   │       │   ├── <118>  [!=]
            │       │   │       │   │   ├── <115> Dot
            │       │   │       │   │   │   ├── <113> Dot
            │       │   │       │   │   │   │   ├── <111> Var [s]
            │       │   │       │   │   │   │   ╰── in
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <117> Constant Double [+1e0]
            │       │   │       │   ╰── <128>  [!=]
            │       │   │       │       ├── <125> Dot
            │       │   │       │       │   ├── <123> Dot
            │       │   │       │       │   │   ├── <121> Var [s]
            │       │   │       │       │   │   ╰── in
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <127> Constant Int [2]
            │       │   │       ╰── <141>  [!=]
            │       │   │           ├── <136> Dot
            │       │   │           │   ├── <134> Dot
            │       │   │           │   │   ├── <132> Var [s]
            │       │   │           │   │   ╰── in
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <140> AddressOf
            │       │   │               ╰── <139> Var [ptr_target]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <143> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── char_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <158> AddressOf
            │       │           ╰── <157> Dot
            │       │               ├── <155> Dot
            │       │               │   ├── <153> Var [s]
            │       │               │   ╰── in
            │       │               ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <166>  [!=]
            │       │   │       ├── <163> Dereference
            │       │   │       │   ╰── <162> Var [char_ptr]
            │       │   │       ╰── <165> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <167> Constant Int [0]
            │       ├── <181> Assign [=]
            │       │   ├── <178> Dereference
            │       │   │   ╰── <177> Dot
            │       │   │       ├── <175> Dot
            │       │   │       │   ├── <173> Var [s]
            │       │   │       │   ╰── in
            │       │   │       ╰── ptr
            │       │   ╰── <180> Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <187>  [!=]
            │       │   │       ├── <184> Var [ptr_target]
            │       │   │       ╰── <186> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <188> Constant Int [0]
            │       ├── <206> Assign [=]
            │       │   ├── <198> Dot
            │       │   │   ├── <196> Dot
            │       │   │   │   ├── <194> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <205> Dot
            │       │       ├── <203> Dot
            │       │       │   ├── <201> Var [s]
            │       │       │   ╰── in
            │       │       ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <216>  [!=]
            │       │   │       ├── <213> Dot
            │       │   │       │   ├── <211> Dot
            │       │   │       │   │   ├── <209> Var [s]
            │       │   │       │   │   ╰── in
            │       │   │       │   ╰── a
            │       │   │       ╰── <215> Constant Double [+2e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <217> Constant Int [0]
            │       ╰── Return
            │           ╰── <222> Constant Int [1]
            ├── Function [test_static_dot]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Static
            │       ├── <244> Assign [=]
            │       │   ├── <241> Dot
            │       │   │   ├── <239> Dot
            │       │   │   │   ├── <237> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <243> Constant Double [+1e0]
            │       ├── <254> Assign [=]
            │       │   ├── <251> Dot
            │       │   │   ├── <249> Dot
            │       │   │   │   ├── <247> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── b
            │       │   ╰── <253> Constant Int [2]
            │       ├── <266> Assign [=]
            │       │   ├── <261> Dot
            │       │   │   ├── <259> Dot
            │       │   │   │   ├── <257> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── ptr
            │       │   ╰── <265> AddressOf
            │       │       ╰── <264> Var [ptr_target]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <300>  [||]
            │       │   │       ├── <287>  [||]
            │       │   │       │   ├── <276>  [!=]
            │       │   │       │   │   ├── <273> Dot
            │       │   │       │   │   │   ├── <271> Dot
            │       │   │       │   │   │   │   ├── <269> Var [s]
            │       │   │       │   │   │   │   ╰── in
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <275> Constant Double [+1e0]
            │       │   │       │   ╰── <286>  [!=]
            │       │   │       │       ├── <283> Dot
            │       │   │       │       │   ├── <281> Dot
            │       │   │       │       │   │   ├── <279> Var [s]
            │       │   │       │       │   │   ╰── in
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <285> Constant Int [2]
            │       │   │       ╰── <299>  [!=]
            │       │   │           ├── <294> Dot
            │       │   │           │   ├── <292> Dot
            │       │   │           │   │   ├── <290> Var [s]
            │       │   │           │   │   ╰── in
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <298> AddressOf
            │       │   │               ╰── <297> Var [ptr_target]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <301> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── char_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <316> AddressOf
            │       │           ╰── <315> Dot
            │       │               ├── <313> Dot
            │       │               │   ├── <311> Var [s]
            │       │               │   ╰── in
            │       │               ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <324>  [!=]
            │       │   │       ├── <321> Dereference
            │       │   │       │   ╰── <320> Var [char_ptr]
            │       │   │       ╰── <323> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <325> Constant Int [0]
            │       ├── <339> Assign [=]
            │       │   ├── <336> Dereference
            │       │   │   ╰── <335> Dot
            │       │   │       ├── <333> Dot
            │       │   │       │   ├── <331> Var [s]
            │       │   │       │   ╰── in
            │       │   │       ╰── ptr
            │       │   ╰── <338> Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <345>  [!=]
            │       │   │       ├── <342> Var [ptr_target]
            │       │   │       ╰── <344> Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <346> Constant Int [0]
            │       ├── <364> Assign [=]
            │       │   ├── <356> Dot
            │       │   │   ├── <354> Dot
            │       │   │   │   ├── <352> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <363> Dot
            │       │       ├── <361> Dot
            │       │       │   ├── <359> Var [s]
            │       │       │   ╰── in
            │       │       ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <374>  [!=]
            │       │   │       ├── <371> Dot
            │       │   │       │   ├── <369> Dot
            │       │   │       │   │   ├── <367> Var [s]
            │       │   │       │   │   ╰── in
            │       │   │       │   ╰── a
            │       │   │       ╰── <373> Constant Double [+2e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <375> Constant Int [0]
            │       ╰── Return
            │           ╰── <380> Constant Int [1]
            ├── Function [test_auto_arrow]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── in
            │       │   ╰── Type
            │       │       ╰── Struct [inner]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ╰── Type
            │       │       ╰── Struct [outer]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── <405> AddressOf
            │       │           ╰── <404> Var [s]
            │       ├── <416> Assign [=]
            │       │   ├── <411> Arrow
            │       │   │   ├── <409> Var [s_ptr]
            │       │   │   ╰── in_ptr
            │       │   ╰── <415> AddressOf
            │       │       ╰── <414> Var [in]
            │       ├── <424> Assign [=]
            │       │   ├── <421> Arrow
            │       │   │   ├── <419> Var [s_ptr]
            │       │   │   ╰── l
            │       │   ╰── <423> Constant ULong [4294967295]
            │       ├── <434> Assign [=]
            │       │   ├── <429> Arrow
            │       │   │   ├── <427> Var [s_ptr]
            │       │   │   ╰── bar
            │       │   ╰── <433> Unary [-]
            │       │       ╰── <432> Constant Int [5]
            │       ├── <444> Assign [=]
            │       │   ├── <441> Arrow
            │       │   │   ├── <439> Arrow
            │       │   │   │   ├── <437> Var [s_ptr]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── a
            │       │   ╰── <443> Constant Double [+1e1]
            │       ├── <454> Assign [=]
            │       │   ├── <451> Arrow
            │       │   │   ├── <449> Arrow
            │       │   │   │   ├── <447> Var [s_ptr]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <453> Constant Int [120]
            │       ├── <464> Assign [=]
            │       │   ├── <461> Arrow
            │       │   │   ├── <459> Arrow
            │       │   │   │   ├── <457> Var [s_ptr]
            │       │   │   │   ╰── in_array
            │       │   │   ╰── a
            │       │   ╰── <463> Constant Double [+1.1e1]
            │       ├── <478> Assign [=]
            │       │   ├── <475> Arrow
            │       │   │   ├── <473>  [+]
            │       │   │   │   ├── <469> Arrow
            │       │   │   │   │   ├── <467> Var [s_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <471> Constant Int [3]
            │       │   │   ╰── a
            │       │   ╰── <477> Constant Double [+1.2e1]
            │       ├── <492> Assign [=]
            │       │   ├── <485> Arrow
            │       │   │   ├── <483> Arrow
            │       │   │   │   ├── <481> Var [s_ptr]
            │       │   │   │   ╰── in_array
            │       │   │   ╰── ptr
            │       │   ╰── <491> AddressOf
            │       │       ╰── <490> Arrow
            │       │           ├── <488> Var [s_ptr]
            │       │           ╰── bar
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <511>  [||]
            │       │   │       ├── <500>  [!=]
            │       │   │       │   ├── <497> Arrow
            │       │   │       │   │   ├── <495> Var [s_ptr]
            │       │   │       │   │   ╰── l
            │       │   │       │   ╰── <499> Constant ULong [4294967295]
            │       │   │       ╰── <510>  [!=]
            │       │   │           ├── <505> Arrow
            │       │   │           │   ├── <503> Var [s_ptr]
            │       │   │           │   ╰── bar
            │       │   │           ╰── <509> Unary [-]
            │       │   │               ╰── <508> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <512> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <562>  [||]
            │       │   │       ├── <547>  [||]
            │       │   │       │   ├── <536>  [||]
            │       │   │       │   │   ├── <525>  [!=]
            │       │   │       │   │   │   ├── <522> Arrow
            │       │   │       │   │   │   │   ├── <520> Arrow
            │       │   │       │   │   │   │   │   ├── <518> Var [s_ptr]
            │       │   │       │   │   │   │   │   ╰── in_ptr
            │       │   │       │   │   │   │   ╰── a
            │       │   │       │   │   │   ╰── <524> Constant Double [+1e1]
            │       │   │       │   │   ╰── <535>  [!=]
            │       │   │       │   │       ├── <532> Arrow
            │       │   │       │   │       │   ├── <530> Arrow
            │       │   │       │   │       │   │   ├── <528> Var [s_ptr]
            │       │   │       │   │       │   │   ╰── in_ptr
            │       │   │       │   │       │   ╰── b
            │       │   │       │   │       ╰── <534> Constant Int [120]
            │       │   │       │   ╰── <546>  [!=]
            │       │   │       │       ├── <543> Arrow
            │       │   │       │       │   ├── <541> Arrow
            │       │   │       │       │   │   ├── <539> Var [s_ptr]
            │       │   │       │       │   │   ╰── in_array
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <545> Constant Double [+1.1e1]
            │       │   │       ╰── <561>  [!=]
            │       │   │           ├── <558> Arrow
            │       │   │           │   ├── <556>  [+]
            │       │   │           │   │   ├── <552> Arrow
            │       │   │           │   │   │   ├── <550> Var [s_ptr]
            │       │   │           │   │   │   ╰── in_array
            │       │   │           │   │   ╰── <554> Constant Int [3]
            │       │   │           │   ╰── a
            │       │   │           ╰── <560> Constant Double [+1.2e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <563> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── char_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <578> AddressOf
            │       │           ╰── <577> Arrow
            │       │               ├── <575> Arrow
            │       │               │   ├── <573> Var [s_ptr]
            │       │               │   ╰── in_ptr
            │       │               ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <586>  [!=]
            │       │   │       ├── <583> Dereference
            │       │   │       │   ╰── <582> Var [char_ptr]
            │       │   │       ╰── <585> Constant Int [120]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <587> Constant Int [0]
            │       ├── <601> Assign [=]
            │       │   ├── <598> Dereference
            │       │   │   ╰── <597> Arrow
            │       │   │       ├── <595> Arrow
            │       │   │       │   ├── <593> Var [s_ptr]
            │       │   │       │   ╰── in_array
            │       │   │       ╰── ptr
            │       │   ╰── <600> Constant Int [123]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <609>  [!=]
            │       │   │       ├── <606> Arrow
            │       │   │       │   ├── <604> Var [s_ptr]
            │       │   │       │   ╰── bar
            │       │   │       ╰── <608> Constant Int [123]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <610> Constant Int [0]
            │       ├── <628> Assign [=]
            │       │   ├── <620> Arrow
            │       │   │   ├── <618> Arrow
            │       │   │   │   ├── <616> Var [s_ptr]
            │       │   │   │   ╰── in_array
            │       │   │   ╰── b
            │       │   ╰── <627> Arrow
            │       │       ├── <625> Arrow
            │       │       │   ├── <623> Var [s_ptr]
            │       │       │   ╰── in_ptr
            │       │       ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <640>  [!=]
            │       │   │       ├── <637> Dot
            │       │   │       │   ├── <635> Subscript
            │       │   │       │   │   ├── <633> Arrow
            │       │   │       │   │   │   ├── <631> Var [s_ptr]
            │       │   │       │   │   │   ╰── in_array
            │       │   │       │   │   ╰── <634> Constant Int [0]
            │       │   │       │   ╰── b
            │       │   │       ╰── <639> Constant Int [120]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <641> Constant Int [0]
            │       ╰── Return
            │           ╰── <646> Constant Int [1]
            ├── Function [test_static_arrow]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── in
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Static
            │       ├── <679> Assign [=]
            │       │   ├── <674> Var [s_ptr]
            │       │   ╰── <678> AddressOf
            │       │       ╰── <677> Var [s]
            │       ├── <689> Assign [=]
            │       │   ├── <684> Arrow
            │       │   │   ├── <682> Var [s_ptr]
            │       │   │   ╰── in_ptr
            │       │   ╰── <688> AddressOf
            │       │       ╰── <687> Var [in]
            │       ├── <697> Assign [=]
            │       │   ├── <694> Arrow
            │       │   │   ├── <692> Var [s_ptr]
            │       │   │   ╰── l
            │       │   ╰── <696> Constant ULong [4294967295]
            │       ├── <707> Assign [=]
            │       │   ├── <702> Arrow
            │       │   │   ├── <700> Var [s_ptr]
            │       │   │   ╰── bar
            │       │   ╰── <706> Unary [-]
            │       │       ╰── <705> Constant Int [5]
            │       ├── <717> Assign [=]
            │       │   ├── <714> Arrow
            │       │   │   ├── <712> Arrow
            │       │   │   │   ├── <710> Var [s_ptr]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── a
            │       │   ╰── <716> Constant Double [+1e1]
            │       ├── <727> Assign [=]
            │       │   ├── <724> Arrow
            │       │   │   ├── <722> Arrow
            │       │   │   │   ├── <720> Var [s_ptr]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <726> Constant Int [120]
            │       ├── <737> Assign [=]
            │       │   ├── <734> Arrow
            │       │   │   ├── <732> Arrow
            │       │   │   │   ├── <730> Var [s_ptr]
            │       │   │   │   ╰── in_array
            │       │   │   ╰── a
            │       │   ╰── <736> Constant Double [+1.1e1]
            │       ├── <751> Assign [=]
            │       │   ├── <748> Arrow
            │       │   │   ├── <746>  [+]
            │       │   │   │   ├── <742> Arrow
            │       │   │   │   │   ├── <740> Var [s_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <744> Constant Int [3]
            │       │   │   ╰── a
            │       │   ╰── <750> Constant Double [+1.2e1]
            │       ├── <765> Assign [=]
            │       │   ├── <758> Arrow
            │       │   │   ├── <756> Arrow
            │       │   │   │   ├── <754> Var [s_ptr]
            │       │   │   │   ╰── in_array
            │       │   │   ╰── ptr
            │       │   ╰── <764> AddressOf
            │       │       ╰── <763> Arrow
            │       │           ├── <761> Var [s_ptr]
            │       │           ╰── bar
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <784>  [||]
            │       │   │       ├── <773>  [!=]
            │       │   │       │   ├── <770> Arrow
            │       │   │       │   │   ├── <768> Var [s_ptr]
            │       │   │       │   │   ╰── l
            │       │   │       │   ╰── <772> Constant ULong [4294967295]
            │       │   │       ╰── <783>  [!=]
            │       │   │           ├── <778> Arrow
            │       │   │           │   ├── <776> Var [s_ptr]
            │       │   │           │   ╰── bar
            │       │   │           ╰── <782> Unary [-]
            │       │   │               ╰── <781> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <785> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <835>  [||]
            │       │   │       ├── <820>  [||]
            │       │   │       │   ├── <809>  [||]
            │       │   │       │   │   ├── <798>  [!=]
            │       │   │       │   │   │   ├── <795> Arrow
            │       │   │       │   │   │   │   ├── <793> Arrow
            │       │   │       │   │   │   │   │   ├── <791> Var [s_ptr]
            │       │   │       │   │   │   │   │   ╰── in_ptr
            │       │   │       │   │   │   │   ╰── a
            │       │   │       │   │   │   ╰── <797> Constant Double [+1e1]
            │       │   │       │   │   ╰── <808>  [!=]
            │       │   │       │   │       ├── <805> Arrow
            │       │   │       │   │       │   ├── <803> Arrow
            │       │   │       │   │       │   │   ├── <801> Var [s_ptr]
            │       │   │       │   │       │   │   ╰── in_ptr
            │       │   │       │   │       │   ╰── b
            │       │   │       │   │       ╰── <807> Constant Int [120]
            │       │   │       │   ╰── <819>  [!=]
            │       │   │       │       ├── <816> Arrow
            │       │   │       │       │   ├── <814> Arrow
            │       │   │       │       │   │   ├── <812> Var [s_ptr]
            │       │   │       │       │   │   ╰── in_array
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <818> Constant Double [+1.1e1]
            │       │   │       ╰── <834>  [!=]
            │       │   │           ├── <831> Arrow
            │       │   │           │   ├── <829>  [+]
            │       │   │           │   │   ├── <825> Arrow
            │       │   │           │   │   │   ├── <823> Var [s_ptr]
            │       │   │           │   │   │   ╰── in_array
            │       │   │           │   │   ╰── <827> Constant Int [3]
            │       │   │           │   ╰── a
            │       │   │           ╰── <833> Constant Double [+1.2e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <836> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── char_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <851> AddressOf
            │       │           ╰── <850> Arrow
            │       │               ├── <848> Arrow
            │       │               │   ├── <846> Var [s_ptr]
            │       │               │   ╰── in_ptr
            │       │               ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <859>  [!=]
            │       │   │       ├── <856> Dereference
            │       │   │       │   ╰── <855> Var [char_ptr]
            │       │   │       ╰── <858> Constant Int [120]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <860> Constant Int [0]
            │       ├── <874> Assign [=]
            │       │   ├── <871> Dereference
            │       │   │   ╰── <870> Arrow
            │       │   │       ├── <868> Arrow
            │       │   │       │   ├── <866> Var [s_ptr]
            │       │   │       │   ╰── in_array
            │       │   │       ╰── ptr
            │       │   ╰── <873> Constant Int [123]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <882>  [!=]
            │       │   │       ├── <879> Arrow
            │       │   │       │   ├── <877> Var [s_ptr]
            │       │   │       │   ╰── bar
            │       │   │       ╰── <881> Constant Int [123]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <883> Constant Int [0]
            │       ├── <901> Assign [=]
            │       │   ├── <893> Arrow
            │       │   │   ├── <891> Arrow
            │       │   │   │   ├── <889> Var [s_ptr]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <900> Arrow
            │       │       ├── <898> Arrow
            │       │       │   ├── <896> Var [s_ptr]
            │       │       │   ╰── in_ptr
            │       │       ╰── a
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <911>  [!=]
            │       │   │       ├── <908> Arrow
            │       │   │       │   ├── <906> Arrow
            │       │   │       │   │   ├── <904> Var [s_ptr]
            │       │   │       │   │   ╰── in_ptr
            │       │   │       │   ╰── b
            │       │   │       ╰── <910> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <912> Constant Int [0]
            │       ╰── Return
            │           ╰── <917> Constant Int [1]
            ├── Function [test_mixed]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── in_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── <935> FunctionCall [malloc]
            │       │           ╰── <934> SizeOfType
            │       │               ╰── Struct [inner]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── out
            │       │   ╰── Type
            │       │       ╰── Struct [outer]
            │       ├── <950> Assign [=]
            │       │   ├── <946> Dot
            │       │   │   ├── <944> Var [out]
            │       │   │   ╰── in_ptr
            │       │   ╰── <949> Var [in_ptr]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── out_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── <959> AddressOf
            │       │           ╰── <958> Var [out]
            │       ├── <968> Assign [=]
            │       │   ├── <965> Dot
            │       │   │   ├── <963> Var [out]
            │       │   │   ╰── l
            │       │   ╰── <967> Constant Int [10]
            │       ├── <976> Assign [=]
            │       │   ├── <973> Dot
            │       │   │   ├── <971> Var [out]
            │       │   │   ╰── bar
            │       │   ╰── <975> Constant Int [20]
            │       ├── <988> Assign [=]
            │       │   ├── <983> Arrow
            │       │   │   ├── <981> Dot
            │       │   │   │   ├── <979> Var [out]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── a
            │       │   ╰── <987> Unary [-]
            │       │       ╰── <986> Constant Double [+1e0]
            │       ├── <998> Assign [=]
            │       │   ├── <995> Arrow
            │       │   │   ├── <993> Dot
            │       │   │   │   ├── <991> Var [out]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <997> Constant Int [33]
            │       ├── <1008> Assign [=]
            │       │   ├── <1005> Arrow
            │       │   │   ├── <1003> Dot
            │       │   │   │   ├── <1001> Var [out]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── ptr
            │       │   ╰── <1007> Constant Int [0]
            │       ├── <1022> Assign [=]
            │       │   ├── <1017> Dot
            │       │   │   ├── <1015> Subscript
            │       │   │   │   ├── <1013> Arrow
            │       │   │   │   │   ├── <1011> Var [out_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1014> Constant Int [0]
            │       │   │   ╰── a
            │       │   ╰── <1021> Unary [-]
            │       │       ╰── <1020> Constant Double [+2e0]
            │       ├── <1034> Assign [=]
            │       │   ├── <1031> Dot
            │       │   │   ├── <1029> Subscript
            │       │   │   │   ├── <1027> Arrow
            │       │   │   │   │   ├── <1025> Var [out_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1028> Constant Int [0]
            │       │   │   ╰── b
            │       │   ╰── <1033> Constant Int [63]
            │       ├── <1046> Assign [=]
            │       │   ├── <1043> Dot
            │       │   │   ├── <1041> Subscript
            │       │   │   │   ├── <1039> Arrow
            │       │   │   │   │   ├── <1037> Var [out_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1040> Constant Int [0]
            │       │   │   ╰── ptr
            │       │   ╰── <1045> Constant Int [0]
            │       ├── <1060> Assign [=]
            │       │   ├── <1055> Dot
            │       │   │   ├── <1053> Subscript
            │       │   │   │   ├── <1051> Arrow
            │       │   │   │   │   ├── <1049> Var [out_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1052> Constant Int [3]
            │       │   │   ╰── a
            │       │   ╰── <1059> Unary [-]
            │       │       ╰── <1058> Constant Double [+3e0]
            │       ├── <1072> Assign [=]
            │       │   ├── <1069> Dot
            │       │   │   ├── <1067> Subscript
            │       │   │   │   ├── <1065> Arrow
            │       │   │   │   │   ├── <1063> Var [out_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1066> Constant Int [3]
            │       │   │   ╰── b
            │       │   ╰── <1071> Constant Int [42]
            │       ├── <1088> Assign [=]
            │       │   ├── <1081> Dot
            │       │   │   ├── <1079> Subscript
            │       │   │   │   ├── <1077> Arrow
            │       │   │   │   │   ├── <1075> Var [out_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1078> Constant Int [3]
            │       │   │   ╰── ptr
            │       │   ╰── <1087> FunctionCall [malloc]
            │       │       ╰── <1086> SizeOfType
            │       │           ╰── Int
            │       ├── <1100> Assign [=]
            │       │   ├── <1095> Dot
            │       │   │   ├── <1093> Arrow
            │       │   │   │   ├── <1091> Var [out_ptr]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <1099> Unary [-]
            │       │       ╰── <1098> Constant Double [+3e0]
            │       ├── <1110> Assign [=]
            │       │   ├── <1107> Dot
            │       │   │   ├── <1105> Arrow
            │       │   │   │   ├── <1103> Var [out_ptr]
            │       │   │   │   ╰── in
            │       │   │   ╰── b
            │       │   ╰── <1109> Constant Int [38]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <1115> Constant Int [9]
            │       ├── <1128> Assign [=]
            │       │   ├── <1123> Dot
            │       │   │   ├── <1121> Arrow
            │       │   │   │   ├── <1119> Var [out_ptr]
            │       │   │   │   ╰── in
            │       │   │   ╰── ptr
            │       │   ╰── <1127> AddressOf
            │       │       ╰── <1126> Var [i]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1145>  [||]
            │       │   │       ├── <1136>  [!=]
            │       │   │       │   ├── <1133> Dot
            │       │   │       │   │   ├── <1131> Var [out]
            │       │   │       │   │   ╰── l
            │       │   │       │   ╰── <1135> Constant Int [10]
            │       │   │       ╰── <1144>  [!=]
            │       │   │           ├── <1141> Dot
            │       │   │           │   ├── <1139> Var [out]
            │       │   │           │   ╰── bar
            │       │   │           ╰── <1143> Constant Int [20]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1146> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1180>  [||]
            │       │   │       ├── <1172>  [||]
            │       │   │       │   ├── <1161>  [!=]
            │       │   │       │   │   ├── <1156> Arrow
            │       │   │       │   │   │   ├── <1154> Dot
            │       │   │       │   │   │   │   ├── <1152> Var [out]
            │       │   │       │   │   │   │   ╰── in_ptr
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <1160> Unary [-]
            │       │   │       │   │       ╰── <1159> Constant Double [+1e0]
            │       │   │       │   ╰── <1171>  [!=]
            │       │   │       │       ├── <1168> Arrow
            │       │   │       │       │   ├── <1166> Dot
            │       │   │       │       │   │   ├── <1164> Var [out]
            │       │   │       │       │   │   ╰── in_ptr
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <1170> Constant Int [33]
            │       │   │       ╰── <1179> Arrow
            │       │   │           ├── <1177> Dot
            │       │   │           │   ├── <1175> Var [out]
            │       │   │           │   ╰── in_ptr
            │       │   │           ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1181> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1286>  [||]
            │       │   │       ├── <1273>  [||]
            │       │   │       │   ├── <1262>  [||]
            │       │   │       │   │   ├── <1249>  [||]
            │       │   │       │   │   │   ├── <1236>  [||]
            │       │   │       │   │   │   │   ├── <1221>  [||]
            │       │   │       │   │   │   │   │   ├── <1211>  [||]
            │       │   │       │   │   │   │   │   │   ├── <1198>  [!=]
            │       │   │       │   │   │   │   │   │   │   ├── <1193> Dot
            │       │   │       │   │   │   │   │   │   │   │   ├── <1191> Subscript
            │       │   │       │   │   │   │   │   │   │   │   │   ├── <1189> Arrow
            │       │   │       │   │   │   │   │   │   │   │   │   │   ├── <1187> Var [out_ptr]
            │       │   │       │   │   │   │   │   │   │   │   │   │   ╰── in_array
            │       │   │       │   │   │   │   │   │   │   │   │   ╰── <1190> Constant Int [0]
            │       │   │       │   │   │   │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   │   │   │   ╰── <1197> Unary [-]
            │       │   │       │   │   │   │   │   │   │       ╰── <1196> Constant Double [+2e0]
            │       │   │       │   │   │   │   │   │   ╰── <1210>  [!=]
            │       │   │       │   │   │   │   │   │       ├── <1207> Dot
            │       │   │       │   │   │   │   │   │       │   ├── <1205> Subscript
            │       │   │       │   │   │   │   │   │       │   │   ├── <1203> Arrow
            │       │   │       │   │   │   │   │   │       │   │   │   ├── <1201> Var [out_ptr]
            │       │   │       │   │   │   │   │   │       │   │   │   ╰── in_array
            │       │   │       │   │   │   │   │   │       │   │   ╰── <1204> Constant Int [0]
            │       │   │       │   │   │   │   │   │       │   ╰── b
            │       │   │       │   │   │   │   │   │       ╰── <1209> Constant Int [63]
            │       │   │       │   │   │   │   │   ╰── <1220> Dot
            │       │   │       │   │   │   │   │       ├── <1218> Subscript
            │       │   │       │   │   │   │   │       │   ├── <1216> Arrow
            │       │   │       │   │   │   │   │       │   │   ├── <1214> Var [out_ptr]
            │       │   │       │   │   │   │   │       │   │   ╰── in_array
            │       │   │       │   │   │   │   │       │   ╰── <1217> Constant Int [0]
            │       │   │       │   │   │   │   │       ╰── ptr
            │       │   │       │   │   │   │   ╰── <1235>  [!=]
            │       │   │       │   │   │   │       ├── <1230> Dot
            │       │   │       │   │   │   │       │   ├── <1228> Subscript
            │       │   │       │   │   │   │       │   │   ├── <1226> Arrow
            │       │   │       │   │   │   │       │   │   │   ├── <1224> Var [out_ptr]
            │       │   │       │   │   │   │       │   │   │   ╰── in_array
            │       │   │       │   │   │   │       │   │   ╰── <1227> Constant Int [3]
            │       │   │       │   │   │   │       │   ╰── a
            │       │   │       │   │   │   │       ╰── <1234> Unary [-]
            │       │   │       │   │   │   │           ╰── <1233> Constant Double [+3e0]
            │       │   │       │   │   │   ╰── <1248>  [!=]
            │       │   │       │   │   │       ├── <1245> Dot
            │       │   │       │   │   │       │   ├── <1243> Subscript
            │       │   │       │   │   │       │   │   ├── <1241> Arrow
            │       │   │       │   │   │       │   │   │   ├── <1239> Var [out_ptr]
            │       │   │       │   │   │       │   │   │   ╰── in_array
            │       │   │       │   │   │       │   │   ╰── <1242> Constant Int [3]
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <1247> Constant Int [42]
            │       │   │       │   │   ╰── <1261>  [!=]
            │       │   │       │   │       ├── <1256> Dot
            │       │   │       │   │       │   ├── <1254> Arrow
            │       │   │       │   │       │   │   ├── <1252> Var [out_ptr]
            │       │   │       │   │       │   │   ╰── in
            │       │   │       │   │       │   ╰── a
            │       │   │       │   │       ╰── <1260> Unary [-]
            │       │   │       │   │           ╰── <1259> Constant Double [+3e0]
            │       │   │       │   ╰── <1272>  [!=]
            │       │   │       │       ├── <1269> Dot
            │       │   │       │       │   ├── <1267> Arrow
            │       │   │       │       │   │   ├── <1265> Var [out_ptr]
            │       │   │       │       │   │   ╰── in
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <1271> Constant Int [38]
            │       │   │       ╰── <1285>  [!=]
            │       │   │           ├── <1280> Dot
            │       │   │           │   ├── <1278> Arrow
            │       │   │           │   │   ├── <1276> Var [out_ptr]
            │       │   │           │   │   ╰── in
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <1284> AddressOf
            │       │   │               ╰── <1283> Var [i]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1287> Constant Int [0]
            │       ├── <1303> Assign [=]
            │       │   ├── <1300> Dereference
            │       │   │   ╰── <1299> Dot
            │       │   │       ├── <1297> Subscript
            │       │   │       │   ├── <1295> Arrow
            │       │   │       │   │   ├── <1293> Var [out_ptr]
            │       │   │       │   │   ╰── in_array
            │       │   │       │   ╰── <1296> Constant Int [3]
            │       │   │       ╰── ptr
            │       │   ╰── <1302> Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1316>  [!=]
            │       │   │       ├── <1313> Dereference
            │       │   │       │   ╰── <1312> Dot
            │       │   │       │       ├── <1310> Subscript
            │       │   │       │       │   ├── <1308> Arrow
            │       │   │       │       │   │   ├── <1306> Var [out_ptr]
            │       │   │       │       │   │   ╰── in_array
            │       │   │       │       │   ╰── <1309> Constant Int [3]
            │       │   │       │       ╰── ptr
            │       │   │       ╰── <1315> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1317> Constant Int [0]
            │       ├── <1335> Assign [=]
            │       │   ├── <1327> Dot
            │       │   │   ├── <1325> Arrow
            │       │   │   │   ├── <1323> Var [out_ptr]
            │       │   │   │   ╰── in
            │       │   │   ╰── b
            │       │   ╰── <1334> Arrow
            │       │       ├── <1332> Dot
            │       │       │   ├── <1330> Var [out]
            │       │       │   ╰── in_ptr
            │       │       ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1350>  [!=]
            │       │   │       ├── <1342> Dot
            │       │   │       │   ├── <1340> Arrow
            │       │   │       │   │   ├── <1338> Var [out_ptr]
            │       │   │       │   │   ╰── in
            │       │   │       │   ╰── b
            │       │   │       ╰── <1349> Arrow
            │       │   │           ├── <1347> Dot
            │       │   │           │   ├── <1345> Var [out]
            │       │   │           │   ╰── in_ptr
            │       │   │           ╰── b
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1351> Constant Int [0]
            │       ╰── Return
            │           ╰── <1356> Constant Int [1]
            ├── Function [test_array_of_structs]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── struct_array
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── in_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── <1382> FunctionCall [malloc]
            │       │           ╰── <1381> SizeOfType
            │       │               ╰── Struct [inner]
            │       ├── <1394> Assign [=]
            │       │   ├── <1390> Dot
            │       │   │   ├── <1388> Subscript
            │       │   │   │   ├── <1386> Var [struct_array]
            │       │   │   │   ╰── <1387> Constant Int [0]
            │       │   │   ╰── in_ptr
            │       │   ╰── <1393> Var [in_ptr]
            │       ├── <1405> Assign [=]
            │       │   ├── <1401> Dot
            │       │   │   ├── <1399> Subscript
            │       │   │   │   ├── <1397> Var [struct_array]
            │       │   │   │   ╰── <1398> Constant Int [1]
            │       │   │   ╰── in_ptr
            │       │   ╰── <1404> Var [in_ptr]
            │       ├── <1417> Assign [=]
            │       │   ├── <1414> Arrow
            │       │   │   ├── <1412> Dot
            │       │   │   │   ├── <1410> Subscript
            │       │   │   │   │   ├── <1408> Var [struct_array]
            │       │   │   │   │   ╰── <1409> Constant Int [0]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── a
            │       │   ╰── <1416> Constant Double [+2e1]
            │       ├── <1429> Assign [=]
            │       │   ├── <1426> Arrow
            │       │   │   ├── <1424> Dot
            │       │   │   │   ├── <1422> Subscript
            │       │   │   │   │   ├── <1420> Var [struct_array]
            │       │   │   │   │   ╰── <1421> Constant Int [1]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <1428> Constant Int [64]
            │       ├── <1441> Assign [=]
            │       │   ├── <1438> Arrow
            │       │   │   ├── <1436> Dot
            │       │   │   │   ├── <1434> Subscript
            │       │   │   │   │   ├── <1432> Var [struct_array]
            │       │   │   │   │   ╰── <1433> Constant Int [0]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── ptr
            │       │   ╰── <1440> Constant Int [0]
            │       ├── <1455> Assign [=]
            │       │   ├── <1452> Dot
            │       │   │   ├── <1450> Subscript
            │       │   │   │   ├── <1448> Dot
            │       │   │   │   │   ├── <1446> Subscript
            │       │   │   │   │   │   ├── <1444> Var [struct_array]
            │       │   │   │   │   │   ╰── <1445> Constant Int [1]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1449> Constant Int [1]
            │       │   │   ╰── a
            │       │   ╰── <1454> Constant Double [+3e1]
            │       ├── <1469> Assign [=]
            │       │   ├── <1466> Dot
            │       │   │   ├── <1464> Subscript
            │       │   │   │   ├── <1462> Dot
            │       │   │   │   │   ├── <1460> Subscript
            │       │   │   │   │   │   ├── <1458> Var [struct_array]
            │       │   │   │   │   │   ╰── <1459> Constant Int [1]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1463> Constant Int [0]
            │       │   │   ╰── b
            │       │   ╰── <1468> Constant Int [35]
            │       ├── <1481> Assign [=]
            │       │   ├── <1478> Dot
            │       │   │   ├── <1476> Dot
            │       │   │   │   ├── <1474> Subscript
            │       │   │   │   │   ├── <1472> Var [struct_array]
            │       │   │   │   │   ╰── <1473> Constant Int [2]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <1480> Constant Double [+4e1]
            │       ├── <1493> Assign [=]
            │       │   ├── <1490> Dot
            │       │   │   ├── <1488> Dot
            │       │   │   │   ├── <1486> Subscript
            │       │   │   │   │   ├── <1484> Var [struct_array]
            │       │   │   │   │   ╰── <1485> Constant Int [2]
            │       │   │   │   ╰── in
            │       │   │   ╰── b
            │       │   ╰── <1492> Constant Int [36]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1528>  [||]
            │       │   │       ├── <1518>  [||]
            │       │   │       │   ├── <1505>  [!=]
            │       │   │       │   │   ├── <1502> Arrow
            │       │   │       │   │   │   ├── <1500> Dot
            │       │   │       │   │   │   │   ├── <1498> Subscript
            │       │   │       │   │   │   │   │   ├── <1496> Var [struct_array]
            │       │   │       │   │   │   │   │   ╰── <1497> Constant Int [1]
            │       │   │       │   │   │   │   ╰── in_ptr
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <1504> Constant Double [+2e1]
            │       │   │       │   ╰── <1517>  [!=]
            │       │   │       │       ├── <1514> Arrow
            │       │   │       │       │   ├── <1512> Dot
            │       │   │       │       │   │   ├── <1510> Subscript
            │       │   │       │       │   │   │   ├── <1508> Var [struct_array]
            │       │   │       │       │   │   │   ╰── <1509> Constant Int [0]
            │       │   │       │       │   │   ╰── in_ptr
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <1516> Constant Int [64]
            │       │   │       ╰── <1527> Arrow
            │       │   │           ├── <1525> Dot
            │       │   │           │   ├── <1523> Subscript
            │       │   │           │   │   ├── <1521> Var [struct_array]
            │       │   │           │   │   ╰── <1522> Constant Int [1]
            │       │   │           │   ╰── in_ptr
            │       │   │           ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1529> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1587>  [||]
            │       │   │       ├── <1574>  [||]
            │       │   │       │   ├── <1561>  [||]
            │       │   │       │   │   ├── <1546>  [!=]
            │       │   │       │   │   │   ├── <1543> Dot
            │       │   │       │   │   │   │   ├── <1541> Subscript
            │       │   │       │   │   │   │   │   ├── <1539> Dot
            │       │   │       │   │   │   │   │   │   ├── <1537> Subscript
            │       │   │       │   │   │   │   │   │   │   ├── <1535> Var [struct_array]
            │       │   │       │   │   │   │   │   │   │   ╰── <1536> Constant Int [1]
            │       │   │       │   │   │   │   │   │   ╰── in_array
            │       │   │       │   │   │   │   │   ╰── <1540> Constant Int [1]
            │       │   │       │   │   │   │   ╰── a
            │       │   │       │   │   │   ╰── <1545> Constant Double [+3e1]
            │       │   │       │   │   ╰── <1560>  [!=]
            │       │   │       │   │       ├── <1557> Dot
            │       │   │       │   │       │   ├── <1555> Subscript
            │       │   │       │   │       │   │   ├── <1553> Dot
            │       │   │       │   │       │   │   │   ├── <1551> Subscript
            │       │   │       │   │       │   │   │   │   ├── <1549> Var [struct_array]
            │       │   │       │   │       │   │   │   │   ╰── <1550> Constant Int [1]
            │       │   │       │   │       │   │   │   ╰── in_array
            │       │   │       │   │       │   │   ╰── <1554> Constant Int [0]
            │       │   │       │   │       │   ╰── b
            │       │   │       │   │       ╰── <1559> Constant Int [35]
            │       │   │       │   ╰── <1573>  [!=]
            │       │   │       │       ├── <1570> Dot
            │       │   │       │       │   ├── <1568> Dot
            │       │   │       │       │   │   ├── <1566> Subscript
            │       │   │       │       │   │   │   ├── <1564> Var [struct_array]
            │       │   │       │       │   │   │   ╰── <1565> Constant Int [2]
            │       │   │       │       │   │   ╰── in
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <1572> Constant Double [+4e1]
            │       │   │       ╰── <1586>  [!=]
            │       │   │           ├── <1583> Dot
            │       │   │           │   ├── <1581> Dot
            │       │   │           │   │   ├── <1579> Subscript
            │       │   │           │   │   │   ├── <1577> Var [struct_array]
            │       │   │           │   │   │   ╰── <1578> Constant Int [2]
            │       │   │           │   │   ╰── in
            │       │   │           │   ╰── b
            │       │   │           ╰── <1585> Constant Int [36]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1588> Constant Int [0]
            │       ╰── Return
            │           ╰── <1593> Constant Int [1]
            ├── Function [test_array_of_struct_pointers]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr_array
            │       │   ╰── Type
            │       │       ╰── Array
            │       │           ├── 2
            │       │           ╰── Pointer
            │       │               ╰── Struct [outer]
            │       ├── <1621> Assign [=]
            │       │   ├── <1612> Subscript
            │       │   │   ├── <1610> Var [ptr_array]
            │       │   │   ╰── <1611> Constant Int [0]
            │       │   ╰── <1620> FunctionCall [calloc]
            │       │       ├── <1615> Constant Int [1]
            │       │       ╰── <1619> SizeOfType
            │       │           ╰── Struct [outer]
            │       ├── <1635> Assign [=]
            │       │   ├── <1626> Subscript
            │       │   │   ├── <1624> Var [ptr_array]
            │       │   │   ╰── <1625> Constant Int [1]
            │       │   ╰── <1634> FunctionCall [calloc]
            │       │       ├── <1629> Constant Int [1]
            │       │       ╰── <1633> SizeOfType
            │       │           ╰── Struct [outer]
            │       ├── <1651> Assign [=]
            │       │   ├── <1642> Arrow
            │       │   │   ├── <1640> Subscript
            │       │   │   │   ├── <1638> Var [ptr_array]
            │       │   │   │   ╰── <1639> Constant Int [1]
            │       │   │   ╰── in_ptr
            │       │   ╰── <1650> FunctionCall [calloc]
            │       │       ├── <1645> Constant Int [1]
            │       │       ╰── <1649> SizeOfType
            │       │           ╰── Struct [inner]
            │       ├── <1663> Assign [=]
            │       │   ├── <1660> Arrow
            │       │   │   ├── <1658> Arrow
            │       │   │   │   ├── <1656> Subscript
            │       │   │   │   │   ├── <1654> Var [ptr_array]
            │       │   │   │   │   ╰── <1655> Constant Int [1]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── ptr
            │       │   ╰── <1662> Constant Int [0]
            │       ├── <1675> Assign [=]
            │       │   ├── <1672> Arrow
            │       │   │   ├── <1670> Arrow
            │       │   │   │   ├── <1668> Subscript
            │       │   │   │   │   ├── <1666> Var [ptr_array]
            │       │   │   │   │   ╰── <1667> Constant Int [1]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <1674> Constant Int [37]
            │       ├── <1687> Assign [=]
            │       │   ├── <1684> Arrow
            │       │   │   ├── <1682> Arrow
            │       │   │   │   ├── <1680> Subscript
            │       │   │   │   │   ├── <1678> Var [ptr_array]
            │       │   │   │   │   ╰── <1679> Constant Int [1]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── a
            │       │   ╰── <1686> Constant Double [+8.765e2]
            │       ├── <1701> Assign [=]
            │       │   ├── <1698> Dot
            │       │   │   ├── <1696> Subscript
            │       │   │   │   ├── <1694> Arrow
            │       │   │   │   │   ├── <1692> Subscript
            │       │   │   │   │   │   ├── <1690> Var [ptr_array]
            │       │   │   │   │   │   ╰── <1691> Constant Int [1]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1695> Constant Int [2]
            │       │   │   ╰── a
            │       │   ╰── <1700> Constant Double [+1.0005e3]
            │       ├── <1713> Assign [=]
            │       │   ├── <1710> Dot
            │       │   │   ├── <1708> Arrow
            │       │   │   │   ├── <1706> Subscript
            │       │   │   │   │   ├── <1704> Var [ptr_array]
            │       │   │   │   │   ╰── <1705> Constant Int [1]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <1712> Constant Double [+7e6]
            │       ├── <1729> Assign [=]
            │       │   ├── <1720> Arrow
            │       │   │   ├── <1718> Subscript
            │       │   │   │   ├── <1716> Var [ptr_array]
            │       │   │   │   ╰── <1717> Constant Int [0]
            │       │   │   ╰── in_ptr
            │       │   ╰── <1728> FunctionCall [calloc]
            │       │       ├── <1723> Constant Int [1]
            │       │       ╰── <1727> SizeOfType
            │       │           ╰── Struct [inner]
            │       ├── <1741> Assign [=]
            │       │   ├── <1738> Arrow
            │       │   │   ├── <1736> Arrow
            │       │   │   │   ├── <1734> Subscript
            │       │   │   │   │   ├── <1732> Var [ptr_array]
            │       │   │   │   │   ╰── <1733> Constant Int [0]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── ptr
            │       │   ╰── <1740> Constant Int [0]
            │       ├── <1753> Assign [=]
            │       │   ├── <1750> Arrow
            │       │   │   ├── <1748> Arrow
            │       │   │   │   ├── <1746> Subscript
            │       │   │   │   │   ├── <1744> Var [ptr_array]
            │       │   │   │   │   ╰── <1745> Constant Int [0]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <1752> Constant Int [94]
            │       ├── <1765> Assign [=]
            │       │   ├── <1762> Arrow
            │       │   │   ├── <1760> Arrow
            │       │   │   │   ├── <1758> Subscript
            │       │   │   │   │   ├── <1756> Var [ptr_array]
            │       │   │   │   │   ╰── <1757> Constant Int [0]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── a
            │       │   ╰── <1764> Constant Double [+1.234e2]
            │       ├── <1779> Assign [=]
            │       │   ├── <1776> Dot
            │       │   │   ├── <1774> Subscript
            │       │   │   │   ├── <1772> Arrow
            │       │   │   │   │   ├── <1770> Subscript
            │       │   │   │   │   │   ├── <1768> Var [ptr_array]
            │       │   │   │   │   │   ╰── <1769> Constant Int [0]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1773> Constant Int [1]
            │       │   │   ╰── b
            │       │   ╰── <1778> Constant Int [38]
            │       ├── <1797> Assign [=]
            │       │   ├── <1788> Dot
            │       │   │   ├── <1786> Arrow
            │       │   │   │   ├── <1784> Subscript
            │       │   │   │   │   ├── <1782> Var [ptr_array]
            │       │   │   │   │   ╰── <1783> Constant Int [0]
            │       │   │   │   ╰── in
            │       │   │   ╰── ptr
            │       │   ╰── <1796> AddressOf
            │       │       ╰── <1795> Arrow
            │       │           ├── <1793> Subscript
            │       │           │   ├── <1791> Var [ptr_array]
            │       │           │   ╰── <1792> Constant Int [0]
            │       │           ╰── bar
            │       ├── <1807> Assign [=]
            │       │   ├── <1804> Arrow
            │       │   │   ├── <1802> Subscript
            │       │   │   │   ├── <1800> Var [ptr_array]
            │       │   │   │   ╰── <1801> Constant Int [0]
            │       │   │   ╰── bar
            │       │   ╰── <1806> Constant Int [900]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1821>  [!=]
            │       │   │       ├── <1818> Dot
            │       │   │       │   ├── <1816> Subscript
            │       │   │       │   │   ├── <1814> Arrow
            │       │   │       │   │   │   ├── <1812> Subscript
            │       │   │       │   │   │   │   ├── <1810> Var [ptr_array]
            │       │   │       │   │   │   │   ╰── <1811> Constant Int [0]
            │       │   │       │   │   │   ╰── in_array
            │       │   │       │   │   ╰── <1815> Constant Int [1]
            │       │   │       │   ╰── b
            │       │   │       ╰── <1820> Constant Int [38]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1822> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1860>  [||]
            │       │   │       ├── <1850>  [||]
            │       │   │       │   ├── <1837>  [!=]
            │       │   │       │   │   ├── <1834> Arrow
            │       │   │       │   │   │   ├── <1832> Arrow
            │       │   │       │   │   │   │   ├── <1830> Subscript
            │       │   │       │   │   │   │   │   ├── <1828> Var [ptr_array]
            │       │   │       │   │   │   │   │   ╰── <1829> Constant Int [0]
            │       │   │       │   │   │   │   ╰── in_ptr
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <1836> Constant Double [+1.234e2]
            │       │   │       │   ╰── <1849>  [!=]
            │       │   │       │       ├── <1846> Arrow
            │       │   │       │       │   ├── <1844> Arrow
            │       │   │       │       │   │   ├── <1842> Subscript
            │       │   │       │       │   │   │   ├── <1840> Var [ptr_array]
            │       │   │       │       │   │   │   ╰── <1841> Constant Int [0]
            │       │   │       │       │   │   ╰── in_ptr
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <1848> Constant Int [94]
            │       │   │       ╰── <1859> Arrow
            │       │   │           ├── <1857> Arrow
            │       │   │           │   ├── <1855> Subscript
            │       │   │           │   │   ├── <1853> Var [ptr_array]
            │       │   │           │   │   ╰── <1854> Constant Int [0]
            │       │   │           │   ╰── in_ptr
            │       │   │           ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1861> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1876>  [!=]
            │       │   │       ├── <1873> Dot
            │       │   │       │   ├── <1871> Arrow
            │       │   │       │   │   ├── <1869> Subscript
            │       │   │       │   │   │   ├── <1867> Var [ptr_array]
            │       │   │       │   │   │   ╰── <1868> Constant Int [1]
            │       │   │       │   │   ╰── in
            │       │   │       │   ╰── a
            │       │   │       ╰── <1875> Constant Double [+7e6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1877> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1894>  [!=]
            │       │   │       ├── <1891> Dot
            │       │   │       │   ├── <1889> Subscript
            │       │   │       │   │   ├── <1887> Arrow
            │       │   │       │   │   │   ├── <1885> Subscript
            │       │   │       │   │   │   │   ├── <1883> Var [ptr_array]
            │       │   │       │   │   │   │   ╰── <1884> Constant Int [1]
            │       │   │       │   │   │   ╰── in_array
            │       │   │       │   │   ╰── <1888> Constant Int [2]
            │       │   │       │   ╰── a
            │       │   │       ╰── <1893> Constant Double [+1.0005e3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1895> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1933>  [||]
            │       │   │       ├── <1923>  [||]
            │       │   │       │   ├── <1910>  [!=]
            │       │   │       │   │   ├── <1907> Arrow
            │       │   │       │   │   │   ├── <1905> Arrow
            │       │   │       │   │   │   │   ├── <1903> Subscript
            │       │   │       │   │   │   │   │   ├── <1901> Var [ptr_array]
            │       │   │       │   │   │   │   │   ╰── <1902> Constant Int [1]
            │       │   │       │   │   │   │   ╰── in_ptr
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <1909> Constant Double [+8.765e2]
            │       │   │       │   ╰── <1922>  [!=]
            │       │   │       │       ├── <1919> Arrow
            │       │   │       │       │   ├── <1917> Arrow
            │       │   │       │       │   │   ├── <1915> Subscript
            │       │   │       │       │   │   │   ├── <1913> Var [ptr_array]
            │       │   │       │       │   │   │   ╰── <1914> Constant Int [1]
            │       │   │       │       │   │   ╰── in_ptr
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <1921> Constant Int [37]
            │       │   │       ╰── <1932> Arrow
            │       │   │           ├── <1930> Arrow
            │       │   │           │   ├── <1928> Subscript
            │       │   │           │   │   ├── <1926> Var [ptr_array]
            │       │   │           │   │   ╰── <1927> Constant Int [1]
            │       │   │           │   ╰── in_ptr
            │       │   │           ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1934> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1950>  [!=]
            │       │   │       ├── <1947> Dereference
            │       │   │       │   ╰── <1946> Dot
            │       │   │       │       ├── <1944> Arrow
            │       │   │       │       │   ├── <1942> Subscript
            │       │   │       │       │   │   ├── <1940> Var [ptr_array]
            │       │   │       │       │   │   ╰── <1941> Constant Int [0]
            │       │   │       │       │   ╰── in
            │       │   │       │       ╰── ptr
            │       │   │       ╰── <1949> Constant Int [900]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1951> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1961> Arrow
            │       │   │       ├── <1959> Subscript
            │       │   │       │   ├── <1957> Var [ptr_array]
            │       │   │       │   ╰── <1958> Constant Int [0]
            │       │   │       ╰── l
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1962> Constant Int [0]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <1970> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <1978>  [<]
            │       │   │       ├── <1975> Var [i]
            │       │   │       ╰── <1977> Constant Int [4]
            │       │   ├── Condition
            │       │   │   ╰── <1987> Assign [=]
            │       │   │       ├── <1980> Var [i]
            │       │   │       ╰── <1986>  [+]
            │       │   │           ├── <1983> Var [i]
            │       │   │           ╰── <1985> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── elem_ptr
            │       │       │   ├── Type
            │       │       │   │   ╰── Pointer
            │       │       │   │       ╰── Struct [inner]
            │       │       │   ╰── Initializer
            │       │       │       ╰── <2002> AddressOf
            │       │       │           ╰── <2001> Subscript
            │       │       │               ├── <1998> Arrow
            │       │       │               │   ├── <1996> Subscript
            │       │       │               │   │   ├── <1994> Var [ptr_array]
            │       │       │               │   │   ╰── <1995> Constant Int [0]
            │       │       │               │   ╰── in_array
            │       │       │               ╰── <2000> Var [i]
            │       │       ├── If
            │       │       │   ├── Condition
            │       │       │   │   ╰── <2014>  [||]
            │       │       │   │       ├── <2008> Arrow
            │       │       │   │       │   ├── <2006> Var [elem_ptr]
            │       │       │   │       │   ╰── a
            │       │       │   │       ╰── <2013> Arrow
            │       │       │   │           ├── <2011> Var [elem_ptr]
            │       │       │   │           ╰── ptr
            │       │       │   ╰── Then
            │       │       │       ╰── Block
            │       │       │           ╰── Return
            │       │       │               ╰── <2015> Constant Int [0]
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <2030>  [&&]
            │       │           │       ├── <2023> Arrow
            │       │           │       │   ├── <2021> Var [elem_ptr]
            │       │           │       │   ╰── b
            │       │           │       ╰── <2029>  [!=]
            │       │           │           ├── <2026> Var [i]
            │       │           │           ╰── <2028> Constant Int [1]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── <2031> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2056>  [||]
            │       │   │       ├── <2046> Dot
            │       │   │       │   ├── <2044> Arrow
            │       │   │       │   │   ├── <2042> Subscript
            │       │   │       │   │   │   ├── <2040> Var [ptr_array]
            │       │   │       │   │   │   ╰── <2041> Constant Int [0]
            │       │   │       │   │   ╰── in
            │       │   │       │   ╰── a
            │       │   │       ╰── <2055> Dot
            │       │   │           ├── <2053> Arrow
            │       │   │           │   ├── <2051> Subscript
            │       │   │           │   │   ├── <2049> Var [ptr_array]
            │       │   │           │   │   ╰── <2050> Constant Int [0]
            │       │   │           │   ╰── in
            │       │   │           ╰── b
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2057> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2075>  [||]
            │       │   │       ├── <2067> Arrow
            │       │   │       │   ├── <2065> Subscript
            │       │   │       │   │   ├── <2063> Var [ptr_array]
            │       │   │       │   │   ╰── <2064> Constant Int [1]
            │       │   │       │   ╰── l
            │       │   │       ╰── <2074> Arrow
            │       │   │           ├── <2072> Subscript
            │       │   │           │   ├── <2070> Var [ptr_array]
            │       │   │           │   ╰── <2071> Constant Int [1]
            │       │   │           ╰── bar
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2076> Constant Int [0]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <2084> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <2092>  [<]
            │       │   │       ├── <2089> Var [i]
            │       │   │       ╰── <2091> Constant Int [4]
            │       │   ├── Condition
            │       │   │   ╰── <2101> Assign [=]
            │       │   │       ├── <2094> Var [i]
            │       │   │       ╰── <2100>  [+]
            │       │   │           ├── <2097> Var [i]
            │       │   │           ╰── <2099> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── elem_ptr
            │       │       │   ├── Type
            │       │       │   │   ╰── Pointer
            │       │       │   │       ╰── Struct [inner]
            │       │       │   ╰── Initializer
            │       │       │       ╰── <2116> AddressOf
            │       │       │           ╰── <2115> Subscript
            │       │       │               ├── <2112> Arrow
            │       │       │               │   ├── <2110> Subscript
            │       │       │               │   │   ├── <2108> Var [ptr_array]
            │       │       │               │   │   ╰── <2109> Constant Int [1]
            │       │       │               │   ╰── in_array
            │       │       │               ╰── <2114> Var [i]
            │       │       ├── If
            │       │       │   ├── Condition
            │       │       │   │   ╰── <2128>  [||]
            │       │       │   │       ├── <2122> Arrow
            │       │       │   │       │   ├── <2120> Var [elem_ptr]
            │       │       │   │       │   ╰── b
            │       │       │   │       ╰── <2127> Arrow
            │       │       │   │           ├── <2125> Var [elem_ptr]
            │       │       │   │           ╰── ptr
            │       │       │   ╰── Then
            │       │       │       ╰── Block
            │       │       │           ╰── Return
            │       │       │               ╰── <2129> Constant Int [0]
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <2144>  [&&]
            │       │           │       ├── <2137> Arrow
            │       │           │       │   ├── <2135> Var [elem_ptr]
            │       │           │       │   ╰── a
            │       │           │       ╰── <2143>  [!=]
            │       │           │           ├── <2140> Var [i]
            │       │           │           ╰── <2142> Constant Int [2]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── <2145> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2170>  [||]
            │       │   │       ├── <2160> Dot
            │       │   │       │   ├── <2158> Arrow
            │       │   │       │   │   ├── <2156> Subscript
            │       │   │       │   │   │   ├── <2154> Var [ptr_array]
            │       │   │       │   │   │   ╰── <2155> Constant Int [1]
            │       │   │       │   │   ╰── in
            │       │   │       │   ╰── b
            │       │   │       ╰── <2169> Dot
            │       │   │           ├── <2167> Arrow
            │       │   │           │   ├── <2165> Subscript
            │       │   │           │   │   ├── <2163> Var [ptr_array]
            │       │   │           │   │   ╰── <2164> Constant Int [1]
            │       │   │           │   ╰── in
            │       │   │           ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2171> Constant Int [0]
            │       ╰── Return
            │           ╰── <2176> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2187> Unary [!]
                    │   │       ╰── <2186> FunctionCall [test_auto_dot]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2188> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2196> Unary [!]
                    │   │       ╰── <2195> FunctionCall [test_static_dot]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2197> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2205> Unary [!]
                    │   │       ╰── <2204> FunctionCall [test_auto_arrow]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2206> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2214> Unary [!]
                    │   │       ╰── <2213> FunctionCall [test_static_arrow]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2215> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2223> Unary [!]
                    │   │       ╰── <2222> FunctionCall [test_mixed]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2224> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2232> Unary [!]
                    │   │       ╰── <2231> FunctionCall [test_array_of_structs]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2233> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2241> Unary [!]
                    │   │       ╰── <2240> FunctionCall [test_array_of_struct_pointers]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2242> Constant Int [7]
                    ╰── Return
                        ╰── <2247> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_static_structs() {
    let src = r#"
        void *malloc(unsigned long size);
        int putchar(int ch);
        int puts(char *s);
        void test_static_local(int a, int b) {
            struct s {
                int a;
                int b;
            };
            static struct s static_struct;
            if (!(static_struct.a || static_struct.b)) {
                puts("zero");
            } else {
                putchar(static_struct.a);
                putchar(static_struct.b);
                putchar('\n');
            }
            static_struct.a = a;
            static_struct.b = b;
        }
        void test_static_local_pointer(int a, int b) {
            struct s {
                int a;
                int b;
            };
            static struct s *struct_ptr;
            if (!struct_ptr) {
                struct_ptr = malloc(sizeof(struct s));
            } else {
                putchar(struct_ptr->a);
                putchar(struct_ptr->b);
                putchar('\n');
            }
            struct_ptr->a = a;
            struct_ptr->b = b;
        }
        struct global {
            char x;
            char y;
            char z;
        };
        struct global g;
        void f1(void) {
            g.x = g.x + 1;
            g.y = g.y + 1;
            g.z = g.z + 1;
        }
        void f2(void) {
            putchar(g.x);
            putchar(g.y);
            putchar(g.z);
            putchar('\n');
        }
        void test_global_struct(void) {
            g.x = 'A';
            g.y = 'B';
            g.z = 'C';
            f1();
            f2();
            f1();
            f2();
        }
        struct global *g_ptr;
        void f3(void) {
            g_ptr->x = g_ptr->x + 1;
            g_ptr->y = g_ptr->y + 1;
            g_ptr->z = g_ptr->z + 1;
        }
        void f4(void) {
            putchar(g_ptr->x);
            putchar(g_ptr->y);
            putchar(g_ptr->z);
            putchar('\n');
        }
        void test_global_struct_pointer(void) {
            g_ptr = &g;
            f3();
            f4();
            f3();
            f4();
            g_ptr = malloc(sizeof(struct global));
            g_ptr->x = 'a';
            g_ptr->y = 'b';
            g_ptr->z = 'c';
            f3();
            f4();
            f3();
            f4();
        }
        int main(void) {
            test_static_local('m', 'n');
            test_static_local('o', 'p');
            test_static_local('!', '!');
            ;
            test_static_local_pointer('w', 'x');
            test_static_local_pointer('y', 'z');
            test_static_local_pointer('!', '!');
            ;
            test_global_struct();
            test_global_struct_pointer();
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [putchar]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ch
            │           ╰── Type
            │               ╰── Int
            ├── Function [puts]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [test_static_local]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── a
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── b
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── static_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Static
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <65> Unary [!]
            │       │   │       ╰── <64>  [||]
            │       │   │           ├── <57> Dot
            │       │   │           │   ├── <55> Var [static_struct]
            │       │   │           │   ╰── a
            │       │   │           ╰── <62> Dot
            │       │   │               ├── <60> Var [static_struct]
            │       │   │               ╰── b
            │       │   ├── Then
            │       │   │   ╰── Block
            │       │   │       ╰── <68> FunctionCall [puts]
            │       │   │           ╰── <67> "zero"
            │       │   ╰── Else
            │       │       ╰── Block
            │       │           ├── <77> FunctionCall [putchar]
            │       │           │   ╰── <76> Dot
            │       │           │       ├── <74> Var [static_struct]
            │       │           │       ╰── a
            │       │           ├── <84> FunctionCall [putchar]
            │       │           │   ╰── <83> Dot
            │       │           │       ├── <81> Var [static_struct]
            │       │           │       ╰── b
            │       │           ╰── <88> FunctionCall [putchar]
            │       │               ╰── <87> Constant Int [10]
            │       ├── <100> Assign [=]
            │       │   ├── <96> Dot
            │       │   │   ├── <94> Var [static_struct]
            │       │   │   ╰── a
            │       │   ╰── <99> Var [a]
            │       ╰── <109> Assign [=]
            │           ├── <105> Dot
            │           │   ├── <103> Var [static_struct]
            │           │   ╰── b
            │           ╰── <108> Var [b]
            ├── Function [test_static_local_pointer]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── a
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── b
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── struct_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Static
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <143> Unary [!]
            │       │   │       ╰── <142> Var [struct_ptr]
            │       │   ├── Then
            │       │   │   ╰── Block
            │       │   │       ╰── <153> Assign [=]
            │       │   │           ├── <145> Var [struct_ptr]
            │       │   │           ╰── <152> FunctionCall [malloc]
            │       │   │               ╰── <151> SizeOfType
            │       │   │                   ╰── Struct [s]
            │       │   ╰── Else
            │       │       ╰── Block
            │       │           ├── <162> FunctionCall [putchar]
            │       │           │   ╰── <161> Arrow
            │       │           │       ├── <159> Var [struct_ptr]
            │       │           │       ╰── a
            │       │           ├── <169> FunctionCall [putchar]
            │       │           │   ╰── <168> Arrow
            │       │           │       ├── <166> Var [struct_ptr]
            │       │           │       ╰── b
            │       │           ╰── <173> FunctionCall [putchar]
            │       │               ╰── <172> Constant Int [10]
            │       ├── <185> Assign [=]
            │       │   ├── <181> Arrow
            │       │   │   ├── <179> Var [struct_ptr]
            │       │   │   ╰── a
            │       │   ╰── <184> Var [a]
            │       ╰── <194> Assign [=]
            │           ├── <190> Arrow
            │           │   ├── <188> Var [struct_ptr]
            │           │   ╰── b
            │           ╰── <193> Var [b]
            ├── Struct [global]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── y
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── z
            │       ╰── Type
            │           ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── g
            │   ╰── Type
            │       ╰── Struct [global]
            ├── Function [f1]
            │   ╰── Body
            │       ├── <233> Assign [=]
            │       │   ├── <224> Dot
            │       │   │   ├── <222> Var [g]
            │       │   │   ╰── x
            │       │   ╰── <232>  [+]
            │       │       ├── <229> Dot
            │       │       │   ├── <227> Var [g]
            │       │       │   ╰── x
            │       │       ╰── <231> Constant Int [1]
            │       ├── <247> Assign [=]
            │       │   ├── <238> Dot
            │       │   │   ├── <236> Var [g]
            │       │   │   ╰── y
            │       │   ╰── <246>  [+]
            │       │       ├── <243> Dot
            │       │       │   ├── <241> Var [g]
            │       │       │   ╰── y
            │       │       ╰── <245> Constant Int [1]
            │       ╰── <261> Assign [=]
            │           ├── <252> Dot
            │           │   ├── <250> Var [g]
            │           │   ╰── z
            │           ╰── <260>  [+]
            │               ├── <257> Dot
            │               │   ├── <255> Var [g]
            │               │   ╰── z
            │               ╰── <259> Constant Int [1]
            ├── Function [f2]
            │   ╰── Body
            │       ├── <274> FunctionCall [putchar]
            │       │   ╰── <273> Dot
            │       │       ├── <271> Var [g]
            │       │       ╰── x
            │       ├── <281> FunctionCall [putchar]
            │       │   ╰── <280> Dot
            │       │       ├── <278> Var [g]
            │       │       ╰── y
            │       ├── <288> FunctionCall [putchar]
            │       │   ╰── <287> Dot
            │       │       ├── <285> Var [g]
            │       │       ╰── z
            │       ╰── <292> FunctionCall [putchar]
            │           ╰── <291> Constant Int [10]
            ├── Function [test_global_struct]
            │   ╰── Body
            │       ├── <306> Assign [=]
            │       │   ├── <303> Dot
            │       │   │   ├── <301> Var [g]
            │       │   │   ╰── x
            │       │   ╰── <305> Constant Int [65]
            │       ├── <314> Assign [=]
            │       │   ├── <311> Dot
            │       │   │   ├── <309> Var [g]
            │       │   │   ╰── y
            │       │   ╰── <313> Constant Int [66]
            │       ├── <322> Assign [=]
            │       │   ├── <319> Dot
            │       │   │   ├── <317> Var [g]
            │       │   │   ╰── z
            │       │   ╰── <321> Constant Int [67]
            │       ├── <325> FunctionCall [f1]
            │       ├── <328> FunctionCall [f2]
            │       ├── <331> FunctionCall [f1]
            │       ╰── <334> FunctionCall [f2]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── g_ptr
            │   ╰── Type
            │       ╰── Pointer
            │           ╰── Struct [global]
            ├── Function [f3]
            │   ╰── Body
            │       ├── <360> Assign [=]
            │       │   ├── <351> Arrow
            │       │   │   ├── <349> Var [g_ptr]
            │       │   │   ╰── x
            │       │   ╰── <359>  [+]
            │       │       ├── <356> Arrow
            │       │       │   ├── <354> Var [g_ptr]
            │       │       │   ╰── x
            │       │       ╰── <358> Constant Int [1]
            │       ├── <374> Assign [=]
            │       │   ├── <365> Arrow
            │       │   │   ├── <363> Var [g_ptr]
            │       │   │   ╰── y
            │       │   ╰── <373>  [+]
            │       │       ├── <370> Arrow
            │       │       │   ├── <368> Var [g_ptr]
            │       │       │   ╰── y
            │       │       ╰── <372> Constant Int [1]
            │       ╰── <388> Assign [=]
            │           ├── <379> Arrow
            │           │   ├── <377> Var [g_ptr]
            │           │   ╰── z
            │           ╰── <387>  [+]
            │               ├── <384> Arrow
            │               │   ├── <382> Var [g_ptr]
            │               │   ╰── z
            │               ╰── <386> Constant Int [1]
            ├── Function [f4]
            │   ╰── Body
            │       ├── <401> FunctionCall [putchar]
            │       │   ╰── <400> Arrow
            │       │       ├── <398> Var [g_ptr]
            │       │       ╰── x
            │       ├── <408> FunctionCall [putchar]
            │       │   ╰── <407> Arrow
            │       │       ├── <405> Var [g_ptr]
            │       │       ╰── y
            │       ├── <415> FunctionCall [putchar]
            │       │   ╰── <414> Arrow
            │       │       ├── <412> Var [g_ptr]
            │       │       ╰── z
            │       ╰── <419> FunctionCall [putchar]
            │           ╰── <418> Constant Int [10]
            ├── Function [test_global_struct_pointer]
            │   ╰── Body
            │       ├── <433> Assign [=]
            │       │   ├── <428> Var [g_ptr]
            │       │   ╰── <432> AddressOf
            │       │       ╰── <431> Var [g]
            │       ├── <436> FunctionCall [f3]
            │       ├── <439> FunctionCall [f4]
            │       ├── <442> FunctionCall [f3]
            │       ├── <445> FunctionCall [f4]
            │       ├── <456> Assign [=]
            │       │   ├── <448> Var [g_ptr]
            │       │   ╰── <455> FunctionCall [malloc]
            │       │       ╰── <454> SizeOfType
            │       │           ╰── Struct [global]
            │       ├── <464> Assign [=]
            │       │   ├── <461> Arrow
            │       │   │   ├── <459> Var [g_ptr]
            │       │   │   ╰── x
            │       │   ╰── <463> Constant Int [97]
            │       ├── <472> Assign [=]
            │       │   ├── <469> Arrow
            │       │   │   ├── <467> Var [g_ptr]
            │       │   │   ╰── y
            │       │   ╰── <471> Constant Int [98]
            │       ├── <480> Assign [=]
            │       │   ├── <477> Arrow
            │       │   │   ├── <475> Var [g_ptr]
            │       │   │   ╰── z
            │       │   ╰── <479> Constant Int [99]
            │       ├── <483> FunctionCall [f3]
            │       ├── <486> FunctionCall [f4]
            │       ├── <489> FunctionCall [f3]
            │       ╰── <492> FunctionCall [f4]
            ╰── Function [main]
                ╰── Body
                    ├── <503> FunctionCall [test_static_local]
                    │   ├── <501> Constant Int [109]
                    │   ╰── <502> Constant Int [110]
                    ├── <508> FunctionCall [test_static_local]
                    │   ├── <506> Constant Int [111]
                    │   ╰── <507> Constant Int [112]
                    ├── <513> FunctionCall [test_static_local]
                    │   ├── <511> Constant Int [33]
                    │   ╰── <512> Constant Int [33]
                    ├── Empty
                    ├── <519> FunctionCall [test_static_local_pointer]
                    │   ├── <517> Constant Int [119]
                    │   ╰── <518> Constant Int [120]
                    ├── <524> FunctionCall [test_static_local_pointer]
                    │   ├── <522> Constant Int [121]
                    │   ╰── <523> Constant Int [122]
                    ├── <529> FunctionCall [test_static_local_pointer]
                    │   ├── <527> Constant Int [33]
                    │   ╰── <528> Constant Int [33]
                    ├── Empty
                    ├── <533> FunctionCall [test_global_struct]
                    ├── <536> FunctionCall [test_global_struct_pointer]
                    ╰── Return
                        ╰── <538> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_semantic_analysis_cast_struct_to_void() {
    let src = r#"
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s x = {1, 2};
            (void)x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <19> Constant Int [1]
                    │           ╰── <21> Constant Int [2]
                    ├── <29> Cast
                    │   ├── Target
                    │   │   ╰── Void
                    │   ╰── Expression
                    │       ╰── <28> Var [x]
                    ╰── Return
                        ╰── <31> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_semantic_analysis_incomplete_structs() {
    let src = r#"
        void *malloc(unsigned long size);
        void *calloc(unsigned long nmemb, unsigned long size);
        int puts(char *s);
        int strcmp(char *s1, char *s2);
        struct never_used;
        struct never_used incomplete_fun(struct never_used x);
        int test_block_scope_forward_decl(void) {
            struct s;
            struct s *s_ptr = 0;
            struct s {
                int x;
                int y;
            };
            struct s val = {1, 2};
            s_ptr = &val;
            if (s_ptr->x != 1 || s_ptr->y != 2) {
                return 0;
            }
            return 1;
        }
        struct pair;
        struct pair *make_struct(void);
        int validate_struct(struct pair *ptr);
        int test_file_scope_forward_decl(void) {
            struct pair *my_struct = make_struct();
            return validate_struct(my_struct);
        }
        struct pair {
            long l;
            long m;
        };
        struct pair *make_struct(void) {
            struct pair *retval = malloc(sizeof(struct pair));
            retval->l = 100;
            retval->m = 200;
            return retval;
        }
        int validate_struct(struct pair *ptr) {
            return (ptr->l == 100 && ptr->m == 200);
        }
        struct msg_holder;
        void print_msg(struct msg_holder *param);
        int validate_incomplete_var(void);
        extern struct msg_holder incomplete_var;
        int test_incomplete_var(void) {
            print_msg(&incomplete_var);
            return validate_incomplete_var();
        }
        struct msg_holder {
            char *msg;
        };
        int validate_incomplete_var(void) {
            if (strcmp(incomplete_var.msg, "I'm a struct!")) {
                return 0;
            }
            return 1;
        }
        struct msg_holder incomplete_var = {"I'm a struct!"};
        void print_msg(struct msg_holder *param) {
            puts(param->msg);
        }
        int test_deref_incomplete_var(void) {
            struct undefined_struct;
            struct undefined_struct *ptr = malloc(4);
            return &*ptr == ptr;
        }
        struct opaque_struct;
        struct opaque_struct *use_struct_pointers(struct opaque_struct *param) {
            if (param == 0) {
                puts("empty pointer!");
            }
            return 0;
        }
        int test_use_incomplete_struct_pointers(void) {
            struct opaque_struct *ptr1 = calloc(1, 4);
            struct opaque_struct *ptr2 = calloc(1, 4);
            char *ptr1_bytes = (char *)ptr1;
            if (ptr1_bytes[0] || ptr1_bytes[1]) {
                return 0;
            }
            if (ptr1 == 0 || ptr2 == 0 || ptr1 == ptr2) {
                return 0;
            }
            static int flse = 0;
            struct opaque_struct *ptr3 = flse ? ptr1 : ptr2;
            if (ptr3 != ptr2) {
                return 0;
            }
            if (use_struct_pointers(ptr3)) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_block_scope_forward_decl()) {
                return 2;
            }
            if (!test_file_scope_forward_decl()) {
                return 3;
            }
            if (!test_incomplete_var()) {
                return 4;
            }
            if (!test_deref_incomplete_var()) {
                return 5;
            }
            if (!test_use_incomplete_struct_pointers()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [puts]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [never_used]
            ├── Function [incomplete_fun]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── x
            │           ╰── Type
            │               ╰── Struct [never_used]
            ├── Function [test_block_scope_forward_decl]
            │   ╰── Body
            │       ├── Struct [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <67> Constant Int [0]
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── val
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <84> Constant Int [1]
            │       │           ╰── <86> Constant Int [2]
            │       ├── <96> Assign [=]
            │       │   ├── <91> Var [s_ptr]
            │       │   ╰── <95> AddressOf
            │       │       ╰── <94> Var [val]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <113>  [||]
            │       │   │       ├── <104>  [!=]
            │       │   │       │   ├── <101> Arrow
            │       │   │       │   │   ├── <99> Var [s_ptr]
            │       │   │       │   │   ╰── x
            │       │   │       │   ╰── <103> Constant Int [1]
            │       │   │       ╰── <112>  [!=]
            │       │   │           ├── <109> Arrow
            │       │   │           │   ├── <107> Var [s_ptr]
            │       │   │           │   ╰── y
            │       │   │           ╰── <111> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <114> Constant Int [0]
            │       ╰── Return
            │           ╰── <119> Constant Int [1]
            ├── Struct [pair]
            ├── Function [make_struct]
            ├── Function [validate_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [pair]
            ├── Function [test_file_scope_forward_decl]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_struct
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [pair]
            │       │   ╰── Initializer
            │       │       ╰── <152> FunctionCall [make_struct]
            │       ╰── Return
            │           ╰── <158> FunctionCall [validate_struct]
            │               ╰── <157> Var [my_struct]
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── m
            │       ╰── Type
            │           ╰── Long
            ├── Function [make_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [pair]
            │       │   ╰── Initializer
            │       │       ╰── <188> FunctionCall [malloc]
            │       │           ╰── <187> SizeOfType
            │       │               ╰── Struct [pair]
            │       ├── <197> Assign [=]
            │       │   ├── <194> Arrow
            │       │   │   ├── <192> Var [retval]
            │       │   │   ╰── l
            │       │   ╰── <196> Constant Int [100]
            │       ├── <205> Assign [=]
            │       │   ├── <202> Arrow
            │       │   │   ├── <200> Var [retval]
            │       │   │   ╰── m
            │       │   ╰── <204> Constant Int [200]
            │       ╰── Return
            │           ╰── <208> Var [retval]
            ├── Function [validate_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [pair]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <237>  [&&]
            │               ├── <227>  [==]
            │               │   ├── <224> Arrow
            │               │   │   ├── <222> Var [ptr]
            │               │   │   ╰── l
            │               │   ╰── <226> Constant Int [100]
            │               ╰── <235>  [==]
            │                   ├── <232> Arrow
            │                   │   ├── <230> Var [ptr]
            │                   │   ╰── m
            │                   ╰── <234> Constant Int [200]
            ├── Struct [msg_holder]
            ├── Function [print_msg]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── param
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [msg_holder]
            ├── Function [validate_incomplete_var]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── incomplete_var
            │   ├── Type
            │   │   ╰── Struct [msg_holder]
            │   ╰── Extern
            ├── Function [test_incomplete_var]
            │   ╰── Body
            │       ├── <272> FunctionCall [print_msg]
            │       │   ╰── <271> AddressOf
            │       │       ╰── <270> Var [incomplete_var]
            │       ╰── Return
            │           ╰── <275> FunctionCall [validate_incomplete_var]
            ├── Struct [msg_holder]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── msg
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Char
            ├── Function [validate_incomplete_var]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <296> FunctionCall [strcmp]
            │       │   │       ├── <294> Dot
            │       │   │       │   ├── <292> Var [incomplete_var]
            │       │   │       │   ╰── msg
            │       │   │       ╰── <295> "I'm a struct!"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <297> Constant Int [0]
            │       ╰── Return
            │           ╰── <302> Constant Int [1]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── incomplete_var
            │   ├── Type
            │   │   ╰── Struct [msg_holder]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── <310> "I'm a struct!"
            ├── Function [print_msg]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── param
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [msg_holder]
            │   ╰── Body
            │       ╰── <328> FunctionCall [puts]
            │           ╰── <327> Arrow
            │               ├── <325> Var [param]
            │               ╰── msg
            ├── Function [test_deref_incomplete_var]
            │   ╰── Body
            │       ├── Struct [undefined_struct]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [undefined_struct]
            │       │   ╰── Initializer
            │       │       ╰── <345> FunctionCall [malloc]
            │       │           ╰── <344> Constant Int [4]
            │       ╰── Return
            │           ╰── <355>  [==]
            │               ├── <351> AddressOf
            │               │   ╰── <350> Dereference
            │               │       ╰── <349> Var [ptr]
            │               ╰── <354> Var [ptr]
            ├── Struct [opaque_struct]
            ├── Function [use_struct_pointers]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── param
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [opaque_struct]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <376>  [==]
            │       │   │       ├── <373> Var [param]
            │       │   │       ╰── <375> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <379> FunctionCall [puts]
            │       │               ╰── <378> "empty pointer!"
            │       ╰── Return
            │           ╰── <384> Constant Int [0]
            ├── Function [test_use_incomplete_struct_pointers]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr1
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [opaque_struct]
            │       │   ╰── Initializer
            │       │       ╰── <400> FunctionCall [calloc]
            │       │           ├── <398> Constant Int [1]
            │       │           ╰── <399> Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr2
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [opaque_struct]
            │       │   ╰── Initializer
            │       │       ╰── <411> FunctionCall [calloc]
            │       │           ├── <409> Constant Int [1]
            │       │           ╰── <410> Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr1_bytes
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <423> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Char
            │       │           ╰── Expression
            │       │               ╰── <422> Var [ptr1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <435>  [||]
            │       │   │       ├── <429> Subscript
            │       │   │       │   ├── <427> Var [ptr1_bytes]
            │       │   │       │   ╰── <428> Constant Int [0]
            │       │   │       ╰── <434> Subscript
            │       │   │           ├── <432> Var [ptr1_bytes]
            │       │   │           ╰── <433> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <436> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <460>  [||]
            │       │   │       ├── <452>  [||]
            │       │   │       │   ├── <445>  [==]
            │       │   │       │   │   ├── <442> Var [ptr1]
            │       │   │       │   │   ╰── <444> Constant Int [0]
            │       │   │       │   ╰── <451>  [==]
            │       │   │       │       ├── <448> Var [ptr2]
            │       │   │       │       ╰── <450> Constant Int [0]
            │       │   │       ╰── <459>  [==]
            │       │   │           ├── <455> Var [ptr1]
            │       │   │           ╰── <458> Var [ptr2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <461> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── flse
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <470> Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr3
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [opaque_struct]
            │       │   ╰── Initializer
            │       │       ╰── <484> Conditional [?]
            │       │           ├── <479> Var [flse]
            │       │           ├── Then
            │       │           │   ╰── <481> Var [ptr1]
            │       │           ╰── Else
            │       │               ╰── <483> Var [ptr2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <492>  [!=]
            │       │   │       ├── <488> Var [ptr3]
            │       │   │       ╰── <491> Var [ptr2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <493> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <501> FunctionCall [use_struct_pointers]
            │       │   │       ╰── <500> Var [ptr3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <502> Constant Int [0]
            │       ╰── Return
            │           ╰── <507> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <518> Unary [!]
                    │   │       ╰── <517> FunctionCall [test_block_scope_forward_decl]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <519> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <527> Unary [!]
                    │   │       ╰── <526> FunctionCall [test_file_scope_forward_decl]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <528> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <536> Unary [!]
                    │   │       ╰── <535> FunctionCall [test_incomplete_var]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <537> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <545> Unary [!]
                    │   │       ╰── <544> FunctionCall [test_deref_incomplete_var]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <546> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <554> Unary [!]
                    │   │       ╰── <553> FunctionCall [test_use_incomplete_struct_pointers]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <555> Constant Int [6]
                    ╰── Return
                        ╰── <560> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_semantic_analysis_namespaces() {
    let src = r#"
        int test_shared_member_names(void) {
            struct pair1 {
                int x;
                int y;
            };
            struct pair2 {
                double x;
                char y;
            };
            struct pair1 p1 = {1, 2};
            struct pair2 p2 = {3.0, 4};
            if (p1.x != 1 || p2.x != 3.0) {
                return 0;
            }
            return 1;
        }
        int test_shared_nested_member_names(void) {
            struct pair1 {
                int x;
                int *y;
            };
            struct pair2 {
                void *x;
                double y[4];
            };
            struct pair1 p1 = {3, &(p1.x)};
            struct pair2 p2 = {&p1, {1.0, 2.0, 3.0, 4.0}};
            if (((struct pair1 *)p2.x)->x != 3) {
                return 0;
            }
            return 1;
        }
        int test_same_name_var_member_and_tag(void) {
            struct x {
                int x;
            };
            struct x x = {10};
            if (x.x != 10) {
                return 0;
            }
            return 1;
        }
        int test_same_name_fun_member_and_tag(void) {
            struct f {
                int f;
            };
            int f(void);
            struct f my_struct;
            my_struct.f = f();
            if (my_struct.f != 10) {
                return 0;
            }
            return 1;
        }
        int f(void) {
            return 10;
        }
        int main(void) {
            if (!test_shared_member_names()) {
                return 1;
            }
            if (!test_shared_nested_member_names()) {
                return 2;
            }
            if (!test_same_name_var_member_and_tag()) {
                return 3;
            }
            if (!test_same_name_fun_member_and_tag()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [test_shared_member_names]
            │   ╰── Body
            │       ├── Struct [pair1]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── Struct [pair2]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Double
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Char
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── p1
            │       │   ├── Type
            │       │   │   ╰── Struct [pair1]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <29> Constant Int [1]
            │       │           ╰── <31> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── p2
            │       │   ├── Type
            │       │   │   ╰── Struct [pair2]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <39> Constant Double [+3e0]
            │       │           ╰── <41> Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <60>  [||]
            │       │   │       ├── <51>  [!=]
            │       │   │       │   ├── <48> Dot
            │       │   │       │   │   ├── <46> Var [p1]
            │       │   │       │   │   ╰── x
            │       │   │       │   ╰── <50> Constant Int [1]
            │       │   │       ╰── <59>  [!=]
            │       │   │           ├── <56> Dot
            │       │   │           │   ├── <54> Var [p2]
            │       │   │           │   ╰── x
            │       │   │           ╰── <58> Constant Double [+3e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <61> Constant Int [0]
            │       ╰── Return
            │           ╰── <66> Constant Int [1]
            ├── Function [test_shared_nested_member_names]
            │   ╰── Body
            │       ├── Struct [pair1]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Pointer
            │       │               ╰── Int
            │       ├── Struct [pair2]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Pointer
            │       │   │           ╰── Void
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Array
            │       │               ├── 4
            │       │               ╰── Double
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── p1
            │       │   ├── Type
            │       │   │   ╰── Struct [pair1]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <102> Constant Int [3]
            │       │           ╰── <109> AddressOf
            │       │               ╰── <108> Dot
            │       │                   ├── <105> Var [p1]
            │       │                   ╰── x
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── p2
            │       │   ├── Type
            │       │   │   ╰── Struct [pair2]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <119> AddressOf
            │       │           │   ╰── <118> Var [p1]
            │       │           ╰── Compound
            │       │               ├── <121> Constant Double [+1e0]
            │       │               ├── <123> Constant Double [+2e0]
            │       │               ├── <125> Constant Double [+3e0]
            │       │               ╰── <127> Constant Double [+4e0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <146>  [!=]
            │       │   │       ├── <143> Arrow
            │       │   │       │   ├── <141> Cast
            │       │   │       │   │   ├── Target
            │       │   │       │   │   │   ╰── Pointer
            │       │   │       │   │   │       ╰── Struct [pair1]
            │       │   │       │   │   ╰── Expression
            │       │   │       │   │       ╰── <139> Dot
            │       │   │       │   │           ├── <137> Var [p2]
            │       │   │       │   │           ╰── x
            │       │   │       │   ╰── x
            │       │   │       ╰── <145> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <147> Constant Int [0]
            │       ╰── Return
            │           ╰── <152> Constant Int [1]
            ├── Function [test_same_name_var_member_and_tag]
            │   ╰── Body
            │       ├── Struct [x]
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── x
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [x]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <170> Constant Int [10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <180>  [!=]
            │       │   │       ├── <177> Dot
            │       │   │       │   ├── <175> Var [x]
            │       │   │       │   ╰── x
            │       │   │       ╰── <179> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <181> Constant Int [0]
            │       ╰── Return
            │           ╰── <186> Constant Int [1]
            ├── Function [test_same_name_fun_member_and_tag]
            │   ╰── Body
            │       ├── Struct [f]
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── f
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── Function [f]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_struct
            │       │   ╰── Type
            │       │       ╰── Struct [f]
            │       ├── <217> Assign [=]
            │       │   ├── <213> Dot
            │       │   │   ├── <211> Var [my_struct]
            │       │   │   ╰── f
            │       │   ╰── <216> FunctionCall [f]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <225>  [!=]
            │       │   │       ├── <222> Dot
            │       │   │       │   ├── <220> Var [my_struct]
            │       │   │       │   ╰── f
            │       │   │       ╰── <224> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <226> Constant Int [0]
            │       ╰── Return
            │           ╰── <231> Constant Int [1]
            ├── Function [f]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <239> Constant Int [10]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <250> Unary [!]
                    │   │       ╰── <249> FunctionCall [test_shared_member_names]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <251> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <259> Unary [!]
                    │   │       ╰── <258> FunctionCall [test_shared_nested_member_names]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <260> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <268> Unary [!]
                    │   │       ╰── <267> FunctionCall [test_same_name_var_member_and_tag]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <269> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <277> Unary [!]
                    │   │       ╰── <276> FunctionCall [test_same_name_fun_member_and_tag]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <278> Constant Int [4]
                    ╰── Return
                        ╰── <283> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_semantic_analysis_resolve_tags() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        void *malloc(unsigned long size);
        struct s {
            int a;
        };
        int test_var_declaration(void) {
            struct shadow {
                int x;
            };
            struct shadow outer;
            outer.x = 2;
            {
                struct shadow {
                    int y;
                };
                struct shadow inner;
                inner.y = 3;
                if (outer.x != 2) {
                    return 0;
                }
                if (inner.y != 3) {
                    return 0;
                }
            }
            return 1;
        }
        int test_member_declaration(void) {
            struct s {
                int b;
                struct s *self_ptr;
            };
            struct s my_struct = {123, 0};
            my_struct.self_ptr = &my_struct;
            if (my_struct.self_ptr->b != 123) {
                return 0;
            }
            return 1;
        }
        int test_function_declaration(void) {
            struct s outer_struct = {1};
            {
                struct s {
                    int arr[40];
                };
            }
            struct s *copy_struct(struct s * arg);
            struct s *copy = copy_struct(&outer_struct);
            if (copy->a != outer_struct.a) {
                return 0;
            }
            return 1;
        }
        struct s *copy_struct(struct s *arg) {
            struct s *ptr = malloc(4);
            ptr->a = arg->a;
            return ptr;
        }
        int test_for_loop(void) {
            for (struct s loop_struct = {10}; loop_struct.a > 0;
                 loop_struct.a = loop_struct.a - 1) {
                struct s {
                    double d;
                };
                static struct s loop_body_struct = {0};
                loop_body_struct.d = loop_body_struct.d + 1;
                if (loop_struct.a == 1) {
                    if (loop_body_struct.d != 10.0) {
                        return 0;
                    }
                }
            }
            return 1;
        }
        int test_cast(void) {
            void *ptr = malloc(10);
            if (ptr) {
                struct s {
                    char arr[10];
                };
                ((struct s *)ptr)->arr[2] = 10;
                char byte = ((char *)ptr)[2];
                if (byte != 10) {
                    return 0;
                }
            }
            void *second_ptr = malloc(4);
            ((struct s *)second_ptr)->a = 10;
            char lowest_byte = ((char *)second_ptr)[0];
            if (lowest_byte != 10) {
                return 0;
            }
            return 1;
        }
        int test_sizeof(void) {
            struct s {
                int a;
                int b;
            };
            struct s x;
            {
                struct s {
                    char arr[15];
                };
                if (sizeof x != 8) {
                    return 0;
                };
                if (sizeof(struct s) != 15) {
                    return 0;
                }
            }
            if (sizeof(struct s) != 8) {
                return 0;
            }
            return 1;
        }
        int test_derived_types(void) {
            struct s outer_struct = {1};
            struct s *(*outer_arr)[3] = calloc(3, sizeof(void *));
            struct s {
                int x;
            };
            struct s inner_struct = {2};
            struct s *(*inner_arr)[3] = calloc(3, sizeof(void *));
            outer_arr[0][0] = &outer_struct;
            outer_arr[0][1] = &outer_struct;
            inner_arr[0][0] = &inner_struct;
            inner_arr[0][2] = &inner_struct;
            if (outer_arr[0][0]->a != 1) {
                return 0;
            }
            if (inner_arr[0][0]->x != 2) {
                return 0;
            }
            return 1;
        }
        int test_contentless_tag_noop(void) {
            struct s {
                int x;
                int y;
            };
            struct s;
            struct s var;
            var.x = 10;
            var.y = 11;
            if (var.x != 10 || var.y != 11) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_var_declaration()) {
                return 1;
            }
            if (!test_member_declaration()) {
                return 2;
            }
            if (!test_function_declaration()) {
                return 3;
            }
            if (!test_for_loop()) {
                return 4;
            }
            if (!test_cast()) {
                return 5;
            }
            if (!test_sizeof()) {
                return 6;
            }
            if (!test_derived_types()) {
                return 7;
            }
            if (!test_contentless_tag_noop()) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── Function [test_var_declaration]
            │   ╰── Body
            │       ├── Struct [shadow]
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── x
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer
            │       │   ╰── Type
            │       │       ╰── Struct [shadow]
            │       ├── <49> Assign [=]
            │       │   ├── <46> Dot
            │       │   │   ├── <44> Var [outer]
            │       │   │   ╰── x
            │       │   ╰── <48> Constant Int [2]
            │       ├── Block
            │       │   ├── Struct [shadow]
            │       │   │   ╰── Field
            │       │   │       ├── Name
            │       │   │       │   ╰── y
            │       │   │       ╰── Type
            │       │   │           ╰── Int
            │       │   ├── VarDeclaration
            │       │   │   ├── Name
            │       │   │   │   ╰── inner
            │       │   │   ╰── Type
            │       │   │       ╰── Struct [shadow]
            │       │   ├── <68> Assign [=]
            │       │   │   ├── <65> Dot
            │       │   │   │   ├── <63> Var [inner]
            │       │   │   │   ╰── y
            │       │   │   ╰── <67> Constant Int [3]
            │       │   ├── If
            │       │   │   ├── Condition
            │       │   │   │   ╰── <76>  [!=]
            │       │   │   │       ├── <73> Dot
            │       │   │   │       │   ├── <71> Var [outer]
            │       │   │   │       │   ╰── x
            │       │   │   │       ╰── <75> Constant Int [2]
            │       │   │   ╰── Then
            │       │   │       ╰── Block
            │       │   │           ╰── Return
            │       │   │               ╰── <77> Constant Int [0]
            │       │   ╰── If
            │       │       ├── Condition
            │       │       │   ╰── <88>  [!=]
            │       │       │       ├── <85> Dot
            │       │       │       │   ├── <83> Var [inner]
            │       │       │       │   ╰── y
            │       │       │       ╰── <87> Constant Int [3]
            │       │       ╰── Then
            │       │           ╰── Block
            │       │               ╰── Return
            │       │                   ╰── <89> Constant Int [0]
            │       ╰── Return
            │           ╰── <96> Constant Int [1]
            ├── Function [test_member_declaration]
            │   ╰── Body
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── b
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── self_ptr
            │       │       ╰── Type
            │       │           ╰── Pointer
            │       │               ╰── Struct [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <120> Constant Int [123]
            │       │           ╰── <122> Constant Int [0]
            │       ├── <134> Assign [=]
            │       │   ├── <129> Dot
            │       │   │   ├── <127> Var [my_struct]
            │       │   │   ╰── self_ptr
            │       │   ╰── <133> AddressOf
            │       │       ╰── <132> Var [my_struct]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <144>  [!=]
            │       │   │       ├── <141> Arrow
            │       │   │       │   ├── <139> Dot
            │       │   │       │   │   ├── <137> Var [my_struct]
            │       │   │       │   │   ╰── self_ptr
            │       │   │       │   ╰── b
            │       │   │       ╰── <143> Constant Int [123]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <145> Constant Int [0]
            │       ╰── Return
            │           ╰── <150> Constant Int [1]
            ├── Function [test_function_declaration]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <162> Constant Int [1]
            │       ├── Block
            │       │   ╰── Struct [s]
            │       │       ╰── Field
            │       │           ├── Name
            │       │           │   ╰── arr
            │       │           ╰── Type
            │       │               ╰── Array
            │       │                   ├── 40
            │       │                   ╰── Int
            │       ├── Function [copy_struct]
            │       │   ╰── Parameters
            │       │       ╰── Param
            │       │           ├── Name
            │       │           │   ╰── arg
            │       │           ╰── Type
            │       │               ╰── Pointer
            │       │                   ╰── Struct [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── copy
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <197> FunctionCall [copy_struct]
            │       │           ╰── <196> AddressOf
            │       │               ╰── <195> Var [outer_struct]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <209>  [!=]
            │       │   │       ├── <203> Arrow
            │       │   │       │   ├── <201> Var [copy]
            │       │   │       │   ╰── a
            │       │   │       ╰── <208> Dot
            │       │   │           ├── <206> Var [outer_struct]
            │       │   │           ╰── a
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <210> Constant Int [0]
            │       ╰── Return
            │           ╰── <215> Constant Int [1]
            ├── Function [copy_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── arg
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [s]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <237> FunctionCall [malloc]
            │       │           ╰── <236> Constant Int [4]
            │       ├── <249> Assign [=]
            │       │   ├── <243> Arrow
            │       │   │   ├── <241> Var [ptr]
            │       │   │   ╰── a
            │       │   ╰── <248> Arrow
            │       │       ├── <246> Var [arg]
            │       │       ╰── a
            │       ╰── Return
            │           ╰── <252> Var [ptr]
            ├── Function [test_for_loop]
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── loop_struct
            │       │   │       ├── Type
            │       │   │       │   ╰── Struct [s]
            │       │   │       ╰── Initializer
            │       │   │           ╰── Compound
            │       │   │               ╰── <264> Constant Int [10]
            │       │   ├── Condition
            │       │   │   ╰── <275>  [>]
            │       │   │       ├── <272> Dot
            │       │   │       │   ├── <270> Var [loop_struct]
            │       │   │       │   ╰── a
            │       │   │       ╰── <274> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <288> Assign [=]
            │       │   │       ├── <279> Dot
            │       │   │       │   ├── <277> Var [loop_struct]
            │       │   │       │   ╰── a
            │       │   │       ╰── <287>  [-]
            │       │   │           ├── <284> Dot
            │       │   │           │   ├── <282> Var [loop_struct]
            │       │   │           │   ╰── a
            │       │   │           ╰── <286> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── Struct [s]
            │       │       │   ╰── Field
            │       │       │       ├── Name
            │       │       │       │   ╰── d
            │       │       │       ╰── Type
            │       │       │           ╰── Double
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── loop_body_struct
            │       │       │   ├── Type
            │       │       │   │   ╰── Struct [s]
            │       │       │   ├── Initializer
            │       │       │   │   ╰── Compound
            │       │       │   │       ╰── <300> Constant Int [0]
            │       │       │   ╰── Static
            │       │       ├── <316> Assign [=]
            │       │       │   ├── <307> Dot
            │       │       │   │   ├── <305> Var [loop_body_struct]
            │       │       │   │   ╰── d
            │       │       │   ╰── <315>  [+]
            │       │       │       ├── <312> Dot
            │       │       │       │   ├── <310> Var [loop_body_struct]
            │       │       │       │   ╰── d
            │       │       │       ╰── <314> Constant Int [1]
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <324>  [==]
            │       │           │       ├── <321> Dot
            │       │           │       │   ├── <319> Var [loop_struct]
            │       │           │       │   ╰── a
            │       │           │       ╰── <323> Constant Int [1]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── If
            │       │                       ├── Condition
            │       │                       │   ╰── <331>  [!=]
            │       │                       │       ├── <328> Dot
            │       │                       │       │   ├── <326> Var [loop_body_struct]
            │       │                       │       │   ╰── d
            │       │                       │       ╰── <330> Constant Double [+1e1]
            │       │                       ╰── Then
            │       │                           ╰── Block
            │       │                               ╰── Return
            │       │                                   ╰── <332> Constant Int [0]
            │       ╰── Return
            │           ╰── <343> Constant Int [1]
            ├── Function [test_cast]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Void
            │       │   ╰── Initializer
            │       │       ╰── <357> FunctionCall [malloc]
            │       │           ╰── <356> Constant Int [10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <361> Var [ptr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ├── Struct [s]
            │       │           │   ╰── Field
            │       │           │       ├── Name
            │       │           │       │   ╰── arr
            │       │           │       ╰── Type
            │       │           │           ╰── Array
            │       │           │               ├── 10
            │       │           │               ╰── Char
            │       │           ├── <384> Assign [=]
            │       │           │   ├── <381> Subscript
            │       │           │   │   ├── <379> Arrow
            │       │           │   │   │   ├── <377> Cast
            │       │           │   │   │   │   ├── Target
            │       │           │   │   │   │   │   ╰── Pointer
            │       │           │   │   │   │   │       ╰── Struct [s]
            │       │           │   │   │   │   ╰── Expression
            │       │           │   │   │   │       ╰── <375> Var [ptr]
            │       │           │   │   │   ╰── arr
            │       │           │   │   ╰── <380> Constant Int [2]
            │       │           │   ╰── <383> Constant Int [10]
            │       │           ├── VarDeclaration
            │       │           │   ├── Name
            │       │           │   │   ╰── byte
            │       │           │   ├── Type
            │       │           │   │   ╰── Char
            │       │           │   ╰── Initializer
            │       │           │       ╰── <397> Subscript
            │       │           │           ├── <395> Cast
            │       │           │           │   ├── Target
            │       │           │           │   │   ╰── Pointer
            │       │           │           │   │       ╰── Char
            │       │           │           │   ╰── Expression
            │       │           │           │       ╰── <393> Var [ptr]
            │       │           │           ╰── <396> Constant Int [2]
            │       │           ╰── If
            │       │               ├── Condition
            │       │               │   ╰── <404>  [!=]
            │       │               │       ├── <401> Var [byte]
            │       │               │       ╰── <403> Constant Int [10]
            │       │               ╰── Then
            │       │                   ╰── Block
            │       │                       ╰── Return
            │       │                           ╰── <405> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── second_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Void
            │       │   ╰── Initializer
            │       │       ╰── <419> FunctionCall [malloc]
            │       │           ╰── <418> Constant Int [4]
            │       ├── <434> Assign [=]
            │       │   ├── <431> Arrow
            │       │   │   ├── <429> Cast
            │       │   │   │   ├── Target
            │       │   │   │   │   ╰── Pointer
            │       │   │   │   │       ╰── Struct [s]
            │       │   │   │   ╰── Expression
            │       │   │   │       ╰── <427> Var [second_ptr]
            │       │   │   ╰── a
            │       │   ╰── <433> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── lowest_byte
            │       │   ├── Type
            │       │   │   ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <447> Subscript
            │       │           ├── <445> Cast
            │       │           │   ├── Target
            │       │           │   │   ╰── Pointer
            │       │           │   │       ╰── Char
            │       │           │   ╰── Expression
            │       │           │       ╰── <443> Var [second_ptr]
            │       │           ╰── <446> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <454>  [!=]
            │       │   │       ├── <451> Var [lowest_byte]
            │       │   │       ╰── <453> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <455> Constant Int [0]
            │       ╰── Return
            │           ╰── <460> Constant Int [1]
            ├── Function [test_sizeof]
            │   ╰── Body
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── a
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── b
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Struct [s]
            │       ├── Block
            │       │   ├── Struct [s]
            │       │   │   ╰── Field
            │       │   │       ├── Name
            │       │   │       │   ╰── arr
            │       │   │       ╰── Type
            │       │   │           ╰── Array
            │       │   │               ├── 15
            │       │   │               ╰── Char
            │       │   ├── If
            │       │   │   ├── Condition
            │       │   │   │   ╰── <496>  [!=]
            │       │   │   │       ├── <493> SizeOfExpr
            │       │   │   │       │   ╰── <492> Var [x]
            │       │   │   │       ╰── <495> Constant Int [8]
            │       │   │   ╰── Then
            │       │   │       ╰── Block
            │       │   │           ╰── Return
            │       │   │               ╰── <497> Constant Int [0]
            │       │   ├── Empty
            │       │   ╰── If
            │       │       ├── Condition
            │       │       │   ╰── <509>  [!=]
            │       │       │       ├── <506> SizeOfType
            │       │       │       │   ╰── Struct [s]
            │       │       │       ╰── <508> Constant Int [15]
            │       │       ╰── Then
            │       │           ╰── Block
            │       │               ╰── Return
            │       │                   ╰── <510> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <523>  [!=]
            │       │   │       ├── <520> SizeOfType
            │       │   │       │   ╰── Struct [s]
            │       │   │       ╰── <522> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <524> Constant Int [0]
            │       ╰── Return
            │           ╰── <529> Constant Int [1]
            ├── Function [test_derived_types]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <541> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_arr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Array
            │       │   │           ├── 3
            │       │   │           ╰── Pointer
            │       │   │               ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <560> FunctionCall [calloc]
            │       │           ├── <555> Constant Int [3]
            │       │           ╰── <559> SizeOfType
            │       │               ╰── Pointer
            │       │                   ╰── Void
            │       ├── Struct [s]
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── x
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── inner_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <573> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── inner_arr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Array
            │       │   │           ├── 3
            │       │   │           ╰── Pointer
            │       │   │               ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <592> FunctionCall [calloc]
            │       │           ├── <587> Constant Int [3]
            │       │           ╰── <591> SizeOfType
            │       │               ╰── Pointer
            │       │                   ╰── Void
            │       ├── <605> Assign [=]
            │       │   ├── <600> Subscript
            │       │   │   ├── <598> Subscript
            │       │   │   │   ├── <596> Var [outer_arr]
            │       │   │   │   ╰── <597> Constant Int [0]
            │       │   │   ╰── <599> Constant Int [0]
            │       │   ╰── <604> AddressOf
            │       │       ╰── <603> Var [outer_struct]
            │       ├── <617> Assign [=]
            │       │   ├── <612> Subscript
            │       │   │   ├── <610> Subscript
            │       │   │   │   ├── <608> Var [outer_arr]
            │       │   │   │   ╰── <609> Constant Int [0]
            │       │   │   ╰── <611> Constant Int [1]
            │       │   ╰── <616> AddressOf
            │       │       ╰── <615> Var [outer_struct]
            │       ├── <629> Assign [=]
            │       │   ├── <624> Subscript
            │       │   │   ├── <622> Subscript
            │       │   │   │   ├── <620> Var [inner_arr]
            │       │   │   │   ╰── <621> Constant Int [0]
            │       │   │   ╰── <623> Constant Int [0]
            │       │   ╰── <628> AddressOf
            │       │       ╰── <627> Var [inner_struct]
            │       ├── <641> Assign [=]
            │       │   ├── <636> Subscript
            │       │   │   ├── <634> Subscript
            │       │   │   │   ├── <632> Var [inner_arr]
            │       │   │   │   ╰── <633> Constant Int [0]
            │       │   │   ╰── <635> Constant Int [2]
            │       │   ╰── <640> AddressOf
            │       │       ╰── <639> Var [inner_struct]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <653>  [!=]
            │       │   │       ├── <650> Arrow
            │       │   │       │   ├── <648> Subscript
            │       │   │       │   │   ├── <646> Subscript
            │       │   │       │   │   │   ├── <644> Var [outer_arr]
            │       │   │       │   │   │   ╰── <645> Constant Int [0]
            │       │   │       │   │   ╰── <647> Constant Int [0]
            │       │   │       │   ╰── a
            │       │   │       ╰── <652> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <654> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <669>  [!=]
            │       │   │       ├── <666> Arrow
            │       │   │       │   ├── <664> Subscript
            │       │   │       │   │   ├── <662> Subscript
            │       │   │       │   │   │   ├── <660> Var [inner_arr]
            │       │   │       │   │   │   ╰── <661> Constant Int [0]
            │       │   │       │   │   ╰── <663> Constant Int [0]
            │       │   │       │   ╰── x
            │       │   │       ╰── <668> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <670> Constant Int [0]
            │       ╰── Return
            │           ╰── <675> Constant Int [1]
            ├── Function [test_contentless_tag_noop]
            │   ╰── Body
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── Struct [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── var
            │       │   ╰── Type
            │       │       ╰── Struct [s]
            │       ├── <706> Assign [=]
            │       │   ├── <703> Dot
            │       │   │   ├── <701> Var [var]
            │       │   │   ╰── x
            │       │   ╰── <705> Constant Int [10]
            │       ├── <714> Assign [=]
            │       │   ├── <711> Dot
            │       │   │   ├── <709> Var [var]
            │       │   │   ╰── y
            │       │   ╰── <713> Constant Int [11]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <731>  [||]
            │       │   │       ├── <722>  [!=]
            │       │   │       │   ├── <719> Dot
            │       │   │       │   │   ├── <717> Var [var]
            │       │   │       │   │   ╰── x
            │       │   │       │   ╰── <721> Constant Int [10]
            │       │   │       ╰── <730>  [!=]
            │       │   │           ├── <727> Dot
            │       │   │           │   ├── <725> Var [var]
            │       │   │           │   ╰── y
            │       │   │           ╰── <729> Constant Int [11]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <732> Constant Int [0]
            │       ╰── Return
            │           ╰── <737> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <748> Unary [!]
                    │   │       ╰── <747> FunctionCall [test_var_declaration]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <749> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <757> Unary [!]
                    │   │       ╰── <756> FunctionCall [test_member_declaration]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <758> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <766> Unary [!]
                    │   │       ╰── <765> FunctionCall [test_function_declaration]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <767> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <775> Unary [!]
                    │   │       ╰── <774> FunctionCall [test_for_loop]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <776> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <784> Unary [!]
                    │   │       ╰── <783> FunctionCall [test_cast]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <785> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <793> Unary [!]
                    │   │       ╰── <792> FunctionCall [test_sizeof]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <794> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <802> Unary [!]
                    │   │       ╰── <801> FunctionCall [test_derived_types]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <803> Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <811> Unary [!]
                    │   │       ╰── <810> FunctionCall [test_contentless_tag_noop]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <812> Constant Int [8]
                    ╰── Return
                        ╰── <817> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_size_and_offset_calculations_member_comparisons() {
    let src = r#"
        struct three_ints {
            int a;
            int b;
            int c;
        };
        void* calloc(unsigned long nmem, unsigned long size);
        int main(void) {
            struct three_ints* my_struct = calloc(1, sizeof(struct three_ints));
            if ((void*)my_struct != &my_struct->a) {
                return 1;
            }
            if (!((int *)my_struct <= &my_struct->a)) {
                return 2;
            }
            if (&my_struct->c <= &my_struct->a) {
                return 3;
            }
            if (&my_struct->b > &my_struct->c) {
                return 4;
            }
            if (!(&my_struct->b > &my_struct->a)) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [three_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Int
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmem
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [three_ints]
                    │   ╰── Initializer
                    │       ╰── <42> FunctionCall [calloc]
                    │           ├── <37> Constant Int [1]
                    │           ╰── <41> SizeOfType
                    │               ╰── Struct [three_ints]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <57>  [!=]
                    │   │       ├── <50> Cast
                    │   │       │   ├── Target
                    │   │       │   │   ╰── Pointer
                    │   │       │   │       ╰── Void
                    │   │       │   ╰── Expression
                    │   │       │       ╰── <49> Var [my_struct]
                    │   │       ╰── <56> AddressOf
                    │   │           ╰── <55> Arrow
                    │   │               ├── <53> Var [my_struct]
                    │   │               ╰── a
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <58> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <78> Unary [!]
                    │   │       ╰── <77>  [<=]
                    │   │           ├── <69> Cast
                    │   │           │   ├── Target
                    │   │           │   │   ╰── Pointer
                    │   │           │   │       ╰── Int
                    │   │           │   ╰── Expression
                    │   │           │       ╰── <68> Var [my_struct]
                    │   │           ╰── <75> AddressOf
                    │   │               ╰── <74> Arrow
                    │   │                   ├── <72> Var [my_struct]
                    │   │                   ╰── a
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <79> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <95>  [<=]
                    │   │       ├── <88> AddressOf
                    │   │       │   ╰── <87> Arrow
                    │   │       │       ├── <85> Var [my_struct]
                    │   │       │       ╰── c
                    │   │       ╰── <94> AddressOf
                    │   │           ╰── <93> Arrow
                    │   │               ├── <91> Var [my_struct]
                    │   │               ╰── a
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <96> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <112>  [>]
                    │   │       ├── <105> AddressOf
                    │   │       │   ╰── <104> Arrow
                    │   │       │       ├── <102> Var [my_struct]
                    │   │       │       ╰── b
                    │   │       ╰── <111> AddressOf
                    │   │           ╰── <110> Arrow
                    │   │               ├── <108> Var [my_struct]
                    │   │               ╰── c
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <113> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <132> Unary [!]
                    │   │       ╰── <131>  [>]
                    │   │           ├── <123> AddressOf
                    │   │           │   ╰── <122> Arrow
                    │   │           │       ├── <120> Var [my_struct]
                    │   │           │       ╰── b
                    │   │           ╰── <129> AddressOf
                    │   │               ╰── <128> Arrow
                    │   │                   ├── <126> Var [my_struct]
                    │   │                   ╰── a
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <133> Constant Int [5]
                    ╰── Return
                        ╰── <138> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_size_and_offset_calculations_member_offsets() {
    let src = r#"
        struct eight_bytes {
            int i;
            char c;
        };
        struct two_bytes {
            char arr[2];
        };
        struct three_bytes {
            char arr[3];
        };
        struct sixteen_bytes {
            struct eight_bytes eight;
            struct two_bytes two;
            struct three_bytes three;
        };
        struct seven_bytes {
            struct two_bytes two;
            struct three_bytes three;
            struct two_bytes two2;
        };
        struct twentyfour_bytes {
            struct seven_bytes seven;
            struct sixteen_bytes sixteen;
        };
        struct twenty_bytes {
            struct sixteen_bytes sixteen;
            struct two_bytes two;
        };
        struct wonky {
            char arr[19];
        };
        struct internal_padding {
            char c;
            double d;
        };
        struct contains_struct_array {
            char c;
            struct eight_bytes struct_array[3];
        };
        
        void *malloc(unsigned long size);
        int test_eightbytes(void) {
            struct eight_bytes s;
            unsigned long start_addr = (unsigned long)&s;
            unsigned long i_addr = (unsigned long)&s.i;
            unsigned long c_addr = (unsigned long)&s.c;
            unsigned long end_addr = (unsigned long)(&s + 1);
            if (start_addr % 4 != 0) {
                return 0;
            }
            if (start_addr != i_addr) {
                return 0;
            }
            if (c_addr - start_addr != 4) {
                return 0;
            }
            if (end_addr - start_addr != 8) {
                return 0;
            }
            return 1;
        }
        int test_internal_padding(void) {
            struct internal_padding *s_ptr = malloc(sizeof(struct internal_padding));
            unsigned long start_addr = (unsigned long)s_ptr;
            unsigned long c_addr = (unsigned long)&s_ptr->c;
            unsigned long d_addr = (unsigned long)&s_ptr->d;
            unsigned long end_ptr = (unsigned long)(s_ptr + 1);
            if (start_addr % 8 != 0) {
                return 0;
            }
            if (start_addr != c_addr) {
                return 0;
            }
            if (d_addr - c_addr != 8) {
                return 0;
            }
            if (end_ptr - start_addr != 16) {
                return 0;
            }
            return 1;
        }
        int test_three_bytes(void) {
            static struct three_bytes s;
            unsigned long start_addr = (unsigned long)&s;
            unsigned long arr_addr = (unsigned long)&s.arr;
            unsigned long arr0_addr = (unsigned long)&s.arr[0];
            unsigned long arr1_addr = (unsigned long)&s.arr[1];
            unsigned long arr1_addr_alt = (unsigned long)(s.arr + 1);
            unsigned long arr2_addr = (unsigned long)&s.arr[2];
            unsigned long arr_end = (unsigned long)(&s.arr + 1);
            unsigned long struct_end = (unsigned long)(&s + 1);
            if (start_addr != arr_addr) {
                return 0;
            }
            if (start_addr != arr0_addr) {
                return 0;
            }
            if (arr1_addr - start_addr != 1) {
                return 0;
            }
            if (arr1_addr != arr1_addr_alt) {
                return 0;
            }
            if (arr2_addr - start_addr != 2) {
                return 0;
            }
            if (arr_end - start_addr != 3) {
                return 0;
            }
            if (struct_end - start_addr != 3) {
                return 0;
            }
            return 1;
        }
        int test_sixteen_bytes(void) {
            static struct sixteen_bytes s;
            struct sixteen_bytes *s_ptr = &s;
            unsigned long start_addr = (unsigned long)s_ptr;
            unsigned long eight_addr = (unsigned long)&s_ptr->eight;
            unsigned long eight_i_addr = (unsigned long)&s_ptr->eight.i;
            unsigned long eight_c_addr = (unsigned long)&s_ptr->eight.c;
            unsigned long two = (unsigned long)&s_ptr->two;
            unsigned long two_arr = (unsigned long)s_ptr->two.arr;
            unsigned long two_arr0 = (unsigned long)&s_ptr->two.arr[0];
            unsigned long two_arr1 = (unsigned long)&s_ptr->two.arr[1];
            unsigned long two_arr_end = (unsigned long)(&s_ptr->two.arr + 1);
            unsigned long two_end = (unsigned long)(&s_ptr->two + 1);
            unsigned long three = (unsigned long)&s_ptr->three;
            unsigned long three_end = (unsigned long)(&s_ptr->three + 1);
            unsigned long struct_end = (unsigned long)(s_ptr + 1);
            if (start_addr % 4 != 0) {
                return 0;
            }
            if (start_addr != eight_addr) {
                return 0;
            }
            if (start_addr != eight_i_addr) {
                return 0;
            }
            if (eight_c_addr - start_addr != 4) {
                return 0;
            }
            if (two - start_addr != 8) {
                return 0;
            }
            if (two_arr - start_addr != 8) {
                return 0;
            }
            if (two_arr0 - start_addr != 8) {
                return 0;
            }
            if (two_arr1 - start_addr != 9) {
                return 0;
            }
            if (two_arr_end - start_addr != 10) {
                return 0;
            }
            if (two_arr_end != two_end) {
                return 0;
            }
            if (three - start_addr != 10) {
                return 0;
            }
            if (three_end - start_addr != 13) {
                return 0;
            }
            if (struct_end - start_addr != 16) {
                return 0;
            }
            unsigned long eight_i_addr_alt = (unsigned long)&s.eight.i;
            unsigned long eight_c_addr_alt = (unsigned long)&s.eight.c;
            unsigned long two_arr_alt = (unsigned long)s.two.arr;
            unsigned long two_arr1_alt = (unsigned long)&s.two.arr[1];
            unsigned long three_alt = (unsigned long)&s.three;
            if (eight_i_addr_alt != eight_i_addr) {
                return 0;
            }
            if (eight_c_addr_alt != eight_c_addr) {
                return 0;
            }
            if (two_arr_alt != two_arr) {
                return 0;
            }
            if (two_arr1_alt != two_arr1) {
                return 0;
            }
            if (three_alt != three) {
                return 0;
            }
            return 1;
        }
        int test_wonky_array(void) {
            struct wonky wonky_array[5];
            unsigned long array_start = (unsigned long)wonky_array;
            unsigned long elem3 = (unsigned long)(wonky_array + 3);
            unsigned long elem3_arr = (unsigned long)wonky_array[3].arr;
            unsigned long elem2_arr2 = (unsigned long)&wonky_array[2].arr[2];
            unsigned long elem2_arr_end = (unsigned long)(wonky_array[2].arr + 19);
            unsigned long elem4_arr_end = (unsigned long)(wonky_array[4].arr + 19);
            unsigned long array_end = (unsigned long)(wonky_array + 5);
            if (elem3 - array_start != 19 * 3) {
                return 0;
            }
            if (elem3_arr != elem3) {
                return 0;
            }
            if (elem2_arr2 - array_start != 19 * 2 + 2) {
                return 0;
            }
            if (elem2_arr_end != elem3) {
                return 0;
            }
            if (elem4_arr_end != array_end) {
                return 0;
            }
            return 1;
        }
        int test_contains_struct_array_array(void) {
            struct contains_struct_array arr[3];
            unsigned long array_start = (unsigned long)arr;
            unsigned long first_scalar_elem = (unsigned long)(&arr[0].c);
            unsigned long outer0_inner0_i = (unsigned long)(&arr[0].struct_array->i);
            unsigned long outer0_inner0_c = (unsigned long)(&arr->struct_array->c);
            unsigned long outer0_end = (unsigned long)(arr->struct_array + 3);
            unsigned long outer1 = (unsigned long)(&arr[1]);
            unsigned long outer1_arr = (unsigned long)(arr[1].struct_array);
            unsigned long outer1_inner1_i =
                (unsigned long)&(((arr + 1)->struct_array + 1)->i);
            unsigned long outer2_inner0_c =
                (unsigned long)&((arr + 2)->struct_array->c);
            if (array_start % 4 != 0) {
                return 0;
            }
            if (first_scalar_elem != array_start) {
                return 0;
            }
            if (outer0_inner0_i - array_start != 4) {
                return 0;
            }
            if (outer0_inner0_c - array_start != 8) {
                return 0;
            }
            if (outer0_end != outer1) {
                return 0;
            }
            if (outer1_arr - array_start != 32) {
                return 0;
            }
            if (outer1_arr - outer1 != 4) {
                return 0;
            }
            if (outer1_inner1_i - array_start != 40) {
                return 0;
            }
            if (outer2_inner0_c - array_start != 64) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_eightbytes()) {
                return 1;
            }
            if (!test_internal_padding()) {
                return 2;
            }
            if (!test_three_bytes()) {
                return 3;
            }
            if (!test_sixteen_bytes()) {
                return 4;
            }
            if (!test_wonky_array()) {
                return 5;
            }
            if (!test_contains_struct_array_array()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Char
            ├── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [sixteen_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── eight
            │   │   ╰── Type
            │   │       ╰── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three
            │       ╰── Type
            │           ╰── Struct [three_bytes]
            ├── Struct [seven_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three
            │   │   ╰── Type
            │   │       ╰── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two2
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [twentyfour_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── seven
            │   │   ╰── Type
            │   │       ╰── Struct [seven_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sixteen
            │       ╰── Type
            │           ╰── Struct [sixteen_bytes]
            ├── Struct [twenty_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── sixteen
            │   │   ╰── Type
            │   │       ╰── Struct [sixteen_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [wonky]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Char
            ├── Struct [internal_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [contains_struct_array]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── struct_array
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [eight_bytes]
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [test_eightbytes]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ╰── Type
            │       │       ╰── Struct [eight_bytes]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── start_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <142> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <141> AddressOf
            │       │                   ╰── <140> Var [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <155> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <154> AddressOf
            │       │                   ╰── <153> Dot
            │       │                       ├── <151> Var [s]
            │       │                       ╰── i
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <168> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <167> AddressOf
            │       │                   ╰── <166> Dot
            │       │                       ├── <164> Var [s]
            │       │                       ╰── c
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── end_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <183> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <182>  [+]
            │       │                   ├── <178> AddressOf
            │       │                   │   ╰── <177> Var [s]
            │       │                   ╰── <180> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <193>  [!=]
            │       │   │       ├── <190>  [%]
            │       │   │       │   ├── <187> Var [start_addr]
            │       │   │       │   ╰── <189> Constant Int [4]
            │       │   │       ╰── <192> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <194> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <204>  [!=]
            │       │   │       ├── <200> Var [start_addr]
            │       │   │       ╰── <203> Var [i_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <205> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <218>  [!=]
            │       │   │       ├── <215>  [-]
            │       │   │       │   ├── <211> Var [c_addr]
            │       │   │       │   ╰── <214> Var [start_addr]
            │       │   │       ╰── <217> Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <219> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <232>  [!=]
            │       │   │       ├── <229>  [-]
            │       │   │       │   ├── <225> Var [end_addr]
            │       │   │       │   ╰── <228> Var [start_addr]
            │       │   │       ╰── <231> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <233> Constant Int [0]
            │       ╰── Return
            │           ╰── <238> Constant Int [1]
            ├── Function [test_internal_padding]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [internal_padding]
            │       │   ╰── Initializer
            │       │       ╰── <256> FunctionCall [malloc]
            │       │           ╰── <255> SizeOfType
            │       │               ╰── Struct [internal_padding]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── start_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <266> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <265> Var [s_ptr]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <279> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <278> AddressOf
            │       │                   ╰── <277> Arrow
            │       │                       ├── <275> Var [s_ptr]
            │       │                       ╰── c
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <292> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <291> AddressOf
            │       │                   ╰── <290> Arrow
            │       │                       ├── <288> Var [s_ptr]
            │       │                       ╰── d
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── end_ptr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <306> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <305>  [+]
            │       │                   ├── <301> Var [s_ptr]
            │       │                   ╰── <303> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <316>  [!=]
            │       │   │       ├── <313>  [%]
            │       │   │       │   ├── <310> Var [start_addr]
            │       │   │       │   ╰── <312> Constant Int [8]
            │       │   │       ╰── <315> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <317> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <327>  [!=]
            │       │   │       ├── <323> Var [start_addr]
            │       │   │       ╰── <326> Var [c_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <328> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <341>  [!=]
            │       │   │       ├── <338>  [-]
            │       │   │       │   ├── <334> Var [d_addr]
            │       │   │       │   ╰── <337> Var [c_addr]
            │       │   │       ╰── <340> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <342> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <355>  [!=]
            │       │   │       ├── <352>  [-]
            │       │   │       │   ├── <348> Var [end_ptr]
            │       │   │       │   ╰── <351> Var [start_addr]
            │       │   │       ╰── <354> Constant Int [16]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <356> Constant Int [0]
            │       ╰── Return
            │           ╰── <361> Constant Int [1]
            ├── Function [test_three_bytes]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ├── Type
            │       │   │   ╰── Struct [three_bytes]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── start_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <383> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <382> AddressOf
            │       │                   ╰── <381> Var [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <396> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <395> AddressOf
            │       │                   ╰── <394> Dot
            │       │                       ├── <392> Var [s]
            │       │                       ╰── arr
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr0_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <411> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <410> AddressOf
            │       │                   ╰── <409> Subscript
            │       │                       ├── <407> Dot
            │       │                       │   ├── <405> Var [s]
            │       │                       │   ╰── arr
            │       │                       ╰── <408> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr1_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <426> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <425> AddressOf
            │       │                   ╰── <424> Subscript
            │       │                       ├── <422> Dot
            │       │                       │   ├── <420> Var [s]
            │       │                       │   ╰── arr
            │       │                       ╰── <423> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr1_addr_alt
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <442> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <441>  [+]
            │       │                   ├── <437> Dot
            │       │                   │   ├── <435> Var [s]
            │       │                   │   ╰── arr
            │       │                   ╰── <439> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr2_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <457> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <456> AddressOf
            │       │                   ╰── <455> Subscript
            │       │                       ├── <453> Dot
            │       │                       │   ├── <451> Var [s]
            │       │                       │   ╰── arr
            │       │                       ╰── <454> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <474> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <473>  [+]
            │       │                   ├── <469> AddressOf
            │       │                   │   ╰── <468> Dot
            │       │                   │       ├── <466> Var [s]
            │       │                   │       ╰── arr
            │       │                   ╰── <471> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── struct_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <489> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <488>  [+]
            │       │                   ├── <484> AddressOf
            │       │                   │   ╰── <483> Var [s]
            │       │                   ╰── <486> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <497>  [!=]
            │       │   │       ├── <493> Var [start_addr]
            │       │   │       ╰── <496> Var [arr_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <498> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <508>  [!=]
            │       │   │       ├── <504> Var [start_addr]
            │       │   │       ╰── <507> Var [arr0_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <509> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <522>  [!=]
            │       │   │       ├── <519>  [-]
            │       │   │       │   ├── <515> Var [arr1_addr]
            │       │   │       │   ╰── <518> Var [start_addr]
            │       │   │       ╰── <521> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <523> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <533>  [!=]
            │       │   │       ├── <529> Var [arr1_addr]
            │       │   │       ╰── <532> Var [arr1_addr_alt]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <534> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <547>  [!=]
            │       │   │       ├── <544>  [-]
            │       │   │       │   ├── <540> Var [arr2_addr]
            │       │   │       │   ╰── <543> Var [start_addr]
            │       │   │       ╰── <546> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <548> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <561>  [!=]
            │       │   │       ├── <558>  [-]
            │       │   │       │   ├── <554> Var [arr_end]
            │       │   │       │   ╰── <557> Var [start_addr]
            │       │   │       ╰── <560> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <562> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <575>  [!=]
            │       │   │       ├── <572>  [-]
            │       │   │       │   ├── <568> Var [struct_end]
            │       │   │       │   ╰── <571> Var [start_addr]
            │       │   │       ╰── <574> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <576> Constant Int [0]
            │       ╰── Return
            │           ╰── <581> Constant Int [1]
            ├── Function [test_sixteen_bytes]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ├── Type
            │       │   │   ╰── Struct [sixteen_bytes]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [sixteen_bytes]
            │       │   ╰── Initializer
            │       │       ╰── <602> AddressOf
            │       │           ╰── <601> Var [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── start_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <612> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <611> Var [s_ptr]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <625> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <624> AddressOf
            │       │                   ╰── <623> Arrow
            │       │                       ├── <621> Var [s_ptr]
            │       │                       ╰── eight
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight_i_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <640> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <639> AddressOf
            │       │                   ╰── <638> Dot
            │       │                       ├── <636> Arrow
            │       │                       │   ├── <634> Var [s_ptr]
            │       │                       │   ╰── eight
            │       │                       ╰── i
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight_c_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <655> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <654> AddressOf
            │       │                   ╰── <653> Dot
            │       │                       ├── <651> Arrow
            │       │                       │   ├── <649> Var [s_ptr]
            │       │                       │   ╰── eight
            │       │                       ╰── c
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <668> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <667> AddressOf
            │       │                   ╰── <666> Arrow
            │       │                       ├── <664> Var [s_ptr]
            │       │                       ╰── two
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_arr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <682> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <681> Dot
            │       │                   ├── <679> Arrow
            │       │                   │   ├── <677> Var [s_ptr]
            │       │                   │   ╰── two
            │       │                   ╰── arr
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_arr0
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <699> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <698> AddressOf
            │       │                   ╰── <697> Subscript
            │       │                       ├── <695> Dot
            │       │                       │   ├── <693> Arrow
            │       │                       │   │   ├── <691> Var [s_ptr]
            │       │                       │   │   ╰── two
            │       │                       │   ╰── arr
            │       │                       ╰── <696> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_arr1
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <716> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <715> AddressOf
            │       │                   ╰── <714> Subscript
            │       │                       ├── <712> Dot
            │       │                       │   ├── <710> Arrow
            │       │                       │   │   ├── <708> Var [s_ptr]
            │       │                       │   │   ╰── two
            │       │                       │   ╰── arr
            │       │                       ╰── <713> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_arr_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <735> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <734>  [+]
            │       │                   ├── <730> AddressOf
            │       │                   │   ╰── <729> Dot
            │       │                   │       ├── <727> Arrow
            │       │                   │       │   ├── <725> Var [s_ptr]
            │       │                   │       │   ╰── two
            │       │                   │       ╰── arr
            │       │                   ╰── <732> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <752> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <751>  [+]
            │       │                   ├── <747> AddressOf
            │       │                   │   ╰── <746> Arrow
            │       │                   │       ├── <744> Var [s_ptr]
            │       │                   │       ╰── two
            │       │                   ╰── <749> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── three
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <765> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <764> AddressOf
            │       │                   ╰── <763> Arrow
            │       │                       ├── <761> Var [s_ptr]
            │       │                       ╰── three
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── three_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <782> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <781>  [+]
            │       │                   ├── <777> AddressOf
            │       │                   │   ╰── <776> Arrow
            │       │                   │       ├── <774> Var [s_ptr]
            │       │                   │       ╰── three
            │       │                   ╰── <779> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── struct_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <796> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <795>  [+]
            │       │                   ├── <791> Var [s_ptr]
            │       │                   ╰── <793> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <806>  [!=]
            │       │   │       ├── <803>  [%]
            │       │   │       │   ├── <800> Var [start_addr]
            │       │   │       │   ╰── <802> Constant Int [4]
            │       │   │       ╰── <805> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <807> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <817>  [!=]
            │       │   │       ├── <813> Var [start_addr]
            │       │   │       ╰── <816> Var [eight_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <818> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <828>  [!=]
            │       │   │       ├── <824> Var [start_addr]
            │       │   │       ╰── <827> Var [eight_i_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <829> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <842>  [!=]
            │       │   │       ├── <839>  [-]
            │       │   │       │   ├── <835> Var [eight_c_addr]
            │       │   │       │   ╰── <838> Var [start_addr]
            │       │   │       ╰── <841> Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <843> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <856>  [!=]
            │       │   │       ├── <853>  [-]
            │       │   │       │   ├── <849> Var [two]
            │       │   │       │   ╰── <852> Var [start_addr]
            │       │   │       ╰── <855> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <857> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <870>  [!=]
            │       │   │       ├── <867>  [-]
            │       │   │       │   ├── <863> Var [two_arr]
            │       │   │       │   ╰── <866> Var [start_addr]
            │       │   │       ╰── <869> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <871> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <884>  [!=]
            │       │   │       ├── <881>  [-]
            │       │   │       │   ├── <877> Var [two_arr0]
            │       │   │       │   ╰── <880> Var [start_addr]
            │       │   │       ╰── <883> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <885> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <898>  [!=]
            │       │   │       ├── <895>  [-]
            │       │   │       │   ├── <891> Var [two_arr1]
            │       │   │       │   ╰── <894> Var [start_addr]
            │       │   │       ╰── <897> Constant Int [9]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <899> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <912>  [!=]
            │       │   │       ├── <909>  [-]
            │       │   │       │   ├── <905> Var [two_arr_end]
            │       │   │       │   ╰── <908> Var [start_addr]
            │       │   │       ╰── <911> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <913> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <923>  [!=]
            │       │   │       ├── <919> Var [two_arr_end]
            │       │   │       ╰── <922> Var [two_end]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <924> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <937>  [!=]
            │       │   │       ├── <934>  [-]
            │       │   │       │   ├── <930> Var [three]
            │       │   │       │   ╰── <933> Var [start_addr]
            │       │   │       ╰── <936> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <938> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <951>  [!=]
            │       │   │       ├── <948>  [-]
            │       │   │       │   ├── <944> Var [three_end]
            │       │   │       │   ╰── <947> Var [start_addr]
            │       │   │       ╰── <950> Constant Int [13]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <952> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <965>  [!=]
            │       │   │       ├── <962>  [-]
            │       │   │       │   ├── <958> Var [struct_end]
            │       │   │       │   ╰── <961> Var [start_addr]
            │       │   │       ╰── <964> Constant Int [16]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <966> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight_i_addr_alt
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <983> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <982> AddressOf
            │       │                   ╰── <981> Dot
            │       │                       ├── <979> Dot
            │       │                       │   ├── <977> Var [s]
            │       │                       │   ╰── eight
            │       │                       ╰── i
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight_c_addr_alt
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <998> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <997> AddressOf
            │       │                   ╰── <996> Dot
            │       │                       ├── <994> Dot
            │       │                       │   ├── <992> Var [s]
            │       │                       │   ╰── eight
            │       │                       ╰── c
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_arr_alt
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1012> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1011> Dot
            │       │                   ├── <1009> Dot
            │       │                   │   ├── <1007> Var [s]
            │       │                   │   ╰── two
            │       │                   ╰── arr
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_arr1_alt
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1029> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1028> AddressOf
            │       │                   ╰── <1027> Subscript
            │       │                       ├── <1025> Dot
            │       │                       │   ├── <1023> Dot
            │       │                       │   │   ├── <1021> Var [s]
            │       │                       │   │   ╰── two
            │       │                       │   ╰── arr
            │       │                       ╰── <1026> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── three_alt
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1042> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1041> AddressOf
            │       │                   ╰── <1040> Dot
            │       │                       ├── <1038> Var [s]
            │       │                       ╰── three
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1050>  [!=]
            │       │   │       ├── <1046> Var [eight_i_addr_alt]
            │       │   │       ╰── <1049> Var [eight_i_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1051> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1061>  [!=]
            │       │   │       ├── <1057> Var [eight_c_addr_alt]
            │       │   │       ╰── <1060> Var [eight_c_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1062> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1072>  [!=]
            │       │   │       ├── <1068> Var [two_arr_alt]
            │       │   │       ╰── <1071> Var [two_arr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1073> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1083>  [!=]
            │       │   │       ├── <1079> Var [two_arr1_alt]
            │       │   │       ╰── <1082> Var [two_arr1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1084> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1094>  [!=]
            │       │   │       ├── <1090> Var [three_alt]
            │       │   │       ╰── <1093> Var [three]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1095> Constant Int [0]
            │       ╰── Return
            │           ╰── <1100> Constant Int [1]
            ├── Function [test_wonky_array]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── wonky_array
            │       │   ╰── Type
            │       │       ╰── Array
            │       │           ├── 5
            │       │           ╰── Struct [wonky]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── array_start
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1122> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1121> Var [wonky_array]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem3
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1136> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1135>  [+]
            │       │                   ├── <1131> Var [wonky_array]
            │       │                   ╰── <1133> Constant Int [3]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem3_arr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1150> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1149> Dot
            │       │                   ├── <1147> Subscript
            │       │                   │   ├── <1145> Var [wonky_array]
            │       │                   │   ╰── <1146> Constant Int [3]
            │       │                   ╰── arr
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem2_arr2
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1167> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1166> AddressOf
            │       │                   ╰── <1165> Subscript
            │       │                       ├── <1163> Dot
            │       │                       │   ├── <1161> Subscript
            │       │                       │   │   ├── <1159> Var [wonky_array]
            │       │                       │   │   ╰── <1160> Constant Int [2]
            │       │                       │   ╰── arr
            │       │                       ╰── <1164> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem2_arr_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1185> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1184>  [+]
            │       │                   ├── <1180> Dot
            │       │                   │   ├── <1178> Subscript
            │       │                   │   │   ├── <1176> Var [wonky_array]
            │       │                   │   │   ╰── <1177> Constant Int [2]
            │       │                   │   ╰── arr
            │       │                   ╰── <1182> Constant Int [19]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem4_arr_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1203> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1202>  [+]
            │       │                   ├── <1198> Dot
            │       │                   │   ├── <1196> Subscript
            │       │                   │   │   ├── <1194> Var [wonky_array]
            │       │                   │   │   ╰── <1195> Constant Int [4]
            │       │                   │   ╰── arr
            │       │                   ╰── <1200> Constant Int [19]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── array_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1217> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1216>  [+]
            │       │                   ├── <1212> Var [wonky_array]
            │       │                   ╰── <1214> Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1231>  [!=]
            │       │   │       ├── <1225>  [-]
            │       │   │       │   ├── <1221> Var [elem3]
            │       │   │       │   ╰── <1224> Var [array_start]
            │       │   │       ╰── <1230>  [*]
            │       │   │           ├── <1227> Constant Int [19]
            │       │   │           ╰── <1229> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1232> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1242>  [!=]
            │       │   │       ├── <1238> Var [elem3_arr]
            │       │   │       ╰── <1241> Var [elem3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1243> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1262>  [!=]
            │       │   │       ├── <1253>  [-]
            │       │   │       │   ├── <1249> Var [elem2_arr2]
            │       │   │       │   ╰── <1252> Var [array_start]
            │       │   │       ╰── <1261>  [+]
            │       │   │           ├── <1258>  [*]
            │       │   │           │   ├── <1255> Constant Int [19]
            │       │   │           │   ╰── <1257> Constant Int [2]
            │       │   │           ╰── <1260> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1263> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1273>  [!=]
            │       │   │       ├── <1269> Var [elem2_arr_end]
            │       │   │       ╰── <1272> Var [elem3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1274> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1284>  [!=]
            │       │   │       ├── <1280> Var [elem4_arr_end]
            │       │   │       ╰── <1283> Var [array_end]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1285> Constant Int [0]
            │       ╰── Return
            │           ╰── <1290> Constant Int [1]
            ├── Function [test_contains_struct_array_array]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ╰── Type
            │       │       ╰── Array
            │       │           ├── 3
            │       │           ╰── Struct [contains_struct_array]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── array_start
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1312> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1311> Var [arr]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── first_scalar_elem
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1328> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1327> AddressOf
            │       │                   ╰── <1325> Dot
            │       │                       ├── <1323> Subscript
            │       │                       │   ├── <1321> Var [arr]
            │       │                       │   ╰── <1322> Constant Int [0]
            │       │                       ╰── c
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer0_inner0_i
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1346> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1345> AddressOf
            │       │                   ╰── <1343> Arrow
            │       │                       ├── <1341> Dot
            │       │                       │   ├── <1339> Subscript
            │       │                       │   │   ├── <1337> Var [arr]
            │       │                       │   │   ╰── <1338> Constant Int [0]
            │       │                       │   ╰── struct_array
            │       │                       ╰── i
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer0_inner0_c
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1362> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1361> AddressOf
            │       │                   ╰── <1359> Arrow
            │       │                       ├── <1357> Arrow
            │       │                       │   ├── <1355> Var [arr]
            │       │                       │   ╰── struct_array
            │       │                       ╰── c
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer0_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1378> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1377>  [+]
            │       │                   ├── <1373> Arrow
            │       │                   │   ├── <1371> Var [arr]
            │       │                   │   ╰── struct_array
            │       │                   ╰── <1375> Constant Int [3]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer1
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1392> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1391> AddressOf
            │       │                   ╰── <1389> Subscript
            │       │                       ├── <1387> Var [arr]
            │       │                       ╰── <1388> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer1_arr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1407> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1406> Dot
            │       │                   ├── <1403> Subscript
            │       │                   │   ├── <1401> Var [arr]
            │       │                   │   ╰── <1402> Constant Int [1]
            │       │                   ╰── struct_array
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer1_inner1_i
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1431> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1430> AddressOf
            │       │                   ╰── <1429> Arrow
            │       │                       ├── <1426>  [+]
            │       │                       │   ├── <1422> Arrow
            │       │                       │   │   ├── <1420>  [+]
            │       │                       │   │   │   ├── <1416> Var [arr]
            │       │                       │   │   │   ╰── <1418> Constant Int [1]
            │       │                       │   │   ╰── struct_array
            │       │                       │   ╰── <1424> Constant Int [1]
            │       │                       ╰── i
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer2_inner0_c
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1451> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1450> AddressOf
            │       │                   ╰── <1449> Arrow
            │       │                       ├── <1446> Arrow
            │       │                       │   ├── <1444>  [+]
            │       │                       │   │   ├── <1440> Var [arr]
            │       │                       │   │   ╰── <1442> Constant Int [2]
            │       │                       │   ╰── struct_array
            │       │                       ╰── c
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1461>  [!=]
            │       │   │       ├── <1458>  [%]
            │       │   │       │   ├── <1455> Var [array_start]
            │       │   │       │   ╰── <1457> Constant Int [4]
            │       │   │       ╰── <1460> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1462> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1472>  [!=]
            │       │   │       ├── <1468> Var [first_scalar_elem]
            │       │   │       ╰── <1471> Var [array_start]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1473> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1486>  [!=]
            │       │   │       ├── <1483>  [-]
            │       │   │       │   ├── <1479> Var [outer0_inner0_i]
            │       │   │       │   ╰── <1482> Var [array_start]
            │       │   │       ╰── <1485> Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1487> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1500>  [!=]
            │       │   │       ├── <1497>  [-]
            │       │   │       │   ├── <1493> Var [outer0_inner0_c]
            │       │   │       │   ╰── <1496> Var [array_start]
            │       │   │       ╰── <1499> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1501> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1511>  [!=]
            │       │   │       ├── <1507> Var [outer0_end]
            │       │   │       ╰── <1510> Var [outer1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1512> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1525>  [!=]
            │       │   │       ├── <1522>  [-]
            │       │   │       │   ├── <1518> Var [outer1_arr]
            │       │   │       │   ╰── <1521> Var [array_start]
            │       │   │       ╰── <1524> Constant Int [32]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1526> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1539>  [!=]
            │       │   │       ├── <1536>  [-]
            │       │   │       │   ├── <1532> Var [outer1_arr]
            │       │   │       │   ╰── <1535> Var [outer1]
            │       │   │       ╰── <1538> Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1540> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1553>  [!=]
            │       │   │       ├── <1550>  [-]
            │       │   │       │   ├── <1546> Var [outer1_inner1_i]
            │       │   │       │   ╰── <1549> Var [array_start]
            │       │   │       ╰── <1552> Constant Int [40]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1554> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1567>  [!=]
            │       │   │       ├── <1564>  [-]
            │       │   │       │   ├── <1560> Var [outer2_inner0_c]
            │       │   │       │   ╰── <1563> Var [array_start]
            │       │   │       ╰── <1566> Constant Int [64]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1568> Constant Int [0]
            │       ╰── Return
            │           ╰── <1573> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1584> Unary [!]
                    │   │       ╰── <1583> FunctionCall [test_eightbytes]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1585> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1593> Unary [!]
                    │   │       ╰── <1592> FunctionCall [test_internal_padding]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1594> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1602> Unary [!]
                    │   │       ╰── <1601> FunctionCall [test_three_bytes]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1603> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1611> Unary [!]
                    │   │       ╰── <1610> FunctionCall [test_sixteen_bytes]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1612> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1620> Unary [!]
                    │   │       ╰── <1619> FunctionCall [test_wonky_array]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1621> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1629> Unary [!]
                    │   │       ╰── <1628> FunctionCall [test_contains_struct_array_array]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1630> Constant Int [6]
                    ╰── Return
                        ╰── <1635> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_size_and_offset_calculations_sizeof_exps() {
    let src = r#"
        struct eight_bytes {
            int i;
            char c;
        };
        struct two_bytes {
            char arr[2];
        };
        struct three_bytes {
            char arr[3];
        };
        struct sixteen_bytes {
            struct eight_bytes eight;
            struct two_bytes two;
            struct three_bytes three;
        };
        struct seven_bytes {
            struct two_bytes two;
            struct three_bytes three;
            struct two_bytes two2;
        };
        struct twentyfour_bytes {
            struct seven_bytes seven;
            struct sixteen_bytes sixteen;
        };
        struct twenty_bytes {
            struct sixteen_bytes sixteen;
            struct two_bytes two;
        };
        struct wonky {
            char arr[19];
        };
        struct internal_padding {
            char c;
            double d;
        };
        struct contains_struct_array {
            char c;
            struct eight_bytes struct_array[3];
        };
        
        struct twenty_bytes *get_twentybyte_ptr(void) {
            return 0;
        }
        int main(void) {
            struct contains_struct_array arr_struct;
            if (sizeof arr_struct.struct_array[2] !=
                8) {
                return 1;
            }
            static struct twentyfour_bytes twentyfour;
            if (sizeof twentyfour.seven.two2 != 2) {
                return 2;
            }
            if (sizeof get_twentybyte_ptr()->sixteen.three != 3) {
                return 3;
            }
            if (sizeof get_twentybyte_ptr()->sixteen != 16) {
                return 4;
            }
            if (sizeof twentyfour.seven != 7) {
                return 5;
            }
            if (sizeof twentyfour != 24) {
                return 6;
            }
            if (sizeof *get_twentybyte_ptr() != 20) {
                return 7;
            }
            if (sizeof *((struct wonky *)0) != 19) {
                return 8;
            }
            extern struct internal_padding struct_array[4];
            if (sizeof struct_array[0] != 16) {
                return 9;
            }
            if (sizeof arr_struct != 28) {
                return 10;
            }
            if (sizeof struct_array != 64) {
                return 11;
            }
            if (sizeof arr_struct.struct_array != 24) {
                return 12;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Char
            ├── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [sixteen_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── eight
            │   │   ╰── Type
            │   │       ╰── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three
            │       ╰── Type
            │           ╰── Struct [three_bytes]
            ├── Struct [seven_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three
            │   │   ╰── Type
            │   │       ╰── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two2
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [twentyfour_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── seven
            │   │   ╰── Type
            │   │       ╰── Struct [seven_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sixteen
            │       ╰── Type
            │           ╰── Struct [sixteen_bytes]
            ├── Struct [twenty_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── sixteen
            │   │   ╰── Type
            │   │       ╰── Struct [sixteen_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [wonky]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Char
            ├── Struct [internal_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [contains_struct_array]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── struct_array
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [eight_bytes]
            ├── Function [get_twentybyte_ptr]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <122> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr_struct
                    │   ╰── Type
                    │       ╰── Struct [contains_struct_array]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <144>  [!=]
                    │   │       ├── <141> SizeOfExpr
                    │   │       │   ╰── <140> Subscript
                    │   │       │       ├── <138> Dot
                    │   │       │       │   ├── <136> Var [arr_struct]
                    │   │       │       │   ╰── struct_array
                    │   │       │       ╰── <139> Constant Int [2]
                    │   │       ╰── <143> Constant Int [8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <145> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── twentyfour
                    │   ├── Type
                    │   │   ╰── Struct [twentyfour_bytes]
                    │   ╰── Static
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <165>  [!=]
                    │   │       ├── <162> SizeOfExpr
                    │   │       │   ╰── <161> Dot
                    │   │       │       ├── <159> Dot
                    │   │       │       │   ├── <157> Var [twentyfour]
                    │   │       │       │   ╰── seven
                    │   │       │       ╰── two2
                    │   │       ╰── <164> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <166> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <180>  [!=]
                    │   │       ├── <177> SizeOfExpr
                    │   │       │   ╰── <176> Dot
                    │   │       │       ├── <174> Arrow
                    │   │       │       │   ├── <172> FunctionCall [get_twentybyte_ptr]
                    │   │       │       │   ╰── sixteen
                    │   │       │       ╰── three
                    │   │       ╰── <179> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <181> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <193>  [!=]
                    │   │       ├── <190> SizeOfExpr
                    │   │       │   ╰── <189> Arrow
                    │   │       │       ├── <187> FunctionCall [get_twentybyte_ptr]
                    │   │       │       ╰── sixteen
                    │   │       ╰── <192> Constant Int [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <194> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <206>  [!=]
                    │   │       ├── <203> SizeOfExpr
                    │   │       │   ╰── <202> Dot
                    │   │       │       ├── <200> Var [twentyfour]
                    │   │       │       ╰── seven
                    │   │       ╰── <205> Constant Int [7]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <207> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <217>  [!=]
                    │   │       ├── <214> SizeOfExpr
                    │   │       │   ╰── <213> Var [twentyfour]
                    │   │       ╰── <216> Constant Int [24]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <218> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <229>  [!=]
                    │   │       ├── <226> SizeOfExpr
                    │   │       │   ╰── <225> Dereference
                    │   │       │       ╰── <224> FunctionCall [get_twentybyte_ptr]
                    │   │       ╰── <228> Constant Int [20]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <230> Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <246>  [!=]
                    │   │       ├── <243> SizeOfExpr
                    │   │       │   ╰── <242> Dereference
                    │   │       │       ╰── <241> Cast
                    │   │       │           ├── Target
                    │   │       │           │   ╰── Pointer
                    │   │       │           │       ╰── Struct [wonky]
                    │   │       │           ╰── Expression
                    │   │       │               ╰── <239> Constant Int [0]
                    │   │       ╰── <245> Constant Int [19]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <247> Constant Int [8]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── struct_array
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Struct [internal_padding]
                    │   ╰── Extern
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <267>  [!=]
                    │   │       ├── <264> SizeOfExpr
                    │   │       │   ╰── <263> Subscript
                    │   │       │       ├── <261> Var [struct_array]
                    │   │       │       ╰── <262> Constant Int [0]
                    │   │       ╰── <266> Constant Int [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <268> Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <278>  [!=]
                    │   │       ├── <275> SizeOfExpr
                    │   │       │   ╰── <274> Var [arr_struct]
                    │   │       ╰── <277> Constant Int [28]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <279> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <289>  [!=]
                    │   │       ├── <286> SizeOfExpr
                    │   │       │   ╰── <285> Var [struct_array]
                    │   │       ╰── <288> Constant Int [64]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <290> Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <302>  [!=]
                    │   │       ├── <299> SizeOfExpr
                    │   │       │   ╰── <298> Dot
                    │   │       │       ├── <296> Var [arr_struct]
                    │   │       │       ╰── struct_array
                    │   │       ╰── <301> Constant Int [24]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <303> Constant Int [12]
                    ╰── Return
                        ╰── <308> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_size_and_offset_calculations_sizeof_type() {
    let src = r#"
        struct eight_bytes {
            int i;
            char c;
        };
        struct two_bytes {
            char arr[2];
        };
        struct three_bytes {
            char arr[3];
        };
        struct sixteen_bytes {
            struct eight_bytes eight;
            struct two_bytes two;
            struct three_bytes three;
        };
        struct seven_bytes {
            struct two_bytes two;
            struct three_bytes three;
            struct two_bytes two2;
        };
        struct twentyfour_bytes {
            struct seven_bytes seven;
            struct sixteen_bytes sixteen;
        };
        struct twenty_bytes {
            struct sixteen_bytes sixteen;
            struct two_bytes two;
        };
        struct wonky {
            char arr[19];
        };
        struct internal_padding {
            char c;
            double d;
        };
        struct contains_struct_array {
            char c;
            struct eight_bytes struct_array[3];
        };
        
        int main(void) {
            if (sizeof(struct eight_bytes) != 8) {
                return 1;
            }
            if (sizeof(struct two_bytes) != 2) {
                return 2;
            }
            if (sizeof(struct three_bytes) != 3) {
                return 3;
            }
            if (sizeof(struct sixteen_bytes) != 16) {
                return 4;
            }
            if (sizeof(struct seven_bytes) != 7) {
                return 5;
            }
            if (sizeof(struct twentyfour_bytes) != 24) {
                return 6;
            }
            if (sizeof(struct twenty_bytes) != 20) {
                return 7;
            }
            if (sizeof(struct wonky) != 19) {
                return 8;
            }
            if (sizeof(struct internal_padding) != 16) {
                return 9;
            }
            if (sizeof(struct contains_struct_array) != 28) {
                return 10;
            }
            if (sizeof(struct internal_padding[4]) != 64) {
                return 11;
            }
            if (sizeof(struct wonky[2]) != 38) {
                return 12;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Char
            ├── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [sixteen_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── eight
            │   │   ╰── Type
            │   │       ╰── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three
            │       ╰── Type
            │           ╰── Struct [three_bytes]
            ├── Struct [seven_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three
            │   │   ╰── Type
            │   │       ╰── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two2
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [twentyfour_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── seven
            │   │   ╰── Type
            │   │       ╰── Struct [seven_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sixteen
            │       ╰── Type
            │           ╰── Struct [sixteen_bytes]
            ├── Struct [twenty_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── sixteen
            │   │   ╰── Type
            │   │       ╰── Struct [sixteen_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [wonky]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Char
            ├── Struct [internal_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [contains_struct_array]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── struct_array
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [eight_bytes]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <126>  [!=]
                    │   │       ├── <123> SizeOfType
                    │   │       │   ╰── Struct [eight_bytes]
                    │   │       ╰── <125> Constant Int [8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <127> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <138>  [!=]
                    │   │       ├── <135> SizeOfType
                    │   │       │   ╰── Struct [two_bytes]
                    │   │       ╰── <137> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <139> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <150>  [!=]
                    │   │       ├── <147> SizeOfType
                    │   │       │   ╰── Struct [three_bytes]
                    │   │       ╰── <149> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <151> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <162>  [!=]
                    │   │       ├── <159> SizeOfType
                    │   │       │   ╰── Struct [sixteen_bytes]
                    │   │       ╰── <161> Constant Int [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <163> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <174>  [!=]
                    │   │       ├── <171> SizeOfType
                    │   │       │   ╰── Struct [seven_bytes]
                    │   │       ╰── <173> Constant Int [7]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <175> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <186>  [!=]
                    │   │       ├── <183> SizeOfType
                    │   │       │   ╰── Struct [twentyfour_bytes]
                    │   │       ╰── <185> Constant Int [24]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <187> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <198>  [!=]
                    │   │       ├── <195> SizeOfType
                    │   │       │   ╰── Struct [twenty_bytes]
                    │   │       ╰── <197> Constant Int [20]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <199> Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <210>  [!=]
                    │   │       ├── <207> SizeOfType
                    │   │       │   ╰── Struct [wonky]
                    │   │       ╰── <209> Constant Int [19]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <211> Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <222>  [!=]
                    │   │       ├── <219> SizeOfType
                    │   │       │   ╰── Struct [internal_padding]
                    │   │       ╰── <221> Constant Int [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <223> Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <234>  [!=]
                    │   │       ├── <231> SizeOfType
                    │   │       │   ╰── Struct [contains_struct_array]
                    │   │       ╰── <233> Constant Int [28]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <235> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <249>  [!=]
                    │   │       ├── <246> SizeOfType
                    │   │       │   ╰── Array
                    │   │       │       ├── 4
                    │   │       │       ╰── Struct [internal_padding]
                    │   │       ╰── <248> Constant Int [64]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <250> Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <264>  [!=]
                    │   │       ├── <261> SizeOfType
                    │   │       │   ╰── Array
                    │   │       │       ├── 2
                    │   │       │       ╰── Struct [wonky]
                    │   │       ╰── <263> Constant Int [38]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <265> Constant Int [12]
                    ╰── Return
                        ╰── <270> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_smoke_tests_simple() {
    let src = r#"
        struct pair {
            int a;
            int b;
        };
        int main(void) {
            struct pair x = {1, 2};
            if (x.a != 1 || x.b != 2) {
                return 1;
            }
            struct pair *x_ptr = &x;
            if (x_ptr->a != 1 || x_ptr->b != 2) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [pair]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <19> Constant Int [1]
                    │           ╰── <21> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <40>  [||]
                    │   │       ├── <31>  [!=]
                    │   │       │   ├── <28> Dot
                    │   │       │   │   ├── <26> Var [x]
                    │   │       │   │   ╰── a
                    │   │       │   ╰── <30> Constant Int [1]
                    │   │       ╰── <39>  [!=]
                    │   │           ├── <36> Dot
                    │   │           │   ├── <34> Var [x]
                    │   │           │   ╰── b
                    │   │           ╰── <38> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <41> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [pair]
                    │   ╰── Initializer
                    │       ╰── <53> AddressOf
                    │           ╰── <52> Var [x]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <71>  [||]
                    │   │       ├── <62>  [!=]
                    │   │       │   ├── <59> Arrow
                    │   │       │   │   ├── <57> Var [x_ptr]
                    │   │       │   │   ╰── a
                    │   │       │   ╰── <61> Constant Int [1]
                    │   │       ╰── <70>  [!=]
                    │   │           ├── <67> Arrow
                    │   │           │   ├── <65> Var [x_ptr]
                    │   │           │   ╰── b
                    │   │           ╰── <69> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <72> Constant Int [2]
                    ╰── Return
                        ╰── <77> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_smoke_tests_static_vs_auto() {
    let src = r#"
        struct s {
            int a;
            int b;
        };
        int main(void) {
            for (int i = 0; i < 10; i = i + 1) {
                struct s autom = {1, 2};
                static struct s stat = {1, 2};
                autom.a = autom.a + 1;
                autom.b = autom.b + 1;
                stat.a = stat.a + 1;
                stat.b = stat.b + 1;
                if (i == 9) {
                    if (stat.a != 11 || stat.b != 12) {
                        return 1;
                    }
                    if (autom.a != 2 || autom.b != 3) {
                        return 2;
                    }
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <18> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <26>  [<]
                    │   │       ├── <23> Var [i]
                    │   │       ╰── <25> Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <35> Assign [=]
                    │   │       ├── <28> Var [i]
                    │   │       ╰── <34>  [+]
                    │   │           ├── <31> Var [i]
                    │   │           ╰── <33> Constant Int [1]
                    │   ╰── Block
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── autom
                    │       │   ├── Type
                    │       │   │   ╰── Struct [s]
                    │       │   ╰── Initializer
                    │       │       ╰── Compound
                    │       │           ├── <40> Constant Int [1]
                    │       │           ╰── <42> Constant Int [2]
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── stat
                    │       │   ├── Type
                    │       │   │   ╰── Struct [s]
                    │       │   ├── Initializer
                    │       │   │   ╰── Compound
                    │       │   │       ├── <51> Constant Int [1]
                    │       │   │       ╰── <53> Constant Int [2]
                    │       │   ╰── Static
                    │       ├── <69> Assign [=]
                    │       │   ├── <60> Dot
                    │       │   │   ├── <58> Var [autom]
                    │       │   │   ╰── a
                    │       │   ╰── <68>  [+]
                    │       │       ├── <65> Dot
                    │       │       │   ├── <63> Var [autom]
                    │       │       │   ╰── a
                    │       │       ╰── <67> Constant Int [1]
                    │       ├── <83> Assign [=]
                    │       │   ├── <74> Dot
                    │       │   │   ├── <72> Var [autom]
                    │       │   │   ╰── b
                    │       │   ╰── <82>  [+]
                    │       │       ├── <79> Dot
                    │       │       │   ├── <77> Var [autom]
                    │       │       │   ╰── b
                    │       │       ╰── <81> Constant Int [1]
                    │       ├── <97> Assign [=]
                    │       │   ├── <88> Dot
                    │       │   │   ├── <86> Var [stat]
                    │       │   │   ╰── a
                    │       │   ╰── <96>  [+]
                    │       │       ├── <93> Dot
                    │       │       │   ├── <91> Var [stat]
                    │       │       │   ╰── a
                    │       │       ╰── <95> Constant Int [1]
                    │       ├── <111> Assign [=]
                    │       │   ├── <102> Dot
                    │       │   │   ├── <100> Var [stat]
                    │       │   │   ╰── b
                    │       │   ╰── <110>  [+]
                    │       │       ├── <107> Dot
                    │       │       │   ├── <105> Var [stat]
                    │       │       │   ╰── b
                    │       │       ╰── <109> Constant Int [1]
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <117>  [==]
                    │           │       ├── <114> Var [i]
                    │           │       ╰── <116> Constant Int [9]
                    │           ╰── Then
                    │               ╰── Block
                    │                   ├── If
                    │                   │   ├── Condition
                    │                   │   │   ╰── <133>  [||]
                    │                   │   │       ├── <124>  [!=]
                    │                   │   │       │   ├── <121> Dot
                    │                   │   │       │   │   ├── <119> Var [stat]
                    │                   │   │       │   │   ╰── a
                    │                   │   │       │   ╰── <123> Constant Int [11]
                    │                   │   │       ╰── <132>  [!=]
                    │                   │   │           ├── <129> Dot
                    │                   │   │           │   ├── <127> Var [stat]
                    │                   │   │           │   ╰── b
                    │                   │   │           ╰── <131> Constant Int [12]
                    │                   │   ╰── Then
                    │                   │       ╰── Block
                    │                   │           ╰── Return
                    │                   │               ╰── <134> Constant Int [1]
                    │                   ╰── If
                    │                       ├── Condition
                    │                       │   ╰── <154>  [||]
                    │                       │       ├── <145>  [!=]
                    │                       │       │   ├── <142> Dot
                    │                       │       │   │   ├── <140> Var [autom]
                    │                       │       │   │   ╰── a
                    │                       │       │   ╰── <144> Constant Int [2]
                    │                       │       ╰── <153>  [!=]
                    │                       │           ├── <150> Dot
                    │                       │           │   ├── <148> Var [autom]
                    │                       │           │   ╰── b
                    │                       │           ╰── <152> Constant Int [3]
                    │                       ╰── Then
                    │                           ╰── Block
                    │                               ╰── Return
                    │                                   ╰── <155> Constant Int [2]
                    ╰── Return
                        ╰── <166> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_copy_struct() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void *malloc(unsigned long size);
        struct small {
            int a;
            long b;
        };
        struct s {
            char arr[3];
            struct small inner;
        };
        struct with_end_padding {
            int a;
            int b;
            char c;
        };
        int test_auto(void) {
            struct s x = {"ab", {-1, 2}};
            struct s y = {"x", {1}};
            y = x;
            if (strcmp(y.arr, "ab") || y.inner.a != -1 || y.inner.b != 2) {
                return 0;
            }
            y.inner.a = 20;
            if (y.inner.a != 20 || x.inner.a != -1) {
                return 0;
            }
            return 1;
        }
        int test_static(void) {
            static struct s x = {"ab", {1, 2}};
            static struct s y;
            y = x;
            if (strcmp(y.arr, "ab") || y.inner.a != 1 || y.inner.b != 2) {
                return 0;
            }
            return 1;
        }
        struct wonky {
            char arr[7];
        };
        int test_wonky_size(void) {
            struct wonky x = {"abcdef"};
            static struct wonky y;
            y = x;
            if (strcmp(y.arr, "abcdef")) {
                return 0;
            }
            return 1;
        }
        int true_flag(void) {
            return 1;
        }
        int test_conditional(void) {
            static struct s x = {"xy", {1234, 5678}};
            struct s y = {"!", {-10}};
            struct s z;
            z = true_flag() ? x : y;
            if (strcmp(z.arr, "xy") || z.inner.a != 1234 || z.inner.b != 5678) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto()) {
                return 1;
            }
            if (!test_static()) {
                return 2;
            }
            if (!test_wonky_size()) {
                return 3;
            }
            if (!test_conditional()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [small]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Long
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── inner
            │       ╰── Type
            │           ╰── Struct [small]
            ├── Struct [with_end_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Function [test_auto]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <68> "ab"
            │       │           ╰── Compound
            │       │               ├── <72> Unary [-]
            │       │               │   ╰── <71> Constant Int [1]
            │       │               ╰── <74> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <83> "x"
            │       │           ╰── Compound
            │       │               ╰── <85> Constant Int [1]
            │       ├── <95> Assign [=]
            │       │   ├── <91> Var [y]
            │       │   ╰── <94> Var [x]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <127>  [||]
            │       │   │       ├── <116>  [||]
            │       │   │       │   ├── <103> FunctionCall [strcmp]
            │       │   │       │   │   ├── <101> Dot
            │       │   │       │   │   │   ├── <99> Var [y]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <102> "ab"
            │       │   │       │   ╰── <115>  [!=]
            │       │   │       │       ├── <110> Dot
            │       │   │       │       │   ├── <108> Dot
            │       │   │       │       │   │   ├── <106> Var [y]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <114> Unary [-]
            │       │   │       │           ╰── <113> Constant Int [1]
            │       │   │       ╰── <126>  [!=]
            │       │   │           ├── <123> Dot
            │       │   │           │   ├── <121> Dot
            │       │   │           │   │   ├── <119> Var [y]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <125> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <128> Constant Int [0]
            │       ├── <141> Assign [=]
            │       │   ├── <138> Dot
            │       │   │   ├── <136> Dot
            │       │   │   │   ├── <134> Var [y]
            │       │   │   │   ╰── inner
            │       │   │   ╰── a
            │       │   ╰── <140> Constant Int [20]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <164>  [||]
            │       │   │       ├── <151>  [!=]
            │       │   │       │   ├── <148> Dot
            │       │   │       │   │   ├── <146> Dot
            │       │   │       │   │   │   ├── <144> Var [y]
            │       │   │       │   │   │   ╰── inner
            │       │   │       │   │   ╰── a
            │       │   │       │   ╰── <150> Constant Int [20]
            │       │   │       ╰── <163>  [!=]
            │       │   │           ├── <158> Dot
            │       │   │           │   ├── <156> Dot
            │       │   │           │   │   ├── <154> Var [x]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── a
            │       │   │           ╰── <162> Unary [-]
            │       │   │               ╰── <161> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <165> Constant Int [0]
            │       ╰── Return
            │           ╰── <170> Constant Int [1]
            ├── Function [test_static]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── <183> "ab"
            │       │   │       ╰── Compound
            │       │   │           ├── <185> Constant Int [1]
            │       │   │           ╰── <187> Constant Int [2]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Static
            │       ├── <203> Assign [=]
            │       │   ├── <199> Var [y]
            │       │   ╰── <202> Var [x]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <233>  [||]
            │       │   │       ├── <222>  [||]
            │       │   │       │   ├── <211> FunctionCall [strcmp]
            │       │   │       │   │   ├── <209> Dot
            │       │   │       │   │   │   ├── <207> Var [y]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <210> "ab"
            │       │   │       │   ╰── <221>  [!=]
            │       │   │       │       ├── <218> Dot
            │       │   │       │       │   ├── <216> Dot
            │       │   │       │       │   │   ├── <214> Var [y]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <220> Constant Int [1]
            │       │   │       ╰── <232>  [!=]
            │       │   │           ├── <229> Dot
            │       │   │           │   ├── <227> Dot
            │       │   │           │   │   ├── <225> Var [y]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <231> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <234> Constant Int [0]
            │       ╰── Return
            │           ╰── <239> Constant Int [1]
            ├── Struct [wonky]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 7
            │               ╰── Char
            ├── Function [test_wonky_size]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [wonky]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <259> "abcdef"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Struct [wonky]
            │       │   ╰── Static
            │       ├── <274> Assign [=]
            │       │   ├── <270> Var [y]
            │       │   ╰── <273> Var [x]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <282> FunctionCall [strcmp]
            │       │   │       ├── <280> Dot
            │       │   │       │   ├── <278> Var [y]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <281> "abcdef"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <283> Constant Int [0]
            │       ╰── Return
            │           ╰── <288> Constant Int [1]
            ├── Function [true_flag]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <296> Constant Int [1]
            ├── Function [test_conditional]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── <309> "xy"
            │       │   │       ╰── Compound
            │       │   │           ├── <311> Constant Int [1234]
            │       │   │           ╰── <313> Constant Int [5678]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <322> "!"
            │       │           ╰── Compound
            │       │               ╰── <326> Unary [-]
            │       │                   ╰── <325> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── z
            │       │   ╰── Type
            │       │       ╰── Struct [s]
            │       ├── <346> Assign [=]
            │       │   ├── <337> Var [z]
            │       │   ╰── <345> Conditional [?]
            │       │       ├── <340> FunctionCall [true_flag]
            │       │       ├── Then
            │       │       │   ╰── <342> Var [x]
            │       │       ╰── Else
            │       │           ╰── <344> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <376>  [||]
            │       │   │       ├── <365>  [||]
            │       │   │       │   ├── <354> FunctionCall [strcmp]
            │       │   │       │   │   ├── <352> Dot
            │       │   │       │   │   │   ├── <350> Var [z]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <353> "xy"
            │       │   │       │   ╰── <364>  [!=]
            │       │   │       │       ├── <361> Dot
            │       │   │       │       │   ├── <359> Dot
            │       │   │       │       │   │   ├── <357> Var [z]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <363> Constant Int [1234]
            │       │   │       ╰── <375>  [!=]
            │       │   │           ├── <372> Dot
            │       │   │           │   ├── <370> Dot
            │       │   │           │   │   ├── <368> Var [z]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <374> Constant Int [5678]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <377> Constant Int [0]
            │       ╰── Return
            │           ╰── <382> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <393> Unary [!]
                    │   │       ╰── <392> FunctionCall [test_auto]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <394> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <402> Unary [!]
                    │   │       ╰── <401> FunctionCall [test_static]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <403> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <411> Unary [!]
                    │   │       ╰── <410> FunctionCall [test_wonky_size]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <412> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <420> Unary [!]
                    │   │       ╰── <419> FunctionCall [test_conditional]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <421> Constant Int [4]
                    ╰── Return
                        ╰── <426> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_copy_struct_through_pointer() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void *malloc(unsigned long size);
        struct small {
            int a;
            long b;
        };
        struct s {
            char arr[3];
            struct small inner;
        };
        struct with_end_padding {
            int a;
            int b;
            char c;
        };
        int test_copy_to_pointer(void) {
            struct s y = {"!?", {-20, -30}};
            struct s *x = malloc(sizeof(struct s));
            *x = y;
            if (strcmp(x->arr, "!?") || x->inner.a != -20 || x->inner.b != -30) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_pointer(void) {
            static struct s my_struct = {"()", {77, 78}};
            struct s *y = &my_struct;
            struct s x = {"", {0, 0}};
            x = *y;
            if (strcmp(x.arr, "()") || x.inner.a != 77 || x.inner.b != 78) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_and_from_pointer(void) {
            struct s my_struct = {"+-", {1000, 1001}};
            struct s *y = &my_struct;
            struct s *x = malloc(sizeof(struct s));
            *x = *y;
            if (strcmp(x->arr, "+-") || x->inner.a != 1000 || x->inner.b != 1001) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_array_elem(void) {
            struct s y = {"\n\t", {10000, 20000}};
            static struct s arr[3];
            arr[1] = y;
            if (strcmp(arr[1].arr, "\n\t") || arr[1].inner.a != 10000 ||
                arr[1].inner.b != 20000) {
                return 0;
            }
            if (arr[0].inner.a || arr[0].inner.b || arr[2].arr[0] || arr[2].arr[1]) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_array_elem(void) {
            struct s arr[3] = {
                {"ab", {-3000, -4000}}, {"cd", {-5000, -6000}}, {"ef", {-7000, -8000}}};
            struct s x = {"", {0, 0}};
            x = arr[1];
            if (strcmp(x.arr, "cd") || x.inner.a != -5000 || x.inner.b != -6000) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_and_from_array_elem(void) {
            struct s arr[3] = {
                {"ab", {-3000, -4000}}, {"cd", {-5000, -6000}}, {"ef", {-7000, -8000}}};
            arr[0] = arr[2];
            if (strcmp(arr[0].arr, "ef") || arr[0].inner.a != -7000 ||
                arr[0].inner.b != -8000) {
                return 0;
            }
            if (strcmp(arr[1].arr, "cd") || arr[1].inner.a != -5000 ||
                arr[1].inner.b != -6000) {
                return 0;
            }
            if (strcmp(arr[2].arr, "ef") || arr[2].inner.a != -7000 ||
                arr[2].inner.b != -8000) {
                return 0;
            }
            return 1;
        }
        int test_copy_array_element_with_padding(void) {
            struct with_end_padding arr[3] = {{0, 1, 2}, {3, 4, 5}, {6, 7, 8}};
            struct with_end_padding elem = {9, 9, 9};
            arr[1] = elem;
            if (arr[0].a != 0 || arr[0].b != 1 || arr[0].c != 2 || arr[1].a != 9 ||
                arr[1].b != 9 || arr[1].c != 9 || arr[2].a != 6 || arr[2].b != 7 ||
                arr[2].c != 8) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_copy_to_pointer()) {
                return 1;
            }
            if (!test_copy_from_pointer()) {
                return 2;
            }
            if (!test_copy_to_and_from_pointer()) {
                return 3;
            }
            if (!test_copy_to_array_elem()) {
                return 4;
            }
            if (!test_copy_from_array_elem()) {
                return 5;
            }
            if (!test_copy_to_and_from_array_elem()) {
                return 6;
            }
            if (!test_copy_array_element_with_padding()) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [small]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Long
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── inner
            │       ╰── Type
            │           ╰── Struct [small]
            ├── Struct [with_end_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Function [test_copy_to_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <68> "!?"
            │       │           ╰── Compound
            │       │               ├── <72> Unary [-]
            │       │               │   ╰── <71> Constant Int [20]
            │       │               ╰── <76> Unary [-]
            │       │                   ╰── <75> Constant Int [30]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <91> FunctionCall [malloc]
            │       │           ╰── <90> SizeOfType
            │       │               ╰── Struct [s]
            │       ├── <100> Assign [=]
            │       │   ├── <96> Dereference
            │       │   │   ╰── <95> Var [x]
            │       │   ╰── <99> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <134>  [||]
            │       │   │       ├── <121>  [||]
            │       │   │       │   ├── <108> FunctionCall [strcmp]
            │       │   │       │   │   ├── <106> Arrow
            │       │   │       │   │   │   ├── <104> Var [x]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <107> "!?"
            │       │   │       │   ╰── <120>  [!=]
            │       │   │       │       ├── <115> Dot
            │       │   │       │       │   ├── <113> Arrow
            │       │   │       │       │   │   ├── <111> Var [x]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <119> Unary [-]
            │       │   │       │           ╰── <118> Constant Int [20]
            │       │   │       ╰── <133>  [!=]
            │       │   │           ├── <128> Dot
            │       │   │           │   ├── <126> Arrow
            │       │   │           │   │   ├── <124> Var [x]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <132> Unary [-]
            │       │   │               ╰── <131> Constant Int [30]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <135> Constant Int [0]
            │       ╰── Return
            │           ╰── <140> Constant Int [1]
            ├── Function [test_copy_from_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── <153> "()"
            │       │   │       ╰── Compound
            │       │   │           ├── <155> Constant Int [77]
            │       │   │           ╰── <157> Constant Int [78]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <169> AddressOf
            │       │           ╰── <168> Var [my_struct]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <176> ""
            │       │           ╰── Compound
            │       │               ├── <178> Constant Int [0]
            │       │               ╰── <180> Constant Int [0]
            │       ├── <191> Assign [=]
            │       │   ├── <186> Var [x]
            │       │   ╰── <190> Dereference
            │       │       ╰── <189> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <221>  [||]
            │       │   │       ├── <210>  [||]
            │       │   │       │   ├── <199> FunctionCall [strcmp]
            │       │   │       │   │   ├── <197> Dot
            │       │   │       │   │   │   ├── <195> Var [x]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <198> "()"
            │       │   │       │   ╰── <209>  [!=]
            │       │   │       │       ├── <206> Dot
            │       │   │       │       │   ├── <204> Dot
            │       │   │       │       │   │   ├── <202> Var [x]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <208> Constant Int [77]
            │       │   │       ╰── <220>  [!=]
            │       │   │           ├── <217> Dot
            │       │   │           │   ├── <215> Dot
            │       │   │           │   │   ├── <213> Var [x]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <219> Constant Int [78]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <222> Constant Int [0]
            │       ╰── Return
            │           ╰── <227> Constant Int [1]
            ├── Function [test_copy_to_and_from_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <239> "+-"
            │       │           ╰── Compound
            │       │               ├── <241> Constant Int [1000]
            │       │               ╰── <243> Constant Int [1001]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <255> AddressOf
            │       │           ╰── <254> Var [my_struct]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <268> FunctionCall [malloc]
            │       │           ╰── <267> SizeOfType
            │       │               ╰── Struct [s]
            │       ├── <278> Assign [=]
            │       │   ├── <273> Dereference
            │       │   │   ╰── <272> Var [x]
            │       │   ╰── <277> Dereference
            │       │       ╰── <276> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <308>  [||]
            │       │   │       ├── <297>  [||]
            │       │   │       │   ├── <286> FunctionCall [strcmp]
            │       │   │       │   │   ├── <284> Arrow
            │       │   │       │   │   │   ├── <282> Var [x]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <285> "+-"
            │       │   │       │   ╰── <296>  [!=]
            │       │   │       │       ├── <293> Dot
            │       │   │       │       │   ├── <291> Arrow
            │       │   │       │       │   │   ├── <289> Var [x]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <295> Constant Int [1000]
            │       │   │       ╰── <307>  [!=]
            │       │   │           ├── <304> Dot
            │       │   │           │   ├── <302> Arrow
            │       │   │           │   │   ├── <300> Var [x]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <306> Constant Int [1001]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <309> Constant Int [0]
            │       ╰── Return
            │           ╰── <314> Constant Int [1]
            ├── Function [test_copy_to_array_elem]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <326> "
        	"
            │       │           ╰── Compound
            │       │               ├── <328> Constant Int [10000]
            │       │               ╰── <330> Constant Int [20000]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Struct [s]
            │       │   ╰── Static
            │       ├── <350> Assign [=]
            │       │   ├── <346> Subscript
            │       │   │   ├── <344> Var [arr]
            │       │   │   ╰── <345> Constant Int [1]
            │       │   ╰── <349> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <386>  [||]
            │       │   │       ├── <373>  [||]
            │       │   │       │   ├── <360> FunctionCall [strcmp]
            │       │   │       │   │   ├── <358> Dot
            │       │   │       │   │   │   ├── <356> Subscript
            │       │   │       │   │   │   │   ├── <354> Var [arr]
            │       │   │       │   │   │   │   ╰── <355> Constant Int [1]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <359> "
        	"
            │       │   │       │   ╰── <372>  [!=]
            │       │   │       │       ├── <369> Dot
            │       │   │       │       │   ├── <367> Dot
            │       │   │       │       │   │   ├── <365> Subscript
            │       │   │       │       │   │   │   ├── <363> Var [arr]
            │       │   │       │       │   │   │   ╰── <364> Constant Int [1]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <371> Constant Int [10000]
            │       │   │       ╰── <385>  [!=]
            │       │   │           ├── <382> Dot
            │       │   │           │   ├── <380> Dot
            │       │   │           │   │   ├── <378> Subscript
            │       │   │           │   │   │   ├── <376> Var [arr]
            │       │   │           │   │   │   ╰── <377> Constant Int [1]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <384> Constant Int [20000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <387> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <429>  [||]
            │       │   │       ├── <419>  [||]
            │       │   │       │   ├── <409>  [||]
            │       │   │       │   │   ├── <399> Dot
            │       │   │       │   │   │   ├── <397> Dot
            │       │   │       │   │   │   │   ├── <395> Subscript
            │       │   │       │   │   │   │   │   ├── <393> Var [arr]
            │       │   │       │   │   │   │   │   ╰── <394> Constant Int [0]
            │       │   │       │   │   │   │   ╰── inner
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <408> Dot
            │       │   │       │   │       ├── <406> Dot
            │       │   │       │   │       │   ├── <404> Subscript
            │       │   │       │   │       │   │   ├── <402> Var [arr]
            │       │   │       │   │       │   │   ╰── <403> Constant Int [0]
            │       │   │       │   │       │   ╰── inner
            │       │   │       │   │       ╰── b
            │       │   │       │   ╰── <418> Subscript
            │       │   │       │       ├── <416> Dot
            │       │   │       │       │   ├── <414> Subscript
            │       │   │       │       │   │   ├── <412> Var [arr]
            │       │   │       │       │   │   ╰── <413> Constant Int [2]
            │       │   │       │       │   ╰── arr
            │       │   │       │       ╰── <417> Constant Int [0]
            │       │   │       ╰── <428> Subscript
            │       │   │           ├── <426> Dot
            │       │   │           │   ├── <424> Subscript
            │       │   │           │   │   ├── <422> Var [arr]
            │       │   │           │   │   ╰── <423> Constant Int [2]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <427> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <430> Constant Int [0]
            │       ╰── Return
            │           ╰── <435> Constant Int [1]
            ├── Function [test_copy_from_array_elem]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <449> "ab"
            │       │           │   ╰── Compound
            │       │           │       ├── <453> Unary [-]
            │       │           │       │   ╰── <452> Constant Int [3000]
            │       │           │       ╰── <457> Unary [-]
            │       │           │           ╰── <456> Constant Int [4000]
            │       │           ├── Compound
            │       │           │   ├── <461> "cd"
            │       │           │   ╰── Compound
            │       │           │       ├── <465> Unary [-]
            │       │           │       │   ╰── <464> Constant Int [5000]
            │       │           │       ╰── <469> Unary [-]
            │       │           │           ╰── <468> Constant Int [6000]
            │       │           ╰── Compound
            │       │               ├── <473> "ef"
            │       │               ╰── Compound
            │       │                   ├── <477> Unary [-]
            │       │                   │   ╰── <476> Constant Int [7000]
            │       │                   ╰── <481> Unary [-]
            │       │                       ╰── <480> Constant Int [8000]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <491> ""
            │       │           ╰── Compound
            │       │               ├── <493> Constant Int [0]
            │       │               ╰── <495> Constant Int [0]
            │       ├── <507> Assign [=]
            │       │   ├── <501> Var [x]
            │       │   ╰── <506> Subscript
            │       │       ├── <504> Var [arr]
            │       │       ╰── <505> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <541>  [||]
            │       │   │       ├── <528>  [||]
            │       │   │       │   ├── <515> FunctionCall [strcmp]
            │       │   │       │   │   ├── <513> Dot
            │       │   │       │   │   │   ├── <511> Var [x]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <514> "cd"
            │       │   │       │   ╰── <527>  [!=]
            │       │   │       │       ├── <522> Dot
            │       │   │       │       │   ├── <520> Dot
            │       │   │       │       │   │   ├── <518> Var [x]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <526> Unary [-]
            │       │   │       │           ╰── <525> Constant Int [5000]
            │       │   │       ╰── <540>  [!=]
            │       │   │           ├── <535> Dot
            │       │   │           │   ├── <533> Dot
            │       │   │           │   │   ├── <531> Var [x]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <539> Unary [-]
            │       │   │               ╰── <538> Constant Int [6000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <542> Constant Int [0]
            │       ╰── Return
            │           ╰── <547> Constant Int [1]
            ├── Function [test_copy_to_and_from_array_elem]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <561> "ab"
            │       │           │   ╰── Compound
            │       │           │       ├── <565> Unary [-]
            │       │           │       │   ╰── <564> Constant Int [3000]
            │       │           │       ╰── <569> Unary [-]
            │       │           │           ╰── <568> Constant Int [4000]
            │       │           ├── Compound
            │       │           │   ├── <573> "cd"
            │       │           │   ╰── Compound
            │       │           │       ├── <577> Unary [-]
            │       │           │       │   ╰── <576> Constant Int [5000]
            │       │           │       ╰── <581> Unary [-]
            │       │           │           ╰── <580> Constant Int [6000]
            │       │           ╰── Compound
            │       │               ├── <585> "ef"
            │       │               ╰── Compound
            │       │                   ├── <589> Unary [-]
            │       │                   │   ╰── <588> Constant Int [7000]
            │       │                   ╰── <593> Unary [-]
            │       │                       ╰── <592> Constant Int [8000]
            │       ├── <608> Assign [=]
            │       │   ├── <602> Subscript
            │       │   │   ├── <600> Var [arr]
            │       │   │   ╰── <601> Constant Int [0]
            │       │   ╰── <607> Subscript
            │       │       ├── <605> Var [arr]
            │       │       ╰── <606> Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <648>  [||]
            │       │   │       ├── <633>  [||]
            │       │   │       │   ├── <618> FunctionCall [strcmp]
            │       │   │       │   │   ├── <616> Dot
            │       │   │       │   │   │   ├── <614> Subscript
            │       │   │       │   │   │   │   ├── <612> Var [arr]
            │       │   │       │   │   │   │   ╰── <613> Constant Int [0]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <617> "ef"
            │       │   │       │   ╰── <632>  [!=]
            │       │   │       │       ├── <627> Dot
            │       │   │       │       │   ├── <625> Dot
            │       │   │       │       │   │   ├── <623> Subscript
            │       │   │       │       │   │   │   ├── <621> Var [arr]
            │       │   │       │       │   │   │   ╰── <622> Constant Int [0]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <631> Unary [-]
            │       │   │       │           ╰── <630> Constant Int [7000]
            │       │   │       ╰── <647>  [!=]
            │       │   │           ├── <642> Dot
            │       │   │           │   ├── <640> Dot
            │       │   │           │   │   ├── <638> Subscript
            │       │   │           │   │   │   ├── <636> Var [arr]
            │       │   │           │   │   │   ╰── <637> Constant Int [0]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <646> Unary [-]
            │       │   │               ╰── <645> Constant Int [8000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <649> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <692>  [||]
            │       │   │       ├── <677>  [||]
            │       │   │       │   ├── <662> FunctionCall [strcmp]
            │       │   │       │   │   ├── <660> Dot
            │       │   │       │   │   │   ├── <658> Subscript
            │       │   │       │   │   │   │   ├── <656> Var [arr]
            │       │   │       │   │   │   │   ╰── <657> Constant Int [1]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <661> "cd"
            │       │   │       │   ╰── <676>  [!=]
            │       │   │       │       ├── <671> Dot
            │       │   │       │       │   ├── <669> Dot
            │       │   │       │       │   │   ├── <667> Subscript
            │       │   │       │       │   │   │   ├── <665> Var [arr]
            │       │   │       │       │   │   │   ╰── <666> Constant Int [1]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <675> Unary [-]
            │       │   │       │           ╰── <674> Constant Int [5000]
            │       │   │       ╰── <691>  [!=]
            │       │   │           ├── <686> Dot
            │       │   │           │   ├── <684> Dot
            │       │   │           │   │   ├── <682> Subscript
            │       │   │           │   │   │   ├── <680> Var [arr]
            │       │   │           │   │   │   ╰── <681> Constant Int [1]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <690> Unary [-]
            │       │   │               ╰── <689> Constant Int [6000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <693> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <736>  [||]
            │       │   │       ├── <721>  [||]
            │       │   │       │   ├── <706> FunctionCall [strcmp]
            │       │   │       │   │   ├── <704> Dot
            │       │   │       │   │   │   ├── <702> Subscript
            │       │   │       │   │   │   │   ├── <700> Var [arr]
            │       │   │       │   │   │   │   ╰── <701> Constant Int [2]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <705> "ef"
            │       │   │       │   ╰── <720>  [!=]
            │       │   │       │       ├── <715> Dot
            │       │   │       │       │   ├── <713> Dot
            │       │   │       │       │   │   ├── <711> Subscript
            │       │   │       │       │   │   │   ├── <709> Var [arr]
            │       │   │       │       │   │   │   ╰── <710> Constant Int [2]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <719> Unary [-]
            │       │   │       │           ╰── <718> Constant Int [7000]
            │       │   │       ╰── <735>  [!=]
            │       │   │           ├── <730> Dot
            │       │   │           │   ├── <728> Dot
            │       │   │           │   │   ├── <726> Subscript
            │       │   │           │   │   │   ├── <724> Var [arr]
            │       │   │           │   │   │   ╰── <725> Constant Int [2]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <734> Unary [-]
            │       │   │               ╰── <733> Constant Int [8000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <737> Constant Int [0]
            │       ╰── Return
            │           ╰── <742> Constant Int [1]
            ├── Function [test_copy_array_element_with_padding]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Struct [with_end_padding]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <756> Constant Int [0]
            │       │           │   ├── <758> Constant Int [1]
            │       │           │   ╰── <760> Constant Int [2]
            │       │           ├── Compound
            │       │           │   ├── <763> Constant Int [3]
            │       │           │   ├── <765> Constant Int [4]
            │       │           │   ╰── <767> Constant Int [5]
            │       │           ╰── Compound
            │       │               ├── <770> Constant Int [6]
            │       │               ├── <772> Constant Int [7]
            │       │               ╰── <774> Constant Int [8]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem
            │       │   ├── Type
            │       │   │   ╰── Struct [with_end_padding]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <783> Constant Int [9]
            │       │           ├── <785> Constant Int [9]
            │       │           ╰── <787> Constant Int [9]
            │       ├── <798> Assign [=]
            │       │   ├── <794> Subscript
            │       │   │   ├── <792> Var [arr]
            │       │   │   ╰── <793> Constant Int [1]
            │       │   ╰── <797> Var [elem]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <896>  [||]
            │       │   │       ├── <885>  [||]
            │       │   │       │   ├── <874>  [||]
            │       │   │       │   │   ├── <863>  [||]
            │       │   │       │   │   │   ├── <852>  [||]
            │       │   │       │   │   │   │   ├── <841>  [||]
            │       │   │       │   │   │   │   │   ├── <830>  [||]
            │       │   │       │   │   │   │   │   │   ├── <819>  [||]
            │       │   │       │   │   │   │   │   │   │   ├── <808>  [!=]
            │       │   │       │   │   │   │   │   │   │   │   ├── <805> Dot
            │       │   │       │   │   │   │   │   │   │   │   │   ├── <803> Subscript
            │       │   │       │   │   │   │   │   │   │   │   │   │   ├── <801> Var [arr]
            │       │   │       │   │   │   │   │   │   │   │   │   │   ╰── <802> Constant Int [0]
            │       │   │       │   │   │   │   │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   │   │   │   │   ╰── <807> Constant Int [0]
            │       │   │       │   │   │   │   │   │   │   ╰── <818>  [!=]
            │       │   │       │   │   │   │   │   │   │       ├── <815> Dot
            │       │   │       │   │   │   │   │   │   │       │   ├── <813> Subscript
            │       │   │       │   │   │   │   │   │   │       │   │   ├── <811> Var [arr]
            │       │   │       │   │   │   │   │   │   │       │   │   ╰── <812> Constant Int [0]
            │       │   │       │   │   │   │   │   │   │       │   ╰── b
            │       │   │       │   │   │   │   │   │   │       ╰── <817> Constant Int [1]
            │       │   │       │   │   │   │   │   │   ╰── <829>  [!=]
            │       │   │       │   │   │   │   │   │       ├── <826> Dot
            │       │   │       │   │   │   │   │   │       │   ├── <824> Subscript
            │       │   │       │   │   │   │   │   │       │   │   ├── <822> Var [arr]
            │       │   │       │   │   │   │   │   │       │   │   ╰── <823> Constant Int [0]
            │       │   │       │   │   │   │   │   │       │   ╰── c
            │       │   │       │   │   │   │   │   │       ╰── <828> Constant Int [2]
            │       │   │       │   │   │   │   │   ╰── <840>  [!=]
            │       │   │       │   │   │   │   │       ├── <837> Dot
            │       │   │       │   │   │   │   │       │   ├── <835> Subscript
            │       │   │       │   │   │   │   │       │   │   ├── <833> Var [arr]
            │       │   │       │   │   │   │   │       │   │   ╰── <834> Constant Int [1]
            │       │   │       │   │   │   │   │       │   ╰── a
            │       │   │       │   │   │   │   │       ╰── <839> Constant Int [9]
            │       │   │       │   │   │   │   ╰── <851>  [!=]
            │       │   │       │   │   │   │       ├── <848> Dot
            │       │   │       │   │   │   │       │   ├── <846> Subscript
            │       │   │       │   │   │   │       │   │   ├── <844> Var [arr]
            │       │   │       │   │   │   │       │   │   ╰── <845> Constant Int [1]
            │       │   │       │   │   │   │       │   ╰── b
            │       │   │       │   │   │   │       ╰── <850> Constant Int [9]
            │       │   │       │   │   │   ╰── <862>  [!=]
            │       │   │       │   │   │       ├── <859> Dot
            │       │   │       │   │   │       │   ├── <857> Subscript
            │       │   │       │   │   │       │   │   ├── <855> Var [arr]
            │       │   │       │   │   │       │   │   ╰── <856> Constant Int [1]
            │       │   │       │   │   │       │   ╰── c
            │       │   │       │   │   │       ╰── <861> Constant Int [9]
            │       │   │       │   │   ╰── <873>  [!=]
            │       │   │       │   │       ├── <870> Dot
            │       │   │       │   │       │   ├── <868> Subscript
            │       │   │       │   │       │   │   ├── <866> Var [arr]
            │       │   │       │   │       │   │   ╰── <867> Constant Int [2]
            │       │   │       │   │       │   ╰── a
            │       │   │       │   │       ╰── <872> Constant Int [6]
            │       │   │       │   ╰── <884>  [!=]
            │       │   │       │       ├── <881> Dot
            │       │   │       │       │   ├── <879> Subscript
            │       │   │       │       │   │   ├── <877> Var [arr]
            │       │   │       │       │   │   ╰── <878> Constant Int [2]
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <883> Constant Int [7]
            │       │   │       ╰── <895>  [!=]
            │       │   │           ├── <892> Dot
            │       │   │           │   ├── <890> Subscript
            │       │   │           │   │   ├── <888> Var [arr]
            │       │   │           │   │   ╰── <889> Constant Int [2]
            │       │   │           │   ╰── c
            │       │   │           ╰── <894> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <897> Constant Int [0]
            │       ╰── Return
            │           ╰── <902> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <913> Unary [!]
                    │   │       ╰── <912> FunctionCall [test_copy_to_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <914> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <922> Unary [!]
                    │   │       ╰── <921> FunctionCall [test_copy_from_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <923> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <931> Unary [!]
                    │   │       ╰── <930> FunctionCall [test_copy_to_and_from_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <932> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <940> Unary [!]
                    │   │       ╰── <939> FunctionCall [test_copy_to_array_elem]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <941> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <949> Unary [!]
                    │   │       ╰── <948> FunctionCall [test_copy_from_array_elem]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <950> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <958> Unary [!]
                    │   │       ╰── <957> FunctionCall [test_copy_to_and_from_array_elem]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <959> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <967> Unary [!]
                    │   │       ╰── <966> FunctionCall [test_copy_array_element_with_padding]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <968> Constant Int [7]
                    ╰── Return
                        ╰── <973> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_copy_struct_with_arrow_operator() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        struct outermost {
            int i;
            struct outer *nested_ptr;
            struct outer nested_struct;
        };
        int test_copy_from_member_pointer(void) {
            struct inner small = {0.0, 0};
            struct outer *outer_ptr = malloc(sizeof(struct outer));
            outer_ptr->a = 100;
            outer_ptr->substruct.d = 21.5;
            outer_ptr->substruct.i = 100001;
            small = outer_ptr->substruct;
            if (small.d != 21.5 || small.i != 100001) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_member_pointer(void) {
            struct inner small = {99.25, 987654};
            struct outer *outer_ptr = calloc(1, sizeof(struct outer));
            outer_ptr->substruct = small;
            if (outer_ptr->substruct.d != 99.25 || outer_ptr->substruct.i != 987654) {
                return 0;
            }
            if (outer_ptr->a || outer_ptr->b) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_nested_member_pointer(void) {
            struct inner small = {99.25, 987654};
            struct outermost *outer_ptr = calloc(1, sizeof(struct outermost));
            outer_ptr->nested_ptr = calloc(1, sizeof(struct outer));
            outer_ptr->i = -5;
            outer_ptr->nested_ptr->a = 101;
            outer_ptr->nested_ptr->b = 102;
            outer_ptr->nested_ptr->substruct.d = 77.5;
            outer_ptr->nested_ptr->substruct.i = 88;
            small = outer_ptr->nested_ptr->substruct;
            if (small.d != 77.5 || small.i != 88) {
                return 0;
            }
            if (outer_ptr->i != -5 || outer_ptr->nested_struct.a) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_nested_member_pointer(void) {
            struct inner small = {99.25, 987654};
            struct outermost *outer_ptr = calloc(1, sizeof(struct outermost));
            outer_ptr->nested_ptr = calloc(1, sizeof(struct outer));
            outer_ptr->nested_ptr->substruct = small;
            if (outer_ptr->nested_ptr->substruct.d != 99.25 ||
                outer_ptr->nested_ptr->substruct.i != 987654) {
                return 0;
            }
            if (outer_ptr->nested_ptr->a || outer_ptr->nested_ptr->b) {
                return 0;
            }
            return 1;
        }
        int test_mixed_nested_access(void) {
            struct outermost s1 = {100, 0, {0, 0, {0, 0}}};
            struct outermost *s2_ptr = calloc(1, sizeof(struct outermost));
            s1.i = 2147483647;
            s1.nested_ptr = calloc(1, sizeof(struct outermost));
            s1.nested_ptr->a = 125;
            s1.nested_ptr->b = 126;
            s1.nested_ptr->substruct.d = -50.;
            s1.nested_ptr->substruct.i = -70;
            s1.nested_struct.a = 101;
            s1.nested_struct.b = 102;
            s2_ptr->i = -2147483647;
            s2_ptr->nested_ptr = calloc(1, sizeof(struct outermost));
            s2_ptr->nested_ptr->a = 5;
            s2_ptr->nested_ptr->b = 6;
            s2_ptr->nested_struct.substruct.d = 8.e8;
            s2_ptr->nested_struct.substruct.i = -5;
            s1.nested_ptr->substruct = s2_ptr->nested_struct.substruct;
            if (s1.nested_ptr->substruct.d != 8.e8 ||
                s1.nested_ptr->substruct.i != -5) {
                return 0;
            }
            if (s1.nested_ptr->a != 125 || s1.nested_ptr->b != 126) {
                return 0;
            }
            return 1;
        }
        int test_member_from_cast(void) {
            struct inner small = {20.0, 10};
            void *outer_ptr = calloc(1, sizeof(struct outer));
            ((struct outer *)outer_ptr)->substruct = small;
            if (((struct outer *)outer_ptr)->substruct.d != 20.0 ||
                ((struct outer *)outer_ptr)->substruct.i != 10) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_copy_from_member_pointer()) {
                return 1;
            }
            if (!test_copy_to_member_pointer()) {
                return 2;
            }
            if (!test_copy_from_nested_member_pointer()) {
                return 3;
            }
            if (!test_copy_to_nested_member_pointer()) {
                return 4;
            }
            if (!test_mixed_nested_access()) {
                return 5;
            }
            if (!test_member_from_cast()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── substruct
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Struct [outermost]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── nested_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── nested_struct
            │       ╰── Type
            │           ╰── Struct [outer]
            ├── Function [test_copy_from_member_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <72> Constant Double [+0e0]
            │       │           ╰── <74> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── <88> FunctionCall [malloc]
            │       │           ╰── <87> SizeOfType
            │       │               ╰── Struct [outer]
            │       ├── <97> Assign [=]
            │       │   ├── <94> Arrow
            │       │   │   ├── <92> Var [outer_ptr]
            │       │   │   ╰── a
            │       │   ╰── <96> Constant Int [100]
            │       ├── <107> Assign [=]
            │       │   ├── <104> Dot
            │       │   │   ├── <102> Arrow
            │       │   │   │   ├── <100> Var [outer_ptr]
            │       │   │   │   ╰── substruct
            │       │   │   ╰── d
            │       │   ╰── <106> Constant Double [+2.15e1]
            │       ├── <117> Assign [=]
            │       │   ├── <114> Dot
            │       │   │   ├── <112> Arrow
            │       │   │   │   ├── <110> Var [outer_ptr]
            │       │   │   │   ╰── substruct
            │       │   │   ╰── i
            │       │   ╰── <116> Constant Int [100001]
            │       ├── <126> Assign [=]
            │       │   ├── <120> Var [small]
            │       │   ╰── <125> Arrow
            │       │       ├── <123> Var [outer_ptr]
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <143>  [||]
            │       │   │       ├── <134>  [!=]
            │       │   │       │   ├── <131> Dot
            │       │   │       │   │   ├── <129> Var [small]
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <133> Constant Double [+2.15e1]
            │       │   │       ╰── <142>  [!=]
            │       │   │           ├── <139> Dot
            │       │   │           │   ├── <137> Var [small]
            │       │   │           │   ╰── i
            │       │   │           ╰── <141> Constant Int [100001]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <144> Constant Int [0]
            │       ╰── Return
            │           ╰── <149> Constant Int [1]
            ├── Function [test_copy_to_member_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <161> Constant Double [+9.925e1]
            │       │           ╰── <163> Constant Int [987654]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── <178> FunctionCall [calloc]
            │       │           ├── <173> Constant Int [1]
            │       │           ╰── <177> SizeOfType
            │       │               ╰── Struct [outer]
            │       ├── <188> Assign [=]
            │       │   ├── <184> Arrow
            │       │   │   ├── <182> Var [outer_ptr]
            │       │   │   ╰── substruct
            │       │   ╰── <187> Var [small]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <209>  [||]
            │       │   │       ├── <198>  [!=]
            │       │   │       │   ├── <195> Dot
            │       │   │       │   │   ├── <193> Arrow
            │       │   │       │   │   │   ├── <191> Var [outer_ptr]
            │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <197> Constant Double [+9.925e1]
            │       │   │       ╰── <208>  [!=]
            │       │   │           ├── <205> Dot
            │       │   │           │   ├── <203> Arrow
            │       │   │           │   │   ├── <201> Var [outer_ptr]
            │       │   │           │   │   ╰── substruct
            │       │   │           │   ╰── i
            │       │   │           ╰── <207> Constant Int [987654]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <210> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <224>  [||]
            │       │   │       ├── <218> Arrow
            │       │   │       │   ├── <216> Var [outer_ptr]
            │       │   │       │   ╰── a
            │       │   │       ╰── <223> Arrow
            │       │   │           ├── <221> Var [outer_ptr]
            │       │   │           ╰── b
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <225> Constant Int [0]
            │       ╰── Return
            │           ╰── <230> Constant Int [1]
            ├── Function [test_copy_from_nested_member_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <242> Constant Double [+9.925e1]
            │       │           ╰── <244> Constant Int [987654]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── <259> FunctionCall [calloc]
            │       │           ├── <254> Constant Int [1]
            │       │           ╰── <258> SizeOfType
            │       │               ╰── Struct [outermost]
            │       ├── <274> Assign [=]
            │       │   ├── <265> Arrow
            │       │   │   ├── <263> Var [outer_ptr]
            │       │   │   ╰── nested_ptr
            │       │   ╰── <273> FunctionCall [calloc]
            │       │       ├── <268> Constant Int [1]
            │       │       ╰── <272> SizeOfType
            │       │           ╰── Struct [outer]
            │       ├── <284> Assign [=]
            │       │   ├── <279> Arrow
            │       │   │   ├── <277> Var [outer_ptr]
            │       │   │   ╰── i
            │       │   ╰── <283> Unary [-]
            │       │       ╰── <282> Constant Int [5]
            │       ├── <294> Assign [=]
            │       │   ├── <291> Arrow
            │       │   │   ├── <289> Arrow
            │       │   │   │   ├── <287> Var [outer_ptr]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── a
            │       │   ╰── <293> Constant Int [101]
            │       ├── <304> Assign [=]
            │       │   ├── <301> Arrow
            │       │   │   ├── <299> Arrow
            │       │   │   │   ├── <297> Var [outer_ptr]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── b
            │       │   ╰── <303> Constant Int [102]
            │       ├── <316> Assign [=]
            │       │   ├── <313> Dot
            │       │   │   ├── <311> Arrow
            │       │   │   │   ├── <309> Arrow
            │       │   │   │   │   ├── <307> Var [outer_ptr]
            │       │   │   │   │   ╰── nested_ptr
            │       │   │   │   ╰── substruct
            │       │   │   ╰── d
            │       │   ╰── <315> Constant Double [+7.75e1]
            │       ├── <328> Assign [=]
            │       │   ├── <325> Dot
            │       │   │   ├── <323> Arrow
            │       │   │   │   ├── <321> Arrow
            │       │   │   │   │   ├── <319> Var [outer_ptr]
            │       │   │   │   │   ╰── nested_ptr
            │       │   │   │   ╰── substruct
            │       │   │   ╰── i
            │       │   ╰── <327> Constant Int [88]
            │       ├── <339> Assign [=]
            │       │   ├── <331> Var [small]
            │       │   ╰── <338> Arrow
            │       │       ├── <336> Arrow
            │       │       │   ├── <334> Var [outer_ptr]
            │       │       │   ╰── nested_ptr
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <356>  [||]
            │       │   │       ├── <347>  [!=]
            │       │   │       │   ├── <344> Dot
            │       │   │       │   │   ├── <342> Var [small]
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <346> Constant Double [+7.75e1]
            │       │   │       ╰── <355>  [!=]
            │       │   │           ├── <352> Dot
            │       │   │           │   ├── <350> Var [small]
            │       │   │           │   ╰── i
            │       │   │           ╰── <354> Constant Int [88]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <357> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <378>  [||]
            │       │   │       ├── <370>  [!=]
            │       │   │       │   ├── <365> Arrow
            │       │   │       │   │   ├── <363> Var [outer_ptr]
            │       │   │       │   │   ╰── i
            │       │   │       │   ╰── <369> Unary [-]
            │       │   │       │       ╰── <368> Constant Int [5]
            │       │   │       ╰── <377> Dot
            │       │   │           ├── <375> Arrow
            │       │   │           │   ├── <373> Var [outer_ptr]
            │       │   │           │   ╰── nested_struct
            │       │   │           ╰── a
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <379> Constant Int [0]
            │       ╰── Return
            │           ╰── <384> Constant Int [1]
            ├── Function [test_copy_to_nested_member_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <396> Constant Double [+9.925e1]
            │       │           ╰── <398> Constant Int [987654]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── <413> FunctionCall [calloc]
            │       │           ├── <408> Constant Int [1]
            │       │           ╰── <412> SizeOfType
            │       │               ╰── Struct [outermost]
            │       ├── <428> Assign [=]
            │       │   ├── <419> Arrow
            │       │   │   ├── <417> Var [outer_ptr]
            │       │   │   ╰── nested_ptr
            │       │   ╰── <427> FunctionCall [calloc]
            │       │       ├── <422> Constant Int [1]
            │       │       ╰── <426> SizeOfType
            │       │           ╰── Struct [outer]
            │       ├── <439> Assign [=]
            │       │   ├── <435> Arrow
            │       │   │   ├── <433> Arrow
            │       │   │   │   ├── <431> Var [outer_ptr]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── substruct
            │       │   ╰── <438> Var [small]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <464>  [||]
            │       │   │       ├── <451>  [!=]
            │       │   │       │   ├── <448> Dot
            │       │   │       │   │   ├── <446> Arrow
            │       │   │       │   │   │   ├── <444> Arrow
            │       │   │       │   │   │   │   ├── <442> Var [outer_ptr]
            │       │   │       │   │   │   │   ╰── nested_ptr
            │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <450> Constant Double [+9.925e1]
            │       │   │       ╰── <463>  [!=]
            │       │   │           ├── <460> Dot
            │       │   │           │   ├── <458> Arrow
            │       │   │           │   │   ├── <456> Arrow
            │       │   │           │   │   │   ├── <454> Var [outer_ptr]
            │       │   │           │   │   │   ╰── nested_ptr
            │       │   │           │   │   ╰── substruct
            │       │   │           │   ╰── i
            │       │   │           ╰── <462> Constant Int [987654]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <465> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <483>  [||]
            │       │   │       ├── <475> Arrow
            │       │   │       │   ├── <473> Arrow
            │       │   │       │   │   ├── <471> Var [outer_ptr]
            │       │   │       │   │   ╰── nested_ptr
            │       │   │       │   ╰── a
            │       │   │       ╰── <482> Arrow
            │       │   │           ├── <480> Arrow
            │       │   │           │   ├── <478> Var [outer_ptr]
            │       │   │           │   ╰── nested_ptr
            │       │   │           ╰── b
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <484> Constant Int [0]
            │       ╰── Return
            │           ╰── <489> Constant Int [1]
            ├── Function [test_mixed_nested_access]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ├── Type
            │       │   │   ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <501> Constant Int [100]
            │       │           ├── <503> Constant Int [0]
            │       │           ╰── Compound
            │       │               ├── <505> Constant Int [0]
            │       │               ├── <507> Constant Int [0]
            │       │               ╰── Compound
            │       │                   ├── <509> Constant Int [0]
            │       │                   ╰── <511> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s2_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── <528> FunctionCall [calloc]
            │       │           ├── <523> Constant Int [1]
            │       │           ╰── <527> SizeOfType
            │       │               ╰── Struct [outermost]
            │       ├── <537> Assign [=]
            │       │   ├── <534> Dot
            │       │   │   ├── <532> Var [s1]
            │       │   │   ╰── i
            │       │   ╰── <536> Constant Int [2147483647]
            │       ├── <551> Assign [=]
            │       │   ├── <542> Dot
            │       │   │   ├── <540> Var [s1]
            │       │   │   ╰── nested_ptr
            │       │   ╰── <550> FunctionCall [calloc]
            │       │       ├── <545> Constant Int [1]
            │       │       ╰── <549> SizeOfType
            │       │           ╰── Struct [outermost]
            │       ├── <561> Assign [=]
            │       │   ├── <558> Arrow
            │       │   │   ├── <556> Dot
            │       │   │   │   ├── <554> Var [s1]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── a
            │       │   ╰── <560> Constant Int [125]
            │       ├── <571> Assign [=]
            │       │   ├── <568> Arrow
            │       │   │   ├── <566> Dot
            │       │   │   │   ├── <564> Var [s1]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── b
            │       │   ╰── <570> Constant Int [126]
            │       ├── <585> Assign [=]
            │       │   ├── <580> Dot
            │       │   │   ├── <578> Arrow
            │       │   │   │   ├── <576> Dot
            │       │   │   │   │   ├── <574> Var [s1]
            │       │   │   │   │   ╰── nested_ptr
            │       │   │   │   ╰── substruct
            │       │   │   ╰── d
            │       │   ╰── <584> Unary [-]
            │       │       ╰── <583> Constant Double [+5e1]
            │       ├── <599> Assign [=]
            │       │   ├── <594> Dot
            │       │   │   ├── <592> Arrow
            │       │   │   │   ├── <590> Dot
            │       │   │   │   │   ├── <588> Var [s1]
            │       │   │   │   │   ╰── nested_ptr
            │       │   │   │   ╰── substruct
            │       │   │   ╰── i
            │       │   ╰── <598> Unary [-]
            │       │       ╰── <597> Constant Int [70]
            │       ├── <609> Assign [=]
            │       │   ├── <606> Dot
            │       │   │   ├── <604> Dot
            │       │   │   │   ├── <602> Var [s1]
            │       │   │   │   ╰── nested_struct
            │       │   │   ╰── a
            │       │   ╰── <608> Constant Int [101]
            │       ├── <619> Assign [=]
            │       │   ├── <616> Dot
            │       │   │   ├── <614> Dot
            │       │   │   │   ├── <612> Var [s1]
            │       │   │   │   ╰── nested_struct
            │       │   │   ╰── b
            │       │   ╰── <618> Constant Int [102]
            │       ├── <629> Assign [=]
            │       │   ├── <624> Arrow
            │       │   │   ├── <622> Var [s2_ptr]
            │       │   │   ╰── i
            │       │   ╰── <628> Unary [-]
            │       │       ╰── <627> Constant Int [2147483647]
            │       ├── <643> Assign [=]
            │       │   ├── <634> Arrow
            │       │   │   ├── <632> Var [s2_ptr]
            │       │   │   ╰── nested_ptr
            │       │   ╰── <642> FunctionCall [calloc]
            │       │       ├── <637> Constant Int [1]
            │       │       ╰── <641> SizeOfType
            │       │           ╰── Struct [outermost]
            │       ├── <653> Assign [=]
            │       │   ├── <650> Arrow
            │       │   │   ├── <648> Arrow
            │       │   │   │   ├── <646> Var [s2_ptr]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── a
            │       │   ╰── <652> Constant Int [5]
            │       ├── <663> Assign [=]
            │       │   ├── <660> Arrow
            │       │   │   ├── <658> Arrow
            │       │   │   │   ├── <656> Var [s2_ptr]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── b
            │       │   ╰── <662> Constant Int [6]
            │       ├── <675> Assign [=]
            │       │   ├── <672> Dot
            │       │   │   ├── <670> Dot
            │       │   │   │   ├── <668> Arrow
            │       │   │   │   │   ├── <666> Var [s2_ptr]
            │       │   │   │   │   ╰── nested_struct
            │       │   │   │   ╰── substruct
            │       │   │   ╰── d
            │       │   ╰── <674> Constant Double [+8e8]
            │       ├── <689> Assign [=]
            │       │   ├── <684> Dot
            │       │   │   ├── <682> Dot
            │       │   │   │   ├── <680> Arrow
            │       │   │   │   │   ├── <678> Var [s2_ptr]
            │       │   │   │   │   ╰── nested_struct
            │       │   │   │   ╰── substruct
            │       │   │   ╰── i
            │       │   ╰── <688> Unary [-]
            │       │       ╰── <687> Constant Int [5]
            │       ├── <704> Assign [=]
            │       │   ├── <696> Arrow
            │       │   │   ├── <694> Dot
            │       │   │   │   ├── <692> Var [s1]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── substruct
            │       │   ╰── <703> Dot
            │       │       ├── <701> Arrow
            │       │       │   ├── <699> Var [s2_ptr]
            │       │       │   ╰── nested_struct
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <731>  [||]
            │       │   │       ├── <716>  [!=]
            │       │   │       │   ├── <713> Dot
            │       │   │       │   │   ├── <711> Arrow
            │       │   │       │   │   │   ├── <709> Dot
            │       │   │       │   │   │   │   ├── <707> Var [s1]
            │       │   │       │   │   │   │   ╰── nested_ptr
            │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <715> Constant Double [+8e8]
            │       │   │       ╰── <730>  [!=]
            │       │   │           ├── <725> Dot
            │       │   │           │   ├── <723> Arrow
            │       │   │           │   │   ├── <721> Dot
            │       │   │           │   │   │   ├── <719> Var [s1]
            │       │   │           │   │   │   ╰── nested_ptr
            │       │   │           │   │   ╰── substruct
            │       │   │           │   ╰── i
            │       │   │           ╰── <729> Unary [-]
            │       │   │               ╰── <728> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <732> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <756>  [||]
            │       │   │       ├── <745>  [!=]
            │       │   │       │   ├── <742> Arrow
            │       │   │       │   │   ├── <740> Dot
            │       │   │       │   │   │   ├── <738> Var [s1]
            │       │   │       │   │   │   ╰── nested_ptr
            │       │   │       │   │   ╰── a
            │       │   │       │   ╰── <744> Constant Int [125]
            │       │   │       ╰── <755>  [!=]
            │       │   │           ├── <752> Arrow
            │       │   │           │   ├── <750> Dot
            │       │   │           │   │   ├── <748> Var [s1]
            │       │   │           │   │   ╰── nested_ptr
            │       │   │           │   ╰── b
            │       │   │           ╰── <754> Constant Int [126]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <757> Constant Int [0]
            │       ╰── Return
            │           ╰── <762> Constant Int [1]
            ├── Function [test_member_from_cast]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <774> Constant Double [+2e1]
            │       │           ╰── <776> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Void
            │       │   ╰── Initializer
            │       │       ╰── <790> FunctionCall [calloc]
            │       │           ├── <785> Constant Int [1]
            │       │           ╰── <789> SizeOfType
            │       │               ╰── Struct [outer]
            │       ├── <806> Assign [=]
            │       │   ├── <802> Arrow
            │       │   │   ├── <800> Cast
            │       │   │   │   ├── Target
            │       │   │   │   │   ╰── Pointer
            │       │   │   │   │       ╰── Struct [outer]
            │       │   │   │   ╰── Expression
            │       │   │   │       ╰── <798> Var [outer_ptr]
            │       │   │   ╰── substruct
            │       │   ╰── <805> Var [small]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <839>  [||]
            │       │   │       ├── <822>  [!=]
            │       │   │       │   ├── <819> Dot
            │       │   │       │   │   ├── <817> Arrow
            │       │   │       │   │   │   ├── <815> Cast
            │       │   │       │   │   │   │   ├── Target
            │       │   │       │   │   │   │   │   ╰── Pointer
            │       │   │       │   │   │   │   │       ╰── Struct [outer]
            │       │   │       │   │   │   │   ╰── Expression
            │       │   │       │   │   │   │       ╰── <813> Var [outer_ptr]
            │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <821> Constant Double [+2e1]
            │       │   │       ╰── <838>  [!=]
            │       │   │           ├── <835> Dot
            │       │   │           │   ├── <833> Arrow
            │       │   │           │   │   ├── <831> Cast
            │       │   │           │   │   │   ├── Target
            │       │   │           │   │   │   │   ╰── Pointer
            │       │   │           │   │   │   │       ╰── Struct [outer]
            │       │   │           │   │   │   ╰── Expression
            │       │   │           │   │   │       ╰── <829> Var [outer_ptr]
            │       │   │           │   │   ╰── substruct
            │       │   │           │   ╰── i
            │       │   │           ╰── <837> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <840> Constant Int [0]
            │       ╰── Return
            │           ╰── <845> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <856> Unary [!]
                    │   │       ╰── <855> FunctionCall [test_copy_from_member_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <857> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <865> Unary [!]
                    │   │       ╰── <864> FunctionCall [test_copy_to_member_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <866> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <874> Unary [!]
                    │   │       ╰── <873> FunctionCall [test_copy_from_nested_member_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <875> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <883> Unary [!]
                    │   │       ╰── <882> FunctionCall [test_copy_to_nested_member_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <884> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <892> Unary [!]
                    │   │       ╰── <891> FunctionCall [test_mixed_nested_access]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <893> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <901> Unary [!]
                    │   │       ╰── <900> FunctionCall [test_member_from_cast]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <902> Constant Int [6]
                    ╰── Return
                        ╰── <907> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_copy_struct_with_dot_operator() {
    let src = r#"
        struct inner {
            signed char a;
            signed char b;
            signed char arr[3];
        };
        struct outer {
            struct inner substruct;
            signed char x;
            signed char y;
        };
        struct outermost {
            struct outer nested;
            int i;
        };
        int test_copy_from_member(void) {
            static struct outer big_struct = {{10, 9, {8, 7, 6}}, 5, 4};
            char arr[3] = {'a', 'b', 'c'};
            struct inner substruct = {-1, -1, {-1, -1, -1}};
            char arr2[3] = {'d', 'e', 'f'};
            substruct = big_struct.substruct;
            if (substruct.a != 10 || substruct.b != 9 || substruct.arr[0] != 8 ||
                substruct.arr[1] != 7 || substruct.arr[2] != 6) {
                return 0;
            }
            if (arr[0] != 'a' || arr[1] != 'b' || arr[2] != 'c' || arr2[0] != 'd' ||
                arr2[1] != 'e' || arr2[2] != 'f') {
                return 0;
            }
            return 1;
        }
        int test_copy_to_member(void) {
            static struct outer big_struct = {{0, 0, {0, 0, 0}}, 0, 0};
            struct inner small_struct = {-1, -2, {-3, -4, -5}};
            big_struct.substruct = small_struct;
            if (big_struct.substruct.a != -1 || big_struct.substruct.b != -2 ||
                big_struct.substruct.arr[0] != -3 ||
                big_struct.substruct.arr[1] != -4 ||
                big_struct.substruct.arr[2] != -5) {
                return 0;
            }
            if (big_struct.x || big_struct.y) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_nested_member(void) {
            struct outermost biggest_struct = {{{-1, -2, {-3, -4, -5}}, -6, -7}, 0};
            static struct inner small_struct;
            small_struct = biggest_struct.nested.substruct;
            if (small_struct.a != -1 || small_struct.b != -2 ||
                small_struct.arr[0] != -3 || small_struct.arr[1] != -4 ||
                small_struct.arr[2] != -5) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_nested_member(void) {
            struct outermost biggest_struct = {{{0, 0, {0, 0, 0}}, 0, 0}, -1};
            static struct inner small_struct = {50, 51, {52, 53, 54}};
            biggest_struct.nested.substruct = small_struct;
            if (biggest_struct.nested.substruct.a != 50 ||
                biggest_struct.nested.substruct.b != 51 ||
                biggest_struct.nested.substruct.arr[0] != 52 ||
                biggest_struct.nested.substruct.arr[1] != 53 ||
                biggest_struct.nested.substruct.arr[2] != 54) {
                return 0;
            }
            if (biggest_struct.nested.x || biggest_struct.nested.y) {
                return 0;
            }
            if (biggest_struct.i != -1) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_conditional(void) {
            struct outer big_struct = {{127, -128, {61, 62, 63}}, -10, -11};
            struct outer big_struct2 = {{0, 1, {2, 3, 4}}, 5, 6};
            static int t = 1;
            static int f = 0;
            struct inner small_struct = (f ? big_struct : big_struct2).substruct;
            if (small_struct.a != 0 || small_struct.b != 1 ||
                small_struct.arr[0] != 2 || small_struct.arr[1] != 3 ||
                small_struct.arr[2] != 4) {
                return 0;
            }
            small_struct = (t ? big_struct : big_struct2).substruct;
            if (small_struct.a != 127 || small_struct.b != -128 ||
                small_struct.arr[0] != 61 || small_struct.arr[1] != 62 ||
                small_struct.arr[2] != 63) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_assignment(void) {
            struct outer big_struct = {{127, -128, {61, 62, 63}}, -10, -11};
            static struct outer big_struct2;
            static struct inner small_struct;
            small_struct = (big_struct2 = big_struct).substruct;
            if (small_struct.a != 127 || small_struct.b != -128 ||
                small_struct.arr[0] != 61 || small_struct.arr[1] != 62 ||
                small_struct.arr[2] != 63) {
                return 0;
            }
            if (big_struct2.substruct.a != 127 || big_struct2.substruct.b != -128 ||
                big_struct2.substruct.arr[0] != 61 ||
                big_struct2.substruct.arr[1] != 62 ||
                big_struct2.substruct.arr[2] != 63 || big_struct2.x != -10 ||
                big_struct2.y != -11) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_copy_from_member()) {
                return 1;
            }
            if (!test_copy_to_member()) {
                return 2;
            }
            if (!test_copy_from_nested_member()) {
                return 3;
            }
            if (!test_copy_to_nested_member()) {
                return 4;
            }
            if (!test_copy_from_conditional()) {
                return 6;
            }
            if (!test_copy_from_assignment()) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Signed Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Signed Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Signed Char
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── substruct
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Signed Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Signed Char
            ├── Struct [outermost]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── nested
            │   │   ╰── Type
            │   │       ╰── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Function [test_copy_from_member]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── big_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── Compound
            │       │   │       │   ├── <52> Constant Int [10]
            │       │   │       │   ├── <54> Constant Int [9]
            │       │   │       │   ╰── Compound
            │       │   │       │       ├── <56> Constant Int [8]
            │       │   │       │       ├── <58> Constant Int [7]
            │       │   │       │       ╰── <60> Constant Int [6]
            │       │   │       ├── <64> Constant Int [5]
            │       │   │       ╰── <66> Constant Int [4]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <75> Constant Int [97]
            │       │           ├── <77> Constant Int [98]
            │       │           ╰── <79> Constant Int [99]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── substruct
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <89> Unary [-]
            │       │           │   ╰── <88> Constant Int [1]
            │       │           ├── <93> Unary [-]
            │       │           │   ╰── <92> Constant Int [1]
            │       │           ╰── Compound
            │       │               ├── <97> Unary [-]
            │       │               │   ╰── <96> Constant Int [1]
            │       │               ├── <101> Unary [-]
            │       │               │   ╰── <100> Constant Int [1]
            │       │               ╰── <105> Unary [-]
            │       │                   ╰── <104> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr2
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <115> Constant Int [100]
            │       │           ├── <117> Constant Int [101]
            │       │           ╰── <119> Constant Int [102]
            │       ├── <130> Assign [=]
            │       │   ├── <124> Var [substruct]
            │       │   ╰── <129> Dot
            │       │       ├── <127> Var [big_struct]
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <180>  [||]
            │       │   │       ├── <169>  [||]
            │       │   │       │   ├── <158>  [||]
            │       │   │       │   │   ├── <147>  [||]
            │       │   │       │   │   │   ├── <138>  [!=]
            │       │   │       │   │   │   │   ├── <135> Dot
            │       │   │       │   │   │   │   │   ├── <133> Var [substruct]
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <137> Constant Int [10]
            │       │   │       │   │   │   ╰── <146>  [!=]
            │       │   │       │   │   │       ├── <143> Dot
            │       │   │       │   │   │       │   ├── <141> Var [substruct]
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <145> Constant Int [9]
            │       │   │       │   │   ╰── <157>  [!=]
            │       │   │       │   │       ├── <154> Subscript
            │       │   │       │   │       │   ├── <152> Dot
            │       │   │       │   │       │   │   ├── <150> Var [substruct]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <153> Constant Int [0]
            │       │   │       │   │       ╰── <156> Constant Int [8]
            │       │   │       │   ╰── <168>  [!=]
            │       │   │       │       ├── <165> Subscript
            │       │   │       │       │   ├── <163> Dot
            │       │   │       │       │   │   ├── <161> Var [substruct]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <164> Constant Int [1]
            │       │   │       │       ╰── <167> Constant Int [7]
            │       │   │       ╰── <179>  [!=]
            │       │   │           ├── <176> Subscript
            │       │   │           │   ├── <174> Dot
            │       │   │           │   │   ├── <172> Var [substruct]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <175> Constant Int [2]
            │       │   │           ╰── <178> Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <181> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <237>  [||]
            │       │   │       ├── <228>  [||]
            │       │   │       │   ├── <219>  [||]
            │       │   │       │   │   ├── <210>  [||]
            │       │   │       │   │   │   ├── <201>  [||]
            │       │   │       │   │   │   │   ├── <192>  [!=]
            │       │   │       │   │   │   │   │   ├── <189> Subscript
            │       │   │       │   │   │   │   │   │   ├── <187> Var [arr]
            │       │   │       │   │   │   │   │   │   ╰── <188> Constant Int [0]
            │       │   │       │   │   │   │   │   ╰── <191> Constant Int [97]
            │       │   │       │   │   │   │   ╰── <200>  [!=]
            │       │   │       │   │   │   │       ├── <197> Subscript
            │       │   │       │   │   │   │       │   ├── <195> Var [arr]
            │       │   │       │   │   │   │       │   ╰── <196> Constant Int [1]
            │       │   │       │   │   │   │       ╰── <199> Constant Int [98]
            │       │   │       │   │   │   ╰── <209>  [!=]
            │       │   │       │   │   │       ├── <206> Subscript
            │       │   │       │   │   │       │   ├── <204> Var [arr]
            │       │   │       │   │   │       │   ╰── <205> Constant Int [2]
            │       │   │       │   │   │       ╰── <208> Constant Int [99]
            │       │   │       │   │   ╰── <218>  [!=]
            │       │   │       │   │       ├── <215> Subscript
            │       │   │       │   │       │   ├── <213> Var [arr2]
            │       │   │       │   │       │   ╰── <214> Constant Int [0]
            │       │   │       │   │       ╰── <217> Constant Int [100]
            │       │   │       │   ╰── <227>  [!=]
            │       │   │       │       ├── <224> Subscript
            │       │   │       │       │   ├── <222> Var [arr2]
            │       │   │       │       │   ╰── <223> Constant Int [1]
            │       │   │       │       ╰── <226> Constant Int [101]
            │       │   │       ╰── <236>  [!=]
            │       │   │           ├── <233> Subscript
            │       │   │           │   ├── <231> Var [arr2]
            │       │   │           │   ╰── <232> Constant Int [2]
            │       │   │           ╰── <235> Constant Int [102]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <238> Constant Int [0]
            │       ╰── Return
            │           ╰── <243> Constant Int [1]
            ├── Function [test_copy_to_member]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── big_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── Compound
            │       │   │       │   ├── <256> Constant Int [0]
            │       │   │       │   ├── <258> Constant Int [0]
            │       │   │       │   ╰── Compound
            │       │   │       │       ├── <260> Constant Int [0]
            │       │   │       │       ├── <262> Constant Int [0]
            │       │   │       │       ╰── <264> Constant Int [0]
            │       │   │       ├── <268> Constant Int [0]
            │       │   │       ╰── <270> Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <280> Unary [-]
            │       │           │   ╰── <279> Constant Int [1]
            │       │           ├── <284> Unary [-]
            │       │           │   ╰── <283> Constant Int [2]
            │       │           ╰── Compound
            │       │               ├── <288> Unary [-]
            │       │               │   ╰── <287> Constant Int [3]
            │       │               ├── <292> Unary [-]
            │       │               │   ╰── <291> Constant Int [4]
            │       │               ╰── <296> Unary [-]
            │       │                   ╰── <295> Constant Int [5]
            │       ├── <308> Assign [=]
            │       │   ├── <304> Dot
            │       │   │   ├── <302> Var [big_struct]
            │       │   │   ╰── substruct
            │       │   ╰── <307> Var [small_struct]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <378>  [||]
            │       │   │       ├── <363>  [||]
            │       │   │       │   ├── <348>  [||]
            │       │   │       │   │   ├── <333>  [||]
            │       │   │       │   │   │   ├── <320>  [!=]
            │       │   │       │   │   │   │   ├── <315> Dot
            │       │   │       │   │   │   │   │   ├── <313> Dot
            │       │   │       │   │   │   │   │   │   ├── <311> Var [big_struct]
            │       │   │       │   │   │   │   │   │   ╰── substruct
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <319> Unary [-]
            │       │   │       │   │   │   │       ╰── <318> Constant Int [1]
            │       │   │       │   │   │   ╰── <332>  [!=]
            │       │   │       │   │   │       ├── <327> Dot
            │       │   │       │   │   │       │   ├── <325> Dot
            │       │   │       │   │   │       │   │   ├── <323> Var [big_struct]
            │       │   │       │   │   │       │   │   ╰── substruct
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <331> Unary [-]
            │       │   │       │   │   │           ╰── <330> Constant Int [2]
            │       │   │       │   │   ╰── <347>  [!=]
            │       │   │       │   │       ├── <342> Subscript
            │       │   │       │   │       │   ├── <340> Dot
            │       │   │       │   │       │   │   ├── <338> Dot
            │       │   │       │   │       │   │   │   ├── <336> Var [big_struct]
            │       │   │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <341> Constant Int [0]
            │       │   │       │   │       ╰── <346> Unary [-]
            │       │   │       │   │           ╰── <345> Constant Int [3]
            │       │   │       │   ╰── <362>  [!=]
            │       │   │       │       ├── <357> Subscript
            │       │   │       │       │   ├── <355> Dot
            │       │   │       │       │   │   ├── <353> Dot
            │       │   │       │       │   │   │   ├── <351> Var [big_struct]
            │       │   │       │       │   │   │   ╰── substruct
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <356> Constant Int [1]
            │       │   │       │       ╰── <361> Unary [-]
            │       │   │       │           ╰── <360> Constant Int [4]
            │       │   │       ╰── <377>  [!=]
            │       │   │           ├── <372> Subscript
            │       │   │           │   ├── <370> Dot
            │       │   │           │   │   ├── <368> Dot
            │       │   │           │   │   │   ├── <366> Var [big_struct]
            │       │   │           │   │   │   ╰── substruct
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <371> Constant Int [2]
            │       │   │           ╰── <376> Unary [-]
            │       │   │               ╰── <375> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <379> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <393>  [||]
            │       │   │       ├── <387> Dot
            │       │   │       │   ├── <385> Var [big_struct]
            │       │   │       │   ╰── x
            │       │   │       ╰── <392> Dot
            │       │   │           ├── <390> Var [big_struct]
            │       │   │           ╰── y
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <394> Constant Int [0]
            │       ╰── Return
            │           ╰── <399> Constant Int [1]
            ├── Function [test_copy_from_nested_member]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── biggest_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── Compound
            │       │           │   │   ├── <413> Unary [-]
            │       │           │   │   │   ╰── <412> Constant Int [1]
            │       │           │   │   ├── <417> Unary [-]
            │       │           │   │   │   ╰── <416> Constant Int [2]
            │       │           │   │   ╰── Compound
            │       │           │   │       ├── <421> Unary [-]
            │       │           │   │       │   ╰── <420> Constant Int [3]
            │       │           │   │       ├── <425> Unary [-]
            │       │           │   │       │   ╰── <424> Constant Int [4]
            │       │           │   │       ╰── <429> Unary [-]
            │       │           │   │           ╰── <428> Constant Int [5]
            │       │           │   ├── <435> Unary [-]
            │       │           │   │   ╰── <434> Constant Int [6]
            │       │           │   ╰── <439> Unary [-]
            │       │           │       ╰── <438> Constant Int [7]
            │       │           ╰── <442> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Static
            │       ├── <461> Assign [=]
            │       │   ├── <453> Var [small_struct]
            │       │   ╰── <460> Dot
            │       │       ├── <458> Dot
            │       │       │   ├── <456> Var [biggest_struct]
            │       │       │   ╰── nested
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <521>  [||]
            │       │   │       ├── <508>  [||]
            │       │   │       │   ├── <495>  [||]
            │       │   │       │   │   ├── <482>  [||]
            │       │   │       │   │   │   ├── <471>  [!=]
            │       │   │       │   │   │   │   ├── <466> Dot
            │       │   │       │   │   │   │   │   ├── <464> Var [small_struct]
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <470> Unary [-]
            │       │   │       │   │   │   │       ╰── <469> Constant Int [1]
            │       │   │       │   │   │   ╰── <481>  [!=]
            │       │   │       │   │   │       ├── <476> Dot
            │       │   │       │   │   │       │   ├── <474> Var [small_struct]
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <480> Unary [-]
            │       │   │       │   │   │           ╰── <479> Constant Int [2]
            │       │   │       │   │   ╰── <494>  [!=]
            │       │   │       │   │       ├── <489> Subscript
            │       │   │       │   │       │   ├── <487> Dot
            │       │   │       │   │       │   │   ├── <485> Var [small_struct]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <488> Constant Int [0]
            │       │   │       │   │       ╰── <493> Unary [-]
            │       │   │       │   │           ╰── <492> Constant Int [3]
            │       │   │       │   ╰── <507>  [!=]
            │       │   │       │       ├── <502> Subscript
            │       │   │       │       │   ├── <500> Dot
            │       │   │       │       │   │   ├── <498> Var [small_struct]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <501> Constant Int [1]
            │       │   │       │       ╰── <506> Unary [-]
            │       │   │       │           ╰── <505> Constant Int [4]
            │       │   │       ╰── <520>  [!=]
            │       │   │           ├── <515> Subscript
            │       │   │           │   ├── <513> Dot
            │       │   │           │   │   ├── <511> Var [small_struct]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <514> Constant Int [2]
            │       │   │           ╰── <519> Unary [-]
            │       │   │               ╰── <518> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <522> Constant Int [0]
            │       ╰── Return
            │           ╰── <527> Constant Int [1]
            ├── Function [test_copy_to_nested_member]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── biggest_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── Compound
            │       │           │   │   ├── <539> Constant Int [0]
            │       │           │   │   ├── <541> Constant Int [0]
            │       │           │   │   ╰── Compound
            │       │           │   │       ├── <543> Constant Int [0]
            │       │           │   │       ├── <545> Constant Int [0]
            │       │           │   │       ╰── <547> Constant Int [0]
            │       │           │   ├── <551> Constant Int [0]
            │       │           │   ╰── <553> Constant Int [0]
            │       │           ╰── <558> Unary [-]
            │       │               ╰── <557> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── <567> Constant Int [50]
            │       │   │       ├── <569> Constant Int [51]
            │       │   │       ╰── Compound
            │       │   │           ├── <571> Constant Int [52]
            │       │   │           ├── <573> Constant Int [53]
            │       │   │           ╰── <575> Constant Int [54]
            │       │   ╰── Static
            │       ├── <589> Assign [=]
            │       │   ├── <585> Dot
            │       │   │   ├── <583> Dot
            │       │   │   │   ├── <581> Var [biggest_struct]
            │       │   │   │   ╰── nested
            │       │   │   ╰── substruct
            │       │   ╰── <588> Var [small_struct]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <659>  [||]
            │       │   │       ├── <644>  [||]
            │       │   │       │   ├── <629>  [||]
            │       │   │       │   │   ├── <614>  [||]
            │       │   │       │   │   │   ├── <601>  [!=]
            │       │   │       │   │   │   │   ├── <598> Dot
            │       │   │       │   │   │   │   │   ├── <596> Dot
            │       │   │       │   │   │   │   │   │   ├── <594> Dot
            │       │   │       │   │   │   │   │   │   │   ├── <592> Var [biggest_struct]
            │       │   │       │   │   │   │   │   │   │   ╰── nested
            │       │   │       │   │   │   │   │   │   ╰── substruct
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <600> Constant Int [50]
            │       │   │       │   │   │   ╰── <613>  [!=]
            │       │   │       │   │   │       ├── <610> Dot
            │       │   │       │   │   │       │   ├── <608> Dot
            │       │   │       │   │   │       │   │   ├── <606> Dot
            │       │   │       │   │   │       │   │   │   ├── <604> Var [biggest_struct]
            │       │   │       │   │   │       │   │   │   ╰── nested
            │       │   │       │   │   │       │   │   ╰── substruct
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <612> Constant Int [51]
            │       │   │       │   │   ╰── <628>  [!=]
            │       │   │       │   │       ├── <625> Subscript
            │       │   │       │   │       │   ├── <623> Dot
            │       │   │       │   │       │   │   ├── <621> Dot
            │       │   │       │   │       │   │   │   ├── <619> Dot
            │       │   │       │   │       │   │   │   │   ├── <617> Var [biggest_struct]
            │       │   │       │   │       │   │   │   │   ╰── nested
            │       │   │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <624> Constant Int [0]
            │       │   │       │   │       ╰── <627> Constant Int [52]
            │       │   │       │   ╰── <643>  [!=]
            │       │   │       │       ├── <640> Subscript
            │       │   │       │       │   ├── <638> Dot
            │       │   │       │       │   │   ├── <636> Dot
            │       │   │       │       │   │   │   ├── <634> Dot
            │       │   │       │       │   │   │   │   ├── <632> Var [biggest_struct]
            │       │   │       │       │   │   │   │   ╰── nested
            │       │   │       │       │   │   │   ╰── substruct
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <639> Constant Int [1]
            │       │   │       │       ╰── <642> Constant Int [53]
            │       │   │       ╰── <658>  [!=]
            │       │   │           ├── <655> Subscript
            │       │   │           │   ├── <653> Dot
            │       │   │           │   │   ├── <651> Dot
            │       │   │           │   │   │   ├── <649> Dot
            │       │   │           │   │   │   │   ├── <647> Var [biggest_struct]
            │       │   │           │   │   │   │   ╰── nested
            │       │   │           │   │   │   ╰── substruct
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <654> Constant Int [2]
            │       │   │           ╰── <657> Constant Int [54]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <660> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <678>  [||]
            │       │   │       ├── <670> Dot
            │       │   │       │   ├── <668> Dot
            │       │   │       │   │   ├── <666> Var [biggest_struct]
            │       │   │       │   │   ╰── nested
            │       │   │       │   ╰── x
            │       │   │       ╰── <677> Dot
            │       │   │           ├── <675> Dot
            │       │   │           │   ├── <673> Var [biggest_struct]
            │       │   │           │   ╰── nested
            │       │   │           ╰── y
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <679> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <692>  [!=]
            │       │   │       ├── <687> Dot
            │       │   │       │   ├── <685> Var [biggest_struct]
            │       │   │       │   ╰── i
            │       │   │       ╰── <691> Unary [-]
            │       │   │           ╰── <690> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <693> Constant Int [0]
            │       ╰── Return
            │           ╰── <698> Constant Int [1]
            ├── Function [test_copy_from_conditional]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── big_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <710> Constant Int [127]
            │       │           │   ├── <714> Unary [-]
            │       │           │   │   ╰── <713> Constant Int [128]
            │       │           │   ╰── Compound
            │       │           │       ├── <716> Constant Int [61]
            │       │           │       ├── <718> Constant Int [62]
            │       │           │       ╰── <720> Constant Int [63]
            │       │           ├── <726> Unary [-]
            │       │           │   ╰── <725> Constant Int [10]
            │       │           ╰── <730> Unary [-]
            │       │               ╰── <729> Constant Int [11]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── big_struct2
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <738> Constant Int [0]
            │       │           │   ├── <740> Constant Int [1]
            │       │           │   ╰── Compound
            │       │           │       ├── <742> Constant Int [2]
            │       │           │       ├── <744> Constant Int [3]
            │       │           │       ╰── <746> Constant Int [4]
            │       │           ├── <750> Constant Int [5]
            │       │           ╰── <752> Constant Int [6]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── t
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <760> Constant Int [1]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <767> Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── <783> Dot
            │       │           ├── <781> Conditional [?]
            │       │           │   ├── <775> Var [f]
            │       │           │   ├── Then
            │       │           │   │   ╰── <777> Var [big_struct]
            │       │           │   ╰── Else
            │       │           │       ╰── <779> Var [big_struct2]
            │       │           ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <834>  [||]
            │       │   │       ├── <823>  [||]
            │       │   │       │   ├── <812>  [||]
            │       │   │       │   │   ├── <801>  [||]
            │       │   │       │   │   │   ├── <792>  [!=]
            │       │   │       │   │   │   │   ├── <789> Dot
            │       │   │       │   │   │   │   │   ├── <787> Var [small_struct]
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <791> Constant Int [0]
            │       │   │       │   │   │   ╰── <800>  [!=]
            │       │   │       │   │   │       ├── <797> Dot
            │       │   │       │   │   │       │   ├── <795> Var [small_struct]
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <799> Constant Int [1]
            │       │   │       │   │   ╰── <811>  [!=]
            │       │   │       │   │       ├── <808> Subscript
            │       │   │       │   │       │   ├── <806> Dot
            │       │   │       │   │       │   │   ├── <804> Var [small_struct]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <807> Constant Int [0]
            │       │   │       │   │       ╰── <810> Constant Int [2]
            │       │   │       │   ╰── <822>  [!=]
            │       │   │       │       ├── <819> Subscript
            │       │   │       │       │   ├── <817> Dot
            │       │   │       │       │   │   ├── <815> Var [small_struct]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <818> Constant Int [1]
            │       │   │       │       ╰── <821> Constant Int [3]
            │       │   │       ╰── <833>  [!=]
            │       │   │           ├── <830> Subscript
            │       │   │           │   ├── <828> Dot
            │       │   │           │   │   ├── <826> Var [small_struct]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <829> Constant Int [2]
            │       │   │           ╰── <832> Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <835> Constant Int [0]
            │       ├── <853> Assign [=]
            │       │   ├── <841> Var [small_struct]
            │       │   ╰── <852> Dot
            │       │       ├── <850> Conditional [?]
            │       │       │   ├── <844> Var [t]
            │       │       │   ├── Then
            │       │       │   │   ╰── <846> Var [big_struct]
            │       │       │   ╰── Else
            │       │       │       ╰── <848> Var [big_struct2]
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <905>  [||]
            │       │   │       ├── <894>  [||]
            │       │   │       │   ├── <883>  [||]
            │       │   │       │   │   ├── <872>  [||]
            │       │   │       │   │   │   ├── <861>  [!=]
            │       │   │       │   │   │   │   ├── <858> Dot
            │       │   │       │   │   │   │   │   ├── <856> Var [small_struct]
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <860> Constant Int [127]
            │       │   │       │   │   │   ╰── <871>  [!=]
            │       │   │       │   │   │       ├── <866> Dot
            │       │   │       │   │   │       │   ├── <864> Var [small_struct]
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <870> Unary [-]
            │       │   │       │   │   │           ╰── <869> Constant Int [128]
            │       │   │       │   │   ╰── <882>  [!=]
            │       │   │       │   │       ├── <879> Subscript
            │       │   │       │   │       │   ├── <877> Dot
            │       │   │       │   │       │   │   ├── <875> Var [small_struct]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <878> Constant Int [0]
            │       │   │       │   │       ╰── <881> Constant Int [61]
            │       │   │       │   ╰── <893>  [!=]
            │       │   │       │       ├── <890> Subscript
            │       │   │       │       │   ├── <888> Dot
            │       │   │       │       │   │   ├── <886> Var [small_struct]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <889> Constant Int [1]
            │       │   │       │       ╰── <892> Constant Int [62]
            │       │   │       ╰── <904>  [!=]
            │       │   │           ├── <901> Subscript
            │       │   │           │   ├── <899> Dot
            │       │   │           │   │   ├── <897> Var [small_struct]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <900> Constant Int [2]
            │       │   │           ╰── <903> Constant Int [63]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <906> Constant Int [0]
            │       ╰── Return
            │           ╰── <911> Constant Int [1]
            ├── Function [test_copy_from_assignment]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── big_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <923> Constant Int [127]
            │       │           │   ├── <927> Unary [-]
            │       │           │   │   ╰── <926> Constant Int [128]
            │       │           │   ╰── Compound
            │       │           │       ├── <929> Constant Int [61]
            │       │           │       ├── <931> Constant Int [62]
            │       │           │       ╰── <933> Constant Int [63]
            │       │           ├── <939> Unary [-]
            │       │           │   ╰── <938> Constant Int [10]
            │       │           ╰── <943> Unary [-]
            │       │               ╰── <942> Constant Int [11]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── big_struct2
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Static
            │       ├── <971> Assign [=]
            │       │   ├── <960> Var [small_struct]
            │       │   ╰── <970> Dot
            │       │       ├── <968> Assign [=]
            │       │       │   ├── <963> Var [big_struct2]
            │       │       │   ╰── <966> Var [big_struct]
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1023>  [||]
            │       │   │       ├── <1012>  [||]
            │       │   │       │   ├── <1001>  [||]
            │       │   │       │   │   ├── <990>  [||]
            │       │   │       │   │   │   ├── <979>  [!=]
            │       │   │       │   │   │   │   ├── <976> Dot
            │       │   │       │   │   │   │   │   ├── <974> Var [small_struct]
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <978> Constant Int [127]
            │       │   │       │   │   │   ╰── <989>  [!=]
            │       │   │       │   │   │       ├── <984> Dot
            │       │   │       │   │   │       │   ├── <982> Var [small_struct]
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <988> Unary [-]
            │       │   │       │   │   │           ╰── <987> Constant Int [128]
            │       │   │       │   │   ╰── <1000>  [!=]
            │       │   │       │   │       ├── <997> Subscript
            │       │   │       │   │       │   ├── <995> Dot
            │       │   │       │   │       │   │   ├── <993> Var [small_struct]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <996> Constant Int [0]
            │       │   │       │   │       ╰── <999> Constant Int [61]
            │       │   │       │   ╰── <1011>  [!=]
            │       │   │       │       ├── <1008> Subscript
            │       │   │       │       │   ├── <1006> Dot
            │       │   │       │       │   │   ├── <1004> Var [small_struct]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <1007> Constant Int [1]
            │       │   │       │       ╰── <1010> Constant Int [62]
            │       │   │       ╰── <1022>  [!=]
            │       │   │           ├── <1019> Subscript
            │       │   │           │   ├── <1017> Dot
            │       │   │           │   │   ├── <1015> Var [small_struct]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <1018> Constant Int [2]
            │       │   │           ╰── <1021> Constant Int [63]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1024> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1111>  [||]
            │       │   │       ├── <1100>  [||]
            │       │   │       │   ├── <1089>  [||]
            │       │   │       │   │   ├── <1076>  [||]
            │       │   │       │   │   │   ├── <1063>  [||]
            │       │   │       │   │   │   │   ├── <1050>  [||]
            │       │   │       │   │   │   │   │   ├── <1037>  [!=]
            │       │   │       │   │   │   │   │   │   ├── <1034> Dot
            │       │   │       │   │   │   │   │   │   │   ├── <1032> Dot
            │       │   │       │   │   │   │   │   │   │   │   ├── <1030> Var [big_struct2]
            │       │   │       │   │   │   │   │   │   │   │   ╰── substruct
            │       │   │       │   │   │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   │   │   ╰── <1036> Constant Int [127]
            │       │   │       │   │   │   │   │   ╰── <1049>  [!=]
            │       │   │       │   │   │   │   │       ├── <1044> Dot
            │       │   │       │   │   │   │   │       │   ├── <1042> Dot
            │       │   │       │   │   │   │   │       │   │   ├── <1040> Var [big_struct2]
            │       │   │       │   │   │   │   │       │   │   ╰── substruct
            │       │   │       │   │   │   │   │       │   ╰── b
            │       │   │       │   │   │   │   │       ╰── <1048> Unary [-]
            │       │   │       │   │   │   │   │           ╰── <1047> Constant Int [128]
            │       │   │       │   │   │   │   ╰── <1062>  [!=]
            │       │   │       │   │   │   │       ├── <1059> Subscript
            │       │   │       │   │   │   │       │   ├── <1057> Dot
            │       │   │       │   │   │   │       │   │   ├── <1055> Dot
            │       │   │       │   │   │   │       │   │   │   ├── <1053> Var [big_struct2]
            │       │   │       │   │   │   │       │   │   │   ╰── substruct
            │       │   │       │   │   │   │       │   │   ╰── arr
            │       │   │       │   │   │   │       │   ╰── <1058> Constant Int [0]
            │       │   │       │   │   │   │       ╰── <1061> Constant Int [61]
            │       │   │       │   │   │   ╰── <1075>  [!=]
            │       │   │       │   │   │       ├── <1072> Subscript
            │       │   │       │   │   │       │   ├── <1070> Dot
            │       │   │       │   │   │       │   │   ├── <1068> Dot
            │       │   │       │   │   │       │   │   │   ├── <1066> Var [big_struct2]
            │       │   │       │   │   │       │   │   │   ╰── substruct
            │       │   │       │   │   │       │   │   ╰── arr
            │       │   │       │   │   │       │   ╰── <1071> Constant Int [1]
            │       │   │       │   │   │       ╰── <1074> Constant Int [62]
            │       │   │       │   │   ╰── <1088>  [!=]
            │       │   │       │   │       ├── <1085> Subscript
            │       │   │       │   │       │   ├── <1083> Dot
            │       │   │       │   │       │   │   ├── <1081> Dot
            │       │   │       │   │       │   │   │   ├── <1079> Var [big_struct2]
            │       │   │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <1084> Constant Int [2]
            │       │   │       │   │       ╰── <1087> Constant Int [63]
            │       │   │       │   ╰── <1099>  [!=]
            │       │   │       │       ├── <1094> Dot
            │       │   │       │       │   ├── <1092> Var [big_struct2]
            │       │   │       │       │   ╰── x
            │       │   │       │       ╰── <1098> Unary [-]
            │       │   │       │           ╰── <1097> Constant Int [10]
            │       │   │       ╰── <1110>  [!=]
            │       │   │           ├── <1105> Dot
            │       │   │           │   ├── <1103> Var [big_struct2]
            │       │   │           │   ╰── y
            │       │   │           ╰── <1109> Unary [-]
            │       │   │               ╰── <1108> Constant Int [11]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1112> Constant Int [0]
            │       ╰── Return
            │           ╰── <1117> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1128> Unary [!]
                    │   │       ╰── <1127> FunctionCall [test_copy_from_member]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1129> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1137> Unary [!]
                    │   │       ╰── <1136> FunctionCall [test_copy_to_member]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1138> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1146> Unary [!]
                    │   │       ╰── <1145> FunctionCall [test_copy_from_nested_member]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1147> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1155> Unary [!]
                    │   │       ╰── <1154> FunctionCall [test_copy_to_nested_member]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1156> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1164> Unary [!]
                    │   │       ╰── <1163> FunctionCall [test_copy_from_conditional]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1165> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1173> Unary [!]
                    │   │       ╰── <1172> FunctionCall [test_copy_from_assignment]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1174> Constant Int [7]
                    ╰── Return
                        ╰── <1179> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_stack_clobber() {
    let src = r#"
        void exit(int status);
        struct chars {
            char char_array[3];
        };
        static struct chars y = {{0, 1, 2}};
        static struct chars *ptr;
        void validate_array(char *char_array, int start, int code) {
            for (int i = 0; i < 3; i = i + 1) {
                if (char_array[i] != start + i) {
                    exit(code);
                }
            }
            return;
        }
        void increment_y(void) {
            y.char_array[0] = y.char_array[0] + 3;
            y.char_array[1] = y.char_array[1] + 3;
            y.char_array[2] = y.char_array[2] + 3;
        }
        int test_copy(void) {
            struct chars a = {"abc"};
            struct chars b = {"xyz"};
            struct chars c = {"def"};
            b = y;
            validate_array(a.char_array, 'a', 1);
            validate_array(b.char_array, 0, 2);
            validate_array(c.char_array, 'd', 3);
            return 0;
        }
        static struct chars to_validate;
        void validate_static(int start, int code) {
            validate_array(to_validate.char_array, start, code);
        }
        int test_load(void) {
            static struct chars b;
            struct chars a = {"ghi"};
            b = *ptr;
            to_validate = a;
            validate_static('g', 4);
            to_validate = b;
            validate_static(3, 5);
            return 0;
        }
        int test_store(void) {
            struct chars struct_array[3] = {{"jkl"}, {"xyz"}, {"mno"}};
            struct chars *ptr = &struct_array[1];
            *ptr = y;
            validate_array(struct_array[0].char_array, 'j', 6);
            validate_array(struct_array[1].char_array, 6, 7);
            validate_array(struct_array[2].char_array, 'm', 8);
            return 0;
        }
        struct chars_container {
            char c;
            struct chars chars;
            char arr[3];
        };
        int test_copy_from_offset(void) {
            struct chars a = {"pqr"};
            static struct chars b = {"xyz"};
            static struct chars_container container = {100, {{9, 10, 11}}, "123"};
            b = container.chars;
            to_validate = a;
            validate_static('p', 9);
            to_validate = b;
            validate_static(9, 10);
            return 0;
        }
        int test_copy_to_offset(void) {
            struct chars_container container = {
                'x', {{0, 0, 0}}, "stu"
            };
            container.chars = y;
            if (container.c != 'x') {
                exit(11);
            }
            validate_array(container.chars.char_array, 12, 12);
            validate_array(container.arr, 's', 13);
            return 0;
        }
        int main(void) {
            ptr = &y;
            test_copy();
            increment_y();
            test_load();
            increment_y();
            test_store();
            increment_y();
            test_copy_from_offset();
            increment_y();
            test_copy_to_offset();
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Struct [chars]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── char_array
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── y
            │   ├── Type
            │   │   ╰── Struct [chars]
            │   ├── Initializer
            │   │   ╰── Compound
            │   │       ╰── Compound
            │   │           ├── <22> Constant Int [0]
            │   │           ├── <24> Constant Int [1]
            │   │           ╰── <26> Constant Int [2]
            │   ╰── Static
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Struct [chars]
            │   ╰── Static
            ├── Function [validate_array]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── char_array
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── start
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <55> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <63>  [<]
            │       │   │       ├── <60> Var [i]
            │       │   │       ╰── <62> Constant Int [3]
            │       │   ├── Condition
            │       │   │   ╰── <72> Assign [=]
            │       │   │       ├── <65> Var [i]
            │       │   │       ╰── <71>  [+]
            │       │   │           ├── <68> Var [i]
            │       │   │           ╰── <70> Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <85>  [!=]
            │       │           │       ├── <77> Subscript
            │       │           │       │   ├── <74> Var [char_array]
            │       │           │       │   ╰── <76> Var [i]
            │       │           │       ╰── <84>  [+]
            │       │           │           ├── <80> Var [start]
            │       │           │           ╰── <83> Var [i]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── <89> FunctionCall [exit]
            │       │                       ╰── <88> Var [code]
            │       ╰── Return
            ├── Function [increment_y]
            │   ╰── Body
            │       ├── <120> Assign [=]
            │       │   ├── <109> Subscript
            │       │   │   ├── <107> Dot
            │       │   │   │   ├── <105> Var [y]
            │       │   │   │   ╰── char_array
            │       │   │   ╰── <108> Constant Int [0]
            │       │   ╰── <119>  [+]
            │       │       ├── <116> Subscript
            │       │       │   ├── <114> Dot
            │       │       │   │   ├── <112> Var [y]
            │       │       │   │   ╰── char_array
            │       │       │   ╰── <115> Constant Int [0]
            │       │       ╰── <118> Constant Int [3]
            │       ├── <138> Assign [=]
            │       │   ├── <127> Subscript
            │       │   │   ├── <125> Dot
            │       │   │   │   ├── <123> Var [y]
            │       │   │   │   ╰── char_array
            │       │   │   ╰── <126> Constant Int [1]
            │       │   ╰── <137>  [+]
            │       │       ├── <134> Subscript
            │       │       │   ├── <132> Dot
            │       │       │   │   ├── <130> Var [y]
            │       │       │   │   ╰── char_array
            │       │       │   ╰── <133> Constant Int [1]
            │       │       ╰── <136> Constant Int [3]
            │       ╰── <156> Assign [=]
            │           ├── <145> Subscript
            │           │   ├── <143> Dot
            │           │   │   ├── <141> Var [y]
            │           │   │   ╰── char_array
            │           │   ╰── <144> Constant Int [2]
            │           ╰── <155>  [+]
            │               ├── <152> Subscript
            │               │   ├── <150> Dot
            │               │   │   ├── <148> Var [y]
            │               │   │   ╰── char_array
            │               │   ╰── <151> Constant Int [2]
            │               ╰── <154> Constant Int [3]
            ├── Function [test_copy]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <168> "abc"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <176> "xyz"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <184> "def"
            │       ├── <193> Assign [=]
            │       │   ├── <189> Var [b]
            │       │   ╰── <192> Var [y]
            │       ├── <202> FunctionCall [validate_array]
            │       │   ├── <199> Dot
            │       │   │   ├── <197> Var [a]
            │       │   │   ╰── char_array
            │       │   ├── <200> Constant Int [97]
            │       │   ╰── <201> Constant Int [1]
            │       ├── <211> FunctionCall [validate_array]
            │       │   ├── <208> Dot
            │       │   │   ├── <206> Var [b]
            │       │   │   ╰── char_array
            │       │   ├── <209> Constant Int [0]
            │       │   ╰── <210> Constant Int [2]
            │       ├── <220> FunctionCall [validate_array]
            │       │   ├── <217> Dot
            │       │   │   ├── <215> Var [c]
            │       │   │   ╰── char_array
            │       │   ├── <218> Constant Int [100]
            │       │   ╰── <219> Constant Int [3]
            │       ╰── Return
            │           ╰── <222> Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── to_validate
            │   ├── Type
            │   │   ╰── Struct [chars]
            │   ╰── Static
            ├── Function [validate_static]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── start
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── <251> FunctionCall [validate_array]
            │           ├── <246> Dot
            │           │   ├── <244> Var [to_validate]
            │           │   ╰── char_array
            │           ├── <248> Var [start]
            │           ╰── <250> Var [code]
            ├── Function [test_load]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <269> "ghi"
            │       ├── <279> Assign [=]
            │       │   ├── <274> Var [b]
            │       │   ╰── <278> Dereference
            │       │       ╰── <277> Var [ptr]
            │       ├── <286> Assign [=]
            │       │   ├── <282> Var [to_validate]
            │       │   ╰── <285> Var [a]
            │       ├── <291> FunctionCall [validate_static]
            │       │   ├── <289> Constant Int [103]
            │       │   ╰── <290> Constant Int [4]
            │       ├── <298> Assign [=]
            │       │   ├── <294> Var [to_validate]
            │       │   ╰── <297> Var [b]
            │       ├── <303> FunctionCall [validate_static]
            │       │   ├── <301> Constant Int [3]
            │       │   ╰── <302> Constant Int [5]
            │       ╰── Return
            │           ╰── <305> Constant Int [0]
            ├── Function [test_store]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── struct_array
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ╰── <319> "jkl"
            │       │           ├── Compound
            │       │           │   ╰── <322> "xyz"
            │       │           ╰── Compound
            │       │               ╰── <325> "mno"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── <339> AddressOf
            │       │           ╰── <338> Subscript
            │       │               ├── <336> Var [struct_array]
            │       │               ╰── <337> Constant Int [1]
            │       ├── <348> Assign [=]
            │       │   ├── <344> Dereference
            │       │   │   ╰── <343> Var [ptr]
            │       │   ╰── <347> Var [y]
            │       ├── <359> FunctionCall [validate_array]
            │       │   ├── <356> Dot
            │       │   │   ├── <354> Subscript
            │       │   │   │   ├── <352> Var [struct_array]
            │       │   │   │   ╰── <353> Constant Int [0]
            │       │   │   ╰── char_array
            │       │   ├── <357> Constant Int [106]
            │       │   ╰── <358> Constant Int [6]
            │       ├── <370> FunctionCall [validate_array]
            │       │   ├── <367> Dot
            │       │   │   ├── <365> Subscript
            │       │   │   │   ├── <363> Var [struct_array]
            │       │   │   │   ╰── <364> Constant Int [1]
            │       │   │   ╰── char_array
            │       │   ├── <368> Constant Int [6]
            │       │   ╰── <369> Constant Int [7]
            │       ├── <381> FunctionCall [validate_array]
            │       │   ├── <378> Dot
            │       │   │   ├── <376> Subscript
            │       │   │   │   ├── <374> Var [struct_array]
            │       │   │   │   ╰── <375> Constant Int [2]
            │       │   │   ╰── char_array
            │       │   ├── <379> Constant Int [109]
            │       │   ╰── <380> Constant Int [8]
            │       ╰── Return
            │           ╰── <383> Constant Int [0]
            ├── Struct [chars_container]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── chars
            │   │   ╰── Type
            │   │       ╰── Struct [chars]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Function [test_copy_from_offset]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <412> "pqr"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <421> "xyz"
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── container
            │       │   ├── Type
            │       │   │   ╰── Struct [chars_container]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── <430> Constant Int [100]
            │       │   │       ├── Compound
            │       │   │       │   ╰── Compound
            │       │   │       │       ├── <432> Constant Int [9]
            │       │   │       │       ├── <434> Constant Int [10]
            │       │   │       │       ╰── <436> Constant Int [11]
            │       │   │       ╰── <440> "123"
            │       │   ╰── Static
            │       ├── <451> Assign [=]
            │       │   ├── <445> Var [b]
            │       │   ╰── <450> Dot
            │       │       ├── <448> Var [container]
            │       │       ╰── chars
            │       ├── <458> Assign [=]
            │       │   ├── <454> Var [to_validate]
            │       │   ╰── <457> Var [a]
            │       ├── <463> FunctionCall [validate_static]
            │       │   ├── <461> Constant Int [112]
            │       │   ╰── <462> Constant Int [9]
            │       ├── <470> Assign [=]
            │       │   ├── <466> Var [to_validate]
            │       │   ╰── <469> Var [b]
            │       ├── <475> FunctionCall [validate_static]
            │       │   ├── <473> Constant Int [9]
            │       │   ╰── <474> Constant Int [10]
            │       ╰── Return
            │           ╰── <477> Constant Int [0]
            ├── Function [test_copy_to_offset]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── container
            │       │   ├── Type
            │       │   │   ╰── Struct [chars_container]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <489> Constant Int [120]
            │       │           ├── Compound
            │       │           │   ╰── Compound
            │       │           │       ├── <491> Constant Int [0]
            │       │           │       ├── <493> Constant Int [0]
            │       │           │       ╰── <495> Constant Int [0]
            │       │           ╰── <499> "stu"
            │       ├── <510> Assign [=]
            │       │   ├── <506> Dot
            │       │   │   ├── <504> Var [container]
            │       │   │   ╰── chars
            │       │   ╰── <509> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <518>  [!=]
            │       │   │       ├── <515> Dot
            │       │   │       │   ├── <513> Var [container]
            │       │   │       │   ╰── c
            │       │   │       ╰── <517> Constant Int [120]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <521> FunctionCall [exit]
            │       │               ╰── <520> Constant Int [11]
            │       ├── <535> FunctionCall [validate_array]
            │       │   ├── <532> Dot
            │       │   │   ├── <530> Dot
            │       │   │   │   ├── <528> Var [container]
            │       │   │   │   ╰── chars
            │       │   │   ╰── char_array
            │       │   ├── <533> Constant Int [12]
            │       │   ╰── <534> Constant Int [12]
            │       ├── <544> FunctionCall [validate_array]
            │       │   ├── <541> Dot
            │       │   │   ├── <539> Var [container]
            │       │   │   ╰── arr
            │       │   ├── <542> Constant Int [115]
            │       │   ╰── <543> Constant Int [13]
            │       ╰── Return
            │           ╰── <546> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <560> Assign [=]
                    │   ├── <555> Var [ptr]
                    │   ╰── <559> AddressOf
                    │       ╰── <558> Var [y]
                    ├── <563> FunctionCall [test_copy]
                    ├── <566> FunctionCall [increment_y]
                    ├── <569> FunctionCall [test_load]
                    ├── <572> FunctionCall [increment_y]
                    ├── <575> FunctionCall [test_store]
                    ├── <578> FunctionCall [increment_y]
                    ├── <581> FunctionCall [test_copy_from_offset]
                    ├── <584> FunctionCall [increment_y]
                    ├── <587> FunctionCall [test_copy_to_offset]
                    ╰── Return
                        ╰── <589> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_incomplete_param_type() {
    let src = r#"
        struct s;
        int foo(struct s blah);
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s arg = {1, 2};
            return foo(arg);
        }
        int foo(struct s blah) {
            return blah.a + blah.b;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [foo]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── blah
            │           ╰── Type
            │               ╰── Struct [s]
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arg
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <30> Constant Int [1]
            │       │           ╰── <32> Constant Int [2]
            │       ╰── Return
            │           ╰── <39> FunctionCall [foo]
            │               ╰── <38> Var [arg]
            ╰── Function [foo]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── blah
                │       ╰── Type
                │           ╰── Struct [s]
                ╰── Body
                    ╰── Return
                        ╰── <60>  [+]
                            ├── <54> Dot
                            │   ├── <52> Var [blah]
                            │   ╰── a
                            ╰── <59> Dot
                                ├── <57> Var [blah]
                                ╰── b
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_classify_params() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct inner {
            int i;
            char ch2;
        };
        struct nested_ints {
            char ch1;
            struct inner nested;
        };
        struct flattened_ints {
            char c;
            int i;
            char a;
        };
        struct large {
            int i;
            double d;
            char arr[10];
        };
        struct two_ints {
            int i;
            int i2;
        };
        struct nested_double {
            double array[1];
        };
        struct two_eightbytes {
            double d;
            char c;
        };
        struct pass_in_memory {
            double w;
            double x;
            int y;
            long z;
        };
        int test_twelve_bytes(struct twelve_bytes s);
        int test_nested_ints(struct nested_ints s);
        int test_flattened_ints(struct flattened_ints s);
        int test_large(struct large s);
        int test_two_ints(struct two_ints s);
        int test_nested_double(struct nested_double s);
        int test_two_eightbytes(struct two_eightbytes s);
        int test_pass_in_memory(struct pass_in_memory s);
        
        int test_twelve_bytes(struct twelve_bytes s) {
            if (s.i != 0 || strcmp(s.arr, "lmnopqr")) {
                return 0;
            }
            return 1;
        }
        int test_nested_ints(struct nested_ints s) {
            if (s.ch1 != 127 || s.nested.i != 2147483647 || s.nested.ch2 != -128) {
                return 0;
            }
            return 1;
        }
        int test_flattened_ints(struct flattened_ints s) {
            if (s.c != 127 || s.i != 2147483647 || s.a != -128) {
                return 0;
            }
            return 1;
        }
        int test_large(struct large s) {
            if (s.i != 200000 || s.d != 23.25 || strcmp(s.arr, "abcdefghi")) {
                return 0;
            }
            return 1;
        }
        int test_two_ints(struct two_ints s) {
            if (s.i != 999 || s.i2 != 888) {
                return 0;
            }
            return 1;
        }
        int test_nested_double(struct nested_double s) {
            if (s.array[0] != 25.125e3) {
                return 0;
            }
            return 1;
        }
        int test_two_eightbytes(struct two_eightbytes s) {
            if (s.d != 1000. || s.c != 'x') {
                return 0;
            }
            return 1;
        }
        int test_pass_in_memory(struct pass_in_memory s) {
            if (s.w != 1.7e308 || s.x != -1.7e308 || s.y != -2147483647 ||
                s.z != -9223372036854775807l) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [twelve_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ch2
            │       ╰── Type
            │           ╰── Char
            ├── Struct [nested_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ch1
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── nested
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Struct [flattened_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Char
            ├── Struct [large]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Char
            ├── Struct [two_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i2
            │       ╰── Type
            │           ╰── Int
            ├── Struct [nested_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── array
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Double
            ├── Struct [two_eightbytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [pass_in_memory]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── w
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── y
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── z
            │       ╰── Type
            │           ╰── Long
            ├── Function [test_twelve_bytes]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [twelve_bytes]
            ├── Function [test_nested_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [nested_ints]
            ├── Function [test_flattened_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [flattened_ints]
            ├── Function [test_large]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [large]
            ├── Function [test_two_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [two_ints]
            ├── Function [test_nested_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [nested_double]
            ├── Function [test_two_eightbytes]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [two_eightbytes]
            ├── Function [test_pass_in_memory]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [pass_in_memory]
            ├── Function [test_twelve_bytes]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [twelve_bytes]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <218>  [||]
            │       │   │       ├── <209>  [!=]
            │       │   │       │   ├── <206> Dot
            │       │   │       │   │   ├── <204> Var [s]
            │       │   │       │   │   ╰── i
            │       │   │       │   ╰── <208> Constant Int [0]
            │       │   │       ╰── <217> FunctionCall [strcmp]
            │       │   │           ├── <215> Dot
            │       │   │           │   ├── <213> Var [s]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <216> "lmnopqr"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <219> Constant Int [0]
            │       ╰── Return
            │           ╰── <224> Constant Int [1]
            ├── Function [test_nested_ints]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [nested_ints]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <266>  [||]
            │       │   │       ├── <253>  [||]
            │       │   │       │   ├── <242>  [!=]
            │       │   │       │   │   ├── <239> Dot
            │       │   │       │   │   │   ├── <237> Var [s]
            │       │   │       │   │   │   ╰── ch1
            │       │   │       │   │   ╰── <241> Constant Int [127]
            │       │   │       │   ╰── <252>  [!=]
            │       │   │       │       ├── <249> Dot
            │       │   │       │       │   ├── <247> Dot
            │       │   │       │       │   │   ├── <245> Var [s]
            │       │   │       │       │   │   ╰── nested
            │       │   │       │       │   ╰── i
            │       │   │       │       ╰── <251> Constant Int [2147483647]
            │       │   │       ╰── <265>  [!=]
            │       │   │           ├── <260> Dot
            │       │   │           │   ├── <258> Dot
            │       │   │           │   │   ├── <256> Var [s]
            │       │   │           │   │   ╰── nested
            │       │   │           │   ╰── ch2
            │       │   │           ╰── <264> Unary [-]
            │       │   │               ╰── <263> Constant Int [128]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <267> Constant Int [0]
            │       ╰── Return
            │           ╰── <272> Constant Int [1]
            ├── Function [test_flattened_ints]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [flattened_ints]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <310>  [||]
            │       │   │       ├── <299>  [||]
            │       │   │       │   ├── <290>  [!=]
            │       │   │       │   │   ├── <287> Dot
            │       │   │       │   │   │   ├── <285> Var [s]
            │       │   │       │   │   │   ╰── c
            │       │   │       │   │   ╰── <289> Constant Int [127]
            │       │   │       │   ╰── <298>  [!=]
            │       │   │       │       ├── <295> Dot
            │       │   │       │       │   ├── <293> Var [s]
            │       │   │       │       │   ╰── i
            │       │   │       │       ╰── <297> Constant Int [2147483647]
            │       │   │       ╰── <309>  [!=]
            │       │   │           ├── <304> Dot
            │       │   │           │   ├── <302> Var [s]
            │       │   │           │   ╰── a
            │       │   │           ╰── <308> Unary [-]
            │       │   │               ╰── <307> Constant Int [128]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <311> Constant Int [0]
            │       ╰── Return
            │           ╰── <316> Constant Int [1]
            ├── Function [test_large]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [large]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <352>  [||]
            │       │   │       ├── <343>  [||]
            │       │   │       │   ├── <334>  [!=]
            │       │   │       │   │   ├── <331> Dot
            │       │   │       │   │   │   ├── <329> Var [s]
            │       │   │       │   │   │   ╰── i
            │       │   │       │   │   ╰── <333> Constant Int [200000]
            │       │   │       │   ╰── <342>  [!=]
            │       │   │       │       ├── <339> Dot
            │       │   │       │       │   ├── <337> Var [s]
            │       │   │       │       │   ╰── d
            │       │   │       │       ╰── <341> Constant Double [+2.325e1]
            │       │   │       ╰── <351> FunctionCall [strcmp]
            │       │   │           ├── <349> Dot
            │       │   │           │   ├── <347> Var [s]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <350> "abcdefghi"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <353> Constant Int [0]
            │       ╰── Return
            │           ╰── <358> Constant Int [1]
            ├── Function [test_two_ints]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [two_ints]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <385>  [||]
            │       │   │       ├── <376>  [!=]
            │       │   │       │   ├── <373> Dot
            │       │   │       │   │   ├── <371> Var [s]
            │       │   │       │   │   ╰── i
            │       │   │       │   ╰── <375> Constant Int [999]
            │       │   │       ╰── <384>  [!=]
            │       │   │           ├── <381> Dot
            │       │   │           │   ├── <379> Var [s]
            │       │   │           │   ╰── i2
            │       │   │           ╰── <383> Constant Int [888]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <386> Constant Int [0]
            │       ╰── Return
            │           ╰── <391> Constant Int [1]
            ├── Function [test_nested_double]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [nested_double]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <411>  [!=]
            │       │   │       ├── <408> Subscript
            │       │   │       │   ├── <406> Dot
            │       │   │       │   │   ├── <404> Var [s]
            │       │   │       │   │   ╰── array
            │       │   │       │   ╰── <407> Constant Int [0]
            │       │   │       ╰── <410> Constant Double [+2.5125e4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <412> Constant Int [0]
            │       ╰── Return
            │           ╰── <417> Constant Int [1]
            ├── Function [test_two_eightbytes]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [two_eightbytes]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <444>  [||]
            │       │   │       ├── <435>  [!=]
            │       │   │       │   ├── <432> Dot
            │       │   │       │   │   ├── <430> Var [s]
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <434> Constant Double [+1e3]
            │       │   │       ╰── <443>  [!=]
            │       │   │           ├── <440> Dot
            │       │   │           │   ├── <438> Var [s]
            │       │   │           │   ╰── c
            │       │   │           ╰── <442> Constant Int [120]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <445> Constant Int [0]
            │       ╰── Return
            │           ╰── <450> Constant Int [1]
            ╰── Function [test_pass_in_memory]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── s
                │       ╰── Type
                │           ╰── Struct [pass_in_memory]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <501>  [||]
                    │   │       ├── <490>  [||]
                    │   │       │   ├── <479>  [||]
                    │   │       │   │   ├── <468>  [!=]
                    │   │       │   │   │   ├── <465> Dot
                    │   │       │   │   │   │   ├── <463> Var [s]
                    │   │       │   │   │   │   ╰── w
                    │   │       │   │   │   ╰── <467> Constant Double [+1.7e308]
                    │   │       │   │   ╰── <478>  [!=]
                    │   │       │   │       ├── <473> Dot
                    │   │       │   │       │   ├── <471> Var [s]
                    │   │       │   │       │   ╰── x
                    │   │       │   │       ╰── <477> Unary [-]
                    │   │       │   │           ╰── <476> Constant Double [+1.7e308]
                    │   │       │   ╰── <489>  [!=]
                    │   │       │       ├── <484> Dot
                    │   │       │       │   ├── <482> Var [s]
                    │   │       │       │   ╰── y
                    │   │       │       ╰── <488> Unary [-]
                    │   │       │           ╰── <487> Constant Int [2147483647]
                    │   │       ╰── <500>  [!=]
                    │   │           ├── <495> Dot
                    │   │           │   ├── <493> Var [s]
                    │   │           │   ╰── z
                    │   │           ╰── <499> Unary [-]
                    │   │               ╰── <498> Constant Long [9223372036854775807]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <502> Constant Int [0]
                    ╰── Return
                        ╰── <507> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_classify_params_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct inner {
            int i;
            char ch2;
        };
        struct nested_ints {
            char ch1;
            struct inner nested;
        };
        struct flattened_ints {
            char c;
            int i;
            char a;
        };
        struct large {
            int i;
            double d;
            char arr[10];
        };
        struct two_ints {
            int i;
            int i2;
        };
        struct nested_double {
            double array[1];
        };
        struct two_eightbytes {
            double d;
            char c;
        };
        struct pass_in_memory {
            double w;
            double x;
            int y;
            long z;
        };
        int test_twelve_bytes(struct twelve_bytes s);
        int test_nested_ints(struct nested_ints s);
        int test_flattened_ints(struct flattened_ints s);
        int test_large(struct large s);
        int test_two_ints(struct two_ints s);
        int test_nested_double(struct nested_double s);
        int test_two_eightbytes(struct two_eightbytes s);
        int test_pass_in_memory(struct pass_in_memory s);
        
        int main(void) {
            struct twelve_bytes s1 = {0, "lmnopqr"};
            if (!test_twelve_bytes(s1)) {
                return 1;
            }
            struct nested_ints s2 = {127, {2147483647, -128}};
            if (!test_nested_ints(s2)) {
                return 2;
            }
            struct flattened_ints s3 = {127, 2147483647, -128};
            if (!test_flattened_ints(s3)) {
                return 3;
            }
            struct large s4 = {200000, 23.25, "abcdefghi"};
            if (!test_large(s4)) {
                return 4;
            }
            struct two_ints s5 = {999, 888};
            if (!test_two_ints(s5)) {
                return 5;
            }
            struct nested_double s6 = {{25.125e3}};
            if (!test_nested_double(s6)) {
                return 6;
            }
            struct two_eightbytes s7 = {1000., 'x'};
            if (!test_two_eightbytes(s7)) {
                return 7;
            }
            struct pass_in_memory s8 = {1.7e308, -1.7e308, -2147483647, -9223372036854775807l};
            if (!test_pass_in_memory(s8)) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [twelve_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ch2
            │       ╰── Type
            │           ╰── Char
            ├── Struct [nested_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ch1
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── nested
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Struct [flattened_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Char
            ├── Struct [large]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Char
            ├── Struct [two_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i2
            │       ╰── Type
            │           ╰── Int
            ├── Struct [nested_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── array
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Double
            ├── Struct [two_eightbytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [pass_in_memory]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── w
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── y
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── z
            │       ╰── Type
            │           ╰── Long
            ├── Function [test_twelve_bytes]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [twelve_bytes]
            ├── Function [test_nested_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [nested_ints]
            ├── Function [test_flattened_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [flattened_ints]
            ├── Function [test_large]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [large]
            ├── Function [test_two_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [two_ints]
            ├── Function [test_nested_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [nested_double]
            ├── Function [test_two_eightbytes]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [two_eightbytes]
            ├── Function [test_pass_in_memory]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [pass_in_memory]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s1
                    │   ├── Type
                    │   │   ╰── Struct [twelve_bytes]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <203> Constant Int [0]
                    │           ╰── <205> "lmnopqr"
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <214> Unary [!]
                    │   │       ╰── <213> FunctionCall [test_twelve_bytes]
                    │   │           ╰── <212> Var [s1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <215> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s2
                    │   ├── Type
                    │   │   ╰── Struct [nested_ints]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <224> Constant Int [127]
                    │           ╰── Compound
                    │               ├── <226> Constant Int [2147483647]
                    │               ╰── <230> Unary [-]
                    │                   ╰── <229> Constant Int [128]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <240> Unary [!]
                    │   │       ╰── <239> FunctionCall [test_nested_ints]
                    │   │           ╰── <238> Var [s2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <241> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s3
                    │   ├── Type
                    │   │   ╰── Struct [flattened_ints]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <250> Constant Int [127]
                    │           ├── <252> Constant Int [2147483647]
                    │           ╰── <256> Unary [-]
                    │               ╰── <255> Constant Int [128]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <265> Unary [!]
                    │   │       ╰── <264> FunctionCall [test_flattened_ints]
                    │   │           ╰── <263> Var [s3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <266> Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s4
                    │   ├── Type
                    │   │   ╰── Struct [large]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <275> Constant Int [200000]
                    │           ├── <277> Constant Double [+2.325e1]
                    │           ╰── <279> "abcdefghi"
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <288> Unary [!]
                    │   │       ╰── <287> FunctionCall [test_large]
                    │   │           ╰── <286> Var [s4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <289> Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s5
                    │   ├── Type
                    │   │   ╰── Struct [two_ints]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <298> Constant Int [999]
                    │           ╰── <300> Constant Int [888]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <309> Unary [!]
                    │   │       ╰── <308> FunctionCall [test_two_ints]
                    │   │           ╰── <307> Var [s5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <310> Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s6
                    │   ├── Type
                    │   │   ╰── Struct [nested_double]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <319> Constant Double [+2.5125e4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <329> Unary [!]
                    │   │       ╰── <328> FunctionCall [test_nested_double]
                    │   │           ╰── <327> Var [s6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <330> Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s7
                    │   ├── Type
                    │   │   ╰── Struct [two_eightbytes]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <339> Constant Double [+1e3]
                    │           ╰── <341> Constant Int [120]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <350> Unary [!]
                    │   │       ╰── <349> FunctionCall [test_two_eightbytes]
                    │   │           ╰── <348> Var [s7]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <351> Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s8
                    │   ├── Type
                    │   │   ╰── Struct [pass_in_memory]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <360> Constant Double [+1.7e308]
                    │           ├── <364> Unary [-]
                    │           │   ╰── <363> Constant Double [+1.7e308]
                    │           ├── <368> Unary [-]
                    │           │   ╰── <367> Constant Int [2147483647]
                    │           ╰── <372> Unary [-]
                    │               ╰── <371> Constant Long [9223372036854775807]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <381> Unary [!]
                    │   │       ╰── <380> FunctionCall [test_pass_in_memory]
                    │   │           ╰── <379> Var [s8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <382> Constant Int [8]
                    ╰── Return
                        ╰── <387> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_modify_param() {
    let src = r#"
        struct inner {
            double d;
            int i;
        };
        struct outer {
            struct inner s;
            struct inner *ptr;
            long l;
        };
        int modify_simple_struct(struct inner s);
        int modify_nested_struct(struct outer s);
        
        int modify_simple_struct(struct inner s) {
            struct inner copy = s;
            s.d = 0.0;
            if (s.d || s.i != 3) {
                return 0;
            }
            if (copy.d != 2.0 || copy.i != 3) {
                return 0;
            }
            return 1;
        }
        int modify_nested_struct(struct outer s) {
            struct outer copy = s;
            s.l = 10;
            s.s.i = 200;
            s.ptr->d = 10.0;
            s.ptr->i = 11;
            if (s.s.i != 200 || s.s.d != 4.0 || s.l != 10 || s.ptr->d != 10.0 ||
                s.ptr->i != 11) {
                return 0;
            }
            if (copy.s.i != 5 || copy.s.d != 4.0 || copy.l != 1000 ||
                copy.ptr->d != 10.0 || copy.ptr->i != 11) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Function [modify_simple_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [inner]
            ├── Function [modify_nested_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [outer]
            ├── Function [modify_simple_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [inner]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── copy
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── <59> Var [s]
            │       ├── <68> Assign [=]
            │       │   ├── <65> Dot
            │       │   │   ├── <63> Var [s]
            │       │   │   ╰── d
            │       │   ╰── <67> Constant Double [+0e0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <82>  [||]
            │       │   │       ├── <73> Dot
            │       │   │       │   ├── <71> Var [s]
            │       │   │       │   ╰── d
            │       │   │       ╰── <81>  [!=]
            │       │   │           ├── <78> Dot
            │       │   │           │   ├── <76> Var [s]
            │       │   │           │   ╰── i
            │       │   │           ╰── <80> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <83> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <103>  [||]
            │       │   │       ├── <94>  [!=]
            │       │   │       │   ├── <91> Dot
            │       │   │       │   │   ├── <89> Var [copy]
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <93> Constant Double [+2e0]
            │       │   │       ╰── <102>  [!=]
            │       │   │           ├── <99> Dot
            │       │   │           │   ├── <97> Var [copy]
            │       │   │           │   ╰── i
            │       │   │           ╰── <101> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <104> Constant Int [0]
            │       ╰── Return
            │           ╰── <109> Constant Int [1]
            ╰── Function [modify_nested_struct]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── s
                │       ╰── Type
                │           ╰── Struct [outer]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── copy
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── <126> Var [s]
                    ├── <135> Assign [=]
                    │   ├── <132> Dot
                    │   │   ├── <130> Var [s]
                    │   │   ╰── l
                    │   ╰── <134> Constant Int [10]
                    ├── <145> Assign [=]
                    │   ├── <142> Dot
                    │   │   ├── <140> Dot
                    │   │   │   ├── <138> Var [s]
                    │   │   │   ╰── s
                    │   │   ╰── i
                    │   ╰── <144> Constant Int [200]
                    ├── <155> Assign [=]
                    │   ├── <152> Arrow
                    │   │   ├── <150> Dot
                    │   │   │   ├── <148> Var [s]
                    │   │   │   ╰── ptr
                    │   │   ╰── d
                    │   ╰── <154> Constant Double [+1e1]
                    ├── <165> Assign [=]
                    │   ├── <162> Arrow
                    │   │   ├── <160> Dot
                    │   │   │   ├── <158> Var [s]
                    │   │   │   ╰── ptr
                    │   │   ╰── i
                    │   ╰── <164> Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <217>  [||]
                    │   │       ├── <206>  [||]
                    │   │       │   ├── <195>  [||]
                    │   │       │   │   ├── <186>  [||]
                    │   │       │   │   │   ├── <175>  [!=]
                    │   │       │   │   │   │   ├── <172> Dot
                    │   │       │   │   │   │   │   ├── <170> Dot
                    │   │       │   │   │   │   │   │   ├── <168> Var [s]
                    │   │       │   │   │   │   │   │   ╰── s
                    │   │       │   │   │   │   │   ╰── i
                    │   │       │   │   │   │   ╰── <174> Constant Int [200]
                    │   │       │   │   │   ╰── <185>  [!=]
                    │   │       │   │   │       ├── <182> Dot
                    │   │       │   │   │       │   ├── <180> Dot
                    │   │       │   │   │       │   │   ├── <178> Var [s]
                    │   │       │   │   │       │   │   ╰── s
                    │   │       │   │   │       │   ╰── d
                    │   │       │   │   │       ╰── <184> Constant Double [+4e0]
                    │   │       │   │   ╰── <194>  [!=]
                    │   │       │   │       ├── <191> Dot
                    │   │       │   │       │   ├── <189> Var [s]
                    │   │       │   │       │   ╰── l
                    │   │       │   │       ╰── <193> Constant Int [10]
                    │   │       │   ╰── <205>  [!=]
                    │   │       │       ├── <202> Arrow
                    │   │       │       │   ├── <200> Dot
                    │   │       │       │   │   ├── <198> Var [s]
                    │   │       │       │   │   ╰── ptr
                    │   │       │       │   ╰── d
                    │   │       │       ╰── <204> Constant Double [+1e1]
                    │   │       ╰── <216>  [!=]
                    │   │           ├── <213> Arrow
                    │   │           │   ├── <211> Dot
                    │   │           │   │   ├── <209> Var [s]
                    │   │           │   │   ╰── ptr
                    │   │           │   ╰── i
                    │   │           ╰── <215> Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <218> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <273>  [||]
                    │   │       ├── <262>  [||]
                    │   │       │   ├── <251>  [||]
                    │   │       │   │   ├── <242>  [||]
                    │   │       │   │   │   ├── <231>  [!=]
                    │   │       │   │   │   │   ├── <228> Dot
                    │   │       │   │   │   │   │   ├── <226> Dot
                    │   │       │   │   │   │   │   │   ├── <224> Var [copy]
                    │   │       │   │   │   │   │   │   ╰── s
                    │   │       │   │   │   │   │   ╰── i
                    │   │       │   │   │   │   ╰── <230> Constant Int [5]
                    │   │       │   │   │   ╰── <241>  [!=]
                    │   │       │   │   │       ├── <238> Dot
                    │   │       │   │   │       │   ├── <236> Dot
                    │   │       │   │   │       │   │   ├── <234> Var [copy]
                    │   │       │   │   │       │   │   ╰── s
                    │   │       │   │   │       │   ╰── d
                    │   │       │   │   │       ╰── <240> Constant Double [+4e0]
                    │   │       │   │   ╰── <250>  [!=]
                    │   │       │   │       ├── <247> Dot
                    │   │       │   │       │   ├── <245> Var [copy]
                    │   │       │   │       │   ╰── l
                    │   │       │   │       ╰── <249> Constant Int [1000]
                    │   │       │   ╰── <261>  [!=]
                    │   │       │       ├── <258> Arrow
                    │   │       │       │   ├── <256> Dot
                    │   │       │       │   │   ├── <254> Var [copy]
                    │   │       │       │   │   ╰── ptr
                    │   │       │       │   ╰── d
                    │   │       │       ╰── <260> Constant Double [+1e1]
                    │   │       ╰── <272>  [!=]
                    │   │           ├── <269> Arrow
                    │   │           │   ├── <267> Dot
                    │   │           │   │   ├── <265> Var [copy]
                    │   │           │   │   ╰── ptr
                    │   │           │   ╰── i
                    │   │           ╰── <271> Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <274> Constant Int [0]
                    ╰── Return
                        ╰── <279> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_modify_param_client() {
    let src = r#"
        struct inner {
            double d;
            int i;
        };
        struct outer {
            struct inner s;
            struct inner *ptr;
            long l;
        };
        int modify_simple_struct(struct inner s);
        int modify_nested_struct(struct outer s);
        
        int main(void) {
            struct inner s_inner = {2.0, 3};
            if (!modify_simple_struct(s_inner)) {
                return 1;
            }
            if (s_inner.d != 2.0 || s_inner.i != 3) {
                return 2;
            }
            struct outer s_o = {{4.0, 5}, &s_inner, 1000l};
            if (!modify_nested_struct(s_o)) {
                return 3;
            }
            if (s_o.s.d != 4.0 || s_o.s.i != 5 || s_o.l != 1000l) {
                return 4;
            }
            if (s_o.ptr != &s_inner) {
                return 5;
            }
            if (s_o.ptr->d != 10.0 || s_o.ptr->i != 11) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Function [modify_simple_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [inner]
            ├── Function [modify_nested_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [outer]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s_inner
                    │   ├── Type
                    │   │   ╰── Struct [inner]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <54> Constant Double [+2e0]
                    │           ╰── <56> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <65> Unary [!]
                    │   │       ╰── <64> FunctionCall [modify_simple_struct]
                    │   │           ╰── <63> Var [s_inner]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <66> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <86>  [||]
                    │   │       ├── <77>  [!=]
                    │   │       │   ├── <74> Dot
                    │   │       │   │   ├── <72> Var [s_inner]
                    │   │       │   │   ╰── d
                    │   │       │   ╰── <76> Constant Double [+2e0]
                    │   │       ╰── <85>  [!=]
                    │   │           ├── <82> Dot
                    │   │           │   ├── <80> Var [s_inner]
                    │   │           │   ╰── i
                    │   │           ╰── <84> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <87> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s_o
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <96> Constant Double [+4e0]
                    │           │   ╰── <98> Constant Int [5]
                    │           ├── <103> AddressOf
                    │           │   ╰── <102> Var [s_inner]
                    │           ╰── <105> Constant Long [1000]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <114> Unary [!]
                    │   │       ╰── <113> FunctionCall [modify_nested_struct]
                    │   │           ╰── <112> Var [s_o]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <115> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <148>  [||]
                    │   │       ├── <139>  [||]
                    │   │       │   ├── <128>  [!=]
                    │   │       │   │   ├── <125> Dot
                    │   │       │   │   │   ├── <123> Dot
                    │   │       │   │   │   │   ├── <121> Var [s_o]
                    │   │       │   │   │   │   ╰── s
                    │   │       │   │   │   ╰── d
                    │   │       │   │   ╰── <127> Constant Double [+4e0]
                    │   │       │   ╰── <138>  [!=]
                    │   │       │       ├── <135> Dot
                    │   │       │       │   ├── <133> Dot
                    │   │       │       │   │   ├── <131> Var [s_o]
                    │   │       │       │   │   ╰── s
                    │   │       │       │   ╰── i
                    │   │       │       ╰── <137> Constant Int [5]
                    │   │       ╰── <147>  [!=]
                    │   │           ├── <144> Dot
                    │   │           │   ├── <142> Var [s_o]
                    │   │           │   ╰── l
                    │   │           ╰── <146> Constant Long [1000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <149> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <162>  [!=]
                    │   │       ├── <157> Dot
                    │   │       │   ├── <155> Var [s_o]
                    │   │       │   ╰── ptr
                    │   │       ╰── <161> AddressOf
                    │   │           ╰── <160> Var [s_inner]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <163> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <187>  [||]
                    │   │       ├── <176>  [!=]
                    │   │       │   ├── <173> Arrow
                    │   │       │   │   ├── <171> Dot
                    │   │       │   │   │   ├── <169> Var [s_o]
                    │   │       │   │   │   ╰── ptr
                    │   │       │   │   ╰── d
                    │   │       │   ╰── <175> Constant Double [+1e1]
                    │   │       ╰── <186>  [!=]
                    │   │           ├── <183> Arrow
                    │   │           │   ├── <181> Dot
                    │   │           │   │   ├── <179> Var [s_o]
                    │   │           │   │   ╰── ptr
                    │   │           │   ╰── i
                    │   │           ╰── <185> Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <188> Constant Int [6]
                    ╰── Return
                        ╰── <193> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_param_calling_conventions() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int strncmp(char *s1, char *s2, unsigned long n);
        struct two_longs {
            long a;
            long b;
        };
        struct one_int {
            int i;
            char c;
        };
        struct one_int_exactly {
            unsigned long l;
        };
        struct two_ints {
            char c;
            int arr[3];
        };
        struct two_ints_nested {
            struct one_int a;
            struct one_int b;
        };
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct one_xmm {
            double d;
        };
        struct two_xmm {
            double d[2];
        };
        struct int_and_xmm {
            char c;
            double d;
        };
        struct xmm_and_int {
            struct one_xmm dbl;
            char c[3];
        };
        struct odd_size {
            char arr[5];
        };
        struct memory {
            double d;
            char c[3];
            long l;
            int i;
        };
        int pass_small_structs(struct two_xmm two_xmm_struct, struct one_int int_struct,
                               struct one_xmm xmm_struct,
                               struct xmm_and_int mixed_struct,
                               struct twelve_bytes int_struct_2,
                               struct one_int_exactly another_int_struct);
        int a_bunch_of_arguments(int i0, int i1, int i2, int i3, int i4,
                                 struct two_longs param, int i5);
        int structs_and_scalars(long l, double d, struct odd_size os, struct memory mem,
                                struct one_xmm xmm_struct);
        int struct_in_mem(double a, double b, double c, struct xmm_and_int first_struct,
                          double d, struct two_xmm second_struct, long l,
                          struct int_and_xmm third_struct,
                          struct one_xmm fourth_struct);
        int pass_borderline_struct_in_memory(struct two_ints t_i, int c,
                                             struct int_and_xmm i_x, void *ptr,
                                             struct two_ints_nested t_i_n, double d);
        int pass_uneven_struct_in_mem(struct twelve_bytes struct1, long a, long b,
                                      struct twelve_bytes struct2, struct odd_size os,
                                      struct memory m);
        int pass_later_structs_in_regs(struct memory m, struct twelve_bytes struct1, struct one_xmm struct2);
        int pass_small_structs(struct two_xmm two_xmm_struct, struct one_int int_struct,
                               struct one_xmm xmm_struct,
                               struct xmm_and_int mixed_struct,
                               struct twelve_bytes int_struct_2,
                               struct one_int_exactly another_int_struct) {
            if (two_xmm_struct.d[0] != 55.5 || two_xmm_struct.d[1] != 44.4)
                return 0;
            if (int_struct.c != 'c' || int_struct.i != 54320)
                return 0;
            if (xmm_struct.d != 5.125)
                return 0;
            if (strcmp(mixed_struct.c, "hi") || mixed_struct.dbl.d != 1.234)
                return 0;
            if (strcmp(int_struct_2.arr, "string!") || int_struct_2.i != 123)
                return 0;
            if (another_int_struct.l != 567890)
                return 0;
            return 1;
        }
        int a_bunch_of_arguments(int i0, int i1, int i2, int i3, int i4,
                                 struct two_longs param, int i5) {
            if (i0 != 0 || i1 != 1 || i2 != 2 || i3 != 3 || i4 != 4 || i5 != 5) {
                return 0;
            }
            if (param.a != 1234567l || param.b != 89101112l) {
                return 0;
            }
            return 1;
        }
        int structs_and_scalars(long l, double d, struct odd_size os, struct memory mem,
                                struct one_xmm xmm_struct) {
            if (l != 10)
                return 0;
            if (d != 10.0)
                return 0;
            if (strcmp(os.arr, "lmno"))
                return 0;
            if (strcmp(mem.c, "rs") || mem.d != 15.75 || mem.i != 3333 || mem.l != 4444)
                return 0;
            if (xmm_struct.d != 5.125)
                return 0;
            return 1;
        }
        int struct_in_mem(double a, double b, double c, struct xmm_and_int first_struct,
                          double d, struct two_xmm second_struct, long l,
                          struct int_and_xmm third_struct,
                          struct one_xmm fourth_struct) {
            if (a != 10.0 || b != 11.125 || c != 12.0)
                return 0;
            if (strcmp(first_struct.c, "hi") || first_struct.dbl.d != 1.234)
                return 0;
            if (d != 13.0)
                return 0;
            if (second_struct.d[0] != 55.5 || second_struct.d[1] != 44.4)
                return 0;
            if (l)
                return 0;
            if (third_struct.c != 'p' || third_struct.d != 4.56)
                return 0;
            if (fourth_struct.d != 5.125)
                return 0;
            return 1;
        }
        int pass_borderline_struct_in_memory(struct two_ints t_i, int c,
                                             struct int_and_xmm i_x, void *ptr,
                                             struct two_ints_nested t_i_n, double d) {
            if (t_i.c != '_' || t_i.arr[0] != 5 || t_i.arr[1] != 6 || t_i.arr[2] != 7)
                return 0;
            if (c != '!')
                return 0;
            if (i_x.c != 'p' || i_x.d != 4.56)
                return 0;
            if (ptr)
                return 0;
            if (t_i_n.a.c != 'c' || t_i_n.a.i != 54320)
                return 0;
            if (t_i_n.b.c != 'c' || t_i_n.b.i != 54320)
                return 0;
            if (d != 7.8)
                return 0;
            return 1;
        }
        int pass_uneven_struct_in_mem(struct twelve_bytes struct1, long a, long b,
                                      struct twelve_bytes struct2, struct odd_size os,
                                      struct memory m) {
            if (struct1.i != -1) {
                return 0;
            }
            if (struct1.arr[0] != 127 || struct1.arr[1] != 126 ||
                struct1.arr[2] != 125) {
                return 0;
            }
            if (a != 9223372036854775805l || b != 9223372036854775800l) {
                return 0;
            }
            if (struct2.i != -5) {
                return 0;
            }
            if (struct2.arr[0] != 100 || struct2.arr[1] != 101 ||
                struct2.arr[2] != 102) {
                return 0;
            }
            for (int i = 0; i < 5; i = i + 1) {
                if (os.arr[i] != 100 - i) {
                    return 0;
                }
            }
            if (m.d != 5.345) {
                return 0;
            }
            if (m.c[0] != -1 || m.c[1] != -2 || m.c[2] != -3) {
                return 0;
            }
            if (m.l != 4294967300l) {
                return 0;
            }
            if (m.i != 10000) {
                return 0;
            }
            return 1;
        }
        int pass_later_structs_in_regs(struct memory m, struct twelve_bytes struct1,
                                       struct one_xmm struct2) {
            if (m.d != 5.345) {
                return 0;
            }
            if (m.c[0] != -1 || m.c[1] != -2 || m.c[2] != -3) {
                return 0;
            }
            if (m.l != 4294967300l) {
                return 0;
            }
            if (m.i != 10000) {
                return 0;
            }
            if (struct1.i != -1) {
                return 0;
            }
            if (struct1.arr[0] != 127 || struct1.arr[1] != 126 ||
                struct1.arr[2] != 125) {
                return 0;
            }
            if (struct2.d != 5.125) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [strncmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── n
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [two_longs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Long
            ├── Struct [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [one_int_exactly]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Struct [two_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Struct [two_ints_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Struct [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [one_int]
            ├── Struct [twelve_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [two_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Double
            ├── Struct [int_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [xmm_and_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl
            │   │   ╰── Type
            │   │       ╰── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [odd_size]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [memory]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Function [pass_small_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm_struct
            │       │   ╰── Type
            │       │       ╰── Struct [two_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_struct
            │       │   ╰── Type
            │       │       ╰── Struct [one_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── xmm_struct
            │       │   ╰── Type
            │       │       ╰── Struct [one_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_struct
            │       │   ╰── Type
            │       │       ╰── Struct [xmm_and_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_struct_2
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── another_int_struct
            │           ╰── Type
            │               ╰── Struct [one_int_exactly]
            ├── Function [a_bunch_of_arguments]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i0
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── param
            │       │   ╰── Type
            │       │       ╰── Struct [two_longs]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i5
            │           ╰── Type
            │               ╰── Int
            ├── Function [structs_and_scalars]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── os
            │       │   ╰── Type
            │       │       ╰── Struct [odd_size]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mem
            │       │   ╰── Type
            │       │       ╰── Struct [memory]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── xmm_struct
            │           ╰── Type
            │               ╰── Struct [one_xmm]
            ├── Function [struct_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── first_struct
            │       │   ╰── Type
            │       │       ╰── Struct [xmm_and_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── second_struct
            │       │   ╰── Type
            │       │       ╰── Struct [two_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── third_struct
            │       │   ╰── Type
            │       │       ╰── Struct [int_and_xmm]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── fourth_struct
            │           ╰── Type
            │               ╰── Struct [one_xmm]
            ├── Function [pass_borderline_struct_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_i
            │       │   ╰── Type
            │       │       ╰── Struct [two_ints]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i_x
            │       │   ╰── Type
            │       │       ╰── Struct [int_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Void
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_i_n
            │       │   ╰── Type
            │       │       ╰── Struct [two_ints_nested]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d
            │           ╰── Type
            │               ╰── Double
            ├── Function [pass_uneven_struct_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── struct1
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── struct2
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── os
            │       │   ╰── Type
            │       │       ╰── Struct [odd_size]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── m
            │           ╰── Type
            │               ╰── Struct [memory]
            ├── Function [pass_later_structs_in_regs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── m
            │       │   ╰── Type
            │       │       ╰── Struct [memory]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── struct1
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── struct2
            │           ╰── Type
            │               ╰── Struct [one_xmm]
            ├── Function [pass_small_structs]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── two_xmm_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [two_xmm]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── int_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [one_int]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── xmm_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [one_xmm]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── mixed_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [xmm_and_int]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── int_struct_2
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [twelve_bytes]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── another_int_struct
            │   │       ╰── Type
            │   │           ╰── Struct [one_int_exactly]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <390>  [||]
            │       │   │       ├── <379>  [!=]
            │       │   │       │   ├── <376> Subscript
            │       │   │       │   │   ├── <374> Dot
            │       │   │       │   │   │   ├── <372> Var [two_xmm_struct]
            │       │   │       │   │   │   ╰── d
            │       │   │       │   │   ╰── <375> Constant Int [0]
            │       │   │       │   ╰── <378> Constant Double [+5.55e1]
            │       │   │       ╰── <389>  [!=]
            │       │   │           ├── <386> Subscript
            │       │   │           │   ├── <384> Dot
            │       │   │           │   │   ├── <382> Var [two_xmm_struct]
            │       │   │           │   │   ╰── d
            │       │   │           │   ╰── <385> Constant Int [1]
            │       │   │           ╰── <388> Constant Double [+4.44e1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <391> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <409>  [||]
            │       │   │       ├── <400>  [!=]
            │       │   │       │   ├── <397> Dot
            │       │   │       │   │   ├── <395> Var [int_struct]
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <399> Constant Int [99]
            │       │   │       ╰── <408>  [!=]
            │       │   │           ├── <405> Dot
            │       │   │           │   ├── <403> Var [int_struct]
            │       │   │           │   ╰── i
            │       │   │           ╰── <407> Constant Int [54320]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <410> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <419>  [!=]
            │       │   │       ├── <416> Dot
            │       │   │       │   ├── <414> Var [xmm_struct]
            │       │   │       │   ╰── d
            │       │   │       ╰── <418> Constant Double [+5.125e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <420> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <440>  [||]
            │       │   │       ├── <429> FunctionCall [strcmp]
            │       │   │       │   ├── <427> Dot
            │       │   │       │   │   ├── <425> Var [mixed_struct]
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <428> "hi"
            │       │   │       ╰── <439>  [!=]
            │       │   │           ├── <436> Dot
            │       │   │           │   ├── <434> Dot
            │       │   │           │   │   ├── <432> Var [mixed_struct]
            │       │   │           │   │   ╰── dbl
            │       │   │           │   ╰── d
            │       │   │           ╰── <438> Constant Double [+1.234e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <441> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <459>  [||]
            │       │   │       ├── <450> FunctionCall [strcmp]
            │       │   │       │   ├── <448> Dot
            │       │   │       │   │   ├── <446> Var [int_struct_2]
            │       │   │       │   │   ╰── arr
            │       │   │       │   ╰── <449> "string!"
            │       │   │       ╰── <458>  [!=]
            │       │   │           ├── <455> Dot
            │       │   │           │   ├── <453> Var [int_struct_2]
            │       │   │           │   ╰── i
            │       │   │           ╰── <457> Constant Int [123]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <460> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <469>  [!=]
            │       │   │       ├── <466> Dot
            │       │   │       │   ├── <464> Var [another_int_struct]
            │       │   │       │   ╰── l
            │       │   │       ╰── <468> Constant Int [567890]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <470> Constant Int [0]
            │       ╰── Return
            │           ╰── <473> Constant Int [1]
            ├── Function [a_bunch_of_arguments]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i0
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i1
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i2
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i3
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i4
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── param
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [two_longs]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i5
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <542>  [||]
            │       │   │       ├── <535>  [||]
            │       │   │       │   ├── <528>  [||]
            │       │   │       │   │   ├── <521>  [||]
            │       │   │       │   │   │   ├── <514>  [||]
            │       │   │       │   │   │   │   ├── <507>  [!=]
            │       │   │       │   │   │   │   │   ├── <504> Var [i0]
            │       │   │       │   │   │   │   │   ╰── <506> Constant Int [0]
            │       │   │       │   │   │   │   ╰── <513>  [!=]
            │       │   │       │   │   │   │       ├── <510> Var [i1]
            │       │   │       │   │   │   │       ╰── <512> Constant Int [1]
            │       │   │       │   │   │   ╰── <520>  [!=]
            │       │   │       │   │   │       ├── <517> Var [i2]
            │       │   │       │   │   │       ╰── <519> Constant Int [2]
            │       │   │       │   │   ╰── <527>  [!=]
            │       │   │       │   │       ├── <524> Var [i3]
            │       │   │       │   │       ╰── <526> Constant Int [3]
            │       │   │       │   ╰── <534>  [!=]
            │       │   │       │       ├── <531> Var [i4]
            │       │   │       │       ╰── <533> Constant Int [4]
            │       │   │       ╰── <541>  [!=]
            │       │   │           ├── <538> Var [i5]
            │       │   │           ╰── <540> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <543> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <563>  [||]
            │       │   │       ├── <554>  [!=]
            │       │   │       │   ├── <551> Dot
            │       │   │       │   │   ├── <549> Var [param]
            │       │   │       │   │   ╰── a
            │       │   │       │   ╰── <553> Constant Long [1234567]
            │       │   │       ╰── <562>  [!=]
            │       │   │           ├── <559> Dot
            │       │   │           │   ├── <557> Var [param]
            │       │   │           │   ╰── b
            │       │   │           ╰── <561> Constant Long [89101112]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <564> Constant Int [0]
            │       ╰── Return
            │           ╰── <569> Constant Int [1]
            ├── Function [structs_and_scalars]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── os
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [odd_size]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── mem
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [memory]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── xmm_struct
            │   │       ╰── Type
            │   │           ╰── Struct [one_xmm]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <599>  [!=]
            │       │   │       ├── <596> Var [l]
            │       │   │       ╰── <598> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <600> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <607>  [!=]
            │       │   │       ├── <604> Var [d]
            │       │   │       ╰── <606> Constant Double [+1e1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <608> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <617> FunctionCall [strcmp]
            │       │   │       ├── <615> Dot
            │       │   │       │   ├── <613> Var [os]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <616> "lmno"
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <618> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <654>  [||]
            │       │   │       ├── <645>  [||]
            │       │   │       │   ├── <636>  [||]
            │       │   │       │   │   ├── <627> FunctionCall [strcmp]
            │       │   │       │   │   │   ├── <625> Dot
            │       │   │       │   │   │   │   ├── <623> Var [mem]
            │       │   │       │   │   │   │   ╰── c
            │       │   │       │   │   │   ╰── <626> "rs"
            │       │   │       │   │   ╰── <635>  [!=]
            │       │   │       │   │       ├── <632> Dot
            │       │   │       │   │       │   ├── <630> Var [mem]
            │       │   │       │   │       │   ╰── d
            │       │   │       │   │       ╰── <634> Constant Double [+1.575e1]
            │       │   │       │   ╰── <644>  [!=]
            │       │   │       │       ├── <641> Dot
            │       │   │       │       │   ├── <639> Var [mem]
            │       │   │       │       │   ╰── i
            │       │   │       │       ╰── <643> Constant Int [3333]
            │       │   │       ╰── <653>  [!=]
            │       │   │           ├── <650> Dot
            │       │   │           │   ├── <648> Var [mem]
            │       │   │           │   ╰── l
            │       │   │           ╰── <652> Constant Int [4444]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <655> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <664>  [!=]
            │       │   │       ├── <661> Dot
            │       │   │       │   ├── <659> Var [xmm_struct]
            │       │   │       │   ╰── d
            │       │   │       ╰── <663> Constant Double [+5.125e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <665> Constant Int [0]
            │       ╰── Return
            │           ╰── <668> Constant Int [1]
            ├── Function [struct_in_mem]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── first_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [xmm_and_int]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── second_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [two_xmm]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── third_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [int_and_xmm]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── fourth_struct
            │   │       ╰── Type
            │   │           ╰── Struct [one_xmm]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <725>  [||]
            │       │   │       ├── <718>  [||]
            │       │   │       │   ├── <711>  [!=]
            │       │   │       │   │   ├── <708> Var [a]
            │       │   │       │   │   ╰── <710> Constant Double [+1e1]
            │       │   │       │   ╰── <717>  [!=]
            │       │   │       │       ├── <714> Var [b]
            │       │   │       │       ╰── <716> Constant Double [+1.1125e1]
            │       │   │       ╰── <724>  [!=]
            │       │   │           ├── <721> Var [c]
            │       │   │           ╰── <723> Constant Double [+1.2e1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <726> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <746>  [||]
            │       │   │       ├── <735> FunctionCall [strcmp]
            │       │   │       │   ├── <733> Dot
            │       │   │       │   │   ├── <731> Var [first_struct]
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <734> "hi"
            │       │   │       ╰── <745>  [!=]
            │       │   │           ├── <742> Dot
            │       │   │           │   ├── <740> Dot
            │       │   │           │   │   ├── <738> Var [first_struct]
            │       │   │           │   │   ╰── dbl
            │       │   │           │   ╰── d
            │       │   │           ╰── <744> Constant Double [+1.234e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <747> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <754>  [!=]
            │       │   │       ├── <751> Var [d]
            │       │   │       ╰── <753> Constant Double [+1.3e1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <755> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <777>  [||]
            │       │   │       ├── <766>  [!=]
            │       │   │       │   ├── <763> Subscript
            │       │   │       │   │   ├── <761> Dot
            │       │   │       │   │   │   ├── <759> Var [second_struct]
            │       │   │       │   │   │   ╰── d
            │       │   │       │   │   ╰── <762> Constant Int [0]
            │       │   │       │   ╰── <765> Constant Double [+5.55e1]
            │       │   │       ╰── <776>  [!=]
            │       │   │           ├── <773> Subscript
            │       │   │           │   ├── <771> Dot
            │       │   │           │   │   ├── <769> Var [second_struct]
            │       │   │           │   │   ╰── d
            │       │   │           │   ╰── <772> Constant Int [1]
            │       │   │           ╰── <775> Constant Double [+4.44e1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <778> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <782> Var [l]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <783> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <801>  [||]
            │       │   │       ├── <792>  [!=]
            │       │   │       │   ├── <789> Dot
            │       │   │       │   │   ├── <787> Var [third_struct]
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <791> Constant Int [112]
            │       │   │       ╰── <800>  [!=]
            │       │   │           ├── <797> Dot
            │       │   │           │   ├── <795> Var [third_struct]
            │       │   │           │   ╰── d
            │       │   │           ╰── <799> Constant Double [+4.56e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <802> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <811>  [!=]
            │       │   │       ├── <808> Dot
            │       │   │       │   ├── <806> Var [fourth_struct]
            │       │   │       │   ╰── d
            │       │   │       ╰── <810> Constant Double [+5.125e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <812> Constant Int [0]
            │       ╰── Return
            │           ╰── <815> Constant Int [1]
            ├── Function [pass_borderline_struct_in_memory]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── t_i
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [two_ints]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i_x
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [int_and_xmm]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ptr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Void
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── t_i_n
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [two_ints_nested]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <884>  [||]
            │       │   │       ├── <873>  [||]
            │       │   │       │   ├── <862>  [||]
            │       │   │       │   │   ├── <851>  [!=]
            │       │   │       │   │   │   ├── <848> Dot
            │       │   │       │   │   │   │   ├── <846> Var [t_i]
            │       │   │       │   │   │   │   ╰── c
            │       │   │       │   │   │   ╰── <850> Constant Int [95]
            │       │   │       │   │   ╰── <861>  [!=]
            │       │   │       │   │       ├── <858> Subscript
            │       │   │       │   │       │   ├── <856> Dot
            │       │   │       │   │       │   │   ├── <854> Var [t_i]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <857> Constant Int [0]
            │       │   │       │   │       ╰── <860> Constant Int [5]
            │       │   │       │   ╰── <872>  [!=]
            │       │   │       │       ├── <869> Subscript
            │       │   │       │       │   ├── <867> Dot
            │       │   │       │       │   │   ├── <865> Var [t_i]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <868> Constant Int [1]
            │       │   │       │       ╰── <871> Constant Int [6]
            │       │   │       ╰── <883>  [!=]
            │       │   │           ├── <880> Subscript
            │       │   │           │   ├── <878> Dot
            │       │   │           │   │   ├── <876> Var [t_i]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <879> Constant Int [2]
            │       │   │           ╰── <882> Constant Int [7]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <885> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <892>  [!=]
            │       │   │       ├── <889> Var [c]
            │       │   │       ╰── <891> Constant Int [33]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <893> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <911>  [||]
            │       │   │       ├── <902>  [!=]
            │       │   │       │   ├── <899> Dot
            │       │   │       │   │   ├── <897> Var [i_x]
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <901> Constant Int [112]
            │       │   │       ╰── <910>  [!=]
            │       │   │           ├── <907> Dot
            │       │   │           │   ├── <905> Var [i_x]
            │       │   │           │   ╰── d
            │       │   │           ╰── <909> Constant Double [+4.56e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <912> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <916> Var [ptr]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <917> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <939>  [||]
            │       │   │       ├── <928>  [!=]
            │       │   │       │   ├── <925> Dot
            │       │   │       │   │   ├── <923> Dot
            │       │   │       │   │   │   ├── <921> Var [t_i_n]
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <927> Constant Int [99]
            │       │   │       ╰── <938>  [!=]
            │       │   │           ├── <935> Dot
            │       │   │           │   ├── <933> Dot
            │       │   │           │   │   ├── <931> Var [t_i_n]
            │       │   │           │   │   ╰── a
            │       │   │           │   ╰── i
            │       │   │           ╰── <937> Constant Int [54320]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <940> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <962>  [||]
            │       │   │       ├── <951>  [!=]
            │       │   │       │   ├── <948> Dot
            │       │   │       │   │   ├── <946> Dot
            │       │   │       │   │   │   ├── <944> Var [t_i_n]
            │       │   │       │   │   │   ╰── b
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <950> Constant Int [99]
            │       │   │       ╰── <961>  [!=]
            │       │   │           ├── <958> Dot
            │       │   │           │   ├── <956> Dot
            │       │   │           │   │   ├── <954> Var [t_i_n]
            │       │   │           │   │   ╰── b
            │       │   │           │   ╰── i
            │       │   │           ╰── <960> Constant Int [54320]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <963> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <970>  [!=]
            │       │   │       ├── <967> Var [d]
            │       │   │       ╰── <969> Constant Double [+7.8e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <971> Constant Int [0]
            │       ╰── Return
            │           ╰── <974> Constant Int [1]
            ├── Function [pass_uneven_struct_in_mem]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── struct1
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [twelve_bytes]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── struct2
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [twelve_bytes]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── os
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [odd_size]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── m
            │   │       ╰── Type
            │   │           ╰── Struct [memory]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1012>  [!=]
            │       │   │       ├── <1007> Dot
            │       │   │       │   ├── <1005> Var [struct1]
            │       │   │       │   ╰── i
            │       │   │       ╰── <1011> Unary [-]
            │       │   │           ╰── <1010> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1013> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1048>  [||]
            │       │   │       ├── <1037>  [||]
            │       │   │       │   ├── <1026>  [!=]
            │       │   │       │   │   ├── <1023> Subscript
            │       │   │       │   │   │   ├── <1021> Dot
            │       │   │       │   │   │   │   ├── <1019> Var [struct1]
            │       │   │       │   │   │   │   ╰── arr
            │       │   │       │   │   │   ╰── <1022> Constant Int [0]
            │       │   │       │   │   ╰── <1025> Constant Int [127]
            │       │   │       │   ╰── <1036>  [!=]
            │       │   │       │       ├── <1033> Subscript
            │       │   │       │       │   ├── <1031> Dot
            │       │   │       │       │   │   ├── <1029> Var [struct1]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <1032> Constant Int [1]
            │       │   │       │       ╰── <1035> Constant Int [126]
            │       │   │       ╰── <1047>  [!=]
            │       │   │           ├── <1044> Subscript
            │       │   │           │   ├── <1042> Dot
            │       │   │           │   │   ├── <1040> Var [struct1]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <1043> Constant Int [2]
            │       │   │           ╰── <1046> Constant Int [125]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1049> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1065>  [||]
            │       │   │       ├── <1058>  [!=]
            │       │   │       │   ├── <1055> Var [a]
            │       │   │       │   ╰── <1057> Constant Long [9223372036854775805]
            │       │   │       ╰── <1064>  [!=]
            │       │   │           ├── <1061> Var [b]
            │       │   │           ╰── <1063> Constant Long [9223372036854775800]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1066> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1079>  [!=]
            │       │   │       ├── <1074> Dot
            │       │   │       │   ├── <1072> Var [struct2]
            │       │   │       │   ╰── i
            │       │   │       ╰── <1078> Unary [-]
            │       │   │           ╰── <1077> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1080> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1115>  [||]
            │       │   │       ├── <1104>  [||]
            │       │   │       │   ├── <1093>  [!=]
            │       │   │       │   │   ├── <1090> Subscript
            │       │   │       │   │   │   ├── <1088> Dot
            │       │   │       │   │   │   │   ├── <1086> Var [struct2]
            │       │   │       │   │   │   │   ╰── arr
            │       │   │       │   │   │   ╰── <1089> Constant Int [0]
            │       │   │       │   │   ╰── <1092> Constant Int [100]
            │       │   │       │   ╰── <1103>  [!=]
            │       │   │       │       ├── <1100> Subscript
            │       │   │       │       │   ├── <1098> Dot
            │       │   │       │       │   │   ├── <1096> Var [struct2]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <1099> Constant Int [1]
            │       │   │       │       ╰── <1102> Constant Int [101]
            │       │   │       ╰── <1114>  [!=]
            │       │   │           ├── <1111> Subscript
            │       │   │           │   ├── <1109> Dot
            │       │   │           │   │   ├── <1107> Var [struct2]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <1110> Constant Int [2]
            │       │   │           ╰── <1113> Constant Int [102]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1116> Constant Int [0]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <1124> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <1132>  [<]
            │       │   │       ├── <1129> Var [i]
            │       │   │       ╰── <1131> Constant Int [5]
            │       │   ├── Condition
            │       │   │   ╰── <1141> Assign [=]
            │       │   │       ├── <1134> Var [i]
            │       │   │       ╰── <1140>  [+]
            │       │   │           ├── <1137> Var [i]
            │       │   │           ╰── <1139> Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <1155>  [!=]
            │       │           │       ├── <1148> Subscript
            │       │           │       │   ├── <1145> Dot
            │       │           │       │   │   ├── <1143> Var [os]
            │       │           │       │   │   ╰── arr
            │       │           │       │   ╰── <1147> Var [i]
            │       │           │       ╰── <1154>  [-]
            │       │           │           ├── <1150> Constant Int [100]
            │       │           │           ╰── <1153> Var [i]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── <1156> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1170>  [!=]
            │       │   │       ├── <1167> Dot
            │       │   │       │   ├── <1165> Var [m]
            │       │   │       │   ╰── d
            │       │   │       ╰── <1169> Constant Double [+5.345e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1171> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1212>  [||]
            │       │   │       ├── <1199>  [||]
            │       │   │       │   ├── <1186>  [!=]
            │       │   │       │   │   ├── <1181> Subscript
            │       │   │       │   │   │   ├── <1179> Dot
            │       │   │       │   │   │   │   ├── <1177> Var [m]
            │       │   │       │   │   │   │   ╰── c
            │       │   │       │   │   │   ╰── <1180> Constant Int [0]
            │       │   │       │   │   ╰── <1185> Unary [-]
            │       │   │       │   │       ╰── <1184> Constant Int [1]
            │       │   │       │   ╰── <1198>  [!=]
            │       │   │       │       ├── <1193> Subscript
            │       │   │       │       │   ├── <1191> Dot
            │       │   │       │       │   │   ├── <1189> Var [m]
            │       │   │       │       │   │   ╰── c
            │       │   │       │       │   ╰── <1192> Constant Int [1]
            │       │   │       │       ╰── <1197> Unary [-]
            │       │   │       │           ╰── <1196> Constant Int [2]
            │       │   │       ╰── <1211>  [!=]
            │       │   │           ├── <1206> Subscript
            │       │   │           │   ├── <1204> Dot
            │       │   │           │   │   ├── <1202> Var [m]
            │       │   │           │   │   ╰── c
            │       │   │           │   ╰── <1205> Constant Int [2]
            │       │   │           ╰── <1210> Unary [-]
            │       │   │               ╰── <1209> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1213> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1224>  [!=]
            │       │   │       ├── <1221> Dot
            │       │   │       │   ├── <1219> Var [m]
            │       │   │       │   ╰── l
            │       │   │       ╰── <1223> Constant Long [4294967300]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1225> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1236>  [!=]
            │       │   │       ├── <1233> Dot
            │       │   │       │   ├── <1231> Var [m]
            │       │   │       │   ╰── i
            │       │   │       ╰── <1235> Constant Int [10000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1237> Constant Int [0]
            │       ╰── Return
            │           ╰── <1242> Constant Int [1]
            ╰── Function [pass_later_structs_in_regs]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── m
                │   │   ╰── Type
                │   │       ╰── Struct [memory]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── struct1
                │   │   ╰── Type
                │   │       ╰── Struct [twelve_bytes]
                │   ╰── Param
                │       ├── Name
                │       │   ╰── struct2
                │       ╰── Type
                │           ╰── Struct [one_xmm]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1268>  [!=]
                    │   │       ├── <1265> Dot
                    │   │       │   ├── <1263> Var [m]
                    │   │       │   ╰── d
                    │   │       ╰── <1267> Constant Double [+5.345e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1269> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1310>  [||]
                    │   │       ├── <1297>  [||]
                    │   │       │   ├── <1284>  [!=]
                    │   │       │   │   ├── <1279> Subscript
                    │   │       │   │   │   ├── <1277> Dot
                    │   │       │   │   │   │   ├── <1275> Var [m]
                    │   │       │   │   │   │   ╰── c
                    │   │       │   │   │   ╰── <1278> Constant Int [0]
                    │   │       │   │   ╰── <1283> Unary [-]
                    │   │       │   │       ╰── <1282> Constant Int [1]
                    │   │       │   ╰── <1296>  [!=]
                    │   │       │       ├── <1291> Subscript
                    │   │       │       │   ├── <1289> Dot
                    │   │       │       │   │   ├── <1287> Var [m]
                    │   │       │       │   │   ╰── c
                    │   │       │       │   ╰── <1290> Constant Int [1]
                    │   │       │       ╰── <1295> Unary [-]
                    │   │       │           ╰── <1294> Constant Int [2]
                    │   │       ╰── <1309>  [!=]
                    │   │           ├── <1304> Subscript
                    │   │           │   ├── <1302> Dot
                    │   │           │   │   ├── <1300> Var [m]
                    │   │           │   │   ╰── c
                    │   │           │   ╰── <1303> Constant Int [2]
                    │   │           ╰── <1308> Unary [-]
                    │   │               ╰── <1307> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1311> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1322>  [!=]
                    │   │       ├── <1319> Dot
                    │   │       │   ├── <1317> Var [m]
                    │   │       │   ╰── l
                    │   │       ╰── <1321> Constant Long [4294967300]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1323> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1334>  [!=]
                    │   │       ├── <1331> Dot
                    │   │       │   ├── <1329> Var [m]
                    │   │       │   ╰── i
                    │   │       ╰── <1333> Constant Int [10000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1335> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1348>  [!=]
                    │   │       ├── <1343> Dot
                    │   │       │   ├── <1341> Var [struct1]
                    │   │       │   ╰── i
                    │   │       ╰── <1347> Unary [-]
                    │   │           ╰── <1346> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1349> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1384>  [||]
                    │   │       ├── <1373>  [||]
                    │   │       │   ├── <1362>  [!=]
                    │   │       │   │   ├── <1359> Subscript
                    │   │       │   │   │   ├── <1357> Dot
                    │   │       │   │   │   │   ├── <1355> Var [struct1]
                    │   │       │   │   │   │   ╰── arr
                    │   │       │   │   │   ╰── <1358> Constant Int [0]
                    │   │       │   │   ╰── <1361> Constant Int [127]
                    │   │       │   ╰── <1372>  [!=]
                    │   │       │       ├── <1369> Subscript
                    │   │       │       │   ├── <1367> Dot
                    │   │       │       │   │   ├── <1365> Var [struct1]
                    │   │       │       │   │   ╰── arr
                    │   │       │       │   ╰── <1368> Constant Int [1]
                    │   │       │       ╰── <1371> Constant Int [126]
                    │   │       ╰── <1383>  [!=]
                    │   │           ├── <1380> Subscript
                    │   │           │   ├── <1378> Dot
                    │   │           │   │   ├── <1376> Var [struct1]
                    │   │           │   │   ╰── arr
                    │   │           │   ╰── <1379> Constant Int [2]
                    │   │           ╰── <1382> Constant Int [125]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1385> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1396>  [!=]
                    │   │       ├── <1393> Dot
                    │   │       │   ├── <1391> Var [struct2]
                    │   │       │   ╰── d
                    │   │       ╰── <1395> Constant Double [+5.125e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1397> Constant Int [0]
                    ╰── Return
                        ╰── <1402> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_param_calling_conventions_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int strncmp(char *s1, char *s2, unsigned long n);
        struct two_longs {
            long a;
            long b;
        };
        struct one_int {
            int i;
            char c;
        };
        struct one_int_exactly {
            unsigned long l;
        };
        struct two_ints {
            char c;
            int arr[3];
        };
        struct two_ints_nested {
            struct one_int a;
            struct one_int b;
        };
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct one_xmm {
            double d;
        };
        struct two_xmm {
            double d[2];
        };
        struct int_and_xmm {
            char c;
            double d;
        };
        struct xmm_and_int {
            struct one_xmm dbl;
            char c[3];
        };
        struct odd_size {
            char arr[5];
        };
        struct memory {
            double d;
            char c[3];
            long l;
            int i;
        };
        int pass_small_structs(struct two_xmm two_xmm_struct, struct one_int int_struct,
                               struct one_xmm xmm_struct,
                               struct xmm_and_int mixed_struct,
                               struct twelve_bytes int_struct_2,
                               struct one_int_exactly another_int_struct);
        int a_bunch_of_arguments(int i0, int i1, int i2, int i3, int i4,
                                 struct two_longs param, int i5);
        int structs_and_scalars(long l, double d, struct odd_size os, struct memory mem,
                                struct one_xmm xmm_struct);
        int struct_in_mem(double a, double b, double c, struct xmm_and_int first_struct,
                          double d, struct two_xmm second_struct, long l,
                          struct int_and_xmm third_struct,
                          struct one_xmm fourth_struct);
        int pass_borderline_struct_in_memory(struct two_ints t_i, int c,
                                             struct int_and_xmm i_x, void *ptr,
                                             struct two_ints_nested t_i_n, double d);
        int pass_uneven_struct_in_mem(struct twelve_bytes struct1, long a, long b,
                                      struct twelve_bytes struct2, struct odd_size os,
                                      struct memory m);
        int pass_later_structs_in_regs(struct memory m, struct twelve_bytes struct1, struct one_xmm struct2);
        
        int main(void) {
            struct two_longs two_longs = {1234567l, 89101112l};
            struct one_int one_int = {54320, 'c'};
            struct one_int_exactly one_long = {567890l};
            struct two_ints two_ints = {'_', {5, 6, 7}};
            struct two_ints_nested two_ints_nested = {one_int, one_int};
            struct twelve_bytes xii = {123, "string!"};
            struct one_xmm one_xmm = {5.125};
            struct two_xmm two_xmm = {{55.5, 44.4}};
            struct int_and_xmm int_and_xmm = {'p', 4.56};
            struct xmm_and_int xmm_and_int = {{1.234}, "hi"};
            struct odd_size odd = {"lmno"};
            struct memory mem = {15.75, "rs", 4444, 3333};
            if (!pass_small_structs(two_xmm, one_int, one_xmm, xmm_and_int, xii,
                                    one_long)) {
                return 1;
            }
            if (!a_bunch_of_arguments(0, 1, 2, 3, 4, two_longs, 5)) {
                return 2;
            }
            if (!structs_and_scalars(10, 10.0, odd, mem, one_xmm)) {
                return 2;
            }
            if (!struct_in_mem(10.0, 11.125, 12.0, xmm_and_int, 13.0, two_xmm, 0,
                               int_and_xmm, one_xmm)) {
                return 3;
            }
            if (!pass_borderline_struct_in_memory(two_ints, '!', int_and_xmm, 0,
                                                  two_ints_nested, 7.8)) {
                return 4;
            }
            struct twelve_bytes struct1 = {-1, {127, 126, 125}};
            struct twelve_bytes struct2 = {-5, {100, 101, 102}};
            struct odd_size os = {{100, 99, 98, 97, 96}};
            struct memory m = {5.345, {-1, -2, -3}, 4294967300l, 10000};
            if (!pass_uneven_struct_in_mem(struct1, 9223372036854775805l,
                                           9223372036854775800l, struct2, os, m)) {
                return 5;
            }
            if (!pass_later_structs_in_regs(m, struct1, one_xmm)) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [strncmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── n
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [two_longs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Long
            ├── Struct [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [one_int_exactly]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Struct [two_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Struct [two_ints_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Struct [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [one_int]
            ├── Struct [twelve_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [two_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Double
            ├── Struct [int_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [xmm_and_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl
            │   │   ╰── Type
            │   │       ╰── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [odd_size]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [memory]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Function [pass_small_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm_struct
            │       │   ╰── Type
            │       │       ╰── Struct [two_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_struct
            │       │   ╰── Type
            │       │       ╰── Struct [one_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── xmm_struct
            │       │   ╰── Type
            │       │       ╰── Struct [one_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_struct
            │       │   ╰── Type
            │       │       ╰── Struct [xmm_and_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_struct_2
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── another_int_struct
            │           ╰── Type
            │               ╰── Struct [one_int_exactly]
            ├── Function [a_bunch_of_arguments]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i0
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── param
            │       │   ╰── Type
            │       │       ╰── Struct [two_longs]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i5
            │           ╰── Type
            │               ╰── Int
            ├── Function [structs_and_scalars]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── os
            │       │   ╰── Type
            │       │       ╰── Struct [odd_size]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mem
            │       │   ╰── Type
            │       │       ╰── Struct [memory]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── xmm_struct
            │           ╰── Type
            │               ╰── Struct [one_xmm]
            ├── Function [struct_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── first_struct
            │       │   ╰── Type
            │       │       ╰── Struct [xmm_and_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── second_struct
            │       │   ╰── Type
            │       │       ╰── Struct [two_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── third_struct
            │       │   ╰── Type
            │       │       ╰── Struct [int_and_xmm]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── fourth_struct
            │           ╰── Type
            │               ╰── Struct [one_xmm]
            ├── Function [pass_borderline_struct_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_i
            │       │   ╰── Type
            │       │       ╰── Struct [two_ints]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i_x
            │       │   ╰── Type
            │       │       ╰── Struct [int_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Void
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_i_n
            │       │   ╰── Type
            │       │       ╰── Struct [two_ints_nested]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d
            │           ╰── Type
            │               ╰── Double
            ├── Function [pass_uneven_struct_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── struct1
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── struct2
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── os
            │       │   ╰── Type
            │       │       ╰── Struct [odd_size]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── m
            │           ╰── Type
            │               ╰── Struct [memory]
            ├── Function [pass_later_structs_in_regs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── m
            │       │   ╰── Type
            │       │       ╰── Struct [memory]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── struct1
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── struct2
            │           ╰── Type
            │               ╰── Struct [one_xmm]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_longs
                    │   ├── Type
                    │   │   ╰── Struct [two_longs]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <351> Constant Long [1234567]
                    │           ╰── <353> Constant Long [89101112]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── one_int
                    │   ├── Type
                    │   │   ╰── Struct [one_int]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <361> Constant Int [54320]
                    │           ╰── <363> Constant Int [99]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── one_long
                    │   ├── Type
                    │   │   ╰── Struct [one_int_exactly]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <371> Constant Long [567890]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_ints
                    │   ├── Type
                    │   │   ╰── Struct [two_ints]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <379> Constant Int [95]
                    │           ╰── Compound
                    │               ├── <381> Constant Int [5]
                    │               ├── <383> Constant Int [6]
                    │               ╰── <385> Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_ints_nested
                    │   ├── Type
                    │   │   ╰── Struct [two_ints_nested]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <395> Var [one_int]
                    │           ╰── <398> Var [one_int]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── xii
                    │   ├── Type
                    │   │   ╰── Struct [twelve_bytes]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <406> Constant Int [123]
                    │           ╰── <408> "string!"
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── one_xmm
                    │   ├── Type
                    │   │   ╰── Struct [one_xmm]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <416> Constant Double [+5.125e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_xmm
                    │   ├── Type
                    │   │   ╰── Struct [two_xmm]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <424> Constant Double [+5.55e1]
                    │               ╰── <426> Constant Double [+4.44e1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── int_and_xmm
                    │   ├── Type
                    │   │   ╰── Struct [int_and_xmm]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <435> Constant Int [112]
                    │           ╰── <437> Constant Double [+4.56e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── xmm_and_int
                    │   ├── Type
                    │   │   ╰── Struct [xmm_and_int]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ╰── <445> Constant Double [+1.234e0]
                    │           ╰── <448> "hi"
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── odd
                    │   ├── Type
                    │   │   ╰── Struct [odd_size]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <456> "lmno"
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── mem
                    │   ├── Type
                    │   │   ╰── Struct [memory]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <464> Constant Double [+1.575e1]
                    │           ├── <466> "rs"
                    │           ├── <468> Constant Int [4444]
                    │           ╰── <470> Constant Int [3333]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <489> Unary [!]
                    │   │       ╰── <488> FunctionCall [pass_small_structs]
                    │   │           ├── <477> Var [two_xmm]
                    │   │           ├── <479> Var [one_int]
                    │   │           ├── <481> Var [one_xmm]
                    │   │           ├── <483> Var [xmm_and_int]
                    │   │           ├── <485> Var [xii]
                    │   │           ╰── <487> Var [one_long]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <490> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <506> Unary [!]
                    │   │       ╰── <505> FunctionCall [a_bunch_of_arguments]
                    │   │           ├── <497> Constant Int [0]
                    │   │           ├── <498> Constant Int [1]
                    │   │           ├── <499> Constant Int [2]
                    │   │           ├── <500> Constant Int [3]
                    │   │           ├── <501> Constant Int [4]
                    │   │           ├── <503> Var [two_longs]
                    │   │           ╰── <504> Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <507> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <523> Unary [!]
                    │   │       ╰── <522> FunctionCall [structs_and_scalars]
                    │   │           ├── <514> Constant Int [10]
                    │   │           ├── <515> Constant Double [+1e1]
                    │   │           ├── <517> Var [odd]
                    │   │           ├── <519> Var [mem]
                    │   │           ╰── <521> Var [one_xmm]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <524> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <545> Unary [!]
                    │   │       ╰── <544> FunctionCall [struct_in_mem]
                    │   │           ├── <531> Constant Double [+1e1]
                    │   │           ├── <532> Constant Double [+1.1125e1]
                    │   │           ├── <533> Constant Double [+1.2e1]
                    │   │           ├── <535> Var [xmm_and_int]
                    │   │           ├── <536> Constant Double [+1.3e1]
                    │   │           ├── <538> Var [two_xmm]
                    │   │           ├── <539> Constant Int [0]
                    │   │           ├── <541> Var [int_and_xmm]
                    │   │           ╰── <543> Var [one_xmm]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <546> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <563> Unary [!]
                    │   │       ╰── <562> FunctionCall [pass_borderline_struct_in_memory]
                    │   │           ├── <554> Var [two_ints]
                    │   │           ├── <555> Constant Int [33]
                    │   │           ├── <557> Var [int_and_xmm]
                    │   │           ├── <558> Constant Int [0]
                    │   │           ├── <560> Var [two_ints_nested]
                    │   │           ╰── <561> Constant Double [+7.8e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <564> Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── struct1
                    │   ├── Type
                    │   │   ╰── Struct [twelve_bytes]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <575> Unary [-]
                    │           │   ╰── <574> Constant Int [1]
                    │           ╰── Compound
                    │               ├── <577> Constant Int [127]
                    │               ├── <579> Constant Int [126]
                    │               ╰── <581> Constant Int [125]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── struct2
                    │   ├── Type
                    │   │   ╰── Struct [twelve_bytes]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <592> Unary [-]
                    │           │   ╰── <591> Constant Int [5]
                    │           ╰── Compound
                    │               ├── <594> Constant Int [100]
                    │               ├── <596> Constant Int [101]
                    │               ╰── <598> Constant Int [102]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── os
                    │   ├── Type
                    │   │   ╰── Struct [odd_size]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <607> Constant Int [100]
                    │               ├── <609> Constant Int [99]
                    │               ├── <611> Constant Int [98]
                    │               ├── <613> Constant Int [97]
                    │               ╰── <615> Constant Int [96]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── m
                    │   ├── Type
                    │   │   ╰── Struct [memory]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <624> Constant Double [+5.345e0]
                    │           ├── Compound
                    │           │   ├── <628> Unary [-]
                    │           │   │   ╰── <627> Constant Int [1]
                    │           │   ├── <632> Unary [-]
                    │           │   │   ╰── <631> Constant Int [2]
                    │           │   ╰── <636> Unary [-]
                    │           │       ╰── <635> Constant Int [3]
                    │           ├── <639> Constant Long [4294967300]
                    │           ╰── <641> Constant Int [10000]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <658> Unary [!]
                    │   │       ╰── <657> FunctionCall [pass_uneven_struct_in_mem]
                    │   │           ├── <648> Var [struct1]
                    │   │           ├── <649> Constant Long [9223372036854775805]
                    │   │           ├── <650> Constant Long [9223372036854775800]
                    │   │           ├── <652> Var [struct2]
                    │   │           ├── <654> Var [os]
                    │   │           ╰── <656> Var [m]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <659> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <673> Unary [!]
                    │   │       ╰── <672> FunctionCall [pass_later_structs_in_regs]
                    │   │           ├── <667> Var [m]
                    │   │           ├── <669> Var [struct1]
                    │   │           ╰── <671> Var [one_xmm]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <674> Constant Int [6]
                    ╰── Return
                        ╰── <679> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_pass_struct() {
    let src = r#"
        struct pair {
            int x;
            int y;
        };
        int validate_struct_param(struct pair p);
        
        int validate_struct_param(struct pair p) {
            if (p.x != 1 || p.y != 2) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Function [validate_struct_param]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── p
            │           ╰── Type
            │               ╰── Struct [pair]
            ╰── Function [validate_struct_param]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── p
                │       ╰── Type
                │           ╰── Struct [pair]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <43>  [||]
                    │   │       ├── <34>  [!=]
                    │   │       │   ├── <31> Dot
                    │   │       │   │   ├── <29> Var [p]
                    │   │       │   │   ╰── x
                    │   │       │   ╰── <33> Constant Int [1]
                    │   │       ╰── <42>  [!=]
                    │   │           ├── <39> Dot
                    │   │           │   ├── <37> Var [p]
                    │   │           │   ╰── y
                    │   │           ╰── <41> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <44> Constant Int [0]
                    ╰── Return
                        ╰── <49> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_pass_struct_client() {
    let src = r#"
        struct pair {
            int x;
            int y;
        };
        int validate_struct_param(struct pair p);
        
        int main(void) {
            struct pair arg = {1, 2};
            if (!validate_struct_param(arg)) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Function [validate_struct_param]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── p
            │           ╰── Type
            │               ╰── Struct [pair]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arg
                    │   ├── Type
                    │   │   ╰── Struct [pair]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <28> Constant Int [1]
                    │           ╰── <30> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <39> Unary [!]
                    │   │       ╰── <38> FunctionCall [validate_struct_param]
                    │   │           ╰── <37> Var [arg]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <40> Constant Int [1]
                    ╰── Return
                        ╰── <45> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_struct_sizes() {
    let src = r#"
        struct bytesize1 {
            unsigned char arr[1];
        };
        extern struct bytesize1 globvar_1;
        struct bytesize2 {
            unsigned char arr[2];
        };
        extern struct bytesize2 globvar_2;
        struct bytesize3 {
            unsigned char arr[3];
        };
        extern struct bytesize3 globvar_3;
        struct bytesize4 {
            unsigned char arr[4];
        };
        extern struct bytesize4 globvar_4;
        struct bytesize5 {
            unsigned char arr[5];
        };
        extern struct bytesize5 globvar_5;
        struct bytesize6 {
            unsigned char arr[6];
        };
        extern struct bytesize6 globvar_6;
        struct bytesize7 {
            unsigned char arr[7];
        };
        extern struct bytesize7 globvar_7;
        struct bytesize8 {
            unsigned char arr[8];
        };
        extern struct bytesize8 globvar_8;
        struct bytesize9 {
            unsigned char arr[9];
        };
        extern struct bytesize9 globvar_9;
        struct bytesize10 {
            unsigned char arr[10];
        };
        extern struct bytesize10 globvar_10;
        struct bytesize11 {
            unsigned char arr[11];
        };
        extern struct bytesize11 globvar_11;
        struct bytesize12 {
            unsigned char arr[12];
        };
        extern struct bytesize12 globvar_12;
        struct bytesize13 {
            unsigned char arr[13];
        };
        extern struct bytesize13 globvar_13;
        struct bytesize14 {
            unsigned char arr[14];
        };
        extern struct bytesize14 globvar_14;
        struct bytesize15 {
            unsigned char arr[15];
        };
        extern struct bytesize15 globvar_15;
        struct bytesize16 {
            unsigned char arr[16];
        };
        extern struct bytesize16 globvar_16;
        struct bytesize17 {
            unsigned char arr[17];
        };
        extern struct bytesize17 globvar_17;
        struct bytesize18 {
            unsigned char arr[18];
        };
        extern struct bytesize18 globvar_18;
        struct bytesize19 {
            unsigned char arr[19];
        };
        extern struct bytesize19 globvar_19;
        struct bytesize20 {
            unsigned char arr[20];
        };
        extern struct bytesize20 globvar_20;
        struct bytesize21 {
            unsigned char arr[21];
        };
        extern struct bytesize21 globvar_21;
        struct bytesize22 {
            unsigned char arr[22];
        };
        extern struct bytesize22 globvar_22;
        struct bytesize23 {
            unsigned char arr[23];
        };
        extern struct bytesize23 globvar_23;
        struct bytesize24 {
            unsigned char arr[24];
        };
        extern struct bytesize24 globvar_24;
        int fun0(struct bytesize1 a, struct bytesize2 b, struct bytesize3 c,
                 struct bytesize4 d, struct bytesize5 e, struct bytesize6 f,
                 struct bytesize7 g, struct bytesize8 h, struct bytesize9 i,
                 struct bytesize10 j, struct bytesize11 k, struct bytesize12 l,
                 struct bytesize13 m, struct bytesize14 n, struct bytesize15 o,
                 struct bytesize16 p, struct bytesize17 q, struct bytesize18 r,
                 struct bytesize19 s, struct bytesize20 t, struct bytesize21 u,
                 struct bytesize22 v, struct bytesize23 w, struct bytesize24 x,
                 unsigned char *a_expected, unsigned char *b_expected,
                 unsigned char *c_expected, unsigned char *d_expected,
                 unsigned char *e_expected, unsigned char *f_expected,
                 unsigned char *g_expected, unsigned char *h_expected,
                 unsigned char *i_expected, unsigned char *j_expected,
                 unsigned char *k_expected, unsigned char *l_expected,
                 unsigned char *m_expected, unsigned char *n_expected,
                 unsigned char *o_expected, unsigned char *p_expected,
                 unsigned char *q_expected, unsigned char *r_expected,
                 unsigned char *s_expected, unsigned char *t_expected,
                 unsigned char *u_expected, unsigned char *v_expected,
                 unsigned char *w_expected, unsigned char *x_expected);
        int fun1(struct bytesize7 a, struct bytesize8 b, struct bytesize9 c,
                 struct bytesize10 d, struct bytesize1 e, struct bytesize2 f,
                 struct bytesize3 g, struct bytesize4 h, struct bytesize5 i,
                 struct bytesize6 j, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected, unsigned char *e_expected,
                 unsigned char *f_expected, unsigned char *g_expected,
                 unsigned char *h_expected, unsigned char *i_expected,
                 unsigned char *j_expected);
        int fun2(struct bytesize11 a, struct bytesize12 b, struct bytesize13 c,
                 struct bytesize1 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected);
        int fun3(struct bytesize14 a, struct bytesize15 b, struct bytesize16 c,
                 struct bytesize2 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected);
        int memcmp(void *s1, void *s2, unsigned long n);
        int fun0(struct bytesize1 a, struct bytesize2 b, struct bytesize3 c,
                 struct bytesize4 d, struct bytesize5 e, struct bytesize6 f,
                 struct bytesize7 g, struct bytesize8 h, struct bytesize9 i,
                 struct bytesize10 j, struct bytesize11 k, struct bytesize12 l,
                 struct bytesize13 m, struct bytesize14 n, struct bytesize15 o,
                 struct bytesize16 p, struct bytesize17 q, struct bytesize18 r,
                 struct bytesize19 s, struct bytesize20 t, struct bytesize21 u,
                 struct bytesize22 v, struct bytesize23 w, struct bytesize24 x,
                 unsigned char *a_expected, unsigned char *b_expected,
                 unsigned char *c_expected, unsigned char *d_expected,
                 unsigned char *e_expected, unsigned char *f_expected,
                 unsigned char *g_expected, unsigned char *h_expected,
                 unsigned char *i_expected, unsigned char *j_expected,
                 unsigned char *k_expected, unsigned char *l_expected,
                 unsigned char *m_expected, unsigned char *n_expected,
                 unsigned char *o_expected, unsigned char *p_expected,
                 unsigned char *q_expected, unsigned char *r_expected,
                 unsigned char *s_expected, unsigned char *t_expected,
                 unsigned char *u_expected, unsigned char *v_expected,
                 unsigned char *w_expected, unsigned char *x_expected) {
            if (memcmp(&a, a_expected, sizeof a)) {
                return 0;
            }
            if (memcmp(&b, b_expected, sizeof b)) {
                return 0;
            }
            if (memcmp(&c, c_expected, sizeof c)) {
                return 0;
            }
            if (memcmp(&d, d_expected, sizeof d)) {
                return 0;
            }
            if (memcmp(&e, e_expected, sizeof e)) {
                return 0;
            }
            if (memcmp(&f, f_expected, sizeof f)) {
                return 0;
            }
            if (memcmp(&g, g_expected, sizeof g)) {
                return 0;
            }
            if (memcmp(&h, h_expected, sizeof h)) {
                return 0;
            }
            if (memcmp(&i, i_expected, sizeof i)) {
                return 0;
            }
            if (memcmp(&j, j_expected, sizeof j)) {
                return 0;
            }
            if (memcmp(&k, k_expected, sizeof k)) {
                return 0;
            }
            if (memcmp(&l, l_expected, sizeof l)) {
                return 0;
            }
            if (memcmp(&m, m_expected, sizeof m)) {
                return 0;
            }
            if (memcmp(&n, n_expected, sizeof n)) {
                return 0;
            }
            if (memcmp(&o, o_expected, sizeof o)) {
                return 0;
            }
            if (memcmp(&p, p_expected, sizeof p)) {
                return 0;
            }
            if (memcmp(&q, q_expected, sizeof q)) {
                return 0;
            }
            if (memcmp(&r, r_expected, sizeof r)) {
                return 0;
            }
            if (memcmp(&s, s_expected, sizeof s)) {
                return 0;
            }
            if (memcmp(&t, t_expected, sizeof t)) {
                return 0;
            }
            if (memcmp(&u, u_expected, sizeof u)) {
                return 0;
            }
            if (memcmp(&v, v_expected, sizeof v)) {
                return 0;
            }
            if (memcmp(&w, w_expected, sizeof w)) {
                return 0;
            }
            if (memcmp(&x, x_expected, sizeof x)) {
                return 0;
            }
            return 1;
        }
        int fun1(struct bytesize7 a, struct bytesize8 b, struct bytesize9 c,
                 struct bytesize10 d, struct bytesize1 e, struct bytesize2 f,
                 struct bytesize3 g, struct bytesize4 h, struct bytesize5 i,
                 struct bytesize6 j, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected, unsigned char *e_expected,
                 unsigned char *f_expected, unsigned char *g_expected,
                 unsigned char *h_expected, unsigned char *i_expected,
                 unsigned char *j_expected) {
            if (memcmp(&a, a_expected, sizeof a)) {
                return 0;
            }
            if (memcmp(&b, b_expected, sizeof b)) {
                return 0;
            }
            if (memcmp(&c, c_expected, sizeof c)) {
                return 0;
            }
            if (memcmp(&d, d_expected, sizeof d)) {
                return 0;
            }
            if (memcmp(&e, e_expected, sizeof e)) {
                return 0;
            }
            if (memcmp(&f, f_expected, sizeof f)) {
                return 0;
            }
            if (memcmp(&g, g_expected, sizeof g)) {
                return 0;
            }
            if (memcmp(&h, h_expected, sizeof h)) {
                return 0;
            }
            if (memcmp(&i, i_expected, sizeof i)) {
                return 0;
            }
            if (memcmp(&j, j_expected, sizeof j)) {
                return 0;
            }
            return 1;
        }
        int fun2(struct bytesize11 a, struct bytesize12 b, struct bytesize13 c,
                 struct bytesize1 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected) {
            if (memcmp(&a, a_expected, sizeof a)) {
                return 0;
            }
            if (memcmp(&b, b_expected, sizeof b)) {
                return 0;
            }
            if (memcmp(&c, c_expected, sizeof c)) {
                return 0;
            }
            if (memcmp(&d, d_expected, sizeof d)) {
                return 0;
            }
            return 1;
        }
        int fun3(struct bytesize14 a, struct bytesize15 b, struct bytesize16 c,
                 struct bytesize2 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected) {
            if (memcmp(&a, a_expected, sizeof a)) {
                return 0;
            }
            if (memcmp(&b, b_expected, sizeof b)) {
                return 0;
            }
            if (memcmp(&c, c_expected, sizeof c)) {
                return 0;
            }
            if (memcmp(&d, d_expected, sizeof d)) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [bytesize1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_1
            │   ├── Type
            │   │   ╰── Struct [bytesize1]
            │   ╰── Extern
            ├── Struct [bytesize2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_2
            │   ├── Type
            │   │   ╰── Struct [bytesize2]
            │   ╰── Extern
            ├── Struct [bytesize3]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_3
            │   ├── Type
            │   │   ╰── Struct [bytesize3]
            │   ╰── Extern
            ├── Struct [bytesize4]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 4
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_4
            │   ├── Type
            │   │   ╰── Struct [bytesize4]
            │   ╰── Extern
            ├── Struct [bytesize5]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_5
            │   ├── Type
            │   │   ╰── Struct [bytesize5]
            │   ╰── Extern
            ├── Struct [bytesize6]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 6
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_6
            │   ├── Type
            │   │   ╰── Struct [bytesize6]
            │   ╰── Extern
            ├── Struct [bytesize7]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 7
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_7
            │   ├── Type
            │   │   ╰── Struct [bytesize7]
            │   ╰── Extern
            ├── Struct [bytesize8]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_8
            │   ├── Type
            │   │   ╰── Struct [bytesize8]
            │   ╰── Extern
            ├── Struct [bytesize9]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 9
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_9
            │   ├── Type
            │   │   ╰── Struct [bytesize9]
            │   ╰── Extern
            ├── Struct [bytesize10]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_10
            │   ├── Type
            │   │   ╰── Struct [bytesize10]
            │   ╰── Extern
            ├── Struct [bytesize11]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 11
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_11
            │   ├── Type
            │   │   ╰── Struct [bytesize11]
            │   ╰── Extern
            ├── Struct [bytesize12]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 12
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_12
            │   ├── Type
            │   │   ╰── Struct [bytesize12]
            │   ╰── Extern
            ├── Struct [bytesize13]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 13
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_13
            │   ├── Type
            │   │   ╰── Struct [bytesize13]
            │   ╰── Extern
            ├── Struct [bytesize14]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 14
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_14
            │   ├── Type
            │   │   ╰── Struct [bytesize14]
            │   ╰── Extern
            ├── Struct [bytesize15]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 15
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_15
            │   ├── Type
            │   │   ╰── Struct [bytesize15]
            │   ╰── Extern
            ├── Struct [bytesize16]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 16
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_16
            │   ├── Type
            │   │   ╰── Struct [bytesize16]
            │   ╰── Extern
            ├── Struct [bytesize17]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 17
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_17
            │   ├── Type
            │   │   ╰── Struct [bytesize17]
            │   ╰── Extern
            ├── Struct [bytesize18]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 18
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_18
            │   ├── Type
            │   │   ╰── Struct [bytesize18]
            │   ╰── Extern
            ├── Struct [bytesize19]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_19
            │   ├── Type
            │   │   ╰── Struct [bytesize19]
            │   ╰── Extern
            ├── Struct [bytesize20]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 20
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_20
            │   ├── Type
            │   │   ╰── Struct [bytesize20]
            │   ╰── Extern
            ├── Struct [bytesize21]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 21
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_21
            │   ├── Type
            │   │   ╰── Struct [bytesize21]
            │   ╰── Extern
            ├── Struct [bytesize22]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 22
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_22
            │   ├── Type
            │   │   ╰── Struct [bytesize22]
            │   ╰── Extern
            ├── Struct [bytesize23]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 23
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_23
            │   ├── Type
            │   │   ╰── Struct [bytesize23]
            │   ╰── Extern
            ├── Struct [bytesize24]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 24
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_24
            │   ├── Type
            │   │   ╰── Struct [bytesize24]
            │   ╰── Extern
            ├── Function [fun0]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize1]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize2]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize3]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize4]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize5]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize6]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize7]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize8]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize9]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize10]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── k
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize11]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize12]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── m
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize13]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── n
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize14]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── o
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize15]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── p
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize16]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── q
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize17]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── r
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize18]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize19]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize20]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── u
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize21]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── v
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize22]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── w
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize23]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize24]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── k_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── m_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── n_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── o_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── p_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── q_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── r_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── u_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── v_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── w_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── x_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [fun1]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize7]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize8]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize9]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize10]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize1]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize2]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize3]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize4]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize5]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize6]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── j_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [fun2]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize11]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize12]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize13]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize1]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [fun3]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize14]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize15]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize16]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize2]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [memcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Void
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Void
            │       ╰── Param
            │           ├── Name
            │           │   ╰── n
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [fun0]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize1]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize2]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize3]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize4]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize5]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize6]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize7]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── h
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize8]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize9]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize10]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── k
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize11]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize12]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── m
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize13]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── n
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize14]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── o
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize15]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── p
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize16]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── q
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize17]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── r
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize18]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize19]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── t
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize20]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── u
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize21]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── v
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize22]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── w
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize23]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── x
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize24]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── h_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── k_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── m_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── n_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── o_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── p_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── q_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── r_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── t_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── u_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── v_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── w_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── x_expected
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Unsigned Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <914> FunctionCall [memcmp]
            │       │   │       ├── <908> AddressOf
            │       │   │       │   ╰── <907> Var [a]
            │       │   │       ├── <910> Var [a_expected]
            │       │   │       ╰── <913> SizeOfExpr
            │       │   │           ╰── <912> Var [a]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <915> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <929> FunctionCall [memcmp]
            │       │   │       ├── <923> AddressOf
            │       │   │       │   ╰── <922> Var [b]
            │       │   │       ├── <925> Var [b_expected]
            │       │   │       ╰── <928> SizeOfExpr
            │       │   │           ╰── <927> Var [b]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <930> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <944> FunctionCall [memcmp]
            │       │   │       ├── <938> AddressOf
            │       │   │       │   ╰── <937> Var [c]
            │       │   │       ├── <940> Var [c_expected]
            │       │   │       ╰── <943> SizeOfExpr
            │       │   │           ╰── <942> Var [c]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <945> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <959> FunctionCall [memcmp]
            │       │   │       ├── <953> AddressOf
            │       │   │       │   ╰── <952> Var [d]
            │       │   │       ├── <955> Var [d_expected]
            │       │   │       ╰── <958> SizeOfExpr
            │       │   │           ╰── <957> Var [d]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <960> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <974> FunctionCall [memcmp]
            │       │   │       ├── <968> AddressOf
            │       │   │       │   ╰── <967> Var [e]
            │       │   │       ├── <970> Var [e_expected]
            │       │   │       ╰── <973> SizeOfExpr
            │       │   │           ╰── <972> Var [e]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <975> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <989> FunctionCall [memcmp]
            │       │   │       ├── <983> AddressOf
            │       │   │       │   ╰── <982> Var [f]
            │       │   │       ├── <985> Var [f_expected]
            │       │   │       ╰── <988> SizeOfExpr
            │       │   │           ╰── <987> Var [f]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <990> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1004> FunctionCall [memcmp]
            │       │   │       ├── <998> AddressOf
            │       │   │       │   ╰── <997> Var [g]
            │       │   │       ├── <1000> Var [g_expected]
            │       │   │       ╰── <1003> SizeOfExpr
            │       │   │           ╰── <1002> Var [g]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1005> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1019> FunctionCall [memcmp]
            │       │   │       ├── <1013> AddressOf
            │       │   │       │   ╰── <1012> Var [h]
            │       │   │       ├── <1015> Var [h_expected]
            │       │   │       ╰── <1018> SizeOfExpr
            │       │   │           ╰── <1017> Var [h]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1020> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1034> FunctionCall [memcmp]
            │       │   │       ├── <1028> AddressOf
            │       │   │       │   ╰── <1027> Var [i]
            │       │   │       ├── <1030> Var [i_expected]
            │       │   │       ╰── <1033> SizeOfExpr
            │       │   │           ╰── <1032> Var [i]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1035> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1049> FunctionCall [memcmp]
            │       │   │       ├── <1043> AddressOf
            │       │   │       │   ╰── <1042> Var [j]
            │       │   │       ├── <1045> Var [j_expected]
            │       │   │       ╰── <1048> SizeOfExpr
            │       │   │           ╰── <1047> Var [j]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1050> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1064> FunctionCall [memcmp]
            │       │   │       ├── <1058> AddressOf
            │       │   │       │   ╰── <1057> Var [k]
            │       │   │       ├── <1060> Var [k_expected]
            │       │   │       ╰── <1063> SizeOfExpr
            │       │   │           ╰── <1062> Var [k]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1065> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1079> FunctionCall [memcmp]
            │       │   │       ├── <1073> AddressOf
            │       │   │       │   ╰── <1072> Var [l]
            │       │   │       ├── <1075> Var [l_expected]
            │       │   │       ╰── <1078> SizeOfExpr
            │       │   │           ╰── <1077> Var [l]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1080> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1094> FunctionCall [memcmp]
            │       │   │       ├── <1088> AddressOf
            │       │   │       │   ╰── <1087> Var [m]
            │       │   │       ├── <1090> Var [m_expected]
            │       │   │       ╰── <1093> SizeOfExpr
            │       │   │           ╰── <1092> Var [m]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1095> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1109> FunctionCall [memcmp]
            │       │   │       ├── <1103> AddressOf
            │       │   │       │   ╰── <1102> Var [n]
            │       │   │       ├── <1105> Var [n_expected]
            │       │   │       ╰── <1108> SizeOfExpr
            │       │   │           ╰── <1107> Var [n]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1110> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1124> FunctionCall [memcmp]
            │       │   │       ├── <1118> AddressOf
            │       │   │       │   ╰── <1117> Var [o]
            │       │   │       ├── <1120> Var [o_expected]
            │       │   │       ╰── <1123> SizeOfExpr
            │       │   │           ╰── <1122> Var [o]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1125> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1139> FunctionCall [memcmp]
            │       │   │       ├── <1133> AddressOf
            │       │   │       │   ╰── <1132> Var [p]
            │       │   │       ├── <1135> Var [p_expected]
            │       │   │       ╰── <1138> SizeOfExpr
            │       │   │           ╰── <1137> Var [p]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1140> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1154> FunctionCall [memcmp]
            │       │   │       ├── <1148> AddressOf
            │       │   │       │   ╰── <1147> Var [q]
            │       │   │       ├── <1150> Var [q_expected]
            │       │   │       ╰── <1153> SizeOfExpr
            │       │   │           ╰── <1152> Var [q]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1155> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1169> FunctionCall [memcmp]
            │       │   │       ├── <1163> AddressOf
            │       │   │       │   ╰── <1162> Var [r]
            │       │   │       ├── <1165> Var [r_expected]
            │       │   │       ╰── <1168> SizeOfExpr
            │       │   │           ╰── <1167> Var [r]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1170> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1184> FunctionCall [memcmp]
            │       │   │       ├── <1178> AddressOf
            │       │   │       │   ╰── <1177> Var [s]
            │       │   │       ├── <1180> Var [s_expected]
            │       │   │       ╰── <1183> SizeOfExpr
            │       │   │           ╰── <1182> Var [s]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1185> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1199> FunctionCall [memcmp]
            │       │   │       ├── <1193> AddressOf
            │       │   │       │   ╰── <1192> Var [t]
            │       │   │       ├── <1195> Var [t_expected]
            │       │   │       ╰── <1198> SizeOfExpr
            │       │   │           ╰── <1197> Var [t]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1200> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1214> FunctionCall [memcmp]
            │       │   │       ├── <1208> AddressOf
            │       │   │       │   ╰── <1207> Var [u]
            │       │   │       ├── <1210> Var [u_expected]
            │       │   │       ╰── <1213> SizeOfExpr
            │       │   │           ╰── <1212> Var [u]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1215> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1229> FunctionCall [memcmp]
            │       │   │       ├── <1223> AddressOf
            │       │   │       │   ╰── <1222> Var [v]
            │       │   │       ├── <1225> Var [v_expected]
            │       │   │       ╰── <1228> SizeOfExpr
            │       │   │           ╰── <1227> Var [v]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1230> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1244> FunctionCall [memcmp]
            │       │   │       ├── <1238> AddressOf
            │       │   │       │   ╰── <1237> Var [w]
            │       │   │       ├── <1240> Var [w_expected]
            │       │   │       ╰── <1243> SizeOfExpr
            │       │   │           ╰── <1242> Var [w]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1245> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1259> FunctionCall [memcmp]
            │       │   │       ├── <1253> AddressOf
            │       │   │       │   ╰── <1252> Var [x]
            │       │   │       ├── <1255> Var [x_expected]
            │       │   │       ╰── <1258> SizeOfExpr
            │       │   │           ╰── <1257> Var [x]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1260> Constant Int [0]
            │       ╰── Return
            │           ╰── <1265> Constant Int [1]
            ├── Function [fun1]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize7]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize8]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize9]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize10]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize1]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize2]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize3]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── h
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize4]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize5]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize6]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── h_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── j_expected
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Unsigned Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1362> FunctionCall [memcmp]
            │       │   │       ├── <1356> AddressOf
            │       │   │       │   ╰── <1355> Var [a]
            │       │   │       ├── <1358> Var [a_expected]
            │       │   │       ╰── <1361> SizeOfExpr
            │       │   │           ╰── <1360> Var [a]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1363> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1377> FunctionCall [memcmp]
            │       │   │       ├── <1371> AddressOf
            │       │   │       │   ╰── <1370> Var [b]
            │       │   │       ├── <1373> Var [b_expected]
            │       │   │       ╰── <1376> SizeOfExpr
            │       │   │           ╰── <1375> Var [b]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1378> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1392> FunctionCall [memcmp]
            │       │   │       ├── <1386> AddressOf
            │       │   │       │   ╰── <1385> Var [c]
            │       │   │       ├── <1388> Var [c_expected]
            │       │   │       ╰── <1391> SizeOfExpr
            │       │   │           ╰── <1390> Var [c]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1393> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1407> FunctionCall [memcmp]
            │       │   │       ├── <1401> AddressOf
            │       │   │       │   ╰── <1400> Var [d]
            │       │   │       ├── <1403> Var [d_expected]
            │       │   │       ╰── <1406> SizeOfExpr
            │       │   │           ╰── <1405> Var [d]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1408> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1422> FunctionCall [memcmp]
            │       │   │       ├── <1416> AddressOf
            │       │   │       │   ╰── <1415> Var [e]
            │       │   │       ├── <1418> Var [e_expected]
            │       │   │       ╰── <1421> SizeOfExpr
            │       │   │           ╰── <1420> Var [e]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1423> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1437> FunctionCall [memcmp]
            │       │   │       ├── <1431> AddressOf
            │       │   │       │   ╰── <1430> Var [f]
            │       │   │       ├── <1433> Var [f_expected]
            │       │   │       ╰── <1436> SizeOfExpr
            │       │   │           ╰── <1435> Var [f]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1438> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1452> FunctionCall [memcmp]
            │       │   │       ├── <1446> AddressOf
            │       │   │       │   ╰── <1445> Var [g]
            │       │   │       ├── <1448> Var [g_expected]
            │       │   │       ╰── <1451> SizeOfExpr
            │       │   │           ╰── <1450> Var [g]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1453> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1467> FunctionCall [memcmp]
            │       │   │       ├── <1461> AddressOf
            │       │   │       │   ╰── <1460> Var [h]
            │       │   │       ├── <1463> Var [h_expected]
            │       │   │       ╰── <1466> SizeOfExpr
            │       │   │           ╰── <1465> Var [h]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1468> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1482> FunctionCall [memcmp]
            │       │   │       ├── <1476> AddressOf
            │       │   │       │   ╰── <1475> Var [i]
            │       │   │       ├── <1478> Var [i_expected]
            │       │   │       ╰── <1481> SizeOfExpr
            │       │   │           ╰── <1480> Var [i]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1483> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1497> FunctionCall [memcmp]
            │       │   │       ├── <1491> AddressOf
            │       │   │       │   ╰── <1490> Var [j]
            │       │   │       ├── <1493> Var [j_expected]
            │       │   │       ╰── <1496> SizeOfExpr
            │       │   │           ╰── <1495> Var [j]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1498> Constant Int [0]
            │       ╰── Return
            │           ╰── <1503> Constant Int [1]
            ├── Function [fun2]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize11]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize12]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize13]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize1]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d_expected
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Unsigned Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1552> FunctionCall [memcmp]
            │       │   │       ├── <1546> AddressOf
            │       │   │       │   ╰── <1545> Var [a]
            │       │   │       ├── <1548> Var [a_expected]
            │       │   │       ╰── <1551> SizeOfExpr
            │       │   │           ╰── <1550> Var [a]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1553> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1567> FunctionCall [memcmp]
            │       │   │       ├── <1561> AddressOf
            │       │   │       │   ╰── <1560> Var [b]
            │       │   │       ├── <1563> Var [b_expected]
            │       │   │       ╰── <1566> SizeOfExpr
            │       │   │           ╰── <1565> Var [b]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1568> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1582> FunctionCall [memcmp]
            │       │   │       ├── <1576> AddressOf
            │       │   │       │   ╰── <1575> Var [c]
            │       │   │       ├── <1578> Var [c_expected]
            │       │   │       ╰── <1581> SizeOfExpr
            │       │   │           ╰── <1580> Var [c]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1583> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1597> FunctionCall [memcmp]
            │       │   │       ├── <1591> AddressOf
            │       │   │       │   ╰── <1590> Var [d]
            │       │   │       ├── <1593> Var [d_expected]
            │       │   │       ╰── <1596> SizeOfExpr
            │       │   │           ╰── <1595> Var [d]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1598> Constant Int [0]
            │       ╰── Return
            │           ╰── <1603> Constant Int [1]
            ╰── Function [fun3]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Struct [bytesize14]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Struct [bytesize15]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Struct [bytesize16]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Struct [bytesize2]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a_expected
                │   │   ╰── Type
                │   │       ╰── Pointer
                │   │           ╰── Unsigned Char
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b_expected
                │   │   ╰── Type
                │   │       ╰── Pointer
                │   │           ╰── Unsigned Char
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c_expected
                │   │   ╰── Type
                │   │       ╰── Pointer
                │   │           ╰── Unsigned Char
                │   ╰── Param
                │       ├── Name
                │       │   ╰── d_expected
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Unsigned Char
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1652> FunctionCall [memcmp]
                    │   │       ├── <1646> AddressOf
                    │   │       │   ╰── <1645> Var [a]
                    │   │       ├── <1648> Var [a_expected]
                    │   │       ╰── <1651> SizeOfExpr
                    │   │           ╰── <1650> Var [a]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1653> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1667> FunctionCall [memcmp]
                    │   │       ├── <1661> AddressOf
                    │   │       │   ╰── <1660> Var [b]
                    │   │       ├── <1663> Var [b_expected]
                    │   │       ╰── <1666> SizeOfExpr
                    │   │           ╰── <1665> Var [b]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1668> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1682> FunctionCall [memcmp]
                    │   │       ├── <1676> AddressOf
                    │   │       │   ╰── <1675> Var [c]
                    │   │       ├── <1678> Var [c_expected]
                    │   │       ╰── <1681> SizeOfExpr
                    │   │           ╰── <1680> Var [c]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1683> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1697> FunctionCall [memcmp]
                    │   │       ├── <1691> AddressOf
                    │   │       │   ╰── <1690> Var [d]
                    │   │       ├── <1693> Var [d_expected]
                    │   │       ╰── <1696> SizeOfExpr
                    │   │           ╰── <1695> Var [d]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1698> Constant Int [0]
                    ╰── Return
                        ╰── <1703> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_struct_sizes_client() {
    let src = r#"
        struct bytesize1 {
            unsigned char arr[1];
        };
        extern struct bytesize1 globvar_1;
        struct bytesize2 {
            unsigned char arr[2];
        };
        extern struct bytesize2 globvar_2;
        struct bytesize3 {
            unsigned char arr[3];
        };
        extern struct bytesize3 globvar_3;
        struct bytesize4 {
            unsigned char arr[4];
        };
        extern struct bytesize4 globvar_4;
        struct bytesize5 {
            unsigned char arr[5];
        };
        extern struct bytesize5 globvar_5;
        struct bytesize6 {
            unsigned char arr[6];
        };
        extern struct bytesize6 globvar_6;
        struct bytesize7 {
            unsigned char arr[7];
        };
        extern struct bytesize7 globvar_7;
        struct bytesize8 {
            unsigned char arr[8];
        };
        extern struct bytesize8 globvar_8;
        struct bytesize9 {
            unsigned char arr[9];
        };
        extern struct bytesize9 globvar_9;
        struct bytesize10 {
            unsigned char arr[10];
        };
        extern struct bytesize10 globvar_10;
        struct bytesize11 {
            unsigned char arr[11];
        };
        extern struct bytesize11 globvar_11;
        struct bytesize12 {
            unsigned char arr[12];
        };
        extern struct bytesize12 globvar_12;
        struct bytesize13 {
            unsigned char arr[13];
        };
        extern struct bytesize13 globvar_13;
        struct bytesize14 {
            unsigned char arr[14];
        };
        extern struct bytesize14 globvar_14;
        struct bytesize15 {
            unsigned char arr[15];
        };
        extern struct bytesize15 globvar_15;
        struct bytesize16 {
            unsigned char arr[16];
        };
        extern struct bytesize16 globvar_16;
        struct bytesize17 {
            unsigned char arr[17];
        };
        extern struct bytesize17 globvar_17;
        struct bytesize18 {
            unsigned char arr[18];
        };
        extern struct bytesize18 globvar_18;
        struct bytesize19 {
            unsigned char arr[19];
        };
        extern struct bytesize19 globvar_19;
        struct bytesize20 {
            unsigned char arr[20];
        };
        extern struct bytesize20 globvar_20;
        struct bytesize21 {
            unsigned char arr[21];
        };
        extern struct bytesize21 globvar_21;
        struct bytesize22 {
            unsigned char arr[22];
        };
        extern struct bytesize22 globvar_22;
        struct bytesize23 {
            unsigned char arr[23];
        };
        extern struct bytesize23 globvar_23;
        struct bytesize24 {
            unsigned char arr[24];
        };
        extern struct bytesize24 globvar_24;
        int fun0(struct bytesize1 a, struct bytesize2 b, struct bytesize3 c,
                 struct bytesize4 d, struct bytesize5 e, struct bytesize6 f,
                 struct bytesize7 g, struct bytesize8 h, struct bytesize9 i,
                 struct bytesize10 j, struct bytesize11 k, struct bytesize12 l,
                 struct bytesize13 m, struct bytesize14 n, struct bytesize15 o,
                 struct bytesize16 p, struct bytesize17 q, struct bytesize18 r,
                 struct bytesize19 s, struct bytesize20 t, struct bytesize21 u,
                 struct bytesize22 v, struct bytesize23 w, struct bytesize24 x,
                 unsigned char *a_expected, unsigned char *b_expected,
                 unsigned char *c_expected, unsigned char *d_expected,
                 unsigned char *e_expected, unsigned char *f_expected,
                 unsigned char *g_expected, unsigned char *h_expected,
                 unsigned char *i_expected, unsigned char *j_expected,
                 unsigned char *k_expected, unsigned char *l_expected,
                 unsigned char *m_expected, unsigned char *n_expected,
                 unsigned char *o_expected, unsigned char *p_expected,
                 unsigned char *q_expected, unsigned char *r_expected,
                 unsigned char *s_expected, unsigned char *t_expected,
                 unsigned char *u_expected, unsigned char *v_expected,
                 unsigned char *w_expected, unsigned char *x_expected);
        int fun1(struct bytesize7 a, struct bytesize8 b, struct bytesize9 c,
                 struct bytesize10 d, struct bytesize1 e, struct bytesize2 f,
                 struct bytesize3 g, struct bytesize4 h, struct bytesize5 i,
                 struct bytesize6 j, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected, unsigned char *e_expected,
                 unsigned char *f_expected, unsigned char *g_expected,
                 unsigned char *h_expected, unsigned char *i_expected,
                 unsigned char *j_expected);
        int fun2(struct bytesize11 a, struct bytesize12 b, struct bytesize13 c,
                 struct bytesize1 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected);
        int fun3(struct bytesize14 a, struct bytesize15 b, struct bytesize16 c,
                 struct bytesize2 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected);
        
        int main(void) {
            if (!fun0(globvar_1, globvar_2, globvar_3, globvar_4, globvar_5, globvar_6,
                     globvar_7, globvar_8, globvar_9, globvar_10, globvar_11,
                     globvar_12, globvar_13, globvar_14, globvar_15, globvar_16,
                     globvar_17, globvar_18, globvar_19, globvar_20, globvar_21,
                     globvar_22, globvar_23, globvar_24, globvar_1.arr, globvar_2.arr,
                     globvar_3.arr, globvar_4.arr, globvar_5.arr, globvar_6.arr,
                     globvar_7.arr, globvar_8.arr, globvar_9.arr, globvar_10.arr,
                     globvar_11.arr, globvar_12.arr, globvar_13.arr, globvar_14.arr,
                     globvar_15.arr, globvar_16.arr, globvar_17.arr, globvar_18.arr,
                     globvar_19.arr, globvar_20.arr, globvar_21.arr, globvar_22.arr,
                     globvar_23.arr, globvar_24.arr)) {
                return 1;
            }
            if (!fun1(globvar_7, globvar_8, globvar_9, globvar_10, globvar_1, globvar_2,
                     globvar_3, globvar_4, globvar_5, globvar_6, globvar_7.arr,
                     globvar_8.arr, globvar_9.arr, globvar_10.arr, globvar_1.arr,
                     globvar_2.arr, globvar_3.arr, globvar_4.arr, globvar_5.arr,
                     globvar_6.arr)) {
                return 2;
            }
            if (!fun2(globvar_11, globvar_12, globvar_13, globvar_1, globvar_11.arr,
                     globvar_12.arr, globvar_13.arr, globvar_1.arr)) {
                return 3;
            }
            if (!fun3(globvar_14, globvar_15, globvar_16, globvar_2, globvar_14.arr,
                     globvar_15.arr, globvar_16.arr, globvar_2.arr)) {
                return 4;
            }
            struct bytesize1 locvar_1 = {{0}};
            struct bytesize2 locvar_2 = {{1, 2}};
            struct bytesize3 locvar_3 = {{3, 4, 5}};
            struct bytesize4 locvar_4 = {{6, 7, 8, 9}};
            struct bytesize5 locvar_5 = {{10, 11, 12, 13, 14}};
            struct bytesize6 locvar_6 = {{15, 16, 17, 18, 19, 20}};
            struct bytesize7 locvar_7 = {{21, 22, 23, 24, 25, 26, 27}};
            struct bytesize8 locvar_8 = {{28, 29, 30, 31, 32, 33, 34, 35}};
            struct bytesize9 locvar_9 = {{36, 37, 38, 39, 40, 41, 42, 43, 44}};
            struct bytesize10 locvar_10 = {{45, 46, 47, 48, 49, 50, 51, 52, 53, 54}};
            struct bytesize11 locvar_11 = {
                {55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65}};
            struct bytesize12 locvar_12 = {
                {66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77}};
            struct bytesize13 locvar_13 = {
                {78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}};
            struct bytesize14 locvar_14 = {
                {91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104}};
            struct bytesize15 locvar_15 = {{105, 106, 107, 108, 109, 110, 111, 112, 113,
                                            114, 115, 116, 117, 118, 119}};
            struct bytesize16 locvar_16 = {{120, 121, 122, 123, 124, 125, 126, 127, 128,
                                            129, 130, 131, 132, 133, 134, 135}};
            struct bytesize17 locvar_17 = {{136, 137, 138, 139, 140, 141, 142, 143, 144,
                                            145, 146, 147, 148, 149, 150, 151, 152}};
            struct bytesize18 locvar_18 = {{153, 154, 155, 156, 157, 158, 159, 160, 161,
                                            162, 163, 164, 165, 166, 167, 168, 169,
                                            170}};
            struct bytesize19 locvar_19 = {{171, 172, 173, 174, 175, 176, 177, 178, 179,
                                            180, 181, 182, 183, 184, 185, 186, 187, 188,
                                            189}};
            struct bytesize20 locvar_20 = {{190, 191, 192, 193, 194, 195, 196,
                                            197, 198, 199, 200, 201, 202, 203,
                                            204, 205, 206, 207, 208, 209}};
            struct bytesize21 locvar_21 = {{210, 211, 212, 213, 214, 215, 216,
                                            217, 218, 219, 220, 221, 222, 223,
                                            224, 225, 226, 227, 228, 229, 230}};
            struct bytesize22 locvar_22 = {{231, 232, 233, 234, 235, 236, 237, 238,
                                            239, 240, 241, 242, 243, 244, 245, 246,
                                            247, 248, 249, 250, 251, 252}};
            struct bytesize23 locvar_23 = {{253, 254, 255, 0, 1, 2, 3, 4,
                                            5, 6, 7, 8, 9, 10, 11, 12,
                                            13, 14, 15, 16, 17, 18, 19}};
            struct bytesize24 locvar_24 = {{20, 21, 22, 23, 24, 25, 26, 27,
                                            28, 29, 30, 31, 32, 33, 34, 35,
                                            36, 37, 38, 39, 40, 41, 42, 43}};
            if (!fun0(locvar_1, locvar_2, locvar_3, locvar_4, locvar_5, locvar_6,
                     locvar_7, locvar_8, locvar_9, locvar_10, locvar_11, locvar_12,
                     locvar_13, locvar_14, locvar_15, locvar_16, locvar_17, locvar_18,
                     locvar_19, locvar_20, locvar_21, locvar_22, locvar_23, locvar_24,
                     locvar_1.arr, locvar_2.arr, locvar_3.arr, locvar_4.arr,
                     locvar_5.arr, locvar_6.arr, locvar_7.arr, locvar_8.arr,
                     locvar_9.arr, locvar_10.arr, locvar_11.arr, locvar_12.arr,
                     locvar_13.arr, locvar_14.arr, locvar_15.arr, locvar_16.arr,
                     locvar_17.arr, locvar_18.arr, locvar_19.arr, locvar_20.arr,
                     locvar_21.arr, locvar_22.arr, locvar_23.arr, locvar_24.arr)) {
                return 5;
            }
            if (!fun1(locvar_7, locvar_8, locvar_9, locvar_10, locvar_1, locvar_2,
                     locvar_3, locvar_4, locvar_5, locvar_6, locvar_7.arr, locvar_8.arr,
                     locvar_9.arr, locvar_10.arr, locvar_1.arr, locvar_2.arr,
                     locvar_3.arr, locvar_4.arr, locvar_5.arr, locvar_6.arr)) {
                return 6;
            }
            if (!fun2(locvar_11, locvar_12, locvar_13, locvar_1, locvar_11.arr,
                     locvar_12.arr, locvar_13.arr, locvar_1.arr)) {
                return 7;
            }
            if (!fun3(locvar_14, locvar_15, locvar_16, locvar_2, locvar_14.arr,
                     locvar_15.arr, locvar_16.arr, locvar_2.arr)) {
                return 8;
            }
            return 0;
        }
        struct bytesize1 globvar_1 = {{0}};
        struct bytesize2 globvar_2 = {{1, 2}};
        struct bytesize3 globvar_3 = {{3, 4, 5}};
        struct bytesize4 globvar_4 = {{6, 7, 8, 9}};
        struct bytesize5 globvar_5 = {{10, 11, 12, 13, 14}};
        struct bytesize6 globvar_6 = {{15, 16, 17, 18, 19, 20}};
        struct bytesize7 globvar_7 = {{21, 22, 23, 24, 25, 26, 27}};
        struct bytesize8 globvar_8 = {{28, 29, 30, 31, 32, 33, 34, 35}};
        struct bytesize9 globvar_9 = {{36, 37, 38, 39, 40, 41, 42, 43, 44}};
        struct bytesize10 globvar_10 = {{45, 46, 47, 48, 49, 50, 51, 52, 53, 54}};
        struct bytesize11 globvar_11 = {{55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65}};
        struct bytesize12 globvar_12 = {
            {66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77}};
        struct bytesize13 globvar_13 = {
            {78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}};
        struct bytesize14 globvar_14 = {
            {91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104}};
        struct bytesize15 globvar_15 = {{105, 106, 107, 108, 109, 110, 111, 112, 113,
                                         114, 115, 116, 117, 118, 119}};
        struct bytesize16 globvar_16 = {{120, 121, 122, 123, 124, 125, 126, 127, 128,
                                         129, 130, 131, 132, 133, 134, 135}};
        struct bytesize17 globvar_17 = {{136, 137, 138, 139, 140, 141, 142, 143, 144,
                                         145, 146, 147, 148, 149, 150, 151, 152}};
        struct bytesize18 globvar_18 = {{153, 154, 155, 156, 157, 158, 159, 160, 161,
                                         162, 163, 164, 165, 166, 167, 168, 169, 170}};
        struct bytesize19 globvar_19 = {{171, 172, 173, 174, 175, 176, 177, 178, 179,
                                         180, 181, 182, 183, 184, 185, 186, 187, 188,
                                         189}};
        struct bytesize20 globvar_20 = {{190, 191, 192, 193, 194, 195, 196,
                                         197, 198, 199, 200, 201, 202, 203,
                                         204, 205, 206, 207, 208, 209}};
        struct bytesize21 globvar_21 = {{210, 211, 212, 213, 214, 215, 216,
                                         217, 218, 219, 220, 221, 222, 223,
                                         224, 225, 226, 227, 228, 229, 230}};
        struct bytesize22 globvar_22 = {{231, 232, 233, 234, 235, 236, 237, 238,
                                         239, 240, 241, 242, 243, 244, 245, 246,
                                         247, 248, 249, 250, 251, 252}};
        struct bytesize23 globvar_23 = {{253, 254, 255, 0, 1, 2, 3, 4,
                                         5, 6, 7, 8, 9, 10, 11, 12,
                                         13, 14, 15, 16, 17, 18, 19}};
        struct bytesize24 globvar_24 = {{20, 21, 22, 23, 24, 25, 26, 27,
                                         28, 29, 30, 31, 32, 33, 34, 35,
                                         36, 37, 38, 39, 40, 41, 42, 43}};
    "#;
    let expected = r#"
        Program
            ├── Struct [bytesize1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_1
            │   ├── Type
            │   │   ╰── Struct [bytesize1]
            │   ╰── Extern
            ├── Struct [bytesize2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_2
            │   ├── Type
            │   │   ╰── Struct [bytesize2]
            │   ╰── Extern
            ├── Struct [bytesize3]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_3
            │   ├── Type
            │   │   ╰── Struct [bytesize3]
            │   ╰── Extern
            ├── Struct [bytesize4]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 4
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_4
            │   ├── Type
            │   │   ╰── Struct [bytesize4]
            │   ╰── Extern
            ├── Struct [bytesize5]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_5
            │   ├── Type
            │   │   ╰── Struct [bytesize5]
            │   ╰── Extern
            ├── Struct [bytesize6]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 6
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_6
            │   ├── Type
            │   │   ╰── Struct [bytesize6]
            │   ╰── Extern
            ├── Struct [bytesize7]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 7
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_7
            │   ├── Type
            │   │   ╰── Struct [bytesize7]
            │   ╰── Extern
            ├── Struct [bytesize8]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_8
            │   ├── Type
            │   │   ╰── Struct [bytesize8]
            │   ╰── Extern
            ├── Struct [bytesize9]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 9
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_9
            │   ├── Type
            │   │   ╰── Struct [bytesize9]
            │   ╰── Extern
            ├── Struct [bytesize10]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_10
            │   ├── Type
            │   │   ╰── Struct [bytesize10]
            │   ╰── Extern
            ├── Struct [bytesize11]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 11
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_11
            │   ├── Type
            │   │   ╰── Struct [bytesize11]
            │   ╰── Extern
            ├── Struct [bytesize12]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 12
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_12
            │   ├── Type
            │   │   ╰── Struct [bytesize12]
            │   ╰── Extern
            ├── Struct [bytesize13]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 13
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_13
            │   ├── Type
            │   │   ╰── Struct [bytesize13]
            │   ╰── Extern
            ├── Struct [bytesize14]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 14
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_14
            │   ├── Type
            │   │   ╰── Struct [bytesize14]
            │   ╰── Extern
            ├── Struct [bytesize15]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 15
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_15
            │   ├── Type
            │   │   ╰── Struct [bytesize15]
            │   ╰── Extern
            ├── Struct [bytesize16]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 16
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_16
            │   ├── Type
            │   │   ╰── Struct [bytesize16]
            │   ╰── Extern
            ├── Struct [bytesize17]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 17
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_17
            │   ├── Type
            │   │   ╰── Struct [bytesize17]
            │   ╰── Extern
            ├── Struct [bytesize18]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 18
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_18
            │   ├── Type
            │   │   ╰── Struct [bytesize18]
            │   ╰── Extern
            ├── Struct [bytesize19]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_19
            │   ├── Type
            │   │   ╰── Struct [bytesize19]
            │   ╰── Extern
            ├── Struct [bytesize20]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 20
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_20
            │   ├── Type
            │   │   ╰── Struct [bytesize20]
            │   ╰── Extern
            ├── Struct [bytesize21]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 21
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_21
            │   ├── Type
            │   │   ╰── Struct [bytesize21]
            │   ╰── Extern
            ├── Struct [bytesize22]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 22
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_22
            │   ├── Type
            │   │   ╰── Struct [bytesize22]
            │   ╰── Extern
            ├── Struct [bytesize23]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 23
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_23
            │   ├── Type
            │   │   ╰── Struct [bytesize23]
            │   ╰── Extern
            ├── Struct [bytesize24]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 24
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_24
            │   ├── Type
            │   │   ╰── Struct [bytesize24]
            │   ╰── Extern
            ├── Function [fun0]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize1]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize2]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize3]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize4]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize5]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize6]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize7]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize8]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize9]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize10]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── k
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize11]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize12]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── m
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize13]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── n
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize14]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── o
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize15]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── p
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize16]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── q
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize17]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── r
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize18]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize19]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize20]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── u
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize21]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── v
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize22]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── w
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize23]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize24]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── k_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── m_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── n_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── o_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── p_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── q_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── r_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── u_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── v_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── w_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── x_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [fun1]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize7]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize8]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize9]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize10]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize1]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize2]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize3]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize4]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize5]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize6]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── j_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [fun2]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize11]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize12]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize13]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize1]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [fun3]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize14]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize15]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize16]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize2]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [main]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <844> Unary [!]
            │       │   │       ╰── <843> FunctionCall [fun0]
            │       │   │           ├── <700> Var [globvar_1]
            │       │   │           ├── <702> Var [globvar_2]
            │       │   │           ├── <704> Var [globvar_3]
            │       │   │           ├── <706> Var [globvar_4]
            │       │   │           ├── <708> Var [globvar_5]
            │       │   │           ├── <710> Var [globvar_6]
            │       │   │           ├── <712> Var [globvar_7]
            │       │   │           ├── <714> Var [globvar_8]
            │       │   │           ├── <716> Var [globvar_9]
            │       │   │           ├── <718> Var [globvar_10]
            │       │   │           ├── <720> Var [globvar_11]
            │       │   │           ├── <722> Var [globvar_12]
            │       │   │           ├── <724> Var [globvar_13]
            │       │   │           ├── <726> Var [globvar_14]
            │       │   │           ├── <728> Var [globvar_15]
            │       │   │           ├── <730> Var [globvar_16]
            │       │   │           ├── <732> Var [globvar_17]
            │       │   │           ├── <734> Var [globvar_18]
            │       │   │           ├── <736> Var [globvar_19]
            │       │   │           ├── <738> Var [globvar_20]
            │       │   │           ├── <740> Var [globvar_21]
            │       │   │           ├── <742> Var [globvar_22]
            │       │   │           ├── <744> Var [globvar_23]
            │       │   │           ├── <746> Var [globvar_24]
            │       │   │           ├── <750> Dot
            │       │   │           │   ├── <748> Var [globvar_1]
            │       │   │           │   ╰── arr
            │       │   │           ├── <754> Dot
            │       │   │           │   ├── <752> Var [globvar_2]
            │       │   │           │   ╰── arr
            │       │   │           ├── <758> Dot
            │       │   │           │   ├── <756> Var [globvar_3]
            │       │   │           │   ╰── arr
            │       │   │           ├── <762> Dot
            │       │   │           │   ├── <760> Var [globvar_4]
            │       │   │           │   ╰── arr
            │       │   │           ├── <766> Dot
            │       │   │           │   ├── <764> Var [globvar_5]
            │       │   │           │   ╰── arr
            │       │   │           ├── <770> Dot
            │       │   │           │   ├── <768> Var [globvar_6]
            │       │   │           │   ╰── arr
            │       │   │           ├── <774> Dot
            │       │   │           │   ├── <772> Var [globvar_7]
            │       │   │           │   ╰── arr
            │       │   │           ├── <778> Dot
            │       │   │           │   ├── <776> Var [globvar_8]
            │       │   │           │   ╰── arr
            │       │   │           ├── <782> Dot
            │       │   │           │   ├── <780> Var [globvar_9]
            │       │   │           │   ╰── arr
            │       │   │           ├── <786> Dot
            │       │   │           │   ├── <784> Var [globvar_10]
            │       │   │           │   ╰── arr
            │       │   │           ├── <790> Dot
            │       │   │           │   ├── <788> Var [globvar_11]
            │       │   │           │   ╰── arr
            │       │   │           ├── <794> Dot
            │       │   │           │   ├── <792> Var [globvar_12]
            │       │   │           │   ╰── arr
            │       │   │           ├── <798> Dot
            │       │   │           │   ├── <796> Var [globvar_13]
            │       │   │           │   ╰── arr
            │       │   │           ├── <802> Dot
            │       │   │           │   ├── <800> Var [globvar_14]
            │       │   │           │   ╰── arr
            │       │   │           ├── <806> Dot
            │       │   │           │   ├── <804> Var [globvar_15]
            │       │   │           │   ╰── arr
            │       │   │           ├── <810> Dot
            │       │   │           │   ├── <808> Var [globvar_16]
            │       │   │           │   ╰── arr
            │       │   │           ├── <814> Dot
            │       │   │           │   ├── <812> Var [globvar_17]
            │       │   │           │   ╰── arr
            │       │   │           ├── <818> Dot
            │       │   │           │   ├── <816> Var [globvar_18]
            │       │   │           │   ╰── arr
            │       │   │           ├── <822> Dot
            │       │   │           │   ├── <820> Var [globvar_19]
            │       │   │           │   ╰── arr
            │       │   │           ├── <826> Dot
            │       │   │           │   ├── <824> Var [globvar_20]
            │       │   │           │   ╰── arr
            │       │   │           ├── <830> Dot
            │       │   │           │   ├── <828> Var [globvar_21]
            │       │   │           │   ╰── arr
            │       │   │           ├── <834> Dot
            │       │   │           │   ├── <832> Var [globvar_22]
            │       │   │           │   ╰── arr
            │       │   │           ├── <838> Dot
            │       │   │           │   ├── <836> Var [globvar_23]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <842> Dot
            │       │   │               ├── <840> Var [globvar_24]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <845> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <913> Unary [!]
            │       │   │       ╰── <912> FunctionCall [fun1]
            │       │   │           ├── <853> Var [globvar_7]
            │       │   │           ├── <855> Var [globvar_8]
            │       │   │           ├── <857> Var [globvar_9]
            │       │   │           ├── <859> Var [globvar_10]
            │       │   │           ├── <861> Var [globvar_1]
            │       │   │           ├── <863> Var [globvar_2]
            │       │   │           ├── <865> Var [globvar_3]
            │       │   │           ├── <867> Var [globvar_4]
            │       │   │           ├── <869> Var [globvar_5]
            │       │   │           ├── <871> Var [globvar_6]
            │       │   │           ├── <875> Dot
            │       │   │           │   ├── <873> Var [globvar_7]
            │       │   │           │   ╰── arr
            │       │   │           ├── <879> Dot
            │       │   │           │   ├── <877> Var [globvar_8]
            │       │   │           │   ╰── arr
            │       │   │           ├── <883> Dot
            │       │   │           │   ├── <881> Var [globvar_9]
            │       │   │           │   ╰── arr
            │       │   │           ├── <887> Dot
            │       │   │           │   ├── <885> Var [globvar_10]
            │       │   │           │   ╰── arr
            │       │   │           ├── <891> Dot
            │       │   │           │   ├── <889> Var [globvar_1]
            │       │   │           │   ╰── arr
            │       │   │           ├── <895> Dot
            │       │   │           │   ├── <893> Var [globvar_2]
            │       │   │           │   ╰── arr
            │       │   │           ├── <899> Dot
            │       │   │           │   ├── <897> Var [globvar_3]
            │       │   │           │   ╰── arr
            │       │   │           ├── <903> Dot
            │       │   │           │   ├── <901> Var [globvar_4]
            │       │   │           │   ╰── arr
            │       │   │           ├── <907> Dot
            │       │   │           │   ├── <905> Var [globvar_5]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <911> Dot
            │       │   │               ├── <909> Var [globvar_6]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <914> Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <946> Unary [!]
            │       │   │       ╰── <945> FunctionCall [fun2]
            │       │   │           ├── <922> Var [globvar_11]
            │       │   │           ├── <924> Var [globvar_12]
            │       │   │           ├── <926> Var [globvar_13]
            │       │   │           ├── <928> Var [globvar_1]
            │       │   │           ├── <932> Dot
            │       │   │           │   ├── <930> Var [globvar_11]
            │       │   │           │   ╰── arr
            │       │   │           ├── <936> Dot
            │       │   │           │   ├── <934> Var [globvar_12]
            │       │   │           │   ╰── arr
            │       │   │           ├── <940> Dot
            │       │   │           │   ├── <938> Var [globvar_13]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <944> Dot
            │       │   │               ├── <942> Var [globvar_1]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <947> Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <979> Unary [!]
            │       │   │       ╰── <978> FunctionCall [fun3]
            │       │   │           ├── <955> Var [globvar_14]
            │       │   │           ├── <957> Var [globvar_15]
            │       │   │           ├── <959> Var [globvar_16]
            │       │   │           ├── <961> Var [globvar_2]
            │       │   │           ├── <965> Dot
            │       │   │           │   ├── <963> Var [globvar_14]
            │       │   │           │   ╰── arr
            │       │   │           ├── <969> Dot
            │       │   │           │   ├── <967> Var [globvar_15]
            │       │   │           │   ╰── arr
            │       │   │           ├── <973> Dot
            │       │   │           │   ├── <971> Var [globvar_16]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <977> Dot
            │       │   │               ├── <975> Var [globvar_2]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <980> Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_1
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize1]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ╰── <989> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_2
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize2]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <998> Constant Int [1]
            │       │               ╰── <1000> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_3
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize3]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1009> Constant Int [3]
            │       │               ├── <1011> Constant Int [4]
            │       │               ╰── <1013> Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_4
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize4]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1022> Constant Int [6]
            │       │               ├── <1024> Constant Int [7]
            │       │               ├── <1026> Constant Int [8]
            │       │               ╰── <1028> Constant Int [9]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_5
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize5]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1037> Constant Int [10]
            │       │               ├── <1039> Constant Int [11]
            │       │               ├── <1041> Constant Int [12]
            │       │               ├── <1043> Constant Int [13]
            │       │               ╰── <1045> Constant Int [14]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_6
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize6]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1054> Constant Int [15]
            │       │               ├── <1056> Constant Int [16]
            │       │               ├── <1058> Constant Int [17]
            │       │               ├── <1060> Constant Int [18]
            │       │               ├── <1062> Constant Int [19]
            │       │               ╰── <1064> Constant Int [20]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_7
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize7]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1073> Constant Int [21]
            │       │               ├── <1075> Constant Int [22]
            │       │               ├── <1077> Constant Int [23]
            │       │               ├── <1079> Constant Int [24]
            │       │               ├── <1081> Constant Int [25]
            │       │               ├── <1083> Constant Int [26]
            │       │               ╰── <1085> Constant Int [27]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_8
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize8]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1094> Constant Int [28]
            │       │               ├── <1096> Constant Int [29]
            │       │               ├── <1098> Constant Int [30]
            │       │               ├── <1100> Constant Int [31]
            │       │               ├── <1102> Constant Int [32]
            │       │               ├── <1104> Constant Int [33]
            │       │               ├── <1106> Constant Int [34]
            │       │               ╰── <1108> Constant Int [35]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_9
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize9]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1117> Constant Int [36]
            │       │               ├── <1119> Constant Int [37]
            │       │               ├── <1121> Constant Int [38]
            │       │               ├── <1123> Constant Int [39]
            │       │               ├── <1125> Constant Int [40]
            │       │               ├── <1127> Constant Int [41]
            │       │               ├── <1129> Constant Int [42]
            │       │               ├── <1131> Constant Int [43]
            │       │               ╰── <1133> Constant Int [44]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_10
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize10]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1142> Constant Int [45]
            │       │               ├── <1144> Constant Int [46]
            │       │               ├── <1146> Constant Int [47]
            │       │               ├── <1148> Constant Int [48]
            │       │               ├── <1150> Constant Int [49]
            │       │               ├── <1152> Constant Int [50]
            │       │               ├── <1154> Constant Int [51]
            │       │               ├── <1156> Constant Int [52]
            │       │               ├── <1158> Constant Int [53]
            │       │               ╰── <1160> Constant Int [54]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_11
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize11]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1169> Constant Int [55]
            │       │               ├── <1171> Constant Int [56]
            │       │               ├── <1173> Constant Int [57]
            │       │               ├── <1175> Constant Int [58]
            │       │               ├── <1177> Constant Int [59]
            │       │               ├── <1179> Constant Int [60]
            │       │               ├── <1181> Constant Int [61]
            │       │               ├── <1183> Constant Int [62]
            │       │               ├── <1185> Constant Int [63]
            │       │               ├── <1187> Constant Int [64]
            │       │               ╰── <1189> Constant Int [65]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_12
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize12]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1198> Constant Int [66]
            │       │               ├── <1200> Constant Int [67]
            │       │               ├── <1202> Constant Int [68]
            │       │               ├── <1204> Constant Int [69]
            │       │               ├── <1206> Constant Int [70]
            │       │               ├── <1208> Constant Int [71]
            │       │               ├── <1210> Constant Int [72]
            │       │               ├── <1212> Constant Int [73]
            │       │               ├── <1214> Constant Int [74]
            │       │               ├── <1216> Constant Int [75]
            │       │               ├── <1218> Constant Int [76]
            │       │               ╰── <1220> Constant Int [77]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_13
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize13]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1229> Constant Int [78]
            │       │               ├── <1231> Constant Int [79]
            │       │               ├── <1233> Constant Int [80]
            │       │               ├── <1235> Constant Int [81]
            │       │               ├── <1237> Constant Int [82]
            │       │               ├── <1239> Constant Int [83]
            │       │               ├── <1241> Constant Int [84]
            │       │               ├── <1243> Constant Int [85]
            │       │               ├── <1245> Constant Int [86]
            │       │               ├── <1247> Constant Int [87]
            │       │               ├── <1249> Constant Int [88]
            │       │               ├── <1251> Constant Int [89]
            │       │               ╰── <1253> Constant Int [90]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_14
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize14]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1262> Constant Int [91]
            │       │               ├── <1264> Constant Int [92]
            │       │               ├── <1266> Constant Int [93]
            │       │               ├── <1268> Constant Int [94]
            │       │               ├── <1270> Constant Int [95]
            │       │               ├── <1272> Constant Int [96]
            │       │               ├── <1274> Constant Int [97]
            │       │               ├── <1276> Constant Int [98]
            │       │               ├── <1278> Constant Int [99]
            │       │               ├── <1280> Constant Int [100]
            │       │               ├── <1282> Constant Int [101]
            │       │               ├── <1284> Constant Int [102]
            │       │               ├── <1286> Constant Int [103]
            │       │               ╰── <1288> Constant Int [104]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_15
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize15]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1297> Constant Int [105]
            │       │               ├── <1299> Constant Int [106]
            │       │               ├── <1301> Constant Int [107]
            │       │               ├── <1303> Constant Int [108]
            │       │               ├── <1305> Constant Int [109]
            │       │               ├── <1307> Constant Int [110]
            │       │               ├── <1309> Constant Int [111]
            │       │               ├── <1311> Constant Int [112]
            │       │               ├── <1313> Constant Int [113]
            │       │               ├── <1315> Constant Int [114]
            │       │               ├── <1317> Constant Int [115]
            │       │               ├── <1319> Constant Int [116]
            │       │               ├── <1321> Constant Int [117]
            │       │               ├── <1323> Constant Int [118]
            │       │               ╰── <1325> Constant Int [119]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_16
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize16]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1334> Constant Int [120]
            │       │               ├── <1336> Constant Int [121]
            │       │               ├── <1338> Constant Int [122]
            │       │               ├── <1340> Constant Int [123]
            │       │               ├── <1342> Constant Int [124]
            │       │               ├── <1344> Constant Int [125]
            │       │               ├── <1346> Constant Int [126]
            │       │               ├── <1348> Constant Int [127]
            │       │               ├── <1350> Constant Int [128]
            │       │               ├── <1352> Constant Int [129]
            │       │               ├── <1354> Constant Int [130]
            │       │               ├── <1356> Constant Int [131]
            │       │               ├── <1358> Constant Int [132]
            │       │               ├── <1360> Constant Int [133]
            │       │               ├── <1362> Constant Int [134]
            │       │               ╰── <1364> Constant Int [135]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_17
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize17]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1373> Constant Int [136]
            │       │               ├── <1375> Constant Int [137]
            │       │               ├── <1377> Constant Int [138]
            │       │               ├── <1379> Constant Int [139]
            │       │               ├── <1381> Constant Int [140]
            │       │               ├── <1383> Constant Int [141]
            │       │               ├── <1385> Constant Int [142]
            │       │               ├── <1387> Constant Int [143]
            │       │               ├── <1389> Constant Int [144]
            │       │               ├── <1391> Constant Int [145]
            │       │               ├── <1393> Constant Int [146]
            │       │               ├── <1395> Constant Int [147]
            │       │               ├── <1397> Constant Int [148]
            │       │               ├── <1399> Constant Int [149]
            │       │               ├── <1401> Constant Int [150]
            │       │               ├── <1403> Constant Int [151]
            │       │               ╰── <1405> Constant Int [152]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_18
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize18]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1414> Constant Int [153]
            │       │               ├── <1416> Constant Int [154]
            │       │               ├── <1418> Constant Int [155]
            │       │               ├── <1420> Constant Int [156]
            │       │               ├── <1422> Constant Int [157]
            │       │               ├── <1424> Constant Int [158]
            │       │               ├── <1426> Constant Int [159]
            │       │               ├── <1428> Constant Int [160]
            │       │               ├── <1430> Constant Int [161]
            │       │               ├── <1432> Constant Int [162]
            │       │               ├── <1434> Constant Int [163]
            │       │               ├── <1436> Constant Int [164]
            │       │               ├── <1438> Constant Int [165]
            │       │               ├── <1440> Constant Int [166]
            │       │               ├── <1442> Constant Int [167]
            │       │               ├── <1444> Constant Int [168]
            │       │               ├── <1446> Constant Int [169]
            │       │               ╰── <1448> Constant Int [170]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_19
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize19]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1457> Constant Int [171]
            │       │               ├── <1459> Constant Int [172]
            │       │               ├── <1461> Constant Int [173]
            │       │               ├── <1463> Constant Int [174]
            │       │               ├── <1465> Constant Int [175]
            │       │               ├── <1467> Constant Int [176]
            │       │               ├── <1469> Constant Int [177]
            │       │               ├── <1471> Constant Int [178]
            │       │               ├── <1473> Constant Int [179]
            │       │               ├── <1475> Constant Int [180]
            │       │               ├── <1477> Constant Int [181]
            │       │               ├── <1479> Constant Int [182]
            │       │               ├── <1481> Constant Int [183]
            │       │               ├── <1483> Constant Int [184]
            │       │               ├── <1485> Constant Int [185]
            │       │               ├── <1487> Constant Int [186]
            │       │               ├── <1489> Constant Int [187]
            │       │               ├── <1491> Constant Int [188]
            │       │               ╰── <1493> Constant Int [189]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_20
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize20]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1502> Constant Int [190]
            │       │               ├── <1504> Constant Int [191]
            │       │               ├── <1506> Constant Int [192]
            │       │               ├── <1508> Constant Int [193]
            │       │               ├── <1510> Constant Int [194]
            │       │               ├── <1512> Constant Int [195]
            │       │               ├── <1514> Constant Int [196]
            │       │               ├── <1516> Constant Int [197]
            │       │               ├── <1518> Constant Int [198]
            │       │               ├── <1520> Constant Int [199]
            │       │               ├── <1522> Constant Int [200]
            │       │               ├── <1524> Constant Int [201]
            │       │               ├── <1526> Constant Int [202]
            │       │               ├── <1528> Constant Int [203]
            │       │               ├── <1530> Constant Int [204]
            │       │               ├── <1532> Constant Int [205]
            │       │               ├── <1534> Constant Int [206]
            │       │               ├── <1536> Constant Int [207]
            │       │               ├── <1538> Constant Int [208]
            │       │               ╰── <1540> Constant Int [209]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_21
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize21]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1549> Constant Int [210]
            │       │               ├── <1551> Constant Int [211]
            │       │               ├── <1553> Constant Int [212]
            │       │               ├── <1555> Constant Int [213]
            │       │               ├── <1557> Constant Int [214]
            │       │               ├── <1559> Constant Int [215]
            │       │               ├── <1561> Constant Int [216]
            │       │               ├── <1563> Constant Int [217]
            │       │               ├── <1565> Constant Int [218]
            │       │               ├── <1567> Constant Int [219]
            │       │               ├── <1569> Constant Int [220]
            │       │               ├── <1571> Constant Int [221]
            │       │               ├── <1573> Constant Int [222]
            │       │               ├── <1575> Constant Int [223]
            │       │               ├── <1577> Constant Int [224]
            │       │               ├── <1579> Constant Int [225]
            │       │               ├── <1581> Constant Int [226]
            │       │               ├── <1583> Constant Int [227]
            │       │               ├── <1585> Constant Int [228]
            │       │               ├── <1587> Constant Int [229]
            │       │               ╰── <1589> Constant Int [230]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_22
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize22]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1598> Constant Int [231]
            │       │               ├── <1600> Constant Int [232]
            │       │               ├── <1602> Constant Int [233]
            │       │               ├── <1604> Constant Int [234]
            │       │               ├── <1606> Constant Int [235]
            │       │               ├── <1608> Constant Int [236]
            │       │               ├── <1610> Constant Int [237]
            │       │               ├── <1612> Constant Int [238]
            │       │               ├── <1614> Constant Int [239]
            │       │               ├── <1616> Constant Int [240]
            │       │               ├── <1618> Constant Int [241]
            │       │               ├── <1620> Constant Int [242]
            │       │               ├── <1622> Constant Int [243]
            │       │               ├── <1624> Constant Int [244]
            │       │               ├── <1626> Constant Int [245]
            │       │               ├── <1628> Constant Int [246]
            │       │               ├── <1630> Constant Int [247]
            │       │               ├── <1632> Constant Int [248]
            │       │               ├── <1634> Constant Int [249]
            │       │               ├── <1636> Constant Int [250]
            │       │               ├── <1638> Constant Int [251]
            │       │               ╰── <1640> Constant Int [252]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_23
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize23]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1649> Constant Int [253]
            │       │               ├── <1651> Constant Int [254]
            │       │               ├── <1653> Constant Int [255]
            │       │               ├── <1655> Constant Int [0]
            │       │               ├── <1657> Constant Int [1]
            │       │               ├── <1659> Constant Int [2]
            │       │               ├── <1661> Constant Int [3]
            │       │               ├── <1663> Constant Int [4]
            │       │               ├── <1665> Constant Int [5]
            │       │               ├── <1667> Constant Int [6]
            │       │               ├── <1669> Constant Int [7]
            │       │               ├── <1671> Constant Int [8]
            │       │               ├── <1673> Constant Int [9]
            │       │               ├── <1675> Constant Int [10]
            │       │               ├── <1677> Constant Int [11]
            │       │               ├── <1679> Constant Int [12]
            │       │               ├── <1681> Constant Int [13]
            │       │               ├── <1683> Constant Int [14]
            │       │               ├── <1685> Constant Int [15]
            │       │               ├── <1687> Constant Int [16]
            │       │               ├── <1689> Constant Int [17]
            │       │               ├── <1691> Constant Int [18]
            │       │               ╰── <1693> Constant Int [19]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_24
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize24]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1702> Constant Int [20]
            │       │               ├── <1704> Constant Int [21]
            │       │               ├── <1706> Constant Int [22]
            │       │               ├── <1708> Constant Int [23]
            │       │               ├── <1710> Constant Int [24]
            │       │               ├── <1712> Constant Int [25]
            │       │               ├── <1714> Constant Int [26]
            │       │               ├── <1716> Constant Int [27]
            │       │               ├── <1718> Constant Int [28]
            │       │               ├── <1720> Constant Int [29]
            │       │               ├── <1722> Constant Int [30]
            │       │               ├── <1724> Constant Int [31]
            │       │               ├── <1726> Constant Int [32]
            │       │               ├── <1728> Constant Int [33]
            │       │               ├── <1730> Constant Int [34]
            │       │               ├── <1732> Constant Int [35]
            │       │               ├── <1734> Constant Int [36]
            │       │               ├── <1736> Constant Int [37]
            │       │               ├── <1738> Constant Int [38]
            │       │               ├── <1740> Constant Int [39]
            │       │               ├── <1742> Constant Int [40]
            │       │               ├── <1744> Constant Int [41]
            │       │               ├── <1746> Constant Int [42]
            │       │               ╰── <1748> Constant Int [43]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1900> Unary [!]
            │       │   │       ╰── <1899> FunctionCall [fun0]
            │       │   │           ├── <1756> Var [locvar_1]
            │       │   │           ├── <1758> Var [locvar_2]
            │       │   │           ├── <1760> Var [locvar_3]
            │       │   │           ├── <1762> Var [locvar_4]
            │       │   │           ├── <1764> Var [locvar_5]
            │       │   │           ├── <1766> Var [locvar_6]
            │       │   │           ├── <1768> Var [locvar_7]
            │       │   │           ├── <1770> Var [locvar_8]
            │       │   │           ├── <1772> Var [locvar_9]
            │       │   │           ├── <1774> Var [locvar_10]
            │       │   │           ├── <1776> Var [locvar_11]
            │       │   │           ├── <1778> Var [locvar_12]
            │       │   │           ├── <1780> Var [locvar_13]
            │       │   │           ├── <1782> Var [locvar_14]
            │       │   │           ├── <1784> Var [locvar_15]
            │       │   │           ├── <1786> Var [locvar_16]
            │       │   │           ├── <1788> Var [locvar_17]
            │       │   │           ├── <1790> Var [locvar_18]
            │       │   │           ├── <1792> Var [locvar_19]
            │       │   │           ├── <1794> Var [locvar_20]
            │       │   │           ├── <1796> Var [locvar_21]
            │       │   │           ├── <1798> Var [locvar_22]
            │       │   │           ├── <1800> Var [locvar_23]
            │       │   │           ├── <1802> Var [locvar_24]
            │       │   │           ├── <1806> Dot
            │       │   │           │   ├── <1804> Var [locvar_1]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1810> Dot
            │       │   │           │   ├── <1808> Var [locvar_2]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1814> Dot
            │       │   │           │   ├── <1812> Var [locvar_3]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1818> Dot
            │       │   │           │   ├── <1816> Var [locvar_4]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1822> Dot
            │       │   │           │   ├── <1820> Var [locvar_5]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1826> Dot
            │       │   │           │   ├── <1824> Var [locvar_6]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1830> Dot
            │       │   │           │   ├── <1828> Var [locvar_7]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1834> Dot
            │       │   │           │   ├── <1832> Var [locvar_8]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1838> Dot
            │       │   │           │   ├── <1836> Var [locvar_9]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1842> Dot
            │       │   │           │   ├── <1840> Var [locvar_10]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1846> Dot
            │       │   │           │   ├── <1844> Var [locvar_11]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1850> Dot
            │       │   │           │   ├── <1848> Var [locvar_12]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1854> Dot
            │       │   │           │   ├── <1852> Var [locvar_13]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1858> Dot
            │       │   │           │   ├── <1856> Var [locvar_14]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1862> Dot
            │       │   │           │   ├── <1860> Var [locvar_15]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1866> Dot
            │       │   │           │   ├── <1864> Var [locvar_16]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1870> Dot
            │       │   │           │   ├── <1868> Var [locvar_17]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1874> Dot
            │       │   │           │   ├── <1872> Var [locvar_18]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1878> Dot
            │       │   │           │   ├── <1876> Var [locvar_19]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1882> Dot
            │       │   │           │   ├── <1880> Var [locvar_20]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1886> Dot
            │       │   │           │   ├── <1884> Var [locvar_21]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1890> Dot
            │       │   │           │   ├── <1888> Var [locvar_22]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1894> Dot
            │       │   │           │   ├── <1892> Var [locvar_23]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <1898> Dot
            │       │   │               ├── <1896> Var [locvar_24]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1901> Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1969> Unary [!]
            │       │   │       ╰── <1968> FunctionCall [fun1]
            │       │   │           ├── <1909> Var [locvar_7]
            │       │   │           ├── <1911> Var [locvar_8]
            │       │   │           ├── <1913> Var [locvar_9]
            │       │   │           ├── <1915> Var [locvar_10]
            │       │   │           ├── <1917> Var [locvar_1]
            │       │   │           ├── <1919> Var [locvar_2]
            │       │   │           ├── <1921> Var [locvar_3]
            │       │   │           ├── <1923> Var [locvar_4]
            │       │   │           ├── <1925> Var [locvar_5]
            │       │   │           ├── <1927> Var [locvar_6]
            │       │   │           ├── <1931> Dot
            │       │   │           │   ├── <1929> Var [locvar_7]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1935> Dot
            │       │   │           │   ├── <1933> Var [locvar_8]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1939> Dot
            │       │   │           │   ├── <1937> Var [locvar_9]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1943> Dot
            │       │   │           │   ├── <1941> Var [locvar_10]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1947> Dot
            │       │   │           │   ├── <1945> Var [locvar_1]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1951> Dot
            │       │   │           │   ├── <1949> Var [locvar_2]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1955> Dot
            │       │   │           │   ├── <1953> Var [locvar_3]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1959> Dot
            │       │   │           │   ├── <1957> Var [locvar_4]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1963> Dot
            │       │   │           │   ├── <1961> Var [locvar_5]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <1967> Dot
            │       │   │               ├── <1965> Var [locvar_6]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1970> Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2002> Unary [!]
            │       │   │       ╰── <2001> FunctionCall [fun2]
            │       │   │           ├── <1978> Var [locvar_11]
            │       │   │           ├── <1980> Var [locvar_12]
            │       │   │           ├── <1982> Var [locvar_13]
            │       │   │           ├── <1984> Var [locvar_1]
            │       │   │           ├── <1988> Dot
            │       │   │           │   ├── <1986> Var [locvar_11]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1992> Dot
            │       │   │           │   ├── <1990> Var [locvar_12]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1996> Dot
            │       │   │           │   ├── <1994> Var [locvar_13]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <2000> Dot
            │       │   │               ├── <1998> Var [locvar_1]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2003> Constant Int [7]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2035> Unary [!]
            │       │   │       ╰── <2034> FunctionCall [fun3]
            │       │   │           ├── <2011> Var [locvar_14]
            │       │   │           ├── <2013> Var [locvar_15]
            │       │   │           ├── <2015> Var [locvar_16]
            │       │   │           ├── <2017> Var [locvar_2]
            │       │   │           ├── <2021> Dot
            │       │   │           │   ├── <2019> Var [locvar_14]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2025> Dot
            │       │   │           │   ├── <2023> Var [locvar_15]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2029> Dot
            │       │   │           │   ├── <2027> Var [locvar_16]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <2033> Dot
            │       │   │               ├── <2031> Var [locvar_2]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2036> Constant Int [8]
            │       ╰── Return
            │           ╰── <2041> Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_1
            │   ├── Type
            │   │   ╰── Struct [bytesize1]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ╰── <2049> Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_2
            │   ├── Type
            │   │   ╰── Struct [bytesize2]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2058> Constant Int [1]
            │               ╰── <2060> Constant Int [2]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_3
            │   ├── Type
            │   │   ╰── Struct [bytesize3]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2069> Constant Int [3]
            │               ├── <2071> Constant Int [4]
            │               ╰── <2073> Constant Int [5]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_4
            │   ├── Type
            │   │   ╰── Struct [bytesize4]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2082> Constant Int [6]
            │               ├── <2084> Constant Int [7]
            │               ├── <2086> Constant Int [8]
            │               ╰── <2088> Constant Int [9]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_5
            │   ├── Type
            │   │   ╰── Struct [bytesize5]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2097> Constant Int [10]
            │               ├── <2099> Constant Int [11]
            │               ├── <2101> Constant Int [12]
            │               ├── <2103> Constant Int [13]
            │               ╰── <2105> Constant Int [14]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_6
            │   ├── Type
            │   │   ╰── Struct [bytesize6]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2114> Constant Int [15]
            │               ├── <2116> Constant Int [16]
            │               ├── <2118> Constant Int [17]
            │               ├── <2120> Constant Int [18]
            │               ├── <2122> Constant Int [19]
            │               ╰── <2124> Constant Int [20]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_7
            │   ├── Type
            │   │   ╰── Struct [bytesize7]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2133> Constant Int [21]
            │               ├── <2135> Constant Int [22]
            │               ├── <2137> Constant Int [23]
            │               ├── <2139> Constant Int [24]
            │               ├── <2141> Constant Int [25]
            │               ├── <2143> Constant Int [26]
            │               ╰── <2145> Constant Int [27]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_8
            │   ├── Type
            │   │   ╰── Struct [bytesize8]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2154> Constant Int [28]
            │               ├── <2156> Constant Int [29]
            │               ├── <2158> Constant Int [30]
            │               ├── <2160> Constant Int [31]
            │               ├── <2162> Constant Int [32]
            │               ├── <2164> Constant Int [33]
            │               ├── <2166> Constant Int [34]
            │               ╰── <2168> Constant Int [35]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_9
            │   ├── Type
            │   │   ╰── Struct [bytesize9]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2177> Constant Int [36]
            │               ├── <2179> Constant Int [37]
            │               ├── <2181> Constant Int [38]
            │               ├── <2183> Constant Int [39]
            │               ├── <2185> Constant Int [40]
            │               ├── <2187> Constant Int [41]
            │               ├── <2189> Constant Int [42]
            │               ├── <2191> Constant Int [43]
            │               ╰── <2193> Constant Int [44]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_10
            │   ├── Type
            │   │   ╰── Struct [bytesize10]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2202> Constant Int [45]
            │               ├── <2204> Constant Int [46]
            │               ├── <2206> Constant Int [47]
            │               ├── <2208> Constant Int [48]
            │               ├── <2210> Constant Int [49]
            │               ├── <2212> Constant Int [50]
            │               ├── <2214> Constant Int [51]
            │               ├── <2216> Constant Int [52]
            │               ├── <2218> Constant Int [53]
            │               ╰── <2220> Constant Int [54]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_11
            │   ├── Type
            │   │   ╰── Struct [bytesize11]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2229> Constant Int [55]
            │               ├── <2231> Constant Int [56]
            │               ├── <2233> Constant Int [57]
            │               ├── <2235> Constant Int [58]
            │               ├── <2237> Constant Int [59]
            │               ├── <2239> Constant Int [60]
            │               ├── <2241> Constant Int [61]
            │               ├── <2243> Constant Int [62]
            │               ├── <2245> Constant Int [63]
            │               ├── <2247> Constant Int [64]
            │               ╰── <2249> Constant Int [65]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_12
            │   ├── Type
            │   │   ╰── Struct [bytesize12]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2258> Constant Int [66]
            │               ├── <2260> Constant Int [67]
            │               ├── <2262> Constant Int [68]
            │               ├── <2264> Constant Int [69]
            │               ├── <2266> Constant Int [70]
            │               ├── <2268> Constant Int [71]
            │               ├── <2270> Constant Int [72]
            │               ├── <2272> Constant Int [73]
            │               ├── <2274> Constant Int [74]
            │               ├── <2276> Constant Int [75]
            │               ├── <2278> Constant Int [76]
            │               ╰── <2280> Constant Int [77]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_13
            │   ├── Type
            │   │   ╰── Struct [bytesize13]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2289> Constant Int [78]
            │               ├── <2291> Constant Int [79]
            │               ├── <2293> Constant Int [80]
            │               ├── <2295> Constant Int [81]
            │               ├── <2297> Constant Int [82]
            │               ├── <2299> Constant Int [83]
            │               ├── <2301> Constant Int [84]
            │               ├── <2303> Constant Int [85]
            │               ├── <2305> Constant Int [86]
            │               ├── <2307> Constant Int [87]
            │               ├── <2309> Constant Int [88]
            │               ├── <2311> Constant Int [89]
            │               ╰── <2313> Constant Int [90]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_14
            │   ├── Type
            │   │   ╰── Struct [bytesize14]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2322> Constant Int [91]
            │               ├── <2324> Constant Int [92]
            │               ├── <2326> Constant Int [93]
            │               ├── <2328> Constant Int [94]
            │               ├── <2330> Constant Int [95]
            │               ├── <2332> Constant Int [96]
            │               ├── <2334> Constant Int [97]
            │               ├── <2336> Constant Int [98]
            │               ├── <2338> Constant Int [99]
            │               ├── <2340> Constant Int [100]
            │               ├── <2342> Constant Int [101]
            │               ├── <2344> Constant Int [102]
            │               ├── <2346> Constant Int [103]
            │               ╰── <2348> Constant Int [104]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_15
            │   ├── Type
            │   │   ╰── Struct [bytesize15]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2357> Constant Int [105]
            │               ├── <2359> Constant Int [106]
            │               ├── <2361> Constant Int [107]
            │               ├── <2363> Constant Int [108]
            │               ├── <2365> Constant Int [109]
            │               ├── <2367> Constant Int [110]
            │               ├── <2369> Constant Int [111]
            │               ├── <2371> Constant Int [112]
            │               ├── <2373> Constant Int [113]
            │               ├── <2375> Constant Int [114]
            │               ├── <2377> Constant Int [115]
            │               ├── <2379> Constant Int [116]
            │               ├── <2381> Constant Int [117]
            │               ├── <2383> Constant Int [118]
            │               ╰── <2385> Constant Int [119]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_16
            │   ├── Type
            │   │   ╰── Struct [bytesize16]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2394> Constant Int [120]
            │               ├── <2396> Constant Int [121]
            │               ├── <2398> Constant Int [122]
            │               ├── <2400> Constant Int [123]
            │               ├── <2402> Constant Int [124]
            │               ├── <2404> Constant Int [125]
            │               ├── <2406> Constant Int [126]
            │               ├── <2408> Constant Int [127]
            │               ├── <2410> Constant Int [128]
            │               ├── <2412> Constant Int [129]
            │               ├── <2414> Constant Int [130]
            │               ├── <2416> Constant Int [131]
            │               ├── <2418> Constant Int [132]
            │               ├── <2420> Constant Int [133]
            │               ├── <2422> Constant Int [134]
            │               ╰── <2424> Constant Int [135]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_17
            │   ├── Type
            │   │   ╰── Struct [bytesize17]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2433> Constant Int [136]
            │               ├── <2435> Constant Int [137]
            │               ├── <2437> Constant Int [138]
            │               ├── <2439> Constant Int [139]
            │               ├── <2441> Constant Int [140]
            │               ├── <2443> Constant Int [141]
            │               ├── <2445> Constant Int [142]
            │               ├── <2447> Constant Int [143]
            │               ├── <2449> Constant Int [144]
            │               ├── <2451> Constant Int [145]
            │               ├── <2453> Constant Int [146]
            │               ├── <2455> Constant Int [147]
            │               ├── <2457> Constant Int [148]
            │               ├── <2459> Constant Int [149]
            │               ├── <2461> Constant Int [150]
            │               ├── <2463> Constant Int [151]
            │               ╰── <2465> Constant Int [152]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_18
            │   ├── Type
            │   │   ╰── Struct [bytesize18]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2474> Constant Int [153]
            │               ├── <2476> Constant Int [154]
            │               ├── <2478> Constant Int [155]
            │               ├── <2480> Constant Int [156]
            │               ├── <2482> Constant Int [157]
            │               ├── <2484> Constant Int [158]
            │               ├── <2486> Constant Int [159]
            │               ├── <2488> Constant Int [160]
            │               ├── <2490> Constant Int [161]
            │               ├── <2492> Constant Int [162]
            │               ├── <2494> Constant Int [163]
            │               ├── <2496> Constant Int [164]
            │               ├── <2498> Constant Int [165]
            │               ├── <2500> Constant Int [166]
            │               ├── <2502> Constant Int [167]
            │               ├── <2504> Constant Int [168]
            │               ├── <2506> Constant Int [169]
            │               ╰── <2508> Constant Int [170]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_19
            │   ├── Type
            │   │   ╰── Struct [bytesize19]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2517> Constant Int [171]
            │               ├── <2519> Constant Int [172]
            │               ├── <2521> Constant Int [173]
            │               ├── <2523> Constant Int [174]
            │               ├── <2525> Constant Int [175]
            │               ├── <2527> Constant Int [176]
            │               ├── <2529> Constant Int [177]
            │               ├── <2531> Constant Int [178]
            │               ├── <2533> Constant Int [179]
            │               ├── <2535> Constant Int [180]
            │               ├── <2537> Constant Int [181]
            │               ├── <2539> Constant Int [182]
            │               ├── <2541> Constant Int [183]
            │               ├── <2543> Constant Int [184]
            │               ├── <2545> Constant Int [185]
            │               ├── <2547> Constant Int [186]
            │               ├── <2549> Constant Int [187]
            │               ├── <2551> Constant Int [188]
            │               ╰── <2553> Constant Int [189]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_20
            │   ├── Type
            │   │   ╰── Struct [bytesize20]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2562> Constant Int [190]
            │               ├── <2564> Constant Int [191]
            │               ├── <2566> Constant Int [192]
            │               ├── <2568> Constant Int [193]
            │               ├── <2570> Constant Int [194]
            │               ├── <2572> Constant Int [195]
            │               ├── <2574> Constant Int [196]
            │               ├── <2576> Constant Int [197]
            │               ├── <2578> Constant Int [198]
            │               ├── <2580> Constant Int [199]
            │               ├── <2582> Constant Int [200]
            │               ├── <2584> Constant Int [201]
            │               ├── <2586> Constant Int [202]
            │               ├── <2588> Constant Int [203]
            │               ├── <2590> Constant Int [204]
            │               ├── <2592> Constant Int [205]
            │               ├── <2594> Constant Int [206]
            │               ├── <2596> Constant Int [207]
            │               ├── <2598> Constant Int [208]
            │               ╰── <2600> Constant Int [209]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_21
            │   ├── Type
            │   │   ╰── Struct [bytesize21]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2609> Constant Int [210]
            │               ├── <2611> Constant Int [211]
            │               ├── <2613> Constant Int [212]
            │               ├── <2615> Constant Int [213]
            │               ├── <2617> Constant Int [214]
            │               ├── <2619> Constant Int [215]
            │               ├── <2621> Constant Int [216]
            │               ├── <2623> Constant Int [217]
            │               ├── <2625> Constant Int [218]
            │               ├── <2627> Constant Int [219]
            │               ├── <2629> Constant Int [220]
            │               ├── <2631> Constant Int [221]
            │               ├── <2633> Constant Int [222]
            │               ├── <2635> Constant Int [223]
            │               ├── <2637> Constant Int [224]
            │               ├── <2639> Constant Int [225]
            │               ├── <2641> Constant Int [226]
            │               ├── <2643> Constant Int [227]
            │               ├── <2645> Constant Int [228]
            │               ├── <2647> Constant Int [229]
            │               ╰── <2649> Constant Int [230]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_22
            │   ├── Type
            │   │   ╰── Struct [bytesize22]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2658> Constant Int [231]
            │               ├── <2660> Constant Int [232]
            │               ├── <2662> Constant Int [233]
            │               ├── <2664> Constant Int [234]
            │               ├── <2666> Constant Int [235]
            │               ├── <2668> Constant Int [236]
            │               ├── <2670> Constant Int [237]
            │               ├── <2672> Constant Int [238]
            │               ├── <2674> Constant Int [239]
            │               ├── <2676> Constant Int [240]
            │               ├── <2678> Constant Int [241]
            │               ├── <2680> Constant Int [242]
            │               ├── <2682> Constant Int [243]
            │               ├── <2684> Constant Int [244]
            │               ├── <2686> Constant Int [245]
            │               ├── <2688> Constant Int [246]
            │               ├── <2690> Constant Int [247]
            │               ├── <2692> Constant Int [248]
            │               ├── <2694> Constant Int [249]
            │               ├── <2696> Constant Int [250]
            │               ├── <2698> Constant Int [251]
            │               ╰── <2700> Constant Int [252]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_23
            │   ├── Type
            │   │   ╰── Struct [bytesize23]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2709> Constant Int [253]
            │               ├── <2711> Constant Int [254]
            │               ├── <2713> Constant Int [255]
            │               ├── <2715> Constant Int [0]
            │               ├── <2717> Constant Int [1]
            │               ├── <2719> Constant Int [2]
            │               ├── <2721> Constant Int [3]
            │               ├── <2723> Constant Int [4]
            │               ├── <2725> Constant Int [5]
            │               ├── <2727> Constant Int [6]
            │               ├── <2729> Constant Int [7]
            │               ├── <2731> Constant Int [8]
            │               ├── <2733> Constant Int [9]
            │               ├── <2735> Constant Int [10]
            │               ├── <2737> Constant Int [11]
            │               ├── <2739> Constant Int [12]
            │               ├── <2741> Constant Int [13]
            │               ├── <2743> Constant Int [14]
            │               ├── <2745> Constant Int [15]
            │               ├── <2747> Constant Int [16]
            │               ├── <2749> Constant Int [17]
            │               ├── <2751> Constant Int [18]
            │               ╰── <2753> Constant Int [19]
            ╰── VarDeclaration
                ├── Name
                │   ╰── globvar_24
                ├── Type
                │   ╰── Struct [bytesize24]
                ╰── Initializer
                    ╰── Compound
                        ╰── Compound
                            ├── <2762> Constant Int [20]
                            ├── <2764> Constant Int [21]
                            ├── <2766> Constant Int [22]
                            ├── <2768> Constant Int [23]
                            ├── <2770> Constant Int [24]
                            ├── <2772> Constant Int [25]
                            ├── <2774> Constant Int [26]
                            ├── <2776> Constant Int [27]
                            ├── <2778> Constant Int [28]
                            ├── <2780> Constant Int [29]
                            ├── <2782> Constant Int [30]
                            ├── <2784> Constant Int [31]
                            ├── <2786> Constant Int [32]
                            ├── <2788> Constant Int [33]
                            ├── <2790> Constant Int [34]
                            ├── <2792> Constant Int [35]
                            ├── <2794> Constant Int [36]
                            ├── <2796> Constant Int [37]
                            ├── <2798> Constant Int [38]
                            ├── <2800> Constant Int [39]
                            ├── <2802> Constant Int [40]
                            ├── <2804> Constant Int [41]
                            ├── <2806> Constant Int [42]
                            ╰── <2808> Constant Int [43]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_pass_args_on_page_boundary() {
    let src = r#"
        struct nine_bytes {
            char arr[11];
        };
        extern struct nine_bytes on_page_boundary;
        int f(struct nine_bytes in_reg, int a, int b, int c, int d, int e,
              struct nine_bytes on_stack) {
            for (int i = 0; i < 9; i = i + 1) {
                char in_reg_c = in_reg.arr[i];
                char on_stack_c = on_stack.arr[i];
                if (i == 2) {
                    if (in_reg_c != 4 || on_stack_c != 4) {
                        return 1;
                    }
                } else if (i == 3) {
                    if (in_reg_c != 5 || on_stack_c != 5) {
                        return 2;
                    }
                } else if (i == 8) {
                    if (in_reg_c != 6 || on_stack_c != 6) {
                        return 3;
                    }
                } else {
                    if (in_reg_c || on_stack_c) {
                        return 4;
                    }
                }
            }
            if (a != 101 || b != 102 || c != 103 || d != 104 || e != 105) {
                return 5;
            }
            return 0;
        }
        int main(void) {
            on_page_boundary.arr[2] = 4;
            on_page_boundary.arr[3] = 5;
            on_page_boundary.arr[8] = 6;
            return f(on_page_boundary, 101, 102, 103, 104, 105,
                     on_page_boundary);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [nine_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 11
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── on_page_boundary
            │   ├── Type
            │   │   ╰── Struct [nine_bytes]
            │   ╰── Extern
            ├── Function [f]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── in_reg
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [nine_bytes]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── on_stack
            │   │       ╰── Type
            │   │           ╰── Struct [nine_bytes]
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <45> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <53>  [<]
            │       │   │       ├── <50> Var [i]
            │       │   │       ╰── <52> Constant Int [9]
            │       │   ├── Condition
            │       │   │   ╰── <62> Assign [=]
            │       │   │       ├── <55> Var [i]
            │       │   │       ╰── <61>  [+]
            │       │   │           ├── <58> Var [i]
            │       │   │           ╰── <60> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── in_reg_c
            │       │       │   ├── Type
            │       │       │   │   ╰── Char
            │       │       │   ╰── Initializer
            │       │       │       ╰── <72> Subscript
            │       │       │           ├── <69> Dot
            │       │       │           │   ├── <67> Var [in_reg]
            │       │       │           │   ╰── arr
            │       │       │           ╰── <71> Var [i]
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── on_stack_c
            │       │       │   ├── Type
            │       │       │   │   ╰── Char
            │       │       │   ╰── Initializer
            │       │       │       ╰── <84> Subscript
            │       │       │           ├── <81> Dot
            │       │       │           │   ├── <79> Var [on_stack]
            │       │       │           │   ╰── arr
            │       │       │           ╰── <83> Var [i]
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <91>  [==]
            │       │           │       ├── <88> Var [i]
            │       │           │       ╰── <90> Constant Int [2]
            │       │           ├── Then
            │       │           │   ╰── Block
            │       │           │       ╰── If
            │       │           │           ├── Condition
            │       │           │           │   ╰── <103>  [||]
            │       │           │           │       ├── <96>  [!=]
            │       │           │           │       │   ├── <93> Var [in_reg_c]
            │       │           │           │       │   ╰── <95> Constant Int [4]
            │       │           │           │       ╰── <102>  [!=]
            │       │           │           │           ├── <99> Var [on_stack_c]
            │       │           │           │           ╰── <101> Constant Int [4]
            │       │           │           ╰── Then
            │       │           │               ╰── Block
            │       │           │                   ╰── Return
            │       │           │                       ╰── <104> Constant Int [1]
            │       │           ╰── Else
            │       │               ╰── If
            │       │                   ├── Condition
            │       │                   │   ╰── <115>  [==]
            │       │                   │       ├── <112> Var [i]
            │       │                   │       ╰── <114> Constant Int [3]
            │       │                   ├── Then
            │       │                   │   ╰── Block
            │       │                   │       ╰── If
            │       │                   │           ├── Condition
            │       │                   │           │   ╰── <127>  [||]
            │       │                   │           │       ├── <120>  [!=]
            │       │                   │           │       │   ├── <117> Var [in_reg_c]
            │       │                   │           │       │   ╰── <119> Constant Int [5]
            │       │                   │           │       ╰── <126>  [!=]
            │       │                   │           │           ├── <123> Var [on_stack_c]
            │       │                   │           │           ╰── <125> Constant Int [5]
            │       │                   │           ╰── Then
            │       │                   │               ╰── Block
            │       │                   │                   ╰── Return
            │       │                   │                       ╰── <128> Constant Int [2]
            │       │                   ╰── Else
            │       │                       ╰── If
            │       │                           ├── Condition
            │       │                           │   ╰── <139>  [==]
            │       │                           │       ├── <136> Var [i]
            │       │                           │       ╰── <138> Constant Int [8]
            │       │                           ├── Then
            │       │                           │   ╰── Block
            │       │                           │       ╰── If
            │       │                           │           ├── Condition
            │       │                           │           │   ╰── <151>  [||]
            │       │                           │           │       ├── <144>  [!=]
            │       │                           │           │       │   ├── <141> Var [in_reg_c]
            │       │                           │           │       │   ╰── <143> Constant Int [6]
            │       │                           │           │       ╰── <150>  [!=]
            │       │                           │           │           ├── <147> Var [on_stack_c]
            │       │                           │           │           ╰── <149> Constant Int [6]
            │       │                           │           ╰── Then
            │       │                           │               ╰── Block
            │       │                           │                   ╰── Return
            │       │                           │                       ╰── <152> Constant Int [3]
            │       │                           ╰── Else
            │       │                               ╰── Block
            │       │                                   ╰── If
            │       │                                       ├── Condition
            │       │                                       │   ╰── <164>  [||]
            │       │                                       │       ├── <160> Var [in_reg_c]
            │       │                                       │       ╰── <163> Var [on_stack_c]
            │       │                                       ╰── Then
            │       │                                           ╰── Block
            │       │                                               ╰── Return
            │       │                                                   ╰── <165> Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <210>  [||]
            │       │   │       ├── <203>  [||]
            │       │   │       │   ├── <196>  [||]
            │       │   │       │   │   ├── <189>  [||]
            │       │   │       │   │   │   ├── <182>  [!=]
            │       │   │       │   │   │   │   ├── <179> Var [a]
            │       │   │       │   │   │   │   ╰── <181> Constant Int [101]
            │       │   │       │   │   │   ╰── <188>  [!=]
            │       │   │       │   │   │       ├── <185> Var [b]
            │       │   │       │   │   │       ╰── <187> Constant Int [102]
            │       │   │       │   │   ╰── <195>  [!=]
            │       │   │       │   │       ├── <192> Var [c]
            │       │   │       │   │       ╰── <194> Constant Int [103]
            │       │   │       │   ╰── <202>  [!=]
            │       │   │       │       ├── <199> Var [d]
            │       │   │       │       ╰── <201> Constant Int [104]
            │       │   │       ╰── <209>  [!=]
            │       │   │           ├── <206> Var [e]
            │       │   │           ╰── <208> Constant Int [105]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <211> Constant Int [5]
            │       ╰── Return
            │           ╰── <216> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <232> Assign [=]
                    │   ├── <229> Subscript
                    │   │   ├── <227> Dot
                    │   │   │   ├── <225> Var [on_page_boundary]
                    │   │   │   ╰── arr
                    │   │   ╰── <228> Constant Int [2]
                    │   ╰── <231> Constant Int [4]
                    ├── <242> Assign [=]
                    │   ├── <239> Subscript
                    │   │   ├── <237> Dot
                    │   │   │   ├── <235> Var [on_page_boundary]
                    │   │   │   ╰── arr
                    │   │   ╰── <238> Constant Int [3]
                    │   ╰── <241> Constant Int [5]
                    ├── <252> Assign [=]
                    │   ├── <249> Subscript
                    │   │   ├── <247> Dot
                    │   │   │   ├── <245> Var [on_page_boundary]
                    │   │   │   ╰── arr
                    │   │   ╰── <248> Constant Int [8]
                    │   ╰── <251> Constant Int [6]
                    ╰── Return
                        ╰── <264> FunctionCall [f]
                            ├── <256> Var [on_page_boundary]
                            ├── <257> Constant Int [101]
                            ├── <258> Constant Int [102]
                            ├── <259> Constant Int [103]
                            ├── <260> Constant Int [104]
                            ├── <261> Constant Int [105]
                            ╰── <263> Var [on_page_boundary]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_simple() {
    let src = r#"
        
        struct pair {
            int x;
            double y;
        };
        double test_struct_param(struct pair p) {
            if (p.x != 1 || p.y != 2.0) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            struct pair x = {1, 2.0};
            if (!test_struct_param(x)) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Double
            ├── Function [test_struct_param]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── p
            │   │       ╰── Type
            │   │           ╰── Struct [pair]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <34>  [||]
            │       │   │       ├── <25>  [!=]
            │       │   │       │   ├── <22> Dot
            │       │   │       │   │   ├── <20> Var [p]
            │       │   │       │   │   ╰── x
            │       │   │       │   ╰── <24> Constant Int [1]
            │       │   │       ╰── <33>  [!=]
            │       │   │           ├── <30> Dot
            │       │   │           │   ├── <28> Var [p]
            │       │   │           │   ╰── y
            │       │   │           ╰── <32> Constant Double [+2e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <35> Constant Int [0]
            │       ╰── Return
            │           ╰── <40> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [pair]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <52> Constant Int [1]
                    │           ╰── <54> Constant Double [+2e0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <63> Unary [!]
                    │   │       ╰── <62> FunctionCall [test_struct_param]
                    │   │           ╰── <61> Var [x]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <64> Constant Int [1]
                    ╰── Return
                        ╰── <69> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_stack_clobber() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void exit(int status);
        struct stack_bytes {
            char bytes[16];
        };
        static struct stack_bytes to_validate;
        void validate_stack_bytes(int code) {
            if (strcmp(to_validate.bytes, "efghijklmnopqrs")) {
                exit(code);
            }
            return;
        }
        struct one_longword {
            int i;
        };
        void take_longword(struct one_longword s, int code) {
            if (s.i != 10) {
                exit(code);
            }
            return;
        }
        int pass_longword(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct one_longword my_var = {10};
            take_longword(my_var, 1);
            to_validate = bytes;
            validate_stack_bytes(2);
            return 0;
        }
        struct one_quadword {
            long l;
        };
        void take_quadword(struct one_quadword s, int code) {
            if (s.l != 10) {
                exit(code);
            }
            return;
        }
        int pass_quadword(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct one_quadword my_var = {10};
            take_quadword(my_var, 3);
            to_validate = bytes;
            validate_stack_bytes(4);
            return 0;
        }
        struct one_double {
            double d;
        };
        void take_double(struct one_double s, int code) {
            if (s.d != 10) {
                exit(code);
            }
            return;
        }
        int pass_double(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct one_double my_var = {10};
            take_double(my_var, 5);
            to_validate = bytes;
            validate_stack_bytes(6);
            return 0;
        }
        struct twelve_bytes {
            char arr[12];
        };
        void take_twelve_bytes(struct twelve_bytes s, int code) {
            if (strcmp(s.arr, "abcdefghijk")) {
                exit(code);
            }
            return;
        }
        int pass_twelve_bytes(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct twelve_bytes my_var = {"abcdefghijk"};
            take_twelve_bytes(my_var, 7);
            to_validate = bytes;
            validate_stack_bytes(8);
            return 0;
        }
        struct memory {
            char arr[32];
        };
        void take_struct_in_mem(struct memory s, int code) {
            if (strcmp(s.arr, "Here's the thing: I'm a string.")) {
                exit(code);
            }
            return;
        }
        int pass_struct_in_mem(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct memory my_var = {"Here's the thing: I'm a string."};
            take_struct_in_mem(my_var, 9);
            to_validate = bytes;
            validate_stack_bytes(10);
            return 0;
        }
        struct irregular {
            char arr[3];
        };
        void take_irregular_struct(struct irregular s, int code) {
            if (strcmp(s.arr, "12")) {
                exit(code);
            }
            return;
        }
        int pass_irregular_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct irregular my_var = {"12"};
            take_irregular_struct(my_var, 11);
            to_validate = bytes;
            validate_stack_bytes(12);
            return 0;
        }
        struct irregular_memory {
            char arr[27];
        };
        void take_irregular_memory_struct(struct irregular_memory s, int code) {
            if (strcmp(s.arr, "The quick brown fox jumped")) {
                exit(code);
            }
            return;
        }
        int pass_irregular_memory_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct irregular_memory my_var = {"The quick brown fox jumped"};
            take_irregular_memory_struct(my_var, 13);
            to_validate = bytes;
            validate_stack_bytes(14);
            return 0;
        }
        int main(void) {
            pass_longword();
            pass_quadword();
            pass_double();
            pass_twelve_bytes();
            pass_struct_in_mem();
            pass_irregular_struct();
            pass_irregular_memory_struct();
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Struct [stack_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── bytes
            │       ╰── Type
            │           ╰── Array
            │               ├── 16
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── to_validate
            │   ├── Type
            │   │   ╰── Struct [stack_bytes]
            │   ╰── Static
            ├── Function [validate_stack_bytes]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <49> FunctionCall [strcmp]
            │       │   │       ├── <47> Dot
            │       │   │       │   ├── <45> Var [to_validate]
            │       │   │       │   ╰── bytes
            │       │   │       ╰── <48> "efghijklmnopqrs"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <53> FunctionCall [exit]
            │       │               ╰── <52> Var [code]
            │       ╰── Return
            ├── Struct [one_longword]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Function [take_longword]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [one_longword]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <84>  [!=]
            │       │   │       ├── <81> Dot
            │       │   │       │   ├── <79> Var [s]
            │       │   │       │   ╰── i
            │       │   │       ╰── <83> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <88> FunctionCall [exit]
            │       │               ╰── <87> Var [code]
            │       ╰── Return
            ├── Function [pass_longword]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <104> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [one_longword]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <113> Constant Int [10]
            │       │   ╰── Static
            │       ├── <121> FunctionCall [take_longword]
            │       │   ├── <119> Var [my_var]
            │       │   ╰── <120> Constant Int [1]
            │       ├── <128> Assign [=]
            │       │   ├── <124> Var [to_validate]
            │       │   ╰── <127> Var [bytes]
            │       ├── <132> FunctionCall [validate_stack_bytes]
            │       │   ╰── <131> Constant Int [2]
            │       ╰── Return
            │           ╰── <134> Constant Int [0]
            ├── Struct [one_quadword]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Function [take_quadword]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [one_quadword]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <161>  [!=]
            │       │   │       ├── <158> Dot
            │       │   │       │   ├── <156> Var [s]
            │       │   │       │   ╰── l
            │       │   │       ╰── <160> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <165> FunctionCall [exit]
            │       │               ╰── <164> Var [code]
            │       ╰── Return
            ├── Function [pass_quadword]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <181> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [one_quadword]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <190> Constant Int [10]
            │       │   ╰── Static
            │       ├── <198> FunctionCall [take_quadword]
            │       │   ├── <196> Var [my_var]
            │       │   ╰── <197> Constant Int [3]
            │       ├── <205> Assign [=]
            │       │   ├── <201> Var [to_validate]
            │       │   ╰── <204> Var [bytes]
            │       ├── <209> FunctionCall [validate_stack_bytes]
            │       │   ╰── <208> Constant Int [4]
            │       ╰── Return
            │           ╰── <211> Constant Int [0]
            ├── Struct [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Function [take_double]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [one_double]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <238>  [!=]
            │       │   │       ├── <235> Dot
            │       │   │       │   ├── <233> Var [s]
            │       │   │       │   ╰── d
            │       │   │       ╰── <237> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <242> FunctionCall [exit]
            │       │               ╰── <241> Var [code]
            │       ╰── Return
            ├── Function [pass_double]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <258> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [one_double]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <267> Constant Int [10]
            │       │   ╰── Static
            │       ├── <275> FunctionCall [take_double]
            │       │   ├── <273> Var [my_var]
            │       │   ╰── <274> Constant Int [5]
            │       ├── <282> Assign [=]
            │       │   ├── <278> Var [to_validate]
            │       │   ╰── <281> Var [bytes]
            │       ├── <286> FunctionCall [validate_stack_bytes]
            │       │   ╰── <285> Constant Int [6]
            │       ╰── Return
            │           ╰── <288> Constant Int [0]
            ├── Struct [twelve_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 12
            │               ╰── Char
            ├── Function [take_twelve_bytes]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [twelve_bytes]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <317> FunctionCall [strcmp]
            │       │   │       ├── <315> Dot
            │       │   │       │   ├── <313> Var [s]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <316> "abcdefghijk"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <321> FunctionCall [exit]
            │       │               ╰── <320> Var [code]
            │       ╰── Return
            ├── Function [pass_twelve_bytes]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <337> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [twelve_bytes]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <346> "abcdefghijk"
            │       │   ╰── Static
            │       ├── <354> FunctionCall [take_twelve_bytes]
            │       │   ├── <352> Var [my_var]
            │       │   ╰── <353> Constant Int [7]
            │       ├── <361> Assign [=]
            │       │   ├── <357> Var [to_validate]
            │       │   ╰── <360> Var [bytes]
            │       ├── <365> FunctionCall [validate_stack_bytes]
            │       │   ╰── <364> Constant Int [8]
            │       ╰── Return
            │           ╰── <367> Constant Int [0]
            ├── Struct [memory]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 32
            │               ╰── Char
            ├── Function [take_struct_in_mem]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [memory]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <396> FunctionCall [strcmp]
            │       │   │       ├── <394> Dot
            │       │   │       │   ├── <392> Var [s]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <395> "Here's the thing: I'm a string."
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <400> FunctionCall [exit]
            │       │               ╰── <399> Var [code]
            │       ╰── Return
            ├── Function [pass_struct_in_mem]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <416> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [memory]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <425> "Here's the thing: I'm a string."
            │       │   ╰── Static
            │       ├── <433> FunctionCall [take_struct_in_mem]
            │       │   ├── <431> Var [my_var]
            │       │   ╰── <432> Constant Int [9]
            │       ├── <440> Assign [=]
            │       │   ├── <436> Var [to_validate]
            │       │   ╰── <439> Var [bytes]
            │       ├── <444> FunctionCall [validate_stack_bytes]
            │       │   ╰── <443> Constant Int [10]
            │       ╰── Return
            │           ╰── <446> Constant Int [0]
            ├── Struct [irregular]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Function [take_irregular_struct]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [irregular]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <475> FunctionCall [strcmp]
            │       │   │       ├── <473> Dot
            │       │   │       │   ├── <471> Var [s]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <474> "12"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <479> FunctionCall [exit]
            │       │               ╰── <478> Var [code]
            │       ╰── Return
            ├── Function [pass_irregular_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <495> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [irregular]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <504> "12"
            │       │   ╰── Static
            │       ├── <512> FunctionCall [take_irregular_struct]
            │       │   ├── <510> Var [my_var]
            │       │   ╰── <511> Constant Int [11]
            │       ├── <519> Assign [=]
            │       │   ├── <515> Var [to_validate]
            │       │   ╰── <518> Var [bytes]
            │       ├── <523> FunctionCall [validate_stack_bytes]
            │       │   ╰── <522> Constant Int [12]
            │       ╰── Return
            │           ╰── <525> Constant Int [0]
            ├── Struct [irregular_memory]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 27
            │               ╰── Char
            ├── Function [take_irregular_memory_struct]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [irregular_memory]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <554> FunctionCall [strcmp]
            │       │   │       ├── <552> Dot
            │       │   │       │   ├── <550> Var [s]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <553> "The quick brown fox jumped"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <558> FunctionCall [exit]
            │       │               ╰── <557> Var [code]
            │       ╰── Return
            ├── Function [pass_irregular_memory_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <574> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [irregular_memory]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <583> "The quick brown fox jumped"
            │       │   ╰── Static
            │       ├── <591> FunctionCall [take_irregular_memory_struct]
            │       │   ├── <589> Var [my_var]
            │       │   ╰── <590> Constant Int [13]
            │       ├── <598> Assign [=]
            │       │   ├── <594> Var [to_validate]
            │       │   ╰── <597> Var [bytes]
            │       ├── <602> FunctionCall [validate_stack_bytes]
            │       │   ╰── <601> Constant Int [14]
            │       ╰── Return
            │           ╰── <604> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <613> FunctionCall [pass_longword]
                    ├── <616> FunctionCall [pass_quadword]
                    ├── <619> FunctionCall [pass_double]
                    ├── <622> FunctionCall [pass_twelve_bytes]
                    ├── <625> FunctionCall [pass_struct_in_mem]
                    ├── <628> FunctionCall [pass_irregular_struct]
                    ├── <631> FunctionCall [pass_irregular_memory_struct]
                    ╰── Return
                        ╰── <633> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_ignore_retval() {
    let src = r#"
        struct small {
            int x;
        };
        struct big {
            double d;
            int x;
            long l;
        };
        struct small globl = {0};
        struct small return_in_reg(void) {
            globl.x = globl.x + 1;
            return globl;
        }
        struct big globl2 = {1.25, 2, 300};
        struct big return_in_mem(void) {
            globl2.d = globl2.d * 2;
            globl2.x = globl2.x * 3;
            globl2.l = globl2.l * 4;
            return globl2;
        }
        int main(void) {
            (void)return_in_reg();
            return_in_reg();
            if (globl.x != 2) {
                return 1;
            }
            return_in_mem();
            (void)return_in_mem();
            if (globl2.d != 5.0 || globl2.x != 18 || globl2.l != 4800) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [small]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── x
            │       ╰── Type
            │           ╰── Int
            ├── Struct [big]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globl
            │   ├── Type
            │   │   ╰── Struct [small]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── <25> Constant Int [0]
            ├── Function [return_in_reg]
            │   ╰── Body
            │       ├── <46> Assign [=]
            │       │   ├── <37> Dot
            │       │   │   ├── <35> Var [globl]
            │       │   │   ╰── x
            │       │   ╰── <45>  [+]
            │       │       ├── <42> Dot
            │       │       │   ├── <40> Var [globl]
            │       │       │   ╰── x
            │       │       ╰── <44> Constant Int [1]
            │       ╰── Return
            │           ╰── <49> Var [globl]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globl2
            │   ├── Type
            │   │   ╰── Struct [big]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <57> Constant Double [+1.25e0]
            │           ├── <59> Constant Int [2]
            │           ╰── <61> Constant Int [300]
            ├── Function [return_in_mem]
            │   ╰── Body
            │       ├── <82> Assign [=]
            │       │   ├── <73> Dot
            │       │   │   ├── <71> Var [globl2]
            │       │   │   ╰── d
            │       │   ╰── <81>  [*]
            │       │       ├── <78> Dot
            │       │       │   ├── <76> Var [globl2]
            │       │       │   ╰── d
            │       │       ╰── <80> Constant Int [2]
            │       ├── <96> Assign [=]
            │       │   ├── <87> Dot
            │       │   │   ├── <85> Var [globl2]
            │       │   │   ╰── x
            │       │   ╰── <95>  [*]
            │       │       ├── <92> Dot
            │       │       │   ├── <90> Var [globl2]
            │       │       │   ╰── x
            │       │       ╰── <94> Constant Int [3]
            │       ├── <110> Assign [=]
            │       │   ├── <101> Dot
            │       │   │   ├── <99> Var [globl2]
            │       │   │   ╰── l
            │       │   ╰── <109>  [*]
            │       │       ├── <106> Dot
            │       │       │   ├── <104> Var [globl2]
            │       │       │   ╰── l
            │       │       ╰── <108> Constant Int [4]
            │       ╰── Return
            │           ╰── <113> Var [globl2]
            ╰── Function [main]
                ╰── Body
                    ├── <125> Cast
                    │   ├── Target
                    │   │   ╰── Void
                    │   ╰── Expression
                    │       ╰── <124> FunctionCall [return_in_reg]
                    ├── <128> FunctionCall [return_in_reg]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <136>  [!=]
                    │   │       ├── <133> Dot
                    │   │       │   ├── <131> Var [globl]
                    │   │       │   ╰── x
                    │   │       ╰── <135> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <137> Constant Int [1]
                    ├── <143> FunctionCall [return_in_mem]
                    ├── <149> Cast
                    │   ├── Target
                    │   │   ╰── Void
                    │   ╰── Expression
                    │       ╰── <148> FunctionCall [return_in_mem]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <175>  [||]
                    │   │       ├── <166>  [||]
                    │   │       │   ├── <157>  [!=]
                    │   │       │   │   ├── <154> Dot
                    │   │       │   │   │   ├── <152> Var [globl2]
                    │   │       │   │   │   ╰── d
                    │   │       │   │   ╰── <156> Constant Double [+5e0]
                    │   │       │   ╰── <165>  [!=]
                    │   │       │       ├── <162> Dot
                    │   │       │       │   ├── <160> Var [globl2]
                    │   │       │       │   ╰── x
                    │   │       │       ╰── <164> Constant Int [18]
                    │   │       ╰── <174>  [!=]
                    │   │           ├── <171> Dot
                    │   │           │   ├── <169> Var [globl2]
                    │   │           │   ╰── l
                    │   │           ╰── <173> Constant Int [4800]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <176> Constant Int [2]
                    ╰── Return
                        ╰── <181> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_access_retval_members() {
    let src = r#"
        
        
        struct inner {
            char x;
            long y;
        };
        struct outer {
            double d;
            struct inner *ptr;
            struct inner s;
        };
        void *calloc(unsigned long nmemb, unsigned long size);
        struct inner return_small_struct(void);
        struct outer return_nested_struct(void);
        
        struct inner return_small_struct(void) {
            struct inner i = {101, 102};
            return i;
        }
        struct outer return_nested_struct(void) {
            static struct outer ret = {2.0, 0, {10, 11}};
            if (!ret.ptr) {
                ret.ptr = calloc(1, sizeof(struct inner));
                ret.ptr->x = 12;
                ret.ptr->y = 13;
            }
            return ret;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Long
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [return_small_struct]
            ├── Function [return_nested_struct]
            ├── Function [return_small_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <61> Constant Int [101]
            │       │           ╰── <63> Constant Int [102]
            │       ╰── Return
            │           ╰── <68> Var [i]
            ╰── Function [return_nested_struct]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ret
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ├── Initializer
                    │   │   ╰── Compound
                    │   │       ├── <82> Constant Double [+2e0]
                    │   │       ├── <84> Constant Int [0]
                    │   │       ╰── Compound
                    │   │           ├── <86> Constant Int [10]
                    │   │           ╰── <88> Constant Int [11]
                    │   ╰── Static
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <98> Unary [!]
                    │   │       ╰── <97> Dot
                    │   │           ├── <95> Var [ret]
                    │   │           ╰── ptr
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <111> Assign [=]
                    │           │   ├── <102> Dot
                    │           │   │   ├── <100> Var [ret]
                    │           │   │   ╰── ptr
                    │           │   ╰── <110> FunctionCall [calloc]
                    │           │       ├── <105> Constant Int [1]
                    │           │       ╰── <109> SizeOfType
                    │           │           ╰── Struct [inner]
                    │           ├── <121> Assign [=]
                    │           │   ├── <118> Arrow
                    │           │   │   ├── <116> Dot
                    │           │   │   │   ├── <114> Var [ret]
                    │           │   │   │   ╰── ptr
                    │           │   │   ╰── x
                    │           │   ╰── <120> Constant Int [12]
                    │           ╰── <131> Assign [=]
                    │               ├── <128> Arrow
                    │               │   ├── <126> Dot
                    │               │   │   ├── <124> Var [ret]
                    │               │   │   ╰── ptr
                    │               │   ╰── y
                    │               ╰── <130> Constant Int [13]
                    ╰── Return
                        ╰── <137> Var [ret]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_access_retval_members_client() {
    let src = r#"
        
        
        struct inner {
            char x;
            long y;
        };
        struct outer {
            double d;
            struct inner *ptr;
            struct inner s;
        };
        void *calloc(unsigned long nmemb, unsigned long size);
        struct inner return_small_struct(void);
        struct outer return_nested_struct(void);
        
        int main(void) {
            if (return_small_struct().y != 102) {
                return 1;
            }
            if (return_nested_struct().d != 2.0 || return_nested_struct().s.x != 10 ||
                return_nested_struct().s.y != 11) {
                return 3;
            }
            if (return_nested_struct().ptr->x != 12 ||
                return_nested_struct().ptr->y != 13) {
                return 4;
            }
            return_nested_struct().ptr->x = 70;
            return_nested_struct().ptr->y = 71;
            if (return_nested_struct().ptr->x != 70 ||
                return_nested_struct().ptr->y != 71) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Long
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [return_small_struct]
            ├── Function [return_nested_struct]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <62>  [!=]
                    │   │       ├── <59> Dot
                    │   │       │   ├── <57> FunctionCall [return_small_struct]
                    │   │       │   ╰── y
                    │   │       ╰── <61> Constant Int [102]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <63> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <96>  [||]
                    │   │       ├── <85>  [||]
                    │   │       │   ├── <74>  [!=]
                    │   │       │   │   ├── <71> Dot
                    │   │       │   │   │   ├── <69> FunctionCall [return_nested_struct]
                    │   │       │   │   │   ╰── d
                    │   │       │   │   ╰── <73> Constant Double [+2e0]
                    │   │       │   ╰── <84>  [!=]
                    │   │       │       ├── <81> Dot
                    │   │       │       │   ├── <79> Dot
                    │   │       │       │   │   ├── <77> FunctionCall [return_nested_struct]
                    │   │       │       │   │   ╰── s
                    │   │       │       │   ╰── x
                    │   │       │       ╰── <83> Constant Int [10]
                    │   │       ╰── <95>  [!=]
                    │   │           ├── <92> Dot
                    │   │           │   ├── <90> Dot
                    │   │           │   │   ├── <88> FunctionCall [return_nested_struct]
                    │   │           │   │   ╰── s
                    │   │           │   ╰── y
                    │   │           ╰── <94> Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <97> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <121>  [||]
                    │   │       ├── <110>  [!=]
                    │   │       │   ├── <107> Arrow
                    │   │       │   │   ├── <105> Dot
                    │   │       │   │   │   ├── <103> FunctionCall [return_nested_struct]
                    │   │       │   │   │   ╰── ptr
                    │   │       │   │   ╰── x
                    │   │       │   ╰── <109> Constant Int [12]
                    │   │       ╰── <120>  [!=]
                    │   │           ├── <117> Arrow
                    │   │           │   ├── <115> Dot
                    │   │           │   │   ├── <113> FunctionCall [return_nested_struct]
                    │   │           │   │   ╰── ptr
                    │   │           │   ╰── y
                    │   │           ╰── <119> Constant Int [13]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <122> Constant Int [4]
                    ├── <135> Assign [=]
                    │   ├── <132> Arrow
                    │   │   ├── <130> Dot
                    │   │   │   ├── <128> FunctionCall [return_nested_struct]
                    │   │   │   ╰── ptr
                    │   │   ╰── x
                    │   ╰── <134> Constant Int [70]
                    ├── <145> Assign [=]
                    │   ├── <142> Arrow
                    │   │   ├── <140> Dot
                    │   │   │   ├── <138> FunctionCall [return_nested_struct]
                    │   │   │   ╰── ptr
                    │   │   ╰── y
                    │   ╰── <144> Constant Int [71]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <166>  [||]
                    │   │       ├── <155>  [!=]
                    │   │       │   ├── <152> Arrow
                    │   │       │   │   ├── <150> Dot
                    │   │       │   │   │   ├── <148> FunctionCall [return_nested_struct]
                    │   │       │   │   │   ╰── ptr
                    │   │       │   │   ╰── x
                    │   │       │   ╰── <154> Constant Int [70]
                    │   │       ╰── <165>  [!=]
                    │   │           ├── <162> Arrow
                    │   │           │   ├── <160> Dot
                    │   │           │   │   ├── <158> FunctionCall [return_nested_struct]
                    │   │           │   │   ╰── ptr
                    │   │           │   ╰── y
                    │   │           ╰── <164> Constant Int [71]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <167> Constant Int [5]
                    ╰── Return
                        ╰── <172> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_missing_retval() {
    let src = r#"
        struct big {
            char arr[25];
        };
        struct big missing_return_value(int *i);
        struct big missing_return_value(int *i) {
            *i = 10;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [big]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 25
            │               ╰── Char
            ├── Function [missing_return_value]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Int
            ╰── Function [missing_return_value]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── i
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Int
                ╰── Body
                    ╰── <33> Assign [=]
                        ├── <30> Dereference
                        │   ╰── <29> Var [i]
                        ╰── <32> Constant Int [10]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_missing_retval_client() {
    let src = r#"
        struct big {
            char arr[25];
        };
        struct big missing_return_value(int *i);
        
        int main(void) {
            int array[4] = {1, 2, 3, 4};
            missing_return_value(array + 2);
            return array[2] == 10;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [big]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 25
            │               ╰── Char
            ├── Function [missing_return_value]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── array
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <28> Constant Int [1]
                    │           ├── <30> Constant Int [2]
                    │           ├── <32> Constant Int [3]
                    │           ╰── <34> Constant Int [4]
                    ├── <44> FunctionCall [missing_return_value]
                    │   ╰── <43>  [+]
                    │       ├── <40> Var [array]
                    │       ╰── <42> Constant Int [2]
                    ╰── Return
                        ╰── <52>  [==]
                            ├── <49> Subscript
                            │   ├── <47> Var [array]
                            │   ╰── <48> Constant Int [2]
                            ╰── <51> Constant Int [10]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_return_calling_conventions() {
    let src = r#"
        
        int strcmp(char *s1, char *s2);
        int strncmp(char *s1, char *s2, unsigned long n);
        struct one_int {
            int i;
            char c;
        };
        struct one_int_exactly {
            unsigned long l;
        };
        struct two_ints {
            char c;
            int arr[3];
        };
        struct two_ints_nested {
            struct one_int a;
            struct one_int b;
        };
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct one_xmm {
            double d;
        };
        struct two_xmm {
            double d[2];
        };
        struct int_and_xmm {
            char c;
            double d;
        };
        struct xmm_and_int {
            struct one_xmm dbl;
            char c[3];
        };
        struct odd_size {
            char arr[5];
        };
        struct memory {
            double d;
            char c[3];
            long l;
            int i;
        };
        struct one_int return_int_struct(void);
        struct twelve_bytes return_two_int_struct(void);
        struct one_xmm return_double_struct(void);
        struct two_xmm return_two_double_struct(void);
        struct xmm_and_int return_mixed(void);
        struct int_and_xmm return_mixed2(void);
        struct memory return_on_stack(void);
        struct memory pass_and_return_regs(int i, double d, struct int_and_xmm strct,
                                           int c, struct two_ints t_i, long l,
                                           struct one_int_exactly o_i_e, int c2);
        
        struct one_int return_int_struct(void) {
            struct one_int retval = {1, 2};
            return retval;
        }
        struct twelve_bytes return_two_int_struct(void) {
            struct twelve_bytes retval = {10, "12345678"};
            return retval;
        }
        struct one_xmm return_double_struct(void) {
            struct one_xmm retval = {100.625};
            return retval;
        }
        struct two_xmm return_two_double_struct(void) {
            struct two_xmm retval = {{8.8, 7.8}};
            return retval;
        }
        struct xmm_and_int return_mixed(void) {
            struct xmm_and_int retval = {{10.0}, "ab"};
            return retval;
        }
        struct int_and_xmm return_mixed2(void) {
            struct int_and_xmm retval = {127, 34e43};
            return retval;
        }
        struct memory return_on_stack(void) {
            struct memory retval = {1.25, "xy", 100l, 44};
            return retval;
        }
        int leaf_call(struct two_ints t_i, int c, double d) {
            if (t_i.c != '_' || t_i.arr[0] != 5 || t_i.arr[1] != 6 || t_i.arr[2] != 7) {
                return 0;
            }
            if (c != 'p' || d != 4.56) {
                return 0;
            }
            return 1;
        }
        struct memory pass_and_return_regs(int i, double d, struct int_and_xmm strct,
                                           int c, struct two_ints t_i, long l,
                                           struct one_int_exactly o_i_e, int c2) {
            char stackbytes[8] = "zyxwvut";
            struct memory retval = {0, {0, 0, 0}, 0, 0};
            if (!leaf_call(t_i, strct.c, strct.d)) {
                retval.i = 1;
                return retval;
            }
            if (i != 6 || d != 4.0 || c != 5 || l != 77 || c2 != 99) {
                retval.i = 2;
                return retval;
            }
            if (o_i_e.l != 567890) {
                retval.i = 3;
                return retval;
            }
            if (strcmp(stackbytes, "zyxwvut")) {
                retval.i = 4;
                return retval;
            }
            retval.l = 100;
            return retval;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [strncmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── n
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [one_int_exactly]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Struct [two_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Struct [two_ints_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Struct [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [one_int]
            ├── Struct [twelve_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [two_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Double
            ├── Struct [int_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [xmm_and_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl
            │   │   ╰── Type
            │   │       ╰── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [odd_size]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [memory]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Function [return_int_struct]
            ├── Function [return_two_int_struct]
            ├── Function [return_double_struct]
            ├── Function [return_two_double_struct]
            ├── Function [return_mixed]
            ├── Function [return_mixed2]
            ├── Function [return_on_stack]
            ├── Function [pass_and_return_regs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── strct
            │       │   ╰── Type
            │       │       ╰── Struct [int_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_i
            │       │   ╰── Type
            │       │       ╰── Struct [two_ints]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── o_i_e
            │       │   ╰── Type
            │       │       ╰── Struct [one_int_exactly]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── c2
            │           ╰── Type
            │               ╰── Int
            ├── Function [return_int_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [one_int]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <231> Constant Int [1]
            │       │           ╰── <233> Constant Int [2]
            │       ╰── Return
            │           ╰── <238> Var [retval]
            ├── Function [return_two_int_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [twelve_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <251> Constant Int [10]
            │       │           ╰── <253> "12345678"
            │       ╰── Return
            │           ╰── <258> Var [retval]
            ├── Function [return_double_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [one_xmm]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <271> Constant Double [+1.00625e2]
            │       ╰── Return
            │           ╰── <276> Var [retval]
            ├── Function [return_two_double_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [two_xmm]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <289> Constant Double [+8.8e0]
            │       │               ╰── <291> Constant Double [+7.8e0]
            │       ╰── Return
            │           ╰── <297> Var [retval]
            ├── Function [return_mixed]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [xmm_and_int]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ╰── <310> Constant Double [+1e1]
            │       │           ╰── <313> "ab"
            │       ╰── Return
            │           ╰── <318> Var [retval]
            ├── Function [return_mixed2]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [int_and_xmm]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <331> Constant Int [127]
            │       │           ╰── <333> Constant Double [+3.4e44]
            │       ╰── Return
            │           ╰── <338> Var [retval]
            ├── Function [return_on_stack]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [memory]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <351> Constant Double [+1.25e0]
            │       │           ├── <353> "xy"
            │       │           ├── <355> Constant Long [100]
            │       │           ╰── <357> Constant Int [44]
            │       ╰── Return
            │           ╰── <362> Var [retval]
            ├── Function [leaf_call]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── t_i
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [two_ints]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <419>  [||]
            │       │   │       ├── <408>  [||]
            │       │   │       │   ├── <397>  [||]
            │       │   │       │   │   ├── <386>  [!=]
            │       │   │       │   │   │   ├── <383> Dot
            │       │   │       │   │   │   │   ├── <381> Var [t_i]
            │       │   │       │   │   │   │   ╰── c
            │       │   │       │   │   │   ╰── <385> Constant Int [95]
            │       │   │       │   │   ╰── <396>  [!=]
            │       │   │       │   │       ├── <393> Subscript
            │       │   │       │   │       │   ├── <391> Dot
            │       │   │       │   │       │   │   ├── <389> Var [t_i]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <392> Constant Int [0]
            │       │   │       │   │       ╰── <395> Constant Int [5]
            │       │   │       │   ╰── <407>  [!=]
            │       │   │       │       ├── <404> Subscript
            │       │   │       │       │   ├── <402> Dot
            │       │   │       │       │   │   ├── <400> Var [t_i]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <403> Constant Int [1]
            │       │   │       │       ╰── <406> Constant Int [6]
            │       │   │       ╰── <418>  [!=]
            │       │   │           ├── <415> Subscript
            │       │   │           │   ├── <413> Dot
            │       │   │           │   │   ├── <411> Var [t_i]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <414> Constant Int [2]
            │       │   │           ╰── <417> Constant Int [7]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <420> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <436>  [||]
            │       │   │       ├── <429>  [!=]
            │       │   │       │   ├── <426> Var [c]
            │       │   │       │   ╰── <428> Constant Int [112]
            │       │   │       ╰── <435>  [!=]
            │       │   │           ├── <432> Var [d]
            │       │   │           ╰── <434> Constant Double [+4.56e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <437> Constant Int [0]
            │       ╰── Return
            │           ╰── <442> Constant Int [1]
            ╰── Function [pass_and_return_regs]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── strct
                │   │   ╰── Type
                │   │       ╰── Struct [int_and_xmm]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── t_i
                │   │   ╰── Type
                │   │       ╰── Struct [two_ints]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── l
                │   │   ╰── Type
                │   │       ╰── Long
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── o_i_e
                │   │   ╰── Type
                │   │       ╰── Struct [one_int_exactly]
                │   ╰── Param
                │       ├── Name
                │       │   ╰── c2
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── stackbytes
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 8
                    │   │       ╰── Char
                    │   ╰── Initializer
                    │       ╰── <483> "zyxwvut"
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── retval
                    │   ├── Type
                    │   │   ╰── Struct [memory]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <490> Constant Int [0]
                    │           ├── Compound
                    │           │   ├── <492> Constant Int [0]
                    │           │   ├── <494> Constant Int [0]
                    │           │   ╰── <496> Constant Int [0]
                    │           ├── <499> Constant Int [0]
                    │           ╰── <501> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <518> Unary [!]
                    │   │       ╰── <517> FunctionCall [leaf_call]
                    │   │           ├── <508> Var [t_i]
                    │   │           ├── <512> Dot
                    │   │           │   ├── <510> Var [strct]
                    │   │           │   ╰── c
                    │   │           ╰── <516> Dot
                    │   │               ├── <514> Var [strct]
                    │   │               ╰── d
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <525> Assign [=]
                    │           │   ├── <522> Dot
                    │           │   │   ├── <520> Var [retval]
                    │           │   │   ╰── i
                    │           │   ╰── <524> Constant Int [1]
                    │           ╰── Return
                    │               ╰── <528> Var [retval]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <565>  [||]
                    │   │       ├── <558>  [||]
                    │   │       │   ├── <551>  [||]
                    │   │       │   │   ├── <544>  [||]
                    │   │       │   │   │   ├── <537>  [!=]
                    │   │       │   │   │   │   ├── <534> Var [i]
                    │   │       │   │   │   │   ╰── <536> Constant Int [6]
                    │   │       │   │   │   ╰── <543>  [!=]
                    │   │       │   │   │       ├── <540> Var [d]
                    │   │       │   │   │       ╰── <542> Constant Double [+4e0]
                    │   │       │   │   ╰── <550>  [!=]
                    │   │       │   │       ├── <547> Var [c]
                    │   │       │   │       ╰── <549> Constant Int [5]
                    │   │       │   ╰── <557>  [!=]
                    │   │       │       ├── <554> Var [l]
                    │   │       │       ╰── <556> Constant Int [77]
                    │   │       ╰── <564>  [!=]
                    │   │           ├── <561> Var [c2]
                    │   │           ╰── <563> Constant Int [99]
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <572> Assign [=]
                    │           │   ├── <569> Dot
                    │           │   │   ├── <567> Var [retval]
                    │           │   │   ╰── i
                    │           │   ╰── <571> Constant Int [2]
                    │           ╰── Return
                    │               ╰── <575> Var [retval]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <586>  [!=]
                    │   │       ├── <583> Dot
                    │   │       │   ├── <581> Var [o_i_e]
                    │   │       │   ╰── l
                    │   │       ╰── <585> Constant Int [567890]
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <593> Assign [=]
                    │           │   ├── <590> Dot
                    │           │   │   ├── <588> Var [retval]
                    │           │   │   ╰── i
                    │           │   ╰── <592> Constant Int [3]
                    │           ╰── Return
                    │               ╰── <596> Var [retval]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <605> FunctionCall [strcmp]
                    │   │       ├── <603> Var [stackbytes]
                    │   │       ╰── <604> "zyxwvut"
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <612> Assign [=]
                    │           │   ├── <609> Dot
                    │           │   │   ├── <607> Var [retval]
                    │           │   │   ╰── i
                    │           │   ╰── <611> Constant Int [4]
                    │           ╰── Return
                    │               ╰── <615> Var [retval]
                    ├── <626> Assign [=]
                    │   ├── <623> Dot
                    │   │   ├── <621> Var [retval]
                    │   │   ╰── l
                    │   ╰── <625> Constant Int [100]
                    ╰── Return
                        ╰── <629> Var [retval]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_return_calling_conventions_client() {
    let src = r#"
        
        int strcmp(char *s1, char *s2);
        int strncmp(char *s1, char *s2, unsigned long n);
        struct one_int {
            int i;
            char c;
        };
        struct one_int_exactly {
            unsigned long l;
        };
        struct two_ints {
            char c;
            int arr[3];
        };
        struct two_ints_nested {
            struct one_int a;
            struct one_int b;
        };
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct one_xmm {
            double d;
        };
        struct two_xmm {
            double d[2];
        };
        struct int_and_xmm {
            char c;
            double d;
        };
        struct xmm_and_int {
            struct one_xmm dbl;
            char c[3];
        };
        struct odd_size {
            char arr[5];
        };
        struct memory {
            double d;
            char c[3];
            long l;
            int i;
        };
        struct one_int return_int_struct(void);
        struct twelve_bytes return_two_int_struct(void);
        struct one_xmm return_double_struct(void);
        struct two_xmm return_two_double_struct(void);
        struct xmm_and_int return_mixed(void);
        struct int_and_xmm return_mixed2(void);
        struct memory return_on_stack(void);
        struct memory pass_and_return_regs(int i, double d, struct int_and_xmm strct,
                                           int c, struct two_ints t_i, long l,
                                           struct one_int_exactly o_i_e, int c2);
        
        int main(void) {
            struct one_int_exactly one_long = {567890l};
            struct two_ints two_ints = {'_', {5, 6, 7}};
            struct int_and_xmm int_and_xmm = {'p', 4.56};
            struct one_int s1 = return_int_struct();
            if (s1.i != 1 || s1.c != 2) {
                return 1;
            }
            struct twelve_bytes s2 = return_two_int_struct();
            if (s2.i != 10 || strncmp(s2.arr, "12345678", sizeof s2.arr))
                return 2;
            struct one_xmm s3 = return_double_struct();
            if (s3.d != 100.625)
                return 3;
            struct two_xmm s4 = return_two_double_struct();
            if (s4.d[0] != 8.8 || s4.d[1] != 7.8)
                return 4;
            struct xmm_and_int s5 = return_mixed();
            if (s5.dbl.d != 10.0 || strcmp(s5.c, "ab"))
                return 5;
            struct int_and_xmm s6 = return_mixed2();
            if (s6.c != 127 || s6.d != 34e43)
                return 6;
            struct memory s7 = return_on_stack();
            if (s7.d != 1.25 || strcmp(s7.c, "xy") || s7.l != 100l || s7.i != 44)
                return 7;
            s7 = pass_and_return_regs(6, 4.0, int_and_xmm, 5, two_ints, 77, one_long,
                                      99);
            if (s7.d || s7.c[0] || s7.c[1] || s7.c[2])
                return 8;
            if (s7.i)
                return 9;
            if (s7.l != 100)
                return 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [strncmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── n
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [one_int_exactly]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Struct [two_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Struct [two_ints_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Struct [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [one_int]
            ├── Struct [twelve_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [two_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Double
            ├── Struct [int_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [xmm_and_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl
            │   │   ╰── Type
            │   │       ╰── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [odd_size]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [memory]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Function [return_int_struct]
            ├── Function [return_two_int_struct]
            ├── Function [return_double_struct]
            ├── Function [return_two_double_struct]
            ├── Function [return_mixed]
            ├── Function [return_mixed2]
            ├── Function [return_on_stack]
            ├── Function [pass_and_return_regs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── strct
            │       │   ╰── Type
            │       │       ╰── Struct [int_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_i
            │       │   ╰── Type
            │       │       ╰── Struct [two_ints]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── o_i_e
            │       │   ╰── Type
            │       │       ╰── Struct [one_int_exactly]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── c2
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── one_long
                    │   ├── Type
                    │   │   ╰── Struct [one_int_exactly]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <230> Constant Long [567890]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_ints
                    │   ├── Type
                    │   │   ╰── Struct [two_ints]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <238> Constant Int [95]
                    │           ╰── Compound
                    │               ├── <240> Constant Int [5]
                    │               ├── <242> Constant Int [6]
                    │               ╰── <244> Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── int_and_xmm
                    │   ├── Type
                    │   │   ╰── Struct [int_and_xmm]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <253> Constant Int [112]
                    │           ╰── <255> Constant Double [+4.56e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s1
                    │   ├── Type
                    │   │   ╰── Struct [one_int]
                    │   ╰── Initializer
                    │       ╰── <264> FunctionCall [return_int_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <282>  [||]
                    │   │       ├── <273>  [!=]
                    │   │       │   ├── <270> Dot
                    │   │       │   │   ├── <268> Var [s1]
                    │   │       │   │   ╰── i
                    │   │       │   ╰── <272> Constant Int [1]
                    │   │       ╰── <281>  [!=]
                    │   │           ├── <278> Dot
                    │   │           │   ├── <276> Var [s1]
                    │   │           │   ╰── c
                    │   │           ╰── <280> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <283> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s2
                    │   ├── Type
                    │   │   ╰── Struct [twelve_bytes]
                    │   ╰── Initializer
                    │       ╰── <293> FunctionCall [return_two_int_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <316>  [||]
                    │   │       ├── <302>  [!=]
                    │   │       │   ├── <299> Dot
                    │   │       │   │   ├── <297> Var [s2]
                    │   │       │   │   ╰── i
                    │   │       │   ╰── <301> Constant Int [10]
                    │   │       ╰── <315> FunctionCall [strncmp]
                    │   │           ├── <308> Dot
                    │   │           │   ├── <306> Var [s2]
                    │   │           │   ╰── arr
                    │   │           ├── <309> "12345678"
                    │   │           ╰── <314> SizeOfExpr
                    │   │               ╰── <313> Dot
                    │   │                   ├── <311> Var [s2]
                    │   │                   ╰── arr
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <317> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s3
                    │   ├── Type
                    │   │   ╰── Struct [one_xmm]
                    │   ╰── Initializer
                    │       ╰── <325> FunctionCall [return_double_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <334>  [!=]
                    │   │       ├── <331> Dot
                    │   │       │   ├── <329> Var [s3]
                    │   │       │   ╰── d
                    │   │       ╰── <333> Constant Double [+1.00625e2]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <335> Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s4
                    │   ├── Type
                    │   │   ╰── Struct [two_xmm]
                    │   ╰── Initializer
                    │       ╰── <343> FunctionCall [return_two_double_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <365>  [||]
                    │   │       ├── <354>  [!=]
                    │   │       │   ├── <351> Subscript
                    │   │       │   │   ├── <349> Dot
                    │   │       │   │   │   ├── <347> Var [s4]
                    │   │       │   │   │   ╰── d
                    │   │       │   │   ╰── <350> Constant Int [0]
                    │   │       │   ╰── <353> Constant Double [+8.8e0]
                    │   │       ╰── <364>  [!=]
                    │   │           ├── <361> Subscript
                    │   │           │   ├── <359> Dot
                    │   │           │   │   ├── <357> Var [s4]
                    │   │           │   │   ╰── d
                    │   │           │   ╰── <360> Constant Int [1]
                    │   │           ╰── <363> Constant Double [+7.8e0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <366> Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s5
                    │   ├── Type
                    │   │   ╰── Struct [xmm_and_int]
                    │   ╰── Initializer
                    │       ╰── <374> FunctionCall [return_mixed]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <394>  [||]
                    │   │       ├── <385>  [!=]
                    │   │       │   ├── <382> Dot
                    │   │       │   │   ├── <380> Dot
                    │   │       │   │   │   ├── <378> Var [s5]
                    │   │       │   │   │   ╰── dbl
                    │   │       │   │   ╰── d
                    │   │       │   ╰── <384> Constant Double [+1e1]
                    │   │       ╰── <393> FunctionCall [strcmp]
                    │   │           ├── <391> Dot
                    │   │           │   ├── <389> Var [s5]
                    │   │           │   ╰── c
                    │   │           ╰── <392> "ab"
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <395> Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s6
                    │   ├── Type
                    │   │   ╰── Struct [int_and_xmm]
                    │   ╰── Initializer
                    │       ╰── <403> FunctionCall [return_mixed2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <421>  [||]
                    │   │       ├── <412>  [!=]
                    │   │       │   ├── <409> Dot
                    │   │       │   │   ├── <407> Var [s6]
                    │   │       │   │   ╰── c
                    │   │       │   ╰── <411> Constant Int [127]
                    │   │       ╰── <420>  [!=]
                    │   │           ├── <417> Dot
                    │   │           │   ├── <415> Var [s6]
                    │   │           │   ╰── d
                    │   │           ╰── <419> Constant Double [+3.4e44]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <422> Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s7
                    │   ├── Type
                    │   │   ╰── Struct [memory]
                    │   ╰── Initializer
                    │       ╰── <430> FunctionCall [return_on_stack]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <466>  [||]
                    │   │       ├── <457>  [||]
                    │   │       │   ├── <448>  [||]
                    │   │       │   │   ├── <439>  [!=]
                    │   │       │   │   │   ├── <436> Dot
                    │   │       │   │   │   │   ├── <434> Var [s7]
                    │   │       │   │   │   │   ╰── d
                    │   │       │   │   │   ╰── <438> Constant Double [+1.25e0]
                    │   │       │   │   ╰── <447> FunctionCall [strcmp]
                    │   │       │   │       ├── <445> Dot
                    │   │       │   │       │   ├── <443> Var [s7]
                    │   │       │   │       │   ╰── c
                    │   │       │   │       ╰── <446> "xy"
                    │   │       │   ╰── <456>  [!=]
                    │   │       │       ├── <453> Dot
                    │   │       │       │   ├── <451> Var [s7]
                    │   │       │       │   ╰── l
                    │   │       │       ╰── <455> Constant Long [100]
                    │   │       ╰── <465>  [!=]
                    │   │           ├── <462> Dot
                    │   │           │   ├── <460> Var [s7]
                    │   │           │   ╰── i
                    │   │           ╰── <464> Constant Int [44]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <467> Constant Int [7]
                    ├── <486> Assign [=]
                    │   ├── <471> Var [s7]
                    │   ╰── <485> FunctionCall [pass_and_return_regs]
                    │       ├── <474> Constant Int [6]
                    │       ├── <475> Constant Double [+4e0]
                    │       ├── <477> Var [int_and_xmm]
                    │       ├── <478> Constant Int [5]
                    │       ├── <480> Var [two_ints]
                    │       ├── <481> Constant Int [77]
                    │       ├── <483> Var [one_long]
                    │       ╰── <484> Constant Int [99]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <515>  [||]
                    │   │       ├── <507>  [||]
                    │   │       │   ├── <499>  [||]
                    │   │       │   │   ├── <491> Dot
                    │   │       │   │   │   ├── <489> Var [s7]
                    │   │       │   │   │   ╰── d
                    │   │       │   │   ╰── <498> Subscript
                    │   │       │   │       ├── <496> Dot
                    │   │       │   │       │   ├── <494> Var [s7]
                    │   │       │   │       │   ╰── c
                    │   │       │   │       ╰── <497> Constant Int [0]
                    │   │       │   ╰── <506> Subscript
                    │   │       │       ├── <504> Dot
                    │   │       │       │   ├── <502> Var [s7]
                    │   │       │       │   ╰── c
                    │   │       │       ╰── <505> Constant Int [1]
                    │   │       ╰── <514> Subscript
                    │   │           ├── <512> Dot
                    │   │           │   ├── <510> Var [s7]
                    │   │           │   ╰── c
                    │   │           ╰── <513> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <516> Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <522> Dot
                    │   │       ├── <520> Var [s7]
                    │   │       ╰── i
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <523> Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <532>  [!=]
                    │   │       ├── <529> Dot
                    │   │       │   ├── <527> Var [s7]
                    │   │       │   ╰── l
                    │   │       ╰── <531> Constant Int [100]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <533> Constant Int [10]
                    ╰── Return
                        ╰── <536> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_retval_struct_sizes() {
    let src = r#"
        struct bytesize1 {
            unsigned char arr[1];
        };
        extern struct bytesize1 globvar_1;
        struct bytesize1 fun1(void);
        struct bytesize2 {
            unsigned char arr[2];
        };
        extern struct bytesize2 globvar_2;
        struct bytesize2 fun2(void);
        struct bytesize3 {
            unsigned char arr[3];
        };
        extern struct bytesize3 globvar_3;
        struct bytesize3 fun3(void);
        struct bytesize4 {
            unsigned char arr[4];
        };
        extern struct bytesize4 globvar_4;
        struct bytesize4 fun4(void);
        struct bytesize5 {
            unsigned char arr[5];
        };
        extern struct bytesize5 globvar_5;
        struct bytesize5 fun5(void);
        struct bytesize6 {
            unsigned char arr[6];
        };
        extern struct bytesize6 globvar_6;
        struct bytesize6 fun6(void);
        struct bytesize7 {
            unsigned char arr[7];
        };
        extern struct bytesize7 globvar_7;
        struct bytesize7 fun7(void);
        struct bytesize8 {
            unsigned char arr[8];
        };
        extern struct bytesize8 globvar_8;
        struct bytesize8 fun8(void);
        struct bytesize9 {
            unsigned char arr[9];
        };
        extern struct bytesize9 globvar_9;
        struct bytesize9 fun9(void);
        struct bytesize10 {
            unsigned char arr[10];
        };
        extern struct bytesize10 globvar_10;
        struct bytesize10 fun10(void);
        struct bytesize11 {
            unsigned char arr[11];
        };
        extern struct bytesize11 globvar_11;
        struct bytesize11 fun11(void);
        struct bytesize12 {
            unsigned char arr[12];
        };
        extern struct bytesize12 globvar_12;
        struct bytesize12 fun12(void);
        struct bytesize13 {
            unsigned char arr[13];
        };
        extern struct bytesize13 globvar_13;
        struct bytesize13 fun13(void);
        struct bytesize14 {
            unsigned char arr[14];
        };
        extern struct bytesize14 globvar_14;
        struct bytesize14 fun14(void);
        struct bytesize15 {
            unsigned char arr[15];
        };
        extern struct bytesize15 globvar_15;
        struct bytesize15 fun15(void);
        struct bytesize16 {
            unsigned char arr[16];
        };
        extern struct bytesize16 globvar_16;
        struct bytesize16 fun16(void);
        struct bytesize17 {
            unsigned char arr[17];
        };
        extern struct bytesize17 globvar_17;
        struct bytesize17 fun17(void);
        struct bytesize18 {
            unsigned char arr[18];
        };
        extern struct bytesize18 globvar_18;
        struct bytesize18 fun18(void);
        struct bytesize19 {
            unsigned char arr[19];
        };
        extern struct bytesize19 globvar_19;
        struct bytesize19 fun19(void);
        struct bytesize20 {
            unsigned char arr[20];
        };
        extern struct bytesize20 globvar_20;
        struct bytesize20 fun20(void);
        struct bytesize21 {
            unsigned char arr[21];
        };
        extern struct bytesize21 globvar_21;
        struct bytesize21 fun21(void);
        struct bytesize22 {
            unsigned char arr[22];
        };
        extern struct bytesize22 globvar_22;
        struct bytesize22 fun22(void);
        struct bytesize23 {
            unsigned char arr[23];
        };
        extern struct bytesize23 globvar_23;
        struct bytesize23 fun23(void);
        struct bytesize24 {
            unsigned char arr[24];
        };
        extern struct bytesize24 globvar_24;
        struct bytesize24 fun24(void);
        
        struct bytesize1 fun1(void) {
            return globvar_1;
        }
        struct bytesize2 fun2(void) {
            return globvar_2;
        }
        struct bytesize3 fun3(void) {
            return globvar_3;
        }
        struct bytesize4 fun4(void) {
            return globvar_4;
        }
        struct bytesize5 fun5(void) {
            return globvar_5;
        }
        struct bytesize6 fun6(void) {
            return globvar_6;
        }
        struct bytesize7 fun7(void) {
            return globvar_7;
        }
        struct bytesize8 fun8(void) {
            return globvar_8;
        }
        struct bytesize9 fun9(void) {
            return globvar_9;
        }
        struct bytesize10 fun10(void) {
            return globvar_10;
        }
        struct bytesize11 fun11(void) {
            return globvar_11;
        }
        struct bytesize12 fun12(void) {
            return globvar_12;
        }
        struct bytesize13 fun13(void) {
            return globvar_13;
        }
        struct bytesize14 fun14(void) {
            return globvar_14;
        }
        struct bytesize15 fun15(void) {
            return globvar_15;
        }
        struct bytesize16 fun16(void) {
            return globvar_16;
        }
        struct bytesize17 fun17(void) {
            return globvar_17;
        }
        struct bytesize18 fun18(void) {
            return globvar_18;
        }
        struct bytesize19 fun19(void) {
            return globvar_19;
        }
        struct bytesize20 fun20(void) {
            return globvar_20;
        }
        struct bytesize21 fun21(void) {
            return globvar_21;
        }
        struct bytesize22 fun22(void) {
            return globvar_22;
        }
        struct bytesize23 fun23(void) {
            return globvar_23;
        }
        struct bytesize24 fun24(void) {
            return globvar_24;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [bytesize1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_1
            │   ├── Type
            │   │   ╰── Struct [bytesize1]
            │   ╰── Extern
            ├── Function [fun1]
            ├── Struct [bytesize2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_2
            │   ├── Type
            │   │   ╰── Struct [bytesize2]
            │   ╰── Extern
            ├── Function [fun2]
            ├── Struct [bytesize3]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_3
            │   ├── Type
            │   │   ╰── Struct [bytesize3]
            │   ╰── Extern
            ├── Function [fun3]
            ├── Struct [bytesize4]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 4
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_4
            │   ├── Type
            │   │   ╰── Struct [bytesize4]
            │   ╰── Extern
            ├── Function [fun4]
            ├── Struct [bytesize5]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_5
            │   ├── Type
            │   │   ╰── Struct [bytesize5]
            │   ╰── Extern
            ├── Function [fun5]
            ├── Struct [bytesize6]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 6
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_6
            │   ├── Type
            │   │   ╰── Struct [bytesize6]
            │   ╰── Extern
            ├── Function [fun6]
            ├── Struct [bytesize7]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 7
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_7
            │   ├── Type
            │   │   ╰── Struct [bytesize7]
            │   ╰── Extern
            ├── Function [fun7]
            ├── Struct [bytesize8]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_8
            │   ├── Type
            │   │   ╰── Struct [bytesize8]
            │   ╰── Extern
            ├── Function [fun8]
            ├── Struct [bytesize9]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 9
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_9
            │   ├── Type
            │   │   ╰── Struct [bytesize9]
            │   ╰── Extern
            ├── Function [fun9]
            ├── Struct [bytesize10]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_10
            │   ├── Type
            │   │   ╰── Struct [bytesize10]
            │   ╰── Extern
            ├── Function [fun10]
            ├── Struct [bytesize11]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 11
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_11
            │   ├── Type
            │   │   ╰── Struct [bytesize11]
            │   ╰── Extern
            ├── Function [fun11]
            ├── Struct [bytesize12]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 12
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_12
            │   ├── Type
            │   │   ╰── Struct [bytesize12]
            │   ╰── Extern
            ├── Function [fun12]
            ├── Struct [bytesize13]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 13
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_13
            │   ├── Type
            │   │   ╰── Struct [bytesize13]
            │   ╰── Extern
            ├── Function [fun13]
            ├── Struct [bytesize14]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 14
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_14
            │   ├── Type
            │   │   ╰── Struct [bytesize14]
            │   ╰── Extern
            ├── Function [fun14]
            ├── Struct [bytesize15]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 15
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_15
            │   ├── Type
            │   │   ╰── Struct [bytesize15]
            │   ╰── Extern
            ├── Function [fun15]
            ├── Struct [bytesize16]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 16
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_16
            │   ├── Type
            │   │   ╰── Struct [bytesize16]
            │   ╰── Extern
            ├── Function [fun16]
            ├── Struct [bytesize17]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 17
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_17
            │   ├── Type
            │   │   ╰── Struct [bytesize17]
            │   ╰── Extern
            ├── Function [fun17]
            ├── Struct [bytesize18]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 18
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_18
            │   ├── Type
            │   │   ╰── Struct [bytesize18]
            │   ╰── Extern
            ├── Function [fun18]
            ├── Struct [bytesize19]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_19
            │   ├── Type
            │   │   ╰── Struct [bytesize19]
            │   ╰── Extern
            ├── Function [fun19]
            ├── Struct [bytesize20]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 20
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_20
            │   ├── Type
            │   │   ╰── Struct [bytesize20]
            │   ╰── Extern
            ├── Function [fun20]
            ├── Struct [bytesize21]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 21
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_21
            │   ├── Type
            │   │   ╰── Struct [bytesize21]
            │   ╰── Extern
            ├── Function [fun21]
            ├── Struct [bytesize22]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 22
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_22
            │   ├── Type
            │   │   ╰── Struct [bytesize22]
            │   ╰── Extern
            ├── Function [fun22]
            ├── Struct [bytesize23]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 23
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_23
            │   ├── Type
            │   │   ╰── Struct [bytesize23]
            │   ╰── Extern
            ├── Function [fun23]
            ├── Struct [bytesize24]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 24
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_24
            │   ├── Type
            │   │   ╰── Struct [bytesize24]
            │   ╰── Extern
            ├── Function [fun24]
            ├── Function [fun1]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <487> Var [globvar_1]
            ├── Function [fun2]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <497> Var [globvar_2]
            ├── Function [fun3]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <507> Var [globvar_3]
            ├── Function [fun4]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <517> Var [globvar_4]
            ├── Function [fun5]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <527> Var [globvar_5]
            ├── Function [fun6]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <537> Var [globvar_6]
            ├── Function [fun7]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <547> Var [globvar_7]
            ├── Function [fun8]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <557> Var [globvar_8]
            ├── Function [fun9]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <567> Var [globvar_9]
            ├── Function [fun10]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <577> Var [globvar_10]
            ├── Function [fun11]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <587> Var [globvar_11]
            ├── Function [fun12]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <597> Var [globvar_12]
            ├── Function [fun13]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <607> Var [globvar_13]
            ├── Function [fun14]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <617> Var [globvar_14]
            ├── Function [fun15]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <627> Var [globvar_15]
            ├── Function [fun16]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <637> Var [globvar_16]
            ├── Function [fun17]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <647> Var [globvar_17]
            ├── Function [fun18]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <657> Var [globvar_18]
            ├── Function [fun19]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <667> Var [globvar_19]
            ├── Function [fun20]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <677> Var [globvar_20]
            ├── Function [fun21]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <687> Var [globvar_21]
            ├── Function [fun22]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <697> Var [globvar_22]
            ├── Function [fun23]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <707> Var [globvar_23]
            ╰── Function [fun24]
                ╰── Body
                    ╰── Return
                        ╰── <717> Var [globvar_24]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_retval_struct_sizes_client() {
    let src = r#"
        
        struct bytesize1 {
            unsigned char arr[1];
        };
        extern struct bytesize1 globvar_1;
        struct bytesize1 fun1(void);
        struct bytesize2 {
            unsigned char arr[2];
        };
        extern struct bytesize2 globvar_2;
        struct bytesize2 fun2(void);
        struct bytesize3 {
            unsigned char arr[3];
        };
        extern struct bytesize3 globvar_3;
        struct bytesize3 fun3(void);
        struct bytesize4 {
            unsigned char arr[4];
        };
        extern struct bytesize4 globvar_4;
        struct bytesize4 fun4(void);
        struct bytesize5 {
            unsigned char arr[5];
        };
        extern struct bytesize5 globvar_5;
        struct bytesize5 fun5(void);
        struct bytesize6 {
            unsigned char arr[6];
        };
        extern struct bytesize6 globvar_6;
        struct bytesize6 fun6(void);
        struct bytesize7 {
            unsigned char arr[7];
        };
        extern struct bytesize7 globvar_7;
        struct bytesize7 fun7(void);
        struct bytesize8 {
            unsigned char arr[8];
        };
        extern struct bytesize8 globvar_8;
        struct bytesize8 fun8(void);
        struct bytesize9 {
            unsigned char arr[9];
        };
        extern struct bytesize9 globvar_9;
        struct bytesize9 fun9(void);
        struct bytesize10 {
            unsigned char arr[10];
        };
        extern struct bytesize10 globvar_10;
        struct bytesize10 fun10(void);
        struct bytesize11 {
            unsigned char arr[11];
        };
        extern struct bytesize11 globvar_11;
        struct bytesize11 fun11(void);
        struct bytesize12 {
            unsigned char arr[12];
        };
        extern struct bytesize12 globvar_12;
        struct bytesize12 fun12(void);
        struct bytesize13 {
            unsigned char arr[13];
        };
        extern struct bytesize13 globvar_13;
        struct bytesize13 fun13(void);
        struct bytesize14 {
            unsigned char arr[14];
        };
        extern struct bytesize14 globvar_14;
        struct bytesize14 fun14(void);
        struct bytesize15 {
            unsigned char arr[15];
        };
        extern struct bytesize15 globvar_15;
        struct bytesize15 fun15(void);
        struct bytesize16 {
            unsigned char arr[16];
        };
        extern struct bytesize16 globvar_16;
        struct bytesize16 fun16(void);
        struct bytesize17 {
            unsigned char arr[17];
        };
        extern struct bytesize17 globvar_17;
        struct bytesize17 fun17(void);
        struct bytesize18 {
            unsigned char arr[18];
        };
        extern struct bytesize18 globvar_18;
        struct bytesize18 fun18(void);
        struct bytesize19 {
            unsigned char arr[19];
        };
        extern struct bytesize19 globvar_19;
        struct bytesize19 fun19(void);
        struct bytesize20 {
            unsigned char arr[20];
        };
        extern struct bytesize20 globvar_20;
        struct bytesize20 fun20(void);
        struct bytesize21 {
            unsigned char arr[21];
        };
        extern struct bytesize21 globvar_21;
        struct bytesize21 fun21(void);
        struct bytesize22 {
            unsigned char arr[22];
        };
        extern struct bytesize22 globvar_22;
        struct bytesize22 fun22(void);
        struct bytesize23 {
            unsigned char arr[23];
        };
        extern struct bytesize23 globvar_23;
        struct bytesize23 fun23(void);
        struct bytesize24 {
            unsigned char arr[24];
        };
        extern struct bytesize24 globvar_24;
        struct bytesize24 fun24(void);
        int memcmp(void *s1, void *s2, unsigned long n);
        int main(void) {
            struct bytesize1 s1 = fun1();
            if (memcmp(&s1, &globvar_1, sizeof s1)) {
                return 1;
            }
            struct bytesize2 s2 = fun2();
            if (memcmp(&s2, &globvar_2, sizeof s2)) {
                return 2;
            }
            struct bytesize3 s3 = fun3();
            if (memcmp(&s3, &globvar_3, sizeof s3)) {
                return 3;
            }
            struct bytesize4 s4 = fun4();
            if (memcmp(&s4, &globvar_4, sizeof s4)) {
                return 4;
            }
            struct bytesize5 s5 = fun5();
            if (memcmp(&s5, &globvar_5, sizeof s5)) {
                return 5;
            }
            struct bytesize6 s6 = fun6();
            if (memcmp(&s6, &globvar_6, sizeof s6)) {
                return 6;
            }
            struct bytesize7 s7 = fun7();
            if (memcmp(&s7, &globvar_7, sizeof s7)) {
                return 7;
            }
            struct bytesize8 s8 = fun8();
            if (memcmp(&s8, &globvar_8, sizeof s8)) {
                return 8;
            }
            struct bytesize9 s9 = fun9();
            if (memcmp(&s9, &globvar_9, sizeof s9)) {
                return 9;
            }
            struct bytesize10 s10 = fun10();
            if (memcmp(&s10, &globvar_10, sizeof s10)) {
                return 10;
            }
            struct bytesize11 s11 = fun11();
            if (memcmp(&s11, &globvar_11, sizeof s11)) {
                return 11;
            }
            struct bytesize12 s12 = fun12();
            if (memcmp(&s12, &globvar_12, sizeof s12)) {
                return 12;
            }
            struct bytesize13 s13 = fun13();
            if (memcmp(&s13, &globvar_13, sizeof s13)) {
                return 13;
            }
            struct bytesize14 s14 = fun14();
            if (memcmp(&s14, &globvar_14, sizeof s14)) {
                return 14;
            }
            struct bytesize15 s15 = fun15();
            if (memcmp(&s15, &globvar_15, sizeof s15)) {
                return 15;
            }
            struct bytesize16 s16 = fun16();
            if (memcmp(&s16, &globvar_16, sizeof s16)) {
                return 16;
            }
            struct bytesize17 s17 = fun17();
            if (memcmp(&s17, &globvar_17, sizeof s17)) {
                return 17;
            }
            struct bytesize18 s18 = fun18();
            if (memcmp(&s18, &globvar_18, sizeof s18)) {
                return 18;
            }
            struct bytesize19 s19 = fun19();
            if (memcmp(&s19, &globvar_19, sizeof s19)) {
                return 19;
            }
            struct bytesize20 s20 = fun20();
            if (memcmp(&s20, &globvar_20, sizeof s20)) {
                return 20;
            }
            struct bytesize21 s21 = fun21();
            if (memcmp(&s21, &globvar_21, sizeof s21)) {
                return 21;
            }
            struct bytesize22 s22 = fun22();
            if (memcmp(&s22, &globvar_22, sizeof s22)) {
                return 22;
            }
            struct bytesize23 s23 = fun23();
            if (memcmp(&s23, &globvar_23, sizeof s23)) {
                return 23;
            }
            struct bytesize24 s24 = fun24();
            if (memcmp(&s24, &globvar_24, sizeof s24)) {
                return 24;
            }
            return 0;
        }
        struct bytesize1 globvar_1 = {{0}};
        struct bytesize2 globvar_2 = {{1, 2}};
        struct bytesize3 globvar_3 = {{3, 4, 5}};
        struct bytesize4 globvar_4 = {{6, 7, 8, 9}};
        struct bytesize5 globvar_5 = {{10, 11, 12, 13, 14}};
        struct bytesize6 globvar_6 = {{15, 16, 17, 18, 19, 20}};
        struct bytesize7 globvar_7 = {{21, 22, 23, 24, 25, 26, 27}};
        struct bytesize8 globvar_8 = {{28, 29, 30, 31, 32, 33, 34, 35}};
        struct bytesize9 globvar_9 = {{36, 37, 38, 39, 40, 41, 42, 43, 44}};
        struct bytesize10 globvar_10 = {{45, 46, 47, 48, 49, 50, 51, 52, 53, 54}};
        struct bytesize11 globvar_11 = {{55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65}};
        struct bytesize12 globvar_12 = {
            {66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77}};
        struct bytesize13 globvar_13 = {
            {78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}};
        struct bytesize14 globvar_14 = {
            {91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104}};
        struct bytesize15 globvar_15 = {{105, 106, 107, 108, 109, 110, 111, 112, 113,
                                         114, 115, 116, 117, 118, 119}};
        struct bytesize16 globvar_16 = {{120, 121, 122, 123, 124, 125, 126, 127, 128,
                                         129, 130, 131, 132, 133, 134, 135}};
        struct bytesize17 globvar_17 = {{136, 137, 138, 139, 140, 141, 142, 143, 144,
                                         145, 146, 147, 148, 149, 150, 151, 152}};
        struct bytesize18 globvar_18 = {{153, 154, 155, 156, 157, 158, 159, 160, 161,
                                         162, 163, 164, 165, 166, 167, 168, 169, 170}};
        struct bytesize19 globvar_19 = {{171, 172, 173, 174, 175, 176, 177, 178, 179,
                                         180, 181, 182, 183, 184, 185, 186, 187, 188,
                                         189}};
        struct bytesize20 globvar_20 = {{190, 191, 192, 193, 194, 195, 196,
                                         197, 198, 199, 200, 201, 202, 203,
                                         204, 205, 206, 207, 208, 209}};
        struct bytesize21 globvar_21 = {{210, 211, 212, 213, 214, 215, 216,
                                         217, 218, 219, 220, 221, 222, 223,
                                         224, 225, 226, 227, 228, 229, 230}};
        struct bytesize22 globvar_22 = {{231, 232, 233, 234, 235, 236, 237, 238,
                                         239, 240, 241, 242, 243, 244, 245, 246,
                                         247, 248, 249, 250, 251, 252}};
        struct bytesize23 globvar_23 = {{253, 254, 255, 0, 1, 2, 3, 4,
                                         5, 6, 7, 8, 9, 10, 11, 12,
                                         13, 14, 15, 16, 17, 18, 19}};
        struct bytesize24 globvar_24 = {{20, 21, 22, 23, 24, 25, 26, 27,
                                         28, 29, 30, 31, 32, 33, 34, 35,
                                         36, 37, 38, 39, 40, 41, 42, 43}};
    "#;
    let expected = r#"
        Program
            ├── Struct [bytesize1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_1
            │   ├── Type
            │   │   ╰── Struct [bytesize1]
            │   ╰── Extern
            ├── Function [fun1]
            ├── Struct [bytesize2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_2
            │   ├── Type
            │   │   ╰── Struct [bytesize2]
            │   ╰── Extern
            ├── Function [fun2]
            ├── Struct [bytesize3]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_3
            │   ├── Type
            │   │   ╰── Struct [bytesize3]
            │   ╰── Extern
            ├── Function [fun3]
            ├── Struct [bytesize4]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 4
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_4
            │   ├── Type
            │   │   ╰── Struct [bytesize4]
            │   ╰── Extern
            ├── Function [fun4]
            ├── Struct [bytesize5]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_5
            │   ├── Type
            │   │   ╰── Struct [bytesize5]
            │   ╰── Extern
            ├── Function [fun5]
            ├── Struct [bytesize6]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 6
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_6
            │   ├── Type
            │   │   ╰── Struct [bytesize6]
            │   ╰── Extern
            ├── Function [fun6]
            ├── Struct [bytesize7]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 7
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_7
            │   ├── Type
            │   │   ╰── Struct [bytesize7]
            │   ╰── Extern
            ├── Function [fun7]
            ├── Struct [bytesize8]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_8
            │   ├── Type
            │   │   ╰── Struct [bytesize8]
            │   ╰── Extern
            ├── Function [fun8]
            ├── Struct [bytesize9]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 9
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_9
            │   ├── Type
            │   │   ╰── Struct [bytesize9]
            │   ╰── Extern
            ├── Function [fun9]
            ├── Struct [bytesize10]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_10
            │   ├── Type
            │   │   ╰── Struct [bytesize10]
            │   ╰── Extern
            ├── Function [fun10]
            ├── Struct [bytesize11]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 11
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_11
            │   ├── Type
            │   │   ╰── Struct [bytesize11]
            │   ╰── Extern
            ├── Function [fun11]
            ├── Struct [bytesize12]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 12
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_12
            │   ├── Type
            │   │   ╰── Struct [bytesize12]
            │   ╰── Extern
            ├── Function [fun12]
            ├── Struct [bytesize13]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 13
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_13
            │   ├── Type
            │   │   ╰── Struct [bytesize13]
            │   ╰── Extern
            ├── Function [fun13]
            ├── Struct [bytesize14]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 14
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_14
            │   ├── Type
            │   │   ╰── Struct [bytesize14]
            │   ╰── Extern
            ├── Function [fun14]
            ├── Struct [bytesize15]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 15
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_15
            │   ├── Type
            │   │   ╰── Struct [bytesize15]
            │   ╰── Extern
            ├── Function [fun15]
            ├── Struct [bytesize16]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 16
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_16
            │   ├── Type
            │   │   ╰── Struct [bytesize16]
            │   ╰── Extern
            ├── Function [fun16]
            ├── Struct [bytesize17]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 17
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_17
            │   ├── Type
            │   │   ╰── Struct [bytesize17]
            │   ╰── Extern
            ├── Function [fun17]
            ├── Struct [bytesize18]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 18
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_18
            │   ├── Type
            │   │   ╰── Struct [bytesize18]
            │   ╰── Extern
            ├── Function [fun18]
            ├── Struct [bytesize19]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_19
            │   ├── Type
            │   │   ╰── Struct [bytesize19]
            │   ╰── Extern
            ├── Function [fun19]
            ├── Struct [bytesize20]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 20
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_20
            │   ├── Type
            │   │   ╰── Struct [bytesize20]
            │   ╰── Extern
            ├── Function [fun20]
            ├── Struct [bytesize21]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 21
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_21
            │   ├── Type
            │   │   ╰── Struct [bytesize21]
            │   ╰── Extern
            ├── Function [fun21]
            ├── Struct [bytesize22]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 22
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_22
            │   ├── Type
            │   │   ╰── Struct [bytesize22]
            │   ╰── Extern
            ├── Function [fun22]
            ├── Struct [bytesize23]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 23
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_23
            │   ├── Type
            │   │   ╰── Struct [bytesize23]
            │   ╰── Extern
            ├── Function [fun23]
            ├── Struct [bytesize24]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 24
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_24
            │   ├── Type
            │   │   ╰── Struct [bytesize24]
            │   ╰── Extern
            ├── Function [fun24]
            ├── Function [memcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Void
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Void
            │       ╰── Param
            │           ├── Name
            │           │   ╰── n
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize1]
            │       │   ╰── Initializer
            │       │       ╰── <506> FunctionCall [fun1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <519> FunctionCall [memcmp]
            │       │   │       ├── <512> AddressOf
            │       │   │       │   ╰── <511> Var [s1]
            │       │   │       ├── <515> AddressOf
            │       │   │       │   ╰── <514> Var [globvar_1]
            │       │   │       ╰── <518> SizeOfExpr
            │       │   │           ╰── <517> Var [s1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <520> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize2]
            │       │   ╰── Initializer
            │       │       ╰── <530> FunctionCall [fun2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <543> FunctionCall [memcmp]
            │       │   │       ├── <536> AddressOf
            │       │   │       │   ╰── <535> Var [s2]
            │       │   │       ├── <539> AddressOf
            │       │   │       │   ╰── <538> Var [globvar_2]
            │       │   │       ╰── <542> SizeOfExpr
            │       │   │           ╰── <541> Var [s2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <544> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s3
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize3]
            │       │   ╰── Initializer
            │       │       ╰── <554> FunctionCall [fun3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <567> FunctionCall [memcmp]
            │       │   │       ├── <560> AddressOf
            │       │   │       │   ╰── <559> Var [s3]
            │       │   │       ├── <563> AddressOf
            │       │   │       │   ╰── <562> Var [globvar_3]
            │       │   │       ╰── <566> SizeOfExpr
            │       │   │           ╰── <565> Var [s3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <568> Constant Int [3]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s4
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize4]
            │       │   ╰── Initializer
            │       │       ╰── <578> FunctionCall [fun4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <591> FunctionCall [memcmp]
            │       │   │       ├── <584> AddressOf
            │       │   │       │   ╰── <583> Var [s4]
            │       │   │       ├── <587> AddressOf
            │       │   │       │   ╰── <586> Var [globvar_4]
            │       │   │       ╰── <590> SizeOfExpr
            │       │   │           ╰── <589> Var [s4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <592> Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s5
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize5]
            │       │   ╰── Initializer
            │       │       ╰── <602> FunctionCall [fun5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <615> FunctionCall [memcmp]
            │       │   │       ├── <608> AddressOf
            │       │   │       │   ╰── <607> Var [s5]
            │       │   │       ├── <611> AddressOf
            │       │   │       │   ╰── <610> Var [globvar_5]
            │       │   │       ╰── <614> SizeOfExpr
            │       │   │           ╰── <613> Var [s5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <616> Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s6
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize6]
            │       │   ╰── Initializer
            │       │       ╰── <626> FunctionCall [fun6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <639> FunctionCall [memcmp]
            │       │   │       ├── <632> AddressOf
            │       │   │       │   ╰── <631> Var [s6]
            │       │   │       ├── <635> AddressOf
            │       │   │       │   ╰── <634> Var [globvar_6]
            │       │   │       ╰── <638> SizeOfExpr
            │       │   │           ╰── <637> Var [s6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <640> Constant Int [6]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s7
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize7]
            │       │   ╰── Initializer
            │       │       ╰── <650> FunctionCall [fun7]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <663> FunctionCall [memcmp]
            │       │   │       ├── <656> AddressOf
            │       │   │       │   ╰── <655> Var [s7]
            │       │   │       ├── <659> AddressOf
            │       │   │       │   ╰── <658> Var [globvar_7]
            │       │   │       ╰── <662> SizeOfExpr
            │       │   │           ╰── <661> Var [s7]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <664> Constant Int [7]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s8
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize8]
            │       │   ╰── Initializer
            │       │       ╰── <674> FunctionCall [fun8]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <687> FunctionCall [memcmp]
            │       │   │       ├── <680> AddressOf
            │       │   │       │   ╰── <679> Var [s8]
            │       │   │       ├── <683> AddressOf
            │       │   │       │   ╰── <682> Var [globvar_8]
            │       │   │       ╰── <686> SizeOfExpr
            │       │   │           ╰── <685> Var [s8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <688> Constant Int [8]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s9
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize9]
            │       │   ╰── Initializer
            │       │       ╰── <698> FunctionCall [fun9]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <711> FunctionCall [memcmp]
            │       │   │       ├── <704> AddressOf
            │       │   │       │   ╰── <703> Var [s9]
            │       │   │       ├── <707> AddressOf
            │       │   │       │   ╰── <706> Var [globvar_9]
            │       │   │       ╰── <710> SizeOfExpr
            │       │   │           ╰── <709> Var [s9]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <712> Constant Int [9]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s10
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize10]
            │       │   ╰── Initializer
            │       │       ╰── <722> FunctionCall [fun10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <735> FunctionCall [memcmp]
            │       │   │       ├── <728> AddressOf
            │       │   │       │   ╰── <727> Var [s10]
            │       │   │       ├── <731> AddressOf
            │       │   │       │   ╰── <730> Var [globvar_10]
            │       │   │       ╰── <734> SizeOfExpr
            │       │   │           ╰── <733> Var [s10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <736> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s11
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize11]
            │       │   ╰── Initializer
            │       │       ╰── <746> FunctionCall [fun11]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <759> FunctionCall [memcmp]
            │       │   │       ├── <752> AddressOf
            │       │   │       │   ╰── <751> Var [s11]
            │       │   │       ├── <755> AddressOf
            │       │   │       │   ╰── <754> Var [globvar_11]
            │       │   │       ╰── <758> SizeOfExpr
            │       │   │           ╰── <757> Var [s11]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <760> Constant Int [11]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s12
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize12]
            │       │   ╰── Initializer
            │       │       ╰── <770> FunctionCall [fun12]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <783> FunctionCall [memcmp]
            │       │   │       ├── <776> AddressOf
            │       │   │       │   ╰── <775> Var [s12]
            │       │   │       ├── <779> AddressOf
            │       │   │       │   ╰── <778> Var [globvar_12]
            │       │   │       ╰── <782> SizeOfExpr
            │       │   │           ╰── <781> Var [s12]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <784> Constant Int [12]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s13
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize13]
            │       │   ╰── Initializer
            │       │       ╰── <794> FunctionCall [fun13]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <807> FunctionCall [memcmp]
            │       │   │       ├── <800> AddressOf
            │       │   │       │   ╰── <799> Var [s13]
            │       │   │       ├── <803> AddressOf
            │       │   │       │   ╰── <802> Var [globvar_13]
            │       │   │       ╰── <806> SizeOfExpr
            │       │   │           ╰── <805> Var [s13]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <808> Constant Int [13]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s14
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize14]
            │       │   ╰── Initializer
            │       │       ╰── <818> FunctionCall [fun14]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <831> FunctionCall [memcmp]
            │       │   │       ├── <824> AddressOf
            │       │   │       │   ╰── <823> Var [s14]
            │       │   │       ├── <827> AddressOf
            │       │   │       │   ╰── <826> Var [globvar_14]
            │       │   │       ╰── <830> SizeOfExpr
            │       │   │           ╰── <829> Var [s14]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <832> Constant Int [14]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s15
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize15]
            │       │   ╰── Initializer
            │       │       ╰── <842> FunctionCall [fun15]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <855> FunctionCall [memcmp]
            │       │   │       ├── <848> AddressOf
            │       │   │       │   ╰── <847> Var [s15]
            │       │   │       ├── <851> AddressOf
            │       │   │       │   ╰── <850> Var [globvar_15]
            │       │   │       ╰── <854> SizeOfExpr
            │       │   │           ╰── <853> Var [s15]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <856> Constant Int [15]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s16
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize16]
            │       │   ╰── Initializer
            │       │       ╰── <866> FunctionCall [fun16]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <879> FunctionCall [memcmp]
            │       │   │       ├── <872> AddressOf
            │       │   │       │   ╰── <871> Var [s16]
            │       │   │       ├── <875> AddressOf
            │       │   │       │   ╰── <874> Var [globvar_16]
            │       │   │       ╰── <878> SizeOfExpr
            │       │   │           ╰── <877> Var [s16]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <880> Constant Int [16]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s17
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize17]
            │       │   ╰── Initializer
            │       │       ╰── <890> FunctionCall [fun17]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <903> FunctionCall [memcmp]
            │       │   │       ├── <896> AddressOf
            │       │   │       │   ╰── <895> Var [s17]
            │       │   │       ├── <899> AddressOf
            │       │   │       │   ╰── <898> Var [globvar_17]
            │       │   │       ╰── <902> SizeOfExpr
            │       │   │           ╰── <901> Var [s17]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <904> Constant Int [17]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s18
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize18]
            │       │   ╰── Initializer
            │       │       ╰── <914> FunctionCall [fun18]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <927> FunctionCall [memcmp]
            │       │   │       ├── <920> AddressOf
            │       │   │       │   ╰── <919> Var [s18]
            │       │   │       ├── <923> AddressOf
            │       │   │       │   ╰── <922> Var [globvar_18]
            │       │   │       ╰── <926> SizeOfExpr
            │       │   │           ╰── <925> Var [s18]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <928> Constant Int [18]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s19
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize19]
            │       │   ╰── Initializer
            │       │       ╰── <938> FunctionCall [fun19]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <951> FunctionCall [memcmp]
            │       │   │       ├── <944> AddressOf
            │       │   │       │   ╰── <943> Var [s19]
            │       │   │       ├── <947> AddressOf
            │       │   │       │   ╰── <946> Var [globvar_19]
            │       │   │       ╰── <950> SizeOfExpr
            │       │   │           ╰── <949> Var [s19]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <952> Constant Int [19]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s20
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize20]
            │       │   ╰── Initializer
            │       │       ╰── <962> FunctionCall [fun20]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <975> FunctionCall [memcmp]
            │       │   │       ├── <968> AddressOf
            │       │   │       │   ╰── <967> Var [s20]
            │       │   │       ├── <971> AddressOf
            │       │   │       │   ╰── <970> Var [globvar_20]
            │       │   │       ╰── <974> SizeOfExpr
            │       │   │           ╰── <973> Var [s20]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <976> Constant Int [20]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s21
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize21]
            │       │   ╰── Initializer
            │       │       ╰── <986> FunctionCall [fun21]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <999> FunctionCall [memcmp]
            │       │   │       ├── <992> AddressOf
            │       │   │       │   ╰── <991> Var [s21]
            │       │   │       ├── <995> AddressOf
            │       │   │       │   ╰── <994> Var [globvar_21]
            │       │   │       ╰── <998> SizeOfExpr
            │       │   │           ╰── <997> Var [s21]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1000> Constant Int [21]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s22
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize22]
            │       │   ╰── Initializer
            │       │       ╰── <1010> FunctionCall [fun22]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1023> FunctionCall [memcmp]
            │       │   │       ├── <1016> AddressOf
            │       │   │       │   ╰── <1015> Var [s22]
            │       │   │       ├── <1019> AddressOf
            │       │   │       │   ╰── <1018> Var [globvar_22]
            │       │   │       ╰── <1022> SizeOfExpr
            │       │   │           ╰── <1021> Var [s22]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1024> Constant Int [22]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s23
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize23]
            │       │   ╰── Initializer
            │       │       ╰── <1034> FunctionCall [fun23]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1047> FunctionCall [memcmp]
            │       │   │       ├── <1040> AddressOf
            │       │   │       │   ╰── <1039> Var [s23]
            │       │   │       ├── <1043> AddressOf
            │       │   │       │   ╰── <1042> Var [globvar_23]
            │       │   │       ╰── <1046> SizeOfExpr
            │       │   │           ╰── <1045> Var [s23]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1048> Constant Int [23]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s24
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize24]
            │       │   ╰── Initializer
            │       │       ╰── <1058> FunctionCall [fun24]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1071> FunctionCall [memcmp]
            │       │   │       ├── <1064> AddressOf
            │       │   │       │   ╰── <1063> Var [s24]
            │       │   │       ├── <1067> AddressOf
            │       │   │       │   ╰── <1066> Var [globvar_24]
            │       │   │       ╰── <1070> SizeOfExpr
            │       │   │           ╰── <1069> Var [s24]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1072> Constant Int [24]
            │       ╰── Return
            │           ╰── <1077> Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_1
            │   ├── Type
            │   │   ╰── Struct [bytesize1]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ╰── <1085> Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_2
            │   ├── Type
            │   │   ╰── Struct [bytesize2]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1094> Constant Int [1]
            │               ╰── <1096> Constant Int [2]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_3
            │   ├── Type
            │   │   ╰── Struct [bytesize3]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1105> Constant Int [3]
            │               ├── <1107> Constant Int [4]
            │               ╰── <1109> Constant Int [5]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_4
            │   ├── Type
            │   │   ╰── Struct [bytesize4]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1118> Constant Int [6]
            │               ├── <1120> Constant Int [7]
            │               ├── <1122> Constant Int [8]
            │               ╰── <1124> Constant Int [9]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_5
            │   ├── Type
            │   │   ╰── Struct [bytesize5]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1133> Constant Int [10]
            │               ├── <1135> Constant Int [11]
            │               ├── <1137> Constant Int [12]
            │               ├── <1139> Constant Int [13]
            │               ╰── <1141> Constant Int [14]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_6
            │   ├── Type
            │   │   ╰── Struct [bytesize6]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1150> Constant Int [15]
            │               ├── <1152> Constant Int [16]
            │               ├── <1154> Constant Int [17]
            │               ├── <1156> Constant Int [18]
            │               ├── <1158> Constant Int [19]
            │               ╰── <1160> Constant Int [20]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_7
            │   ├── Type
            │   │   ╰── Struct [bytesize7]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1169> Constant Int [21]
            │               ├── <1171> Constant Int [22]
            │               ├── <1173> Constant Int [23]
            │               ├── <1175> Constant Int [24]
            │               ├── <1177> Constant Int [25]
            │               ├── <1179> Constant Int [26]
            │               ╰── <1181> Constant Int [27]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_8
            │   ├── Type
            │   │   ╰── Struct [bytesize8]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1190> Constant Int [28]
            │               ├── <1192> Constant Int [29]
            │               ├── <1194> Constant Int [30]
            │               ├── <1196> Constant Int [31]
            │               ├── <1198> Constant Int [32]
            │               ├── <1200> Constant Int [33]
            │               ├── <1202> Constant Int [34]
            │               ╰── <1204> Constant Int [35]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_9
            │   ├── Type
            │   │   ╰── Struct [bytesize9]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1213> Constant Int [36]
            │               ├── <1215> Constant Int [37]
            │               ├── <1217> Constant Int [38]
            │               ├── <1219> Constant Int [39]
            │               ├── <1221> Constant Int [40]
            │               ├── <1223> Constant Int [41]
            │               ├── <1225> Constant Int [42]
            │               ├── <1227> Constant Int [43]
            │               ╰── <1229> Constant Int [44]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_10
            │   ├── Type
            │   │   ╰── Struct [bytesize10]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1238> Constant Int [45]
            │               ├── <1240> Constant Int [46]
            │               ├── <1242> Constant Int [47]
            │               ├── <1244> Constant Int [48]
            │               ├── <1246> Constant Int [49]
            │               ├── <1248> Constant Int [50]
            │               ├── <1250> Constant Int [51]
            │               ├── <1252> Constant Int [52]
            │               ├── <1254> Constant Int [53]
            │               ╰── <1256> Constant Int [54]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_11
            │   ├── Type
            │   │   ╰── Struct [bytesize11]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1265> Constant Int [55]
            │               ├── <1267> Constant Int [56]
            │               ├── <1269> Constant Int [57]
            │               ├── <1271> Constant Int [58]
            │               ├── <1273> Constant Int [59]
            │               ├── <1275> Constant Int [60]
            │               ├── <1277> Constant Int [61]
            │               ├── <1279> Constant Int [62]
            │               ├── <1281> Constant Int [63]
            │               ├── <1283> Constant Int [64]
            │               ╰── <1285> Constant Int [65]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_12
            │   ├── Type
            │   │   ╰── Struct [bytesize12]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1294> Constant Int [66]
            │               ├── <1296> Constant Int [67]
            │               ├── <1298> Constant Int [68]
            │               ├── <1300> Constant Int [69]
            │               ├── <1302> Constant Int [70]
            │               ├── <1304> Constant Int [71]
            │               ├── <1306> Constant Int [72]
            │               ├── <1308> Constant Int [73]
            │               ├── <1310> Constant Int [74]
            │               ├── <1312> Constant Int [75]
            │               ├── <1314> Constant Int [76]
            │               ╰── <1316> Constant Int [77]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_13
            │   ├── Type
            │   │   ╰── Struct [bytesize13]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1325> Constant Int [78]
            │               ├── <1327> Constant Int [79]
            │               ├── <1329> Constant Int [80]
            │               ├── <1331> Constant Int [81]
            │               ├── <1333> Constant Int [82]
            │               ├── <1335> Constant Int [83]
            │               ├── <1337> Constant Int [84]
            │               ├── <1339> Constant Int [85]
            │               ├── <1341> Constant Int [86]
            │               ├── <1343> Constant Int [87]
            │               ├── <1345> Constant Int [88]
            │               ├── <1347> Constant Int [89]
            │               ╰── <1349> Constant Int [90]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_14
            │   ├── Type
            │   │   ╰── Struct [bytesize14]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1358> Constant Int [91]
            │               ├── <1360> Constant Int [92]
            │               ├── <1362> Constant Int [93]
            │               ├── <1364> Constant Int [94]
            │               ├── <1366> Constant Int [95]
            │               ├── <1368> Constant Int [96]
            │               ├── <1370> Constant Int [97]
            │               ├── <1372> Constant Int [98]
            │               ├── <1374> Constant Int [99]
            │               ├── <1376> Constant Int [100]
            │               ├── <1378> Constant Int [101]
            │               ├── <1380> Constant Int [102]
            │               ├── <1382> Constant Int [103]
            │               ╰── <1384> Constant Int [104]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_15
            │   ├── Type
            │   │   ╰── Struct [bytesize15]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1393> Constant Int [105]
            │               ├── <1395> Constant Int [106]
            │               ├── <1397> Constant Int [107]
            │               ├── <1399> Constant Int [108]
            │               ├── <1401> Constant Int [109]
            │               ├── <1403> Constant Int [110]
            │               ├── <1405> Constant Int [111]
            │               ├── <1407> Constant Int [112]
            │               ├── <1409> Constant Int [113]
            │               ├── <1411> Constant Int [114]
            │               ├── <1413> Constant Int [115]
            │               ├── <1415> Constant Int [116]
            │               ├── <1417> Constant Int [117]
            │               ├── <1419> Constant Int [118]
            │               ╰── <1421> Constant Int [119]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_16
            │   ├── Type
            │   │   ╰── Struct [bytesize16]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1430> Constant Int [120]
            │               ├── <1432> Constant Int [121]
            │               ├── <1434> Constant Int [122]
            │               ├── <1436> Constant Int [123]
            │               ├── <1438> Constant Int [124]
            │               ├── <1440> Constant Int [125]
            │               ├── <1442> Constant Int [126]
            │               ├── <1444> Constant Int [127]
            │               ├── <1446> Constant Int [128]
            │               ├── <1448> Constant Int [129]
            │               ├── <1450> Constant Int [130]
            │               ├── <1452> Constant Int [131]
            │               ├── <1454> Constant Int [132]
            │               ├── <1456> Constant Int [133]
            │               ├── <1458> Constant Int [134]
            │               ╰── <1460> Constant Int [135]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_17
            │   ├── Type
            │   │   ╰── Struct [bytesize17]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1469> Constant Int [136]
            │               ├── <1471> Constant Int [137]
            │               ├── <1473> Constant Int [138]
            │               ├── <1475> Constant Int [139]
            │               ├── <1477> Constant Int [140]
            │               ├── <1479> Constant Int [141]
            │               ├── <1481> Constant Int [142]
            │               ├── <1483> Constant Int [143]
            │               ├── <1485> Constant Int [144]
            │               ├── <1487> Constant Int [145]
            │               ├── <1489> Constant Int [146]
            │               ├── <1491> Constant Int [147]
            │               ├── <1493> Constant Int [148]
            │               ├── <1495> Constant Int [149]
            │               ├── <1497> Constant Int [150]
            │               ├── <1499> Constant Int [151]
            │               ╰── <1501> Constant Int [152]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_18
            │   ├── Type
            │   │   ╰── Struct [bytesize18]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1510> Constant Int [153]
            │               ├── <1512> Constant Int [154]
            │               ├── <1514> Constant Int [155]
            │               ├── <1516> Constant Int [156]
            │               ├── <1518> Constant Int [157]
            │               ├── <1520> Constant Int [158]
            │               ├── <1522> Constant Int [159]
            │               ├── <1524> Constant Int [160]
            │               ├── <1526> Constant Int [161]
            │               ├── <1528> Constant Int [162]
            │               ├── <1530> Constant Int [163]
            │               ├── <1532> Constant Int [164]
            │               ├── <1534> Constant Int [165]
            │               ├── <1536> Constant Int [166]
            │               ├── <1538> Constant Int [167]
            │               ├── <1540> Constant Int [168]
            │               ├── <1542> Constant Int [169]
            │               ╰── <1544> Constant Int [170]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_19
            │   ├── Type
            │   │   ╰── Struct [bytesize19]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1553> Constant Int [171]
            │               ├── <1555> Constant Int [172]
            │               ├── <1557> Constant Int [173]
            │               ├── <1559> Constant Int [174]
            │               ├── <1561> Constant Int [175]
            │               ├── <1563> Constant Int [176]
            │               ├── <1565> Constant Int [177]
            │               ├── <1567> Constant Int [178]
            │               ├── <1569> Constant Int [179]
            │               ├── <1571> Constant Int [180]
            │               ├── <1573> Constant Int [181]
            │               ├── <1575> Constant Int [182]
            │               ├── <1577> Constant Int [183]
            │               ├── <1579> Constant Int [184]
            │               ├── <1581> Constant Int [185]
            │               ├── <1583> Constant Int [186]
            │               ├── <1585> Constant Int [187]
            │               ├── <1587> Constant Int [188]
            │               ╰── <1589> Constant Int [189]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_20
            │   ├── Type
            │   │   ╰── Struct [bytesize20]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1598> Constant Int [190]
            │               ├── <1600> Constant Int [191]
            │               ├── <1602> Constant Int [192]
            │               ├── <1604> Constant Int [193]
            │               ├── <1606> Constant Int [194]
            │               ├── <1608> Constant Int [195]
            │               ├── <1610> Constant Int [196]
            │               ├── <1612> Constant Int [197]
            │               ├── <1614> Constant Int [198]
            │               ├── <1616> Constant Int [199]
            │               ├── <1618> Constant Int [200]
            │               ├── <1620> Constant Int [201]
            │               ├── <1622> Constant Int [202]
            │               ├── <1624> Constant Int [203]
            │               ├── <1626> Constant Int [204]
            │               ├── <1628> Constant Int [205]
            │               ├── <1630> Constant Int [206]
            │               ├── <1632> Constant Int [207]
            │               ├── <1634> Constant Int [208]
            │               ╰── <1636> Constant Int [209]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_21
            │   ├── Type
            │   │   ╰── Struct [bytesize21]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1645> Constant Int [210]
            │               ├── <1647> Constant Int [211]
            │               ├── <1649> Constant Int [212]
            │               ├── <1651> Constant Int [213]
            │               ├── <1653> Constant Int [214]
            │               ├── <1655> Constant Int [215]
            │               ├── <1657> Constant Int [216]
            │               ├── <1659> Constant Int [217]
            │               ├── <1661> Constant Int [218]
            │               ├── <1663> Constant Int [219]
            │               ├── <1665> Constant Int [220]
            │               ├── <1667> Constant Int [221]
            │               ├── <1669> Constant Int [222]
            │               ├── <1671> Constant Int [223]
            │               ├── <1673> Constant Int [224]
            │               ├── <1675> Constant Int [225]
            │               ├── <1677> Constant Int [226]
            │               ├── <1679> Constant Int [227]
            │               ├── <1681> Constant Int [228]
            │               ├── <1683> Constant Int [229]
            │               ╰── <1685> Constant Int [230]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_22
            │   ├── Type
            │   │   ╰── Struct [bytesize22]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1694> Constant Int [231]
            │               ├── <1696> Constant Int [232]
            │               ├── <1698> Constant Int [233]
            │               ├── <1700> Constant Int [234]
            │               ├── <1702> Constant Int [235]
            │               ├── <1704> Constant Int [236]
            │               ├── <1706> Constant Int [237]
            │               ├── <1708> Constant Int [238]
            │               ├── <1710> Constant Int [239]
            │               ├── <1712> Constant Int [240]
            │               ├── <1714> Constant Int [241]
            │               ├── <1716> Constant Int [242]
            │               ├── <1718> Constant Int [243]
            │               ├── <1720> Constant Int [244]
            │               ├── <1722> Constant Int [245]
            │               ├── <1724> Constant Int [246]
            │               ├── <1726> Constant Int [247]
            │               ├── <1728> Constant Int [248]
            │               ├── <1730> Constant Int [249]
            │               ├── <1732> Constant Int [250]
            │               ├── <1734> Constant Int [251]
            │               ╰── <1736> Constant Int [252]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_23
            │   ├── Type
            │   │   ╰── Struct [bytesize23]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1745> Constant Int [253]
            │               ├── <1747> Constant Int [254]
            │               ├── <1749> Constant Int [255]
            │               ├── <1751> Constant Int [0]
            │               ├── <1753> Constant Int [1]
            │               ├── <1755> Constant Int [2]
            │               ├── <1757> Constant Int [3]
            │               ├── <1759> Constant Int [4]
            │               ├── <1761> Constant Int [5]
            │               ├── <1763> Constant Int [6]
            │               ├── <1765> Constant Int [7]
            │               ├── <1767> Constant Int [8]
            │               ├── <1769> Constant Int [9]
            │               ├── <1771> Constant Int [10]
            │               ├── <1773> Constant Int [11]
            │               ├── <1775> Constant Int [12]
            │               ├── <1777> Constant Int [13]
            │               ├── <1779> Constant Int [14]
            │               ├── <1781> Constant Int [15]
            │               ├── <1783> Constant Int [16]
            │               ├── <1785> Constant Int [17]
            │               ├── <1787> Constant Int [18]
            │               ╰── <1789> Constant Int [19]
            ╰── VarDeclaration
                ├── Name
                │   ╰── globvar_24
                ├── Type
                │   ╰── Struct [bytesize24]
                ╰── Initializer
                    ╰── Compound
                        ╰── Compound
                            ├── <1798> Constant Int [20]
                            ├── <1800> Constant Int [21]
                            ├── <1802> Constant Int [22]
                            ├── <1804> Constant Int [23]
                            ├── <1806> Constant Int [24]
                            ├── <1808> Constant Int [25]
                            ├── <1810> Constant Int [26]
                            ├── <1812> Constant Int [27]
                            ├── <1814> Constant Int [28]
                            ├── <1816> Constant Int [29]
                            ├── <1818> Constant Int [30]
                            ├── <1820> Constant Int [31]
                            ├── <1822> Constant Int [32]
                            ├── <1824> Constant Int [33]
                            ├── <1826> Constant Int [34]
                            ├── <1828> Constant Int [35]
                            ├── <1830> Constant Int [36]
                            ├── <1832> Constant Int [37]
                            ├── <1834> Constant Int [38]
                            ├── <1836> Constant Int [39]
                            ├── <1838> Constant Int [40]
                            ├── <1840> Constant Int [41]
                            ├── <1842> Constant Int [42]
                            ╰── <1844> Constant Int [43]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_return_big_struct_on_page_boundary() {
    let src = r#"
        struct eighteen_bytes {
            char arr[18];
        };
        extern struct eighteen_bytes on_page_boundary;
        struct eighteen_bytes return_struct(void) {
            on_page_boundary.arr[17] = 12;
            on_page_boundary.arr[9] = -1;
            on_page_boundary.arr[8] = -2;
            on_page_boundary.arr[7] = -3;
            return on_page_boundary;
        }
        int main(void) {
            struct eighteen_bytes x = return_struct();
            for (int i = 0; i < 18; i = i + 1) {
                char val = x.arr[i];
                if (i == 7) {
                    if (val != -3) {
                        return 1;
                    }
                } else if (i == 8) {
                    if (val != -2) {
                        return 2;
                    }
                } else if (i == 9) {
                    if (val != -1) {
                        return 3;
                    }
                } else if (i == 17) {
                    if (val != 12) {
                        return 4;
                    }
                } else if (x.arr[i]) {
                    return 5;
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [eighteen_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 18
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── on_page_boundary
            │   ├── Type
            │   │   ╰── Struct [eighteen_bytes]
            │   ╰── Extern
            ├── Function [return_struct]
            │   ╰── Body
            │       ├── <28> Assign [=]
            │       │   ├── <25> Subscript
            │       │   │   ├── <23> Dot
            │       │   │   │   ├── <21> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <24> Constant Int [17]
            │       │   ╰── <27> Constant Int [12]
            │       ├── <40> Assign [=]
            │       │   ├── <35> Subscript
            │       │   │   ├── <33> Dot
            │       │   │   │   ├── <31> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <34> Constant Int [9]
            │       │   ╰── <39> Unary [-]
            │       │       ╰── <38> Constant Int [1]
            │       ├── <52> Assign [=]
            │       │   ├── <47> Subscript
            │       │   │   ├── <45> Dot
            │       │   │   │   ├── <43> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <46> Constant Int [8]
            │       │   ╰── <51> Unary [-]
            │       │       ╰── <50> Constant Int [2]
            │       ├── <64> Assign [=]
            │       │   ├── <59> Subscript
            │       │   │   ├── <57> Dot
            │       │   │   │   ├── <55> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <58> Constant Int [7]
            │       │   ╰── <63> Unary [-]
            │       │       ╰── <62> Constant Int [3]
            │       ╰── Return
            │           ╰── <67> Var [on_page_boundary]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [eighteen_bytes]
                    │   ╰── Initializer
                    │       ╰── <80> FunctionCall [return_struct]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <86> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <94>  [<]
                    │   │       ├── <91> Var [i]
                    │   │       ╰── <93> Constant Int [18]
                    │   ├── Condition
                    │   │   ╰── <103> Assign [=]
                    │   │       ├── <96> Var [i]
                    │   │       ╰── <102>  [+]
                    │   │           ├── <99> Var [i]
                    │   │           ╰── <101> Constant Int [1]
                    │   ╰── Block
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── val
                    │       │   ├── Type
                    │       │   │   ╰── Char
                    │       │   ╰── Initializer
                    │       │       ╰── <113> Subscript
                    │       │           ├── <110> Dot
                    │       │           │   ├── <108> Var [x]
                    │       │           │   ╰── arr
                    │       │           ╰── <112> Var [i]
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <120>  [==]
                    │           │       ├── <117> Var [i]
                    │           │       ╰── <119> Constant Int [7]
                    │           ├── Then
                    │           │   ╰── Block
                    │           │       ╰── If
                    │           │           ├── Condition
                    │           │           │   ╰── <127>  [!=]
                    │           │           │       ├── <122> Var [val]
                    │           │           │       ╰── <126> Unary [-]
                    │           │           │           ╰── <125> Constant Int [3]
                    │           │           ╰── Then
                    │           │               ╰── Block
                    │           │                   ╰── Return
                    │           │                       ╰── <128> Constant Int [1]
                    │           ╰── Else
                    │               ╰── If
                    │                   ├── Condition
                    │                   │   ╰── <139>  [==]
                    │                   │       ├── <136> Var [i]
                    │                   │       ╰── <138> Constant Int [8]
                    │                   ├── Then
                    │                   │   ╰── Block
                    │                   │       ╰── If
                    │                   │           ├── Condition
                    │                   │           │   ╰── <146>  [!=]
                    │                   │           │       ├── <141> Var [val]
                    │                   │           │       ╰── <145> Unary [-]
                    │                   │           │           ╰── <144> Constant Int [2]
                    │                   │           ╰── Then
                    │                   │               ╰── Block
                    │                   │                   ╰── Return
                    │                   │                       ╰── <147> Constant Int [2]
                    │                   ╰── Else
                    │                       ╰── If
                    │                           ├── Condition
                    │                           │   ╰── <158>  [==]
                    │                           │       ├── <155> Var [i]
                    │                           │       ╰── <157> Constant Int [9]
                    │                           ├── Then
                    │                           │   ╰── Block
                    │                           │       ╰── If
                    │                           │           ├── Condition
                    │                           │           │   ╰── <165>  [!=]
                    │                           │           │       ├── <160> Var [val]
                    │                           │           │       ╰── <164> Unary [-]
                    │                           │           │           ╰── <163> Constant Int [1]
                    │                           │           ╰── Then
                    │                           │               ╰── Block
                    │                           │                   ╰── Return
                    │                           │                       ╰── <166> Constant Int [3]
                    │                           ╰── Else
                    │                               ╰── If
                    │                                   ├── Condition
                    │                                   │   ╰── <177>  [==]
                    │                                   │       ├── <174> Var [i]
                    │                                   │       ╰── <176> Constant Int [17]
                    │                                   ├── Then
                    │                                   │   ╰── Block
                    │                                   │       ╰── If
                    │                                   │           ├── Condition
                    │                                   │           │   ╰── <182>  [!=]
                    │                                   │           │       ├── <179> Var [val]
                    │                                   │           │       ╰── <181> Constant Int [12]
                    │                                   │           ╰── Then
                    │                                   │               ╰── Block
                    │                                   │                   ╰── Return
                    │                                   │                       ╰── <183> Constant Int [4]
                    │                                   ╰── Else
                    │                                       ╰── If
                    │                                           ├── Condition
                    │                                           │   ╰── <196> Subscript
                    │                                           │       ├── <193> Dot
                    │                                           │       │   ├── <191> Var [x]
                    │                                           │       │   ╰── arr
                    │                                           │       ╰── <195> Var [i]
                    │                                           ╰── Then
                    │                                               ╰── Block
                    │                                                   ╰── Return
                    │                                                       ╰── <197> Constant Int [5]
                    ╰── Return
                        ╰── <209> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_return_incomplete_type() {
    let src = r#"
        struct s;
        struct s increment_struct(struct s param);
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s arg = {1, 2};
            struct s val = increment_struct(arg);
            if (val.a != 2 || val.b != 3) {
                return 1;
            }
            return 0;
        }
        struct s increment_struct(struct s param) {
            param.a = param.a + 1;
            param.b = param.b + 1;
            return param;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [increment_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── param
            │           ╰── Type
            │               ╰── Struct [s]
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arg
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <31> Constant Int [1]
            │       │           ╰── <33> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── val
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <44> FunctionCall [increment_struct]
            │       │           ╰── <43> Var [arg]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <62>  [||]
            │       │   │       ├── <53>  [!=]
            │       │   │       │   ├── <50> Dot
            │       │   │       │   │   ├── <48> Var [val]
            │       │   │       │   │   ╰── a
            │       │   │       │   ╰── <52> Constant Int [2]
            │       │   │       ╰── <61>  [!=]
            │       │   │           ├── <58> Dot
            │       │   │           │   ├── <56> Var [val]
            │       │   │           │   ╰── b
            │       │   │           ╰── <60> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <63> Constant Int [1]
            │       ╰── Return
            │           ╰── <68> Constant Int [0]
            ╰── Function [increment_struct]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── param
                │       ╰── Type
                │           ╰── Struct [s]
                ╰── Body
                    ├── <93> Assign [=]
                    │   ├── <84> Dot
                    │   │   ├── <82> Var [param]
                    │   │   ╰── a
                    │   ╰── <92>  [+]
                    │       ├── <89> Dot
                    │       │   ├── <87> Var [param]
                    │       │   ╰── a
                    │       ╰── <91> Constant Int [1]
                    ├── <107> Assign [=]
                    │   ├── <98> Dot
                    │   │   ├── <96> Var [param]
                    │   │   ╰── b
                    │   ╰── <106>  [+]
                    │       ├── <103> Dot
                    │       │   ├── <101> Var [param]
                    │       │   ╰── b
                    │       ╰── <105> Constant Int [1]
                    ╰── Return
                        ╰── <110> Var [param]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_return_pointer_in_rax() {
    let src = r#"
        struct s {
            long l1;
            long l2;
            long l3;
        };
        struct s return_in_mem(void) {
            struct s result = {1, 2, 3};
            return result;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l1
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l2
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l3
            │       ╰── Type
            │           ╰── Long
            ╰── Function [return_in_mem]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <24> Constant Int [1]
                    │           ├── <26> Constant Int [2]
                    │           ╰── <28> Constant Int [3]
                    ╰── Return
                        ╰── <33> Var [result]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_return_space_overlap() {
    let src = r#"
        struct s {
            long l1;
            long l2;
            long l3;
        };
        extern struct s globvar;
        struct s overlap_with_globvar(void);
        struct s overlap_with_pointer(struct s *ptr);
        int main(void) {
            globvar = overlap_with_globvar();
            if (globvar.l1 != 400l || globvar.l2 != 500l || globvar.l3 != 600l) {
                return 2;
            }
            struct s my_struct = {10l, 9l, 8l};
            my_struct = overlap_with_pointer(&my_struct);
            if (my_struct.l1 != 20l || my_struct.l2 != 18l || my_struct.l3 != 16l) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l1
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l2
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l3
            │       ╰── Type
            │           ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── Function [overlap_with_globvar]
            ├── Function [overlap_with_pointer]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ├── <47> Assign [=]
                    │   ├── <43> Var [globvar]
                    │   ╰── <46> FunctionCall [overlap_with_globvar]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <73>  [||]
                    │   │       ├── <64>  [||]
                    │   │       │   ├── <55>  [!=]
                    │   │       │   │   ├── <52> Dot
                    │   │       │   │   │   ├── <50> Var [globvar]
                    │   │       │   │   │   ╰── l1
                    │   │       │   │   ╰── <54> Constant Long [400]
                    │   │       │   ╰── <63>  [!=]
                    │   │       │       ├── <60> Dot
                    │   │       │       │   ├── <58> Var [globvar]
                    │   │       │       │   ╰── l2
                    │   │       │       ╰── <62> Constant Long [500]
                    │   │       ╰── <72>  [!=]
                    │   │           ├── <69> Dot
                    │   │           │   ├── <67> Var [globvar]
                    │   │           │   ╰── l3
                    │   │           ╰── <71> Constant Long [600]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <74> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <83> Constant Long [10]
                    │           ├── <85> Constant Long [9]
                    │           ╰── <87> Constant Long [8]
                    ├── <99> Assign [=]
                    │   ├── <92> Var [my_struct]
                    │   ╰── <98> FunctionCall [overlap_with_pointer]
                    │       ╰── <97> AddressOf
                    │           ╰── <96> Var [my_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <125>  [||]
                    │   │       ├── <116>  [||]
                    │   │       │   ├── <107>  [!=]
                    │   │       │   │   ├── <104> Dot
                    │   │       │   │   │   ├── <102> Var [my_struct]
                    │   │       │   │   │   ╰── l1
                    │   │       │   │   ╰── <106> Constant Long [20]
                    │   │       │   ╰── <115>  [!=]
                    │   │       │       ├── <112> Dot
                    │   │       │       │   ├── <110> Var [my_struct]
                    │   │       │       │   ╰── l2
                    │   │       │       ╰── <114> Constant Long [18]
                    │   │       ╰── <124>  [!=]
                    │   │           ├── <121> Dot
                    │   │           │   ├── <119> Var [my_struct]
                    │   │           │   ╰── l3
                    │   │           ╰── <123> Constant Long [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <126> Constant Int [4]
                    ╰── Return
                        ╰── <131> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_return_struct_on_page_boundary() {
    let src = r#"
        struct ten_bytes {
            char arr[10];
        };
        extern struct ten_bytes on_page_boundary;
        struct ten_bytes return_struct(void) {
            on_page_boundary.arr[9] = -1;
            on_page_boundary.arr[8] = -2;
            on_page_boundary.arr[7] = -3;
            return on_page_boundary;
        }
        int main(void) {
            struct ten_bytes x = return_struct();
            for (int i = 0; i < 7; i = i + 1) {
                if (x.arr[i]) {
                    return 1;
                }
            }
            if (x.arr[7] != -3) {
                return 2;
            }
            if (x.arr[8] != -2) {
                return 2;
            }
            if (x.arr[9] != -1) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [ten_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── on_page_boundary
            │   ├── Type
            │   │   ╰── Struct [ten_bytes]
            │   ╰── Extern
            ├── Function [return_struct]
            │   ╰── Body
            │       ├── <30> Assign [=]
            │       │   ├── <25> Subscript
            │       │   │   ├── <23> Dot
            │       │   │   │   ├── <21> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <24> Constant Int [9]
            │       │   ╰── <29> Unary [-]
            │       │       ╰── <28> Constant Int [1]
            │       ├── <42> Assign [=]
            │       │   ├── <37> Subscript
            │       │   │   ├── <35> Dot
            │       │   │   │   ├── <33> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <36> Constant Int [8]
            │       │   ╰── <41> Unary [-]
            │       │       ╰── <40> Constant Int [2]
            │       ├── <54> Assign [=]
            │       │   ├── <49> Subscript
            │       │   │   ├── <47> Dot
            │       │   │   │   ├── <45> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <48> Constant Int [7]
            │       │   ╰── <53> Unary [-]
            │       │       ╰── <52> Constant Int [3]
            │       ╰── Return
            │           ╰── <57> Var [on_page_boundary]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [ten_bytes]
                    │   ╰── Initializer
                    │       ╰── <70> FunctionCall [return_struct]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <76> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <84>  [<]
                    │   │       ├── <81> Var [i]
                    │   │       ╰── <83> Constant Int [7]
                    │   ├── Condition
                    │   │   ╰── <93> Assign [=]
                    │   │       ├── <86> Var [i]
                    │   │       ╰── <92>  [+]
                    │   │           ├── <89> Var [i]
                    │   │           ╰── <91> Constant Int [1]
                    │   ╰── Block
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <100> Subscript
                    │           │       ├── <97> Dot
                    │           │       │   ├── <95> Var [x]
                    │           │       │   ╰── arr
                    │           │       ╰── <99> Var [i]
                    │           ╰── Then
                    │               ╰── Block
                    │                   ╰── Return
                    │                       ╰── <101> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <119>  [!=]
                    │   │       ├── <114> Subscript
                    │   │       │   ├── <112> Dot
                    │   │       │   │   ├── <110> Var [x]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <113> Constant Int [7]
                    │   │       ╰── <118> Unary [-]
                    │   │           ╰── <117> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <120> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <135>  [!=]
                    │   │       ├── <130> Subscript
                    │   │       │   ├── <128> Dot
                    │   │       │   │   ├── <126> Var [x]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <129> Constant Int [8]
                    │   │       ╰── <134> Unary [-]
                    │   │           ╰── <133> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <136> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <151>  [!=]
                    │   │       ├── <146> Subscript
                    │   │       │   ├── <144> Dot
                    │   │       │   │   ├── <142> Var [x]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <145> Constant Int [9]
                    │   │       ╰── <150> Unary [-]
                    │   │           ╰── <149> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <152> Constant Int [3]
                    ╰── Return
                        ╰── <157> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_simple() {
    let src = r#"
        struct pair {
            int x;
            char y;
        };
        struct pair2 {
            double d;
            long l;
        };
        struct pair2 double_members(struct pair p) {
            struct pair2 retval = {p.x * 2, p.y * 2};
            return retval;
        }
        int main(void) {
            struct pair arg = {1, 4};
            struct pair2 result = double_members(arg);
            if (result.d != 2.0 || result.l != 8) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Char
            ├── Struct [pair2]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Function [double_members]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── p
            │   │       ╰── Type
            │   │           ╰── Struct [pair]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [pair2]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <40>  [*]
            │       │           │   ├── <37> Dot
            │       │           │   │   ├── <35> Var [p]
            │       │           │   │   ╰── x
            │       │           │   ╰── <39> Constant Int [2]
            │       │           ╰── <48>  [*]
            │       │               ├── <45> Dot
            │       │               │   ├── <43> Var [p]
            │       │               │   ╰── y
            │       │               ╰── <47> Constant Int [2]
            │       ╰── Return
            │           ╰── <53> Var [retval]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arg
                    │   ├── Type
                    │   │   ╰── Struct [pair]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <65> Constant Int [1]
                    │           ╰── <67> Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Struct [pair2]
                    │   ╰── Initializer
                    │       ╰── <78> FunctionCall [double_members]
                    │           ╰── <77> Var [arg]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <96>  [||]
                    │   │       ├── <87>  [!=]
                    │   │       │   ├── <84> Dot
                    │   │       │   │   ├── <82> Var [result]
                    │   │       │   │   ╰── d
                    │   │       │   ╰── <86> Constant Double [+2e0]
                    │   │       ╰── <95>  [!=]
                    │   │           ├── <92> Dot
                    │   │           │   ├── <90> Var [result]
                    │   │           │   ╰── l
                    │   │           ╰── <94> Constant Int [8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <97> Constant Int [1]
                    ╰── Return
                        ╰── <102> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_stack_clobber() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void exit(int status);
        struct stack_bytes {
            char bytes[16];
        };
        static struct stack_bytes to_validate;
        void validate_stack_bytes(int code) {
            if (strcmp(to_validate.bytes, "efghijklmnopqrs")) {
                exit(code);
            }
            return;
        }
        struct one_int_reg {
            char cs[7];
        };
        struct one_int_reg return_int_struct(void) {
            struct one_int_reg retval = {{0, 0, 0, 0, 0, 0, 0}};
            return retval;
        }
        static struct one_int_reg one_int_struct;
        void validate_one_int_struct(int code) {
            for (int i = 0; i < 7; i = i + 1) {
                if (one_int_struct.cs[i]) {
                    exit(code);
                }
            }
        }
        int test_int_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            one_int_struct = return_int_struct();
            to_validate = bytes;
            validate_stack_bytes(1);
            validate_one_int_struct(2);
            return 0;
        }
        struct two_int_regs {
            char cs[15];
        };
        struct two_int_regs return_two_int_struct(void) {
            struct two_int_regs retval = {
                {20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}};
            return retval;
        }
        static struct two_int_regs two_int_struct;
        void validate_two_int_struct(int code) {
            for (int i = 0; i < 15; i = i + 1)
                if (two_int_struct.cs[i] != i + 20) {
                    exit(code);
                }
        }
        int test_two_int_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            two_int_struct = return_two_int_struct();
            to_validate = bytes;
            validate_stack_bytes(3);
            validate_two_int_struct(4);
            return 0;
        }
        struct one_xmm_reg {
            double d;
        };
        struct one_xmm_reg return_one_xmm_struct(void) {
            struct one_xmm_reg retval = {234.5};
            return retval;
        }
        static struct one_xmm_reg one_double_struct;
        void validate_one_double_struct(int code) {
            if (one_double_struct.d != 234.5) {
                exit(code);
            }
        }
        int test_one_double_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            one_double_struct = return_one_xmm_struct();
            to_validate = bytes;
            validate_stack_bytes(5);
            validate_one_double_struct(6);
            return 0;
        }
        struct two_xmm_regs {
            double d1;
            double d2;
        };
        struct two_xmm_regs return_two_xmm_struct(void) {
            struct two_xmm_regs retval = {234.5, 678.25};
            return retval;
        }
        static struct two_xmm_regs two_doubles_struct;
        void validate_two_doubles_struct(int code) {
            if (two_doubles_struct.d1 != 234.5 || two_doubles_struct.d2 != 678.25) {
                exit(code);
            }
        }
        int test_two_doubles_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            two_doubles_struct = return_two_xmm_struct();
            to_validate = bytes;
            validate_stack_bytes(7);
            validate_two_doubles_struct(8);
            return 0;
        }
        struct int_and_xmm {
            char c;
            double d;
        };
        struct int_and_xmm return_mixed_struct(void) {
            struct int_and_xmm retval = {125, 678.25};
            return retval;
        }
        static struct int_and_xmm mixed_struct;
        void validate_mixed_struct(int code) {
            if (mixed_struct.c != 125 || mixed_struct.d != 678.25) {
                exit(code);
            }
        }
        int test_mixed_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            mixed_struct = return_mixed_struct();
            to_validate = bytes;
            validate_stack_bytes(9);
            validate_mixed_struct(10);
            return 0;
        }
        struct stack {
            char cs[28];
        };
        struct stack return_stack_struct(void) {
            struct stack retval = {{90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
                                    100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
                                    110, 111, 112, 113, 114, 115, 116, 117}};
            return retval;
        }
        static struct stack stack_struct;
        void validate_stack_struct(int code) {
            for (int i = 0; i < 28; i = i + 1) {
                if (stack_struct.cs[i] != i + 90) {
                    exit(code);
                }
            }
        }
        int test_stack_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            stack_struct = return_stack_struct();
            to_validate = bytes;
            validate_stack_bytes(11);
            validate_stack_struct(12);
            return 0;
        }
        struct stack_irregular {
            char cs[19];
        };
        struct stack_irregular return_irregular_stack_struct(void) {
            struct stack_irregular retval = {{70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
                                              80, 81, 82, 83, 84, 85, 86, 87, 88}};
            return retval;
        }
        static struct stack_irregular irregular_stack_struct;
        void validate_irregular_stack_struct(int code) {
            for (int i = 0; i < 19; i = i + 1) {
                if (irregular_stack_struct.cs[i] != i + 70) {
                    exit(code);
                }
            }
        }
        int test_irregular_stack_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            irregular_stack_struct = return_irregular_stack_struct();
            to_validate = bytes;
            validate_stack_bytes(13);
            validate_irregular_stack_struct(14);
            return 0;
        }
        int main(void) {
            test_int_struct();
            test_two_int_struct();
            test_one_double_struct();
            test_two_doubles_struct();
            test_mixed_struct();
            test_stack_struct();
            test_irregular_stack_struct();
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Struct [stack_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── bytes
            │       ╰── Type
            │           ╰── Array
            │               ├── 16
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── to_validate
            │   ├── Type
            │   │   ╰── Struct [stack_bytes]
            │   ╰── Static
            ├── Function [validate_stack_bytes]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <49> FunctionCall [strcmp]
            │       │   │       ├── <47> Dot
            │       │   │       │   ├── <45> Var [to_validate]
            │       │   │       │   ╰── bytes
            │       │   │       ╰── <48> "efghijklmnopqrs"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <53> FunctionCall [exit]
            │       │               ╰── <52> Var [code]
            │       ╰── Return
            ├── Struct [one_int_reg]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cs
            │       ╰── Type
            │           ╰── Array
            │               ├── 7
            │               ╰── Char
            ├── Function [return_int_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [one_int_reg]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <78> Constant Int [0]
            │       │               ├── <80> Constant Int [0]
            │       │               ├── <82> Constant Int [0]
            │       │               ├── <84> Constant Int [0]
            │       │               ├── <86> Constant Int [0]
            │       │               ├── <88> Constant Int [0]
            │       │               ╰── <90> Constant Int [0]
            │       ╰── Return
            │           ╰── <96> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── one_int_struct
            │   ├── Type
            │   │   ╰── Struct [one_int_reg]
            │   ╰── Static
            ├── Function [validate_one_int_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── For
            │           ├── Init
            │           │   ╰── VarDeclaration
            │           │       ├── Name
            │           │       │   ╰── i
            │           │       ├── Type
            │           │       │   ╰── Int
            │           │       ╰── Initializer
            │           │           ╰── <116> Constant Int [0]
            │           ├── Condition
            │           │   ╰── <124>  [<]
            │           │       ├── <121> Var [i]
            │           │       ╰── <123> Constant Int [7]
            │           ├── Condition
            │           │   ╰── <133> Assign [=]
            │           │       ├── <126> Var [i]
            │           │       ╰── <132>  [+]
            │           │           ├── <129> Var [i]
            │           │           ╰── <131> Constant Int [1]
            │           ╰── Block
            │               ╰── If
            │                   ├── Condition
            │                   │   ╰── <140> Subscript
            │                   │       ├── <137> Dot
            │                   │       │   ├── <135> Var [one_int_struct]
            │                   │       │   ╰── cs
            │                   │       ╰── <139> Var [i]
            │                   ╰── Then
            │                       ╰── Block
            │                           ╰── <144> FunctionCall [exit]
            │                               ╰── <143> Var [code]
            ├── Function [test_int_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <162> "efghijklmnopqrs"
            │       ├── <171> Assign [=]
            │       │   ├── <167> Var [one_int_struct]
            │       │   ╰── <170> FunctionCall [return_int_struct]
            │       ├── <178> Assign [=]
            │       │   ├── <174> Var [to_validate]
            │       │   ╰── <177> Var [bytes]
            │       ├── <182> FunctionCall [validate_stack_bytes]
            │       │   ╰── <181> Constant Int [1]
            │       ├── <186> FunctionCall [validate_one_int_struct]
            │       │   ╰── <185> Constant Int [2]
            │       ╰── Return
            │           ╰── <188> Constant Int [0]
            ├── Struct [two_int_regs]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cs
            │       ╰── Type
            │           ╰── Array
            │               ├── 15
            │               ╰── Char
            ├── Function [return_two_int_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [two_int_regs]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <209> Constant Int [20]
            │       │               ├── <211> Constant Int [21]
            │       │               ├── <213> Constant Int [22]
            │       │               ├── <215> Constant Int [23]
            │       │               ├── <217> Constant Int [24]
            │       │               ├── <219> Constant Int [25]
            │       │               ├── <221> Constant Int [26]
            │       │               ├── <223> Constant Int [27]
            │       │               ├── <225> Constant Int [28]
            │       │               ├── <227> Constant Int [29]
            │       │               ├── <229> Constant Int [30]
            │       │               ├── <231> Constant Int [31]
            │       │               ├── <233> Constant Int [32]
            │       │               ├── <235> Constant Int [33]
            │       │               ╰── <237> Constant Int [34]
            │       ╰── Return
            │           ╰── <243> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── two_int_struct
            │   ├── Type
            │   │   ╰── Struct [two_int_regs]
            │   ╰── Static
            ├── Function [validate_two_int_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── For
            │           ├── Init
            │           │   ╰── VarDeclaration
            │           │       ├── Name
            │           │       │   ╰── i
            │           │       ├── Type
            │           │       │   ╰── Int
            │           │       ╰── Initializer
            │           │           ╰── <263> Constant Int [0]
            │           ├── Condition
            │           │   ╰── <271>  [<]
            │           │       ├── <268> Var [i]
            │           │       ╰── <270> Constant Int [15]
            │           ├── Condition
            │           │   ╰── <280> Assign [=]
            │           │       ├── <273> Var [i]
            │           │       ╰── <279>  [+]
            │           │           ├── <276> Var [i]
            │           │           ╰── <278> Constant Int [1]
            │           ╰── If
            │               ├── Condition
            │               │   ╰── <294>  [!=]
            │               │       ├── <287> Subscript
            │               │       │   ├── <284> Dot
            │               │       │   │   ├── <282> Var [two_int_struct]
            │               │       │   │   ╰── cs
            │               │       │   ╰── <286> Var [i]
            │               │       ╰── <293>  [+]
            │               │           ├── <290> Var [i]
            │               │           ╰── <292> Constant Int [20]
            │               ╰── Then
            │                   ╰── Block
            │                       ╰── <298> FunctionCall [exit]
            │                           ╰── <297> Var [code]
            ├── Function [test_two_int_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <314> "efghijklmnopqrs"
            │       ├── <323> Assign [=]
            │       │   ├── <319> Var [two_int_struct]
            │       │   ╰── <322> FunctionCall [return_two_int_struct]
            │       ├── <330> Assign [=]
            │       │   ├── <326> Var [to_validate]
            │       │   ╰── <329> Var [bytes]
            │       ├── <334> FunctionCall [validate_stack_bytes]
            │       │   ╰── <333> Constant Int [3]
            │       ├── <338> FunctionCall [validate_two_int_struct]
            │       │   ╰── <337> Constant Int [4]
            │       ╰── Return
            │           ╰── <340> Constant Int [0]
            ├── Struct [one_xmm_reg]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Function [return_one_xmm_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [one_xmm_reg]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <359> Constant Double [+2.345e2]
            │       ╰── Return
            │           ╰── <364> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── one_double_struct
            │   ├── Type
            │   │   ╰── Struct [one_xmm_reg]
            │   ╰── Static
            ├── Function [validate_one_double_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── If
            │           ├── Condition
            │           │   ╰── <387>  [!=]
            │           │       ├── <384> Dot
            │           │       │   ├── <382> Var [one_double_struct]
            │           │       │   ╰── d
            │           │       ╰── <386> Constant Double [+2.345e2]
            │           ╰── Then
            │               ╰── Block
            │                   ╰── <391> FunctionCall [exit]
            │                       ╰── <390> Var [code]
            ├── Function [test_one_double_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <406> "efghijklmnopqrs"
            │       ├── <415> Assign [=]
            │       │   ├── <411> Var [one_double_struct]
            │       │   ╰── <414> FunctionCall [return_one_xmm_struct]
            │       ├── <422> Assign [=]
            │       │   ├── <418> Var [to_validate]
            │       │   ╰── <421> Var [bytes]
            │       ├── <426> FunctionCall [validate_stack_bytes]
            │       │   ╰── <425> Constant Int [5]
            │       ├── <430> FunctionCall [validate_one_double_struct]
            │       │   ╰── <429> Constant Int [6]
            │       ╰── Return
            │           ╰── <432> Constant Int [0]
            ├── Struct [two_xmm_regs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d1
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d2
            │       ╰── Type
            │           ╰── Double
            ├── Function [return_two_xmm_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [two_xmm_regs]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <455> Constant Double [+2.345e2]
            │       │           ╰── <457> Constant Double [+6.7825e2]
            │       ╰── Return
            │           ╰── <462> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── two_doubles_struct
            │   ├── Type
            │   │   ╰── Struct [two_xmm_regs]
            │   ╰── Static
            ├── Function [validate_two_doubles_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── If
            │           ├── Condition
            │           │   ╰── <494>  [||]
            │           │       ├── <485>  [!=]
            │           │       │   ├── <482> Dot
            │           │       │   │   ├── <480> Var [two_doubles_struct]
            │           │       │   │   ╰── d1
            │           │       │   ╰── <484> Constant Double [+2.345e2]
            │           │       ╰── <493>  [!=]
            │           │           ├── <490> Dot
            │           │           │   ├── <488> Var [two_doubles_struct]
            │           │           │   ╰── d2
            │           │           ╰── <492> Constant Double [+6.7825e2]
            │           ╰── Then
            │               ╰── Block
            │                   ╰── <498> FunctionCall [exit]
            │                       ╰── <497> Var [code]
            ├── Function [test_two_doubles_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <513> "efghijklmnopqrs"
            │       ├── <522> Assign [=]
            │       │   ├── <518> Var [two_doubles_struct]
            │       │   ╰── <521> FunctionCall [return_two_xmm_struct]
            │       ├── <529> Assign [=]
            │       │   ├── <525> Var [to_validate]
            │       │   ╰── <528> Var [bytes]
            │       ├── <533> FunctionCall [validate_stack_bytes]
            │       │   ╰── <532> Constant Int [7]
            │       ├── <537> FunctionCall [validate_two_doubles_struct]
            │       │   ╰── <536> Constant Int [8]
            │       ╰── Return
            │           ╰── <539> Constant Int [0]
            ├── Struct [int_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Function [return_mixed_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [int_and_xmm]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <562> Constant Int [125]
            │       │           ╰── <564> Constant Double [+6.7825e2]
            │       ╰── Return
            │           ╰── <569> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── mixed_struct
            │   ├── Type
            │   │   ╰── Struct [int_and_xmm]
            │   ╰── Static
            ├── Function [validate_mixed_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── If
            │           ├── Condition
            │           │   ╰── <601>  [||]
            │           │       ├── <592>  [!=]
            │           │       │   ├── <589> Dot
            │           │       │   │   ├── <587> Var [mixed_struct]
            │           │       │   │   ╰── c
            │           │       │   ╰── <591> Constant Int [125]
            │           │       ╰── <600>  [!=]
            │           │           ├── <597> Dot
            │           │           │   ├── <595> Var [mixed_struct]
            │           │           │   ╰── d
            │           │           ╰── <599> Constant Double [+6.7825e2]
            │           ╰── Then
            │               ╰── Block
            │                   ╰── <605> FunctionCall [exit]
            │                       ╰── <604> Var [code]
            ├── Function [test_mixed_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <620> "efghijklmnopqrs"
            │       ├── <629> Assign [=]
            │       │   ├── <625> Var [mixed_struct]
            │       │   ╰── <628> FunctionCall [return_mixed_struct]
            │       ├── <636> Assign [=]
            │       │   ├── <632> Var [to_validate]
            │       │   ╰── <635> Var [bytes]
            │       ├── <640> FunctionCall [validate_stack_bytes]
            │       │   ╰── <639> Constant Int [9]
            │       ├── <644> FunctionCall [validate_mixed_struct]
            │       │   ╰── <643> Constant Int [10]
            │       ╰── Return
            │           ╰── <646> Constant Int [0]
            ├── Struct [stack]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cs
            │       ╰── Type
            │           ╰── Array
            │               ├── 28
            │               ╰── Char
            ├── Function [return_stack_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [stack]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <667> Constant Int [90]
            │       │               ├── <669> Constant Int [91]
            │       │               ├── <671> Constant Int [92]
            │       │               ├── <673> Constant Int [93]
            │       │               ├── <675> Constant Int [94]
            │       │               ├── <677> Constant Int [95]
            │       │               ├── <679> Constant Int [96]
            │       │               ├── <681> Constant Int [97]
            │       │               ├── <683> Constant Int [98]
            │       │               ├── <685> Constant Int [99]
            │       │               ├── <687> Constant Int [100]
            │       │               ├── <689> Constant Int [101]
            │       │               ├── <691> Constant Int [102]
            │       │               ├── <693> Constant Int [103]
            │       │               ├── <695> Constant Int [104]
            │       │               ├── <697> Constant Int [105]
            │       │               ├── <699> Constant Int [106]
            │       │               ├── <701> Constant Int [107]
            │       │               ├── <703> Constant Int [108]
            │       │               ├── <705> Constant Int [109]
            │       │               ├── <707> Constant Int [110]
            │       │               ├── <709> Constant Int [111]
            │       │               ├── <711> Constant Int [112]
            │       │               ├── <713> Constant Int [113]
            │       │               ├── <715> Constant Int [114]
            │       │               ├── <717> Constant Int [115]
            │       │               ├── <719> Constant Int [116]
            │       │               ╰── <721> Constant Int [117]
            │       ╰── Return
            │           ╰── <727> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── stack_struct
            │   ├── Type
            │   │   ╰── Struct [stack]
            │   ╰── Static
            ├── Function [validate_stack_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── For
            │           ├── Init
            │           │   ╰── VarDeclaration
            │           │       ├── Name
            │           │       │   ╰── i
            │           │       ├── Type
            │           │       │   ╰── Int
            │           │       ╰── Initializer
            │           │           ╰── <747> Constant Int [0]
            │           ├── Condition
            │           │   ╰── <755>  [<]
            │           │       ├── <752> Var [i]
            │           │       ╰── <754> Constant Int [28]
            │           ├── Condition
            │           │   ╰── <764> Assign [=]
            │           │       ├── <757> Var [i]
            │           │       ╰── <763>  [+]
            │           │           ├── <760> Var [i]
            │           │           ╰── <762> Constant Int [1]
            │           ╰── Block
            │               ╰── If
            │                   ├── Condition
            │                   │   ╰── <778>  [!=]
            │                   │       ├── <771> Subscript
            │                   │       │   ├── <768> Dot
            │                   │       │   │   ├── <766> Var [stack_struct]
            │                   │       │   │   ╰── cs
            │                   │       │   ╰── <770> Var [i]
            │                   │       ╰── <777>  [+]
            │                   │           ├── <774> Var [i]
            │                   │           ╰── <776> Constant Int [90]
            │                   ╰── Then
            │                       ╰── Block
            │                           ╰── <782> FunctionCall [exit]
            │                               ╰── <781> Var [code]
            ├── Function [test_stack_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <800> "efghijklmnopqrs"
            │       ├── <809> Assign [=]
            │       │   ├── <805> Var [stack_struct]
            │       │   ╰── <808> FunctionCall [return_stack_struct]
            │       ├── <816> Assign [=]
            │       │   ├── <812> Var [to_validate]
            │       │   ╰── <815> Var [bytes]
            │       ├── <820> FunctionCall [validate_stack_bytes]
            │       │   ╰── <819> Constant Int [11]
            │       ├── <824> FunctionCall [validate_stack_struct]
            │       │   ╰── <823> Constant Int [12]
            │       ╰── Return
            │           ╰── <826> Constant Int [0]
            ├── Struct [stack_irregular]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cs
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Char
            ├── Function [return_irregular_stack_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_irregular]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <847> Constant Int [70]
            │       │               ├── <849> Constant Int [71]
            │       │               ├── <851> Constant Int [72]
            │       │               ├── <853> Constant Int [73]
            │       │               ├── <855> Constant Int [74]
            │       │               ├── <857> Constant Int [75]
            │       │               ├── <859> Constant Int [76]
            │       │               ├── <861> Constant Int [77]
            │       │               ├── <863> Constant Int [78]
            │       │               ├── <865> Constant Int [79]
            │       │               ├── <867> Constant Int [80]
            │       │               ├── <869> Constant Int [81]
            │       │               ├── <871> Constant Int [82]
            │       │               ├── <873> Constant Int [83]
            │       │               ├── <875> Constant Int [84]
            │       │               ├── <877> Constant Int [85]
            │       │               ├── <879> Constant Int [86]
            │       │               ├── <881> Constant Int [87]
            │       │               ╰── <883> Constant Int [88]
            │       ╰── Return
            │           ╰── <889> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── irregular_stack_struct
            │   ├── Type
            │   │   ╰── Struct [stack_irregular]
            │   ╰── Static
            ├── Function [validate_irregular_stack_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── For
            │           ├── Init
            │           │   ╰── VarDeclaration
            │           │       ├── Name
            │           │       │   ╰── i
            │           │       ├── Type
            │           │       │   ╰── Int
            │           │       ╰── Initializer
            │           │           ╰── <909> Constant Int [0]
            │           ├── Condition
            │           │   ╰── <917>  [<]
            │           │       ├── <914> Var [i]
            │           │       ╰── <916> Constant Int [19]
            │           ├── Condition
            │           │   ╰── <926> Assign [=]
            │           │       ├── <919> Var [i]
            │           │       ╰── <925>  [+]
            │           │           ├── <922> Var [i]
            │           │           ╰── <924> Constant Int [1]
            │           ╰── Block
            │               ╰── If
            │                   ├── Condition
            │                   │   ╰── <940>  [!=]
            │                   │       ├── <933> Subscript
            │                   │       │   ├── <930> Dot
            │                   │       │   │   ├── <928> Var [irregular_stack_struct]
            │                   │       │   │   ╰── cs
            │                   │       │   ╰── <932> Var [i]
            │                   │       ╰── <939>  [+]
            │                   │           ├── <936> Var [i]
            │                   │           ╰── <938> Constant Int [70]
            │                   ╰── Then
            │                       ╰── Block
            │                           ╰── <944> FunctionCall [exit]
            │                               ╰── <943> Var [code]
            ├── Function [test_irregular_stack_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <962> "efghijklmnopqrs"
            │       ├── <971> Assign [=]
            │       │   ├── <967> Var [irregular_stack_struct]
            │       │   ╰── <970> FunctionCall [return_irregular_stack_struct]
            │       ├── <978> Assign [=]
            │       │   ├── <974> Var [to_validate]
            │       │   ╰── <977> Var [bytes]
            │       ├── <982> FunctionCall [validate_stack_bytes]
            │       │   ╰── <981> Constant Int [13]
            │       ├── <986> FunctionCall [validate_irregular_stack_struct]
            │       │   ╰── <985> Constant Int [14]
            │       ╰── Return
            │           ╰── <988> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <997> FunctionCall [test_int_struct]
                    ├── <1000> FunctionCall [test_two_int_struct]
                    ├── <1003> FunctionCall [test_one_double_struct]
                    ├── <1006> FunctionCall [test_two_doubles_struct]
                    ├── <1009> FunctionCall [test_mixed_struct]
                    ├── <1012> FunctionCall [test_stack_struct]
                    ├── <1015> FunctionCall [test_irregular_stack_struct]
                    ╰── Return
                        ╰── <1017> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_temporary_lifetime() {
    let src = r#"
        struct s {
            int arr[3];
        };
        struct s f(void) {
            struct s retval = {{1, 2, 3}};
            return retval;
        }
        int main(void) {
            int i = f().arr[0];
            int j = f().arr[1];
            int k = f().arr[2];
            if (i != 1) {
                return 1;
            }
            if (j != 2) {
                return 2;
            }
            if (k != 3) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Function [f]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <18> Constant Int [1]
            │       │               ├── <20> Constant Int [2]
            │       │               ╰── <22> Constant Int [3]
            │       ╰── Return
            │           ╰── <28> Var [retval]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <44> Subscript
                    │           ├── <42> Dot
                    │           │   ├── <40> FunctionCall [f]
                    │           │   ╰── arr
                    │           ╰── <43> Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── j
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <55> Subscript
                    │           ├── <53> Dot
                    │           │   ├── <51> FunctionCall [f]
                    │           │   ╰── arr
                    │           ╰── <54> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── k
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <66> Subscript
                    │           ├── <64> Dot
                    │           │   ├── <62> FunctionCall [f]
                    │           │   ╰── arr
                    │           ╰── <65> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <73>  [!=]
                    │   │       ├── <70> Var [i]
                    │   │       ╰── <72> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <74> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <83>  [!=]
                    │   │       ├── <80> Var [j]
                    │   │       ╰── <82> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <84> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <93>  [!=]
                    │   │       ├── <90> Var [k]
                    │   │       ╰── <92> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <94> Constant Int [3]
                    ╰── Return
                        ╰── <99> Constant Int [0]
    "#;
    assert_parse(src, expected);
}
