use super::{assert_error, assert_parse};

#[test]
fn test_invalid_parse_arrow_missing_member() {
    assert_error(
        r#"
        struct s {
            int y;
        };
        int main(void) {
            struct s *ptr = 0;
            return ptr->;
                      //^ Expected identifier, but found ';'
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_dot_invalid_member() {
    assert_error(
        r#"
        struct s {
            int y;
        };
        struct s x;
        int main(void) {
            return x.(y);
                   //^ Expected identifier, but found '('
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_dot_no_left_expr() {
    assert_error(
        r#"
        int main(void) {
            return .a;
                 //^ Expected expression, but found '.'
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_dot_operator_in_declarator() {
    assert_error(
        r#"
        struct pair {
            int a;
            int b;
        };
        int main(void) {
            struct pair x.a = 10;
                       //^ Expected ';', but found '.'
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_empty_initializer_list() {
    assert_error(
        r#"
        struct s {int a;};
        int main(void) {
            struct s foo = {};
                          //^ Expected expression, but found '}'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_case_struct_decl() {
    assert_error(
        r#"
        int main(void) {
            switch (0) {
                case 0:
                    struct s {
                  //^^^^^^ Expected statement, but found 'struct'
                        int a;
                    };
                    return 0;
            }
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_default_kw_member_name() {
    assert_error(
        r#"
        
        struct s {
            int default;
              //^^^^^^^ Expected identifier, but found 'default'
        };
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_goto_kw_struct_tag() {
    assert_error(
        r#"
        
        struct goto { int a; };
             //^^^^ Expected identifier, but found 'goto'
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_label_inside_struct_decl() {
    assert_error(
        r#"
        struct s {
            int i;
            foo : int j;
          //^^^ Expected type specifier
        };
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_labeled_struct_decl() {
    assert_error(
        r#"
        int main(void) {
        foo:
            struct s {
          //^^^^^^ Expected statement, but found 'struct'
                int a;
            };
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_struct_union() {
    assert_error(
        r#"
        
        union struct s {
            //^^^^^^ Expected identifier, but found 'struct'
            int a;
        };
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_two_union_kws() {
    assert_error(
        r#"
        union u {
            int a;
        };
        union union u x;
            //^^^^^ Expected identifier, but found 'union'
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_bad_type_spec() {
    assert_error(
        r#"
        
        union x long a;
              //^^^^ Expected identifier, but found 'long'
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_decl_bad_type_specifier() {
    assert_error(
        r#"
        union a { int a; };
        int main(void) {
            union a int x;
                  //^^^ Expected identifier, but found 'int'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_decl_empty_member_list() {
    assert_error(
        r#"
        union s {};
                //^ Expected struct field but found '}}'
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_decl_extra_semicolon() {
    assert_error(
        r#"
        
        union u {
            int a;
            ;
          //^ Expected type specifier
        };
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_empty_initializer() {
    assert_error(
        r#"
        union u { int a; };
        int main(void) {
            union u x = {};
                       //^ Expected expression, but found '}'
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_member_initializer() {
    assert_error(
        r#"
        union a {
            int member = 1;
                     //^ Expected ';', but found '='
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_member_is_function() {
    assert_error(
        r#"
        union s {
            int foo(void);
              //^^^ Structs can't have fields
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_member_no_declarator() {
    assert_error(
        r#"
        union u {
            int;
             //^ Expected identifier, but found ';'
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_member_no_type() {
    assert_error(
        r#"
        union u {
            a;
          //^ Expected type specifier
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_member_storage_class() {
    assert_error(
        r#"
        union y {
            static int a;
          //^^^^^^ Expected type specifier
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_struct_tag() {
    assert_error(
        r#"
        
        union struct {
            //^^^^^^ Expected identifier, but found 'struct'
            int a;
        };
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_two_tags() {
    assert_error(
        r#"
        union x y {
                //^ Expected ';', but found '{'
            int a;
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_var_bad_tag() {
    assert_error(
        r#"
        int main(void) {
            union 4 foo;
                //^ Expected identifier, but found '4'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_extra_credit_union_var_tag_paren() {
    assert_error(
        r#"
        struct s {
            int y;
        };
        int main(void) {
            union(s) var;
               //^ Expected identifier, but found '('
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_misplaced_storage_class() {
    assert_error(
        r#"
        struct s {
            int a;
        };
        struct static s foo;
             //^^^^^^ Expected identifier, but found 'static'
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_double_semicolon() {
    assert_error(
        r#"
        struct s {
            int a;
            ;
          //^ Expected type specifier
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_empty_member_list() {
    assert_error(
        r#"
        struct s {};
                 //^ Expected struct field but found '}}'
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_extra_semicolon() {
    assert_error(
        r#"
        struct s {
            ;
          //^ Expected type specifier
            int a;
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_kw_wrong_order() {
    assert_error(
        r#"
        
        s struct x { int a; };
      //^ Expected type specifier
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_missing_end_semicolon() {
    assert_error(
        r#"
        struct s {
            int a;
        }
        int main(void) {
      //^^^ Expected ';', but found 'int'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_tag_kw() {
    assert_error(
        r#"
        
        struct for {
             //^^^ Expected identifier, but found 'for'
            int a;
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_decl_two_kws() {
    assert_error(
        r#"
        struct struct s;
             //^^^^^^ Expected identifier, but found 'struct'
        int main(void) {
            return 1;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_initializer() {
    assert_error(
        r#"
        struct a {
            int member = 1;
                     //^ Expected ';', but found '='
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_is_function() {
    assert_error(
        r#"
        struct s {
            int foo(void);
              //^^^ Structs can't have fields
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_name_kw() {
    assert_error(
        r#"
        struct s {
            int return;
              //^^^^^^ Expected identifier, but found 'return'
        }
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_no_declarator() {
    assert_error(
        r#"
        struct s {
            int;
             //^ Expected identifier, but found ';'
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_no_semicolon() {
    assert_error(
        r#"
        struct s {
            int a
        };
      //^ Expected ';', but found '}'
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_no_type() {
    assert_error(
        r#"
        struct s {
            a;
          //^ Expected type specifier
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_struct_member_storage_class() {
    assert_error(
        r#"
        struct y {
            static int a;
          //^^^^^^ Expected type specifier
        };
    "#,
    );
}

#[test]
fn test_invalid_parse_var_decl_bad_tag_1() {
    assert_error(
        r#"
        int main(void) {
            struct 4 foo;
                 //^ Expected identifier, but found '4'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_var_decl_bad_tag_2() {
    assert_error(
        r#"
        struct s {
            int y;
        };
        int main(void) {
            struct(s) var;
                //^ Expected identifier, but found '('
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_var_decl_bad_type_specifier() {
    assert_error(
        r#"
        struct s;
        struct s long a;
               //^^^^ Expected identifier, but found 'long'
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_var_decl_missing_struct_kw() {
    assert_error(
        r#"
        int main(void) {
            struct x;
            x y;
            //^ Expected ';', but found 'y'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_var_decl_two_struct_kws() {
    assert_error(
        r#"
        struct s {
            int a;
        };
        struct struct s x;
             //^^^^^^ Expected identifier, but found 'struct'
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_invalid_parse_var_decl_two_tags() {
    assert_error(
        r#"
        struct x y {
                 //^ Expected ';', but found '{'
            int a;
        };
    "#,
    );
}

#[test]
fn test_invalid_struct_tags_array_of_undeclared() {
    let src = r#"
        int main(void) {
            struct s arr[2];
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ╰── Type
                    │       ╰── Array
                    │           ├── 2
                    │           ╰── Struct [s]
                    ╰── Return
                        ╰── <14> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_cast_undeclared() {
    let src = r#"
        int main(void) {
            (struct s)0;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── <10> Cast
                    │   ├── Target
                    │   │   ╰── Struct [s]
                    │   ╰── Expression
                    │       ╰── <9> Constant Int [0]
                    ╰── Return
                        ╰── <12> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_deref_undeclared() {
    let src = r#"
        int main(void) {
            struct s *ptr = 0;
            *ptr;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── <12> Constant Int [0]
                    ├── <17> Dereference
                    │   ╰── <16> Var [ptr]
                    ╰── Return
                        ╰── <19> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_extra_credit_sizeof_undeclared_union() {
    let src = r#"
        int main(void) {
            return sizeof(union c);
        }
        union c {
            int x;
        };
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <9> SizeOfType
            │               ╰── Union [c]
            ╰── Union [c]
                ╰── Field
                    ├── Name
                    │   ╰── x
                    ╰── Type
                        ╰── Int
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_extra_credit_var_undeclared_union_type() {
    let src = r#"
        int main(void) {
            union s var;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── var
                    │   ╰── Type
                    │       ╰── Union [s]
                    ╰── Return
                        ╰── <11> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_file_scope_var_type_undeclared() {
    let src = r#"
        struct s var;
    "#;
    let expected = r#"
        Program
            ╰── VarDeclaration
                ├── Name
                │   ╰── var
                ╰── Type
                    ╰── Struct [s]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_for_loop_scope() {
    let src = r#"
        int main(void) {
            for (int i = 0; i < 10; i = i + 1) {
                struct s {
                    int a;
                };
            }
            struct s x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <9> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <17>  [<]
                    │   │       ├── <14> Var [i]
                    │   │       ╰── <16> Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <26> Assign [=]
                    │   │       ├── <19> Var [i]
                    │   │       ╰── <25>  [+]
                    │   │           ├── <22> Var [i]
                    │   │           ╰── <24> Constant Int [1]
                    │   ╰── Block
                    │       ╰── Struct [s]
                    │           ╰── Field
                    │               ├── Name
                    │               │   ╰── a
                    │               ╰── Type
                    │                   ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Struct [s]
                    ╰── Return
                        ╰── <41> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_for_loop_scope_2() {
    let src = r#"
        int main(void) {
            void *ptr;
            for (;; ((struct s *)ptr)->i) {
                struct s {
                    int i;
                };
                struct s x = {1};
                ptr = &x;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ╰── Type
                    │       ╰── Pointer
                    │           ╰── Void
                    ╰── For
                        ├── Condition
                        │   ╰── <21> Arrow
                        │       ├── <19> Cast
                        │       │   ├── Target
                        │       │   │   ╰── Pointer
                        │       │   │       ╰── Struct [s]
                        │       │   ╰── Expression
                        │       │       ╰── <17> Var [ptr]
                        │       ╰── i
                        ╰── Block
                            ├── Struct [s]
                            │   ╰── Field
                            │       ├── Name
                            │       │   ╰── i
                            │       ╰── Type
                            │           ╰── Int
                            ├── VarDeclaration
                            │   ├── Name
                            │   │   ╰── x
                            │   ├── Type
                            │   │   ╰── Struct [s]
                            │   ╰── Initializer
                            │       ╰── Compound
                            │           ╰── <32> Constant Int [1]
                            ╰── <42> Assign [=]
                                ├── <37> Var [ptr]
                                ╰── <41> AddressOf
                                    ╰── <40> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_member_type_undeclared() {
    let src = r#"
        struct s {
            struct a b;
        };
    "#;
    let expected = r#"
        Program
            ╰── Struct [s]
                ╰── Field
                    ├── Name
                    │   ╰── b
                    ╰── Type
                        ╰── Struct [a]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_param_undeclared() {
    let src = r#"
        int foo(struct s x) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [foo]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── x
                │       ╰── Type
                │           ╰── Struct [s]
                ╰── Body
                    ╰── Return
                        ╰── <10> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_return_type_undeclared() {
    let src = r#"
        void exit(int status);
        struct s foo(void) {
            exit(0);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ╰── Function [foo]
                ╰── Body
                    ╰── <18> FunctionCall [exit]
                        ╰── <17> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_sizeof_undeclared() {
    let src = r#"
        int main(void) {
            return sizeof(struct c);
        }
        struct c {
            int x;
        };
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <9> SizeOfType
            │               ╰── Struct [c]
            ╰── Struct [c]
                ╰── Field
                    ├── Name
                    │   ╰── x
                    ╰── Type
                        ╰── Int
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_struct_tags_var_type_undeclared() {
    let src = r#"
        int main(void) {
            struct s var;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── var
                    │   ╰── Type
                    │       ╰── Struct [s]
                    ╰── Return
                        ╰── <11> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_bad_union_member_access_nested_non_member() {
    let src = r#"
        struct s {
            int a;
        };
        union u {
            struct s nested;
        };
        int main(void) {
            union u my_union = {{1}};
            return my_union.a;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── Union [u]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── nested
            │       ╰── Type
            │           ╰── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_union
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <23> Constant Int [1]
                    ╰── Return
                        ╰── <31> Dot
                            ├── <29> Var [my_union]
                            ╰── a
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_bad_union_member_access_union_bad_member() {
    let src = r#"
        union s {
            int x;
            int y;
        };
        union t {
            int blah;
            int y;
        };
        int main(void) {
            union s foo = {1};
            return foo.blah;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Union [t]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── blah
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ├── Type
                    │   │   ╰── Union [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <30> Constant Int [1]
                    ╰── Return
                        ╰── <37> Dot
                            ├── <35> Var [foo]
                            ╰── blah
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_bad_union_member_access_union_bad_pointer_member() {
    let src = r#"
        void *malloc(unsigned long size);
        union a {
          int x;
          int y;
        };
        union b {
          int m;
          int n;
        };
        int main(void) {
          union a *ptr = malloc(sizeof(union a));
          ptr->m = 10;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Union [a]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Union [b]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── m
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── n
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Union [a]
                    │   ╰── Initializer
                    │       ╰── <48> FunctionCall [malloc]
                    │           ╰── <47> SizeOfType
                    │               ╰── Union [a]
                    ├── <57> Assign [=]
                    │   ├── <54> Arrow
                    │   │   ├── <52> Var [ptr]
                    │   │   ╰── m
                    │   ╰── <56> Constant Int [10]
                    ╰── Return
                        ╰── <59> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_incompatible_union_types_assign_different_union_type() {
    let src = r#"
        union u1 {int a;};
        union u2 {int a;};
        int main(void){
            union u1 x = {10};
            union u2 y = {11};
            x = y;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── Union [u2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Union [u1]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <22> Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Union [u2]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <30> Constant Int [11]
                    ├── <39> Assign [=]
                    │   ├── <35> Var [x]
                    │   ╰── <38> Var [y]
                    ╰── Return
                        ╰── <41> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_incompatible_union_types_assign_scalar_to_union() {
    let src = r#"
        union u {int a; int b;};
        int main(void) {
            union u x = {1};
            x = 2;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <20> Constant Int [1]
                    ├── <28> Assign [=]
                    │   ├── <25> Var [x]
                    │   ╰── <27> Constant Int [2]
                    ╰── Return
                        ╰── <30> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_incompatible_union_types_return_type_mismatch() {
    let src = r#"
        union u {
            int x;
        };
        union u return_union(void){
            union u {
                int x;
            };
            union u result = {10};
            return result;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── x
            │       ╰── Type
            │           ╰── Int
            ╰── Function [return_union]
                ╰── Body
                    ├── Union [u]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── x
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <23> Constant Int [10]
                    ╰── Return
                        ╰── <28> Var [result]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_incompatible_union_types_union_branch_mismatch() {
    let src = r#"
        int main(void) {
            union u1 {
                int a;
            };
            union u2 {
                int a;
            };
            union u1 x = {10};
            union u2 y = {11};
            1 ? x : y;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Union [u1]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ├── Union [u2]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Union [u1]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <22> Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Union [u2]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <30> Constant Int [11]
                    ├── <39> Conditional [?]
                    │   ├── <34> Constant Int [1]
                    │   ├── Then
                    │   │   ╰── <36> Var [x]
                    │   ╰── Else
                    │       ╰── <38> Var [y]
                    ╰── Return
                        ╰── <41> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_incompatible_union_types_union_pointer_branch_mismatch() {
    let src = r#"
        int main(void) {
            union u1;
            union u2;
            union u1 *ptr1 = 0;
            union u2 *ptr2 = 0;
            1 ? ptr1 : ptr2;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Union [u1]
                    ├── Union [u2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr1
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Union [u1]
                    │   ╰── Initializer
                    │       ╰── <16> Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr2
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Union [u2]
                    │   ╰── Initializer
                    │       ╰── <25> Constant Int [0]
                    ├── <33> Conditional [?]
                    │   ├── <28> Constant Int [1]
                    │   ├── Then
                    │   │   ╰── <30> Var [ptr1]
                    │   ╰── Else
                    │       ╰── <32> Var [ptr2]
                    ╰── Return
                        ╰── <35> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_incomplete_unions_define_incomplete_union() {
    let src = r#"
        union u;
        union u my_union;
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            ╰── VarDeclaration
                ├── Name
                │   ╰── my_union
                ╰── Type
                    ╰── Union [u]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_incomplete_unions_sizeof_incomplete_union_type() {
    let src = r#"
        int main(void) {
            union u;
            return sizeof(union u);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Union [u]
                    ╰── Return
                        ╰── <11> SizeOfType
                            ╰── Union [u]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_invalid_union_lvalues_address_of_non_lvalue_union_member() {
    let src = r#"
        union u {
            int arr[3];
            double d;
        };
        union u get_union(void) {
            union u result = {{1, 2, 3}, 4.0};
            return result;
        }
        int main(void) {
            int *ptr[3] = &get_union().arr;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Function [get_union]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Union [u]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <24> Constant Int [1]
            │       │           │   ├── <26> Constant Int [2]
            │       │           │   ╰── <28> Constant Int [3]
            │       │           ╰── <31> Constant Double [+4e0]
            │       ╰── Return
            │           ╰── <36> Var [result]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Pointer
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── <57> AddressOf
                    │           ╰── <56> Dot
                    │               ├── <54> FunctionCall [get_union]
                    │               ╰── arr
                    ╰── Return
                        ╰── <60> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_invalid_union_lvalues_assign_non_lvalue_union_member() {
    let src = r#"
        
        union inner {
            int y;
            long z;
        };
        union u {
            int x;
            union inner i;
        };
        union u return_union(void){
            union u result = {1};
            return result;
        }
        int main(void) {
            return_union().i.y = 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── y
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── z
            │       ╰── Type
            │           ╰── Long
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Union [inner]
            ├── Function [return_union]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Union [u]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <32> Constant Int [1]
            │       ╰── Return
            │           ╰── <37> Var [result]
            ╰── Function [main]
                ╰── Body
                    ├── <54> Assign [=]
                    │   ├── <51> Dot
                    │   │   ├── <49> Dot
                    │   │   │   ├── <47> FunctionCall [return_union]
                    │   │   │   ╰── i
                    │   │   ╰── y
                    │   ╰── <53> Constant Int [1]
                    ╰── Return
                        ╰── <56> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_bitwise_op_structure() {
    let src = r#"
        
        struct s {int i;};
        int main(void) {
            struct s x = {100};
            int i = 1000;
            x & i;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [100]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <23> Constant Int [1000]
                    ├── <31>  [&]
                    │   ├── <27> Var [x]
                    │   ╰── <30> Var [i]
                    ╰── Return
                        ╰── <33> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_compound_assign_struct_rval() {
    let src = r#"
        
        struct s { int i; };
        int main(void) {
            int i = 100;
            struct s x = { 100 };
            i += x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <15> Constant Int [100]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <22> Constant Int [100]
                    ├── <31> Assign [+=]
                    │   ├── <27> Var [i]
                    │   ╰── <30> Var [x]
                    ╰── Return
                        ╰── <33> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_compound_assign_to_nested_struct() {
    let src = r#"
        struct inner {
            int i;
        };
        struct outer {
            struct inner s;
        };
        int main(void) {
            struct outer x = {{1}};
            x.s *= 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <23> Constant Int [1]
                    ├── <34> Assign [*=]
                    │   ├── <31> Dot
                    │   │   ├── <29> Var [x]
                    │   │   ╰── s
                    │   ╰── <33> Constant Int [10]
                    ╰── Return
                        ╰── <36> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_compound_assign_to_struct() {
    let src = r#"
        
        struct s { int i; };
        int main(void) {
            struct s x = {10};
            x += 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [10]
                    ├── <24> Assign [+=]
                    │   ├── <21> Var [x]
                    │   ╰── <23> Constant Int [10]
                    ╰── Return
                        ╰── <26> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_duplicate_struct_types_after_label() {
    let src = r#"
        int main(void) {
            struct s {
                int a;
            };
        foo:;
            struct s {
                int b;
            };
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ├── Label [foo]
                    │   ╰── Empty
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── b
                    │       ╰── Type
                    │           ╰── Int
                    ╰── Return
                        ╰── <21> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_postfix_decr_struct_arrow() {
    let src = r#"
        
        struct inner {int i;};
        struct outer{struct inner s;};
        int main(void) {
            struct outer my_struct = {{1}};
            struct outer *ptr = &my_struct;
            ptr->s--;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <23> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── <36> AddressOf
                    │           ╰── <35> Var [my_struct]
                    ├── <44> Postfix [--]
                    │   ╰── <42> Arrow
                    │       ├── <40> Var [ptr]
                    │       ╰── s
                    ╰── Return
                        ╰── <46> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_postfix_incr_struct() {
    let src = r#"
        
        struct s {
            int i;
        };
        int main(void) {
            struct s my_struct = {1};
            my_struct++;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ├── <23> Postfix [++]
                    │   ╰── <21> Var [my_struct]
                    ╰── Return
                        ╰── <25> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_prefix_decr_struct() {
    let src = r#"
        
        struct s {
            int i;
        };
        int main(void) {
            struct s my_struct = {1};
            --my_struct;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ├── <23> Unary [--]
                    │   ╰── <22> Var [my_struct]
                    ╰── Return
                        ╰── <25> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_prefix_incr_nested_struct() {
    let src = r#"
        
        struct inner {
            int i;
        };
        struct outer {
            struct inner s;
        };
        int main(void) {
            struct outer x = {{1}};
            ++x.s;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <23> Constant Int [1]
                    ├── <33> Unary [++]
                    │   ╰── <32> Dot
                    │       ├── <30> Var [x]
                    │       ╰── s
                    ╰── Return
                        ╰── <35> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_other_features_switch_on_struct() {
    let src = r#"
        
        struct s {
            int i;
        };
        int main(void) {
            struct s x = {1};
            switch (x) {
                case 1:
                    return 0;
                default:
                    return 1;
            }
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ╰── Switch
                        ├── Expression
                        │   ╰── <21> Var [x]
                        ╰── Block
                            ├── Case [1]
                            │   ╰── Return
                            │       ╰── <23> Constant Int [0]
                            ╰── Default
                                ╰── Return
                                    ╰── <26> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_scalar_required_cast_between_unions() {
    let src = r#"
        union u1 {
            int a;
        };
        int main(void){
            union u1 var = {10};
            (union u1) var;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── var
                    │   ├── Type
                    │   │   ╰── Union [u1]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [10]
                    ├── <25> Cast
                    │   ├── Target
                    │   │   ╰── Union [u1]
                    │   ╰── Expression
                    │       ╰── <24> Var [var]
                    ╰── Return
                        ╰── <27> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_scalar_required_cast_union_to_int() {
    let src = r#"
        
        union u {
            int i;
        };
        int main(void) {
            union u x = {10};
            return (int)x;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [10]
                    ╰── Return
                        ╰── <24> Cast
                            ├── Target
                            │   ╰── Int
                            ╰── Expression
                                ╰── <23> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_scalar_required_compare_unions() {
    let src = r#"
        union u { long l; };
        int main(void){
            union u x = {1};
            x == x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ├── <25>  [==]
                    │   ├── <21> Var [x]
                    │   ╰── <24> Var [x]
                    ╰── Return
                        ╰── <27> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_scalar_required_switch_on_union() {
    let src = r#"
        
        union s {
            int i;
        };
        int main(void) {
            union s x = {1};
            switch (x) {
                case 1:
                    return 0;
                default:
                    return 1;
            }
        }
    "#;
    let expected = r#"
        Program
            ├── Union [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Union [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ╰── Switch
                        ├── Expression
                        │   ╰── <21> Var [x]
                        ╰── Block
                            ├── Case [1]
                            │   ╰── Return
                            │       ╰── <23> Constant Int [0]
                            ╰── Default
                                ╰── Return
                                    ╰── <26> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_scalar_required_union_as_controlling_expression() {
    let src = r#"
        union u {int x;};
        int main(void) {
            union u my_union = {10};
            if (my_union) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── x
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_union
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <21> Var [my_union]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <22> Constant Int [1]
                    ╰── Return
                        ╰── <27> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_initializers_initializer_too_long() {
    let src = r#"
        union u {
            int a;
            long b;
        };
        int main(void){
            union u x = {1, 2};
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Long
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <20> Constant Int [1]
                    │           ╰── <22> Constant Int [2]
                    ╰── Return
                        ╰── <26> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_initializers_nested_init_wrong_type() {
    let src = r#"
        union u {
            double d;
            int i;
            char c;
        };
        struct s {
            int *ptr;
            union u arr[3];
        };
        int main(void) {
            int x;
            struct s my_struct = {&x, {{1.0}, {2.0}, {&x}}};
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Union [u]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Int
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── my_struct
                        ├── Type
                        │   ╰── Struct [s]
                        ╰── Initializer
                            ╰── Compound
                                ├── <46> AddressOf
                                │   ╰── <45> Var [x]
                                ╰── Compound
                                    ├── Compound
                                    │   ╰── <48> Constant Double [+1e0]
                                    ├── Compound
                                    │   ╰── <51> Constant Double [+2e0]
                                    ╰── Compound
                                        ╰── <56> AddressOf
                                            ╰── <55> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_initializers_nested_union_init_too_long() {
    let src = r#"
        int main(void) {
            union u {
                double d; int x;
            };
            union u array_of_unions[3] = {
                {1.0, 2.0, 3.0}
            };
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Union [u]
                    │   ├── Field
                    │   │   ├── Name
                    │   │   │   ╰── d
                    │   │   ╰── Type
                    │   │       ╰── Double
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── x
                    │       ╰── Type
                    │           ╰── Int
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── array_of_unions
                        ├── Type
                        │   ╰── Array
                        │       ├── 3
                        │       ╰── Union [u]
                        ╰── Initializer
                            ╰── Compound
                                ╰── Compound
                                    ├── <23> Constant Double [+1e0]
                                    ├── <25> Constant Double [+2e0]
                                    ╰── <27> Constant Double [+3e0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_initializers_scalar_union_initializer() {
    let src = r#"
        
        union u {int a;};
        int main(void){
            union u my_union = 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_union
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── <16> Constant Int [1]
                    ╰── Return
                        ╰── <19> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_initializers_static_aggregate_init_wrong_type() {
    let src = r#"
        struct one_elem {
            long l;
        };
        struct three_elems {
            int one;
            int two;
            int three;
        };
        union one_or_three_elems {
            struct one_elem a;
            struct three_elems b;
        };
        int main(void) {
            static union one_or_three_elems my_union = {{1, 2, 3}};
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [one_elem]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Struct [three_elems]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three
            │       ╰── Type
            │           ╰── Int
            ├── Union [one_or_three_elems]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Struct [one_elem]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [three_elems]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_union
                    │   ├── Type
                    │   │   ╰── Union [one_or_three_elems]
                    │   ├── Initializer
                    │   │   ╰── Compound
                    │   │       ╰── Compound
                    │   │           ├── <43> Constant Int [1]
                    │   │           ├── <45> Constant Int [2]
                    │   │           ╰── <47> Constant Int [3]
                    │   ╰── Static
                    ╰── Return
                        ╰── <52> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_initializers_static_nested_init_not_const() {
    let src = r#"
        union u {
            long l;
        };
        struct has_union {
            int a;
            union u b;
            char c;
        };
        long some_var = 10l;
        struct has_union some_struct = {1,
                                        {some_var},
                                        'a'};
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Struct [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Union [u]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── some_var
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── <25> Constant Long [10]
            ╰── VarDeclaration
                ├── Name
                │   ╰── some_struct
                ├── Type
                │   ╰── Struct [has_union]
                ╰── Initializer
                    ╰── Compound
                        ├── <32> Constant Int [1]
                        ├── Compound
                        │   ╰── <35> Var [some_var]
                        ╰── <38> Constant Int [97]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_initializers_static_nested_init_too_long() {
    let src = r#"
        
        union u {
            int a;
            long b;
        };
        struct s {
            int tag;
            union u contents;
        };
        struct s my_struct = {
            10,
            {1, 2}
        };
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Long
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── tag
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── contents
            │       ╰── Type
            │           ╰── Union [u]
            ╰── VarDeclaration
                ├── Name
                │   ╰── my_struct
                ├── Type
                │   ╰── Struct [s]
                ╰── Initializer
                    ╰── Compound
                        ├── <26> Constant Int [10]
                        ╰── Compound
                            ├── <28> Constant Int [1]
                            ╰── <30> Constant Int [2]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_initializers_static_scalar_union_initializer() {
    let src = r#"
        
        union u {int a;};
        int main(void){
            static union u my_union = 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_union
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ├── Initializer
                    │   │   ╰── <17> Constant Int [1]
                    │   ╰── Static
                    ╰── Return
                        ╰── <20> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_initializers_static_too_long() {
    let src = r#"
        union u {
            int a;
            long b;
        };
        union u x = {1, 2};
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Union [u]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <15> Constant Int [1]
            │           ╰── <17> Constant Int [2]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <26> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_initializers_static_union_init_not_constant() {
    let src = r#"
        union u {int a; int b;};
        int main(void){
            int i = 10;
            static union u my_union = {i};
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <19> Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_union
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ├── Initializer
                    │   │   ╰── Compound
                    │   │       ╰── <28> Var [i]
                    │   ╰── Static
                    ╰── Return
                        ╰── <32> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_initializers_static_union_init_wrong_type() {
    let src = r#"
        union u {
            signed char *ptr;
            double d;
        };
        int main(void) {
            static union u my_union = {"A char array"};
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Signed Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ╰── Function [main]
                ╰── Body
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── my_union
                        ├── Type
                        │   ╰── Union [u]
                        ├── Initializer
                        │   ╰── Compound
                        │       ╰── <23> "A char array"
                        ╰── Static
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_initializers_union_init_wrong_type() {
    let src = r#"
        union u {
            long *ptr;
            double d;
        };
        int main(void) {
            union u my_union = {1.0};
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ╰── Function [main]
                ╰── Body
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── my_union
                        ├── Type
                        │   ╰── Union [u]
                        ╰── Initializer
                            ╰── Compound
                                ╰── <22> Constant Double [+1e0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_struct_conflicts_conflicting_tag_decl_and_use() {
    let src = r#"
        struct x { int a; };
        int main(void) {
            union x foo;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [x]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ╰── Type
                    │       ╰── Union [x]
                    ╰── Return
                        ╰── <17> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_struct_conflicts_conflicting_tag_decl_and_use_self_reference(
) {
    let src = r#"
        int main(void) {
            struct s;
            {
                union s* ptr;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    ├── Block
                    │   ╰── VarDeclaration
                    │       ├── Name
                    │       │   ╰── ptr
                    │       ╰── Type
                    │           ╰── Pointer
                    │               ╰── Union [s]
                    ╰── Return
                        ╰── <17> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_struct_conflicts_conflicting_tag_declarations() {
    let src = r#"
        
        struct x;
        union x;
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [x]
            ├── Union [x]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <10> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_struct_conflicts_struct_shadowed_by_union() {
    let src = r#"
        int main(void) {
            struct tag {int a;};
            {
                union tag {long l;};
                struct tag *x;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [tag]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ├── Block
                    │   ├── Union [tag]
                    │   │   ╰── Field
                    │   │       ├── Name
                    │   │       │   ╰── l
                    │   │       ╰── Type
                    │   │           ╰── Long
                    │   ╰── VarDeclaration
                    │       ├── Name
                    │       │   ╰── x
                    │       ╰── Type
                    │           ╰── Pointer
                    │               ╰── Struct [tag]
                    ╰── Return
                        ╰── <27> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_struct_conflicts_tag_decl_conflicts_with_def() {
    let src = r#"
        int main(void) {
            struct s;
            union s {
                int a;
            };
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    ├── Union [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ╰── Return
                        ╰── <14> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_struct_conflicts_tag_def_conflicts_with_decl() {
    let src = r#"
        int main(void) {
            union s {
                int a;
            };
            struct s;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Union [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ├── Struct [s]
                    ╰── Return
                        ╰── <14> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_struct_conflicts_union_shadowed_by_incomplete_struct() {
    let src = r#"
        int main(void) {
            union tag {int a;};
            {
                struct tag;
                union tag *x;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Union [tag]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ├── Block
                    │   ├── Struct [tag]
                    │   ╰── VarDeclaration
                    │       ├── Name
                    │       │   ╰── x
                    │       ╰── Type
                    │           ╰── Pointer
                    │               ╰── Union [tag]
                    ╰── Return
                        ╰── <23> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_tag_resolution_address_of_wrong_union_type() {
    let src = r#"
        union u {
            int i;
            char c;
        };
        int main(void) {
            union u foo = {0};
            union u {
                int i;
                char c;
            };
            union u *ptr = &foo;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <20> Constant Int [0]
                    ├── Union [u]
                    │   ├── Field
                    │   │   ├── Name
                    │   │   │   ╰── i
                    │   │   ╰── Type
                    │   │       ╰── Int
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── c
                    │       ╰── Type
                    │           ╰── Char
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── ptr
                        ├── Type
                        │   ╰── Pointer
                        │       ╰── Union [u]
                        ╰── Initializer
                            ╰── <42> AddressOf
                                ╰── <41> Var [foo]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_tag_resolution_compare_struct_and_union_ptrs() {
    let src = r#"
        int main(void) {
            struct tag;
            struct tag *struct_ptr = 0;
            {
                union tag;
                union tag *union_ptr = 0;
                return (struct_ptr == union_ptr);
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [tag]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── struct_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [tag]
                    │   ╰── Initializer
                    │       ╰── <14> Constant Int [0]
                    ╰── Block
                        ├── Union [tag]
                        ├── VarDeclaration
                        │   ├── Name
                        │   │   ╰── union_ptr
                        │   ├── Type
                        │   │   ╰── Pointer
                        │   │       ╰── Union [tag]
                        │   ╰── Initializer
                        │       ╰── <25> Constant Int [0]
                        ╰── Return
                            ╰── <34>  [==]
                                ├── <29> Var [struct_ptr]
                                ╰── <32> Var [union_ptr]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_tag_resolution_conflicting_param_union_types() {
    let src = r#"
        struct s;
        int foo(struct s x);
        int main(void) {
            union s;
            int foo(union s x);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [foo]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── x
            │           ╰── Type
            │               ╰── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ├── Union [s]
                    ├── Function [foo]
                    │   ╰── Parameters
                    │       ╰── Param
                    │           ├── Name
                    │           │   ╰── x
                    │           ╰── Type
                    │               ╰── Union [s]
                    ╰── Return
                        ╰── <30> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_tag_resolution_distinct_union_types() {
    let src = r#"
        int foo(void) {
            union s {
                int a;
                long b;
            };
            union s result = {1};
            return result.a;
        }
        int main(void) {
            union s;
            union s blah = {foo()};
            return blah.a;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ├── Union [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── a
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── b
            │       │       ╰── Type
            │       │           ╰── Long
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Union [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <20> Constant Int [1]
            │       ╰── Return
            │           ╰── <27> Dot
            │               ├── <25> Var [result]
            │               ╰── a
            ╰── Function [main]
                ╰── Body
                    ├── Union [s]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── blah
                    │   ├── Type
                    │   │   ╰── Union [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <43> FunctionCall [foo]
                    ╰── Return
                        ╰── <50> Dot
                            ├── <48> Var [blah]
                            ╰── a
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_tag_resolution_union_type_shadows_struct() {
    let src = r#"
        struct u {
            int a;
        };
        int main(void) {
            union u;
            union u my_union;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [u]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── Union [u]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_union
                    │   ╰── Type
                    │       ╰── Union [u]
                    ╰── Return
                        ╰── <19> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_tag_resolution_union_wrong_member() {
    let src = r#"
        union u {
            int a;
        };
        int main(void) {
            union u foo = {1};
            union u {
                int b;
            };
            return foo.b;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ├── Union [u]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── b
                    │       ╰── Type
                    │           ╰── Int
                    ╰── Return
                        ╰── <29> Dot
                            ├── <27> Var [foo]
                            ╰── b
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_type_declarations_array_of_incomplete_union_type() {
    let src = r#"
        union u;
        int main(void) {
            union u(*arr)[3];
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ╰── Type
                    │       ╰── Pointer
                    │           ╰── Array
                    │               ├── 3
                    │               ╰── Union [u]
                    ╰── Return
                        ╰── <19> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_type_declarations_duplicate_union_def() {
    let src = r#"
        int main(void) {
            union u {int a;};
            union u {int a;};
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Union [u]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ├── Union [u]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ╰── Return
                        ╰── <18> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_type_declarations_incomplete_union_member() {
    let src = r#"
        
        struct s;
        union u {
            struct s bad_struct;
        };
        int main(void){
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Union [u]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── bad_struct
            │       ╰── Type
            │           ╰── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <15> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_type_declarations_member_name_conflicts() {
    let src = r#"
        
        union u {
            int a;
            int a;
        };
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <16> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_extra_credit_union_type_declarations_union_self_reference() {
    let src = r#"
        union u {
            int i;
            union u self;
        };
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── self
            │       ╰── Type
            │           ╰── Union [u]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <17> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_assign_different_pointer_type() {
    let src = r#"
        struct s1;
        struct s2;
        int main(void) {
            struct s1 *p1 = 0;
            struct s2 *p2 = 0;
            p2 = p1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s1]
            ├── Struct [s2]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── p1
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s1]
                    │   ╰── Initializer
                    │       ╰── <16> Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── p2
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s2]
                    │   ╰── Initializer
                    │       ╰── <25> Constant Int [0]
                    ├── <33> Assign [=]
                    │   ├── <29> Var [p2]
                    │   ╰── <32> Var [p1]
                    ╰── Return
                        ╰── <35> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_assign_different_struct_type() {
    let src = r#"
        struct s1 {
            int field;
        };
        struct s2 {
            int field;
        };
        int main(void) {
            struct s1 a = {1} ;
            struct s2 b;
            b = a;
            return b.field;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── field
            │       ╰── Type
            │           ╰── Int
            ├── Struct [s2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── field
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Struct [s1]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <22> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ╰── Type
                    │       ╰── Struct [s2]
                    ├── <36> Assign [=]
                    │   ├── <32> Var [b]
                    │   ╰── <35> Var [a]
                    ╰── Return
                        ╰── <41> Dot
                            ├── <39> Var [b]
                            ╰── field
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_branch_mismatch() {
    let src = r#"
        struct s1 {
          int a;
        };
        struct s2 {
          int b;
        };
        int main(void) {
          struct s1 x = {1};
          struct s2 y = {2};
          1 ? x : y;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── Struct [s2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s1]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <22> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Struct [s2]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <30> Constant Int [2]
                    ╰── <39> Conditional [?]
                        ├── <34> Constant Int [1]
                        ├── Then
                        │   ╰── <36> Var [x]
                        ╰── Else
                            ╰── <38> Var [y]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_branch_mismatch_2() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s x = {1};
            1 ? x : (void) 2;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ╰── <27> Conditional [?]
                        ├── <20> Constant Int [1]
                        ├── Then
                        │   ╰── <22> Var [x]
                        ╰── Else
                            ╰── <26> Cast
                                ├── Target
                                │   ╰── Void
                                ╰── Expression
                                    ╰── <25> Constant Int [2]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_compare_different_struct_pointers() {
    let src = r#"
        struct s1;
        struct s2;
        struct s1 *get_s1_ptr(void);
        struct s2 *get_s2_ptr(void);
        int main(void) {
          struct s1 *s1_ptr = get_s1_ptr();
          struct s2 *s2_ptr = get_s2_ptr();
          return s1_ptr == s2_ptr;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s1]
            ├── Struct [s2]
            ├── Function [get_s1_ptr]
            ├── Function [get_s2_ptr]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s1_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s1]
                    │   ╰── Initializer
                    │       ╰── <35> FunctionCall [get_s1_ptr]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s2_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s2]
                    │   ╰── Initializer
                    │       ╰── <45> FunctionCall [get_s2_ptr]
                    ╰── Return
                        ╰── <53>  [==]
                            ├── <49> Var [s1_ptr]
                            ╰── <52> Var [s2_ptr]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_return_wrong_struct_type() {
    let src = r#"
        struct one {
          int x;
          int y;
        };
        struct two {
          int a;
          int b;
        };
        struct one return_struct(void) {
            struct two retval = {1, 2};
            return retval;
        }
        int main(void) {
            return return_struct().x;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [one]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Struct [two]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Function [return_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [two]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <31> Constant Int [1]
            │       │           ╰── <33> Constant Int [2]
            │       ╰── Return
            │           ╰── <38> Var [retval]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <50> Dot
                            ├── <48> FunctionCall [return_struct]
                            ╰── x
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_struct_param_mismatch() {
    let src = r#"
        struct one {
          int x;
          int y;
        };
        struct two {
          int a;
          int b;
        };
        int take_struct_param(struct one param) {
            return param.x;
        }
        int main(void) {
            struct two arg = {1, 2};
            return take_struct_param(arg);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [one]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Struct [two]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Function [take_struct_param]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── param
            │   │       ╰── Type
            │   │           ╰── Struct [one]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <33> Dot
            │               ├── <31> Var [param]
            │               ╰── x
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arg
                    │   ├── Type
                    │   │   ╰── Struct [two]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <46> Constant Int [1]
                    │           ╰── <48> Constant Int [2]
                    ╰── Return
                        ╰── <55> FunctionCall [take_struct_param]
                            ╰── <54> Var [arg]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_incompatible_types_struct_pointer_param_mismatch() {
    let src = r#"
        struct s1 {
            int a;
        };
        struct s2 {
            int a;
        };
        int get_a(struct s1 *ptr) {
            return ptr->a;
        }
        int main(void) {
            struct s2 arg = {1};
            return get_a(&arg);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── Struct [s2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── Function [get_a]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [s1]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <27> Arrow
            │               ├── <25> Var [ptr]
            │               ╰── a
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arg
                    │   ├── Type
                    │   │   ╰── Struct [s2]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <40> Constant Int [1]
                    ╰── Return
                        ╰── <48> FunctionCall [get_a]
                            ╰── <47> AddressOf
                                ╰── <46> Var [arg]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_compound_initializer_too_long() {
    let src = r#"
        struct pair {
            int a;
            int b;
        };
        int main(void) {
            struct pair p = {1, 2, 3};
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── p
                    │   ├── Type
                    │   │   ╰── Struct [pair]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <20> Constant Int [1]
                    │           ├── <22> Constant Int [2]
                    │           ╰── <24> Constant Int [3]
                    ╰── Return
                        ╰── <28> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_init_struct_with_string() {
    let src = r#"
        struct chars {
            char a;
            char b;
            char c;
            char null;
        };
        int main(void) {
            struct chars my_chars = "abc";
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [chars]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── null
            │       ╰── Type
            │           ╰── Char
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_chars
                    │   ├── Type
                    │   │   ╰── Struct [chars]
                    │   ╰── Initializer
                    │       ╰── <28> "abc"
                    ╰── Return
                        ╰── <31> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_initialize_nested_static_struct_member_wrong_type() {
    let src = r#"
        struct s {
          double d;
          void *arr[3];
        };
        struct s x = {0.0, {1.0}};
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Pointer
            │                   ╰── Void
            ╰── VarDeclaration
                ├── Name
                │   ╰── x
                ├── Type
                │   ╰── Struct [s]
                ╰── Initializer
                    ╰── Compound
                        ├── <20> Constant Double [+0e0]
                        ╰── Compound
                            ╰── <22> Constant Double [+1e0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_initialize_static_struct_with_zero() {
    let src = r#"
        struct s {
            int a;
        };
        struct s x = 0;
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── VarDeclaration
                ├── Name
                │   ╰── x
                ├── Type
                │   ╰── Struct [s]
                ╰── Initializer
                    ╰── <11> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_initialize_struct_member_wrong_type() {
    let src = r#"
        struct s {
            signed char *char_ptr;
        };
        int main(void) {
            struct s x = {"It's a string"};
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── char_ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Signed Char
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <18> "It's a string"
                    ╰── Return
                        ╰── <22> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_initialize_struct_with_scalar() {
    let src = r#"
        int main(void) {
            struct pair {
                int x;
                int y;
            };
            struct pair p = 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [pair]
                    │   ├── Field
                    │   │   ├── Name
                    │   │   │   ╰── x
                    │   │   ╰── Type
                    │   │       ╰── Int
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── y
                    │       ╰── Type
                    │           ╰── Int
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── p
                        ├── Type
                        │   ╰── Struct [pair]
                        ╰── Initializer
                            ╰── <20> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_initialize_struct_wrong_type() {
    let src = r#"
        struct one {
          int x;
          int y;
        };
        struct two {
          int a;
          int b;
        };
        int main(void) {
          struct one x = {1, 2};
          struct two y = x;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [one]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Struct [two]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [one]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <30> Constant Int [1]
                    │           ╰── <32> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Struct [two]
                    │   ╰── Initializer
                    │       ╰── <41> Var [x]
                    ╰── Return
                        ╰── <44> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_nested_compound_initializer_too_long() {
    let src = r#"
        struct inner {
            int i;
        };
        struct outer {
            struct inner foo;
        };
        int main(void) {
            struct outer x = {{1, 2}};
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── foo
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <23> Constant Int [1]
                    │               ╰── <25> Constant Int [2]
                    ╰── Return
                        ╰── <30> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_nested_static_compound_initializer_too_long() {
    let src = r#"
        struct inner {
            int i;
        };
        struct outer {
            struct inner foo;
        };
        struct outer x = {{1, 2}};
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── foo
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── VarDeclaration
                ├── Name
                │   ╰── x
                ├── Type
                │   ╰── Struct [outer]
                ╰── Initializer
                    ╰── Compound
                        ╰── Compound
                            ├── <18> Constant Int [1]
                            ╰── <20> Constant Int [2]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_nested_struct_initializer_wrong_type() {
    let src = r#"
        struct inner {
          int a;
          int b;
        };
        struct outer {
          struct inner x;
        };
        int main(void) {
          struct outer x = {{1, 2}};
          struct outer y = {1, x};
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── x
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <27> Constant Int [1]
                    │               ╰── <29> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <38> Constant Int [1]
                    │           ╰── <41> Var [x]
                    ╰── Return
                        ╰── <45> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_non_constant_static_elem_init() {
    let src = r#"
        struct pair {
          int a;
          int b;
        };
        struct pair x = {1, 2};
        struct outer {
            double d;
            struct pair inner;
        };
        struct outer y = {1.0, x};
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [pair]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <15> Constant Int [1]
            │           ╰── <17> Constant Int [2]
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── inner
            │       ╰── Type
            │           ╰── Struct [pair]
            ╰── VarDeclaration
                ├── Name
                │   ╰── y
                ├── Type
                │   ╰── Struct [outer]
                ╰── Initializer
                    ╰── Compound
                        ├── <36> Constant Double [+1e0]
                        ╰── <39> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_non_constant_static_init() {
    let src = r#"
        struct pair {
          int a;
          int b;
        };
        struct pair x = {1, 2};
        struct pair y = x;
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [pair]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <15> Constant Int [1]
            │           ╰── <17> Constant Int [2]
            ╰── VarDeclaration
                ├── Name
                │   ╰── y
                ├── Type
                │   ╰── Struct [pair]
                ╰── Initializer
                    ╰── <26> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_initializers_static_initializer_too_long() {
    let src = r#"
        struct pair {
            int a;
            int b;
        };
        struct pair p = {1, 2, 3};
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── VarDeclaration
                ├── Name
                │   ╰── p
                ├── Type
                │   ╰── Struct [pair]
                ╰── Initializer
                    ╰── Compound
                        ├── <15> Constant Int [1]
                        ├── <17> Constant Int [2]
                        ╰── <19> Constant Int [3]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_assign_to_incomplete_var() {
    let src = r#"
        struct s;
        extern struct s x;
        extern struct s y;
        int main(void) {
          x = y;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── y
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ├── <25> Assign [=]
                    │   ├── <21> Var [x]
                    │   ╰── <24> Var [y]
                    ╰── Return
                        ╰── <27> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_cast_incomplete_struct() {
    let src = r#"
        struct s;
        extern struct s v;
        int main(void) {
          (void)v;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── v
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ├── <18> Cast
                    │   ├── Target
                    │   │   ╰── Void
                    │   ╰── Expression
                    │       ╰── <17> Var [v]
                    ╰── Return
                        ╰── <20> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_deref_incomplete_struct_pointer() {
    let src = r#"
        struct s;
        struct s *ptr = 0;
        int main(void) {
          *ptr;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── <9> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <19> Dereference
                    │   ╰── <18> Var [ptr]
                    ╰── Return
                        ╰── <21> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_arg_funcall() {
    let src = r#"
        struct s;
        void f(struct s param);
        extern struct s extern_var;
        int main(void) {
          f(extern_var);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [f]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── param
            │           ╰── Type
            │               ╰── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── extern_var
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── <27> FunctionCall [f]
                        ╰── <26> Var [extern_var]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_array_element() {
    let src = r#"
        struct s;
        struct s arr[3];
        struct s {
            int a;
            int b;
        };
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── arr
            │   ╰── Type
            │       ╰── Array
            │           ├── 3
            │           ╰── Struct [s]
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <26> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_local_var() {
    let src = r#"
        struct s;
        int main(void) {
          struct s v;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── v
                    │   ╰── Type
                    │       ╰── Struct [s]
                    ╰── Return
                        ╰── <13> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_param() {
    let src = r#"
        struct s;
        int foo(struct s x) { return 0; }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ╰── Function [foo]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── x
                │       ╰── Type
                │           ╰── Struct [s]
                ╰── Body
                    ╰── Return
                        ╰── <12> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_ptr_addition() {
    let src = r#"
        struct s;
        extern struct s *ptr;
        int main(void) {
          return ptr + 0 == ptr;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <24>  [==]
                            ├── <20>  [+]
                            │   ├── <17> Var [ptr]
                            │   ╰── <19> Constant Int [0]
                            ╰── <23> Var [ptr]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_ptr_subtraction() {
    let src = r#"
        struct s;
        extern struct s *ptr;
        int main(void) {
          return (ptr - ptr) == 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <25>  [==]
                            ├── <22>  [-]
                            │   ├── <17> Var [ptr]
                            │   ╰── <20> Var [ptr]
                            ╰── <24> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_return_type_fun_def() {
    let src = r#"
        void exit(int status);
        struct s;
        struct s return_struct_def(void) {
          exit(0);
        }
        int main(void) { return 0; }
    "#;
    let expected = r#"
        Program
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Struct [s]
            ├── Function [return_struct_def]
            │   ╰── Body
            │       ╰── <20> FunctionCall [exit]
            │           ╰── <19> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <29> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_return_type_funcall() {
    let src = r#"
        struct s;
        struct s f(void);
        int main(void) {
          f();
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [f]
            ╰── Function [main]
                ╰── Body
                    ├── <16> FunctionCall [f]
                    ╰── Return
                        ╰── <18> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_struct_conditional() {
    let src = r#"
        struct s;
        extern struct s v1;
        extern struct s v2;
        int main(void) {
          1 ? v1 : v2;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── v1
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── v2
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── <25> Conditional [?]
                        ├── <20> Constant Int [1]
                        ├── Then
                        │   ╰── <22> Var [v1]
                        ╰── Else
                            ╰── <24> Var [v2]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_struct_full_expr() {
    let src = r#"
        struct s;
        extern struct s x;
        int main(void) {
          for (x;;)
            ;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ├── For
                    │   ├── Init
                    │   │   ╰── <15> Var [x]
                    │   ╰── Empty
                    ╰── Return
                        ╰── <18> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_struct_member() {
    let src = r#"
        struct s;
        extern struct s foo;
        int main(void) {
          return foo.a;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <17> Dot
                            ├── <15> Var [foo]
                            ╰── a
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_subscript() {
    let src = r#"
        struct s;
        extern struct s *ptr;
        int main(void) { ptr[0]; }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── <19> Subscript
                        ├── <17> Var [ptr]
                        ╰── <18> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_incomplete_tentative_def() {
    let src = r#"
        struct s;
        static struct s x;
        int main(void) { return 0; }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Static
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <14> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_initialize_incomplete() {
    let src = r#"
        struct s;
        extern struct s x = {1};
        int main(void) { return 0; }
        struct s {
          int a;
        };
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ├── Initializer
            │   │   ╰── Compound
            │   │       ╰── <8> Constant Int [1]
            │   ╰── Extern
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <17> Constant Int [0]
            ╰── Struct [s]
                ╰── Field
                    ├── Name
                    │   ╰── a
                    ╰── Type
                        ╰── Int
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_sizeof_incomplete() {
    let src = r#"
        struct s;
        int main(void) {
          return sizeof(struct s);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11> SizeOfType
                            ╰── Struct [s]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_incomplete_structs_sizeof_incomplete_expr() {
    let src = r#"
        struct s;
        struct s *get_ptr(void);
        int main(void) {
            struct s *struct_ptr = get_ptr();
            return sizeof(*struct_ptr);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [get_ptr]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── struct_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── <24> FunctionCall [get_ptr]
                    ╰── Return
                        ╰── <31> SizeOfExpr
                            ╰── <30> Dereference
                                ╰── <28> Var [struct_ptr]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_lvalues_address_of_non_lvalue() {
    let src = r#"
        struct s {
          int arr[3];
          double d;
        };
        int main(void) {
          struct s x = {{1, 2, 3}, 4.0};
          struct s y = {{9, 8, 7}, 6.0};
          int *arr[3] = &((1 ? x : y).arr);
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <23> Constant Int [1]
                    │           │   ├── <25> Constant Int [2]
                    │           │   ╰── <27> Constant Int [3]
                    │           ╰── <30> Constant Double [+4e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <38> Constant Int [9]
                    │           │   ├── <40> Constant Int [8]
                    │           │   ╰── <42> Constant Int [7]
                    │           ╰── <45> Constant Double [+6e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Pointer
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── <67> AddressOf
                    │           ╰── <66> Dot
                    │               ├── <63> Conditional [?]
                    │               │   ├── <57> Constant Int [1]
                    │               │   ├── Then
                    │               │   │   ╰── <59> Var [x]
                    │               │   ╰── Else
                    │               │       ╰── <61> Var [y]
                    │               ╰── arr
                    ╰── Return
                        ╰── <70> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_lvalues_assign_nested_non_lvalue() {
    let src = r#"
        struct inner {
          int x;
          int y;
        };
        struct outer {
          int a;
          struct inner b;
        };
        struct outer return_struct(void) {
          struct outer result = {1, {2, 3}};
          return result;
        }
        int main(void) {
          return_struct().b.x = 10;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [return_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <32> Constant Int [1]
            │       │           ╰── Compound
            │       │               ├── <34> Constant Int [2]
            │       │               ╰── <36> Constant Int [3]
            │       ╰── Return
            │           ╰── <42> Var [result]
            ╰── Function [main]
                ╰── Body
                    ├── <59> Assign [=]
                    │   ├── <56> Dot
                    │   │   ├── <54> Dot
                    │   │   │   ├── <52> FunctionCall [return_struct]
                    │   │   │   ╰── b
                    │   │   ╰── x
                    │   ╰── <58> Constant Int [10]
                    ╰── Return
                        ╰── <61> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_lvalues_assign_to_array() {
    let src = r#"
        struct chars {
          char char_array[5];
        };
        int main(void) {
          struct chars x = {{1, 2, 3, 4, 5}};
          char arr[5] = {9, 8, 7, 6, 5};
          x.char_array = arr;
          return x.char_array[0];
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [chars]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── char_array
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [chars]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <19> Constant Int [1]
                    │               ├── <21> Constant Int [2]
                    │               ├── <23> Constant Int [3]
                    │               ├── <25> Constant Int [4]
                    │               ╰── <27> Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 5
                    │   │       ╰── Char
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <38> Constant Int [9]
                    │           ├── <40> Constant Int [8]
                    │           ├── <42> Constant Int [7]
                    │           ├── <44> Constant Int [6]
                    │           ╰── <46> Constant Int [5]
                    ├── <57> Assign [=]
                    │   ├── <53> Dot
                    │   │   ├── <51> Var [x]
                    │   │   ╰── char_array
                    │   ╰── <56> Var [arr]
                    ╰── Return
                        ╰── <64> Subscript
                            ├── <62> Dot
                            │   ├── <60> Var [x]
                            │   ╰── char_array
                            ╰── <63> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_lvalues_assign_to_non_lvalue() {
    let src = r#"
        struct s {
          int arr[3];
          double d;
        };
        int main(void) {
          struct s x = {{1, 2, 3}, 4.0};
          struct s y = {{9, 8, 7}, 6.0};
          (1 ? x : y).d = 0.0;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <23> Constant Int [1]
                    │           │   ├── <25> Constant Int [2]
                    │           │   ╰── <27> Constant Int [3]
                    │           ╰── <30> Constant Double [+4e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <38> Constant Int [9]
                    │           │   ├── <40> Constant Int [8]
                    │           │   ╰── <42> Constant Int [7]
                    │           ╰── <45> Constant Double [+6e0]
                    ├── <60> Assign [=]
                    │   ├── <57> Dot
                    │   │   ├── <55> Conditional [?]
                    │   │   │   ├── <49> Constant Int [1]
                    │   │   │   ├── Then
                    │   │   │   │   ╰── <51> Var [x]
                    │   │   │   ╰── Else
                    │   │   │       ╰── <53> Var [y]
                    │   │   ╰── d
                    │   ╰── <59> Constant Double [+0e0]
                    ╰── Return
                        ╰── <62> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_arrow_pointer_to_non_struct() {
    let src = r#"
        struct s {
            long l;
        };
        int main(void) {
            double d = 0.0;
            double* ptr = &d;
            return ptr->l;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <15> Constant Double [+0e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <25> AddressOf
                    │           ╰── <24> Var [d]
                    ╰── Return
                        ╰── <31> Arrow
                            ├── <29> Var [ptr]
                            ╰── l
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_bad_member() {
    let src = r#"
        struct s {
            int x;
            int y;
        };
        struct t {
            int blah;
            int y;
        };
        int main(void) {
            struct s foo = {1, 2};
            return foo.blah;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Struct [t]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── blah
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <30> Constant Int [1]
                    │           ╰── <32> Constant Int [2]
                    ╰── Return
                        ╰── <39> Dot
                            ├── <37> Var [foo]
                            ╰── blah
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_bad_pointer_member() {
    let src = r#"
        void *malloc(unsigned long size);
        struct a {
          int x;
          int y;
        };
        struct b {
          int m;
          int n;
        };
        int main(void) {
          struct a *ptr = malloc(sizeof(struct a));
          ptr->m = 10;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [a]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Struct [b]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── m
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── n
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [a]
                    │   ╰── Initializer
                    │       ╰── <48> FunctionCall [malloc]
                    │           ╰── <47> SizeOfType
                    │               ╰── Struct [a]
                    ├── <57> Assign [=]
                    │   ├── <54> Arrow
                    │   │   ├── <52> Var [ptr]
                    │   │   ╰── m
                    │   ╰── <56> Constant Int [10]
                    ╰── Return
                        ╰── <59> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_member_of_non_struct() {
    let src = r#"
        void *malloc(unsigned long size);
        struct a {
          int x;
          int y;
        };
        int main(void) {
          struct a *ptr = malloc(sizeof(struct a));
          ptr.x = 10;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [a]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [a]
                    │   ╰── Initializer
                    │       ╰── <38> FunctionCall [malloc]
                    │           ╰── <37> SizeOfType
                    │               ╰── Struct [a]
                    ╰── <47> Assign [=]
                        ├── <44> Dot
                        │   ├── <42> Var [ptr]
                        │   ╰── x
                        ╰── <46> Constant Int [10]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_member_pointer_non_struct_pointer() {
    let src = r#"
        struct a {
          int x;
          int y;
        };
        int main(void) {
          struct a my_struct = {1, 2};
          return my_struct->x;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [a]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [a]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <20> Constant Int [1]
                    │           ╰── <22> Constant Int [2]
                    ╰── Return
                        ╰── <29> Arrow
                            ├── <27> Var [my_struct]
                            ╰── x
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_nested_arrow_pointer_to_non_struct() {
    let src = r#"
        struct s {
            long l;
        };
        struct has_ptr {
            double *ptr;
        };
        int main(void) {
            double d = 0.0;
            struct has_ptr p_struct = { &d };
            return p_struct.ptr->l;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Struct [has_ptr]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <23> Constant Double [+0e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── p_struct
                    │   ├── Type
                    │   │   ╰── Struct [has_ptr]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <32> AddressOf
                    │               ╰── <31> Var [d]
                    ╰── Return
                        ╰── <41> Arrow
                            ├── <39> Dot
                            │   ├── <37> Var [p_struct]
                            │   ╰── ptr
                            ╰── l
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_member_operators_postfix_precedence() {
    let src = r#"
        int main(void) {
            struct s {
                int a;
            };
            struct s x = {10};
            return &x->a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [10]
                    ╰── Return
                        ╰── <24> AddressOf
                            ╰── <23> Arrow
                                ├── <21> Var [x]
                                ╰── a
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_struct_declaration_duplicate_member_name() {
    let src = r#"
        struct s {
          int x;
          double x;
        };
    "#;
    let expected = r#"
        Program
            ╰── Struct [s]
                ├── Field
                │   ├── Name
                │   │   ╰── x
                │   ╰── Type
                │       ╰── Int
                ╰── Field
                    ├── Name
                    │   ╰── x
                    ╰── Type
                        ╰── Double
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_struct_declaration_duplicate_struct_declaration() {
    let src = r#"
        int main(void) {
            struct x {
                int x;
            };
            struct x {
                int y;
            };
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [x]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── x
                    │       ╰── Type
                    │           ╰── Int
                    ├── Struct [x]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── y
                    │       ╰── Type
                    │           ╰── Int
                    ╰── Return
                        ╰── <18> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_struct_declaration_incomplete_member() {
    let src = r#"
        struct s;
        struct a {
          struct s g;
        };
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ╰── Struct [a]
                ╰── Field
                    ├── Name
                    │   ╰── g
                    ╰── Type
                        ╰── Struct [s]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_struct_declaration_invalid_array_member() {
    let src = r#"
        struct incomplete;
        struct s {
          struct incomplete (*array_pointer)[3];
        };
    "#;
    let expected = r#"
        Program
            ├── Struct [incomplete]
            ╰── Struct [s]
                ╰── Field
                    ├── Name
                    │   ╰── array_pointer
                    ╰── Type
                        ╰── Pointer
                            ╰── Array
                                ├── 3
                                ╰── Struct [incomplete]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_struct_declaration_invalid_self_reference() {
    let src = r#"
        struct s {
            int x;
            struct s y;
        };
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <17> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_invalid_struct_declaration_void_member() {
    let src = r#"
        struct s {
          void x;
        };
    "#;
    let expected = r#"
        Program
            ╰── Struct [s]
                ╰── Field
                    ├── Name
                    │   ╰── x
                    ╰── Type
                        ╰── Void
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_and_struct() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s x = {1};
            return 0 && x;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ╰── Return
                        ╰── <24>  [&&]
                            ├── <20> Constant Int [0]
                            ╰── <23> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_assign_null_ptr_to_struct() {
    let src = r#"
        struct s {
          int a;
        };
        struct s x = {1};
        int main(void) {
          x = 0;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── <11> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── <24> Assign [=]
                    │   ├── <21> Var [x]
                    │   ╰── <23> Constant Int [0]
                    ╰── Return
                        ╰── <26> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_assign_scalar_to_struct() {
    let src = r#"
        struct s {
          int a;
        };
        struct s x = {1};
        int main(void) {
          struct s *ptr = &x;
          *ptr = 2;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── <11> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── <28> AddressOf
                    │           ╰── <27> Var [x]
                    ├── <36> Assign [=]
                    │   ├── <33> Dereference
                    │   │   ╰── <32> Var [ptr]
                    │   ╰── <35> Constant Int [2]
                    ╰── Return
                        ╰── <38> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_cast_struct_to_scalar() {
    let src = r#"
        struct s {
          int a;
        };
        int main(void) {
          struct s x = {1};
          int y = (int)x;
          return y;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <27> Cast
                    │           ├── Target
                    │           │   ╰── Int
                    │           ╰── Expression
                    │               ╰── <26> Var [x]
                    ╰── Return
                        ╰── <31> Var [y]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_cast_to_struct() {
    let src = r#"
        struct s {
          int a;
        };
        struct s x;
        int main(void) { (struct s) x; }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ╰── Type
            │       ╰── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ╰── <22> Cast
                        ├── Target
                        │   ╰── Struct [s]
                        ╰── Expression
                            ╰── <21> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_compare_structs() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s x = {1};
            struct s y = {2};
            return x == y;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <24> Constant Int [2]
                    ╰── Return
                        ╰── <33>  [==]
                            ├── <29> Var [x]
                            ╰── <32> Var [y]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_not_struct() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s x = {1};
            return !x;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ╰── Return
                        ╰── <23> Unary [!]
                            ╰── <22> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_pass_struct_as_scalar_param() {
    let src = r#"
        struct s {
          int a;
        };
        int foo(int a) { return a; }
        int main(void) {
          struct s x = {1};
          return foo(x);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── Function [foo]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── a
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <16> Var [a]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <29> Constant Int [1]
                    ╰── Return
                        ╰── <36> FunctionCall [foo]
                            ╰── <35> Var [x]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_struct_as_int() {
    let src = r#"
        struct s {
          int a;
        };
        int main(void) {
          struct s x = {1};
          (void)~x;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ├── <26> Cast
                    │   ├── Target
                    │   │   ╰── Void
                    │   ╰── Expression
                    │       ╰── <25> Unary [~]
                    │           ╰── <24> Var [x]
                    ╰── Return
                        ╰── <28> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_struct_controlling_expression() {
    let src = r#"
        struct s {
          int a;
        };
        int main(void) {
          struct s x = {1};
          if (x)
            return 1;
          return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <21> Var [x]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <22> Constant Int [1]
                    ╰── Return
                        ╰── <25> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_scalar_required_subscript_struct() {
    let src = r#"
        struct s {
          int a;
        };
        int main(void) {
          struct s x = {1};
          return x[0];
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ╰── Return
                        ╰── <23> Subscript
                            ├── <21> Var [x]
                            ╰── <22> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_address_of_wrong_type() {
    let src = r#"
        struct s {
            int i;
        };
        int main(void) {
            struct s foo = {0};
            struct s {
                int i;
            };
            struct s *ptr = &foo;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [0]
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── i
                    │       ╰── Type
                    │           ╰── Int
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── ptr
                        ├── Type
                        │   ╰── Pointer
                        │       ╰── Struct [s]
                        ╰── Initializer
                            ╰── <34> AddressOf
                                ╰── <33> Var [foo]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_conflicting_fun_param_types() {
    let src = r#"
        struct s;
        int foo(struct s x);
        int main(void) {
            struct s;
            int foo(struct s x);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [foo]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── x
            │           ╰── Type
            │               ╰── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    ├── Function [foo]
                    │   ╰── Parameters
                    │       ╰── Param
                    │           ├── Name
                    │           │   ╰── x
                    │           ╰── Type
                    │               ╰── Struct [s]
                    ╰── Return
                        ╰── <30> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_conflicting_fun_ret_types() {
    let src = r#"
        struct s;
        struct s foo(void);
        int main(void) {
            struct s;
            struct s foo(void);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [foo]
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    ├── Function [foo]
                    ╰── Return
                        ╰── <24> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_distinct_struct_types() {
    let src = r#"
        int foo(void) {
            struct s {
                int a;
                int b;
            };
            struct s result = {1, 2};
            return result.a + result.b;
        }
        int main(void) {
            struct s;
            struct s blah = {foo(), foo()};
            return blah.a;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── a
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── b
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <20> Constant Int [1]
            │       │           ╰── <22> Constant Int [2]
            │       ╰── Return
            │           ╰── <35>  [+]
            │               ├── <29> Dot
            │               │   ├── <27> Var [result]
            │               │   ╰── a
            │               ╰── <34> Dot
            │                   ├── <32> Var [result]
            │                   ╰── b
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── blah
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <51> FunctionCall [foo]
                    │           ╰── <54> FunctionCall [foo]
                    ╰── Return
                        ╰── <61> Dot
                            ├── <59> Var [blah]
                            ╰── a
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_incomplete_shadows_complete() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s;
            struct s *x;
            x->a = 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Pointer
                    │           ╰── Struct [s]
                    ├── <27> Assign [=]
                    │   ├── <24> Arrow
                    │   │   ├── <22> Var [x]
                    │   │   ╰── a
                    │   ╰── <26> Constant Int [10]
                    ╰── Return
                        ╰── <29> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_incomplete_shadows_complete_cast() {
    let src = r#"
        
        void *malloc(unsigned long size);
        struct s {
            int a;
        };
        int main(void) {
            void *ptr = malloc(sizeof(struct s));
            struct s;
            ((struct s *)ptr)->a = 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Void
                    │   ╰── Initializer
                    │       ╰── <33> FunctionCall [malloc]
                    │           ╰── <32> SizeOfType
                    │               ╰── Struct [s]
                    ├── Struct [s]
                    ├── <50> Assign [=]
                    │   ├── <47> Arrow
                    │   │   ├── <45> Cast
                    │   │   │   ├── Target
                    │   │   │   │   ╰── Pointer
                    │   │   │   │       ╰── Struct [s]
                    │   │   │   ╰── Expression
                    │   │   │       ╰── <43> Var [ptr]
                    │   │   ╰── a
                    │   ╰── <49> Constant Int [10]
                    ╰── Return
                        ╰── <52> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_invalid_shadow_self_reference() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s {
                struct s nested;
            };
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── nested
                    │       ╰── Type
                    │           ╰── Struct [s]
                    ╰── Return
                        ╰── <19> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_member_name_wrong_scope() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s foo = {1};
            struct s {
                int b;
            };
            return foo.b;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── b
                    │       ╰── Type
                    │           ╰── Int
                    ╰── Return
                        ╰── <29> Dot
                            ├── <27> Var [foo]
                            ╰── b
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_member_name_wrong_scope_nested() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct outer {
                struct s inner;
            };
            struct outer foo = {{1}};
            struct s {
                int b;
            };
            struct outer *ptr = &foo;
            return ptr->inner.b;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── Struct [outer]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── inner
                    │       ╰── Type
                    │           ╰── Struct [s]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <23> Constant Int [1]
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── b
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── <42> AddressOf
                    │           ╰── <41> Var [foo]
                    ╰── Return
                        ╰── <50> Dot
                            ├── <48> Arrow
                            │   ├── <46> Var [ptr]
                            │   ╰── inner
                            ╰── b
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_mismatched_return_type() {
    let src = r#"
        struct s {
          int a;
          int b;
        };
        struct s return_struct(void) {
          struct s {
            int a;
            int b;
          };
          struct s result = {1, 2};
          return result;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [return_struct]
                ╰── Body
                    ├── Struct [s]
                    │   ├── Field
                    │   │   ├── Name
                    │   │   │   ╰── a
                    │   │   ╰── Type
                    │   │       ╰── Int
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── b
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <31> Constant Int [1]
                    │           ╰── <33> Constant Int [2]
                    ╰── Return
                        ╰── <38> Var [result]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_shadow_struct() {
    let src = r#"
        struct s;
        struct s *ptr1 = 0;
        int main(void) {
          struct s;
          struct s *ptr2 = 0;
          return ptr1 == ptr2;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr1
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── <9> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr2
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── <25> Constant Int [0]
                    ╰── Return
                        ╰── <33>  [==]
                            ├── <29> Var [ptr1]
                            ╰── <32> Var [ptr2]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_invalid_types_tag_resolution_shadowed_tag_branch_mismatch() {
    let src = r#"
        int main(void) {
            struct s {
                int i;
            };
            struct s struct1 = {1};
            {
                struct s {
                    int i;
                };
                struct s struct2 = {2};
                (void)(1 ? struct1 : struct2);
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── i
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── struct1
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [1]
                    ╰── Block
                        ├── Struct [s]
                        │   ╰── Field
                        │       ├── Name
                        │       │   ╰── i
                        │       ╰── Type
                        │           ╰── Int
                        ├── VarDeclaration
                        │   ├── Name
                        │   │   ╰── struct2
                        │   ├── Type
                        │   │   ╰── Struct [s]
                        │   ╰── Initializer
                        │       ╰── Compound
                        │           ╰── <30> Constant Int [2]
                        ╰── <43> Cast
                            ├── Target
                            │   ╰── Void
                            ╰── Expression
                                ╰── <42> Conditional [?]
                                    ├── <36> Constant Int [1]
                                    ├── Then
                                    │   ╰── <38> Var [struct1]
                                    ╰── Else
                                        ╰── <40> Var [struct2]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_libraries_classify_unions() {
    let src = r#"
        int strcmp(char* s1, char* s2);
        void exit(int status);
        void *malloc(unsigned long size);
        union one_double {
            double d1;
            double d2;
        };
        struct has_union_with_double {
            union one_double member;
        };
        union has_struct_with_double {
            struct has_union_with_double s;
            double arr[1];
        };
        union one_int {
            double d;
            char c;
        };
        union one_int_nested {
            union one_int oi;
            union one_double od;
        };
        union char_int_mixed {
            char arr[7];
            union char_int_mixed* union_ptr;
            unsigned int ui;
        };
        union char_int_short {
            char c;
            int i;
        };
        struct has_union {
            unsigned int i;
            union char_int_short u;
        };
        union has_struct_with_ints {
            double d;
            struct has_union s;
            unsigned long ul;
        };
        union two_doubles {
            double arr[2];
            double single;
        };
        union has_xmm_union {
            union one_double u;
            union two_doubles u2;
        };
        struct dbl_struct {
            union one_double member1;
            double member2;
        };
        union has_dbl_struct {
            struct dbl_struct member1;
        };
        union char_arr {
            char arr[11];
            int i;
        };
        union two_arrs {
            double dbl_arr[2];
            long long_arr[2];
        };
        union two_eightbyte_has_struct {
            int arr[3];
            struct dbl_struct member1;
        };
        struct char_first_eightbyte {
            char c;
            double d;
        };
        struct int_second_eightbyte {
            double d;
            int i;
        };
        union two_structs {
            struct char_first_eightbyte member1;
            struct int_second_eightbyte member2;
        };
        struct nine_bytes {
            int i;
            char arr[5];
        };
        union has_nine_byte_struct {
            char c;
            long l;
            struct nine_bytes s;
        };
        union uneven {
            char arr[5];
            unsigned char uc;
        };
        struct has_uneven_union {
            int i;
            union uneven u;
        };
        union has_other_unions {
            union uneven u;
            union two_doubles d;
            union has_nine_byte_struct n;
        };
        union union_array {
            union one_int u_arr[2];
        };
        union uneven_union_array {
            union uneven u_arr[2];
        };
        struct small {
            char arr[3];
            signed char sc;
        };
        union has_small_struct_array {
            struct small arr[3];
        };
        union gp_and_xmm {
            double d_arr[2];
            char c;
        };
        union scalar_and_struct {
            long* ptr;
            struct char_first_eightbyte cfe;
        };
        struct has_two_unions {
            union char_int_mixed member1;
            union one_double member2;
        };
        union small_struct_arr_and_dbl {
            struct small arr[2];
            union two_doubles d;
        };
        union xmm_and_gp {
            double d;
            struct int_second_eightbyte ise;
        };
        union xmm_and_gp_nested {
            union xmm_and_gp member1;
            double arr[2];
            union two_doubles d;
        };
        union lotsa_doubles {
            double arr[3];
            int i;
        };
        union lotsa_chars {
            char more_chars[18];
            char fewer_chars[5];
        };
        struct large {
            int i;
            double d;
            char arr[10];
        };
        union contains_large_struct {
            int i;
            unsigned long ul;
            struct large l;
        };
        union contains_union_array {
            union gp_and_xmm arr[2];
        };
        int test_one_double(union one_double u);
        int test_has_union_with_double(struct has_union_with_double s);
        int test_has_struct_with_double(union has_struct_with_double u);
        int test_one_int(union one_int u);
        int test_one_int_nested(union one_int_nested u);
        int test_char_int_mixed(union char_int_mixed u);
        int test_has_union(struct has_union s);
        int test_has_struct_with_ints(union has_struct_with_ints u);
        int test_two_doubles(union two_doubles u);
        int test_has_xmm_union(union has_xmm_union u);
        int test_dbl_struct(struct dbl_struct s);
        int test_has_dbl_struct(union has_dbl_struct u);
        int test_char_arr(union char_arr u);
        int test_two_arrs(union two_arrs u);
        int test_two_eightbyte_has_struct(union two_eightbyte_has_struct u);
        int test_two_structs(union two_structs u);
        int test_has_nine_byte_struct(union has_nine_byte_struct u);
        int test_has_uneven_union(struct has_uneven_union s);
        int test_has_other_unions(union has_other_unions u);
        int test_union_array(union union_array u);
        int test_uneven_union_array(union uneven_union_array u);
        int test_has_small_struct_array(union has_small_struct_array u);
        int test_gp_and_xmm(union gp_and_xmm u);
        int test_scalar_and_struct(union scalar_and_struct u);
        int test_has_two_unions(struct has_two_unions s);
        int test_small_struct_arr_and_dbl(union small_struct_arr_and_dbl u);
        int test_xmm_and_gp(union xmm_and_gp u);
        int test_xmm_and_gp_nested(union xmm_and_gp_nested u);
        int test_lotsa_doubles(union lotsa_doubles u);
        int test_lotsa_chars(union lotsa_chars u);
        int test_contains_large_struct(union contains_large_struct u);
        int test_contains_union_array(union contains_union_array u);
        int pass_unions_and_structs(int i1, int i2, struct has_union one_gp_struct,
            double d1, union two_doubles two_xmm, union one_int one_gp, int i3, int i4,
            int i5);
        int pass_gp_union_in_memory(union two_doubles two_xmm,
            struct has_union one_gp_struct, int i1, int i2, int i3,
            int i4, int i5, int i6, union one_int one_gp);
        int pass_xmm_union_in_memory(double d1, double d2, union two_doubles two_xmm,
            union two_doubles two_xmm_copy, double d3, double d4,
            union two_doubles two_xmm_2);
        int pass_borderline_union(int i1, int i2, int i3, int i4, int i5,
            union char_arr two_gp);
        int pass_borderline_xmm_union(union two_doubles two_xmm, double d1, double d2,
            double d3, double d4, double d5, union two_doubles two_xmm_2);
        int pass_mixed_reg_in_memory(double d1, double d2, double d3, double d4,
            int i1, int i2, int i3, int i4, int i5, int i6,
            union gp_and_xmm mixed_regs);
        int pass_uneven_union_in_memory(int i1, int i2, int i3, int i4, int i5,
            union gp_and_xmm mixed_regs, union one_int one_gp, union uneven uneven);
        int pass_in_mem_first(union lotsa_doubles mem, union gp_and_xmm mixed_regs,
            union char_arr two_gp, struct has_union one_gp_struct);
        union one_double return_one_double(void);
        union one_int_nested return_one_int_nested(void);
        union has_dbl_struct return_has_dbl_struct(void);
        union two_arrs return_two_arrs(void);
        union scalar_and_struct return_scalar_and_struct(void);
        union xmm_and_gp return_xmm_and_gp(void);
        union contains_union_array return_contains_union_array(void);
        union lotsa_chars pass_params_and_return_in_mem(int i1,
            union scalar_and_struct int_and_dbl, union two_arrs two_arrs, int i2,
            union contains_union_array big_union, union one_int_nested oin);
        struct has_uneven_union return_struct_with_union(void);
        
        int test_one_double(union one_double u) {
            return (u.d1 == -2.345e6 && u.d2 == -2.345e6);
        }
        int test_has_union_with_double(struct has_union_with_double s) {
            return (s.member.d1 == 9887.54321e44 && s.member.d2 == 9887.54321e44);
        }
        int test_has_struct_with_double(union has_struct_with_double u) {
            return (u.s.member.d1 == 9887.54321e44
                && u.arr[0] == 9887.54321e44 && u.s.member.d2 == 9887.54321e44);
        }
        int test_one_int(union one_int u) {
            return (u.d == -80. && u.c == 0);
        }
        int test_one_int_nested(union one_int_nested u) {
            return u.oi.d == 44e55 && u.oi.c == 109 && u.od.d1 == 44e55
                && u.od.d2 == 44e55;
        }
        int test_char_int_mixed(union char_int_mixed u) {
            return (strcmp(u.arr, "WXYZ") == 0 && u.ui == 1515804759);
        }
        int test_has_union(struct has_union s) {
            return (s.i == 4294954951u && s.u.c == -60);
        }
        int test_has_struct_with_ints(union has_struct_with_ints u) {
            return (u.s.i == 4294954951u && u.s.u.c == -60);
        }
        int test_two_doubles(union two_doubles u) {
            return (u.arr[0] == 10.0 && u.arr[1] == 11.0 && u.single == 10.0);
        }
        int test_has_xmm_union(union has_xmm_union u) {
            return u.u.d1 == 10.0 && u.u.d2 == 10.0 && u.u2.single == 10.0
                && u.u2.arr[0] == 10.0 && u.u2.arr[1] == 11.0;
        }
        int test_dbl_struct(struct dbl_struct s) {
            return s.member1.d1 == -2.345e6 && s.member1.d2 == -2.345e6
                && s.member2 == 123.45;
        }
        int test_has_dbl_struct(union has_dbl_struct u) {
            return u.member1.member1.d1 == -2.345e6 && u.member1.member1.d2 == -2.345e6
                && u.member1.member2 == 123.45;
        }
        int test_char_arr(union char_arr u) {
            return (strcmp(u.arr, "Chars!") == 0 && u.i == 1918986307);
        }
        int test_two_arrs(union two_arrs u) {
            return (u.dbl_arr[0] == 13e4 && u.dbl_arr[1] == 14.5
                && u.long_arr[0] == 4683669945186254848 && u.long_arr[1] == 4624352392379367424);
        }
        int test_two_eightbyte_has_struct(union two_eightbyte_has_struct u) {
            return (u.arr[0] == 100 && u.arr[1] == 200 && u.arr[2] == 300
                && u.member1.member1.d1 == 4.24399158242461027606e-312);
        }
        int test_two_structs(union two_structs u) {
            return (u.member1.c == 'x' && u.member1.d == 55.5e5 && u.member2.i == 0);
        }
        int test_has_nine_byte_struct(union has_nine_byte_struct u) {
            if (u.l != -71777214294589696l || u.c != 0) {
                return 0;
            }
            if (u.s.i != -16711936) {
                return 0;
            }
            for (int i = 0; i < 5; i = i + 1) {
                int expected = i % 2 ? -1 : 0;
                if (u.s.arr[i] != expected) {
                    return 0;
                }
            }
            return 1;
        }
        int test_has_uneven_union(struct has_uneven_union s) {
            return s.i == -2147483647 && strcmp(s.u.arr, "!@#$") == 0 && s.u.uc == 33;
        }
        int test_has_other_unions(union has_other_unions u) {
            if (u.n.l != -71777214294589696l) {
                return 0;
            }
            for (int i = 0; i < 5; i = i + 1) {
                int expected = i % 2 ? -1 : 0;
                if (u.n.s.arr[i] != expected) {
                    return 0;
                }
            }
            return 1;
        }
        int test_union_array(union union_array u) {
            return (u.u_arr->d == -20. && u.u_arr[1].d == -30.);
        }
        int test_uneven_union_array(union uneven_union_array u) {
            return (strcmp(u.u_arr[0].arr, "QWER") == 0 && strcmp(u.u_arr[1].arr, "TYUI") == 0);
        }
        int test_has_small_struct_array(union has_small_struct_array u) {
            return strcmp(u.arr[0].arr, "AS") == 0 && u.arr[0].sc == 10
                && strcmp(u.arr[1].arr, "DF") == 0 && u.arr[1].sc == 11
                && strcmp(u.arr[2].arr, "GH") == 0 && u.arr[2].sc == 12;
        }
        int test_gp_and_xmm(union gp_and_xmm u) {
            return u.d_arr[0] == 11. && u.d_arr[1] == 12.;
        }
        int test_scalar_and_struct(union scalar_and_struct u) {
            return u.cfe.c == -5 && u.cfe.d == -88.8;
        }
        int test_has_two_unions(struct has_two_unions s) {
            if (strcmp(s.member1.arr, "WXYZ")) {
                return 0;
            }
            if (s.member2.d1 != -2.345e6) {
                return 0;
            }
            return 1;
        }
        int test_small_struct_arr_and_dbl(union small_struct_arr_and_dbl u) {
            return (u.d.arr[0] == -22. && u.d.arr[1] == -32.);
        }
        int test_xmm_and_gp(union xmm_and_gp u) {
            return (u.ise.d == -8. && u.ise.i == -8);
        }
        int test_xmm_and_gp_nested(union xmm_and_gp_nested u) {
            return (u.member1.ise.d == -8. && u.member1.ise.i == -8);
        }
        int test_lotsa_doubles(union lotsa_doubles u) {
            return u.arr[0] == 99. && u.arr[1] == 98. && u.arr[2] == 97;
        }
        int test_lotsa_chars(union lotsa_chars u) {
            return !strcmp(u.more_chars, "asflakjsdflkjs");
        }
        int test_contains_large_struct(union contains_large_struct u) {
            return u.l.i == 100 && u.l.d == 100. && !strcmp(u.l.arr, "A struct!");
        }
        int test_contains_union_array(union contains_union_array u) {
            union gp_and_xmm a = u.arr[0];
            union gp_and_xmm b = u.arr[1];
            if (a.d_arr[0] != 11. || a.d_arr[1] != 12.) {
                return 0;
            }
            if (b.d_arr[1] != -1 || b.c != 0) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Union [one_double]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d1
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d2
            │       ╰── Type
            │           ╰── Double
            ├── Struct [has_union_with_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [has_struct_with_double]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [has_union_with_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Double
            ├── Union [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Union [one_int_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── oi
            │   │   ╰── Type
            │   │       ╰── Union [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── od
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [char_int_mixed]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 7
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── union_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Union [char_int_mixed]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ui
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Union [char_int_short]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Unsigned Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Union [char_int_short]
            ├── Union [has_struct_with_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [has_union]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ul
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Union [two_doubles]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── single
            │       ╰── Type
            │           ╰── Double
            ├── Union [has_xmm_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u2
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Struct [dbl_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Double
            ├── Union [has_dbl_struct]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member1
            │       ╰── Type
            │           ╰── Struct [dbl_struct]
            ├── Union [char_arr]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 11
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [two_arrs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── long_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Long
            ├── Union [two_eightbyte_has_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member1
            │       ╰── Type
            │           ╰── Struct [dbl_struct]
            ├── Struct [char_first_eightbyte]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [int_second_eightbyte]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [two_structs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Struct [char_first_eightbyte]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Struct [int_second_eightbyte]
            ├── Struct [nine_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Union [has_nine_byte_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [nine_bytes]
            ├── Union [uneven]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 5
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── uc
            │       ╰── Type
            │           ╰── Unsigned Char
            ├── Struct [has_uneven_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Union [uneven]
            ├── Union [has_other_unions]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [uneven]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Union [two_doubles]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── n
            │       ╰── Type
            │           ╰── Union [has_nine_byte_struct]
            ├── Union [union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [one_int]
            ├── Union [uneven_union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [uneven]
            ├── Struct [small]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sc
            │       ╰── Type
            │           ╰── Signed Char
            ├── Union [has_small_struct_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [small]
            ├── Union [gp_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Union [scalar_and_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cfe
            │       ╰── Type
            │           ╰── Struct [char_first_eightbyte]
            ├── Struct [has_two_unions]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [char_int_mixed]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [small_struct_arr_and_dbl]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Struct [small]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Union [xmm_and_gp]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ise
            │       ╰── Type
            │           ╰── Struct [int_second_eightbyte]
            ├── Union [xmm_and_gp_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [xmm_and_gp]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Union [lotsa_doubles]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [lotsa_chars]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── more_chars
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 18
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── fewer_chars
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [large]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Char
            ├── Union [contains_large_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ul
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Struct [large]
            ├── Union [contains_union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [gp_and_xmm]
            ├── Function [test_one_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_double]
            ├── Function [test_has_union_with_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_union_with_double]
            ├── Function [test_has_struct_with_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_struct_with_double]
            ├── Function [test_one_int]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_int]
            ├── Function [test_one_int_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_int_nested]
            ├── Function [test_char_int_mixed]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [char_int_mixed]
            ├── Function [test_has_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_union]
            ├── Function [test_has_struct_with_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_struct_with_ints]
            ├── Function [test_two_doubles]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [test_has_xmm_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_xmm_union]
            ├── Function [test_dbl_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [dbl_struct]
            ├── Function [test_has_dbl_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_dbl_struct]
            ├── Function [test_char_arr]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [char_arr]
            ├── Function [test_two_arrs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_arrs]
            ├── Function [test_two_eightbyte_has_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_eightbyte_has_struct]
            ├── Function [test_two_structs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_structs]
            ├── Function [test_has_nine_byte_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_nine_byte_struct]
            ├── Function [test_has_uneven_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_uneven_union]
            ├── Function [test_has_other_unions]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_other_unions]
            ├── Function [test_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [union_array]
            ├── Function [test_uneven_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [uneven_union_array]
            ├── Function [test_has_small_struct_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_small_struct_array]
            ├── Function [test_gp_and_xmm]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [gp_and_xmm]
            ├── Function [test_scalar_and_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [scalar_and_struct]
            ├── Function [test_has_two_unions]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_two_unions]
            ├── Function [test_small_struct_arr_and_dbl]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [small_struct_arr_and_dbl]
            ├── Function [test_xmm_and_gp]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [xmm_and_gp]
            ├── Function [test_xmm_and_gp_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [xmm_and_gp_nested]
            ├── Function [test_lotsa_doubles]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [lotsa_doubles]
            ├── Function [test_lotsa_chars]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [lotsa_chars]
            ├── Function [test_contains_large_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [contains_large_struct]
            ├── Function [test_contains_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [contains_union_array]
            ├── Function [pass_unions_and_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp_struct
            │       │   ╰── Type
            │       │       ╰── Struct [has_union]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp
            │       │   ╰── Type
            │       │       ╰── Union [one_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i5
            │           ╰── Type
            │               ╰── Int
            ├── Function [pass_gp_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp_struct
            │       │   ╰── Type
            │       │       ╰── Struct [has_union]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── one_gp
            │           ╰── Type
            │               ╰── Union [one_int]
            ├── Function [pass_xmm_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm_copy
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_xmm_2
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [pass_borderline_union]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_gp
            │           ╰── Type
            │               ╰── Union [char_arr]
            ├── Function [pass_borderline_xmm_union]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d5
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_xmm_2
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [pass_mixed_reg_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── mixed_regs
            │           ╰── Type
            │               ╰── Union [gp_and_xmm]
            ├── Function [pass_uneven_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_regs
            │       │   ╰── Type
            │       │       ╰── Union [gp_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp
            │       │   ╰── Type
            │       │       ╰── Union [one_int]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── uneven
            │           ╰── Type
            │               ╰── Union [uneven]
            ├── Function [pass_in_mem_first]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mem
            │       │   ╰── Type
            │       │       ╰── Union [lotsa_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_regs
            │       │   ╰── Type
            │       │       ╰── Union [gp_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_gp
            │       │   ╰── Type
            │       │       ╰── Union [char_arr]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── one_gp_struct
            │           ╰── Type
            │               ╰── Struct [has_union]
            ├── Function [return_one_double]
            ├── Function [return_one_int_nested]
            ├── Function [return_has_dbl_struct]
            ├── Function [return_two_arrs]
            ├── Function [return_scalar_and_struct]
            ├── Function [return_xmm_and_gp]
            ├── Function [return_contains_union_array]
            ├── Function [pass_params_and_return_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_and_dbl
            │       │   ╰── Type
            │       │       ╰── Union [scalar_and_struct]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_arrs
            │       │   ╰── Type
            │       │       ╰── Union [two_arrs]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── big_union
            │       │   ╰── Type
            │       │       ╰── Union [contains_union_array]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── oin
            │           ╰── Type
            │               ╰── Union [one_int_nested]
            ├── Function [return_struct_with_union]
            ├── Function [test_one_double]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [one_double]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1215>  [&&]
            │               ├── <1203>  [==]
            │               │   ├── <1198> Dot
            │               │   │   ├── <1196> Var [u]
            │               │   │   ╰── d1
            │               │   ╰── <1202> Unary [-]
            │               │       ╰── <1201> Constant Double [+2.345e6]
            │               ╰── <1213>  [==]
            │                   ├── <1208> Dot
            │                   │   ├── <1206> Var [u]
            │                   │   ╰── d2
            │                   ╰── <1212> Unary [-]
            │                       ╰── <1211> Constant Double [+2.345e6]
            ├── Function [test_has_union_with_double]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [has_union_with_double]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1248>  [&&]
            │               ├── <1236>  [==]
            │               │   ├── <1233> Dot
            │               │   │   ├── <1231> Dot
            │               │   │   │   ├── <1229> Var [s]
            │               │   │   │   ╰── member
            │               │   │   ╰── d1
            │               │   ╰── <1235> Constant Double [+9.88754321e47]
            │               ╰── <1246>  [==]
            │                   ├── <1243> Dot
            │                   │   ├── <1241> Dot
            │                   │   │   ├── <1239> Var [s]
            │                   │   │   ╰── member
            │                   │   ╰── d2
            │                   ╰── <1245> Constant Double [+9.88754321e47]
            ├── Function [test_has_struct_with_double]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [has_struct_with_double]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1296>  [&&]
            │               ├── <1282>  [&&]
            │               │   ├── <1271>  [==]
            │               │   │   ├── <1268> Dot
            │               │   │   │   ├── <1266> Dot
            │               │   │   │   │   ├── <1264> Dot
            │               │   │   │   │   │   ├── <1262> Var [u]
            │               │   │   │   │   │   ╰── s
            │               │   │   │   │   ╰── member
            │               │   │   │   ╰── d1
            │               │   │   ╰── <1270> Constant Double [+9.88754321e47]
            │               │   ╰── <1281>  [==]
            │               │       ├── <1278> Subscript
            │               │       │   ├── <1276> Dot
            │               │       │   │   ├── <1274> Var [u]
            │               │       │   │   ╰── arr
            │               │       │   ╰── <1277> Constant Int [0]
            │               │       ╰── <1280> Constant Double [+9.88754321e47]
            │               ╰── <1294>  [==]
            │                   ├── <1291> Dot
            │                   │   ├── <1289> Dot
            │                   │   │   ├── <1287> Dot
            │                   │   │   │   ├── <1285> Var [u]
            │                   │   │   │   ╰── s
            │                   │   │   ╰── member
            │                   │   ╰── d2
            │                   ╰── <1293> Constant Double [+9.88754321e47]
            ├── Function [test_one_int]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [one_int]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1327>  [&&]
            │               ├── <1317>  [==]
            │               │   ├── <1312> Dot
            │               │   │   ├── <1310> Var [u]
            │               │   │   ╰── d
            │               │   ╰── <1316> Unary [-]
            │               │       ╰── <1315> Constant Double [+8e1]
            │               ╰── <1325>  [==]
            │                   ├── <1322> Dot
            │                   │   ├── <1320> Var [u]
            │                   │   ╰── c
            │                   ╰── <1324> Constant Int [0]
            ├── Function [test_one_int_nested]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [one_int_nested]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1381>  [&&]
            │               ├── <1370>  [&&]
            │               │   ├── <1359>  [&&]
            │               │   │   ├── <1348>  [==]
            │               │   │   │   ├── <1345> Dot
            │               │   │   │   │   ├── <1343> Dot
            │               │   │   │   │   │   ├── <1341> Var [u]
            │               │   │   │   │   │   ╰── oi
            │               │   │   │   │   ╰── d
            │               │   │   │   ╰── <1347> Constant Double [+4.4e56]
            │               │   │   ╰── <1358>  [==]
            │               │   │       ├── <1355> Dot
            │               │   │       │   ├── <1353> Dot
            │               │   │       │   │   ├── <1351> Var [u]
            │               │   │       │   │   ╰── oi
            │               │   │       │   ╰── c
            │               │   │       ╰── <1357> Constant Int [109]
            │               │   ╰── <1369>  [==]
            │               │       ├── <1366> Dot
            │               │       │   ├── <1364> Dot
            │               │       │   │   ├── <1362> Var [u]
            │               │       │   │   ╰── od
            │               │       │   ╰── d1
            │               │       ╰── <1368> Constant Double [+4.4e56]
            │               ╰── <1380>  [==]
            │                   ├── <1377> Dot
            │                   │   ├── <1375> Dot
            │                   │   │   ├── <1373> Var [u]
            │                   │   │   ╰── od
            │                   │   ╰── d2
            │                   ╰── <1379> Constant Double [+4.4e56]
            ├── Function [test_char_int_mixed]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [char_int_mixed]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1413>  [&&]
            │               ├── <1403>  [==]
            │               │   ├── <1400> FunctionCall [strcmp]
            │               │   │   ├── <1398> Dot
            │               │   │   │   ├── <1396> Var [u]
            │               │   │   │   ╰── arr
            │               │   │   ╰── <1399> "WXYZ"
            │               │   ╰── <1402> Constant Int [0]
            │               ╰── <1411>  [==]
            │                   ├── <1408> Dot
            │                   │   ├── <1406> Var [u]
            │                   │   ╰── ui
            │                   ╰── <1410> Constant Int [1515804759]
            ├── Function [test_has_union]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [has_union]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1446>  [&&]
            │               ├── <1432>  [==]
            │               │   ├── <1429> Dot
            │               │   │   ├── <1427> Var [s]
            │               │   │   ╰── i
            │               │   ╰── <1431> Constant UInt [4294954951]
            │               ╰── <1444>  [==]
            │                   ├── <1439> Dot
            │                   │   ├── <1437> Dot
            │                   │   │   ├── <1435> Var [s]
            │                   │   │   ╰── u
            │                   │   ╰── c
            │                   ╰── <1443> Unary [-]
            │                       ╰── <1442> Constant Int [60]
            ├── Function [test_has_struct_with_ints]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [has_struct_with_ints]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1483>  [&&]
            │               ├── <1467>  [==]
            │               │   ├── <1464> Dot
            │               │   │   ├── <1462> Dot
            │               │   │   │   ├── <1460> Var [u]
            │               │   │   │   ╰── s
            │               │   │   ╰── i
            │               │   ╰── <1466> Constant UInt [4294954951]
            │               ╰── <1481>  [==]
            │                   ├── <1476> Dot
            │                   │   ├── <1474> Dot
            │                   │   │   ├── <1472> Dot
            │                   │   │   │   ├── <1470> Var [u]
            │                   │   │   │   ╰── s
            │                   │   │   ╰── u
            │                   │   ╰── c
            │                   ╰── <1480> Unary [-]
            │                       ╰── <1479> Constant Int [60]
            ├── Function [test_two_doubles]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [two_doubles]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1525>  [&&]
            │               ├── <1515>  [&&]
            │               │   ├── <1504>  [==]
            │               │   │   ├── <1501> Subscript
            │               │   │   │   ├── <1499> Dot
            │               │   │   │   │   ├── <1497> Var [u]
            │               │   │   │   │   ╰── arr
            │               │   │   │   ╰── <1500> Constant Int [0]
            │               │   │   ╰── <1503> Constant Double [+1e1]
            │               │   ╰── <1514>  [==]
            │               │       ├── <1511> Subscript
            │               │       │   ├── <1509> Dot
            │               │       │   │   ├── <1507> Var [u]
            │               │       │   │   ╰── arr
            │               │       │   ╰── <1510> Constant Int [1]
            │               │       ╰── <1513> Constant Double [+1.1e1]
            │               ╰── <1523>  [==]
            │                   ├── <1520> Dot
            │                   │   ├── <1518> Var [u]
            │                   │   ╰── single
            │                   ╰── <1522> Constant Double [+1e1]
            ├── Function [test_has_xmm_union]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [has_xmm_union]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1594>  [&&]
            │               ├── <1581>  [&&]
            │               │   ├── <1568>  [&&]
            │               │   │   ├── <1557>  [&&]
            │               │   │   │   ├── <1546>  [==]
            │               │   │   │   │   ├── <1543> Dot
            │               │   │   │   │   │   ├── <1541> Dot
            │               │   │   │   │   │   │   ├── <1539> Var [u]
            │               │   │   │   │   │   │   ╰── u
            │               │   │   │   │   │   ╰── d1
            │               │   │   │   │   ╰── <1545> Constant Double [+1e1]
            │               │   │   │   ╰── <1556>  [==]
            │               │   │   │       ├── <1553> Dot
            │               │   │   │       │   ├── <1551> Dot
            │               │   │   │       │   │   ├── <1549> Var [u]
            │               │   │   │       │   │   ╰── u
            │               │   │   │       │   ╰── d2
            │               │   │   │       ╰── <1555> Constant Double [+1e1]
            │               │   │   ╰── <1567>  [==]
            │               │   │       ├── <1564> Dot
            │               │   │       │   ├── <1562> Dot
            │               │   │       │   │   ├── <1560> Var [u]
            │               │   │       │   │   ╰── u2
            │               │   │       │   ╰── single
            │               │   │       ╰── <1566> Constant Double [+1e1]
            │               │   ╰── <1580>  [==]
            │               │       ├── <1577> Subscript
            │               │       │   ├── <1575> Dot
            │               │       │   │   ├── <1573> Dot
            │               │       │   │   │   ├── <1571> Var [u]
            │               │       │   │   │   ╰── u2
            │               │       │   │   ╰── arr
            │               │       │   ╰── <1576> Constant Int [0]
            │               │       ╰── <1579> Constant Double [+1e1]
            │               ╰── <1593>  [==]
            │                   ├── <1590> Subscript
            │                   │   ├── <1588> Dot
            │                   │   │   ├── <1586> Dot
            │                   │   │   │   ├── <1584> Var [u]
            │                   │   │   │   ╰── u2
            │                   │   │   ╰── arr
            │                   │   ╰── <1589> Constant Int [1]
            │                   ╰── <1592> Constant Double [+1.1e1]
            ├── Function [test_dbl_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [dbl_struct]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1639>  [&&]
            │               ├── <1630>  [&&]
            │               │   ├── <1617>  [==]
            │               │   │   ├── <1612> Dot
            │               │   │   │   ├── <1610> Dot
            │               │   │   │   │   ├── <1608> Var [s]
            │               │   │   │   │   ╰── member1
            │               │   │   │   ╰── d1
            │               │   │   ╰── <1616> Unary [-]
            │               │   │       ╰── <1615> Constant Double [+2.345e6]
            │               │   ╰── <1629>  [==]
            │               │       ├── <1624> Dot
            │               │       │   ├── <1622> Dot
            │               │       │   │   ├── <1620> Var [s]
            │               │       │   │   ╰── member1
            │               │       │   ╰── d2
            │               │       ╰── <1628> Unary [-]
            │               │           ╰── <1627> Constant Double [+2.345e6]
            │               ╰── <1638>  [==]
            │                   ├── <1635> Dot
            │                   │   ├── <1633> Var [s]
            │                   │   ╰── member2
            │                   ╰── <1637> Constant Double [+1.2345e2]
            ├── Function [test_has_dbl_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [has_dbl_struct]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1690>  [&&]
            │               ├── <1679>  [&&]
            │               │   ├── <1664>  [==]
            │               │   │   ├── <1659> Dot
            │               │   │   │   ├── <1657> Dot
            │               │   │   │   │   ├── <1655> Dot
            │               │   │   │   │   │   ├── <1653> Var [u]
            │               │   │   │   │   │   ╰── member1
            │               │   │   │   │   ╰── member1
            │               │   │   │   ╰── d1
            │               │   │   ╰── <1663> Unary [-]
            │               │   │       ╰── <1662> Constant Double [+2.345e6]
            │               │   ╰── <1678>  [==]
            │               │       ├── <1673> Dot
            │               │       │   ├── <1671> Dot
            │               │       │   │   ├── <1669> Dot
            │               │       │   │   │   ├── <1667> Var [u]
            │               │       │   │   │   ╰── member1
            │               │       │   │   ╰── member1
            │               │       │   ╰── d2
            │               │       ╰── <1677> Unary [-]
            │               │           ╰── <1676> Constant Double [+2.345e6]
            │               ╰── <1689>  [==]
            │                   ├── <1686> Dot
            │                   │   ├── <1684> Dot
            │                   │   │   ├── <1682> Var [u]
            │                   │   │   ╰── member1
            │                   │   ╰── member2
            │                   ╰── <1688> Constant Double [+1.2345e2]
            ├── Function [test_char_arr]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [char_arr]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1722>  [&&]
            │               ├── <1712>  [==]
            │               │   ├── <1709> FunctionCall [strcmp]
            │               │   │   ├── <1707> Dot
            │               │   │   │   ├── <1705> Var [u]
            │               │   │   │   ╰── arr
            │               │   │   ╰── <1708> "Chars!"
            │               │   ╰── <1711> Constant Int [0]
            │               ╰── <1720>  [==]
            │                   ├── <1717> Dot
            │                   │   ├── <1715> Var [u]
            │                   │   ╰── i
            │                   ╰── <1719> Constant Int [1918986307]
            ├── Function [test_two_arrs]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [two_arrs]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1777>  [&&]
            │               ├── <1765>  [&&]
            │               │   ├── <1754>  [&&]
            │               │   │   ├── <1743>  [==]
            │               │   │   │   ├── <1740> Subscript
            │               │   │   │   │   ├── <1738> Dot
            │               │   │   │   │   │   ├── <1736> Var [u]
            │               │   │   │   │   │   ╰── dbl_arr
            │               │   │   │   │   ╰── <1739> Constant Int [0]
            │               │   │   │   ╰── <1742> Constant Double [+1.3e5]
            │               │   │   ╰── <1753>  [==]
            │               │   │       ├── <1750> Subscript
            │               │   │       │   ├── <1748> Dot
            │               │   │       │   │   ├── <1746> Var [u]
            │               │   │       │   │   ╰── dbl_arr
            │               │   │       │   ╰── <1749> Constant Int [1]
            │               │   │       ╰── <1752> Constant Double [+1.45e1]
            │               │   ╰── <1764>  [==]
            │               │       ├── <1761> Subscript
            │               │       │   ├── <1759> Dot
            │               │       │   │   ├── <1757> Var [u]
            │               │       │   │   ╰── long_arr
            │               │       │   ╰── <1760> Constant Int [0]
            │               │       ╰── <1763> Constant Long [4683669945186254848]
            │               ╰── <1775>  [==]
            │                   ├── <1772> Subscript
            │                   │   ├── <1770> Dot
            │                   │   │   ├── <1768> Var [u]
            │                   │   │   ╰── long_arr
            │                   │   ╰── <1771> Constant Int [1]
            │                   ╰── <1774> Constant Long [4624352392379367424]
            ├── Function [test_two_eightbyte_has_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [two_eightbyte_has_struct]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1834>  [&&]
            │               ├── <1820>  [&&]
            │               │   ├── <1809>  [&&]
            │               │   │   ├── <1798>  [==]
            │               │   │   │   ├── <1795> Subscript
            │               │   │   │   │   ├── <1793> Dot
            │               │   │   │   │   │   ├── <1791> Var [u]
            │               │   │   │   │   │   ╰── arr
            │               │   │   │   │   ╰── <1794> Constant Int [0]
            │               │   │   │   ╰── <1797> Constant Int [100]
            │               │   │   ╰── <1808>  [==]
            │               │   │       ├── <1805> Subscript
            │               │   │       │   ├── <1803> Dot
            │               │   │       │   │   ├── <1801> Var [u]
            │               │   │       │   │   ╰── arr
            │               │   │       │   ╰── <1804> Constant Int [1]
            │               │   │       ╰── <1807> Constant Int [200]
            │               │   ╰── <1819>  [==]
            │               │       ├── <1816> Subscript
            │               │       │   ├── <1814> Dot
            │               │       │   │   ├── <1812> Var [u]
            │               │       │   │   ╰── arr
            │               │       │   ╰── <1815> Constant Int [2]
            │               │       ╰── <1818> Constant Int [300]
            │               ╰── <1832>  [==]
            │                   ├── <1829> Dot
            │                   │   ├── <1827> Dot
            │                   │   │   ├── <1825> Dot
            │                   │   │   │   ├── <1823> Var [u]
            │                   │   │   │   ╰── member1
            │                   │   │   ╰── member1
            │                   │   ╰── d1
            │                   ╰── <1831> Constant Double [+4.243991582425e-312]
            ├── Function [test_two_structs]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [two_structs]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <1878>  [&&]
            │               ├── <1866>  [&&]
            │               │   ├── <1855>  [==]
            │               │   │   ├── <1852> Dot
            │               │   │   │   ├── <1850> Dot
            │               │   │   │   │   ├── <1848> Var [u]
            │               │   │   │   │   ╰── member1
            │               │   │   │   ╰── c
            │               │   │   ╰── <1854> Constant Int [120]
            │               │   ╰── <1865>  [==]
            │               │       ├── <1862> Dot
            │               │       │   ├── <1860> Dot
            │               │       │   │   ├── <1858> Var [u]
            │               │       │   │   ╰── member1
            │               │       │   ╰── d
            │               │       ╰── <1864> Constant Double [+5.55e6]
            │               ╰── <1876>  [==]
            │                   ├── <1873> Dot
            │                   │   ├── <1871> Dot
            │                   │   │   ├── <1869> Var [u]
            │                   │   │   ╰── member2
            │                   │   ╰── i
            │                   ╰── <1875> Constant Int [0]
            ├── Function [test_has_nine_byte_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [has_nine_byte_struct]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1908>  [||]
            │       │   │       ├── <1899>  [!=]
            │       │   │       │   ├── <1894> Dot
            │       │   │       │   │   ├── <1892> Var [u]
            │       │   │       │   │   ╰── l
            │       │   │       │   ╰── <1898> Unary [-]
            │       │   │       │       ╰── <1897> Constant Long [71777214294589696]
            │       │   │       ╰── <1907>  [!=]
            │       │   │           ├── <1904> Dot
            │       │   │           │   ├── <1902> Var [u]
            │       │   │           │   ╰── c
            │       │   │           ╰── <1906> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1909> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1924>  [!=]
            │       │   │       ├── <1919> Dot
            │       │   │       │   ├── <1917> Dot
            │       │   │       │   │   ├── <1915> Var [u]
            │       │   │       │   │   ╰── s
            │       │   │       │   ╰── i
            │       │   │       ╰── <1923> Unary [-]
            │       │   │           ╰── <1922> Constant Int [16711936]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1925> Constant Int [0]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <1933> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <1941>  [<]
            │       │   │       ├── <1938> Var [i]
            │       │   │       ╰── <1940> Constant Int [5]
            │       │   ├── Condition
            │       │   │   ╰── <1950> Assign [=]
            │       │   │       ├── <1943> Var [i]
            │       │   │       ╰── <1949>  [+]
            │       │   │           ├── <1946> Var [i]
            │       │   │           ╰── <1948> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── expected
            │       │       │   ├── Type
            │       │       │   │   ╰── Int
            │       │       │   ╰── Initializer
            │       │       │       ╰── <1963> Conditional [?]
            │       │       │           ├── <1958>  [%]
            │       │       │           │   ├── <1955> Var [i]
            │       │       │           │   ╰── <1957> Constant Int [2]
            │       │       │           ├── Then
            │       │       │           │   ╰── <1961> Unary [-]
            │       │       │           │       ╰── <1960> Constant Int [1]
            │       │       │           ╰── Else
            │       │       │               ╰── <1962> Constant Int [0]
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <1978>  [!=]
            │       │           │       ├── <1974> Subscript
            │       │           │       │   ├── <1971> Dot
            │       │           │       │   │   ├── <1969> Dot
            │       │           │       │   │   │   ├── <1967> Var [u]
            │       │           │       │   │   │   ╰── s
            │       │           │       │   │   ╰── arr
            │       │           │       │   ╰── <1973> Var [i]
            │       │           │       ╰── <1977> Var [expected]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── <1979> Constant Int [0]
            │       ╰── Return
            │           ╰── <1987> Constant Int [1]
            ├── Function [test_has_uneven_union]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [has_uneven_union]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <2033>  [&&]
            │               ├── <2022>  [&&]
            │               │   ├── <2008>  [==]
            │               │   │   ├── <2003> Dot
            │               │   │   │   ├── <2001> Var [s]
            │               │   │   │   ╰── i
            │               │   │   ╰── <2007> Unary [-]
            │               │   │       ╰── <2006> Constant Int [2147483647]
            │               │   ╰── <2021>  [==]
            │               │       ├── <2018> FunctionCall [strcmp]
            │               │       │   ├── <2016> Dot
            │               │       │   │   ├── <2014> Dot
            │               │       │   │   │   ├── <2012> Var [s]
            │               │       │   │   │   ╰── u
            │               │       │   │   ╰── arr
            │               │       │   ╰── <2017> "!@#$"
            │               │       ╰── <2020> Constant Int [0]
            │               ╰── <2032>  [==]
            │                   ├── <2029> Dot
            │                   │   ├── <2027> Dot
            │                   │   │   ├── <2025> Var [s]
            │                   │   │   ╰── u
            │                   │   ╰── uc
            │                   ╰── <2031> Constant Int [33]
            ├── Function [test_has_other_unions]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [has_other_unions]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2056>  [!=]
            │       │   │       ├── <2051> Dot
            │       │   │       │   ├── <2049> Dot
            │       │   │       │   │   ├── <2047> Var [u]
            │       │   │       │   │   ╰── n
            │       │   │       │   ╰── l
            │       │   │       ╰── <2055> Unary [-]
            │       │   │           ╰── <2054> Constant Long [71777214294589696]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2057> Constant Int [0]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <2065> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <2073>  [<]
            │       │   │       ├── <2070> Var [i]
            │       │   │       ╰── <2072> Constant Int [5]
            │       │   ├── Condition
            │       │   │   ╰── <2082> Assign [=]
            │       │   │       ├── <2075> Var [i]
            │       │   │       ╰── <2081>  [+]
            │       │   │           ├── <2078> Var [i]
            │       │   │           ╰── <2080> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── expected
            │       │       │   ├── Type
            │       │       │   │   ╰── Int
            │       │       │   ╰── Initializer
            │       │       │       ╰── <2095> Conditional [?]
            │       │       │           ├── <2090>  [%]
            │       │       │           │   ├── <2087> Var [i]
            │       │       │           │   ╰── <2089> Constant Int [2]
            │       │       │           ├── Then
            │       │       │           │   ╰── <2093> Unary [-]
            │       │       │           │       ╰── <2092> Constant Int [1]
            │       │       │           ╰── Else
            │       │       │               ╰── <2094> Constant Int [0]
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <2112>  [!=]
            │       │           │       ├── <2108> Subscript
            │       │           │       │   ├── <2105> Dot
            │       │           │       │   │   ├── <2103> Dot
            │       │           │       │   │   │   ├── <2101> Dot
            │       │           │       │   │   │   │   ├── <2099> Var [u]
            │       │           │       │   │   │   │   ╰── n
            │       │           │       │   │   │   ╰── s
            │       │           │       │   │   ╰── arr
            │       │           │       │   ╰── <2107> Var [i]
            │       │           │       ╰── <2111> Var [expected]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── <2113> Constant Int [0]
            │       ╰── Return
            │           ╰── <2121> Constant Int [1]
            ├── Function [test_union_array]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [union_array]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <2160>  [&&]
            │               ├── <2144>  [==]
            │               │   ├── <2139> Arrow
            │               │   │   ├── <2137> Dot
            │               │   │   │   ├── <2135> Var [u]
            │               │   │   │   ╰── u_arr
            │               │   │   ╰── d
            │               │   ╰── <2143> Unary [-]
            │               │       ╰── <2142> Constant Double [+2e1]
            │               ╰── <2158>  [==]
            │                   ├── <2153> Dot
            │                   │   ├── <2151> Subscript
            │                   │   │   ├── <2149> Dot
            │                   │   │   │   ├── <2147> Var [u]
            │                   │   │   │   ╰── u_arr
            │                   │   │   ╰── <2150> Constant Int [1]
            │                   │   ╰── d
            │                   ╰── <2157> Unary [-]
            │                       ╰── <2156> Constant Double [+3e1]
            ├── Function [test_uneven_union_array]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [uneven_union_array]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <2203>  [&&]
            │               ├── <2186>  [==]
            │               │   ├── <2183> FunctionCall [strcmp]
            │               │   │   ├── <2181> Dot
            │               │   │   │   ├── <2179> Subscript
            │               │   │   │   │   ├── <2177> Dot
            │               │   │   │   │   │   ├── <2175> Var [u]
            │               │   │   │   │   │   ╰── u_arr
            │               │   │   │   │   ╰── <2178> Constant Int [0]
            │               │   │   │   ╰── arr
            │               │   │   ╰── <2182> "QWER"
            │               │   ╰── <2185> Constant Int [0]
            │               ╰── <2201>  [==]
            │                   ├── <2198> FunctionCall [strcmp]
            │                   │   ├── <2196> Dot
            │                   │   │   ├── <2194> Subscript
            │                   │   │   │   ├── <2192> Dot
            │                   │   │   │   │   ├── <2190> Var [u]
            │                   │   │   │   │   ╰── u_arr
            │                   │   │   │   ╰── <2193> Constant Int [1]
            │                   │   │   ╰── arr
            │                   │   ╰── <2197> "TYUI"
            │                   ╰── <2200> Constant Int [0]
            ├── Function [test_has_small_struct_array]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [has_small_struct_array]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <2300>  [&&]
            │               ├── <2287>  [&&]
            │               │   ├── <2271>  [&&]
            │               │   │   ├── <2258>  [&&]
            │               │   │   │   ├── <2242>  [&&]
            │               │   │   │   │   ├── <2229>  [==]
            │               │   │   │   │   │   ├── <2226> FunctionCall [strcmp]
            │               │   │   │   │   │   │   ├── <2224> Dot
            │               │   │   │   │   │   │   │   ├── <2222> Subscript
            │               │   │   │   │   │   │   │   │   ├── <2220> Dot
            │               │   │   │   │   │   │   │   │   │   ├── <2218> Var [u]
            │               │   │   │   │   │   │   │   │   │   ╰── arr
            │               │   │   │   │   │   │   │   │   ╰── <2221> Constant Int [0]
            │               │   │   │   │   │   │   │   ╰── arr
            │               │   │   │   │   │   │   ╰── <2225> "AS"
            │               │   │   │   │   │   ╰── <2228> Constant Int [0]
            │               │   │   │   │   ╰── <2241>  [==]
            │               │   │   │   │       ├── <2238> Dot
            │               │   │   │   │       │   ├── <2236> Subscript
            │               │   │   │   │       │   │   ├── <2234> Dot
            │               │   │   │   │       │   │   │   ├── <2232> Var [u]
            │               │   │   │   │       │   │   │   ╰── arr
            │               │   │   │   │       │   │   ╰── <2235> Constant Int [0]
            │               │   │   │   │       │   ╰── sc
            │               │   │   │   │       ╰── <2240> Constant Int [10]
            │               │   │   │   ╰── <2257>  [==]
            │               │   │   │       ├── <2254> FunctionCall [strcmp]
            │               │   │   │       │   ├── <2252> Dot
            │               │   │   │       │   │   ├── <2250> Subscript
            │               │   │   │       │   │   │   ├── <2248> Dot
            │               │   │   │       │   │   │   │   ├── <2246> Var [u]
            │               │   │   │       │   │   │   │   ╰── arr
            │               │   │   │       │   │   │   ╰── <2249> Constant Int [1]
            │               │   │   │       │   │   ╰── arr
            │               │   │   │       │   ╰── <2253> "DF"
            │               │   │   │       ╰── <2256> Constant Int [0]
            │               │   │   ╰── <2270>  [==]
            │               │   │       ├── <2267> Dot
            │               │   │       │   ├── <2265> Subscript
            │               │   │       │   │   ├── <2263> Dot
            │               │   │       │   │   │   ├── <2261> Var [u]
            │               │   │       │   │   │   ╰── arr
            │               │   │       │   │   ╰── <2264> Constant Int [1]
            │               │   │       │   ╰── sc
            │               │   │       ╰── <2269> Constant Int [11]
            │               │   ╰── <2286>  [==]
            │               │       ├── <2283> FunctionCall [strcmp]
            │               │       │   ├── <2281> Dot
            │               │       │   │   ├── <2279> Subscript
            │               │       │   │   │   ├── <2277> Dot
            │               │       │   │   │   │   ├── <2275> Var [u]
            │               │       │   │   │   │   ╰── arr
            │               │       │   │   │   ╰── <2278> Constant Int [2]
            │               │       │   │   ╰── arr
            │               │       │   ╰── <2282> "GH"
            │               │       ╰── <2285> Constant Int [0]
            │               ╰── <2299>  [==]
            │                   ├── <2296> Dot
            │                   │   ├── <2294> Subscript
            │                   │   │   ├── <2292> Dot
            │                   │   │   │   ├── <2290> Var [u]
            │                   │   │   │   ╰── arr
            │                   │   │   ╰── <2293> Constant Int [2]
            │                   │   ╰── sc
            │                   ╰── <2298> Constant Int [12]
            ├── Function [test_gp_and_xmm]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [gp_and_xmm]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <2332>  [&&]
            │               ├── <2321>  [==]
            │               │   ├── <2318> Subscript
            │               │   │   ├── <2316> Dot
            │               │   │   │   ├── <2314> Var [u]
            │               │   │   │   ╰── d_arr
            │               │   │   ╰── <2317> Constant Int [0]
            │               │   ╰── <2320> Constant Double [+1.1e1]
            │               ╰── <2331>  [==]
            │                   ├── <2328> Subscript
            │                   │   ├── <2326> Dot
            │                   │   │   ├── <2324> Var [u]
            │                   │   │   ╰── d_arr
            │                   │   ╰── <2327> Constant Int [1]
            │                   ╰── <2330> Constant Double [+1.2e1]
            ├── Function [test_scalar_and_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [scalar_and_struct]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <2368>  [&&]
            │               ├── <2355>  [==]
            │               │   ├── <2350> Dot
            │               │   │   ├── <2348> Dot
            │               │   │   │   ├── <2346> Var [u]
            │               │   │   │   ╰── cfe
            │               │   │   ╰── c
            │               │   ╰── <2354> Unary [-]
            │               │       ╰── <2353> Constant Int [5]
            │               ╰── <2367>  [==]
            │                   ├── <2362> Dot
            │                   │   ├── <2360> Dot
            │                   │   │   ├── <2358> Var [u]
            │                   │   │   ╰── cfe
            │                   │   ╰── d
            │                   ╰── <2366> Unary [-]
            │                       ╰── <2365> Constant Double [+8.88e1]
            ├── Function [test_has_two_unions]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [has_two_unions]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2389> FunctionCall [strcmp]
            │       │   │       ├── <2387> Dot
            │       │   │       │   ├── <2385> Dot
            │       │   │       │   │   ├── <2383> Var [s]
            │       │   │       │   │   ╰── member1
            │       │   │       │   ╰── arr
            │       │   │       ╰── <2388> "WXYZ"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2390> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2405>  [!=]
            │       │   │       ├── <2400> Dot
            │       │   │       │   ├── <2398> Dot
            │       │   │       │   │   ├── <2396> Var [s]
            │       │   │       │   │   ╰── member2
            │       │   │       │   ╰── d1
            │       │   │       ╰── <2404> Unary [-]
            │       │   │           ╰── <2403> Constant Double [+2.345e6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2406> Constant Int [0]
            │       ╰── Return
            │           ╰── <2411> Constant Int [1]
            ├── Function [test_small_struct_arr_and_dbl]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [small_struct_arr_and_dbl]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <2452>  [&&]
            │               ├── <2436>  [==]
            │               │   ├── <2431> Subscript
            │               │   │   ├── <2429> Dot
            │               │   │   │   ├── <2427> Dot
            │               │   │   │   │   ├── <2425> Var [u]
            │               │   │   │   │   ╰── d
            │               │   │   │   ╰── arr
            │               │   │   ╰── <2430> Constant Int [0]
            │               │   ╰── <2435> Unary [-]
            │               │       ╰── <2434> Constant Double [+2.2e1]
            │               ╰── <2450>  [==]
            │                   ├── <2445> Subscript
            │                   │   ├── <2443> Dot
            │                   │   │   ├── <2441> Dot
            │                   │   │   │   ├── <2439> Var [u]
            │                   │   │   │   ╰── d
            │                   │   │   ╰── arr
            │                   │   ╰── <2444> Constant Int [1]
            │                   ╰── <2449> Unary [-]
            │                       ╰── <2448> Constant Double [+3.2e1]
            ├── Function [test_xmm_and_gp]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [xmm_and_gp]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <2489>  [&&]
            │               ├── <2475>  [==]
            │               │   ├── <2470> Dot
            │               │   │   ├── <2468> Dot
            │               │   │   │   ├── <2466> Var [u]
            │               │   │   │   ╰── ise
            │               │   │   ╰── d
            │               │   ╰── <2474> Unary [-]
            │               │       ╰── <2473> Constant Double [+8e0]
            │               ╰── <2487>  [==]
            │                   ├── <2482> Dot
            │                   │   ├── <2480> Dot
            │                   │   │   ├── <2478> Var [u]
            │                   │   │   ╰── ise
            │                   │   ╰── i
            │                   ╰── <2486> Unary [-]
            │                       ╰── <2485> Constant Int [8]
            ├── Function [test_xmm_and_gp_nested]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [xmm_and_gp_nested]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <2530>  [&&]
            │               ├── <2514>  [==]
            │               │   ├── <2509> Dot
            │               │   │   ├── <2507> Dot
            │               │   │   │   ├── <2505> Dot
            │               │   │   │   │   ├── <2503> Var [u]
            │               │   │   │   │   ╰── member1
            │               │   │   │   ╰── ise
            │               │   │   ╰── d
            │               │   ╰── <2513> Unary [-]
            │               │       ╰── <2512> Constant Double [+8e0]
            │               ╰── <2528>  [==]
            │                   ├── <2523> Dot
            │                   │   ├── <2521> Dot
            │                   │   │   ├── <2519> Dot
            │                   │   │   │   ├── <2517> Var [u]
            │                   │   │   │   ╰── member1
            │                   │   │   ╰── ise
            │                   │   ╰── i
            │                   ╰── <2527> Unary [-]
            │                       ╰── <2526> Constant Int [8]
            ├── Function [test_lotsa_doubles]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [lotsa_doubles]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <2573>  [&&]
            │               ├── <2562>  [&&]
            │               │   ├── <2551>  [==]
            │               │   │   ├── <2548> Subscript
            │               │   │   │   ├── <2546> Dot
            │               │   │   │   │   ├── <2544> Var [u]
            │               │   │   │   │   ╰── arr
            │               │   │   │   ╰── <2547> Constant Int [0]
            │               │   │   ╰── <2550> Constant Double [+9.9e1]
            │               │   ╰── <2561>  [==]
            │               │       ├── <2558> Subscript
            │               │       │   ├── <2556> Dot
            │               │       │   │   ├── <2554> Var [u]
            │               │       │   │   ╰── arr
            │               │       │   ╰── <2557> Constant Int [1]
            │               │       ╰── <2560> Constant Double [+9.8e1]
            │               ╰── <2572>  [==]
            │                   ├── <2569> Subscript
            │                   │   ├── <2567> Dot
            │                   │   │   ├── <2565> Var [u]
            │                   │   │   ╰── arr
            │                   │   ╰── <2568> Constant Int [2]
            │                   ╰── <2571> Constant Int [97]
            ├── Function [test_lotsa_chars]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [lotsa_chars]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <2594> Unary [!]
            │               ╰── <2593> FunctionCall [strcmp]
            │                   ├── <2591> Dot
            │                   │   ├── <2589> Var [u]
            │                   │   ╰── more_chars
            │                   ╰── <2592> "asflakjsdflkjs"
            ├── Function [test_contains_large_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Union [contains_large_struct]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <2639>  [&&]
            │               ├── <2626>  [&&]
            │               │   ├── <2615>  [==]
            │               │   │   ├── <2612> Dot
            │               │   │   │   ├── <2610> Dot
            │               │   │   │   │   ├── <2608> Var [u]
            │               │   │   │   │   ╰── l
            │               │   │   │   ╰── i
            │               │   │   ╰── <2614> Constant Int [100]
            │               │   ╰── <2625>  [==]
            │               │       ├── <2622> Dot
            │               │       │   ├── <2620> Dot
            │               │       │   │   ├── <2618> Var [u]
            │               │       │   │   ╰── l
            │               │       │   ╰── d
            │               │       ╰── <2624> Constant Double [+1e2]
            │               ╰── <2638> Unary [!]
            │                   ╰── <2637> FunctionCall [strcmp]
            │                       ├── <2635> Dot
            │                       │   ├── <2633> Dot
            │                       │   │   ├── <2631> Var [u]
            │                       │   │   ╰── l
            │                       │   ╰── arr
            │                       ╰── <2636> "A struct!"
            ╰── Function [test_contains_union_array]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── u
                │       ╰── Type
                │           ╰── Union [contains_union_array]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Union [gp_and_xmm]
                    │   ╰── Initializer
                    │       ╰── <2661> Subscript
                    │           ├── <2659> Dot
                    │           │   ├── <2657> Var [u]
                    │           │   ╰── arr
                    │           ╰── <2660> Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Union [gp_and_xmm]
                    │   ╰── Initializer
                    │       ╰── <2673> Subscript
                    │           ├── <2671> Dot
                    │           │   ├── <2669> Var [u]
                    │           │   ╰── arr
                    │           ╰── <2672> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2695>  [||]
                    │   │       ├── <2684>  [!=]
                    │   │       │   ├── <2681> Subscript
                    │   │       │   │   ├── <2679> Dot
                    │   │       │   │   │   ├── <2677> Var [a]
                    │   │       │   │   │   ╰── d_arr
                    │   │       │   │   ╰── <2680> Constant Int [0]
                    │   │       │   ╰── <2683> Constant Double [+1.1e1]
                    │   │       ╰── <2694>  [!=]
                    │   │           ├── <2691> Subscript
                    │   │           │   ├── <2689> Dot
                    │   │           │   │   ├── <2687> Var [a]
                    │   │           │   │   ╰── d_arr
                    │   │           │   ╰── <2690> Constant Int [1]
                    │   │           ╰── <2693> Constant Double [+1.2e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2696> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2720>  [||]
                    │   │       ├── <2711>  [!=]
                    │   │       │   ├── <2706> Subscript
                    │   │       │   │   ├── <2704> Dot
                    │   │       │   │   │   ├── <2702> Var [b]
                    │   │       │   │   │   ╰── d_arr
                    │   │       │   │   ╰── <2705> Constant Int [1]
                    │   │       │   ╰── <2710> Unary [-]
                    │   │       │       ╰── <2709> Constant Int [1]
                    │   │       ╰── <2719>  [!=]
                    │   │           ├── <2716> Dot
                    │   │           │   ├── <2714> Var [b]
                    │   │           │   ╰── c
                    │   │           ╰── <2718> Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2721> Constant Int [0]
                    ╰── Return
                        ╰── <2726> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_libraries_classify_unions_client() {
    let src = r#"
        int strcmp(char* s1, char* s2);
        void exit(int status);
        void *malloc(unsigned long size);
        union one_double {
            double d1;
            double d2;
        };
        struct has_union_with_double {
            union one_double member;
        };
        union has_struct_with_double {
            struct has_union_with_double s;
            double arr[1];
        };
        union one_int {
            double d;
            char c;
        };
        union one_int_nested {
            union one_int oi;
            union one_double od;
        };
        union char_int_mixed {
            char arr[7];
            union char_int_mixed* union_ptr;
            unsigned int ui;
        };
        union char_int_short {
            char c;
            int i;
        };
        struct has_union {
            unsigned int i;
            union char_int_short u;
        };
        union has_struct_with_ints {
            double d;
            struct has_union s;
            unsigned long ul;
        };
        union two_doubles {
            double arr[2];
            double single;
        };
        union has_xmm_union {
            union one_double u;
            union two_doubles u2;
        };
        struct dbl_struct {
            union one_double member1;
            double member2;
        };
        union has_dbl_struct {
            struct dbl_struct member1;
        };
        union char_arr {
            char arr[11];
            int i;
        };
        union two_arrs {
            double dbl_arr[2];
            long long_arr[2];
        };
        union two_eightbyte_has_struct {
            int arr[3];
            struct dbl_struct member1;
        };
        struct char_first_eightbyte {
            char c;
            double d;
        };
        struct int_second_eightbyte {
            double d;
            int i;
        };
        union two_structs {
            struct char_first_eightbyte member1;
            struct int_second_eightbyte member2;
        };
        struct nine_bytes {
            int i;
            char arr[5];
        };
        union has_nine_byte_struct {
            char c;
            long l;
            struct nine_bytes s;
        };
        union uneven {
            char arr[5];
            unsigned char uc;
        };
        struct has_uneven_union {
            int i;
            union uneven u;
        };
        union has_other_unions {
            union uneven u;
            union two_doubles d;
            union has_nine_byte_struct n;
        };
        union union_array {
            union one_int u_arr[2];
        };
        union uneven_union_array {
            union uneven u_arr[2];
        };
        struct small {
            char arr[3];
            signed char sc;
        };
        union has_small_struct_array {
            struct small arr[3];
        };
        union gp_and_xmm {
            double d_arr[2];
            char c;
        };
        union scalar_and_struct {
            long* ptr;
            struct char_first_eightbyte cfe;
        };
        struct has_two_unions {
            union char_int_mixed member1;
            union one_double member2;
        };
        union small_struct_arr_and_dbl {
            struct small arr[2];
            union two_doubles d;
        };
        union xmm_and_gp {
            double d;
            struct int_second_eightbyte ise;
        };
        union xmm_and_gp_nested {
            union xmm_and_gp member1;
            double arr[2];
            union two_doubles d;
        };
        union lotsa_doubles {
            double arr[3];
            int i;
        };
        union lotsa_chars {
            char more_chars[18];
            char fewer_chars[5];
        };
        struct large {
            int i;
            double d;
            char arr[10];
        };
        union contains_large_struct {
            int i;
            unsigned long ul;
            struct large l;
        };
        union contains_union_array {
            union gp_and_xmm arr[2];
        };
        int test_one_double(union one_double u);
        int test_has_union_with_double(struct has_union_with_double s);
        int test_has_struct_with_double(union has_struct_with_double u);
        int test_one_int(union one_int u);
        int test_one_int_nested(union one_int_nested u);
        int test_char_int_mixed(union char_int_mixed u);
        int test_has_union(struct has_union s);
        int test_has_struct_with_ints(union has_struct_with_ints u);
        int test_two_doubles(union two_doubles u);
        int test_has_xmm_union(union has_xmm_union u);
        int test_dbl_struct(struct dbl_struct s);
        int test_has_dbl_struct(union has_dbl_struct u);
        int test_char_arr(union char_arr u);
        int test_two_arrs(union two_arrs u);
        int test_two_eightbyte_has_struct(union two_eightbyte_has_struct u);
        int test_two_structs(union two_structs u);
        int test_has_nine_byte_struct(union has_nine_byte_struct u);
        int test_has_uneven_union(struct has_uneven_union s);
        int test_has_other_unions(union has_other_unions u);
        int test_union_array(union union_array u);
        int test_uneven_union_array(union uneven_union_array u);
        int test_has_small_struct_array(union has_small_struct_array u);
        int test_gp_and_xmm(union gp_and_xmm u);
        int test_scalar_and_struct(union scalar_and_struct u);
        int test_has_two_unions(struct has_two_unions s);
        int test_small_struct_arr_and_dbl(union small_struct_arr_and_dbl u);
        int test_xmm_and_gp(union xmm_and_gp u);
        int test_xmm_and_gp_nested(union xmm_and_gp_nested u);
        int test_lotsa_doubles(union lotsa_doubles u);
        int test_lotsa_chars(union lotsa_chars u);
        int test_contains_large_struct(union contains_large_struct u);
        int test_contains_union_array(union contains_union_array u);
        int pass_unions_and_structs(int i1, int i2, struct has_union one_gp_struct,
            double d1, union two_doubles two_xmm, union one_int one_gp, int i3, int i4,
            int i5);
        int pass_gp_union_in_memory(union two_doubles two_xmm,
            struct has_union one_gp_struct, int i1, int i2, int i3,
            int i4, int i5, int i6, union one_int one_gp);
        int pass_xmm_union_in_memory(double d1, double d2, union two_doubles two_xmm,
            union two_doubles two_xmm_copy, double d3, double d4,
            union two_doubles two_xmm_2);
        int pass_borderline_union(int i1, int i2, int i3, int i4, int i5,
            union char_arr two_gp);
        int pass_borderline_xmm_union(union two_doubles two_xmm, double d1, double d2,
            double d3, double d4, double d5, union two_doubles two_xmm_2);
        int pass_mixed_reg_in_memory(double d1, double d2, double d3, double d4,
            int i1, int i2, int i3, int i4, int i5, int i6,
            union gp_and_xmm mixed_regs);
        int pass_uneven_union_in_memory(int i1, int i2, int i3, int i4, int i5,
            union gp_and_xmm mixed_regs, union one_int one_gp, union uneven uneven);
        int pass_in_mem_first(union lotsa_doubles mem, union gp_and_xmm mixed_regs,
            union char_arr two_gp, struct has_union one_gp_struct);
        union one_double return_one_double(void);
        union one_int_nested return_one_int_nested(void);
        union has_dbl_struct return_has_dbl_struct(void);
        union two_arrs return_two_arrs(void);
        union scalar_and_struct return_scalar_and_struct(void);
        union xmm_and_gp return_xmm_and_gp(void);
        union contains_union_array return_contains_union_array(void);
        union lotsa_chars pass_params_and_return_in_mem(int i1,
            union scalar_and_struct int_and_dbl, union two_arrs two_arrs, int i2,
            union contains_union_array big_union, union one_int_nested oin);
        struct has_uneven_union return_struct_with_union(void);
        
        int main(void) {
            union one_double od = { -2.345e6 };
            if (!test_one_double(od)) {
                return 1;
            }
            struct has_union_with_double huwd = { {9887.54321e44} };
            if (!test_has_union_with_double(huwd)) {
                return 2;
            }
            union has_struct_with_double hswd = { huwd };
            if (!test_has_struct_with_double(hswd)) {
                return 3;
            }
            union one_int oi = { -80. };
            if (!test_one_int(oi)) {
                return 4;
            }
            union one_int_nested oin = { {44e55} };
            if (!test_one_int_nested(oin)) {
                return 5;
            }
            union char_int_mixed cim = { "WXYZ" };
            if (!test_char_int_mixed(cim)) {
                return 6;
            }
            struct has_union hu = { 4294954951u, {-60} };
            if (!test_has_union(hu)) {
                return 7;
            }
            union has_struct_with_ints hswi;
            hswi.s = hu;
            if (!test_has_struct_with_ints(hswi)) {
                return 8;
            }
            union two_doubles td = { {10.0, 11.0} };
            if (!test_two_doubles(td)) {
                return 9;
            }
            union has_xmm_union hxu;
            hxu.u2 = td;
            if (!test_has_xmm_union(hxu)) {
                return 10;
            }
            struct dbl_struct ds = { od, 123.45 };
            if (!test_dbl_struct(ds)) {
                return 11;
            }
            union has_dbl_struct hds = { ds };
            if (!test_has_dbl_struct(hds)) {
                return 12;
            }
            union char_arr ca = { "Chars!" };
            if (!test_char_arr(ca)) {
                return 13;
            }
            union two_arrs two_arr_var = { {13e4, 14.5} };
            if (!test_two_arrs(two_arr_var)) {
                return 14;
            }
            union two_eightbyte_has_struct tehs = { {100, 200, 300} };
            if (!test_two_eightbyte_has_struct(tehs)) {
                return 15;
            }
            union two_structs ts = { {'x', 55.5e5} };
            if (!test_two_structs(ts)) {
                return 16;
            }
            union has_nine_byte_struct hnbs;
            hnbs.s.i = -16711936;
            for (int i = 0; i < 5; i = i + 1) {
                char byte = i % 2 ? -1 : 0;
                hnbs.s.arr[i] = byte;
            }
            hnbs.s.arr[4] = 0;
            if (!test_has_nine_byte_struct(hnbs)) {
                return 17;
            }
            struct has_uneven_union huu = { -2147483647, {"!@#$"} };
            if (!test_has_uneven_union(huu)) {
                return 18;
            }
            union has_other_unions hou;
            hou.n = hnbs;
            hou.n.s.arr[4] = 0;
            if (!test_has_other_unions(hou)) {
                return 19;
            }
            union union_array ua = { {{-20.}, {-30.}} };
            if (!test_union_array(ua)) {
                return 20;
            }
            union uneven_union_array uua = { {{"QWER"},{"TYUI"}} };
            if (!test_uneven_union_array(uua)) {
                return 21;
            }
            union has_small_struct_array hssa = { {
                {"AS", 10}, {"DF", 11}, {"GH", 12}
            } };
            if (!test_has_small_struct_array(hssa)) {
                return 22;
            }
            union gp_and_xmm gax = { {11., 12} };
            if (!test_gp_and_xmm(gax)) {
                return 23;
            }
            union scalar_and_struct sas;
            sas.cfe.c = -5;
            sas.cfe.d = -88.8;
            if (!test_scalar_and_struct(sas)) {
                return 24;
            }
            struct has_two_unions htu = {
                cim, od
            };
            if (!test_has_two_unions(htu)) {
                return 25;
            }
            union small_struct_arr_and_dbl ssaad;
            ssaad.d.arr[0] = -22.;
            ssaad.d.arr[1] = -32.;
            if (!test_small_struct_arr_and_dbl(ssaad)) {
                return 26;
            }
            union xmm_and_gp xag;
            xag.ise.d = -8.;
            xag.ise.i = -8;
            if (!test_xmm_and_gp(xag)) {
                return 27;
            }
            union xmm_and_gp_nested xagn = { xag };
            if (!test_xmm_and_gp_nested(xagn)) {
                return 28;
            }
            union lotsa_doubles dbls = { {99., 98., 97.} };
            if (!test_lotsa_doubles(dbls)) {
                return 29;
            }
            union lotsa_chars chars = { "asflakjsdflkjs" };
            if (!test_lotsa_chars(chars)) {
                return 30;
            }
            struct large large_struct = { 100, 100., "A struct!" };
            union contains_large_struct cls;
            cls.l = large_struct;
            if (!test_contains_large_struct(cls)) {
                return 31;
            }
            union gp_and_xmm gax2 = gax;
            gax2.d_arr[0] = -2.0;
            gax2.d_arr[1] = -1.0;
            union contains_union_array cua = {
                {gax, gax2}
            };
            if (!test_contains_union_array(cua)) {
                return 32;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Union [one_double]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d1
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d2
            │       ╰── Type
            │           ╰── Double
            ├── Struct [has_union_with_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [has_struct_with_double]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [has_union_with_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Double
            ├── Union [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Union [one_int_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── oi
            │   │   ╰── Type
            │   │       ╰── Union [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── od
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [char_int_mixed]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 7
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── union_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Union [char_int_mixed]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ui
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Union [char_int_short]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Unsigned Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Union [char_int_short]
            ├── Union [has_struct_with_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [has_union]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ul
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Union [two_doubles]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── single
            │       ╰── Type
            │           ╰── Double
            ├── Union [has_xmm_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u2
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Struct [dbl_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Double
            ├── Union [has_dbl_struct]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member1
            │       ╰── Type
            │           ╰── Struct [dbl_struct]
            ├── Union [char_arr]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 11
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [two_arrs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── long_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Long
            ├── Union [two_eightbyte_has_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member1
            │       ╰── Type
            │           ╰── Struct [dbl_struct]
            ├── Struct [char_first_eightbyte]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [int_second_eightbyte]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [two_structs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Struct [char_first_eightbyte]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Struct [int_second_eightbyte]
            ├── Struct [nine_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Union [has_nine_byte_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [nine_bytes]
            ├── Union [uneven]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 5
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── uc
            │       ╰── Type
            │           ╰── Unsigned Char
            ├── Struct [has_uneven_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Union [uneven]
            ├── Union [has_other_unions]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [uneven]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Union [two_doubles]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── n
            │       ╰── Type
            │           ╰── Union [has_nine_byte_struct]
            ├── Union [union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [one_int]
            ├── Union [uneven_union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [uneven]
            ├── Struct [small]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sc
            │       ╰── Type
            │           ╰── Signed Char
            ├── Union [has_small_struct_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [small]
            ├── Union [gp_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Union [scalar_and_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cfe
            │       ╰── Type
            │           ╰── Struct [char_first_eightbyte]
            ├── Struct [has_two_unions]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [char_int_mixed]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [small_struct_arr_and_dbl]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Struct [small]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Union [xmm_and_gp]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ise
            │       ╰── Type
            │           ╰── Struct [int_second_eightbyte]
            ├── Union [xmm_and_gp_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [xmm_and_gp]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Union [lotsa_doubles]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [lotsa_chars]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── more_chars
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 18
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── fewer_chars
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [large]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Char
            ├── Union [contains_large_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ul
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Struct [large]
            ├── Union [contains_union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [gp_and_xmm]
            ├── Function [test_one_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_double]
            ├── Function [test_has_union_with_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_union_with_double]
            ├── Function [test_has_struct_with_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_struct_with_double]
            ├── Function [test_one_int]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_int]
            ├── Function [test_one_int_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_int_nested]
            ├── Function [test_char_int_mixed]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [char_int_mixed]
            ├── Function [test_has_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_union]
            ├── Function [test_has_struct_with_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_struct_with_ints]
            ├── Function [test_two_doubles]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [test_has_xmm_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_xmm_union]
            ├── Function [test_dbl_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [dbl_struct]
            ├── Function [test_has_dbl_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_dbl_struct]
            ├── Function [test_char_arr]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [char_arr]
            ├── Function [test_two_arrs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_arrs]
            ├── Function [test_two_eightbyte_has_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_eightbyte_has_struct]
            ├── Function [test_two_structs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_structs]
            ├── Function [test_has_nine_byte_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_nine_byte_struct]
            ├── Function [test_has_uneven_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_uneven_union]
            ├── Function [test_has_other_unions]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_other_unions]
            ├── Function [test_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [union_array]
            ├── Function [test_uneven_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [uneven_union_array]
            ├── Function [test_has_small_struct_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_small_struct_array]
            ├── Function [test_gp_and_xmm]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [gp_and_xmm]
            ├── Function [test_scalar_and_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [scalar_and_struct]
            ├── Function [test_has_two_unions]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_two_unions]
            ├── Function [test_small_struct_arr_and_dbl]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [small_struct_arr_and_dbl]
            ├── Function [test_xmm_and_gp]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [xmm_and_gp]
            ├── Function [test_xmm_and_gp_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [xmm_and_gp_nested]
            ├── Function [test_lotsa_doubles]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [lotsa_doubles]
            ├── Function [test_lotsa_chars]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [lotsa_chars]
            ├── Function [test_contains_large_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [contains_large_struct]
            ├── Function [test_contains_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [contains_union_array]
            ├── Function [pass_unions_and_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp_struct
            │       │   ╰── Type
            │       │       ╰── Struct [has_union]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp
            │       │   ╰── Type
            │       │       ╰── Union [one_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i5
            │           ╰── Type
            │               ╰── Int
            ├── Function [pass_gp_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp_struct
            │       │   ╰── Type
            │       │       ╰── Struct [has_union]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── one_gp
            │           ╰── Type
            │               ╰── Union [one_int]
            ├── Function [pass_xmm_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm_copy
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_xmm_2
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [pass_borderline_union]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_gp
            │           ╰── Type
            │               ╰── Union [char_arr]
            ├── Function [pass_borderline_xmm_union]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d5
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_xmm_2
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [pass_mixed_reg_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── mixed_regs
            │           ╰── Type
            │               ╰── Union [gp_and_xmm]
            ├── Function [pass_uneven_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_regs
            │       │   ╰── Type
            │       │       ╰── Union [gp_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp
            │       │   ╰── Type
            │       │       ╰── Union [one_int]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── uneven
            │           ╰── Type
            │               ╰── Union [uneven]
            ├── Function [pass_in_mem_first]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mem
            │       │   ╰── Type
            │       │       ╰── Union [lotsa_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_regs
            │       │   ╰── Type
            │       │       ╰── Union [gp_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_gp
            │       │   ╰── Type
            │       │       ╰── Union [char_arr]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── one_gp_struct
            │           ╰── Type
            │               ╰── Struct [has_union]
            ├── Function [return_one_double]
            ├── Function [return_one_int_nested]
            ├── Function [return_has_dbl_struct]
            ├── Function [return_two_arrs]
            ├── Function [return_scalar_and_struct]
            ├── Function [return_xmm_and_gp]
            ├── Function [return_contains_union_array]
            ├── Function [pass_params_and_return_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_and_dbl
            │       │   ╰── Type
            │       │       ╰── Union [scalar_and_struct]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_arrs
            │       │   ╰── Type
            │       │       ╰── Union [two_arrs]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── big_union
            │       │   ╰── Type
            │       │       ╰── Union [contains_union_array]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── oin
            │           ╰── Type
            │               ╰── Union [one_int_nested]
            ├── Function [return_struct_with_union]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── od
                    │   ├── Type
                    │   │   ╰── Union [one_double]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <1197> Unary [-]
                    │               ╰── <1196> Constant Double [+2.345e6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1206> Unary [!]
                    │   │       ╰── <1205> FunctionCall [test_one_double]
                    │   │           ╰── <1204> Var [od]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1207> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── huwd
                    │   ├── Type
                    │   │   ╰── Struct [has_union_with_double]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <1216> Constant Double [+9.88754321e47]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1226> Unary [!]
                    │   │       ╰── <1225> FunctionCall [test_has_union_with_double]
                    │   │           ╰── <1224> Var [huwd]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1227> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── hswd
                    │   ├── Type
                    │   │   ╰── Union [has_struct_with_double]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <1237> Var [huwd]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1246> Unary [!]
                    │   │       ╰── <1245> FunctionCall [test_has_struct_with_double]
                    │   │           ╰── <1244> Var [hswd]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1247> Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── oi
                    │   ├── Type
                    │   │   ╰── Union [one_int]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <1258> Unary [-]
                    │               ╰── <1257> Constant Double [+8e1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1267> Unary [!]
                    │   │       ╰── <1266> FunctionCall [test_one_int]
                    │   │           ╰── <1265> Var [oi]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1268> Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── oin
                    │   ├── Type
                    │   │   ╰── Union [one_int_nested]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <1277> Constant Double [+4.4e56]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1287> Unary [!]
                    │   │       ╰── <1286> FunctionCall [test_one_int_nested]
                    │   │           ╰── <1285> Var [oin]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1288> Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── cim
                    │   ├── Type
                    │   │   ╰── Union [char_int_mixed]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <1297> "WXYZ"
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1306> Unary [!]
                    │   │       ╰── <1305> FunctionCall [test_char_int_mixed]
                    │   │           ╰── <1304> Var [cim]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1307> Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── hu
                    │   ├── Type
                    │   │   ╰── Struct [has_union]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <1316> Constant UInt [4294954951]
                    │           ╰── Compound
                    │               ╰── <1320> Unary [-]
                    │                   ╰── <1319> Constant Int [60]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1330> Unary [!]
                    │   │       ╰── <1329> FunctionCall [test_has_union]
                    │   │           ╰── <1328> Var [hu]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1331> Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── hswi
                    │   ╰── Type
                    │       ╰── Union [has_struct_with_ints]
                    ├── <1348> Assign [=]
                    │   ├── <1344> Dot
                    │   │   ├── <1342> Var [hswi]
                    │   │   ╰── s
                    │   ╰── <1347> Var [hu]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1355> Unary [!]
                    │   │       ╰── <1354> FunctionCall [test_has_struct_with_ints]
                    │   │           ╰── <1353> Var [hswi]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1356> Constant Int [8]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── td
                    │   ├── Type
                    │   │   ╰── Union [two_doubles]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <1365> Constant Double [+1e1]
                    │               ╰── <1367> Constant Double [+1.1e1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1377> Unary [!]
                    │   │       ╰── <1376> FunctionCall [test_two_doubles]
                    │   │           ╰── <1375> Var [td]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1378> Constant Int [9]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── hxu
                    │   ╰── Type
                    │       ╰── Union [has_xmm_union]
                    ├── <1395> Assign [=]
                    │   ├── <1391> Dot
                    │   │   ├── <1389> Var [hxu]
                    │   │   ╰── u2
                    │   ╰── <1394> Var [td]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1402> Unary [!]
                    │   │       ╰── <1401> FunctionCall [test_has_xmm_union]
                    │   │           ╰── <1400> Var [hxu]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1403> Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ds
                    │   ├── Type
                    │   │   ╰── Struct [dbl_struct]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <1413> Var [od]
                    │           ╰── <1415> Constant Double [+1.2345e2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1424> Unary [!]
                    │   │       ╰── <1423> FunctionCall [test_dbl_struct]
                    │   │           ╰── <1422> Var [ds]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1425> Constant Int [11]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── hds
                    │   ├── Type
                    │   │   ╰── Union [has_dbl_struct]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <1435> Var [ds]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1444> Unary [!]
                    │   │       ╰── <1443> FunctionCall [test_has_dbl_struct]
                    │   │           ╰── <1442> Var [hds]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1445> Constant Int [12]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ca
                    │   ├── Type
                    │   │   ╰── Union [char_arr]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <1454> "Chars!"
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1463> Unary [!]
                    │   │       ╰── <1462> FunctionCall [test_char_arr]
                    │   │           ╰── <1461> Var [ca]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1464> Constant Int [13]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_arr_var
                    │   ├── Type
                    │   │   ╰── Union [two_arrs]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <1473> Constant Double [+1.3e5]
                    │               ╰── <1475> Constant Double [+1.45e1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1485> Unary [!]
                    │   │       ╰── <1484> FunctionCall [test_two_arrs]
                    │   │           ╰── <1483> Var [two_arr_var]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1486> Constant Int [14]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── tehs
                    │   ├── Type
                    │   │   ╰── Union [two_eightbyte_has_struct]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <1495> Constant Int [100]
                    │               ├── <1497> Constant Int [200]
                    │               ╰── <1499> Constant Int [300]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1509> Unary [!]
                    │   │       ╰── <1508> FunctionCall [test_two_eightbyte_has_struct]
                    │   │           ╰── <1507> Var [tehs]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1510> Constant Int [15]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ts
                    │   ├── Type
                    │   │   ╰── Union [two_structs]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <1519> Constant Int [120]
                    │               ╰── <1521> Constant Double [+5.55e6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1531> Unary [!]
                    │   │       ╰── <1530> FunctionCall [test_two_structs]
                    │   │           ╰── <1529> Var [ts]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1532> Constant Int [16]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── hnbs
                    │   ╰── Type
                    │       ╰── Union [has_nine_byte_struct]
                    ├── <1552> Assign [=]
                    │   ├── <1547> Dot
                    │   │   ├── <1545> Dot
                    │   │   │   ├── <1543> Var [hnbs]
                    │   │   │   ╰── s
                    │   │   ╰── i
                    │   ╰── <1551> Unary [-]
                    │       ╰── <1550> Constant Int [16711936]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <1557> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <1565>  [<]
                    │   │       ├── <1562> Var [i]
                    │   │       ╰── <1564> Constant Int [5]
                    │   ├── Condition
                    │   │   ╰── <1574> Assign [=]
                    │   │       ├── <1567> Var [i]
                    │   │       ╰── <1573>  [+]
                    │   │           ├── <1570> Var [i]
                    │   │           ╰── <1572> Constant Int [1]
                    │   ╰── Block
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── byte
                    │       │   ├── Type
                    │       │   │   ╰── Char
                    │       │   ╰── Initializer
                    │       │       ╰── <1587> Conditional [?]
                    │       │           ├── <1582>  [%]
                    │       │           │   ├── <1579> Var [i]
                    │       │           │   ╰── <1581> Constant Int [2]
                    │       │           ├── Then
                    │       │           │   ╰── <1585> Unary [-]
                    │       │           │       ╰── <1584> Constant Int [1]
                    │       │           ╰── Else
                    │       │               ╰── <1586> Constant Int [0]
                    │       ╰── <1602> Assign [=]
                    │           ├── <1598> Subscript
                    │           │   ├── <1595> Dot
                    │           │   │   ├── <1593> Dot
                    │           │   │   │   ├── <1591> Var [hnbs]
                    │           │   │   │   ╰── s
                    │           │   │   ╰── arr
                    │           │   ╰── <1597> Var [i]
                    │           ╰── <1601> Var [byte]
                    ├── <1617> Assign [=]
                    │   ├── <1614> Subscript
                    │   │   ├── <1612> Dot
                    │   │   │   ├── <1610> Dot
                    │   │   │   │   ├── <1608> Var [hnbs]
                    │   │   │   │   ╰── s
                    │   │   │   ╰── arr
                    │   │   ╰── <1613> Constant Int [4]
                    │   ╰── <1616> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1624> Unary [!]
                    │   │       ╰── <1623> FunctionCall [test_has_nine_byte_struct]
                    │   │           ╰── <1622> Var [hnbs]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1625> Constant Int [17]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── huu
                    │   ├── Type
                    │   │   ╰── Struct [has_uneven_union]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <1636> Unary [-]
                    │           │   ╰── <1635> Constant Int [2147483647]
                    │           ╰── Compound
                    │               ╰── <1638> "!@#$"
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1648> Unary [!]
                    │   │       ╰── <1647> FunctionCall [test_has_uneven_union]
                    │   │           ╰── <1646> Var [huu]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1649> Constant Int [18]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── hou
                    │   ╰── Type
                    │       ╰── Union [has_other_unions]
                    ├── <1666> Assign [=]
                    │   ├── <1662> Dot
                    │   │   ├── <1660> Var [hou]
                    │   │   ╰── n
                    │   ╰── <1665> Var [hnbs]
                    ├── <1680> Assign [=]
                    │   ├── <1677> Subscript
                    │   │   ├── <1675> Dot
                    │   │   │   ├── <1673> Dot
                    │   │   │   │   ├── <1671> Dot
                    │   │   │   │   │   ├── <1669> Var [hou]
                    │   │   │   │   │   ╰── n
                    │   │   │   │   ╰── s
                    │   │   │   ╰── arr
                    │   │   ╰── <1676> Constant Int [4]
                    │   ╰── <1679> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1687> Unary [!]
                    │   │       ╰── <1686> FunctionCall [test_has_other_unions]
                    │   │           ╰── <1685> Var [hou]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1688> Constant Int [19]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ua
                    │   ├── Type
                    │   │   ╰── Union [union_array]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── Compound
                    │               │   ╰── <1699> Unary [-]
                    │               │       ╰── <1698> Constant Double [+2e1]
                    │               ╰── Compound
                    │                   ╰── <1704> Unary [-]
                    │                       ╰── <1703> Constant Double [+3e1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1715> Unary [!]
                    │   │       ╰── <1714> FunctionCall [test_union_array]
                    │   │           ╰── <1713> Var [ua]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1716> Constant Int [20]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── uua
                    │   ├── Type
                    │   │   ╰── Union [uneven_union_array]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── Compound
                    │               │   ╰── <1725> "QWER"
                    │               ╰── Compound
                    │                   ╰── <1728> "TYUI"
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1739> Unary [!]
                    │   │       ╰── <1738> FunctionCall [test_uneven_union_array]
                    │   │           ╰── <1737> Var [uua]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1740> Constant Int [21]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── hssa
                    │   ├── Type
                    │   │   ╰── Union [has_small_struct_array]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── Compound
                    │               │   ├── <1749> "AS"
                    │               │   ╰── <1751> Constant Int [10]
                    │               ├── Compound
                    │               │   ├── <1754> "DF"
                    │               │   ╰── <1756> Constant Int [11]
                    │               ╰── Compound
                    │                   ├── <1759> "GH"
                    │                   ╰── <1761> Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1772> Unary [!]
                    │   │       ╰── <1771> FunctionCall [test_has_small_struct_array]
                    │   │           ╰── <1770> Var [hssa]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1773> Constant Int [22]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── gax
                    │   ├── Type
                    │   │   ╰── Union [gp_and_xmm]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <1782> Constant Double [+1.1e1]
                    │               ╰── <1784> Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1794> Unary [!]
                    │   │       ╰── <1793> FunctionCall [test_gp_and_xmm]
                    │   │           ╰── <1792> Var [gax]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1795> Constant Int [23]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── sas
                    │   ╰── Type
                    │       ╰── Union [scalar_and_struct]
                    ├── <1815> Assign [=]
                    │   ├── <1810> Dot
                    │   │   ├── <1808> Dot
                    │   │   │   ├── <1806> Var [sas]
                    │   │   │   ╰── cfe
                    │   │   ╰── c
                    │   ╰── <1814> Unary [-]
                    │       ╰── <1813> Constant Int [5]
                    ├── <1827> Assign [=]
                    │   ├── <1822> Dot
                    │   │   ├── <1820> Dot
                    │   │   │   ├── <1818> Var [sas]
                    │   │   │   ╰── cfe
                    │   │   ╰── d
                    │   ╰── <1826> Unary [-]
                    │       ╰── <1825> Constant Double [+8.88e1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1834> Unary [!]
                    │   │       ╰── <1833> FunctionCall [test_scalar_and_struct]
                    │   │           ╰── <1832> Var [sas]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1835> Constant Int [24]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── htu
                    │   ├── Type
                    │   │   ╰── Struct [has_two_unions]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <1845> Var [cim]
                    │           ╰── <1848> Var [od]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1857> Unary [!]
                    │   │       ╰── <1856> FunctionCall [test_has_two_unions]
                    │   │           ╰── <1855> Var [htu]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1858> Constant Int [25]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ssaad
                    │   ╰── Type
                    │       ╰── Union [small_struct_arr_and_dbl]
                    ├── <1880> Assign [=]
                    │   ├── <1875> Subscript
                    │   │   ├── <1873> Dot
                    │   │   │   ├── <1871> Dot
                    │   │   │   │   ├── <1869> Var [ssaad]
                    │   │   │   │   ╰── d
                    │   │   │   ╰── arr
                    │   │   ╰── <1874> Constant Int [0]
                    │   ╰── <1879> Unary [-]
                    │       ╰── <1878> Constant Double [+2.2e1]
                    ├── <1894> Assign [=]
                    │   ├── <1889> Subscript
                    │   │   ├── <1887> Dot
                    │   │   │   ├── <1885> Dot
                    │   │   │   │   ├── <1883> Var [ssaad]
                    │   │   │   │   ╰── d
                    │   │   │   ╰── arr
                    │   │   ╰── <1888> Constant Int [1]
                    │   ╰── <1893> Unary [-]
                    │       ╰── <1892> Constant Double [+3.2e1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1901> Unary [!]
                    │   │       ╰── <1900> FunctionCall [test_small_struct_arr_and_dbl]
                    │   │           ╰── <1899> Var [ssaad]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1902> Constant Int [26]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── xag
                    │   ╰── Type
                    │       ╰── Union [xmm_and_gp]
                    ├── <1922> Assign [=]
                    │   ├── <1917> Dot
                    │   │   ├── <1915> Dot
                    │   │   │   ├── <1913> Var [xag]
                    │   │   │   ╰── ise
                    │   │   ╰── d
                    │   ╰── <1921> Unary [-]
                    │       ╰── <1920> Constant Double [+8e0]
                    ├── <1934> Assign [=]
                    │   ├── <1929> Dot
                    │   │   ├── <1927> Dot
                    │   │   │   ├── <1925> Var [xag]
                    │   │   │   ╰── ise
                    │   │   ╰── i
                    │   ╰── <1933> Unary [-]
                    │       ╰── <1932> Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1941> Unary [!]
                    │   │       ╰── <1940> FunctionCall [test_xmm_and_gp]
                    │   │           ╰── <1939> Var [xag]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1942> Constant Int [27]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── xagn
                    │   ├── Type
                    │   │   ╰── Union [xmm_and_gp_nested]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <1952> Var [xag]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1961> Unary [!]
                    │   │       ╰── <1960> FunctionCall [test_xmm_and_gp_nested]
                    │   │           ╰── <1959> Var [xagn]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1962> Constant Int [28]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── dbls
                    │   ├── Type
                    │   │   ╰── Union [lotsa_doubles]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <1971> Constant Double [+9.9e1]
                    │               ├── <1973> Constant Double [+9.8e1]
                    │               ╰── <1975> Constant Double [+9.7e1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1985> Unary [!]
                    │   │       ╰── <1984> FunctionCall [test_lotsa_doubles]
                    │   │           ╰── <1983> Var [dbls]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1986> Constant Int [29]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── chars
                    │   ├── Type
                    │   │   ╰── Union [lotsa_chars]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <1995> "asflakjsdflkjs"
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2004> Unary [!]
                    │   │       ╰── <2003> FunctionCall [test_lotsa_chars]
                    │   │           ╰── <2002> Var [chars]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2005> Constant Int [30]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── large_struct
                    │   ├── Type
                    │   │   ╰── Struct [large]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <2014> Constant Int [100]
                    │           ├── <2016> Constant Double [+1e2]
                    │           ╰── <2018> "A struct!"
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── cls
                    │   ╰── Type
                    │       ╰── Union [contains_large_struct]
                    ├── <2034> Assign [=]
                    │   ├── <2030> Dot
                    │   │   ├── <2028> Var [cls]
                    │   │   ╰── l
                    │   ╰── <2033> Var [large_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2041> Unary [!]
                    │   │       ╰── <2040> FunctionCall [test_contains_large_struct]
                    │   │           ╰── <2039> Var [cls]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2042> Constant Int [31]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── gax2
                    │   ├── Type
                    │   │   ╰── Union [gp_and_xmm]
                    │   ╰── Initializer
                    │       ╰── <2052> Var [gax]
                    ├── <2065> Assign [=]
                    │   ├── <2060> Subscript
                    │   │   ├── <2058> Dot
                    │   │   │   ├── <2056> Var [gax2]
                    │   │   │   ╰── d_arr
                    │   │   ╰── <2059> Constant Int [0]
                    │   ╰── <2064> Unary [-]
                    │       ╰── <2063> Constant Double [+2e0]
                    ├── <2077> Assign [=]
                    │   ├── <2072> Subscript
                    │   │   ├── <2070> Dot
                    │   │   │   ├── <2068> Var [gax2]
                    │   │   │   ╰── d_arr
                    │   │   ╰── <2071> Constant Int [1]
                    │   ╰── <2076> Unary [-]
                    │       ╰── <2075> Constant Double [+1e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── cua
                    │   ├── Type
                    │   │   ╰── Union [contains_union_array]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <2084> Var [gax]
                    │               ╰── <2087> Var [gax2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2097> Unary [!]
                    │   │       ╰── <2096> FunctionCall [test_contains_union_array]
                    │   │           ╰── <2095> Var [cua]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2098> Constant Int [32]
                    ╰── Return
                        ╰── <2103> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_libraries_param_passing() {
    let src = r#"
        int strcmp(char* s1, char* s2);
        void exit(int status);
        void *malloc(unsigned long size);
        union one_double {
            double d1;
            double d2;
        };
        struct has_union_with_double {
            union one_double member;
        };
        union has_struct_with_double {
            struct has_union_with_double s;
            double arr[1];
        };
        union one_int {
            double d;
            char c;
        };
        union one_int_nested {
            union one_int oi;
            union one_double od;
        };
        union char_int_mixed {
            char arr[7];
            union char_int_mixed* union_ptr;
            unsigned int ui;
        };
        union char_int_short {
            char c;
            int i;
        };
        struct has_union {
            unsigned int i;
            union char_int_short u;
        };
        union has_struct_with_ints {
            double d;
            struct has_union s;
            unsigned long ul;
        };
        union two_doubles {
            double arr[2];
            double single;
        };
        union has_xmm_union {
            union one_double u;
            union two_doubles u2;
        };
        struct dbl_struct {
            union one_double member1;
            double member2;
        };
        union has_dbl_struct {
            struct dbl_struct member1;
        };
        union char_arr {
            char arr[11];
            int i;
        };
        union two_arrs {
            double dbl_arr[2];
            long long_arr[2];
        };
        union two_eightbyte_has_struct {
            int arr[3];
            struct dbl_struct member1;
        };
        struct char_first_eightbyte {
            char c;
            double d;
        };
        struct int_second_eightbyte {
            double d;
            int i;
        };
        union two_structs {
            struct char_first_eightbyte member1;
            struct int_second_eightbyte member2;
        };
        struct nine_bytes {
            int i;
            char arr[5];
        };
        union has_nine_byte_struct {
            char c;
            long l;
            struct nine_bytes s;
        };
        union uneven {
            char arr[5];
            unsigned char uc;
        };
        struct has_uneven_union {
            int i;
            union uneven u;
        };
        union has_other_unions {
            union uneven u;
            union two_doubles d;
            union has_nine_byte_struct n;
        };
        union union_array {
            union one_int u_arr[2];
        };
        union uneven_union_array {
            union uneven u_arr[2];
        };
        struct small {
            char arr[3];
            signed char sc;
        };
        union has_small_struct_array {
            struct small arr[3];
        };
        union gp_and_xmm {
            double d_arr[2];
            char c;
        };
        union scalar_and_struct {
            long* ptr;
            struct char_first_eightbyte cfe;
        };
        struct has_two_unions {
            union char_int_mixed member1;
            union one_double member2;
        };
        union small_struct_arr_and_dbl {
            struct small arr[2];
            union two_doubles d;
        };
        union xmm_and_gp {
            double d;
            struct int_second_eightbyte ise;
        };
        union xmm_and_gp_nested {
            union xmm_and_gp member1;
            double arr[2];
            union two_doubles d;
        };
        union lotsa_doubles {
            double arr[3];
            int i;
        };
        union lotsa_chars {
            char more_chars[18];
            char fewer_chars[5];
        };
        struct large {
            int i;
            double d;
            char arr[10];
        };
        union contains_large_struct {
            int i;
            unsigned long ul;
            struct large l;
        };
        union contains_union_array {
            union gp_and_xmm arr[2];
        };
        int test_one_double(union one_double u);
        int test_has_union_with_double(struct has_union_with_double s);
        int test_has_struct_with_double(union has_struct_with_double u);
        int test_one_int(union one_int u);
        int test_one_int_nested(union one_int_nested u);
        int test_char_int_mixed(union char_int_mixed u);
        int test_has_union(struct has_union s);
        int test_has_struct_with_ints(union has_struct_with_ints u);
        int test_two_doubles(union two_doubles u);
        int test_has_xmm_union(union has_xmm_union u);
        int test_dbl_struct(struct dbl_struct s);
        int test_has_dbl_struct(union has_dbl_struct u);
        int test_char_arr(union char_arr u);
        int test_two_arrs(union two_arrs u);
        int test_two_eightbyte_has_struct(union two_eightbyte_has_struct u);
        int test_two_structs(union two_structs u);
        int test_has_nine_byte_struct(union has_nine_byte_struct u);
        int test_has_uneven_union(struct has_uneven_union s);
        int test_has_other_unions(union has_other_unions u);
        int test_union_array(union union_array u);
        int test_uneven_union_array(union uneven_union_array u);
        int test_has_small_struct_array(union has_small_struct_array u);
        int test_gp_and_xmm(union gp_and_xmm u);
        int test_scalar_and_struct(union scalar_and_struct u);
        int test_has_two_unions(struct has_two_unions s);
        int test_small_struct_arr_and_dbl(union small_struct_arr_and_dbl u);
        int test_xmm_and_gp(union xmm_and_gp u);
        int test_xmm_and_gp_nested(union xmm_and_gp_nested u);
        int test_lotsa_doubles(union lotsa_doubles u);
        int test_lotsa_chars(union lotsa_chars u);
        int test_contains_large_struct(union contains_large_struct u);
        int test_contains_union_array(union contains_union_array u);
        int pass_unions_and_structs(int i1, int i2, struct has_union one_gp_struct,
            double d1, union two_doubles two_xmm, union one_int one_gp, int i3, int i4,
            int i5);
        int pass_gp_union_in_memory(union two_doubles two_xmm,
            struct has_union one_gp_struct, int i1, int i2, int i3,
            int i4, int i5, int i6, union one_int one_gp);
        int pass_xmm_union_in_memory(double d1, double d2, union two_doubles two_xmm,
            union two_doubles two_xmm_copy, double d3, double d4,
            union two_doubles two_xmm_2);
        int pass_borderline_union(int i1, int i2, int i3, int i4, int i5,
            union char_arr two_gp);
        int pass_borderline_xmm_union(union two_doubles two_xmm, double d1, double d2,
            double d3, double d4, double d5, union two_doubles two_xmm_2);
        int pass_mixed_reg_in_memory(double d1, double d2, double d3, double d4,
            int i1, int i2, int i3, int i4, int i5, int i6,
            union gp_and_xmm mixed_regs);
        int pass_uneven_union_in_memory(int i1, int i2, int i3, int i4, int i5,
            union gp_and_xmm mixed_regs, union one_int one_gp, union uneven uneven);
        int pass_in_mem_first(union lotsa_doubles mem, union gp_and_xmm mixed_regs,
            union char_arr two_gp, struct has_union one_gp_struct);
        union one_double return_one_double(void);
        union one_int_nested return_one_int_nested(void);
        union has_dbl_struct return_has_dbl_struct(void);
        union two_arrs return_two_arrs(void);
        union scalar_and_struct return_scalar_and_struct(void);
        union xmm_and_gp return_xmm_and_gp(void);
        union contains_union_array return_contains_union_array(void);
        union lotsa_chars pass_params_and_return_in_mem(int i1,
            union scalar_and_struct int_and_dbl, union two_arrs two_arrs, int i2,
            union contains_union_array big_union, union one_int_nested oin);
        struct has_uneven_union return_struct_with_union(void);
        
        int pass_unions_and_structs(int i1, int i2, struct has_union one_gp_struct,
            double d1, union two_doubles two_xmm, union one_int one_gp, int i3, int i4,
            int i5) {
            if (!(i1 == 1 && i2 == 2 && d1 == 4.0 && i3 == 100 && i4 == 120 && i5 == 130)) {
                return 0;
            }
            if (!(one_gp_struct.i == (unsigned int)-24 && one_gp_struct.u.i == 123456789)) {
                return 0;
            }
            if (!(two_xmm.arr[0] == -10. && two_xmm.arr[1] == -11.)) {
                return 0;
            }
            if (!(one_gp.d == 13.)) {
                return 0;
            }
            return 1;
        }
        int pass_gp_union_in_memory(union two_doubles two_xmm,
            struct has_union one_gp_struct, int i1, int i2, int i3,
            int i4, int i5, int i6, union one_int one_gp) {
            if (!(i1 == -1 && i2 == -2 && i3 == -3 && i4 == -4 && i5 == -5 && i6 == -6)) {
                return 0;
            }
            if (!(two_xmm.arr[0] == -10. && two_xmm.arr[1] == -11.)) {
                return 0;
            }
            if (!(one_gp_struct.i == (unsigned int)-24 && one_gp_struct.u.i == 123456789)) {
                return 0;
            }
            if (!(one_gp.d == 13.)) {
                return 0;
            }
            return 1;
        }
        int pass_xmm_union_in_memory(double d1, double d2, union two_doubles two_xmm,
            union two_doubles two_xmm_copy, double d3, double d4,
            union two_doubles two_xmm_2) {
            if (!(d1 == 1.0 && d2 == 2.0 && d3 == 3.0 && d4 == 4.0)) {
                return 0;
            }
            if (!(two_xmm.arr[0] == -10. && two_xmm.arr[1] == -11.)) {
                return 0;
            }
            if (!(two_xmm_copy.arr[0] == -10. && two_xmm_copy.arr[1] == -11.)) {
                return 0;
            }
            if (!(two_xmm_2.arr[0] == 33e4 && two_xmm_2.arr[1] == 55e6)) {
                return 0;
            }
            return 1;
        }
        int pass_borderline_union(int i1, int i2, int i3, int i4, int i5,
            union char_arr two_gp) {
            if (!(i1 == 1 && i2 == 2 && i3 == 3 && i4 == 4 && i5 == 5)) {
                return 0;
            }
            if (strcmp(two_gp.arr, "+_)(*&^%$#") != 0) {
                return 0;
            }
            return 1;
        }
        int pass_borderline_xmm_union(union two_doubles two_xmm, double d1, double d2,
            double d3, double d4, double d5, union two_doubles two_xmm_2) {
            if (!(d1 == 9.0 && d2 == 8.0 && d3 == 7.0 && d4 == 6.0 && d5 == 5.0)) {
                return 0;
            }
            if (!(two_xmm.arr[0] == -10. && two_xmm.arr[1] == -11.)) {
                return 0;
            }
            if (!(two_xmm_2.arr[0] == 66e4 && two_xmm_2.arr[1] == 110e6)) {
                return 0;
            }
            return 1;
        }
        int pass_mixed_reg_in_memory(double d1, double d2, double d3, double d4,
            int i1, int i2, int i3, int i4, int i5, int i6,
            union gp_and_xmm mixed_regs) {
            if (!(d1 == 101.2 && d2 == 102.3 && d3 == 103.4 && d4 == 104.5 && i1 == 75 && i2 == 76 && i3 == 77 && i4 == 78 && i5 == 79 && i6 == 80)) {
                return 0;
            }
            if (!(mixed_regs.d_arr[0] == 0 && mixed_regs.d_arr[1] == 150.5)) {
                return 0;
            }
            return 1;
        }
        int pass_uneven_union_in_memory(int i1, int i2, int i3, int i4, int i5,
            union gp_and_xmm mixed_regs, union one_int one_gp, union uneven uneven) {
            if (!(i1 == 1100 && i2 == 2200 && i3 == 3300 && i4 == 4400 && i5 == 5500)) {
                return 0;
            }
            if (!(mixed_regs.d_arr[0] == 0 && mixed_regs.d_arr[1] == 150.5)) {
                return 0;
            }
            if (!(one_gp.d == 13.)) {
                return 0;
            }
            if (strcmp(uneven.arr, "boop") != 0) {
                return 0;
            }
            return 1;
        }
        int pass_in_mem_first(union lotsa_doubles mem, union gp_and_xmm mixed_regs,
            union char_arr two_gp, struct has_union one_gp_struct) {
            if (!(mem.arr[0] == 66. && mem.arr[1] == 77. && mem.arr[2] == 88.)) {
                return 0;
            }
            if (!(mixed_regs.d_arr[0] == 0 && mixed_regs.d_arr[1] == 150.5)) {
                return 0;
            }
            if (strcmp(two_gp.arr, "+_)(*&^%$#") != 0) {
                return 0;
            }
            if (!(one_gp_struct.i == (unsigned int)-24 && one_gp_struct.u.i == 123456789)) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Union [one_double]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d1
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d2
            │       ╰── Type
            │           ╰── Double
            ├── Struct [has_union_with_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [has_struct_with_double]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [has_union_with_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Double
            ├── Union [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Union [one_int_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── oi
            │   │   ╰── Type
            │   │       ╰── Union [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── od
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [char_int_mixed]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 7
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── union_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Union [char_int_mixed]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ui
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Union [char_int_short]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Unsigned Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Union [char_int_short]
            ├── Union [has_struct_with_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [has_union]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ul
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Union [two_doubles]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── single
            │       ╰── Type
            │           ╰── Double
            ├── Union [has_xmm_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u2
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Struct [dbl_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Double
            ├── Union [has_dbl_struct]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member1
            │       ╰── Type
            │           ╰── Struct [dbl_struct]
            ├── Union [char_arr]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 11
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [two_arrs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── long_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Long
            ├── Union [two_eightbyte_has_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member1
            │       ╰── Type
            │           ╰── Struct [dbl_struct]
            ├── Struct [char_first_eightbyte]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [int_second_eightbyte]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [two_structs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Struct [char_first_eightbyte]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Struct [int_second_eightbyte]
            ├── Struct [nine_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Union [has_nine_byte_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [nine_bytes]
            ├── Union [uneven]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 5
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── uc
            │       ╰── Type
            │           ╰── Unsigned Char
            ├── Struct [has_uneven_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Union [uneven]
            ├── Union [has_other_unions]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [uneven]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Union [two_doubles]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── n
            │       ╰── Type
            │           ╰── Union [has_nine_byte_struct]
            ├── Union [union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [one_int]
            ├── Union [uneven_union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [uneven]
            ├── Struct [small]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sc
            │       ╰── Type
            │           ╰── Signed Char
            ├── Union [has_small_struct_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [small]
            ├── Union [gp_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Union [scalar_and_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cfe
            │       ╰── Type
            │           ╰── Struct [char_first_eightbyte]
            ├── Struct [has_two_unions]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [char_int_mixed]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [small_struct_arr_and_dbl]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Struct [small]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Union [xmm_and_gp]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ise
            │       ╰── Type
            │           ╰── Struct [int_second_eightbyte]
            ├── Union [xmm_and_gp_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [xmm_and_gp]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Union [lotsa_doubles]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [lotsa_chars]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── more_chars
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 18
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── fewer_chars
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [large]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Char
            ├── Union [contains_large_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ul
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Struct [large]
            ├── Union [contains_union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [gp_and_xmm]
            ├── Function [test_one_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_double]
            ├── Function [test_has_union_with_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_union_with_double]
            ├── Function [test_has_struct_with_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_struct_with_double]
            ├── Function [test_one_int]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_int]
            ├── Function [test_one_int_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_int_nested]
            ├── Function [test_char_int_mixed]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [char_int_mixed]
            ├── Function [test_has_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_union]
            ├── Function [test_has_struct_with_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_struct_with_ints]
            ├── Function [test_two_doubles]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [test_has_xmm_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_xmm_union]
            ├── Function [test_dbl_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [dbl_struct]
            ├── Function [test_has_dbl_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_dbl_struct]
            ├── Function [test_char_arr]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [char_arr]
            ├── Function [test_two_arrs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_arrs]
            ├── Function [test_two_eightbyte_has_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_eightbyte_has_struct]
            ├── Function [test_two_structs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_structs]
            ├── Function [test_has_nine_byte_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_nine_byte_struct]
            ├── Function [test_has_uneven_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_uneven_union]
            ├── Function [test_has_other_unions]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_other_unions]
            ├── Function [test_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [union_array]
            ├── Function [test_uneven_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [uneven_union_array]
            ├── Function [test_has_small_struct_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_small_struct_array]
            ├── Function [test_gp_and_xmm]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [gp_and_xmm]
            ├── Function [test_scalar_and_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [scalar_and_struct]
            ├── Function [test_has_two_unions]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_two_unions]
            ├── Function [test_small_struct_arr_and_dbl]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [small_struct_arr_and_dbl]
            ├── Function [test_xmm_and_gp]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [xmm_and_gp]
            ├── Function [test_xmm_and_gp_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [xmm_and_gp_nested]
            ├── Function [test_lotsa_doubles]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [lotsa_doubles]
            ├── Function [test_lotsa_chars]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [lotsa_chars]
            ├── Function [test_contains_large_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [contains_large_struct]
            ├── Function [test_contains_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [contains_union_array]
            ├── Function [pass_unions_and_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp_struct
            │       │   ╰── Type
            │       │       ╰── Struct [has_union]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp
            │       │   ╰── Type
            │       │       ╰── Union [one_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i5
            │           ╰── Type
            │               ╰── Int
            ├── Function [pass_gp_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp_struct
            │       │   ╰── Type
            │       │       ╰── Struct [has_union]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── one_gp
            │           ╰── Type
            │               ╰── Union [one_int]
            ├── Function [pass_xmm_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm_copy
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_xmm_2
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [pass_borderline_union]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_gp
            │           ╰── Type
            │               ╰── Union [char_arr]
            ├── Function [pass_borderline_xmm_union]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d5
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_xmm_2
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [pass_mixed_reg_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── mixed_regs
            │           ╰── Type
            │               ╰── Union [gp_and_xmm]
            ├── Function [pass_uneven_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_regs
            │       │   ╰── Type
            │       │       ╰── Union [gp_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp
            │       │   ╰── Type
            │       │       ╰── Union [one_int]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── uneven
            │           ╰── Type
            │               ╰── Union [uneven]
            ├── Function [pass_in_mem_first]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mem
            │       │   ╰── Type
            │       │       ╰── Union [lotsa_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_regs
            │       │   ╰── Type
            │       │       ╰── Union [gp_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_gp
            │       │   ╰── Type
            │       │       ╰── Union [char_arr]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── one_gp_struct
            │           ╰── Type
            │               ╰── Struct [has_union]
            ├── Function [return_one_double]
            ├── Function [return_one_int_nested]
            ├── Function [return_has_dbl_struct]
            ├── Function [return_two_arrs]
            ├── Function [return_scalar_and_struct]
            ├── Function [return_xmm_and_gp]
            ├── Function [return_contains_union_array]
            ├── Function [pass_params_and_return_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_and_dbl
            │       │   ╰── Type
            │       │       ╰── Union [scalar_and_struct]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_arrs
            │       │   ╰── Type
            │       │       ╰── Union [two_arrs]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── big_union
            │       │   ╰── Type
            │       │       ╰── Union [contains_union_array]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── oin
            │           ╰── Type
            │               ╰── Union [one_int_nested]
            ├── Function [return_struct_with_union]
            ├── Function [pass_unions_and_structs]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i1
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i2
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── one_gp_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [has_union]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d1
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── two_xmm
            │   │   │   ╰── Type
            │   │   │       ╰── Union [two_doubles]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── one_gp
            │   │   │   ╰── Type
            │   │   │       ╰── Union [one_int]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i3
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i4
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i5
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1263> Unary [!]
            │       │   │       ╰── <1262>  [&&]
            │       │   │           ├── <1254>  [&&]
            │       │   │           │   ├── <1247>  [&&]
            │       │   │           │   │   ├── <1240>  [&&]
            │       │   │           │   │   │   ├── <1233>  [&&]
            │       │   │           │   │   │   │   ├── <1226>  [==]
            │       │   │           │   │   │   │   │   ├── <1223> Var [i1]
            │       │   │           │   │   │   │   │   ╰── <1225> Constant Int [1]
            │       │   │           │   │   │   │   ╰── <1232>  [==]
            │       │   │           │   │   │   │       ├── <1229> Var [i2]
            │       │   │           │   │   │   │       ╰── <1231> Constant Int [2]
            │       │   │           │   │   │   ╰── <1239>  [==]
            │       │   │           │   │   │       ├── <1236> Var [d1]
            │       │   │           │   │   │       ╰── <1238> Constant Double [+4e0]
            │       │   │           │   │   ╰── <1246>  [==]
            │       │   │           │   │       ├── <1243> Var [i3]
            │       │   │           │   │       ╰── <1245> Constant Int [100]
            │       │   │           │   ╰── <1253>  [==]
            │       │   │           │       ├── <1250> Var [i4]
            │       │   │           │       ╰── <1252> Constant Int [120]
            │       │   │           ╰── <1260>  [==]
            │       │   │               ├── <1257> Var [i5]
            │       │   │               ╰── <1259> Constant Int [130]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1264> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1294> Unary [!]
            │       │   │       ╰── <1293>  [&&]
            │       │   │           ├── <1281>  [==]
            │       │   │           │   ├── <1273> Dot
            │       │   │           │   │   ├── <1271> Var [one_gp_struct]
            │       │   │           │   │   ╰── i
            │       │   │           │   ╰── <1280> Cast
            │       │   │           │       ├── Target
            │       │   │           │       │   ╰── Unsigned Int
            │       │   │           │       ╰── Expression
            │       │   │           │           ╰── <1279> Unary [-]
            │       │   │           │               ╰── <1278> Constant Int [24]
            │       │   │           ╰── <1291>  [==]
            │       │   │               ├── <1288> Dot
            │       │   │               │   ├── <1286> Dot
            │       │   │               │   │   ├── <1284> Var [one_gp_struct]
            │       │   │               │   │   ╰── u
            │       │   │               │   ╰── i
            │       │   │               ╰── <1290> Constant Int [123456789]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1295> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1326> Unary [!]
            │       │   │       ╰── <1325>  [&&]
            │       │   │           ├── <1311>  [==]
            │       │   │           │   ├── <1306> Subscript
            │       │   │           │   │   ├── <1304> Dot
            │       │   │           │   │   │   ├── <1302> Var [two_xmm]
            │       │   │           │   │   │   ╰── arr
            │       │   │           │   │   ╰── <1305> Constant Int [0]
            │       │   │           │   ╰── <1310> Unary [-]
            │       │   │           │       ╰── <1309> Constant Double [+1e1]
            │       │   │           ╰── <1323>  [==]
            │       │   │               ├── <1318> Subscript
            │       │   │               │   ├── <1316> Dot
            │       │   │               │   │   ├── <1314> Var [two_xmm]
            │       │   │               │   │   ╰── arr
            │       │   │               │   ╰── <1317> Constant Int [1]
            │       │   │               ╰── <1322> Unary [-]
            │       │   │                   ╰── <1321> Constant Double [+1.1e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1327> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1341> Unary [!]
            │       │   │       ╰── <1340>  [==]
            │       │   │           ├── <1336> Dot
            │       │   │           │   ├── <1334> Var [one_gp]
            │       │   │           │   ╰── d
            │       │   │           ╰── <1338> Constant Double [+1.3e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1342> Constant Int [0]
            │       ╰── Return
            │           ╰── <1347> Constant Int [1]
            ├── Function [pass_gp_union_in_memory]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── two_xmm
            │   │   │   ╰── Type
            │   │   │       ╰── Union [two_doubles]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── one_gp_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [has_union]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i1
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i2
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i3
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i4
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i5
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i6
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── one_gp
            │   │       ╰── Type
            │   │           ╰── Union [one_int]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1440> Unary [!]
            │       │   │       ╰── <1439>  [&&]
            │       │   │           ├── <1429>  [&&]
            │       │   │           │   ├── <1420>  [&&]
            │       │   │           │   │   ├── <1411>  [&&]
            │       │   │           │   │   │   ├── <1402>  [&&]
            │       │   │           │   │   │   │   ├── <1393>  [==]
            │       │   │           │   │   │   │   │   ├── <1388> Var [i1]
            │       │   │           │   │   │   │   │   ╰── <1392> Unary [-]
            │       │   │           │   │   │   │   │       ╰── <1391> Constant Int [1]
            │       │   │           │   │   │   │   ╰── <1401>  [==]
            │       │   │           │   │   │   │       ├── <1396> Var [i2]
            │       │   │           │   │   │   │       ╰── <1400> Unary [-]
            │       │   │           │   │   │   │           ╰── <1399> Constant Int [2]
            │       │   │           │   │   │   ╰── <1410>  [==]
            │       │   │           │   │   │       ├── <1405> Var [i3]
            │       │   │           │   │   │       ╰── <1409> Unary [-]
            │       │   │           │   │   │           ╰── <1408> Constant Int [3]
            │       │   │           │   │   ╰── <1419>  [==]
            │       │   │           │   │       ├── <1414> Var [i4]
            │       │   │           │   │       ╰── <1418> Unary [-]
            │       │   │           │   │           ╰── <1417> Constant Int [4]
            │       │   │           │   ╰── <1428>  [==]
            │       │   │           │       ├── <1423> Var [i5]
            │       │   │           │       ╰── <1427> Unary [-]
            │       │   │           │           ╰── <1426> Constant Int [5]
            │       │   │           ╰── <1437>  [==]
            │       │   │               ├── <1432> Var [i6]
            │       │   │               ╰── <1436> Unary [-]
            │       │   │                   ╰── <1435> Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1441> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1472> Unary [!]
            │       │   │       ╰── <1471>  [&&]
            │       │   │           ├── <1457>  [==]
            │       │   │           │   ├── <1452> Subscript
            │       │   │           │   │   ├── <1450> Dot
            │       │   │           │   │   │   ├── <1448> Var [two_xmm]
            │       │   │           │   │   │   ╰── arr
            │       │   │           │   │   ╰── <1451> Constant Int [0]
            │       │   │           │   ╰── <1456> Unary [-]
            │       │   │           │       ╰── <1455> Constant Double [+1e1]
            │       │   │           ╰── <1469>  [==]
            │       │   │               ├── <1464> Subscript
            │       │   │               │   ├── <1462> Dot
            │       │   │               │   │   ├── <1460> Var [two_xmm]
            │       │   │               │   │   ╰── arr
            │       │   │               │   ╰── <1463> Constant Int [1]
            │       │   │               ╰── <1468> Unary [-]
            │       │   │                   ╰── <1467> Constant Double [+1.1e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1473> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1503> Unary [!]
            │       │   │       ╰── <1502>  [&&]
            │       │   │           ├── <1490>  [==]
            │       │   │           │   ├── <1482> Dot
            │       │   │           │   │   ├── <1480> Var [one_gp_struct]
            │       │   │           │   │   ╰── i
            │       │   │           │   ╰── <1489> Cast
            │       │   │           │       ├── Target
            │       │   │           │       │   ╰── Unsigned Int
            │       │   │           │       ╰── Expression
            │       │   │           │           ╰── <1488> Unary [-]
            │       │   │           │               ╰── <1487> Constant Int [24]
            │       │   │           ╰── <1500>  [==]
            │       │   │               ├── <1497> Dot
            │       │   │               │   ├── <1495> Dot
            │       │   │               │   │   ├── <1493> Var [one_gp_struct]
            │       │   │               │   │   ╰── u
            │       │   │               │   ╰── i
            │       │   │               ╰── <1499> Constant Int [123456789]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1504> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1518> Unary [!]
            │       │   │       ╰── <1517>  [==]
            │       │   │           ├── <1513> Dot
            │       │   │           │   ├── <1511> Var [one_gp]
            │       │   │           │   ╰── d
            │       │   │           ╰── <1515> Constant Double [+1.3e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1519> Constant Int [0]
            │       ╰── Return
            │           ╰── <1524> Constant Int [1]
            ├── Function [pass_xmm_union_in_memory]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d1
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d2
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── two_xmm
            │   │   │   ╰── Type
            │   │   │       ╰── Union [two_doubles]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── two_xmm_copy
            │   │   │   ╰── Type
            │   │   │       ╰── Union [two_doubles]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d3
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d4
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── two_xmm_2
            │   │       ╰── Type
            │   │           ╰── Union [two_doubles]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1585> Unary [!]
            │       │   │       ╰── <1584>  [&&]
            │       │   │           ├── <1576>  [&&]
            │       │   │           │   ├── <1569>  [&&]
            │       │   │           │   │   ├── <1562>  [==]
            │       │   │           │   │   │   ├── <1559> Var [d1]
            │       │   │           │   │   │   ╰── <1561> Constant Double [+1e0]
            │       │   │           │   │   ╰── <1568>  [==]
            │       │   │           │   │       ├── <1565> Var [d2]
            │       │   │           │   │       ╰── <1567> Constant Double [+2e0]
            │       │   │           │   ╰── <1575>  [==]
            │       │   │           │       ├── <1572> Var [d3]
            │       │   │           │       ╰── <1574> Constant Double [+3e0]
            │       │   │           ╰── <1582>  [==]
            │       │   │               ├── <1579> Var [d4]
            │       │   │               ╰── <1581> Constant Double [+4e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1586> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1617> Unary [!]
            │       │   │       ╰── <1616>  [&&]
            │       │   │           ├── <1602>  [==]
            │       │   │           │   ├── <1597> Subscript
            │       │   │           │   │   ├── <1595> Dot
            │       │   │           │   │   │   ├── <1593> Var [two_xmm]
            │       │   │           │   │   │   ╰── arr
            │       │   │           │   │   ╰── <1596> Constant Int [0]
            │       │   │           │   ╰── <1601> Unary [-]
            │       │   │           │       ╰── <1600> Constant Double [+1e1]
            │       │   │           ╰── <1614>  [==]
            │       │   │               ├── <1609> Subscript
            │       │   │               │   ├── <1607> Dot
            │       │   │               │   │   ├── <1605> Var [two_xmm]
            │       │   │               │   │   ╰── arr
            │       │   │               │   ╰── <1608> Constant Int [1]
            │       │   │               ╰── <1613> Unary [-]
            │       │   │                   ╰── <1612> Constant Double [+1.1e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1618> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1649> Unary [!]
            │       │   │       ╰── <1648>  [&&]
            │       │   │           ├── <1634>  [==]
            │       │   │           │   ├── <1629> Subscript
            │       │   │           │   │   ├── <1627> Dot
            │       │   │           │   │   │   ├── <1625> Var [two_xmm_copy]
            │       │   │           │   │   │   ╰── arr
            │       │   │           │   │   ╰── <1628> Constant Int [0]
            │       │   │           │   ╰── <1633> Unary [-]
            │       │   │           │       ╰── <1632> Constant Double [+1e1]
            │       │   │           ╰── <1646>  [==]
            │       │   │               ├── <1641> Subscript
            │       │   │               │   ├── <1639> Dot
            │       │   │               │   │   ├── <1637> Var [two_xmm_copy]
            │       │   │               │   │   ╰── arr
            │       │   │               │   ╰── <1640> Constant Int [1]
            │       │   │               ╰── <1645> Unary [-]
            │       │   │                   ╰── <1644> Constant Double [+1.1e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1650> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1677> Unary [!]
            │       │   │       ╰── <1676>  [&&]
            │       │   │           ├── <1664>  [==]
            │       │   │           │   ├── <1661> Subscript
            │       │   │           │   │   ├── <1659> Dot
            │       │   │           │   │   │   ├── <1657> Var [two_xmm_2]
            │       │   │           │   │   │   ╰── arr
            │       │   │           │   │   ╰── <1660> Constant Int [0]
            │       │   │           │   ╰── <1663> Constant Double [+3.3e5]
            │       │   │           ╰── <1674>  [==]
            │       │   │               ├── <1671> Subscript
            │       │   │               │   ├── <1669> Dot
            │       │   │               │   │   ├── <1667> Var [two_xmm_2]
            │       │   │               │   │   ╰── arr
            │       │   │               │   ╰── <1670> Constant Int [1]
            │       │   │               ╰── <1673> Constant Double [+5.5e7]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1678> Constant Int [0]
            │       ╰── Return
            │           ╰── <1683> Constant Int [1]
            ├── Function [pass_borderline_union]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i1
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i2
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i3
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i4
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i5
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── two_gp
            │   │       ╰── Type
            │   │           ╰── Union [char_arr]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1746> Unary [!]
            │       │   │       ╰── <1745>  [&&]
            │       │   │           ├── <1737>  [&&]
            │       │   │           │   ├── <1730>  [&&]
            │       │   │           │   │   ├── <1723>  [&&]
            │       │   │           │   │   │   ├── <1716>  [==]
            │       │   │           │   │   │   │   ├── <1713> Var [i1]
            │       │   │           │   │   │   │   ╰── <1715> Constant Int [1]
            │       │   │           │   │   │   ╰── <1722>  [==]
            │       │   │           │   │   │       ├── <1719> Var [i2]
            │       │   │           │   │   │       ╰── <1721> Constant Int [2]
            │       │   │           │   │   ╰── <1729>  [==]
            │       │   │           │   │       ├── <1726> Var [i3]
            │       │   │           │   │       ╰── <1728> Constant Int [3]
            │       │   │           │   ╰── <1736>  [==]
            │       │   │           │       ├── <1733> Var [i4]
            │       │   │           │       ╰── <1735> Constant Int [4]
            │       │   │           ╰── <1743>  [==]
            │       │   │               ├── <1740> Var [i5]
            │       │   │               ╰── <1742> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1747> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1761>  [!=]
            │       │   │       ├── <1758> FunctionCall [strcmp]
            │       │   │       │   ├── <1756> Dot
            │       │   │       │   │   ├── <1754> Var [two_gp]
            │       │   │       │   │   ╰── arr
            │       │   │       │   ╰── <1757> "+_)(*&^%$#"
            │       │   │       ╰── <1760> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1762> Constant Int [0]
            │       ╰── Return
            │           ╰── <1767> Constant Int [1]
            ├── Function [pass_borderline_xmm_union]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── two_xmm
            │   │   │   ╰── Type
            │   │   │       ╰── Union [two_doubles]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d1
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d2
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d3
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d4
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d5
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── two_xmm_2
            │   │       ╰── Type
            │   │           ╰── Union [two_doubles]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1834> Unary [!]
            │       │   │       ╰── <1833>  [&&]
            │       │   │           ├── <1825>  [&&]
            │       │   │           │   ├── <1818>  [&&]
            │       │   │           │   │   ├── <1811>  [&&]
            │       │   │           │   │   │   ├── <1804>  [==]
            │       │   │           │   │   │   │   ├── <1801> Var [d1]
            │       │   │           │   │   │   │   ╰── <1803> Constant Double [+9e0]
            │       │   │           │   │   │   ╰── <1810>  [==]
            │       │   │           │   │   │       ├── <1807> Var [d2]
            │       │   │           │   │   │       ╰── <1809> Constant Double [+8e0]
            │       │   │           │   │   ╰── <1817>  [==]
            │       │   │           │   │       ├── <1814> Var [d3]
            │       │   │           │   │       ╰── <1816> Constant Double [+7e0]
            │       │   │           │   ╰── <1824>  [==]
            │       │   │           │       ├── <1821> Var [d4]
            │       │   │           │       ╰── <1823> Constant Double [+6e0]
            │       │   │           ╰── <1831>  [==]
            │       │   │               ├── <1828> Var [d5]
            │       │   │               ╰── <1830> Constant Double [+5e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1835> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1866> Unary [!]
            │       │   │       ╰── <1865>  [&&]
            │       │   │           ├── <1851>  [==]
            │       │   │           │   ├── <1846> Subscript
            │       │   │           │   │   ├── <1844> Dot
            │       │   │           │   │   │   ├── <1842> Var [two_xmm]
            │       │   │           │   │   │   ╰── arr
            │       │   │           │   │   ╰── <1845> Constant Int [0]
            │       │   │           │   ╰── <1850> Unary [-]
            │       │   │           │       ╰── <1849> Constant Double [+1e1]
            │       │   │           ╰── <1863>  [==]
            │       │   │               ├── <1858> Subscript
            │       │   │               │   ├── <1856> Dot
            │       │   │               │   │   ├── <1854> Var [two_xmm]
            │       │   │               │   │   ╰── arr
            │       │   │               │   ╰── <1857> Constant Int [1]
            │       │   │               ╰── <1862> Unary [-]
            │       │   │                   ╰── <1861> Constant Double [+1.1e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1867> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1894> Unary [!]
            │       │   │       ╰── <1893>  [&&]
            │       │   │           ├── <1881>  [==]
            │       │   │           │   ├── <1878> Subscript
            │       │   │           │   │   ├── <1876> Dot
            │       │   │           │   │   │   ├── <1874> Var [two_xmm_2]
            │       │   │           │   │   │   ╰── arr
            │       │   │           │   │   ╰── <1877> Constant Int [0]
            │       │   │           │   ╰── <1880> Constant Double [+6.6e5]
            │       │   │           ╰── <1891>  [==]
            │       │   │               ├── <1888> Subscript
            │       │   │               │   ├── <1886> Dot
            │       │   │               │   │   ├── <1884> Var [two_xmm_2]
            │       │   │               │   │   ╰── arr
            │       │   │               │   ╰── <1887> Constant Int [1]
            │       │   │               ╰── <1890> Constant Double [+1.1e8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1895> Constant Int [0]
            │       ╰── Return
            │           ╰── <1900> Constant Int [1]
            ├── Function [pass_mixed_reg_in_memory]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d1
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d2
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d3
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d4
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i1
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i2
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i3
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i4
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i5
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i6
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── mixed_regs
            │   │       ╰── Type
            │   │           ╰── Union [gp_and_xmm]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2013> Unary [!]
            │       │   │       ╰── <2012>  [&&]
            │       │   │           ├── <2004>  [&&]
            │       │   │           │   ├── <1997>  [&&]
            │       │   │           │   │   ├── <1990>  [&&]
            │       │   │           │   │   │   ├── <1983>  [&&]
            │       │   │           │   │   │   │   ├── <1976>  [&&]
            │       │   │           │   │   │   │   │   ├── <1969>  [&&]
            │       │   │           │   │   │   │   │   │   ├── <1962>  [&&]
            │       │   │           │   │   │   │   │   │   │   ├── <1955>  [&&]
            │       │   │           │   │   │   │   │   │   │   │   ├── <1948>  [==]
            │       │   │           │   │   │   │   │   │   │   │   │   ├── <1945> Var [d1]
            │       │   │           │   │   │   │   │   │   │   │   │   ╰── <1947> Constant Double [+1.012e2]
            │       │   │           │   │   │   │   │   │   │   │   ╰── <1954>  [==]
            │       │   │           │   │   │   │   │   │   │   │       ├── <1951> Var [d2]
            │       │   │           │   │   │   │   │   │   │   │       ╰── <1953> Constant Double [+1.023e2]
            │       │   │           │   │   │   │   │   │   │   ╰── <1961>  [==]
            │       │   │           │   │   │   │   │   │   │       ├── <1958> Var [d3]
            │       │   │           │   │   │   │   │   │   │       ╰── <1960> Constant Double [+1.034e2]
            │       │   │           │   │   │   │   │   │   ╰── <1968>  [==]
            │       │   │           │   │   │   │   │   │       ├── <1965> Var [d4]
            │       │   │           │   │   │   │   │   │       ╰── <1967> Constant Double [+1.045e2]
            │       │   │           │   │   │   │   │   ╰── <1975>  [==]
            │       │   │           │   │   │   │   │       ├── <1972> Var [i1]
            │       │   │           │   │   │   │   │       ╰── <1974> Constant Int [75]
            │       │   │           │   │   │   │   ╰── <1982>  [==]
            │       │   │           │   │   │   │       ├── <1979> Var [i2]
            │       │   │           │   │   │   │       ╰── <1981> Constant Int [76]
            │       │   │           │   │   │   ╰── <1989>  [==]
            │       │   │           │   │   │       ├── <1986> Var [i3]
            │       │   │           │   │   │       ╰── <1988> Constant Int [77]
            │       │   │           │   │   ╰── <1996>  [==]
            │       │   │           │   │       ├── <1993> Var [i4]
            │       │   │           │   │       ╰── <1995> Constant Int [78]
            │       │   │           │   ╰── <2003>  [==]
            │       │   │           │       ├── <2000> Var [i5]
            │       │   │           │       ╰── <2002> Constant Int [79]
            │       │   │           ╰── <2010>  [==]
            │       │   │               ├── <2007> Var [i6]
            │       │   │               ╰── <2009> Constant Int [80]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2014> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2041> Unary [!]
            │       │   │       ╰── <2040>  [&&]
            │       │   │           ├── <2028>  [==]
            │       │   │           │   ├── <2025> Subscript
            │       │   │           │   │   ├── <2023> Dot
            │       │   │           │   │   │   ├── <2021> Var [mixed_regs]
            │       │   │           │   │   │   ╰── d_arr
            │       │   │           │   │   ╰── <2024> Constant Int [0]
            │       │   │           │   ╰── <2027> Constant Int [0]
            │       │   │           ╰── <2038>  [==]
            │       │   │               ├── <2035> Subscript
            │       │   │               │   ├── <2033> Dot
            │       │   │               │   │   ├── <2031> Var [mixed_regs]
            │       │   │               │   │   ╰── d_arr
            │       │   │               │   ╰── <2034> Constant Int [1]
            │       │   │               ╰── <2037> Constant Double [+1.505e2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2042> Constant Int [0]
            │       ╰── Return
            │           ╰── <2047> Constant Int [1]
            ├── Function [pass_uneven_union_in_memory]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i1
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i2
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i3
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i4
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i5
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── mixed_regs
            │   │   │   ╰── Type
            │   │   │       ╰── Union [gp_and_xmm]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── one_gp
            │   │   │   ╰── Type
            │   │   │       ╰── Union [one_int]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── uneven
            │   │       ╰── Type
            │   │           ╰── Union [uneven]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2118> Unary [!]
            │       │   │       ╰── <2117>  [&&]
            │       │   │           ├── <2109>  [&&]
            │       │   │           │   ├── <2102>  [&&]
            │       │   │           │   │   ├── <2095>  [&&]
            │       │   │           │   │   │   ├── <2088>  [==]
            │       │   │           │   │   │   │   ├── <2085> Var [i1]
            │       │   │           │   │   │   │   ╰── <2087> Constant Int [1100]
            │       │   │           │   │   │   ╰── <2094>  [==]
            │       │   │           │   │   │       ├── <2091> Var [i2]
            │       │   │           │   │   │       ╰── <2093> Constant Int [2200]
            │       │   │           │   │   ╰── <2101>  [==]
            │       │   │           │   │       ├── <2098> Var [i3]
            │       │   │           │   │       ╰── <2100> Constant Int [3300]
            │       │   │           │   ╰── <2108>  [==]
            │       │   │           │       ├── <2105> Var [i4]
            │       │   │           │       ╰── <2107> Constant Int [4400]
            │       │   │           ╰── <2115>  [==]
            │       │   │               ├── <2112> Var [i5]
            │       │   │               ╰── <2114> Constant Int [5500]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2119> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2146> Unary [!]
            │       │   │       ╰── <2145>  [&&]
            │       │   │           ├── <2133>  [==]
            │       │   │           │   ├── <2130> Subscript
            │       │   │           │   │   ├── <2128> Dot
            │       │   │           │   │   │   ├── <2126> Var [mixed_regs]
            │       │   │           │   │   │   ╰── d_arr
            │       │   │           │   │   ╰── <2129> Constant Int [0]
            │       │   │           │   ╰── <2132> Constant Int [0]
            │       │   │           ╰── <2143>  [==]
            │       │   │               ├── <2140> Subscript
            │       │   │               │   ├── <2138> Dot
            │       │   │               │   │   ├── <2136> Var [mixed_regs]
            │       │   │               │   │   ╰── d_arr
            │       │   │               │   ╰── <2139> Constant Int [1]
            │       │   │               ╰── <2142> Constant Double [+1.505e2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2147> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2161> Unary [!]
            │       │   │       ╰── <2160>  [==]
            │       │   │           ├── <2156> Dot
            │       │   │           │   ├── <2154> Var [one_gp]
            │       │   │           │   ╰── d
            │       │   │           ╰── <2158> Constant Double [+1.3e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2162> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2176>  [!=]
            │       │   │       ├── <2173> FunctionCall [strcmp]
            │       │   │       │   ├── <2171> Dot
            │       │   │       │   │   ├── <2169> Var [uneven]
            │       │   │       │   │   ╰── arr
            │       │   │       │   ╰── <2172> "boop"
            │       │   │       ╰── <2175> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2177> Constant Int [0]
            │       ╰── Return
            │           ╰── <2182> Constant Int [1]
            ╰── Function [pass_in_mem_first]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── mem
                │   │   ╰── Type
                │   │       ╰── Union [lotsa_doubles]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── mixed_regs
                │   │   ╰── Type
                │   │       ╰── Union [gp_and_xmm]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── two_gp
                │   │   ╰── Type
                │   │       ╰── Union [char_arr]
                │   ╰── Param
                │       ├── Name
                │       │   ╰── one_gp_struct
                │       ╰── Type
                │           ╰── Struct [has_union]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2240> Unary [!]
                    │   │       ╰── <2239>  [&&]
                    │   │           ├── <2227>  [&&]
                    │   │           │   ├── <2216>  [==]
                    │   │           │   │   ├── <2213> Subscript
                    │   │           │   │   │   ├── <2211> Dot
                    │   │           │   │   │   │   ├── <2209> Var [mem]
                    │   │           │   │   │   │   ╰── arr
                    │   │           │   │   │   ╰── <2212> Constant Int [0]
                    │   │           │   │   ╰── <2215> Constant Double [+6.6e1]
                    │   │           │   ╰── <2226>  [==]
                    │   │           │       ├── <2223> Subscript
                    │   │           │       │   ├── <2221> Dot
                    │   │           │       │   │   ├── <2219> Var [mem]
                    │   │           │       │   │   ╰── arr
                    │   │           │       │   ╰── <2222> Constant Int [1]
                    │   │           │       ╰── <2225> Constant Double [+7.7e1]
                    │   │           ╰── <2237>  [==]
                    │   │               ├── <2234> Subscript
                    │   │               │   ├── <2232> Dot
                    │   │               │   │   ├── <2230> Var [mem]
                    │   │               │   │   ╰── arr
                    │   │               │   ╰── <2233> Constant Int [2]
                    │   │               ╰── <2236> Constant Double [+8.8e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2241> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2268> Unary [!]
                    │   │       ╰── <2267>  [&&]
                    │   │           ├── <2255>  [==]
                    │   │           │   ├── <2252> Subscript
                    │   │           │   │   ├── <2250> Dot
                    │   │           │   │   │   ├── <2248> Var [mixed_regs]
                    │   │           │   │   │   ╰── d_arr
                    │   │           │   │   ╰── <2251> Constant Int [0]
                    │   │           │   ╰── <2254> Constant Int [0]
                    │   │           ╰── <2265>  [==]
                    │   │               ├── <2262> Subscript
                    │   │               │   ├── <2260> Dot
                    │   │               │   │   ├── <2258> Var [mixed_regs]
                    │   │               │   │   ╰── d_arr
                    │   │               │   ╰── <2261> Constant Int [1]
                    │   │               ╰── <2264> Constant Double [+1.505e2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2269> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2283>  [!=]
                    │   │       ├── <2280> FunctionCall [strcmp]
                    │   │       │   ├── <2278> Dot
                    │   │       │   │   ├── <2276> Var [two_gp]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <2279> "+_)(*&^%$#"
                    │   │       ╰── <2282> Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2284> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2314> Unary [!]
                    │   │       ╰── <2313>  [&&]
                    │   │           ├── <2301>  [==]
                    │   │           │   ├── <2293> Dot
                    │   │           │   │   ├── <2291> Var [one_gp_struct]
                    │   │           │   │   ╰── i
                    │   │           │   ╰── <2300> Cast
                    │   │           │       ├── Target
                    │   │           │       │   ╰── Unsigned Int
                    │   │           │       ╰── Expression
                    │   │           │           ╰── <2299> Unary [-]
                    │   │           │               ╰── <2298> Constant Int [24]
                    │   │           ╰── <2311>  [==]
                    │   │               ├── <2308> Dot
                    │   │               │   ├── <2306> Dot
                    │   │               │   │   ├── <2304> Var [one_gp_struct]
                    │   │               │   │   ╰── u
                    │   │               │   ╰── i
                    │   │               ╰── <2310> Constant Int [123456789]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2315> Constant Int [0]
                    ╰── Return
                        ╰── <2320> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_libraries_param_passing_client() {
    let src = r#"
        int strcmp(char* s1, char* s2);
        void exit(int status);
        void *malloc(unsigned long size);
        union one_double {
            double d1;
            double d2;
        };
        struct has_union_with_double {
            union one_double member;
        };
        union has_struct_with_double {
            struct has_union_with_double s;
            double arr[1];
        };
        union one_int {
            double d;
            char c;
        };
        union one_int_nested {
            union one_int oi;
            union one_double od;
        };
        union char_int_mixed {
            char arr[7];
            union char_int_mixed* union_ptr;
            unsigned int ui;
        };
        union char_int_short {
            char c;
            int i;
        };
        struct has_union {
            unsigned int i;
            union char_int_short u;
        };
        union has_struct_with_ints {
            double d;
            struct has_union s;
            unsigned long ul;
        };
        union two_doubles {
            double arr[2];
            double single;
        };
        union has_xmm_union {
            union one_double u;
            union two_doubles u2;
        };
        struct dbl_struct {
            union one_double member1;
            double member2;
        };
        union has_dbl_struct {
            struct dbl_struct member1;
        };
        union char_arr {
            char arr[11];
            int i;
        };
        union two_arrs {
            double dbl_arr[2];
            long long_arr[2];
        };
        union two_eightbyte_has_struct {
            int arr[3];
            struct dbl_struct member1;
        };
        struct char_first_eightbyte {
            char c;
            double d;
        };
        struct int_second_eightbyte {
            double d;
            int i;
        };
        union two_structs {
            struct char_first_eightbyte member1;
            struct int_second_eightbyte member2;
        };
        struct nine_bytes {
            int i;
            char arr[5];
        };
        union has_nine_byte_struct {
            char c;
            long l;
            struct nine_bytes s;
        };
        union uneven {
            char arr[5];
            unsigned char uc;
        };
        struct has_uneven_union {
            int i;
            union uneven u;
        };
        union has_other_unions {
            union uneven u;
            union two_doubles d;
            union has_nine_byte_struct n;
        };
        union union_array {
            union one_int u_arr[2];
        };
        union uneven_union_array {
            union uneven u_arr[2];
        };
        struct small {
            char arr[3];
            signed char sc;
        };
        union has_small_struct_array {
            struct small arr[3];
        };
        union gp_and_xmm {
            double d_arr[2];
            char c;
        };
        union scalar_and_struct {
            long* ptr;
            struct char_first_eightbyte cfe;
        };
        struct has_two_unions {
            union char_int_mixed member1;
            union one_double member2;
        };
        union small_struct_arr_and_dbl {
            struct small arr[2];
            union two_doubles d;
        };
        union xmm_and_gp {
            double d;
            struct int_second_eightbyte ise;
        };
        union xmm_and_gp_nested {
            union xmm_and_gp member1;
            double arr[2];
            union two_doubles d;
        };
        union lotsa_doubles {
            double arr[3];
            int i;
        };
        union lotsa_chars {
            char more_chars[18];
            char fewer_chars[5];
        };
        struct large {
            int i;
            double d;
            char arr[10];
        };
        union contains_large_struct {
            int i;
            unsigned long ul;
            struct large l;
        };
        union contains_union_array {
            union gp_and_xmm arr[2];
        };
        int test_one_double(union one_double u);
        int test_has_union_with_double(struct has_union_with_double s);
        int test_has_struct_with_double(union has_struct_with_double u);
        int test_one_int(union one_int u);
        int test_one_int_nested(union one_int_nested u);
        int test_char_int_mixed(union char_int_mixed u);
        int test_has_union(struct has_union s);
        int test_has_struct_with_ints(union has_struct_with_ints u);
        int test_two_doubles(union two_doubles u);
        int test_has_xmm_union(union has_xmm_union u);
        int test_dbl_struct(struct dbl_struct s);
        int test_has_dbl_struct(union has_dbl_struct u);
        int test_char_arr(union char_arr u);
        int test_two_arrs(union two_arrs u);
        int test_two_eightbyte_has_struct(union two_eightbyte_has_struct u);
        int test_two_structs(union two_structs u);
        int test_has_nine_byte_struct(union has_nine_byte_struct u);
        int test_has_uneven_union(struct has_uneven_union s);
        int test_has_other_unions(union has_other_unions u);
        int test_union_array(union union_array u);
        int test_uneven_union_array(union uneven_union_array u);
        int test_has_small_struct_array(union has_small_struct_array u);
        int test_gp_and_xmm(union gp_and_xmm u);
        int test_scalar_and_struct(union scalar_and_struct u);
        int test_has_two_unions(struct has_two_unions s);
        int test_small_struct_arr_and_dbl(union small_struct_arr_and_dbl u);
        int test_xmm_and_gp(union xmm_and_gp u);
        int test_xmm_and_gp_nested(union xmm_and_gp_nested u);
        int test_lotsa_doubles(union lotsa_doubles u);
        int test_lotsa_chars(union lotsa_chars u);
        int test_contains_large_struct(union contains_large_struct u);
        int test_contains_union_array(union contains_union_array u);
        int pass_unions_and_structs(int i1, int i2, struct has_union one_gp_struct,
            double d1, union two_doubles two_xmm, union one_int one_gp, int i3, int i4,
            int i5);
        int pass_gp_union_in_memory(union two_doubles two_xmm,
            struct has_union one_gp_struct, int i1, int i2, int i3,
            int i4, int i5, int i6, union one_int one_gp);
        int pass_xmm_union_in_memory(double d1, double d2, union two_doubles two_xmm,
            union two_doubles two_xmm_copy, double d3, double d4,
            union two_doubles two_xmm_2);
        int pass_borderline_union(int i1, int i2, int i3, int i4, int i5,
            union char_arr two_gp);
        int pass_borderline_xmm_union(union two_doubles two_xmm, double d1, double d2,
            double d3, double d4, double d5, union two_doubles two_xmm_2);
        int pass_mixed_reg_in_memory(double d1, double d2, double d3, double d4,
            int i1, int i2, int i3, int i4, int i5, int i6,
            union gp_and_xmm mixed_regs);
        int pass_uneven_union_in_memory(int i1, int i2, int i3, int i4, int i5,
            union gp_and_xmm mixed_regs, union one_int one_gp, union uneven uneven);
        int pass_in_mem_first(union lotsa_doubles mem, union gp_and_xmm mixed_regs,
            union char_arr two_gp, struct has_union one_gp_struct);
        union one_double return_one_double(void);
        union one_int_nested return_one_int_nested(void);
        union has_dbl_struct return_has_dbl_struct(void);
        union two_arrs return_two_arrs(void);
        union scalar_and_struct return_scalar_and_struct(void);
        union xmm_and_gp return_xmm_and_gp(void);
        union contains_union_array return_contains_union_array(void);
        union lotsa_chars pass_params_and_return_in_mem(int i1,
            union scalar_and_struct int_and_dbl, union two_arrs two_arrs, int i2,
            union contains_union_array big_union, union one_int_nested oin);
        struct has_uneven_union return_struct_with_union(void);
        
        int main(void) {
            union two_doubles two_xmm = { {-10.0, -11.0} };
            union one_int one_gp = { 13.0 };
            struct has_union one_gp_struct = { -24, {0} };
            one_gp_struct.u.i = 123456789;
            if (!pass_unions_and_structs(1, 2, one_gp_struct, 4.0, two_xmm, one_gp, 100, 120, 130)) {
                return 1;
            }
            if (!pass_gp_union_in_memory(two_xmm, one_gp_struct, -1, -2, -3, -4, -5, -6, one_gp)) {
                return 2;
            }
            union two_doubles two_xmm_2 = { {33e4, 55e6 } };
            if (!pass_xmm_union_in_memory(1.0, 2.0, two_xmm, two_xmm, 3.0, 4.0, two_xmm_2)) {
                return 3;
            }
            union char_arr two_gp = { "+_)(*&^%$#" };
            if (!pass_borderline_union(1, 2, 3, 4, 5, two_gp)) {
                return 4;
            }
            two_xmm_2.arr[0] = two_xmm_2.arr[0] * 2;
            two_xmm_2.arr[1] = two_xmm_2.arr[1] * 2;
            if (!pass_borderline_xmm_union(two_xmm, 9.0, 8.0, 7.0, 6.0, 5.0, two_xmm_2)) {
                return 5;
            }
            union gp_and_xmm mixed_regs = { {0, 150.5} };
            if (!pass_mixed_reg_in_memory(101.2, 102.3, 103.4, 104.5, 75, 76, 77, 78, 79, 80, mixed_regs)) {
                return 6;
            }
            union uneven uneven = { "boop" };
            if (!pass_uneven_union_in_memory(1100, 2200, 3300, 4400, 5500, mixed_regs, one_gp, uneven)) {
                return 7;
            }
            union lotsa_doubles mem = { {66., 77., 88.} };
            if (!pass_in_mem_first(mem, mixed_regs, two_gp, one_gp_struct)) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Union [one_double]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d1
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d2
            │       ╰── Type
            │           ╰── Double
            ├── Struct [has_union_with_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [has_struct_with_double]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [has_union_with_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Double
            ├── Union [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Union [one_int_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── oi
            │   │   ╰── Type
            │   │       ╰── Union [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── od
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [char_int_mixed]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 7
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── union_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Union [char_int_mixed]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ui
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Union [char_int_short]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Unsigned Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Union [char_int_short]
            ├── Union [has_struct_with_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [has_union]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ul
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Union [two_doubles]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── single
            │       ╰── Type
            │           ╰── Double
            ├── Union [has_xmm_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u2
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Struct [dbl_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Double
            ├── Union [has_dbl_struct]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member1
            │       ╰── Type
            │           ╰── Struct [dbl_struct]
            ├── Union [char_arr]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 11
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [two_arrs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── long_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Long
            ├── Union [two_eightbyte_has_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member1
            │       ╰── Type
            │           ╰── Struct [dbl_struct]
            ├── Struct [char_first_eightbyte]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [int_second_eightbyte]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [two_structs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Struct [char_first_eightbyte]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Struct [int_second_eightbyte]
            ├── Struct [nine_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Union [has_nine_byte_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [nine_bytes]
            ├── Union [uneven]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 5
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── uc
            │       ╰── Type
            │           ╰── Unsigned Char
            ├── Struct [has_uneven_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Union [uneven]
            ├── Union [has_other_unions]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [uneven]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Union [two_doubles]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── n
            │       ╰── Type
            │           ╰── Union [has_nine_byte_struct]
            ├── Union [union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [one_int]
            ├── Union [uneven_union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [uneven]
            ├── Struct [small]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sc
            │       ╰── Type
            │           ╰── Signed Char
            ├── Union [has_small_struct_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [small]
            ├── Union [gp_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Union [scalar_and_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cfe
            │       ╰── Type
            │           ╰── Struct [char_first_eightbyte]
            ├── Struct [has_two_unions]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [char_int_mixed]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [small_struct_arr_and_dbl]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Struct [small]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Union [xmm_and_gp]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ise
            │       ╰── Type
            │           ╰── Struct [int_second_eightbyte]
            ├── Union [xmm_and_gp_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [xmm_and_gp]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Union [lotsa_doubles]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [lotsa_chars]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── more_chars
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 18
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── fewer_chars
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [large]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Char
            ├── Union [contains_large_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ul
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Struct [large]
            ├── Union [contains_union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [gp_and_xmm]
            ├── Function [test_one_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_double]
            ├── Function [test_has_union_with_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_union_with_double]
            ├── Function [test_has_struct_with_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_struct_with_double]
            ├── Function [test_one_int]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_int]
            ├── Function [test_one_int_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_int_nested]
            ├── Function [test_char_int_mixed]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [char_int_mixed]
            ├── Function [test_has_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_union]
            ├── Function [test_has_struct_with_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_struct_with_ints]
            ├── Function [test_two_doubles]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [test_has_xmm_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_xmm_union]
            ├── Function [test_dbl_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [dbl_struct]
            ├── Function [test_has_dbl_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_dbl_struct]
            ├── Function [test_char_arr]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [char_arr]
            ├── Function [test_two_arrs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_arrs]
            ├── Function [test_two_eightbyte_has_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_eightbyte_has_struct]
            ├── Function [test_two_structs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_structs]
            ├── Function [test_has_nine_byte_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_nine_byte_struct]
            ├── Function [test_has_uneven_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_uneven_union]
            ├── Function [test_has_other_unions]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_other_unions]
            ├── Function [test_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [union_array]
            ├── Function [test_uneven_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [uneven_union_array]
            ├── Function [test_has_small_struct_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_small_struct_array]
            ├── Function [test_gp_and_xmm]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [gp_and_xmm]
            ├── Function [test_scalar_and_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [scalar_and_struct]
            ├── Function [test_has_two_unions]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_two_unions]
            ├── Function [test_small_struct_arr_and_dbl]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [small_struct_arr_and_dbl]
            ├── Function [test_xmm_and_gp]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [xmm_and_gp]
            ├── Function [test_xmm_and_gp_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [xmm_and_gp_nested]
            ├── Function [test_lotsa_doubles]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [lotsa_doubles]
            ├── Function [test_lotsa_chars]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [lotsa_chars]
            ├── Function [test_contains_large_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [contains_large_struct]
            ├── Function [test_contains_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [contains_union_array]
            ├── Function [pass_unions_and_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp_struct
            │       │   ╰── Type
            │       │       ╰── Struct [has_union]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp
            │       │   ╰── Type
            │       │       ╰── Union [one_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i5
            │           ╰── Type
            │               ╰── Int
            ├── Function [pass_gp_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp_struct
            │       │   ╰── Type
            │       │       ╰── Struct [has_union]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── one_gp
            │           ╰── Type
            │               ╰── Union [one_int]
            ├── Function [pass_xmm_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm_copy
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_xmm_2
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [pass_borderline_union]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_gp
            │           ╰── Type
            │               ╰── Union [char_arr]
            ├── Function [pass_borderline_xmm_union]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d5
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_xmm_2
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [pass_mixed_reg_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── mixed_regs
            │           ╰── Type
            │               ╰── Union [gp_and_xmm]
            ├── Function [pass_uneven_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_regs
            │       │   ╰── Type
            │       │       ╰── Union [gp_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp
            │       │   ╰── Type
            │       │       ╰── Union [one_int]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── uneven
            │           ╰── Type
            │               ╰── Union [uneven]
            ├── Function [pass_in_mem_first]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mem
            │       │   ╰── Type
            │       │       ╰── Union [lotsa_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_regs
            │       │   ╰── Type
            │       │       ╰── Union [gp_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_gp
            │       │   ╰── Type
            │       │       ╰── Union [char_arr]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── one_gp_struct
            │           ╰── Type
            │               ╰── Struct [has_union]
            ├── Function [return_one_double]
            ├── Function [return_one_int_nested]
            ├── Function [return_has_dbl_struct]
            ├── Function [return_two_arrs]
            ├── Function [return_scalar_and_struct]
            ├── Function [return_xmm_and_gp]
            ├── Function [return_contains_union_array]
            ├── Function [pass_params_and_return_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_and_dbl
            │       │   ╰── Type
            │       │       ╰── Union [scalar_and_struct]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_arrs
            │       │   ╰── Type
            │       │       ╰── Union [two_arrs]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── big_union
            │       │   ╰── Type
            │       │       ╰── Union [contains_union_array]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── oin
            │           ╰── Type
            │               ╰── Union [one_int_nested]
            ├── Function [return_struct_with_union]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_xmm
                    │   ├── Type
                    │   │   ╰── Union [two_doubles]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <1197> Unary [-]
                    │               │   ╰── <1196> Constant Double [+1e1]
                    │               ╰── <1201> Unary [-]
                    │                   ╰── <1200> Constant Double [+1.1e1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── one_gp
                    │   ├── Type
                    │   │   ╰── Union [one_int]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <1210> Constant Double [+1.3e1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── one_gp_struct
                    │   ├── Type
                    │   │   ╰── Struct [has_union]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <1220> Unary [-]
                    │           │   ╰── <1219> Constant Int [24]
                    │           ╰── Compound
                    │               ╰── <1222> Constant Int [0]
                    ├── <1235> Assign [=]
                    │   ├── <1232> Dot
                    │   │   ├── <1230> Dot
                    │   │   │   ├── <1228> Var [one_gp_struct]
                    │   │   │   ╰── u
                    │   │   ╰── i
                    │   ╰── <1234> Constant Int [123456789]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1252> Unary [!]
                    │   │       ╰── <1251> FunctionCall [pass_unions_and_structs]
                    │   │           ├── <1239> Constant Int [1]
                    │   │           ├── <1240> Constant Int [2]
                    │   │           ├── <1242> Var [one_gp_struct]
                    │   │           ├── <1243> Constant Double [+4e0]
                    │   │           ├── <1245> Var [two_xmm]
                    │   │           ├── <1247> Var [one_gp]
                    │   │           ├── <1248> Constant Int [100]
                    │   │           ├── <1249> Constant Int [120]
                    │   │           ╰── <1250> Constant Int [130]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1253> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1285> Unary [!]
                    │   │       ╰── <1284> FunctionCall [pass_gp_union_in_memory]
                    │   │           ├── <1261> Var [two_xmm]
                    │   │           ├── <1263> Var [one_gp_struct]
                    │   │           ├── <1266> Unary [-]
                    │   │           │   ╰── <1265> Constant Int [1]
                    │   │           ├── <1269> Unary [-]
                    │   │           │   ╰── <1268> Constant Int [2]
                    │   │           ├── <1272> Unary [-]
                    │   │           │   ╰── <1271> Constant Int [3]
                    │   │           ├── <1275> Unary [-]
                    │   │           │   ╰── <1274> Constant Int [4]
                    │   │           ├── <1278> Unary [-]
                    │   │           │   ╰── <1277> Constant Int [5]
                    │   │           ├── <1281> Unary [-]
                    │   │           │   ╰── <1280> Constant Int [6]
                    │   │           ╰── <1283> Var [one_gp]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1286> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_xmm_2
                    │   ├── Type
                    │   │   ╰── Union [two_doubles]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <1295> Constant Double [+3.3e5]
                    │               ╰── <1297> Constant Double [+5.5e7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1315> Unary [!]
                    │   │       ╰── <1314> FunctionCall [pass_xmm_union_in_memory]
                    │   │           ├── <1304> Constant Double [+1e0]
                    │   │           ├── <1305> Constant Double [+2e0]
                    │   │           ├── <1307> Var [two_xmm]
                    │   │           ├── <1309> Var [two_xmm]
                    │   │           ├── <1310> Constant Double [+3e0]
                    │   │           ├── <1311> Constant Double [+4e0]
                    │   │           ╰── <1313> Var [two_xmm_2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1316> Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_gp
                    │   ├── Type
                    │   │   ╰── Union [char_arr]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <1325> "+_)(*&^%$#"
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1339> Unary [!]
                    │   │       ╰── <1338> FunctionCall [pass_borderline_union]
                    │   │           ├── <1331> Constant Int [1]
                    │   │           ├── <1332> Constant Int [2]
                    │   │           ├── <1333> Constant Int [3]
                    │   │           ├── <1334> Constant Int [4]
                    │   │           ├── <1335> Constant Int [5]
                    │   │           ╰── <1337> Var [two_gp]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1340> Constant Int [4]
                    ├── <1361> Assign [=]
                    │   ├── <1350> Subscript
                    │   │   ├── <1348> Dot
                    │   │   │   ├── <1346> Var [two_xmm_2]
                    │   │   │   ╰── arr
                    │   │   ╰── <1349> Constant Int [0]
                    │   ╰── <1360>  [*]
                    │       ├── <1357> Subscript
                    │       │   ├── <1355> Dot
                    │       │   │   ├── <1353> Var [two_xmm_2]
                    │       │   │   ╰── arr
                    │       │   ╰── <1356> Constant Int [0]
                    │       ╰── <1359> Constant Int [2]
                    ├── <1379> Assign [=]
                    │   ├── <1368> Subscript
                    │   │   ├── <1366> Dot
                    │   │   │   ├── <1364> Var [two_xmm_2]
                    │   │   │   ╰── arr
                    │   │   ╰── <1367> Constant Int [1]
                    │   ╰── <1378>  [*]
                    │       ├── <1375> Subscript
                    │       │   ├── <1373> Dot
                    │       │   │   ├── <1371> Var [two_xmm_2]
                    │       │   │   ╰── arr
                    │       │   ╰── <1374> Constant Int [1]
                    │       ╰── <1377> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1393> Unary [!]
                    │   │       ╰── <1392> FunctionCall [pass_borderline_xmm_union]
                    │   │           ├── <1384> Var [two_xmm]
                    │   │           ├── <1385> Constant Double [+9e0]
                    │   │           ├── <1386> Constant Double [+8e0]
                    │   │           ├── <1387> Constant Double [+7e0]
                    │   │           ├── <1388> Constant Double [+6e0]
                    │   │           ├── <1389> Constant Double [+5e0]
                    │   │           ╰── <1391> Var [two_xmm_2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1394> Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── mixed_regs
                    │   ├── Type
                    │   │   ╰── Union [gp_and_xmm]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <1403> Constant Int [0]
                    │               ╰── <1405> Constant Double [+1.505e2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1425> Unary [!]
                    │   │       ╰── <1424> FunctionCall [pass_mixed_reg_in_memory]
                    │   │           ├── <1412> Constant Double [+1.012e2]
                    │   │           ├── <1413> Constant Double [+1.023e2]
                    │   │           ├── <1414> Constant Double [+1.034e2]
                    │   │           ├── <1415> Constant Double [+1.045e2]
                    │   │           ├── <1416> Constant Int [75]
                    │   │           ├── <1417> Constant Int [76]
                    │   │           ├── <1418> Constant Int [77]
                    │   │           ├── <1419> Constant Int [78]
                    │   │           ├── <1420> Constant Int [79]
                    │   │           ├── <1421> Constant Int [80]
                    │   │           ╰── <1423> Var [mixed_regs]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1426> Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── uneven
                    │   ├── Type
                    │   │   ╰── Union [uneven]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <1435> "boop"
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1453> Unary [!]
                    │   │       ╰── <1452> FunctionCall [pass_uneven_union_in_memory]
                    │   │           ├── <1441> Constant Int [1100]
                    │   │           ├── <1442> Constant Int [2200]
                    │   │           ├── <1443> Constant Int [3300]
                    │   │           ├── <1444> Constant Int [4400]
                    │   │           ├── <1445> Constant Int [5500]
                    │   │           ├── <1447> Var [mixed_regs]
                    │   │           ├── <1449> Var [one_gp]
                    │   │           ╰── <1451> Var [uneven]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1454> Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── mem
                    │   ├── Type
                    │   │   ╰── Union [lotsa_doubles]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <1463> Constant Double [+6.6e1]
                    │               ├── <1465> Constant Double [+7.7e1]
                    │               ╰── <1467> Constant Double [+8.8e1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1483> Unary [!]
                    │   │       ╰── <1482> FunctionCall [pass_in_mem_first]
                    │   │           ├── <1475> Var [mem]
                    │   │           ├── <1477> Var [mixed_regs]
                    │   │           ├── <1479> Var [two_gp]
                    │   │           ╰── <1481> Var [one_gp_struct]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1484> Constant Int [8]
                    ╰── Return
                        ╰── <1489> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_libraries_static_union_inits() {
    let src = r#"
        
        int strcmp(char* s1, char* s2);
        union simple {
            int i;
            char c;
            double d;
        };
        extern union simple s;
        int validate_simple(void);
        union has_union {
            union simple u;
            char c;
        };
        extern union has_union h;
        int validate_has_union(void);
        struct has_union_array {
            union has_union union_array[4];
            char c;
            union simple s;
        };
        extern struct has_union_array my_struct;
        int validate_has_union_array(void);
        extern union has_union all_zeros;
        int validate_uninitialized(void);
        union with_padding {
            char arr[13];
            long l;
        };
        extern union with_padding padded_union_array[3];
        int validate_padded_union_array(void);
        int validate_simple(void) {
            return (s.c == -39 && s.i == 217);
        }
        int validate_has_union(void) {
            return (h.u.c == 77 && h.c == 77 && h.u.i == 77);
        }
        int validate_has_union_array(void) {
            for (int i = 0; i < 3; i = i + 1) {
                int expected = 'a' + i;
                if (my_struct.union_array[i].u.c != expected
                    || my_struct.union_array[i].c != expected
                    || my_struct.union_array[i].u.i != expected) {
                    return 0;
                }
            }
            if (my_struct.union_array[3].u.d != 0.0) {
                return 0;
            }
            if (my_struct.c != '#') {
                return 0;
            }
            if (my_struct.s.c != '!' || my_struct.s.i != '!') {
                return 0;
            }
            return 1;
        }
        int validate_uninitialized(void) {
            if (all_zeros.u.d != 0.0) {
                return 0;
            }
            return 1;
        }
        int validate_padded_union_array(void) {
            if (strcmp(padded_union_array[0].arr, "first string") != 0) {
                return 0;
            }
            if (strcmp(padded_union_array[1].arr, "string #2") != 0) {
                return 0;
            }
            if (strcmp(padded_union_array[2].arr, "string #3") != 0) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Union [simple]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── s
            │   ├── Type
            │   │   ╰── Union [simple]
            │   ╰── Extern
            ├── Function [validate_simple]
            ├── Union [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [simple]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── h
            │   ├── Type
            │   │   ╰── Union [has_union]
            │   ╰── Extern
            ├── Function [validate_has_union]
            ├── Struct [has_union_array]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── union_array
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 4
            │   │           ╰── Union [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Union [simple]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── my_struct
            │   ├── Type
            │   │   ╰── Struct [has_union_array]
            │   ╰── Extern
            ├── Function [validate_has_union_array]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── all_zeros
            │   ├── Type
            │   │   ╰── Union [has_union]
            │   ╰── Extern
            ├── Function [validate_uninitialized]
            ├── Union [with_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 13
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── padded_union_array
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Union [with_padding]
            │   ╰── Extern
            ├── Function [validate_padded_union_array]
            ├── Function [validate_simple]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <160>  [&&]
            │               ├── <150>  [==]
            │               │   ├── <145> Dot
            │               │   │   ├── <143> Var [s]
            │               │   │   ╰── c
            │               │   ╰── <149> Unary [-]
            │               │       ╰── <148> Constant Int [39]
            │               ╰── <158>  [==]
            │                   ├── <155> Dot
            │                   │   ├── <153> Var [s]
            │                   │   ╰── i
            │                   ╰── <157> Constant Int [217]
            ├── Function [validate_has_union]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <198>  [&&]
            │               ├── <186>  [&&]
            │               │   ├── <177>  [==]
            │               │   │   ├── <174> Dot
            │               │   │   │   ├── <172> Dot
            │               │   │   │   │   ├── <170> Var [h]
            │               │   │   │   │   ╰── u
            │               │   │   │   ╰── c
            │               │   │   ╰── <176> Constant Int [77]
            │               │   ╰── <185>  [==]
            │               │       ├── <182> Dot
            │               │       │   ├── <180> Var [h]
            │               │       │   ╰── c
            │               │       ╰── <184> Constant Int [77]
            │               ╰── <196>  [==]
            │                   ├── <193> Dot
            │                   │   ├── <191> Dot
            │                   │   │   ├── <189> Var [h]
            │                   │   │   ╰── u
            │                   │   ╰── i
            │                   ╰── <195> Constant Int [77]
            ├── Function [validate_has_union_array]
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <210> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <218>  [<]
            │       │   │       ├── <215> Var [i]
            │       │   │       ╰── <217> Constant Int [3]
            │       │   ├── Condition
            │       │   │   ╰── <227> Assign [=]
            │       │   │       ├── <220> Var [i]
            │       │   │       ╰── <226>  [+]
            │       │   │           ├── <223> Var [i]
            │       │   │           ╰── <225> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── expected
            │       │       │   ├── Type
            │       │       │   │   ╰── Int
            │       │       │   ╰── Initializer
            │       │       │       ╰── <235>  [+]
            │       │       │           ├── <231> Constant Int [97]
            │       │       │           ╰── <234> Var [i]
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <284>  [||]
            │       │           │       ├── <267>  [||]
            │       │           │       │   ├── <252>  [!=]
            │       │           │       │   │   ├── <248> Dot
            │       │           │       │   │   │   ├── <246> Dot
            │       │           │       │   │   │   │   ├── <244> Subscript
            │       │           │       │   │   │   │   │   ├── <241> Dot
            │       │           │       │   │   │   │   │   │   ├── <239> Var [my_struct]
            │       │           │       │   │   │   │   │   │   ╰── union_array
            │       │           │       │   │   │   │   │   ╰── <243> Var [i]
            │       │           │       │   │   │   │   ╰── u
            │       │           │       │   │   │   ╰── c
            │       │           │       │   │   ╰── <251> Var [expected]
            │       │           │       │   ╰── <266>  [!=]
            │       │           │       │       ├── <262> Dot
            │       │           │       │       │   ├── <260> Subscript
            │       │           │       │       │   │   ├── <257> Dot
            │       │           │       │       │   │   │   ├── <255> Var [my_struct]
            │       │           │       │       │   │   │   ╰── union_array
            │       │           │       │       │   │   ╰── <259> Var [i]
            │       │           │       │       │   ╰── c
            │       │           │       │       ╰── <265> Var [expected]
            │       │           │       ╰── <283>  [!=]
            │       │           │           ├── <279> Dot
            │       │           │           │   ├── <277> Dot
            │       │           │           │   │   ├── <275> Subscript
            │       │           │           │   │   │   ├── <272> Dot
            │       │           │           │   │   │   │   ├── <270> Var [my_struct]
            │       │           │           │   │   │   │   ╰── union_array
            │       │           │           │   │   │   ╰── <274> Var [i]
            │       │           │           │   │   ╰── u
            │       │           │           │   ╰── i
            │       │           │           ╰── <282> Var [expected]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── <285> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <305>  [!=]
            │       │   │       ├── <302> Dot
            │       │   │       │   ├── <300> Dot
            │       │   │       │   │   ├── <298> Subscript
            │       │   │       │   │   │   ├── <296> Dot
            │       │   │       │   │   │   │   ├── <294> Var [my_struct]
            │       │   │       │   │   │   │   ╰── union_array
            │       │   │       │   │   │   ╰── <297> Constant Int [3]
            │       │   │       │   │   ╰── u
            │       │   │       │   ╰── d
            │       │   │       ╰── <304> Constant Double [+0e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <306> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <317>  [!=]
            │       │   │       ├── <314> Dot
            │       │   │       │   ├── <312> Var [my_struct]
            │       │   │       │   ╰── c
            │       │   │       ╰── <316> Constant Int [35]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <318> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <342>  [||]
            │       │   │       ├── <331>  [!=]
            │       │   │       │   ├── <328> Dot
            │       │   │       │   │   ├── <326> Dot
            │       │   │       │   │   │   ├── <324> Var [my_struct]
            │       │   │       │   │   │   ╰── s
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <330> Constant Int [33]
            │       │   │       ╰── <341>  [!=]
            │       │   │           ├── <338> Dot
            │       │   │           │   ├── <336> Dot
            │       │   │           │   │   ├── <334> Var [my_struct]
            │       │   │           │   │   ╰── s
            │       │   │           │   ╰── i
            │       │   │           ╰── <340> Constant Int [33]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <343> Constant Int [0]
            │       ╰── Return
            │           ╰── <348> Constant Int [1]
            ├── Function [validate_uninitialized]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <365>  [!=]
            │       │   │       ├── <362> Dot
            │       │   │       │   ├── <360> Dot
            │       │   │       │   │   ├── <358> Var [all_zeros]
            │       │   │       │   │   ╰── u
            │       │   │       │   ╰── d
            │       │   │       ╰── <364> Constant Double [+0e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <366> Constant Int [0]
            │       ╰── Return
            │           ╰── <371> Constant Int [1]
            ╰── Function [validate_padded_union_array]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <391>  [!=]
                    │   │       ├── <388> FunctionCall [strcmp]
                    │   │       │   ├── <386> Dot
                    │   │       │   │   ├── <384> Subscript
                    │   │       │   │   │   ├── <382> Var [padded_union_array]
                    │   │       │   │   │   ╰── <383> Constant Int [0]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <387> "first string"
                    │   │       ╰── <390> Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <392> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <408>  [!=]
                    │   │       ├── <405> FunctionCall [strcmp]
                    │   │       │   ├── <403> Dot
                    │   │       │   │   ├── <401> Subscript
                    │   │       │   │   │   ├── <399> Var [padded_union_array]
                    │   │       │   │   │   ╰── <400> Constant Int [1]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <404> "string #2"
                    │   │       ╰── <407> Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <409> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <425>  [!=]
                    │   │       ├── <422> FunctionCall [strcmp]
                    │   │       │   ├── <420> Dot
                    │   │       │   │   ├── <418> Subscript
                    │   │       │   │   │   ├── <416> Var [padded_union_array]
                    │   │       │   │   │   ╰── <417> Constant Int [2]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <421> "string #3"
                    │   │       ╰── <424> Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <426> Constant Int [0]
                    ╰── Return
                        ╰── <431> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_libraries_static_union_inits_client() {
    let src = r#"
        int strcmp(char* s1, char* s2);
        union simple {
            int i;
            char c;
            double d;
        };
        extern union simple s;
        int validate_simple(void);
        union has_union {
            union simple u;
            char c;
        };
        extern union has_union h;
        int validate_has_union(void);
        struct has_union_array {
            union has_union union_array[4];
            char c;
            union simple s;
        };
        extern struct has_union_array my_struct;
        int validate_has_union_array(void);
        extern union has_union all_zeros;
        int validate_uninitialized(void);
        union with_padding {
            char arr[13];
            long l;
        };
        extern union with_padding padded_union_array[3];
        int validate_padded_union_array(void);
        union simple s = {217};
        union has_union h = {{77}};
        struct has_union_array my_struct = {
            {{{'a'}}, {{'b'}}, {{'c'}}}, '#', {'!'}
        };
        union has_union all_zeros;
        union with_padding padded_union_array[3] = {
            {"first string"}, {"string #2"}, {
                "string #3"
            }
        };
        int main(void) {
            if (!validate_simple()) {
                return 1;
            }
            if (!validate_has_union()){
                return 2;
            }
            if (!validate_has_union_array()) {
                return 3;
            }
            if (!validate_uninitialized()) {
                return 4;
            }
            if (!validate_padded_union_array()) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Union [simple]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── s
            │   ├── Type
            │   │   ╰── Union [simple]
            │   ╰── Extern
            ├── Function [validate_simple]
            ├── Union [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [simple]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── h
            │   ├── Type
            │   │   ╰── Union [has_union]
            │   ╰── Extern
            ├── Function [validate_has_union]
            ├── Struct [has_union_array]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── union_array
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 4
            │   │           ╰── Union [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Union [simple]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── my_struct
            │   ├── Type
            │   │   ╰── Struct [has_union_array]
            │   ╰── Extern
            ├── Function [validate_has_union_array]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── all_zeros
            │   ├── Type
            │   │   ╰── Union [has_union]
            │   ╰── Extern
            ├── Function [validate_uninitialized]
            ├── Union [with_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 13
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── padded_union_array
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Union [with_padding]
            │   ╰── Extern
            ├── Function [validate_padded_union_array]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── s
            │   ├── Type
            │   │   ╰── Union [simple]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── <141> Constant Int [217]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── h
            │   ├── Type
            │   │   ╰── Union [has_union]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ╰── <149> Constant Int [77]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── my_struct
            │   ├── Type
            │   │   ╰── Struct [has_union_array]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Compound
            │           │   ├── Compound
            │           │   │   ╰── Compound
            │           │   │       ╰── <158> Constant Int [97]
            │           │   ├── Compound
            │           │   │   ╰── Compound
            │           │   │       ╰── <162> Constant Int [98]
            │           │   ╰── Compound
            │           │       ╰── Compound
            │           │           ╰── <166> Constant Int [99]
            │           ├── <171> Constant Int [35]
            │           ╰── Compound
            │               ╰── <173> Constant Int [33]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── all_zeros
            │   ╰── Type
            │       ╰── Union [has_union]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── padded_union_array
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Union [with_padding]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Compound
            │           │   ╰── <190> "first string"
            │           ├── Compound
            │           │   ╰── <193> "string #2"
            │           ╰── Compound
            │               ╰── <196> "string #3"
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <209> Unary [!]
                    │   │       ╰── <208> FunctionCall [validate_simple]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <210> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <218> Unary [!]
                    │   │       ╰── <217> FunctionCall [validate_has_union]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <219> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <227> Unary [!]
                    │   │       ╰── <226> FunctionCall [validate_has_union_array]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <228> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <236> Unary [!]
                    │   │       ╰── <235> FunctionCall [validate_uninitialized]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <237> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <245> Unary [!]
                    │   │       ╰── <244> FunctionCall [validate_padded_union_array]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <246> Constant Int [5]
                    ╰── Return
                        ╰── <251> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_libraries_union_inits() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        union simple {
            double d;
            char c;
            int *ptr;
        };
        union inner {
            char arr[9];
        };
        struct my_struct {
            long l;
            union inner u;
            int i;
        };
        union nested {
            struct my_struct str;
            union simple s;
            long l;
        };
        int validate_simple(union simple *ptr);
        int validate_simple_converted(union simple *ptr);
        int validate_nested(union nested *ptr);
        int validate_nested_partial(union nested *ptr);
        
        int validate_simple(union simple* ptr) {
            return (ptr->d == 123.45);
        }
        int validate_simple_converted(union simple* ptr) {
            return (ptr->d == 18446744073709549568.);
        }
        int validate_nested(union nested* ptr) {
            if (ptr->str.l != 4294967395l) {
                return 0;
            }
            for (int i = 0; i < 9; i = i + 1) {
                if (ptr->str.u.arr[i] != -1 - i) {
                    return 0;
                }
            }
            return 1;
        }
        int validate_nested_partial(union nested* ptr) {
            if (ptr->str.l != 9000372036854775800l) {
                return 0;
            }
            if (strcmp(ptr->str.u.arr, "string")) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Union [simple]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Int
            ├── Union [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 9
            │               ╰── Char
            ├── Struct [my_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── str
            │   │   ╰── Type
            │   │       ╰── Struct [my_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Union [simple]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Function [validate_simple]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Union [simple]
            ├── Function [validate_simple_converted]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Union [simple]
            ├── Function [validate_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Union [nested]
            ├── Function [validate_nested_partial]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Union [nested]
            ├── Function [validate_simple]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Union [simple]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <139>  [==]
            │               ├── <135> Arrow
            │               │   ├── <133> Var [ptr]
            │               │   ╰── d
            │               ╰── <137> Constant Double [+1.2345e2]
            ├── Function [validate_simple_converted]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Union [simple]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <161>  [==]
            │               ├── <157> Arrow
            │               │   ├── <155> Var [ptr]
            │               │   ╰── d
            │               ╰── <159> Constant Double [+1.844674407370955e19]
            ├── Function [validate_nested]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Union [nested]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <184>  [!=]
            │       │   │       ├── <181> Dot
            │       │   │       │   ├── <179> Arrow
            │       │   │       │   │   ├── <177> Var [ptr]
            │       │   │       │   │   ╰── str
            │       │   │       │   ╰── l
            │       │   │       ╰── <183> Constant Long [4294967395]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <185> Constant Int [0]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <193> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <201>  [<]
            │       │   │       ├── <198> Var [i]
            │       │   │       ╰── <200> Constant Int [9]
            │       │   ├── Condition
            │       │   │   ╰── <210> Assign [=]
            │       │   │       ├── <203> Var [i]
            │       │   │       ╰── <209>  [+]
            │       │   │           ├── <206> Var [i]
            │       │   │           ╰── <208> Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <230>  [!=]
            │       │           │       ├── <221> Subscript
            │       │           │       │   ├── <218> Dot
            │       │           │       │   │   ├── <216> Dot
            │       │           │       │   │   │   ├── <214> Arrow
            │       │           │       │   │   │   │   ├── <212> Var [ptr]
            │       │           │       │   │   │   │   ╰── str
            │       │           │       │   │   │   ╰── u
            │       │           │       │   │   ╰── arr
            │       │           │       │   ╰── <220> Var [i]
            │       │           │       ╰── <229>  [-]
            │       │           │           ├── <225> Unary [-]
            │       │           │           │   ╰── <224> Constant Int [1]
            │       │           │           ╰── <228> Var [i]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── <231> Constant Int [0]
            │       ╰── Return
            │           ╰── <239> Constant Int [1]
            ╰── Function [validate_nested_partial]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── ptr
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Union [nested]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <262>  [!=]
                    │   │       ├── <259> Dot
                    │   │       │   ├── <257> Arrow
                    │   │       │   │   ├── <255> Var [ptr]
                    │   │       │   │   ╰── str
                    │   │       │   ╰── l
                    │   │       ╰── <261> Constant Long [9000372036854775800]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <263> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <278> FunctionCall [strcmp]
                    │   │       ├── <276> Dot
                    │   │       │   ├── <274> Dot
                    │   │       │   │   ├── <272> Arrow
                    │   │       │   │   │   ├── <270> Var [ptr]
                    │   │       │   │   │   ╰── str
                    │   │       │   │   ╰── u
                    │   │       │   ╰── arr
                    │   │       ╰── <277> "string"
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <279> Constant Int [0]
                    ╰── Return
                        ╰── <284> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_libraries_union_inits_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        union simple {
            double d;
            char c;
            int *ptr;
        };
        union inner {
            char arr[9];
        };
        struct my_struct {
            long l;
            union inner u;
            int i;
        };
        union nested {
            struct my_struct str;
            union simple s;
            long l;
        };
        int validate_simple(union simple *ptr);
        int validate_simple_converted(union simple *ptr);
        int validate_nested(union nested *ptr);
        int validate_nested_partial(union nested *ptr);
        int test_simple(void) {
            union simple x = { 123.45 };
            return validate_simple(&x);
        }
        int test_simple_converted(void) {
            union simple x = { 18446744073709550315UL };
            return validate_simple_converted(&x);
        }
        int test_nested(void) {
            union nested x = { {4294967395l, {{-1, -2, -3, -4, -5, -6, -7, -8, -9}}} };
            return validate_nested(&x);
        }
        int test_nested_partial_init(void) {
            union nested x = { {9000372036854775800l, {"string"}} };
            return validate_nested_partial(&x);
        }
        int main(void) {
            if (!test_simple()) {
                return 1;
            }
            if (!test_simple_converted()) {
                return 2;
            }
            if (!test_nested()) {
                return 3;
            }
            if (!test_nested_partial_init()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Union [simple]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Int
            ├── Union [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 9
            │               ╰── Char
            ├── Struct [my_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── str
            │   │   ╰── Type
            │   │       ╰── Struct [my_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Union [simple]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Function [validate_simple]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Union [simple]
            ├── Function [validate_simple_converted]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Union [simple]
            ├── Function [validate_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Union [nested]
            ├── Function [validate_nested_partial]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Union [nested]
            ├── Function [test_simple]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Union [simple]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <130> Constant Double [+1.2345e2]
            │       ╰── Return
            │           ╰── <138> FunctionCall [validate_simple]
            │               ╰── <137> AddressOf
            │                   ╰── <136> Var [x]
            ├── Function [test_simple_converted]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Union [simple]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <151> Constant ULong [18446744073709550315]
            │       ╰── Return
            │           ╰── <159> FunctionCall [validate_simple_converted]
            │               ╰── <158> AddressOf
            │                   ╰── <157> Var [x]
            ├── Function [test_nested]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Union [nested]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <172> Constant Long [4294967395]
            │       │               ╰── Compound
            │       │                   ╰── Compound
            │       │                       ├── <176> Unary [-]
            │       │                       │   ╰── <175> Constant Int [1]
            │       │                       ├── <180> Unary [-]
            │       │                       │   ╰── <179> Constant Int [2]
            │       │                       ├── <184> Unary [-]
            │       │                       │   ╰── <183> Constant Int [3]
            │       │                       ├── <188> Unary [-]
            │       │                       │   ╰── <187> Constant Int [4]
            │       │                       ├── <192> Unary [-]
            │       │                       │   ╰── <191> Constant Int [5]
            │       │                       ├── <196> Unary [-]
            │       │                       │   ╰── <195> Constant Int [6]
            │       │                       ├── <200> Unary [-]
            │       │                       │   ╰── <199> Constant Int [7]
            │       │                       ├── <204> Unary [-]
            │       │                       │   ╰── <203> Constant Int [8]
            │       │                       ╰── <208> Unary [-]
            │       │                           ╰── <207> Constant Int [9]
            │       ╰── Return
            │           ╰── <219> FunctionCall [validate_nested]
            │               ╰── <218> AddressOf
            │                   ╰── <217> Var [x]
            ├── Function [test_nested_partial_init]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Union [nested]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <232> Constant Long [9000372036854775800]
            │       │               ╰── Compound
            │       │                   ╰── <234> "string"
            │       ╰── Return
            │           ╰── <244> FunctionCall [validate_nested_partial]
            │               ╰── <243> AddressOf
            │                   ╰── <242> Var [x]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <256> Unary [!]
                    │   │       ╰── <255> FunctionCall [test_simple]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <257> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <265> Unary [!]
                    │   │       ╰── <264> FunctionCall [test_simple_converted]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <266> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <274> Unary [!]
                    │   │       ╰── <273> FunctionCall [test_nested]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <275> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <283> Unary [!]
                    │   │       ╰── <282> FunctionCall [test_nested_partial_init]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <284> Constant Int [4]
                    ╰── Return
                        ╰── <289> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_libraries_union_retvals() {
    let src = r#"
        int strcmp(char* s1, char* s2);
        void exit(int status);
        void *malloc(unsigned long size);
        union one_double {
            double d1;
            double d2;
        };
        struct has_union_with_double {
            union one_double member;
        };
        union has_struct_with_double {
            struct has_union_with_double s;
            double arr[1];
        };
        union one_int {
            double d;
            char c;
        };
        union one_int_nested {
            union one_int oi;
            union one_double od;
        };
        union char_int_mixed {
            char arr[7];
            union char_int_mixed* union_ptr;
            unsigned int ui;
        };
        union char_int_short {
            char c;
            int i;
        };
        struct has_union {
            unsigned int i;
            union char_int_short u;
        };
        union has_struct_with_ints {
            double d;
            struct has_union s;
            unsigned long ul;
        };
        union two_doubles {
            double arr[2];
            double single;
        };
        union has_xmm_union {
            union one_double u;
            union two_doubles u2;
        };
        struct dbl_struct {
            union one_double member1;
            double member2;
        };
        union has_dbl_struct {
            struct dbl_struct member1;
        };
        union char_arr {
            char arr[11];
            int i;
        };
        union two_arrs {
            double dbl_arr[2];
            long long_arr[2];
        };
        union two_eightbyte_has_struct {
            int arr[3];
            struct dbl_struct member1;
        };
        struct char_first_eightbyte {
            char c;
            double d;
        };
        struct int_second_eightbyte {
            double d;
            int i;
        };
        union two_structs {
            struct char_first_eightbyte member1;
            struct int_second_eightbyte member2;
        };
        struct nine_bytes {
            int i;
            char arr[5];
        };
        union has_nine_byte_struct {
            char c;
            long l;
            struct nine_bytes s;
        };
        union uneven {
            char arr[5];
            unsigned char uc;
        };
        struct has_uneven_union {
            int i;
            union uneven u;
        };
        union has_other_unions {
            union uneven u;
            union two_doubles d;
            union has_nine_byte_struct n;
        };
        union union_array {
            union one_int u_arr[2];
        };
        union uneven_union_array {
            union uneven u_arr[2];
        };
        struct small {
            char arr[3];
            signed char sc;
        };
        union has_small_struct_array {
            struct small arr[3];
        };
        union gp_and_xmm {
            double d_arr[2];
            char c;
        };
        union scalar_and_struct {
            long* ptr;
            struct char_first_eightbyte cfe;
        };
        struct has_two_unions {
            union char_int_mixed member1;
            union one_double member2;
        };
        union small_struct_arr_and_dbl {
            struct small arr[2];
            union two_doubles d;
        };
        union xmm_and_gp {
            double d;
            struct int_second_eightbyte ise;
        };
        union xmm_and_gp_nested {
            union xmm_and_gp member1;
            double arr[2];
            union two_doubles d;
        };
        union lotsa_doubles {
            double arr[3];
            int i;
        };
        union lotsa_chars {
            char more_chars[18];
            char fewer_chars[5];
        };
        struct large {
            int i;
            double d;
            char arr[10];
        };
        union contains_large_struct {
            int i;
            unsigned long ul;
            struct large l;
        };
        union contains_union_array {
            union gp_and_xmm arr[2];
        };
        int test_one_double(union one_double u);
        int test_has_union_with_double(struct has_union_with_double s);
        int test_has_struct_with_double(union has_struct_with_double u);
        int test_one_int(union one_int u);
        int test_one_int_nested(union one_int_nested u);
        int test_char_int_mixed(union char_int_mixed u);
        int test_has_union(struct has_union s);
        int test_has_struct_with_ints(union has_struct_with_ints u);
        int test_two_doubles(union two_doubles u);
        int test_has_xmm_union(union has_xmm_union u);
        int test_dbl_struct(struct dbl_struct s);
        int test_has_dbl_struct(union has_dbl_struct u);
        int test_char_arr(union char_arr u);
        int test_two_arrs(union two_arrs u);
        int test_two_eightbyte_has_struct(union two_eightbyte_has_struct u);
        int test_two_structs(union two_structs u);
        int test_has_nine_byte_struct(union has_nine_byte_struct u);
        int test_has_uneven_union(struct has_uneven_union s);
        int test_has_other_unions(union has_other_unions u);
        int test_union_array(union union_array u);
        int test_uneven_union_array(union uneven_union_array u);
        int test_has_small_struct_array(union has_small_struct_array u);
        int test_gp_and_xmm(union gp_and_xmm u);
        int test_scalar_and_struct(union scalar_and_struct u);
        int test_has_two_unions(struct has_two_unions s);
        int test_small_struct_arr_and_dbl(union small_struct_arr_and_dbl u);
        int test_xmm_and_gp(union xmm_and_gp u);
        int test_xmm_and_gp_nested(union xmm_and_gp_nested u);
        int test_lotsa_doubles(union lotsa_doubles u);
        int test_lotsa_chars(union lotsa_chars u);
        int test_contains_large_struct(union contains_large_struct u);
        int test_contains_union_array(union contains_union_array u);
        int pass_unions_and_structs(int i1, int i2, struct has_union one_gp_struct,
            double d1, union two_doubles two_xmm, union one_int one_gp, int i3, int i4,
            int i5);
        int pass_gp_union_in_memory(union two_doubles two_xmm,
            struct has_union one_gp_struct, int i1, int i2, int i3,
            int i4, int i5, int i6, union one_int one_gp);
        int pass_xmm_union_in_memory(double d1, double d2, union two_doubles two_xmm,
            union two_doubles two_xmm_copy, double d3, double d4,
            union two_doubles two_xmm_2);
        int pass_borderline_union(int i1, int i2, int i3, int i4, int i5,
            union char_arr two_gp);
        int pass_borderline_xmm_union(union two_doubles two_xmm, double d1, double d2,
            double d3, double d4, double d5, union two_doubles two_xmm_2);
        int pass_mixed_reg_in_memory(double d1, double d2, double d3, double d4,
            int i1, int i2, int i3, int i4, int i5, int i6,
            union gp_and_xmm mixed_regs);
        int pass_uneven_union_in_memory(int i1, int i2, int i3, int i4, int i5,
            union gp_and_xmm mixed_regs, union one_int one_gp, union uneven uneven);
        int pass_in_mem_first(union lotsa_doubles mem, union gp_and_xmm mixed_regs,
            union char_arr two_gp, struct has_union one_gp_struct);
        union one_double return_one_double(void);
        union one_int_nested return_one_int_nested(void);
        union has_dbl_struct return_has_dbl_struct(void);
        union two_arrs return_two_arrs(void);
        union scalar_and_struct return_scalar_and_struct(void);
        union xmm_and_gp return_xmm_and_gp(void);
        union contains_union_array return_contains_union_array(void);
        union lotsa_chars pass_params_and_return_in_mem(int i1,
            union scalar_and_struct int_and_dbl, union two_arrs two_arrs, int i2,
            union contains_union_array big_union, union one_int_nested oin);
        struct has_uneven_union return_struct_with_union(void);
        
        union one_double return_one_double(void) {
            union one_double result = { 245.5 };
            return result;
        }
        union one_int_nested return_one_int_nested(void) {
            union one_int_nested result = { {-9876.5} };
            return result;
        }
        union has_dbl_struct return_has_dbl_struct(void) {
            union has_dbl_struct result = {
                {
                    {1234.5}, 6789.
                }
            };
            return result;
        }
        union two_arrs return_two_arrs(void) {
            union two_arrs result;
            result.dbl_arr[0] = 66.75;
            result.long_arr[1] = -4294967300l;
            return result;
        }
        union scalar_and_struct return_scalar_and_struct(void) {
            union scalar_and_struct result;
            result.cfe.c = -115;
            result.cfe.d = 222222.25;
            return result;
        }
        union xmm_and_gp return_xmm_and_gp(void) {
            union xmm_and_gp result;
            result.ise.d = -50000.125;
            result.ise.i = -3000;
            return result;
        }
        union contains_union_array return_contains_union_array(void) {
            union contains_union_array result = {
                {
                    {{-2000e-4, -3000e-4}}, {{20000e10, 5000e11}}
                }
            };
            return result;
        }
        union lotsa_chars pass_params_and_return_in_mem(int i1,
            union scalar_and_struct int_and_dbl, union two_arrs two_arrs, int i2,
            union contains_union_array big_union, union one_int_nested oin) {
            if (i1 != 1 || i2 != 25) {
                exit(-1);
            }
            if (int_and_dbl.cfe.c != -115 || int_and_dbl.cfe.d != 222222.25) {
                exit(-2);
            }
            if (two_arrs.dbl_arr[0] != 66.75 || two_arrs.long_arr[1] != -4294967300l) {
                exit(-3);
            }
            if (!(big_union.arr[0].d_arr[0] == -2000e-4 && big_union.arr[0].d_arr[1] == -3000e-4
                && big_union.arr[1].d_arr[0] == 20000e10 && big_union.arr[1].d_arr[1] == 5000e11)) {
                exit(-4);
            }
            if (oin.oi.d != -9876.5) {
                exit(-5);
            }
            union lotsa_chars result = { "ABCDEFGHIJKLMNOPQ" };
            return result;
        }
        struct has_uneven_union return_struct_with_union(void) {
            struct has_uneven_union result = {
                -8765, {"done"}
            };
            return result;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Union [one_double]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d1
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d2
            │       ╰── Type
            │           ╰── Double
            ├── Struct [has_union_with_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [has_struct_with_double]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [has_union_with_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Double
            ├── Union [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Union [one_int_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── oi
            │   │   ╰── Type
            │   │       ╰── Union [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── od
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [char_int_mixed]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 7
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── union_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Union [char_int_mixed]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ui
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Union [char_int_short]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Unsigned Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Union [char_int_short]
            ├── Union [has_struct_with_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [has_union]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ul
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Union [two_doubles]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── single
            │       ╰── Type
            │           ╰── Double
            ├── Union [has_xmm_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u2
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Struct [dbl_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Double
            ├── Union [has_dbl_struct]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member1
            │       ╰── Type
            │           ╰── Struct [dbl_struct]
            ├── Union [char_arr]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 11
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [two_arrs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── long_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Long
            ├── Union [two_eightbyte_has_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member1
            │       ╰── Type
            │           ╰── Struct [dbl_struct]
            ├── Struct [char_first_eightbyte]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [int_second_eightbyte]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [two_structs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Struct [char_first_eightbyte]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Struct [int_second_eightbyte]
            ├── Struct [nine_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Union [has_nine_byte_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [nine_bytes]
            ├── Union [uneven]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 5
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── uc
            │       ╰── Type
            │           ╰── Unsigned Char
            ├── Struct [has_uneven_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Union [uneven]
            ├── Union [has_other_unions]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [uneven]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Union [two_doubles]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── n
            │       ╰── Type
            │           ╰── Union [has_nine_byte_struct]
            ├── Union [union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [one_int]
            ├── Union [uneven_union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [uneven]
            ├── Struct [small]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sc
            │       ╰── Type
            │           ╰── Signed Char
            ├── Union [has_small_struct_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [small]
            ├── Union [gp_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Union [scalar_and_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cfe
            │       ╰── Type
            │           ╰── Struct [char_first_eightbyte]
            ├── Struct [has_two_unions]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [char_int_mixed]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [small_struct_arr_and_dbl]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Struct [small]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Union [xmm_and_gp]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ise
            │       ╰── Type
            │           ╰── Struct [int_second_eightbyte]
            ├── Union [xmm_and_gp_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [xmm_and_gp]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Union [lotsa_doubles]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [lotsa_chars]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── more_chars
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 18
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── fewer_chars
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [large]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Char
            ├── Union [contains_large_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ul
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Struct [large]
            ├── Union [contains_union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [gp_and_xmm]
            ├── Function [test_one_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_double]
            ├── Function [test_has_union_with_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_union_with_double]
            ├── Function [test_has_struct_with_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_struct_with_double]
            ├── Function [test_one_int]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_int]
            ├── Function [test_one_int_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_int_nested]
            ├── Function [test_char_int_mixed]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [char_int_mixed]
            ├── Function [test_has_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_union]
            ├── Function [test_has_struct_with_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_struct_with_ints]
            ├── Function [test_two_doubles]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [test_has_xmm_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_xmm_union]
            ├── Function [test_dbl_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [dbl_struct]
            ├── Function [test_has_dbl_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_dbl_struct]
            ├── Function [test_char_arr]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [char_arr]
            ├── Function [test_two_arrs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_arrs]
            ├── Function [test_two_eightbyte_has_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_eightbyte_has_struct]
            ├── Function [test_two_structs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_structs]
            ├── Function [test_has_nine_byte_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_nine_byte_struct]
            ├── Function [test_has_uneven_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_uneven_union]
            ├── Function [test_has_other_unions]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_other_unions]
            ├── Function [test_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [union_array]
            ├── Function [test_uneven_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [uneven_union_array]
            ├── Function [test_has_small_struct_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_small_struct_array]
            ├── Function [test_gp_and_xmm]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [gp_and_xmm]
            ├── Function [test_scalar_and_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [scalar_and_struct]
            ├── Function [test_has_two_unions]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_two_unions]
            ├── Function [test_small_struct_arr_and_dbl]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [small_struct_arr_and_dbl]
            ├── Function [test_xmm_and_gp]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [xmm_and_gp]
            ├── Function [test_xmm_and_gp_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [xmm_and_gp_nested]
            ├── Function [test_lotsa_doubles]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [lotsa_doubles]
            ├── Function [test_lotsa_chars]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [lotsa_chars]
            ├── Function [test_contains_large_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [contains_large_struct]
            ├── Function [test_contains_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [contains_union_array]
            ├── Function [pass_unions_and_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp_struct
            │       │   ╰── Type
            │       │       ╰── Struct [has_union]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp
            │       │   ╰── Type
            │       │       ╰── Union [one_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i5
            │           ╰── Type
            │               ╰── Int
            ├── Function [pass_gp_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp_struct
            │       │   ╰── Type
            │       │       ╰── Struct [has_union]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── one_gp
            │           ╰── Type
            │               ╰── Union [one_int]
            ├── Function [pass_xmm_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm_copy
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_xmm_2
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [pass_borderline_union]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_gp
            │           ╰── Type
            │               ╰── Union [char_arr]
            ├── Function [pass_borderline_xmm_union]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d5
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_xmm_2
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [pass_mixed_reg_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── mixed_regs
            │           ╰── Type
            │               ╰── Union [gp_and_xmm]
            ├── Function [pass_uneven_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_regs
            │       │   ╰── Type
            │       │       ╰── Union [gp_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp
            │       │   ╰── Type
            │       │       ╰── Union [one_int]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── uneven
            │           ╰── Type
            │               ╰── Union [uneven]
            ├── Function [pass_in_mem_first]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mem
            │       │   ╰── Type
            │       │       ╰── Union [lotsa_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_regs
            │       │   ╰── Type
            │       │       ╰── Union [gp_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_gp
            │       │   ╰── Type
            │       │       ╰── Union [char_arr]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── one_gp_struct
            │           ╰── Type
            │               ╰── Struct [has_union]
            ├── Function [return_one_double]
            ├── Function [return_one_int_nested]
            ├── Function [return_has_dbl_struct]
            ├── Function [return_two_arrs]
            ├── Function [return_scalar_and_struct]
            ├── Function [return_xmm_and_gp]
            ├── Function [return_contains_union_array]
            ├── Function [pass_params_and_return_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_and_dbl
            │       │   ╰── Type
            │       │       ╰── Union [scalar_and_struct]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_arrs
            │       │   ╰── Type
            │       │       ╰── Union [two_arrs]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── big_union
            │       │   ╰── Type
            │       │       ╰── Union [contains_union_array]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── oin
            │           ╰── Type
            │               ╰── Union [one_int_nested]
            ├── Function [return_struct_with_union]
            ├── Function [return_one_double]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Union [one_double]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <1196> Constant Double [+2.455e2]
            │       ╰── Return
            │           ╰── <1201> Var [result]
            ├── Function [return_one_int_nested]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Union [one_int_nested]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ╰── <1217> Unary [-]
            │       │                   ╰── <1216> Constant Double [+9.8765e3]
            │       ╰── Return
            │           ╰── <1223> Var [result]
            ├── Function [return_has_dbl_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Union [has_dbl_struct]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── Compound
            │       │               │   ╰── <1237> Constant Double [+1.2345e3]
            │       │               ╰── <1240> Constant Double [+6.789e3]
            │       ╰── Return
            │           ╰── <1246> Var [result]
            ├── Function [return_two_arrs]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ╰── Type
            │       │       ╰── Union [two_arrs]
            │       ├── <1269> Assign [=]
            │       │   ├── <1266> Subscript
            │       │   │   ├── <1264> Dot
            │       │   │   │   ├── <1262> Var [result]
            │       │   │   │   ╰── dbl_arr
            │       │   │   ╰── <1265> Constant Int [0]
            │       │   ╰── <1268> Constant Double [+6.675e1]
            │       ├── <1281> Assign [=]
            │       │   ├── <1276> Subscript
            │       │   │   ├── <1274> Dot
            │       │   │   │   ├── <1272> Var [result]
            │       │   │   │   ╰── long_arr
            │       │   │   ╰── <1275> Constant Int [1]
            │       │   ╰── <1280> Unary [-]
            │       │       ╰── <1279> Constant Long [4294967300]
            │       ╰── Return
            │           ╰── <1284> Var [result]
            ├── Function [return_scalar_and_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ╰── Type
            │       │       ╰── Union [scalar_and_struct]
            │       ├── <1309> Assign [=]
            │       │   ├── <1304> Dot
            │       │   │   ├── <1302> Dot
            │       │   │   │   ├── <1300> Var [result]
            │       │   │   │   ╰── cfe
            │       │   │   ╰── c
            │       │   ╰── <1308> Unary [-]
            │       │       ╰── <1307> Constant Int [115]
            │       ├── <1319> Assign [=]
            │       │   ├── <1316> Dot
            │       │   │   ├── <1314> Dot
            │       │   │   │   ├── <1312> Var [result]
            │       │   │   │   ╰── cfe
            │       │   │   ╰── d
            │       │   ╰── <1318> Constant Double [+2.2222225e5]
            │       ╰── Return
            │           ╰── <1322> Var [result]
            ├── Function [return_xmm_and_gp]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ╰── Type
            │       │       ╰── Union [xmm_and_gp]
            │       ├── <1347> Assign [=]
            │       │   ├── <1342> Dot
            │       │   │   ├── <1340> Dot
            │       │   │   │   ├── <1338> Var [result]
            │       │   │   │   ╰── ise
            │       │   │   ╰── d
            │       │   ╰── <1346> Unary [-]
            │       │       ╰── <1345> Constant Double [+5.0000125e4]
            │       ├── <1359> Assign [=]
            │       │   ├── <1354> Dot
            │       │   │   ├── <1352> Dot
            │       │   │   │   ├── <1350> Var [result]
            │       │   │   │   ╰── ise
            │       │   │   ╰── i
            │       │   ╰── <1358> Unary [-]
            │       │       ╰── <1357> Constant Int [3000]
            │       ╰── Return
            │           ╰── <1362> Var [result]
            ├── Function [return_contains_union_array]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Union [contains_union_array]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── Compound
            │       │               │   ╰── Compound
            │       │               │       ├── <1378> Unary [-]
            │       │               │       │   ╰── <1377> Constant Double [+2e-1]
            │       │               │       ╰── <1382> Unary [-]
            │       │               │           ╰── <1381> Constant Double [+3e-1]
            │       │               ╰── Compound
            │       │                   ╰── Compound
            │       │                       ├── <1386> Constant Double [+2e14]
            │       │                       ╰── <1388> Constant Double [+5e14]
            │       ╰── Return
            │           ╰── <1396> Var [result]
            ├── Function [pass_params_and_return_in_mem]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i1
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── int_and_dbl
            │   │   │   ╰── Type
            │   │   │       ╰── Union [scalar_and_struct]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── two_arrs
            │   │   │   ╰── Type
            │   │   │       ╰── Union [two_arrs]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i2
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── big_union
            │   │   │   ╰── Type
            │   │   │       ╰── Union [contains_union_array]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── oin
            │   │       ╰── Type
            │   │           ╰── Union [one_int_nested]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1439>  [||]
            │       │   │       ├── <1432>  [!=]
            │       │   │       │   ├── <1429> Var [i1]
            │       │   │       │   ╰── <1431> Constant Int [1]
            │       │   │       ╰── <1438>  [!=]
            │       │   │           ├── <1435> Var [i2]
            │       │   │           ╰── <1437> Constant Int [25]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <1444> FunctionCall [exit]
            │       │               ╰── <1443> Unary [-]
            │       │                   ╰── <1442> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1470>  [||]
            │       │   │       ├── <1459>  [!=]
            │       │   │       │   ├── <1454> Dot
            │       │   │       │   │   ├── <1452> Dot
            │       │   │       │   │   │   ├── <1450> Var [int_and_dbl]
            │       │   │       │   │   │   ╰── cfe
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <1458> Unary [-]
            │       │   │       │       ╰── <1457> Constant Int [115]
            │       │   │       ╰── <1469>  [!=]
            │       │   │           ├── <1466> Dot
            │       │   │           │   ├── <1464> Dot
            │       │   │           │   │   ├── <1462> Var [int_and_dbl]
            │       │   │           │   │   ╰── cfe
            │       │   │           │   ╰── d
            │       │   │           ╰── <1468> Constant Double [+2.2222225e5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <1475> FunctionCall [exit]
            │       │               ╰── <1474> Unary [-]
            │       │                   ╰── <1473> Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1501>  [||]
            │       │   │       ├── <1488>  [!=]
            │       │   │       │   ├── <1485> Subscript
            │       │   │       │   │   ├── <1483> Dot
            │       │   │       │   │   │   ├── <1481> Var [two_arrs]
            │       │   │       │   │   │   ╰── dbl_arr
            │       │   │       │   │   ╰── <1484> Constant Int [0]
            │       │   │       │   ╰── <1487> Constant Double [+6.675e1]
            │       │   │       ╰── <1500>  [!=]
            │       │   │           ├── <1495> Subscript
            │       │   │           │   ├── <1493> Dot
            │       │   │           │   │   ├── <1491> Var [two_arrs]
            │       │   │           │   │   ╰── long_arr
            │       │   │           │   ╰── <1494> Constant Int [1]
            │       │   │           ╰── <1499> Unary [-]
            │       │   │               ╰── <1498> Constant Long [4294967300]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <1506> FunctionCall [exit]
            │       │               ╰── <1505> Unary [-]
            │       │                   ╰── <1504> Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1575> Unary [!]
            │       │   │       ╰── <1574>  [&&]
            │       │   │           ├── <1558>  [&&]
            │       │   │           │   ├── <1543>  [&&]
            │       │   │           │   │   ├── <1526>  [==]
            │       │   │           │   │   │   ├── <1521> Subscript
            │       │   │           │   │   │   │   ├── <1519> Dot
            │       │   │           │   │   │   │   │   ├── <1517> Subscript
            │       │   │           │   │   │   │   │   │   ├── <1515> Dot
            │       │   │           │   │   │   │   │   │   │   ├── <1513> Var [big_union]
            │       │   │           │   │   │   │   │   │   │   ╰── arr
            │       │   │           │   │   │   │   │   │   ╰── <1516> Constant Int [0]
            │       │   │           │   │   │   │   │   ╰── d_arr
            │       │   │           │   │   │   │   ╰── <1520> Constant Int [0]
            │       │   │           │   │   │   ╰── <1525> Unary [-]
            │       │   │           │   │   │       ╰── <1524> Constant Double [+2e-1]
            │       │   │           │   │   ╰── <1542>  [==]
            │       │   │           │   │       ├── <1537> Subscript
            │       │   │           │   │       │   ├── <1535> Dot
            │       │   │           │   │       │   │   ├── <1533> Subscript
            │       │   │           │   │       │   │   │   ├── <1531> Dot
            │       │   │           │   │       │   │   │   │   ├── <1529> Var [big_union]
            │       │   │           │   │       │   │   │   │   ╰── arr
            │       │   │           │   │       │   │   │   ╰── <1532> Constant Int [0]
            │       │   │           │   │       │   │   ╰── d_arr
            │       │   │           │   │       │   ╰── <1536> Constant Int [1]
            │       │   │           │   │       ╰── <1541> Unary [-]
            │       │   │           │   │           ╰── <1540> Constant Double [+3e-1]
            │       │   │           │   ╰── <1557>  [==]
            │       │   │           │       ├── <1554> Subscript
            │       │   │           │       │   ├── <1552> Dot
            │       │   │           │       │   │   ├── <1550> Subscript
            │       │   │           │       │   │   │   ├── <1548> Dot
            │       │   │           │       │   │   │   │   ├── <1546> Var [big_union]
            │       │   │           │       │   │   │   │   ╰── arr
            │       │   │           │       │   │   │   ╰── <1549> Constant Int [1]
            │       │   │           │       │   │   ╰── d_arr
            │       │   │           │       │   ╰── <1553> Constant Int [0]
            │       │   │           │       ╰── <1556> Constant Double [+2e14]
            │       │   │           ╰── <1572>  [==]
            │       │   │               ├── <1569> Subscript
            │       │   │               │   ├── <1567> Dot
            │       │   │               │   │   ├── <1565> Subscript
            │       │   │               │   │   │   ├── <1563> Dot
            │       │   │               │   │   │   │   ├── <1561> Var [big_union]
            │       │   │               │   │   │   │   ╰── arr
            │       │   │               │   │   │   ╰── <1564> Constant Int [1]
            │       │   │               │   │   ╰── d_arr
            │       │   │               │   ╰── <1568> Constant Int [1]
            │       │   │               ╰── <1571> Constant Double [+5e14]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <1580> FunctionCall [exit]
            │       │               ╰── <1579> Unary [-]
            │       │                   ╰── <1578> Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1595>  [!=]
            │       │   │       ├── <1590> Dot
            │       │   │       │   ├── <1588> Dot
            │       │   │       │   │   ├── <1586> Var [oin]
            │       │   │       │   │   ╰── oi
            │       │   │       │   ╰── d
            │       │   │       ╰── <1594> Unary [-]
            │       │   │           ╰── <1593> Constant Double [+9.8765e3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <1600> FunctionCall [exit]
            │       │               ╰── <1599> Unary [-]
            │       │                   ╰── <1598> Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Union [lotsa_chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <1609> "ABCDEFGHIJKLMNOPQ"
            │       ╰── Return
            │           ╰── <1614> Var [result]
            ╰── Function [return_struct_with_union]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Struct [has_uneven_union]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <1630> Unary [-]
                    │           │   ╰── <1629> Constant Int [8765]
                    │           ╰── Compound
                    │               ╰── <1632> "done"
                    ╰── Return
                        ╰── <1638> Var [result]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_libraries_union_retvals_client() {
    let src = r#"
        int strcmp(char* s1, char* s2);
        void exit(int status);
        void *malloc(unsigned long size);
        union one_double {
            double d1;
            double d2;
        };
        struct has_union_with_double {
            union one_double member;
        };
        union has_struct_with_double {
            struct has_union_with_double s;
            double arr[1];
        };
        union one_int {
            double d;
            char c;
        };
        union one_int_nested {
            union one_int oi;
            union one_double od;
        };
        union char_int_mixed {
            char arr[7];
            union char_int_mixed* union_ptr;
            unsigned int ui;
        };
        union char_int_short {
            char c;
            int i;
        };
        struct has_union {
            unsigned int i;
            union char_int_short u;
        };
        union has_struct_with_ints {
            double d;
            struct has_union s;
            unsigned long ul;
        };
        union two_doubles {
            double arr[2];
            double single;
        };
        union has_xmm_union {
            union one_double u;
            union two_doubles u2;
        };
        struct dbl_struct {
            union one_double member1;
            double member2;
        };
        union has_dbl_struct {
            struct dbl_struct member1;
        };
        union char_arr {
            char arr[11];
            int i;
        };
        union two_arrs {
            double dbl_arr[2];
            long long_arr[2];
        };
        union two_eightbyte_has_struct {
            int arr[3];
            struct dbl_struct member1;
        };
        struct char_first_eightbyte {
            char c;
            double d;
        };
        struct int_second_eightbyte {
            double d;
            int i;
        };
        union two_structs {
            struct char_first_eightbyte member1;
            struct int_second_eightbyte member2;
        };
        struct nine_bytes {
            int i;
            char arr[5];
        };
        union has_nine_byte_struct {
            char c;
            long l;
            struct nine_bytes s;
        };
        union uneven {
            char arr[5];
            unsigned char uc;
        };
        struct has_uneven_union {
            int i;
            union uneven u;
        };
        union has_other_unions {
            union uneven u;
            union two_doubles d;
            union has_nine_byte_struct n;
        };
        union union_array {
            union one_int u_arr[2];
        };
        union uneven_union_array {
            union uneven u_arr[2];
        };
        struct small {
            char arr[3];
            signed char sc;
        };
        union has_small_struct_array {
            struct small arr[3];
        };
        union gp_and_xmm {
            double d_arr[2];
            char c;
        };
        union scalar_and_struct {
            long* ptr;
            struct char_first_eightbyte cfe;
        };
        struct has_two_unions {
            union char_int_mixed member1;
            union one_double member2;
        };
        union small_struct_arr_and_dbl {
            struct small arr[2];
            union two_doubles d;
        };
        union xmm_and_gp {
            double d;
            struct int_second_eightbyte ise;
        };
        union xmm_and_gp_nested {
            union xmm_and_gp member1;
            double arr[2];
            union two_doubles d;
        };
        union lotsa_doubles {
            double arr[3];
            int i;
        };
        union lotsa_chars {
            char more_chars[18];
            char fewer_chars[5];
        };
        struct large {
            int i;
            double d;
            char arr[10];
        };
        union contains_large_struct {
            int i;
            unsigned long ul;
            struct large l;
        };
        union contains_union_array {
            union gp_and_xmm arr[2];
        };
        int test_one_double(union one_double u);
        int test_has_union_with_double(struct has_union_with_double s);
        int test_has_struct_with_double(union has_struct_with_double u);
        int test_one_int(union one_int u);
        int test_one_int_nested(union one_int_nested u);
        int test_char_int_mixed(union char_int_mixed u);
        int test_has_union(struct has_union s);
        int test_has_struct_with_ints(union has_struct_with_ints u);
        int test_two_doubles(union two_doubles u);
        int test_has_xmm_union(union has_xmm_union u);
        int test_dbl_struct(struct dbl_struct s);
        int test_has_dbl_struct(union has_dbl_struct u);
        int test_char_arr(union char_arr u);
        int test_two_arrs(union two_arrs u);
        int test_two_eightbyte_has_struct(union two_eightbyte_has_struct u);
        int test_two_structs(union two_structs u);
        int test_has_nine_byte_struct(union has_nine_byte_struct u);
        int test_has_uneven_union(struct has_uneven_union s);
        int test_has_other_unions(union has_other_unions u);
        int test_union_array(union union_array u);
        int test_uneven_union_array(union uneven_union_array u);
        int test_has_small_struct_array(union has_small_struct_array u);
        int test_gp_and_xmm(union gp_and_xmm u);
        int test_scalar_and_struct(union scalar_and_struct u);
        int test_has_two_unions(struct has_two_unions s);
        int test_small_struct_arr_and_dbl(union small_struct_arr_and_dbl u);
        int test_xmm_and_gp(union xmm_and_gp u);
        int test_xmm_and_gp_nested(union xmm_and_gp_nested u);
        int test_lotsa_doubles(union lotsa_doubles u);
        int test_lotsa_chars(union lotsa_chars u);
        int test_contains_large_struct(union contains_large_struct u);
        int test_contains_union_array(union contains_union_array u);
        int pass_unions_and_structs(int i1, int i2, struct has_union one_gp_struct,
            double d1, union two_doubles two_xmm, union one_int one_gp, int i3, int i4,
            int i5);
        int pass_gp_union_in_memory(union two_doubles two_xmm,
            struct has_union one_gp_struct, int i1, int i2, int i3,
            int i4, int i5, int i6, union one_int one_gp);
        int pass_xmm_union_in_memory(double d1, double d2, union two_doubles two_xmm,
            union two_doubles two_xmm_copy, double d3, double d4,
            union two_doubles two_xmm_2);
        int pass_borderline_union(int i1, int i2, int i3, int i4, int i5,
            union char_arr two_gp);
        int pass_borderline_xmm_union(union two_doubles two_xmm, double d1, double d2,
            double d3, double d4, double d5, union two_doubles two_xmm_2);
        int pass_mixed_reg_in_memory(double d1, double d2, double d3, double d4,
            int i1, int i2, int i3, int i4, int i5, int i6,
            union gp_and_xmm mixed_regs);
        int pass_uneven_union_in_memory(int i1, int i2, int i3, int i4, int i5,
            union gp_and_xmm mixed_regs, union one_int one_gp, union uneven uneven);
        int pass_in_mem_first(union lotsa_doubles mem, union gp_and_xmm mixed_regs,
            union char_arr two_gp, struct has_union one_gp_struct);
        union one_double return_one_double(void);
        union one_int_nested return_one_int_nested(void);
        union has_dbl_struct return_has_dbl_struct(void);
        union two_arrs return_two_arrs(void);
        union scalar_and_struct return_scalar_and_struct(void);
        union xmm_and_gp return_xmm_and_gp(void);
        union contains_union_array return_contains_union_array(void);
        union lotsa_chars pass_params_and_return_in_mem(int i1,
            union scalar_and_struct int_and_dbl, union two_arrs two_arrs, int i2,
            union contains_union_array big_union, union one_int_nested oin);
        struct has_uneven_union return_struct_with_union(void);
        
        int main(void) {
            union one_double od = return_one_double();
            if (!(od.d1 == 245.5 && od.d2 == 245.5)) {
                return 1;
            }
            union one_int_nested oin = return_one_int_nested();
            if (oin.oi.d != -9876.5) {
                return 2;
            }
            union has_dbl_struct two_xmm = return_has_dbl_struct();
            if (!(two_xmm.member1.member1.d1 == 1234.5 && two_xmm.member1.member2 == 6789.)) {
                return 3;
            }
            union two_arrs two_arrs = return_two_arrs();
            if (two_arrs.dbl_arr[0] != 66.75 || two_arrs.long_arr[1] != -4294967300l) {
                return 4;
            }
            union scalar_and_struct int_and_dbl = return_scalar_and_struct();
            if (int_and_dbl.cfe.c != -115 || int_and_dbl.cfe.d != 222222.25) {
                return 5;
            }
            union xmm_and_gp dbl_and_int = return_xmm_and_gp();
            if (dbl_and_int.d != -50000.125 || dbl_and_int.ise.d != -50000.125
                || dbl_and_int.ise.i != -3000) {
                return 6;
            }
            union contains_union_array big_union = return_contains_union_array();
            if (!(big_union.arr[0].d_arr[0] == -2000e-4 && big_union.arr[0].d_arr[1] == -3000e-4
                && big_union.arr[1].d_arr[0] == 20000e10 && big_union.arr[1].d_arr[1] == 5000e11)) {
                return 7;
            }
            union lotsa_chars chars_union = pass_params_and_return_in_mem(1,
                int_and_dbl, two_arrs, 25, big_union, oin);
            if (strcmp(chars_union.more_chars, "ABCDEFGHIJKLMNOPQ") != 0) {
                return 8;
            }
            struct has_uneven_union s = return_struct_with_union();
            if (s.i != -8765 || strcmp(s.u.arr, "done") != 0) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Union [one_double]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d1
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d2
            │       ╰── Type
            │           ╰── Double
            ├── Struct [has_union_with_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [has_struct_with_double]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [has_union_with_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Double
            ├── Union [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Union [one_int_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── oi
            │   │   ╰── Type
            │   │       ╰── Union [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── od
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [char_int_mixed]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 7
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── union_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Union [char_int_mixed]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ui
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Union [char_int_short]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Unsigned Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Union [char_int_short]
            ├── Union [has_struct_with_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [has_union]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ul
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Union [two_doubles]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── single
            │       ╰── Type
            │           ╰── Double
            ├── Union [has_xmm_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u2
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Struct [dbl_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Double
            ├── Union [has_dbl_struct]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member1
            │       ╰── Type
            │           ╰── Struct [dbl_struct]
            ├── Union [char_arr]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 11
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [two_arrs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── long_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Long
            ├── Union [two_eightbyte_has_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member1
            │       ╰── Type
            │           ╰── Struct [dbl_struct]
            ├── Struct [char_first_eightbyte]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [int_second_eightbyte]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [two_structs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Struct [char_first_eightbyte]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Struct [int_second_eightbyte]
            ├── Struct [nine_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Union [has_nine_byte_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [nine_bytes]
            ├── Union [uneven]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 5
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── uc
            │       ╰── Type
            │           ╰── Unsigned Char
            ├── Struct [has_uneven_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Union [uneven]
            ├── Union [has_other_unions]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [uneven]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Union [two_doubles]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── n
            │       ╰── Type
            │           ╰── Union [has_nine_byte_struct]
            ├── Union [union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [one_int]
            ├── Union [uneven_union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [uneven]
            ├── Struct [small]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sc
            │       ╰── Type
            │           ╰── Signed Char
            ├── Union [has_small_struct_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [small]
            ├── Union [gp_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Union [scalar_and_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cfe
            │       ╰── Type
            │           ╰── Struct [char_first_eightbyte]
            ├── Struct [has_two_unions]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [char_int_mixed]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member2
            │       ╰── Type
            │           ╰── Union [one_double]
            ├── Union [small_struct_arr_and_dbl]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Struct [small]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Union [xmm_and_gp]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ise
            │       ╰── Type
            │           ╰── Struct [int_second_eightbyte]
            ├── Union [xmm_and_gp_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Union [xmm_and_gp]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Union [two_doubles]
            ├── Union [lotsa_doubles]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [lotsa_chars]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── more_chars
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 18
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── fewer_chars
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [large]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Char
            ├── Union [contains_large_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ul
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Struct [large]
            ├── Union [contains_union_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Union [gp_and_xmm]
            ├── Function [test_one_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_double]
            ├── Function [test_has_union_with_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_union_with_double]
            ├── Function [test_has_struct_with_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_struct_with_double]
            ├── Function [test_one_int]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_int]
            ├── Function [test_one_int_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [one_int_nested]
            ├── Function [test_char_int_mixed]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [char_int_mixed]
            ├── Function [test_has_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_union]
            ├── Function [test_has_struct_with_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_struct_with_ints]
            ├── Function [test_two_doubles]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [test_has_xmm_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_xmm_union]
            ├── Function [test_dbl_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [dbl_struct]
            ├── Function [test_has_dbl_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_dbl_struct]
            ├── Function [test_char_arr]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [char_arr]
            ├── Function [test_two_arrs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_arrs]
            ├── Function [test_two_eightbyte_has_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_eightbyte_has_struct]
            ├── Function [test_two_structs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [two_structs]
            ├── Function [test_has_nine_byte_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_nine_byte_struct]
            ├── Function [test_has_uneven_union]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_uneven_union]
            ├── Function [test_has_other_unions]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_other_unions]
            ├── Function [test_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [union_array]
            ├── Function [test_uneven_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [uneven_union_array]
            ├── Function [test_has_small_struct_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [has_small_struct_array]
            ├── Function [test_gp_and_xmm]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [gp_and_xmm]
            ├── Function [test_scalar_and_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [scalar_and_struct]
            ├── Function [test_has_two_unions]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [has_two_unions]
            ├── Function [test_small_struct_arr_and_dbl]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [small_struct_arr_and_dbl]
            ├── Function [test_xmm_and_gp]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [xmm_and_gp]
            ├── Function [test_xmm_and_gp_nested]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [xmm_and_gp_nested]
            ├── Function [test_lotsa_doubles]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [lotsa_doubles]
            ├── Function [test_lotsa_chars]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [lotsa_chars]
            ├── Function [test_contains_large_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [contains_large_struct]
            ├── Function [test_contains_union_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── u
            │           ╰── Type
            │               ╰── Union [contains_union_array]
            ├── Function [pass_unions_and_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp_struct
            │       │   ╰── Type
            │       │       ╰── Struct [has_union]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp
            │       │   ╰── Type
            │       │       ╰── Union [one_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i5
            │           ╰── Type
            │               ╰── Int
            ├── Function [pass_gp_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp_struct
            │       │   ╰── Type
            │       │       ╰── Struct [has_union]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── one_gp
            │           ╰── Type
            │               ╰── Union [one_int]
            ├── Function [pass_xmm_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm_copy
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_xmm_2
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [pass_borderline_union]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_gp
            │           ╰── Type
            │               ╰── Union [char_arr]
            ├── Function [pass_borderline_xmm_union]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm
            │       │   ╰── Type
            │       │       ╰── Union [two_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d5
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── two_xmm_2
            │           ╰── Type
            │               ╰── Union [two_doubles]
            ├── Function [pass_mixed_reg_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── mixed_regs
            │           ╰── Type
            │               ╰── Union [gp_and_xmm]
            ├── Function [pass_uneven_union_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_regs
            │       │   ╰── Type
            │       │       ╰── Union [gp_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── one_gp
            │       │   ╰── Type
            │       │       ╰── Union [one_int]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── uneven
            │           ╰── Type
            │               ╰── Union [uneven]
            ├── Function [pass_in_mem_first]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mem
            │       │   ╰── Type
            │       │       ╰── Union [lotsa_doubles]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_regs
            │       │   ╰── Type
            │       │       ╰── Union [gp_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_gp
            │       │   ╰── Type
            │       │       ╰── Union [char_arr]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── one_gp_struct
            │           ╰── Type
            │               ╰── Struct [has_union]
            ├── Function [return_one_double]
            ├── Function [return_one_int_nested]
            ├── Function [return_has_dbl_struct]
            ├── Function [return_two_arrs]
            ├── Function [return_scalar_and_struct]
            ├── Function [return_xmm_and_gp]
            ├── Function [return_contains_union_array]
            ├── Function [pass_params_and_return_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_and_dbl
            │       │   ╰── Type
            │       │       ╰── Union [scalar_and_struct]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_arrs
            │       │   ╰── Type
            │       │       ╰── Union [two_arrs]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── big_union
            │       │   ╰── Type
            │       │       ╰── Union [contains_union_array]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── oin
            │           ╰── Type
            │               ╰── Union [one_int_nested]
            ├── Function [return_struct_with_union]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── od
                    │   ├── Type
                    │   │   ╰── Union [one_double]
                    │   ╰── Initializer
                    │       ╰── <1196> FunctionCall [return_one_double]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1217> Unary [!]
                    │   │       ╰── <1216>  [&&]
                    │   │           ├── <1206>  [==]
                    │   │           │   ├── <1203> Dot
                    │   │           │   │   ├── <1201> Var [od]
                    │   │           │   │   ╰── d1
                    │   │           │   ╰── <1205> Constant Double [+2.455e2]
                    │   │           ╰── <1214>  [==]
                    │   │               ├── <1211> Dot
                    │   │               │   ├── <1209> Var [od]
                    │   │               │   ╰── d2
                    │   │               ╰── <1213> Constant Double [+2.455e2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1218> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── oin
                    │   ├── Type
                    │   │   ╰── Union [one_int_nested]
                    │   ╰── Initializer
                    │       ╰── <1228> FunctionCall [return_one_int_nested]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1241>  [!=]
                    │   │       ├── <1236> Dot
                    │   │       │   ├── <1234> Dot
                    │   │       │   │   ├── <1232> Var [oin]
                    │   │       │   │   ╰── oi
                    │   │       │   ╰── d
                    │   │       ╰── <1240> Unary [-]
                    │   │           ╰── <1239> Constant Double [+9.8765e3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1242> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_xmm
                    │   ├── Type
                    │   │   ╰── Union [has_dbl_struct]
                    │   ╰── Initializer
                    │       ╰── <1252> FunctionCall [return_has_dbl_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1279> Unary [!]
                    │   │       ╰── <1278>  [&&]
                    │   │           ├── <1266>  [==]
                    │   │           │   ├── <1263> Dot
                    │   │           │   │   ├── <1261> Dot
                    │   │           │   │   │   ├── <1259> Dot
                    │   │           │   │   │   │   ├── <1257> Var [two_xmm]
                    │   │           │   │   │   │   ╰── member1
                    │   │           │   │   │   ╰── member1
                    │   │           │   │   ╰── d1
                    │   │           │   ╰── <1265> Constant Double [+1.2345e3]
                    │   │           ╰── <1276>  [==]
                    │   │               ├── <1273> Dot
                    │   │               │   ├── <1271> Dot
                    │   │               │   │   ├── <1269> Var [two_xmm]
                    │   │               │   │   ╰── member1
                    │   │               │   ╰── member2
                    │   │               ╰── <1275> Constant Double [+6.789e3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1280> Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_arrs
                    │   ├── Type
                    │   │   ╰── Union [two_arrs]
                    │   ╰── Initializer
                    │       ╰── <1290> FunctionCall [return_two_arrs]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1314>  [||]
                    │   │       ├── <1301>  [!=]
                    │   │       │   ├── <1298> Subscript
                    │   │       │   │   ├── <1296> Dot
                    │   │       │   │   │   ├── <1294> Var [two_arrs]
                    │   │       │   │   │   ╰── dbl_arr
                    │   │       │   │   ╰── <1297> Constant Int [0]
                    │   │       │   ╰── <1300> Constant Double [+6.675e1]
                    │   │       ╰── <1313>  [!=]
                    │   │           ├── <1308> Subscript
                    │   │           │   ├── <1306> Dot
                    │   │           │   │   ├── <1304> Var [two_arrs]
                    │   │           │   │   ╰── long_arr
                    │   │           │   ╰── <1307> Constant Int [1]
                    │   │           ╰── <1312> Unary [-]
                    │   │               ╰── <1311> Constant Long [4294967300]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1315> Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── int_and_dbl
                    │   ├── Type
                    │   │   ╰── Union [scalar_and_struct]
                    │   ╰── Initializer
                    │       ╰── <1325> FunctionCall [return_scalar_and_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1349>  [||]
                    │   │       ├── <1338>  [!=]
                    │   │       │   ├── <1333> Dot
                    │   │       │   │   ├── <1331> Dot
                    │   │       │   │   │   ├── <1329> Var [int_and_dbl]
                    │   │       │   │   │   ╰── cfe
                    │   │       │   │   ╰── c
                    │   │       │   ╰── <1337> Unary [-]
                    │   │       │       ╰── <1336> Constant Int [115]
                    │   │       ╰── <1348>  [!=]
                    │   │           ├── <1345> Dot
                    │   │           │   ├── <1343> Dot
                    │   │           │   │   ├── <1341> Var [int_and_dbl]
                    │   │           │   │   ╰── cfe
                    │   │           │   ╰── d
                    │   │           ╰── <1347> Constant Double [+2.2222225e5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1350> Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── dbl_and_int
                    │   ├── Type
                    │   │   ╰── Union [xmm_and_gp]
                    │   ╰── Initializer
                    │       ╰── <1360> FunctionCall [return_xmm_and_gp]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1397>  [||]
                    │   │       ├── <1384>  [||]
                    │   │       │   ├── <1371>  [!=]
                    │   │       │   │   ├── <1366> Dot
                    │   │       │   │   │   ├── <1364> Var [dbl_and_int]
                    │   │       │   │   │   ╰── d
                    │   │       │   │   ╰── <1370> Unary [-]
                    │   │       │   │       ╰── <1369> Constant Double [+5.0000125e4]
                    │   │       │   ╰── <1383>  [!=]
                    │   │       │       ├── <1378> Dot
                    │   │       │       │   ├── <1376> Dot
                    │   │       │       │   │   ├── <1374> Var [dbl_and_int]
                    │   │       │       │   │   ╰── ise
                    │   │       │       │   ╰── d
                    │   │       │       ╰── <1382> Unary [-]
                    │   │       │           ╰── <1381> Constant Double [+5.0000125e4]
                    │   │       ╰── <1396>  [!=]
                    │   │           ├── <1391> Dot
                    │   │           │   ├── <1389> Dot
                    │   │           │   │   ├── <1387> Var [dbl_and_int]
                    │   │           │   │   ╰── ise
                    │   │           │   ╰── i
                    │   │           ╰── <1395> Unary [-]
                    │   │               ╰── <1394> Constant Int [3000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1398> Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── big_union
                    │   ├── Type
                    │   │   ╰── Union [contains_union_array]
                    │   ╰── Initializer
                    │       ╰── <1408> FunctionCall [return_contains_union_array]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1475> Unary [!]
                    │   │       ╰── <1474>  [&&]
                    │   │           ├── <1458>  [&&]
                    │   │           │   ├── <1443>  [&&]
                    │   │           │   │   ├── <1426>  [==]
                    │   │           │   │   │   ├── <1421> Subscript
                    │   │           │   │   │   │   ├── <1419> Dot
                    │   │           │   │   │   │   │   ├── <1417> Subscript
                    │   │           │   │   │   │   │   │   ├── <1415> Dot
                    │   │           │   │   │   │   │   │   │   ├── <1413> Var [big_union]
                    │   │           │   │   │   │   │   │   │   ╰── arr
                    │   │           │   │   │   │   │   │   ╰── <1416> Constant Int [0]
                    │   │           │   │   │   │   │   ╰── d_arr
                    │   │           │   │   │   │   ╰── <1420> Constant Int [0]
                    │   │           │   │   │   ╰── <1425> Unary [-]
                    │   │           │   │   │       ╰── <1424> Constant Double [+2e-1]
                    │   │           │   │   ╰── <1442>  [==]
                    │   │           │   │       ├── <1437> Subscript
                    │   │           │   │       │   ├── <1435> Dot
                    │   │           │   │       │   │   ├── <1433> Subscript
                    │   │           │   │       │   │   │   ├── <1431> Dot
                    │   │           │   │       │   │   │   │   ├── <1429> Var [big_union]
                    │   │           │   │       │   │   │   │   ╰── arr
                    │   │           │   │       │   │   │   ╰── <1432> Constant Int [0]
                    │   │           │   │       │   │   ╰── d_arr
                    │   │           │   │       │   ╰── <1436> Constant Int [1]
                    │   │           │   │       ╰── <1441> Unary [-]
                    │   │           │   │           ╰── <1440> Constant Double [+3e-1]
                    │   │           │   ╰── <1457>  [==]
                    │   │           │       ├── <1454> Subscript
                    │   │           │       │   ├── <1452> Dot
                    │   │           │       │   │   ├── <1450> Subscript
                    │   │           │       │   │   │   ├── <1448> Dot
                    │   │           │       │   │   │   │   ├── <1446> Var [big_union]
                    │   │           │       │   │   │   │   ╰── arr
                    │   │           │       │   │   │   ╰── <1449> Constant Int [1]
                    │   │           │       │   │   ╰── d_arr
                    │   │           │       │   ╰── <1453> Constant Int [0]
                    │   │           │       ╰── <1456> Constant Double [+2e14]
                    │   │           ╰── <1472>  [==]
                    │   │               ├── <1469> Subscript
                    │   │               │   ├── <1467> Dot
                    │   │               │   │   ├── <1465> Subscript
                    │   │               │   │   │   ├── <1463> Dot
                    │   │               │   │   │   │   ├── <1461> Var [big_union]
                    │   │               │   │   │   │   ╰── arr
                    │   │               │   │   │   ╰── <1464> Constant Int [1]
                    │   │               │   │   ╰── d_arr
                    │   │               │   ╰── <1468> Constant Int [1]
                    │   │               ╰── <1471> Constant Double [+5e14]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1476> Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── chars_union
                    │   ├── Type
                    │   │   ╰── Union [lotsa_chars]
                    │   ╰── Initializer
                    │       ╰── <1496> FunctionCall [pass_params_and_return_in_mem]
                    │           ├── <1486> Constant Int [1]
                    │           ├── <1488> Var [int_and_dbl]
                    │           ├── <1490> Var [two_arrs]
                    │           ├── <1491> Constant Int [25]
                    │           ├── <1493> Var [big_union]
                    │           ╰── <1495> Var [oin]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1508>  [!=]
                    │   │       ├── <1505> FunctionCall [strcmp]
                    │   │       │   ├── <1503> Dot
                    │   │       │   │   ├── <1501> Var [chars_union]
                    │   │       │   │   ╰── more_chars
                    │   │       │   ╰── <1504> "ABCDEFGHIJKLMNOPQ"
                    │   │       ╰── <1507> Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1509> Constant Int [8]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s
                    │   ├── Type
                    │   │   ╰── Struct [has_uneven_union]
                    │   ╰── Initializer
                    │       ╰── <1519> FunctionCall [return_struct_with_union]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1544>  [||]
                    │   │       ├── <1530>  [!=]
                    │   │       │   ├── <1525> Dot
                    │   │       │   │   ├── <1523> Var [s]
                    │   │       │   │   ╰── i
                    │   │       │   ╰── <1529> Unary [-]
                    │   │       │       ╰── <1528> Constant Int [8765]
                    │   │       ╰── <1543>  [!=]
                    │   │           ├── <1540> FunctionCall [strcmp]
                    │   │           │   ├── <1538> Dot
                    │   │           │   │   ├── <1536> Dot
                    │   │           │   │   │   ├── <1534> Var [s]
                    │   │           │   │   │   ╰── u
                    │   │           │   │   ╰── arr
                    │   │           │   ╰── <1539> "done"
                    │   │           ╰── <1542> Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1545> Constant Int [9]
                    ╰── Return
                        ╰── <1550> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_member_access_nested_union_access() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        void *malloc(unsigned long size);
        union simple {
            int i;
            long l;
            char c;
            unsigned char uc_arr[3];
        };
        union has_union {
            double d;
            union simple u;
            union simple *u_ptr;
        };
        struct simple_struct {
            long l;
            double d;
            unsigned int u;
        };
        union has_struct {
            long l;
            struct simple_struct s;
        };
        struct struct_with_union {
            union simple u;
            unsigned long ul;
        };
        union complex_union {
            double d_arr[2];
            struct struct_with_union s;
            union has_union *u_ptr;
        };
        
        int test_auto_dot(void) {
            union has_union x;
            x.u.l = 200000u;
            if (x.u.i != 200000) {
                return 0;
            }
            union has_struct y;
            y.s.l = -5555l;
            y.s.d = 10.0;
            y.s.u = 100;
            if (y.l != -5555l) {
                return 0;
            }
            union complex_union z;
            z.s.u.i = 12345;
            z.s.ul = 0;
            if (z.s.u.c != 57) {
                return 0;
            }
            if (z.d_arr[1]) {
                return 0;
            }
            unsigned int *some_int_ptr = &y.s.u;
            union simple *some_union_ptr = &z.s.u;
            if (*some_int_ptr != 100 || (*some_union_ptr).i != 12345) {
                return 0;
            }
            return 1;
        }
        int test_static_dot(void) {
            static union has_union x;
            x.u.l = 200000u;
            if (x.u.i != 200000) {
                return 0;
            }
            static union has_struct y;
            y.s.l = -5555l;
            y.s.d = 10.0;
            y.s.u = 100;
            if (y.l != -5555l) {
                return 0;
            }
            static union complex_union z;
            z.s.u.i = 12345;
            z.s.ul = 0;
            if (z.s.u.c != 57) {
                return 0;
            }
            if (z.d_arr[1]) {
                return 0;
            }
            return 1;
        }
        int test_auto_arrow(void) {
            union simple inner = {100};
            union has_union outer;
            union has_union *outer_ptr = &outer;
            outer_ptr->u_ptr = &inner;
            if (outer_ptr->u_ptr->i != 100) {
                return 0;
            }
            outer_ptr->u_ptr->l = -10;
            if (outer_ptr->u_ptr->c != -10 || outer_ptr->u_ptr->i != -10 || outer_ptr->u_ptr->l != -10) {
                return 0;
            }
            if (outer_ptr->u_ptr->uc_arr[0] != 246 || outer_ptr->u_ptr->uc_arr[1] != 255 || outer_ptr->u_ptr->uc_arr[2] != 255) {
                return 0;
            }
            return 1;
        }
        int test_static_arrow(void) {
            static union simple inner = {100};
            static union has_union outer;
            static union has_union *outer_ptr;
            outer_ptr = &outer;
            outer_ptr->u_ptr = &inner;
            if (outer_ptr->u_ptr->i != 100) {
                return 0;
            }
            outer_ptr->u_ptr->l = -10;
            if (outer_ptr->u_ptr->c != -10 || outer_ptr->u_ptr->i != -10 || outer_ptr->u_ptr->l != -10) {
                return 0;
            }
            if (outer_ptr->u_ptr->uc_arr[0] != 246 || outer_ptr->u_ptr->uc_arr[1] != 255 || outer_ptr->u_ptr->uc_arr[2] != 255) {
                return 0;
            }
            return 1;
        }
        int test_array_of_unions(void) {
            union has_union arr[3];
            arr[0].u.l = -10000;
            arr[1].u.i = 200;
            arr[2].u.c = -120;
            if (arr[0].u.l != -10000 || arr[1].u.c != -56 || arr[2].u.uc_arr[0] != 136) {
                return 0;
            }
            return 1;
        }
        int test_array_of_union_pointers(void) {
            union has_union *ptr_arr[3];
            for (int i = 0; i < 3; i = i + 1) {
                ptr_arr[i] = calloc(1, sizeof(union has_union));
                ptr_arr[i]->u_ptr = calloc(1, sizeof (union simple));
                ptr_arr[i]->u_ptr->l = i;
            }
            if (ptr_arr[0]->u_ptr->l != 0 || ptr_arr[1]->u_ptr->l != 1 || ptr_arr[2]->u_ptr->l != 2) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto_dot()) {
                return 1;
            }
            if (!test_static_dot()) {
                return 2;
            }
            if (!test_auto_arrow()) {
                return 3;
            }
            if (!test_static_arrow()) {
                return 4;
            }
            if (!test_array_of_unions()) {
                return 5;
            }
            if (!test_array_of_union_pointers()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Union [simple]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── uc_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Unsigned Char
            ├── Union [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [simple]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Union [simple]
            ├── Struct [simple_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Union [has_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [simple_struct]
            ├── Struct [struct_with_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [simple]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ul
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Union [complex_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [struct_with_union]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Union [has_union]
            ├── Function [test_auto_dot]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Union [has_union]
            │       ├── <140> Assign [=]
            │       │   ├── <137> Dot
            │       │   │   ├── <135> Dot
            │       │   │   │   ├── <133> Var [x]
            │       │   │   │   ╰── u
            │       │   │   ╰── l
            │       │   ╰── <139> Constant UInt [200000]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <150>  [!=]
            │       │   │       ├── <147> Dot
            │       │   │       │   ├── <145> Dot
            │       │   │       │   │   ├── <143> Var [x]
            │       │   │       │   │   ╰── u
            │       │   │       │   ╰── i
            │       │   │       ╰── <149> Constant Int [200000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <151> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ╰── Type
            │       │       ╰── Union [has_struct]
            │       ├── <171> Assign [=]
            │       │   ├── <166> Dot
            │       │   │   ├── <164> Dot
            │       │   │   │   ├── <162> Var [y]
            │       │   │   │   ╰── s
            │       │   │   ╰── l
            │       │   ╰── <170> Unary [-]
            │       │       ╰── <169> Constant Long [5555]
            │       ├── <181> Assign [=]
            │       │   ├── <178> Dot
            │       │   │   ├── <176> Dot
            │       │   │   │   ├── <174> Var [y]
            │       │   │   │   ╰── s
            │       │   │   ╰── d
            │       │   ╰── <180> Constant Double [+1e1]
            │       ├── <191> Assign [=]
            │       │   ├── <188> Dot
            │       │   │   ├── <186> Dot
            │       │   │   │   ├── <184> Var [y]
            │       │   │   │   ╰── s
            │       │   │   ╰── u
            │       │   ╰── <190> Constant Int [100]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <201>  [!=]
            │       │   │       ├── <196> Dot
            │       │   │       │   ├── <194> Var [y]
            │       │   │       │   ╰── l
            │       │   │       ╰── <200> Unary [-]
            │       │   │           ╰── <199> Constant Long [5555]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <202> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── z
            │       │   ╰── Type
            │       │       ╰── Union [complex_union]
            │       ├── <222> Assign [=]
            │       │   ├── <219> Dot
            │       │   │   ├── <217> Dot
            │       │   │   │   ├── <215> Dot
            │       │   │   │   │   ├── <213> Var [z]
            │       │   │   │   │   ╰── s
            │       │   │   │   ╰── u
            │       │   │   ╰── i
            │       │   ╰── <221> Constant Int [12345]
            │       ├── <232> Assign [=]
            │       │   ├── <229> Dot
            │       │   │   ├── <227> Dot
            │       │   │   │   ├── <225> Var [z]
            │       │   │   │   ╰── s
            │       │   │   ╰── ul
            │       │   ╰── <231> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <244>  [!=]
            │       │   │       ├── <241> Dot
            │       │   │       │   ├── <239> Dot
            │       │   │       │   │   ├── <237> Dot
            │       │   │       │   │   │   ├── <235> Var [z]
            │       │   │       │   │   │   ╰── s
            │       │   │       │   │   ╰── u
            │       │   │       │   ╰── c
            │       │   │       ╰── <243> Constant Int [57]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <245> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <255> Subscript
            │       │   │       ├── <253> Dot
            │       │   │       │   ├── <251> Var [z]
            │       │   │       │   ╰── d_arr
            │       │   │       ╰── <254> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <256> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── some_int_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── <272> AddressOf
            │       │           ╰── <271> Dot
            │       │               ├── <269> Dot
            │       │               │   ├── <267> Var [y]
            │       │               │   ╰── s
            │       │               ╰── u
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── some_union_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Union [simple]
            │       │   ╰── Initializer
            │       │       ╰── <287> AddressOf
            │       │           ╰── <286> Dot
            │       │               ├── <284> Dot
            │       │               │   ├── <282> Var [z]
            │       │               │   ╰── s
            │       │               ╰── u
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <306>  [||]
            │       │   │       ├── <295>  [!=]
            │       │   │       │   ├── <292> Dereference
            │       │   │       │   │   ╰── <291> Var [some_int_ptr]
            │       │   │       │   ╰── <294> Constant Int [100]
            │       │   │       ╰── <305>  [!=]
            │       │   │           ├── <302> Dot
            │       │   │           │   ├── <300> Dereference
            │       │   │           │   │   ╰── <298> Var [some_union_ptr]
            │       │   │           │   ╰── i
            │       │   │           ╰── <304> Constant Int [12345]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <307> Constant Int [0]
            │       ╰── Return
            │           ╰── <312> Constant Int [1]
            ├── Function [test_static_dot]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Union [has_union]
            │       │   ╰── Static
            │       ├── <335> Assign [=]
            │       │   ├── <332> Dot
            │       │   │   ├── <330> Dot
            │       │   │   │   ├── <328> Var [x]
            │       │   │   │   ╰── u
            │       │   │   ╰── l
            │       │   ╰── <334> Constant UInt [200000]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <345>  [!=]
            │       │   │       ├── <342> Dot
            │       │   │       │   ├── <340> Dot
            │       │   │       │   │   ├── <338> Var [x]
            │       │   │       │   │   ╰── u
            │       │   │       │   ╰── i
            │       │   │       ╰── <344> Constant Int [200000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <346> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Union [has_struct]
            │       │   ╰── Static
            │       ├── <367> Assign [=]
            │       │   ├── <362> Dot
            │       │   │   ├── <360> Dot
            │       │   │   │   ├── <358> Var [y]
            │       │   │   │   ╰── s
            │       │   │   ╰── l
            │       │   ╰── <366> Unary [-]
            │       │       ╰── <365> Constant Long [5555]
            │       ├── <377> Assign [=]
            │       │   ├── <374> Dot
            │       │   │   ├── <372> Dot
            │       │   │   │   ├── <370> Var [y]
            │       │   │   │   ╰── s
            │       │   │   ╰── d
            │       │   ╰── <376> Constant Double [+1e1]
            │       ├── <387> Assign [=]
            │       │   ├── <384> Dot
            │       │   │   ├── <382> Dot
            │       │   │   │   ├── <380> Var [y]
            │       │   │   │   ╰── s
            │       │   │   ╰── u
            │       │   ╰── <386> Constant Int [100]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <397>  [!=]
            │       │   │       ├── <392> Dot
            │       │   │       │   ├── <390> Var [y]
            │       │   │       │   ╰── l
            │       │   │       ╰── <396> Unary [-]
            │       │   │           ╰── <395> Constant Long [5555]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <398> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── z
            │       │   ├── Type
            │       │   │   ╰── Union [complex_union]
            │       │   ╰── Static
            │       ├── <419> Assign [=]
            │       │   ├── <416> Dot
            │       │   │   ├── <414> Dot
            │       │   │   │   ├── <412> Dot
            │       │   │   │   │   ├── <410> Var [z]
            │       │   │   │   │   ╰── s
            │       │   │   │   ╰── u
            │       │   │   ╰── i
            │       │   ╰── <418> Constant Int [12345]
            │       ├── <429> Assign [=]
            │       │   ├── <426> Dot
            │       │   │   ├── <424> Dot
            │       │   │   │   ├── <422> Var [z]
            │       │   │   │   ╰── s
            │       │   │   ╰── ul
            │       │   ╰── <428> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <441>  [!=]
            │       │   │       ├── <438> Dot
            │       │   │       │   ├── <436> Dot
            │       │   │       │   │   ├── <434> Dot
            │       │   │       │   │   │   ├── <432> Var [z]
            │       │   │       │   │   │   ╰── s
            │       │   │       │   │   ╰── u
            │       │   │       │   ╰── c
            │       │   │       ╰── <440> Constant Int [57]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <442> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <452> Subscript
            │       │   │       ├── <450> Dot
            │       │   │       │   ├── <448> Var [z]
            │       │   │       │   ╰── d_arr
            │       │   │       ╰── <451> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <453> Constant Int [0]
            │       ╰── Return
            │           ╰── <458> Constant Int [1]
            ├── Function [test_auto_arrow]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── inner
            │       │   ├── Type
            │       │   │   ╰── Union [simple]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <471> Constant Int [100]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer
            │       │   ╰── Type
            │       │       ╰── Union [has_union]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Union [has_union]
            │       │   ╰── Initializer
            │       │       ╰── <488> AddressOf
            │       │           ╰── <487> Var [outer]
            │       ├── <499> Assign [=]
            │       │   ├── <494> Arrow
            │       │   │   ├── <492> Var [outer_ptr]
            │       │   │   ╰── u_ptr
            │       │   ╰── <498> AddressOf
            │       │       ╰── <497> Var [inner]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <509>  [!=]
            │       │   │       ├── <506> Arrow
            │       │   │       │   ├── <504> Arrow
            │       │   │       │   │   ├── <502> Var [outer_ptr]
            │       │   │       │   │   ╰── u_ptr
            │       │   │       │   ╰── i
            │       │   │       ╰── <508> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <510> Constant Int [0]
            │       ├── <525> Assign [=]
            │       │   ├── <520> Arrow
            │       │   │   ├── <518> Arrow
            │       │   │   │   ├── <516> Var [outer_ptr]
            │       │   │   │   ╰── u_ptr
            │       │   │   ╰── l
            │       │   ╰── <524> Unary [-]
            │       │       ╰── <523> Constant Int [10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <563>  [||]
            │       │   │       ├── <550>  [||]
            │       │   │       │   ├── <537>  [!=]
            │       │   │       │   │   ├── <532> Arrow
            │       │   │       │   │   │   ├── <530> Arrow
            │       │   │       │   │   │   │   ├── <528> Var [outer_ptr]
            │       │   │       │   │   │   │   ╰── u_ptr
            │       │   │       │   │   │   ╰── c
            │       │   │       │   │   ╰── <536> Unary [-]
            │       │   │       │   │       ╰── <535> Constant Int [10]
            │       │   │       │   ╰── <549>  [!=]
            │       │   │       │       ├── <544> Arrow
            │       │   │       │       │   ├── <542> Arrow
            │       │   │       │       │   │   ├── <540> Var [outer_ptr]
            │       │   │       │       │   │   ╰── u_ptr
            │       │   │       │       │   ╰── i
            │       │   │       │       ╰── <548> Unary [-]
            │       │   │       │           ╰── <547> Constant Int [10]
            │       │   │       ╰── <562>  [!=]
            │       │   │           ├── <557> Arrow
            │       │   │           │   ├── <555> Arrow
            │       │   │           │   │   ├── <553> Var [outer_ptr]
            │       │   │           │   │   ╰── u_ptr
            │       │   │           │   ╰── l
            │       │   │           ╰── <561> Unary [-]
            │       │   │               ╰── <560> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <564> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <605>  [||]
            │       │   │       ├── <592>  [||]
            │       │   │       │   ├── <579>  [!=]
            │       │   │       │   │   ├── <576> Subscript
            │       │   │       │   │   │   ├── <574> Arrow
            │       │   │       │   │   │   │   ├── <572> Arrow
            │       │   │       │   │   │   │   │   ├── <570> Var [outer_ptr]
            │       │   │       │   │   │   │   │   ╰── u_ptr
            │       │   │       │   │   │   │   ╰── uc_arr
            │       │   │       │   │   │   ╰── <575> Constant Int [0]
            │       │   │       │   │   ╰── <578> Constant Int [246]
            │       │   │       │   ╰── <591>  [!=]
            │       │   │       │       ├── <588> Subscript
            │       │   │       │       │   ├── <586> Arrow
            │       │   │       │       │   │   ├── <584> Arrow
            │       │   │       │       │   │   │   ├── <582> Var [outer_ptr]
            │       │   │       │       │   │   │   ╰── u_ptr
            │       │   │       │       │   │   ╰── uc_arr
            │       │   │       │       │   ╰── <587> Constant Int [1]
            │       │   │       │       ╰── <590> Constant Int [255]
            │       │   │       ╰── <604>  [!=]
            │       │   │           ├── <601> Subscript
            │       │   │           │   ├── <599> Arrow
            │       │   │           │   │   ├── <597> Arrow
            │       │   │           │   │   │   ├── <595> Var [outer_ptr]
            │       │   │           │   │   │   ╰── u_ptr
            │       │   │           │   │   ╰── uc_arr
            │       │   │           │   ╰── <600> Constant Int [2]
            │       │   │           ╰── <603> Constant Int [255]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <606> Constant Int [0]
            │       ╰── Return
            │           ╰── <611> Constant Int [1]
            ├── Function [test_static_arrow]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── inner
            │       │   ├── Type
            │       │   │   ╰── Union [simple]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <625> Constant Int [100]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer
            │       │   ├── Type
            │       │   │   ╰── Union [has_union]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Union [has_union]
            │       │   ╰── Static
            │       ├── <649> Assign [=]
            │       │   ├── <644> Var [outer_ptr]
            │       │   ╰── <648> AddressOf
            │       │       ╰── <647> Var [outer]
            │       ├── <659> Assign [=]
            │       │   ├── <654> Arrow
            │       │   │   ├── <652> Var [outer_ptr]
            │       │   │   ╰── u_ptr
            │       │   ╰── <658> AddressOf
            │       │       ╰── <657> Var [inner]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <669>  [!=]
            │       │   │       ├── <666> Arrow
            │       │   │       │   ├── <664> Arrow
            │       │   │       │   │   ├── <662> Var [outer_ptr]
            │       │   │       │   │   ╰── u_ptr
            │       │   │       │   ╰── i
            │       │   │       ╰── <668> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <670> Constant Int [0]
            │       ├── <685> Assign [=]
            │       │   ├── <680> Arrow
            │       │   │   ├── <678> Arrow
            │       │   │   │   ├── <676> Var [outer_ptr]
            │       │   │   │   ╰── u_ptr
            │       │   │   ╰── l
            │       │   ╰── <684> Unary [-]
            │       │       ╰── <683> Constant Int [10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <723>  [||]
            │       │   │       ├── <710>  [||]
            │       │   │       │   ├── <697>  [!=]
            │       │   │       │   │   ├── <692> Arrow
            │       │   │       │   │   │   ├── <690> Arrow
            │       │   │       │   │   │   │   ├── <688> Var [outer_ptr]
            │       │   │       │   │   │   │   ╰── u_ptr
            │       │   │       │   │   │   ╰── c
            │       │   │       │   │   ╰── <696> Unary [-]
            │       │   │       │   │       ╰── <695> Constant Int [10]
            │       │   │       │   ╰── <709>  [!=]
            │       │   │       │       ├── <704> Arrow
            │       │   │       │       │   ├── <702> Arrow
            │       │   │       │       │   │   ├── <700> Var [outer_ptr]
            │       │   │       │       │   │   ╰── u_ptr
            │       │   │       │       │   ╰── i
            │       │   │       │       ╰── <708> Unary [-]
            │       │   │       │           ╰── <707> Constant Int [10]
            │       │   │       ╰── <722>  [!=]
            │       │   │           ├── <717> Arrow
            │       │   │           │   ├── <715> Arrow
            │       │   │           │   │   ├── <713> Var [outer_ptr]
            │       │   │           │   │   ╰── u_ptr
            │       │   │           │   ╰── l
            │       │   │           ╰── <721> Unary [-]
            │       │   │               ╰── <720> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <724> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <765>  [||]
            │       │   │       ├── <752>  [||]
            │       │   │       │   ├── <739>  [!=]
            │       │   │       │   │   ├── <736> Subscript
            │       │   │       │   │   │   ├── <734> Arrow
            │       │   │       │   │   │   │   ├── <732> Arrow
            │       │   │       │   │   │   │   │   ├── <730> Var [outer_ptr]
            │       │   │       │   │   │   │   │   ╰── u_ptr
            │       │   │       │   │   │   │   ╰── uc_arr
            │       │   │       │   │   │   ╰── <735> Constant Int [0]
            │       │   │       │   │   ╰── <738> Constant Int [246]
            │       │   │       │   ╰── <751>  [!=]
            │       │   │       │       ├── <748> Subscript
            │       │   │       │       │   ├── <746> Arrow
            │       │   │       │       │   │   ├── <744> Arrow
            │       │   │       │       │   │   │   ├── <742> Var [outer_ptr]
            │       │   │       │       │   │   │   ╰── u_ptr
            │       │   │       │       │   │   ╰── uc_arr
            │       │   │       │       │   ╰── <747> Constant Int [1]
            │       │   │       │       ╰── <750> Constant Int [255]
            │       │   │       ╰── <764>  [!=]
            │       │   │           ├── <761> Subscript
            │       │   │           │   ├── <759> Arrow
            │       │   │           │   │   ├── <757> Arrow
            │       │   │           │   │   │   ├── <755> Var [outer_ptr]
            │       │   │           │   │   │   ╰── u_ptr
            │       │   │           │   │   ╰── uc_arr
            │       │   │           │   ╰── <760> Constant Int [2]
            │       │   │           ╰── <763> Constant Int [255]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <766> Constant Int [0]
            │       ╰── Return
            │           ╰── <771> Constant Int [1]
            ├── Function [test_array_of_unions]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ╰── Type
            │       │       ╰── Array
            │       │           ├── 3
            │       │           ╰── Union [has_union]
            │       ├── <800> Assign [=]
            │       │   ├── <795> Dot
            │       │   │   ├── <793> Dot
            │       │   │   │   ├── <791> Subscript
            │       │   │   │   │   ├── <789> Var [arr]
            │       │   │   │   │   ╰── <790> Constant Int [0]
            │       │   │   │   ╰── u
            │       │   │   ╰── l
            │       │   ╰── <799> Unary [-]
            │       │       ╰── <798> Constant Int [10000]
            │       ├── <812> Assign [=]
            │       │   ├── <809> Dot
            │       │   │   ├── <807> Dot
            │       │   │   │   ├── <805> Subscript
            │       │   │   │   │   ├── <803> Var [arr]
            │       │   │   │   │   ╰── <804> Constant Int [1]
            │       │   │   │   ╰── u
            │       │   │   ╰── i
            │       │   ╰── <811> Constant Int [200]
            │       ├── <826> Assign [=]
            │       │   ├── <821> Dot
            │       │   │   ├── <819> Dot
            │       │   │   │   ├── <817> Subscript
            │       │   │   │   │   ├── <815> Var [arr]
            │       │   │   │   │   ╰── <816> Constant Int [2]
            │       │   │   │   ╰── u
            │       │   │   ╰── c
            │       │   ╰── <825> Unary [-]
            │       │       ╰── <824> Constant Int [120]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <870>  [||]
            │       │   │       ├── <855>  [||]
            │       │   │       │   ├── <840>  [!=]
            │       │   │       │   │   ├── <835> Dot
            │       │   │       │   │   │   ├── <833> Dot
            │       │   │       │   │   │   │   ├── <831> Subscript
            │       │   │       │   │   │   │   │   ├── <829> Var [arr]
            │       │   │       │   │   │   │   │   ╰── <830> Constant Int [0]
            │       │   │       │   │   │   │   ╰── u
            │       │   │       │   │   │   ╰── l
            │       │   │       │   │   ╰── <839> Unary [-]
            │       │   │       │   │       ╰── <838> Constant Int [10000]
            │       │   │       │   ╰── <854>  [!=]
            │       │   │       │       ├── <849> Dot
            │       │   │       │       │   ├── <847> Dot
            │       │   │       │       │   │   ├── <845> Subscript
            │       │   │       │       │   │   │   ├── <843> Var [arr]
            │       │   │       │       │   │   │   ╰── <844> Constant Int [1]
            │       │   │       │       │   │   ╰── u
            │       │   │       │       │   ╰── c
            │       │   │       │       ╰── <853> Unary [-]
            │       │   │       │           ╰── <852> Constant Int [56]
            │       │   │       ╰── <869>  [!=]
            │       │   │           ├── <866> Subscript
            │       │   │           │   ├── <864> Dot
            │       │   │           │   │   ├── <862> Dot
            │       │   │           │   │   │   ├── <860> Subscript
            │       │   │           │   │   │   │   ├── <858> Var [arr]
            │       │   │           │   │   │   │   ╰── <859> Constant Int [2]
            │       │   │           │   │   │   ╰── u
            │       │   │           │   │   ╰── uc_arr
            │       │   │           │   ╰── <865> Constant Int [0]
            │       │   │           ╰── <868> Constant Int [136]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <871> Constant Int [0]
            │       ╰── Return
            │           ╰── <876> Constant Int [1]
            ├── Function [test_array_of_union_pointers]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr_arr
            │       │   ╰── Type
            │       │       ╰── Array
            │       │           ├── 3
            │       │           ╰── Pointer
            │       │               ╰── Union [has_union]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <898> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <906>  [<]
            │       │   │       ├── <903> Var [i]
            │       │   │       ╰── <905> Constant Int [3]
            │       │   ├── Condition
            │       │   │   ╰── <915> Assign [=]
            │       │   │       ├── <908> Var [i]
            │       │   │       ╰── <914>  [+]
            │       │   │           ├── <911> Var [i]
            │       │   │           ╰── <913> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── <929> Assign [=]
            │       │       │   ├── <920> Subscript
            │       │       │   │   ├── <917> Var [ptr_arr]
            │       │       │   │   ╰── <919> Var [i]
            │       │       │   ╰── <928> FunctionCall [calloc]
            │       │       │       ├── <923> Constant Int [1]
            │       │       │       ╰── <927> SizeOfType
            │       │       │           ╰── Union [has_union]
            │       │       ├── <946> Assign [=]
            │       │       │   ├── <937> Arrow
            │       │       │   │   ├── <935> Subscript
            │       │       │   │   │   ├── <932> Var [ptr_arr]
            │       │       │   │   │   ╰── <934> Var [i]
            │       │       │   │   ╰── u_ptr
            │       │       │   ╰── <945> FunctionCall [calloc]
            │       │       │       ├── <940> Constant Int [1]
            │       │       │       ╰── <944> SizeOfType
            │       │       │           ╰── Union [simple]
            │       │       ╰── <960> Assign [=]
            │       │           ├── <956> Arrow
            │       │           │   ├── <954> Arrow
            │       │           │   │   ├── <952> Subscript
            │       │           │   │   │   ├── <949> Var [ptr_arr]
            │       │           │   │   │   ╰── <951> Var [i]
            │       │           │   │   ╰── u_ptr
            │       │           │   ╰── l
            │       │           ╰── <959> Var [i]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1001>  [||]
            │       │   │       ├── <988>  [||]
            │       │   │       │   ├── <975>  [!=]
            │       │   │       │   │   ├── <972> Arrow
            │       │   │       │   │   │   ├── <970> Arrow
            │       │   │       │   │   │   │   ├── <968> Subscript
            │       │   │       │   │   │   │   │   ├── <966> Var [ptr_arr]
            │       │   │       │   │   │   │   │   ╰── <967> Constant Int [0]
            │       │   │       │   │   │   │   ╰── u_ptr
            │       │   │       │   │   │   ╰── l
            │       │   │       │   │   ╰── <974> Constant Int [0]
            │       │   │       │   ╰── <987>  [!=]
            │       │   │       │       ├── <984> Arrow
            │       │   │       │       │   ├── <982> Arrow
            │       │   │       │       │   │   ├── <980> Subscript
            │       │   │       │       │   │   │   ├── <978> Var [ptr_arr]
            │       │   │       │       │   │   │   ╰── <979> Constant Int [1]
            │       │   │       │       │   │   ╰── u_ptr
            │       │   │       │       │   ╰── l
            │       │   │       │       ╰── <986> Constant Int [1]
            │       │   │       ╰── <1000>  [!=]
            │       │   │           ├── <997> Arrow
            │       │   │           │   ├── <995> Arrow
            │       │   │           │   │   ├── <993> Subscript
            │       │   │           │   │   │   ├── <991> Var [ptr_arr]
            │       │   │           │   │   │   ╰── <992> Constant Int [2]
            │       │   │           │   │   ╰── u_ptr
            │       │   │           │   ╰── l
            │       │   │           ╰── <999> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1002> Constant Int [0]
            │       ╰── Return
            │           ╰── <1007> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1019> Unary [!]
                    │   │       ╰── <1018> FunctionCall [test_auto_dot]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1020> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1028> Unary [!]
                    │   │       ╰── <1027> FunctionCall [test_static_dot]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1029> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1037> Unary [!]
                    │   │       ╰── <1036> FunctionCall [test_auto_arrow]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1038> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1046> Unary [!]
                    │   │       ╰── <1045> FunctionCall [test_static_arrow]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1047> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1055> Unary [!]
                    │   │       ╰── <1054> FunctionCall [test_array_of_unions]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1056> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1064> Unary [!]
                    │   │       ╰── <1063> FunctionCall [test_array_of_union_pointers]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1065> Constant Int [6]
                    ╰── Return
                        ╰── <1070> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_member_access_static_union_access() {
    let src = r#"
        
        union u {
            unsigned long l;
            double d;
            char arr[8];
        };
        static union u my_union = { 18446744073709551615UL };
        static union u* union_ptr = 0;
        int main(void) {
            union_ptr = &my_union;
            if (my_union.l != 18446744073709551615UL) {
                return 1;
            }
            for (int i = 0; i < 8; i = i + 1) {
                if (my_union.arr[i] != -1) {
                    return 2;
                }
            }
            union_ptr->d = -1.0;
            if (union_ptr->l != 13830554455654793216ul) {
                return 3;
            }
            for (int i = 0; i < 6; i = i + 1) {
                if (my_union.arr[i]) {
                    return 4;
                }
            }
            if (union_ptr->arr[6] != -16) {
                return 5;
            }
            if (union_ptr->arr[7] != -65) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── my_union
            │   ├── Type
            │   │   ╰── Union [u]
            │   ├── Initializer
            │   │   ╰── Compound
            │   │       ╰── <23> Constant ULong [18446744073709551615]
            │   ╰── Static
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── union_ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Union [u]
            │   ├── Initializer
            │   │   ╰── <34> Constant Int [0]
            │   ╰── Static
            ╰── Function [main]
                ╰── Body
                    ├── <48> Assign [=]
                    │   ├── <43> Var [union_ptr]
                    │   ╰── <47> AddressOf
                    │       ╰── <46> Var [my_union]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <56>  [!=]
                    │   │       ├── <53> Dot
                    │   │       │   ├── <51> Var [my_union]
                    │   │       │   ╰── l
                    │   │       ╰── <55> Constant ULong [18446744073709551615]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <57> Constant Int [1]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <65> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <73>  [<]
                    │   │       ├── <70> Var [i]
                    │   │       ╰── <72> Constant Int [8]
                    │   ├── Condition
                    │   │   ╰── <82> Assign [=]
                    │   │       ├── <75> Var [i]
                    │   │       ╰── <81>  [+]
                    │   │           ├── <78> Var [i]
                    │   │           ╰── <80> Constant Int [1]
                    │   ╰── Block
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <94>  [!=]
                    │           │       ├── <89> Subscript
                    │           │       │   ├── <86> Dot
                    │           │       │   │   ├── <84> Var [my_union]
                    │           │       │   │   ╰── arr
                    │           │       │   ╰── <88> Var [i]
                    │           │       ╰── <93> Unary [-]
                    │           │           ╰── <92> Constant Int [1]
                    │           ╰── Then
                    │               ╰── Block
                    │                   ╰── Return
                    │                       ╰── <95> Constant Int [2]
                    ├── <111> Assign [=]
                    │   ├── <106> Arrow
                    │   │   ├── <104> Var [union_ptr]
                    │   │   ╰── d
                    │   ╰── <110> Unary [-]
                    │       ╰── <109> Constant Double [+1e0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <119>  [!=]
                    │   │       ├── <116> Arrow
                    │   │       │   ├── <114> Var [union_ptr]
                    │   │       │   ╰── l
                    │   │       ╰── <118> Constant ULong [13830554455654793216]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <120> Constant Int [3]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <128> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <136>  [<]
                    │   │       ├── <133> Var [i]
                    │   │       ╰── <135> Constant Int [6]
                    │   ├── Condition
                    │   │   ╰── <145> Assign [=]
                    │   │       ├── <138> Var [i]
                    │   │       ╰── <144>  [+]
                    │   │           ├── <141> Var [i]
                    │   │           ╰── <143> Constant Int [1]
                    │   ╰── Block
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <152> Subscript
                    │           │       ├── <149> Dot
                    │           │       │   ├── <147> Var [my_union]
                    │           │       │   ╰── arr
                    │           │       ╰── <151> Var [i]
                    │           ╰── Then
                    │               ╰── Block
                    │                   ╰── Return
                    │                       ╰── <153> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <171>  [!=]
                    │   │       ├── <166> Subscript
                    │   │       │   ├── <164> Arrow
                    │   │       │   │   ├── <162> Var [union_ptr]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <165> Constant Int [6]
                    │   │       ╰── <170> Unary [-]
                    │   │           ╰── <169> Constant Int [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <172> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <187>  [!=]
                    │   │       ├── <182> Subscript
                    │   │       │   ├── <180> Arrow
                    │   │       │   │   ├── <178> Var [union_ptr]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <181> Constant Int [7]
                    │   │       ╰── <186> Unary [-]
                    │   │           ╰── <185> Constant Int [65]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <188> Constant Int [6]
                    ╰── Return
                        ╰── <193> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_member_access_union_init_and_member_access() {
    let src = r#"
        union u {
            double d;
            long l;
            unsigned long ul;
            char c;
        };
        int main(void) {
            union u x = {20};
            if (x.d != 20.0) {
                return 1;
            }
            union u *ptr = &x;
            ptr->l = -1l;
            if (ptr->l != -1l) {
                return 2;
            }
            if (ptr->ul != 18446744073709551615UL) {
                return 3;
            }
            if (x.c != -1) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ul
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <28> Constant Int [20]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <38>  [!=]
                    │   │       ├── <35> Dot
                    │   │       │   ├── <33> Var [x]
                    │   │       │   ╰── d
                    │   │       ╰── <37> Constant Double [+2e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <39> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── <52> AddressOf
                    │           ╰── <51> Var [x]
                    ├── <63> Assign [=]
                    │   ├── <58> Arrow
                    │   │   ├── <56> Var [ptr]
                    │   │   ╰── l
                    │   ╰── <62> Unary [-]
                    │       ╰── <61> Constant Long [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <73>  [!=]
                    │   │       ├── <68> Arrow
                    │   │       │   ├── <66> Var [ptr]
                    │   │       │   ╰── l
                    │   │       ╰── <72> Unary [-]
                    │   │           ╰── <71> Constant Long [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <74> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <85>  [!=]
                    │   │       ├── <82> Arrow
                    │   │       │   ├── <80> Var [ptr]
                    │   │       │   ╰── ul
                    │   │       ╰── <84> Constant ULong [18446744073709551615]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <86> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <99>  [!=]
                    │   │       ├── <94> Dot
                    │   │       │   ├── <92> Var [x]
                    │   │       │   ╰── c
                    │   │       ╰── <98> Unary [-]
                    │   │           ╰── <97> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <100> Constant Int [4]
                    ╰── Return
                        ╰── <105> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_member_access_union_temp_lifetime() {
    let src = r#"
        struct has_char_array {
            char arr[8];
        };
        union has_array {
            long l;
            struct has_char_array s;
        };
        int get_flag(void) {
            static int flag = 0;
            flag = !flag;
            return flag;
        }
        int main(void) {
            union has_array union1 = {9876543210l};
            union has_array union2 = {1234567890l};
            if ((get_flag() ? union1 : union2).s.arr[0] != -22) {
                return 1;
            }
            if ((get_flag() ? union1 : union2).s.arr[0] != -46) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [has_char_array]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Union [has_array]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [has_char_array]
            ├── Function [get_flag]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── flag
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <30> Constant Int [0]
            │       │   ╰── Static
            │       ├── <40> Assign [=]
            │       │   ├── <34> Var [flag]
            │       │   ╰── <39> Unary [!]
            │       │       ╰── <38> Var [flag]
            │       ╰── Return
            │           ╰── <43> Var [flag]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── union1
                    │   ├── Type
                    │   │   ╰── Union [has_array]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <56> Constant Long [9876543210]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── union2
                    │   ├── Type
                    │   │   ╰── Union [has_array]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <64> Constant Long [1234567890]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <86>  [!=]
                    │   │       ├── <81> Subscript
                    │   │       │   ├── <79> Dot
                    │   │       │   │   ├── <77> Dot
                    │   │       │   │   │   ├── <75> Conditional [?]
                    │   │       │   │   │   │   ├── <69> FunctionCall [get_flag]
                    │   │       │   │   │   │   ├── Then
                    │   │       │   │   │   │   │   ╰── <71> Var [union1]
                    │   │       │   │   │   │   ╰── Else
                    │   │       │   │   │   │       ╰── <73> Var [union2]
                    │   │       │   │   │   ╰── s
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <80> Constant Int [0]
                    │   │       ╰── <85> Unary [-]
                    │   │           ╰── <84> Constant Int [22]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <87> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <110>  [!=]
                    │   │       ├── <105> Subscript
                    │   │       │   ├── <103> Dot
                    │   │       │   │   ├── <101> Dot
                    │   │       │   │   │   ├── <99> Conditional [?]
                    │   │       │   │   │   │   ├── <93> FunctionCall [get_flag]
                    │   │       │   │   │   │   ├── Then
                    │   │       │   │   │   │   │   ╰── <95> Var [union1]
                    │   │       │   │   │   │   ╰── Else
                    │   │       │   │   │   │       ╰── <97> Var [union2]
                    │   │       │   │   │   ╰── s
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <104> Constant Int [0]
                    │   │       ╰── <109> Unary [-]
                    │   │           ╰── <108> Constant Int [46]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <111> Constant Int [2]
                    ╰── Return
                        ╰── <116> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_other_features_bitwise_ops_struct_members() {
    let src = r#"
        struct inner {
            char b;
            unsigned int u;
        };
        struct outer {
            unsigned long l;
            struct inner *in_ptr;
            int bar;
            struct inner in;
        };
        int main(void) {
            struct inner i = {'a', 100000u};
            struct outer o = {9223372036854775810ul, &i, 100, {-80, 4294967295U}};
            if ((i.b | o.l) != 9223372036854775907ul) {
                return 1;
            }
            if ((o.bar ^ i.u) != 100036u) {
                return 2;
            }
            if ((o.in_ptr->b & o.in.b) != 32) {
                return 3;
            }
            if ((o.l >> 26) != 137438953472ul) {
                return 4;
            }
            o.bar = 12;
            if ((i.b << o.bar) != 397312) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── in_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── bar
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── in
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Struct [inner]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <42> Constant Int [97]
                    │           ╰── <44> Constant UInt [100000]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── o
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <52> Constant ULong [9223372036854775810]
                    │           ├── <56> AddressOf
                    │           │   ╰── <55> Var [i]
                    │           ├── <58> Constant Int [100]
                    │           ╰── Compound
                    │               ├── <62> Unary [-]
                    │               │   ╰── <61> Constant Int [80]
                    │               ╰── <64> Constant UInt [4294967295]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <82>  [!=]
                    │   │       ├── <79>  [|]
                    │   │       │   ├── <72> Dot
                    │   │       │   │   ├── <70> Var [i]
                    │   │       │   │   ╰── b
                    │   │       │   ╰── <77> Dot
                    │   │       │       ├── <75> Var [o]
                    │   │       │       ╰── l
                    │   │       ╰── <81> Constant ULong [9223372036854775907]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <83> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <101>  [!=]
                    │   │       ├── <98>  [^]
                    │   │       │   ├── <91> Dot
                    │   │       │   │   ├── <89> Var [o]
                    │   │       │   │   ╰── bar
                    │   │       │   ╰── <96> Dot
                    │   │       │       ├── <94> Var [i]
                    │   │       │       ╰── u
                    │   │       ╰── <100> Constant UInt [100036]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <102> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <124>  [!=]
                    │   │       ├── <121>  [&]
                    │   │       │   ├── <112> Arrow
                    │   │       │   │   ├── <110> Dot
                    │   │       │   │   │   ├── <108> Var [o]
                    │   │       │   │   │   ╰── in_ptr
                    │   │       │   │   ╰── b
                    │   │       │   ╰── <119> Dot
                    │   │       │       ├── <117> Dot
                    │   │       │       │   ├── <115> Var [o]
                    │   │       │       │   ╰── in
                    │   │       │       ╰── b
                    │   │       ╰── <123> Constant Int [32]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <125> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <140>  [!=]
                    │   │       ├── <137>  [>>]
                    │   │       │   ├── <133> Dot
                    │   │       │   │   ├── <131> Var [o]
                    │   │       │   │   ╰── l
                    │   │       │   ╰── <135> Constant Int [26]
                    │   │       ╰── <139> Constant ULong [137438953472]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <141> Constant Int [4]
                    ├── <152> Assign [=]
                    │   ├── <149> Dot
                    │   │   ├── <147> Var [o]
                    │   │   ╰── bar
                    │   ╰── <151> Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <167>  [!=]
                    │   │       ├── <164>  [<<]
                    │   │       │   ├── <157> Dot
                    │   │       │   │   ├── <155> Var [i]
                    │   │       │   │   ╰── b
                    │   │       │   ╰── <162> Dot
                    │   │       │       ├── <160> Var [o]
                    │   │       │       ╰── bar
                    │   │       ╰── <166> Constant Int [397312]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <168> Constant Int [5]
                    ╰── Return
                        ╰── <173> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_other_features_compound_assign_struct_members() {
    let src = r#"
        
        struct inner {
            double a;
            char b;
            int *ptr;
        };
        struct outer {
            unsigned long l;
            struct inner *in_ptr;
            struct inner in_array[4];
            int bar;
        };
        int main(void) {
            int i = -1;
            int i2 = -2;
            struct inner si = {150., -12, &i};
            struct outer o = {
                              18446744073709551615UL,
                              &si,
                              {si, {-20e20, 120, 0}, {0, 0, 0}, {1, 1, &i2}},
                              2000};
            si.a += 10;
            if (si.a != 160) {
                return 1;
            }
            o.in_array[0].b -= 460;
            if (o.in_array[0].b != 40) {
                return 2;
            }
            o.in_array[1].a *= -4;
            if (o.in_array[1].a != 80e20) {
                return 4;
            }
            o.in_ptr->a /= 5;
            if (si.a != 32) {
                return 5;
            }
            (&o)->l %= o.bar;
            if (o.l != 1615) {
                return 6;
            }
            o.in_ptr = o.in_array;
            if ((o.in_ptr += 3)->a != 1) {
                return 7;
            }
            if (*o.in_ptr->ptr != -2) {
                return 8;
            }
            o.in_ptr -= 1u;
            if (o.in_ptr->a || o.in_ptr->b || o.in_ptr->ptr) {
                return 9;
            }
            if (si.a != 32 || si.b != -12 || si.ptr != &i) {
                return 10;
            }
            if (o.l != 1615) {
                return 11;
            }
            if (o.in_ptr != &o.in_array[2]) {
                return 12;
            }
            if (o.in_array[0].a != 150. || o.in_array[0].b != 40 ||
                o.in_array[0].ptr != &i) {
                return 13;
            }
            if (o.in_array[1].a != 80e20 || o.in_array[1].b != 120 ||
                o.in_array[1].ptr) {
                return 14;
            }
            if (o.in_array[2].a || o.in_array[2].b || o.in_array[2].ptr) {
                return 15;
            }
            if (o.in_array[3].a != 1 || o.in_array[3].b != 1 ||
                o.in_array[3].ptr != &i2) {
                return 16;
            }
            if (o.bar != 2000) {
                return 17;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── in_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── in_array
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 4
            │   │           ╰── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── bar
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <52> Unary [-]
                    │           ╰── <51> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i2
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <60> Unary [-]
                    │           ╰── <59> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── si
                    │   ├── Type
                    │   │   ╰── Struct [inner]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <67> Constant Double [+1.5e2]
                    │           ├── <71> Unary [-]
                    │           │   ╰── <70> Constant Int [12]
                    │           ╰── <75> AddressOf
                    │               ╰── <74> Var [i]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── o
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <83> Constant ULong [18446744073709551615]
                    │           ├── <87> AddressOf
                    │           │   ╰── <86> Var [si]
                    │           ├── Compound
                    │           │   ├── <90> Var [si]
                    │           │   ├── Compound
                    │           │   │   ├── <94> Unary [-]
                    │           │   │   │   ╰── <93> Constant Double [+2e21]
                    │           │   │   ├── <96> Constant Int [120]
                    │           │   │   ╰── <98> Constant Int [0]
                    │           │   ├── Compound
                    │           │   │   ├── <101> Constant Int [0]
                    │           │   │   ├── <103> Constant Int [0]
                    │           │   │   ╰── <105> Constant Int [0]
                    │           │   ╰── Compound
                    │           │       ├── <108> Constant Int [1]
                    │           │       ├── <110> Constant Int [1]
                    │           │       ╰── <114> AddressOf
                    │           │           ╰── <113> Var [i2]
                    │           ╰── <118> Constant Int [2000]
                    ├── <128> Assign [+=]
                    │   ├── <125> Dot
                    │   │   ├── <123> Var [si]
                    │   │   ╰── a
                    │   ╰── <127> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <136>  [!=]
                    │   │       ├── <133> Dot
                    │   │       │   ├── <131> Var [si]
                    │   │       │   ╰── a
                    │   │       ╰── <135> Constant Int [160]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <137> Constant Int [1]
                    ├── <152> Assign [-=]
                    │   ├── <149> Dot
                    │   │   ├── <147> Subscript
                    │   │   │   ├── <145> Dot
                    │   │   │   │   ├── <143> Var [o]
                    │   │   │   │   ╰── in_array
                    │   │   │   ╰── <146> Constant Int [0]
                    │   │   ╰── b
                    │   ╰── <151> Constant Int [460]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <164>  [!=]
                    │   │       ├── <161> Dot
                    │   │       │   ├── <159> Subscript
                    │   │       │   │   ├── <157> Dot
                    │   │       │   │   │   ├── <155> Var [o]
                    │   │       │   │   │   ╰── in_array
                    │   │       │   │   ╰── <158> Constant Int [0]
                    │   │       │   ╰── b
                    │   │       ╰── <163> Constant Int [40]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <165> Constant Int [2]
                    ├── <182> Assign [*=]
                    │   ├── <177> Dot
                    │   │   ├── <175> Subscript
                    │   │   │   ├── <173> Dot
                    │   │   │   │   ├── <171> Var [o]
                    │   │   │   │   ╰── in_array
                    │   │   │   ╰── <174> Constant Int [1]
                    │   │   ╰── a
                    │   ╰── <181> Unary [-]
                    │       ╰── <180> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <194>  [!=]
                    │   │       ├── <191> Dot
                    │   │       │   ├── <189> Subscript
                    │   │       │   │   ├── <187> Dot
                    │   │       │   │   │   ├── <185> Var [o]
                    │   │       │   │   │   ╰── in_array
                    │   │       │   │   ╰── <188> Constant Int [1]
                    │   │       │   ╰── a
                    │   │       ╰── <193> Constant Double [+8e21]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <195> Constant Int [4]
                    ├── <208> Assign [/=]
                    │   ├── <205> Arrow
                    │   │   ├── <203> Dot
                    │   │   │   ├── <201> Var [o]
                    │   │   │   ╰── in_ptr
                    │   │   ╰── a
                    │   ╰── <207> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <216>  [!=]
                    │   │       ├── <213> Dot
                    │   │       │   ├── <211> Var [si]
                    │   │       │   ╰── a
                    │   │       ╰── <215> Constant Int [32]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <217> Constant Int [5]
                    ├── <233> Assign [%=]
                    │   ├── <227> Arrow
                    │   │   ├── <225> AddressOf
                    │   │   │   ╰── <223> Var [o]
                    │   │   ╰── l
                    │   ╰── <232> Dot
                    │       ├── <230> Var [o]
                    │       ╰── bar
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <241>  [!=]
                    │   │       ├── <238> Dot
                    │   │       │   ├── <236> Var [o]
                    │   │       │   ╰── l
                    │   │       ╰── <240> Constant Int [1615]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <242> Constant Int [6]
                    ├── <256> Assign [=]
                    │   ├── <250> Dot
                    │   │   ├── <248> Var [o]
                    │   │   ╰── in_ptr
                    │   ╰── <255> Dot
                    │       ├── <253> Var [o]
                    │       ╰── in_array
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <270>  [!=]
                    │   │       ├── <267> Arrow
                    │   │       │   ├── <265> Assign [+=]
                    │   │       │   │   ├── <261> Dot
                    │   │       │   │   │   ├── <259> Var [o]
                    │   │       │   │   │   ╰── in_ptr
                    │   │       │   │   ╰── <263> Constant Int [3]
                    │   │       │   ╰── a
                    │   │       ╰── <269> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <271> Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <287>  [!=]
                    │   │       ├── <282> Dereference
                    │   │       │   ╰── <281> Arrow
                    │   │       │       ├── <279> Dot
                    │   │       │       │   ├── <277> Var [o]
                    │   │       │       │   ╰── in_ptr
                    │   │       │       ╰── ptr
                    │   │       ╰── <286> Unary [-]
                    │   │           ╰── <285> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <288> Constant Int [8]
                    ├── <299> Assign [-=]
                    │   ├── <296> Dot
                    │   │   ├── <294> Var [o]
                    │   │   ╰── in_ptr
                    │   ╰── <298> Constant UInt [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <322>  [||]
                    │   │       ├── <314>  [||]
                    │   │       │   ├── <306> Arrow
                    │   │       │   │   ├── <304> Dot
                    │   │       │   │   │   ├── <302> Var [o]
                    │   │       │   │   │   ╰── in_ptr
                    │   │       │   │   ╰── a
                    │   │       │   ╰── <313> Arrow
                    │   │       │       ├── <311> Dot
                    │   │       │       │   ├── <309> Var [o]
                    │   │       │       │   ╰── in_ptr
                    │   │       │       ╰── b
                    │   │       ╰── <321> Arrow
                    │   │           ├── <319> Dot
                    │   │           │   ├── <317> Var [o]
                    │   │           │   ╰── in_ptr
                    │   │           ╰── ptr
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <323> Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <356>  [||]
                    │   │       ├── <345>  [||]
                    │   │       │   ├── <334>  [!=]
                    │   │       │   │   ├── <331> Dot
                    │   │       │   │   │   ├── <329> Var [si]
                    │   │       │   │   │   ╰── a
                    │   │       │   │   ╰── <333> Constant Int [32]
                    │   │       │   ╰── <344>  [!=]
                    │   │       │       ├── <339> Dot
                    │   │       │       │   ├── <337> Var [si]
                    │   │       │       │   ╰── b
                    │   │       │       ╰── <343> Unary [-]
                    │   │       │           ╰── <342> Constant Int [12]
                    │   │       ╰── <355>  [!=]
                    │   │           ├── <350> Dot
                    │   │           │   ├── <348> Var [si]
                    │   │           │   ╰── ptr
                    │   │           ╰── <354> AddressOf
                    │   │               ╰── <353> Var [i]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <357> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <368>  [!=]
                    │   │       ├── <365> Dot
                    │   │       │   ├── <363> Var [o]
                    │   │       │   ╰── l
                    │   │       ╰── <367> Constant Int [1615]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <369> Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <386>  [!=]
                    │   │       ├── <377> Dot
                    │   │       │   ├── <375> Var [o]
                    │   │       │   ╰── in_ptr
                    │   │       ╰── <385> AddressOf
                    │   │           ╰── <384> Subscript
                    │   │               ├── <382> Dot
                    │   │               │   ├── <380> Var [o]
                    │   │               │   ╰── in_array
                    │   │               ╰── <383> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <387> Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <430>  [||]
                    │   │       ├── <415>  [||]
                    │   │       │   ├── <402>  [!=]
                    │   │       │   │   ├── <399> Dot
                    │   │       │   │   │   ├── <397> Subscript
                    │   │       │   │   │   │   ├── <395> Dot
                    │   │       │   │   │   │   │   ├── <393> Var [o]
                    │   │       │   │   │   │   │   ╰── in_array
                    │   │       │   │   │   │   ╰── <396> Constant Int [0]
                    │   │       │   │   │   ╰── a
                    │   │       │   │   ╰── <401> Constant Double [+1.5e2]
                    │   │       │   ╰── <414>  [!=]
                    │   │       │       ├── <411> Dot
                    │   │       │       │   ├── <409> Subscript
                    │   │       │       │   │   ├── <407> Dot
                    │   │       │       │   │   │   ├── <405> Var [o]
                    │   │       │       │   │   │   ╰── in_array
                    │   │       │       │   │   ╰── <408> Constant Int [0]
                    │   │       │       │   ╰── b
                    │   │       │       ╰── <413> Constant Int [40]
                    │   │       ╰── <429>  [!=]
                    │   │           ├── <424> Dot
                    │   │           │   ├── <422> Subscript
                    │   │           │   │   ├── <420> Dot
                    │   │           │   │   │   ├── <418> Var [o]
                    │   │           │   │   │   ╰── in_array
                    │   │           │   │   ╰── <421> Constant Int [0]
                    │   │           │   ╰── ptr
                    │   │           ╰── <428> AddressOf
                    │   │               ╰── <427> Var [i]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <431> Constant Int [13]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <469>  [||]
                    │   │       ├── <459>  [||]
                    │   │       │   ├── <446>  [!=]
                    │   │       │   │   ├── <443> Dot
                    │   │       │   │   │   ├── <441> Subscript
                    │   │       │   │   │   │   ├── <439> Dot
                    │   │       │   │   │   │   │   ├── <437> Var [o]
                    │   │       │   │   │   │   │   ╰── in_array
                    │   │       │   │   │   │   ╰── <440> Constant Int [1]
                    │   │       │   │   │   ╰── a
                    │   │       │   │   ╰── <445> Constant Double [+8e21]
                    │   │       │   ╰── <458>  [!=]
                    │   │       │       ├── <455> Dot
                    │   │       │       │   ├── <453> Subscript
                    │   │       │       │   │   ├── <451> Dot
                    │   │       │       │   │   │   ├── <449> Var [o]
                    │   │       │       │   │   │   ╰── in_array
                    │   │       │       │   │   ╰── <452> Constant Int [1]
                    │   │       │       │   ╰── b
                    │   │       │       ╰── <457> Constant Int [120]
                    │   │       ╰── <468> Dot
                    │   │           ├── <466> Subscript
                    │   │           │   ├── <464> Dot
                    │   │           │   │   ├── <462> Var [o]
                    │   │           │   │   ╰── in_array
                    │   │           │   ╰── <465> Constant Int [1]
                    │   │           ╰── ptr
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <470> Constant Int [14]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <502>  [||]
                    │   │       ├── <492>  [||]
                    │   │       │   ├── <482> Dot
                    │   │       │   │   ├── <480> Subscript
                    │   │       │   │   │   ├── <478> Dot
                    │   │       │   │   │   │   ├── <476> Var [o]
                    │   │       │   │   │   │   ╰── in_array
                    │   │       │   │   │   ╰── <479> Constant Int [2]
                    │   │       │   │   ╰── a
                    │   │       │   ╰── <491> Dot
                    │   │       │       ├── <489> Subscript
                    │   │       │       │   ├── <487> Dot
                    │   │       │       │   │   ├── <485> Var [o]
                    │   │       │       │   │   ╰── in_array
                    │   │       │       │   ╰── <488> Constant Int [2]
                    │   │       │       ╰── b
                    │   │       ╰── <501> Dot
                    │   │           ├── <499> Subscript
                    │   │           │   ├── <497> Dot
                    │   │           │   │   ├── <495> Var [o]
                    │   │           │   │   ╰── in_array
                    │   │           │   ╰── <498> Constant Int [2]
                    │   │           ╰── ptr
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <503> Constant Int [15]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <546>  [||]
                    │   │       ├── <531>  [||]
                    │   │       │   ├── <518>  [!=]
                    │   │       │   │   ├── <515> Dot
                    │   │       │   │   │   ├── <513> Subscript
                    │   │       │   │   │   │   ├── <511> Dot
                    │   │       │   │   │   │   │   ├── <509> Var [o]
                    │   │       │   │   │   │   │   ╰── in_array
                    │   │       │   │   │   │   ╰── <512> Constant Int [3]
                    │   │       │   │   │   ╰── a
                    │   │       │   │   ╰── <517> Constant Int [1]
                    │   │       │   ╰── <530>  [!=]
                    │   │       │       ├── <527> Dot
                    │   │       │       │   ├── <525> Subscript
                    │   │       │       │   │   ├── <523> Dot
                    │   │       │       │   │   │   ├── <521> Var [o]
                    │   │       │       │   │   │   ╰── in_array
                    │   │       │       │   │   ╰── <524> Constant Int [3]
                    │   │       │       │   ╰── b
                    │   │       │       ╰── <529> Constant Int [1]
                    │   │       ╰── <545>  [!=]
                    │   │           ├── <540> Dot
                    │   │           │   ├── <538> Subscript
                    │   │           │   │   ├── <536> Dot
                    │   │           │   │   │   ├── <534> Var [o]
                    │   │           │   │   │   ╰── in_array
                    │   │           │   │   ╰── <537> Constant Int [3]
                    │   │           │   ╰── ptr
                    │   │           ╰── <544> AddressOf
                    │   │               ╰── <543> Var [i2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <547> Constant Int [16]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <558>  [!=]
                    │   │       ├── <555> Dot
                    │   │       │   ├── <553> Var [o]
                    │   │       │   ╰── bar
                    │   │       ╰── <557> Constant Int [2000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <559> Constant Int [17]
                    ╰── Return
                        ╰── <564> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_other_features_decr_arrow_lexing() {
    let src = r#"
        
        int main(void) {
            int arr[3] = {0, 1, 2};
            int *ptr = arr + 2;
            if(ptr-->arr) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <12> Constant Int [0]
                    │           ├── <14> Constant Int [1]
                    │           ╰── <16> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <29>  [+]
                    │           ├── <26> Var [arr]
                    │           ╰── <28> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <39>  [>]
                    │   │       ├── <35> Postfix [--]
                    │   │       │   ╰── <33> Var [ptr]
                    │   │       ╰── <38> Var [arr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <40> Constant Int [0]
                    ╰── Return
                        ╰── <45> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_other_features_incr_struct_members() {
    let src = r#"
        struct inner {
            char c;
            unsigned int u;
        };
        struct outer {
            unsigned long l;
            struct inner *in_ptr;
            int array[3];
        };
        void *calloc(unsigned long nmemb, unsigned long size);
        int main(void) {
            struct outer my_struct = {
                9223372036854775900ul,
                calloc(3, sizeof (struct inner)),
                {-1000, -2000, -3000},
            };
            struct outer *my_struct_ptr = &my_struct;
            if (++my_struct.l != 9223372036854775901ul) {
                return 1;
            }
            if (--my_struct.in_ptr[0].u != 4294967295U) {
                return 2;
            }
            if (my_struct.in_ptr->c++) {
                return 3;
            }
            if (my_struct_ptr->array[1]-- != -2000) {
                return 4;
            }
            if (my_struct_ptr->l != 9223372036854775901ul) {
                return 5;
            }
            if (my_struct.in_ptr->c != 1) {
                return 6;
            }
            if (my_struct_ptr->in_ptr->u != 4294967295U) {
                return 7;
            }
            if (my_struct_ptr->array[1] != -2001) {
                return 8;
            }
            if (my_struct_ptr->array[0] != -1000 || my_struct_ptr->array[2] != -3000) {
                return 9;
            }
            my_struct_ptr->in_ptr[1].c = -1;
            my_struct_ptr->in_ptr[1].u = 1u;
            my_struct_ptr->in_ptr[2].c = 'X';
            my_struct_ptr->in_ptr[2].u = 100000u;
            (++my_struct_ptr->in_ptr)->c--;
            my_struct_ptr->in_ptr++->u++;
            if (my_struct_ptr->in_ptr[-2].c != 1 || my_struct_ptr->in_ptr[-2].u != 4294967295U) {
                return 10;
            }
            if (my_struct_ptr->in_ptr[-1].c != -2) {
                return 11;
            }
            if (my_struct_ptr->in_ptr[-1].u != 2) {
                return 12;
            }
            if (my_struct_ptr->in_ptr[0].c != 'X' || my_struct_ptr->in_ptr[0].u != 100000u) {
                return 13;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── in_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── array
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <54> Constant ULong [9223372036854775900]
                    │           ├── <62> FunctionCall [calloc]
                    │           │   ├── <57> Constant Int [3]
                    │           │   ╰── <61> SizeOfType
                    │           │       ╰── Struct [inner]
                    │           ╰── Compound
                    │               ├── <66> Unary [-]
                    │               │   ╰── <65> Constant Int [1000]
                    │               ├── <70> Unary [-]
                    │               │   ╰── <69> Constant Int [2000]
                    │               ╰── <74> Unary [-]
                    │                   ╰── <73> Constant Int [3000]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── <87> AddressOf
                    │           ╰── <86> Var [my_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <98>  [!=]
                    │   │       ├── <95> Unary [++]
                    │   │       │   ╰── <94> Dot
                    │   │       │       ├── <92> Var [my_struct]
                    │   │       │       ╰── l
                    │   │       ╰── <97> Constant ULong [9223372036854775901]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <99> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <116>  [!=]
                    │   │       ├── <113> Unary [--]
                    │   │       │   ╰── <112> Dot
                    │   │       │       ├── <110> Subscript
                    │   │       │       │   ├── <108> Dot
                    │   │       │       │   │   ├── <106> Var [my_struct]
                    │   │       │       │   │   ╰── in_ptr
                    │   │       │       │   ╰── <109> Constant Int [0]
                    │   │       │       ╰── u
                    │   │       ╰── <115> Constant UInt [4294967295]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <117> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <129> Postfix [++]
                    │   │       ╰── <127> Arrow
                    │   │           ├── <125> Dot
                    │   │           │   ├── <123> Var [my_struct]
                    │   │           │   ╰── in_ptr
                    │   │           ╰── c
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <130> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <147>  [!=]
                    │   │       ├── <142> Postfix [--]
                    │   │       │   ╰── <140> Subscript
                    │   │       │       ├── <138> Arrow
                    │   │       │       │   ├── <136> Var [my_struct_ptr]
                    │   │       │       │   ╰── array
                    │   │       │       ╰── <139> Constant Int [1]
                    │   │       ╰── <146> Unary [-]
                    │   │           ╰── <145> Constant Int [2000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <148> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <159>  [!=]
                    │   │       ├── <156> Arrow
                    │   │       │   ├── <154> Var [my_struct_ptr]
                    │   │       │   ╰── l
                    │   │       ╰── <158> Constant ULong [9223372036854775901]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <160> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <173>  [!=]
                    │   │       ├── <170> Arrow
                    │   │       │   ├── <168> Dot
                    │   │       │   │   ├── <166> Var [my_struct]
                    │   │       │   │   ╰── in_ptr
                    │   │       │   ╰── c
                    │   │       ╰── <172> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <174> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <187>  [!=]
                    │   │       ├── <184> Arrow
                    │   │       │   ├── <182> Arrow
                    │   │       │   │   ├── <180> Var [my_struct_ptr]
                    │   │       │   │   ╰── in_ptr
                    │   │       │   ╰── u
                    │   │       ╰── <186> Constant UInt [4294967295]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <188> Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <203>  [!=]
                    │   │       ├── <198> Subscript
                    │   │       │   ├── <196> Arrow
                    │   │       │   │   ├── <194> Var [my_struct_ptr]
                    │   │       │   │   ╰── array
                    │   │       │   ╰── <197> Constant Int [1]
                    │   │       ╰── <202> Unary [-]
                    │   │           ╰── <201> Constant Int [2001]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <204> Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <232>  [||]
                    │   │       ├── <219>  [!=]
                    │   │       │   ├── <214> Subscript
                    │   │       │   │   ├── <212> Arrow
                    │   │       │   │   │   ├── <210> Var [my_struct_ptr]
                    │   │       │   │   │   ╰── array
                    │   │       │   │   ╰── <213> Constant Int [0]
                    │   │       │   ╰── <218> Unary [-]
                    │   │       │       ╰── <217> Constant Int [1000]
                    │   │       ╰── <231>  [!=]
                    │   │           ├── <226> Subscript
                    │   │           │   ├── <224> Arrow
                    │   │           │   │   ├── <222> Var [my_struct_ptr]
                    │   │           │   │   ╰── array
                    │   │           │   ╰── <225> Constant Int [2]
                    │   │           ╰── <230> Unary [-]
                    │   │               ╰── <229> Constant Int [3000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <233> Constant Int [9]
                    ├── <250> Assign [=]
                    │   ├── <245> Dot
                    │   │   ├── <243> Subscript
                    │   │   │   ├── <241> Arrow
                    │   │   │   │   ├── <239> Var [my_struct_ptr]
                    │   │   │   │   ╰── in_ptr
                    │   │   │   ╰── <242> Constant Int [1]
                    │   │   ╰── c
                    │   ╰── <249> Unary [-]
                    │       ╰── <248> Constant Int [1]
                    ├── <262> Assign [=]
                    │   ├── <259> Dot
                    │   │   ├── <257> Subscript
                    │   │   │   ├── <255> Arrow
                    │   │   │   │   ├── <253> Var [my_struct_ptr]
                    │   │   │   │   ╰── in_ptr
                    │   │   │   ╰── <256> Constant Int [1]
                    │   │   ╰── u
                    │   ╰── <261> Constant UInt [1]
                    ├── <274> Assign [=]
                    │   ├── <271> Dot
                    │   │   ├── <269> Subscript
                    │   │   │   ├── <267> Arrow
                    │   │   │   │   ├── <265> Var [my_struct_ptr]
                    │   │   │   │   ╰── in_ptr
                    │   │   │   ╰── <268> Constant Int [2]
                    │   │   ╰── c
                    │   ╰── <273> Constant Int [88]
                    ├── <286> Assign [=]
                    │   ├── <283> Dot
                    │   │   ├── <281> Subscript
                    │   │   │   ├── <279> Arrow
                    │   │   │   │   ├── <277> Var [my_struct_ptr]
                    │   │   │   │   ╰── in_ptr
                    │   │   │   ╰── <280> Constant Int [2]
                    │   │   ╰── u
                    │   ╰── <285> Constant UInt [100000]
                    ├── <298> Postfix [--]
                    │   ╰── <296> Arrow
                    │       ├── <294> Unary [++]
                    │       │   ╰── <292> Arrow
                    │       │       ├── <290> Var [my_struct_ptr]
                    │       │       ╰── in_ptr
                    │       ╰── c
                    ├── <309> Postfix [++]
                    │   ╰── <307> Arrow
                    │       ├── <305> Postfix [++]
                    │       │   ╰── <303> Arrow
                    │       │       ├── <301> Var [my_struct_ptr]
                    │       │       ╰── in_ptr
                    │       ╰── u
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <338>  [||]
                    │   │       ├── <323>  [!=]
                    │   │       │   ├── <320> Dot
                    │   │       │   │   ├── <318> Subscript
                    │   │       │   │   │   ├── <314> Arrow
                    │   │       │   │   │   │   ├── <312> Var [my_struct_ptr]
                    │   │       │   │   │   │   ╰── in_ptr
                    │   │       │   │   │   ╰── <317> Unary [-]
                    │   │       │   │   │       ╰── <316> Constant Int [2]
                    │   │       │   │   ╰── c
                    │   │       │   ╰── <322> Constant Int [1]
                    │   │       ╰── <337>  [!=]
                    │   │           ├── <334> Dot
                    │   │           │   ├── <332> Subscript
                    │   │           │   │   ├── <328> Arrow
                    │   │           │   │   │   ├── <326> Var [my_struct_ptr]
                    │   │           │   │   │   ╰── in_ptr
                    │   │           │   │   ╰── <331> Unary [-]
                    │   │           │   │       ╰── <330> Constant Int [2]
                    │   │           │   ╰── u
                    │   │           ╰── <336> Constant UInt [4294967295]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <339> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <358>  [!=]
                    │   │       ├── <353> Dot
                    │   │       │   ├── <351> Subscript
                    │   │       │   │   ├── <347> Arrow
                    │   │       │   │   │   ├── <345> Var [my_struct_ptr]
                    │   │       │   │   │   ╰── in_ptr
                    │   │       │   │   ╰── <350> Unary [-]
                    │   │       │   │       ╰── <349> Constant Int [1]
                    │   │       │   ╰── c
                    │   │       ╰── <357> Unary [-]
                    │   │           ╰── <356> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <359> Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <376>  [!=]
                    │   │       ├── <373> Dot
                    │   │       │   ├── <371> Subscript
                    │   │       │   │   ├── <367> Arrow
                    │   │       │   │   │   ├── <365> Var [my_struct_ptr]
                    │   │       │   │   │   ╰── in_ptr
                    │   │       │   │   ╰── <370> Unary [-]
                    │   │       │   │       ╰── <369> Constant Int [1]
                    │   │       │   ╰── u
                    │   │       ╰── <375> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <377> Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <405>  [||]
                    │   │       ├── <392>  [!=]
                    │   │       │   ├── <389> Dot
                    │   │       │   │   ├── <387> Subscript
                    │   │       │   │   │   ├── <385> Arrow
                    │   │       │   │   │   │   ├── <383> Var [my_struct_ptr]
                    │   │       │   │   │   │   ╰── in_ptr
                    │   │       │   │   │   ╰── <386> Constant Int [0]
                    │   │       │   │   ╰── c
                    │   │       │   ╰── <391> Constant Int [88]
                    │   │       ╰── <404>  [!=]
                    │   │           ├── <401> Dot
                    │   │           │   ├── <399> Subscript
                    │   │           │   │   ├── <397> Arrow
                    │   │           │   │   │   ├── <395> Var [my_struct_ptr]
                    │   │           │   │   │   ╰── in_ptr
                    │   │           │   │   ╰── <398> Constant Int [0]
                    │   │           │   ╰── u
                    │   │           ╰── <403> Constant UInt [100000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <406> Constant Int [13]
                    ╰── Return
                        ╰── <411> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_other_features_label_tag_member_namespace() {
    let src = r#"
        int main(void) {
            struct x {
                int x;
            };
            struct x x = {10};
            goto x;
            return 0;
        x:
            return x.x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [x]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── x
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [x]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [10]
                    ├── Goto [x]
                    ├── Return
                    │   ╰── <22> Constant Int [0]
                    ╰── Label [x]
                        ╰── Return
                            ╰── <28> Dot
                                ├── <26> Var [x]
                                ╰── x
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_other_features_struct_decl_in_switch_statement() {
    let src = r#"
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s my_struct = {1, 2};
            int result = 0;
            switch (my_struct.a) {
                struct s {
                    double x;
                    double y;
                    double z;
                };
                struct s my_struct;
                case 1:
                    my_struct.x = 20.0;
                    my_struct.y = 30.0;
                    result = my_struct.x + my_struct.y;
                    break;
                case 2:
                    my_struct.x = 11.;
                    my_struct.y = 12.;
                    result = my_struct.x + my_struct.y;
                    break;
                default:
                    my_struct.x = 0.;
                    my_struct.y = 0.;
                    result = my_struct.x + my_struct.y;
            }
            return result;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <20> Constant Int [1]
                    │           ╰── <22> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <29> Constant Int [0]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <35> Dot
                    │   │       ├── <33> Var [my_struct]
                    │   │       ╰── a
                    │   ╰── Block
                    │       ├── Struct [s]
                    │       │   ├── Field
                    │       │   │   ├── Name
                    │       │   │   │   ╰── x
                    │       │   │   ╰── Type
                    │       │   │       ╰── Double
                    │       │   ├── Field
                    │       │   │   ├── Name
                    │       │   │   │   ╰── y
                    │       │   │   ╰── Type
                    │       │   │       ╰── Double
                    │       │   ╰── Field
                    │       │       ├── Name
                    │       │       │   ╰── z
                    │       │       ╰── Type
                    │       │           ╰── Double
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── my_struct
                    │       │   ╰── Type
                    │       │       ╰── Struct [s]
                    │       ├── Case [1]
                    │       │   ╰── <62> Assign [=]
                    │       │       ├── <59> Dot
                    │       │       │   ├── <57> Var [my_struct]
                    │       │       │   ╰── x
                    │       │       ╰── <61> Constant Double [+2e1]
                    │       ├── <71> Assign [=]
                    │       │   ├── <68> Dot
                    │       │   │   ├── <66> Var [my_struct]
                    │       │   │   ╰── y
                    │       │   ╰── <70> Constant Double [+3e1]
                    │       ├── <86> Assign [=]
                    │       │   ├── <74> Var [result]
                    │       │   ╰── <85>  [+]
                    │       │       ├── <79> Dot
                    │       │       │   ├── <77> Var [my_struct]
                    │       │       │   ╰── x
                    │       │       ╰── <84> Dot
                    │       │           ├── <82> Var [my_struct]
                    │       │           ╰── y
                    │       ├── Break
                    │       ├── Case [2]
                    │       │   ╰── <96> Assign [=]
                    │       │       ├── <93> Dot
                    │       │       │   ├── <91> Var [my_struct]
                    │       │       │   ╰── x
                    │       │       ╰── <95> Constant Double [+1.1e1]
                    │       ├── <105> Assign [=]
                    │       │   ├── <102> Dot
                    │       │   │   ├── <100> Var [my_struct]
                    │       │   │   ╰── y
                    │       │   ╰── <104> Constant Double [+1.2e1]
                    │       ├── <120> Assign [=]
                    │       │   ├── <108> Var [result]
                    │       │   ╰── <119>  [+]
                    │       │       ├── <113> Dot
                    │       │       │   ├── <111> Var [my_struct]
                    │       │       │   ╰── x
                    │       │       ╰── <118> Dot
                    │       │           ├── <116> Var [my_struct]
                    │       │           ╰── y
                    │       ├── Break
                    │       ├── Default
                    │       │   ╰── <129> Assign [=]
                    │       │       ├── <126> Dot
                    │       │       │   ├── <124> Var [my_struct]
                    │       │       │   ╰── x
                    │       │       ╰── <128> Constant Double [+0e0]
                    │       ├── <138> Assign [=]
                    │       │   ├── <135> Dot
                    │       │   │   ├── <133> Var [my_struct]
                    │       │   │   ╰── y
                    │       │   ╰── <137> Constant Double [+0e0]
                    │       ╰── <153> Assign [=]
                    │           ├── <141> Var [result]
                    │           ╰── <152>  [+]
                    │               ├── <146> Dot
                    │               │   ├── <144> Var [my_struct]
                    │               │   ╰── x
                    │               ╰── <151> Dot
                    │                   ├── <149> Var [my_struct]
                    │                   ╰── y
                    ╰── Return
                        ╰── <159> Var [result]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_semantic_analysis_cast_union_to_void() {
    let src = r#"
        union u {
            long l;
            double d;
        };
        int main(void) {
            union u x = {1000};
            (void) x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <20> Constant Int [1000]
                    ├── <28> Cast
                    │   ├── Target
                    │   │   ╰── Void
                    │   ╰── Expression
                    │       ╰── <27> Var [x]
                    ╰── Return
                        ╰── <30> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_semantic_analysis_decl_shadows_decl() {
    let src = r#"
        int main(void) {
            struct tag;
            struct tag *struct_ptr = 0;
            {
                union tag;
                union tag *union_ptr = 0;
                if (struct_ptr || union_ptr) {
                    return 1;
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Struct [tag]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── struct_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [tag]
                    │   ╰── Initializer
                    │       ╰── <14> Constant Int [0]
                    ├── Block
                    │   ├── Union [tag]
                    │   ├── VarDeclaration
                    │   │   ├── Name
                    │   │   │   ╰── union_ptr
                    │   │   ├── Type
                    │   │   │   ╰── Pointer
                    │   │   │       ╰── Union [tag]
                    │   │   ╰── Initializer
                    │   │       ╰── <25> Constant Int [0]
                    │   ╰── If
                    │       ├── Condition
                    │       │   ╰── <33>  [||]
                    │       │       ├── <29> Var [struct_ptr]
                    │       │       ╰── <32> Var [union_ptr]
                    │       ╰── Then
                    │           ╰── Block
                    │               ╰── Return
                    │                   ╰── <34> Constant Int [1]
                    ╰── Return
                        ╰── <41> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_semantic_analysis_incomplete_union_types() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        int puts(char *s);
        union never_used;
        union never_used incomplete_fun(union never_used x);
        int test_block_scope_forward_decl(void) {
            union u;
            union u* u_ptr = 0;
            union u {
                long x;
                char y;
            };
            union u val = { -100000000l };
            u_ptr = &val;
            if (u_ptr->x != -100000000l || u_ptr->y != 0) {
                return 0;
            }
            return 1;
        }
        union opaque_union;
        union opaque_union* use_union_pointers(union opaque_union* param) {
            if (param == 0) {
                puts("null pointer");
            }
            return 0;
        }
        int test_use_incomplete_union_pointers(void) {
            union opaque_union* ptr1 = calloc(1, 4);
            union opaque_union* ptr2 = calloc(1, 4);
            char* ptr1_bytes = (char*)ptr1;
            if (ptr1_bytes[0] || ptr1_bytes[1]) {
                return 0;
            }
            if (ptr1 == 0 || ptr2 == 0 || ptr1 == ptr2) {
                return 0;
            }
            static int flse = 0;
            union opaque_union* ptr3 = flse ? ptr1 : ptr2;
            if (ptr3 != ptr2) {
                return 0;
            }
            if (use_union_pointers(ptr3)) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_block_scope_forward_decl()) {
                return 1;
            }
            if (!test_use_incomplete_union_pointers()) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [puts]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Union [never_used]
            ├── Function [incomplete_fun]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── x
            │           ╰── Type
            │               ╰── Union [never_used]
            ├── Function [test_block_scope_forward_decl]
            │   ╰── Body
            │       ├── Union [u]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── u_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Union [u]
            │       │   ╰── Initializer
            │       │       ╰── <52> Constant Int [0]
            │       ├── Union [u]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Long
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Char
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── val
            │       │   ├── Type
            │       │   │   ╰── Union [u]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <71> Unary [-]
            │       │               ╰── <70> Constant Long [100000000]
            │       ├── <81> Assign [=]
            │       │   ├── <76> Var [u_ptr]
            │       │   ╰── <80> AddressOf
            │       │       ╰── <79> Var [val]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <100>  [||]
            │       │   │       ├── <91>  [!=]
            │       │   │       │   ├── <86> Arrow
            │       │   │       │   │   ├── <84> Var [u_ptr]
            │       │   │       │   │   ╰── x
            │       │   │       │   ╰── <90> Unary [-]
            │       │   │       │       ╰── <89> Constant Long [100000000]
            │       │   │       ╰── <99>  [!=]
            │       │   │           ├── <96> Arrow
            │       │   │           │   ├── <94> Var [u_ptr]
            │       │   │           │   ╰── y
            │       │   │           ╰── <98> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <101> Constant Int [0]
            │       ╰── Return
            │           ╰── <106> Constant Int [1]
            ├── Union [opaque_union]
            ├── Function [use_union_pointers]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── param
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Union [opaque_union]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <130>  [==]
            │       │   │       ├── <127> Var [param]
            │       │   │       ╰── <129> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <133> FunctionCall [puts]
            │       │               ╰── <132> "null pointer"
            │       ╰── Return
            │           ╰── <138> Constant Int [0]
            ├── Function [test_use_incomplete_union_pointers]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr1
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Union [opaque_union]
            │       │   ╰── Initializer
            │       │       ╰── <156> FunctionCall [calloc]
            │       │           ├── <154> Constant Int [1]
            │       │           ╰── <155> Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr2
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Union [opaque_union]
            │       │   ╰── Initializer
            │       │       ╰── <168> FunctionCall [calloc]
            │       │           ├── <166> Constant Int [1]
            │       │           ╰── <167> Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr1_bytes
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <181> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Char
            │       │           ╰── Expression
            │       │               ╰── <180> Var [ptr1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <193>  [||]
            │       │   │       ├── <187> Subscript
            │       │   │       │   ├── <185> Var [ptr1_bytes]
            │       │   │       │   ╰── <186> Constant Int [0]
            │       │   │       ╰── <192> Subscript
            │       │   │           ├── <190> Var [ptr1_bytes]
            │       │   │           ╰── <191> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <194> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <218>  [||]
            │       │   │       ├── <210>  [||]
            │       │   │       │   ├── <203>  [==]
            │       │   │       │   │   ├── <200> Var [ptr1]
            │       │   │       │   │   ╰── <202> Constant Int [0]
            │       │   │       │   ╰── <209>  [==]
            │       │   │       │       ├── <206> Var [ptr2]
            │       │   │       │       ╰── <208> Constant Int [0]
            │       │   │       ╰── <217>  [==]
            │       │   │           ├── <213> Var [ptr1]
            │       │   │           ╰── <216> Var [ptr2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <219> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── flse
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <228> Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr3
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Union [opaque_union]
            │       │   ╰── Initializer
            │       │       ╰── <243> Conditional [?]
            │       │           ├── <238> Var [flse]
            │       │           ├── Then
            │       │           │   ╰── <240> Var [ptr1]
            │       │           ╰── Else
            │       │               ╰── <242> Var [ptr2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <251>  [!=]
            │       │   │       ├── <247> Var [ptr3]
            │       │   │       ╰── <250> Var [ptr2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <252> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <260> FunctionCall [use_union_pointers]
            │       │   │       ╰── <259> Var [ptr3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <261> Constant Int [0]
            │       ╰── Return
            │           ╰── <266> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <278> Unary [!]
                    │   │       ╰── <277> FunctionCall [test_block_scope_forward_decl]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <279> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <287> Unary [!]
                    │   │       ╰── <286> FunctionCall [test_use_incomplete_union_pointers]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <288> Constant Int [2]
                    ╰── Return
                        ╰── <293> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_semantic_analysis_redeclare_union() {
    let src = r#"
        
        int main(void) {
            union u {
                int a;
            };
            union u;
            union u my_union = {1};
            return my_union.a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Union [u]
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── a
                    │       ╰── Type
                    │           ╰── Int
                    ├── Union [u]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_union
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <18> Constant Int [1]
                    ╰── Return
                        ╰── <25> Dot
                            ├── <23> Var [my_union]
                            ╰── a
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_semantic_analysis_struct_shadows_union() {
    let src = r#"
        
        void *malloc(unsigned long size);
        int main(void) {
            struct s {int a; int b;};
            struct s my_struct = {12, 13};
            {
                union u;
                union u *ptr = malloc(4);
                union u {int i; unsigned int u;};
                ptr->i = 10;
                if (ptr->u != 10) {
                    return 1;
                }
                if (my_struct.b != 13) {
                    return 2;
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ╰── Function [main]
                ╰── Body
                    ├── Struct [s]
                    │   ├── Field
                    │   │   ├── Name
                    │   │   │   ╰── a
                    │   │   ╰── Type
                    │   │       ╰── Int
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── b
                    │       ╰── Type
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <31> Constant Int [12]
                    │           ╰── <33> Constant Int [13]
                    ├── Block
                    │   ├── Union [u]
                    │   ├── VarDeclaration
                    │   │   ├── Name
                    │   │   │   ╰── ptr
                    │   │   ├── Type
                    │   │   │   ╰── Pointer
                    │   │   │       ╰── Union [u]
                    │   │   ╰── Initializer
                    │   │       ╰── <47> FunctionCall [malloc]
                    │   │           ╰── <46> Constant Int [4]
                    │   ├── Union [u]
                    │   │   ├── Field
                    │   │   │   ├── Name
                    │   │   │   │   ╰── i
                    │   │   │   ╰── Type
                    │   │   │       ╰── Int
                    │   │   ╰── Field
                    │   │       ├── Name
                    │   │       │   ╰── u
                    │   │       ╰── Type
                    │   │           ╰── Unsigned Int
                    │   ├── <66> Assign [=]
                    │   │   ├── <63> Arrow
                    │   │   │   ├── <61> Var [ptr]
                    │   │   │   ╰── i
                    │   │   ╰── <65> Constant Int [10]
                    │   ├── If
                    │   │   ├── Condition
                    │   │   │   ╰── <74>  [!=]
                    │   │   │       ├── <71> Arrow
                    │   │   │       │   ├── <69> Var [ptr]
                    │   │   │       │   ╰── u
                    │   │   │       ╰── <73> Constant Int [10]
                    │   │   ╰── Then
                    │   │       ╰── Block
                    │   │           ╰── Return
                    │   │               ╰── <75> Constant Int [1]
                    │   ╰── If
                    │       ├── Condition
                    │       │   ╰── <86>  [!=]
                    │       │       ├── <83> Dot
                    │       │       │   ├── <81> Var [my_struct]
                    │       │       │   ╰── b
                    │       │       ╰── <85> Constant Int [13]
                    │       ╰── Then
                    │           ╰── Block
                    │               ╰── Return
                    │                   ╰── <87> Constant Int [2]
                    ╰── Return
                        ╰── <94> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_semantic_analysis_union_members_same_type() {
    let src = r#"
        
        union u {
            int a;
            int b;
        };
        int main(void) {
            union u my_union = {0};
            my_union.a = -1;
            if (my_union.b != -1){
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_union
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <20> Constant Int [0]
                    ├── <32> Assign [=]
                    │   ├── <27> Dot
                    │   │   ├── <25> Var [my_union]
                    │   │   ╰── a
                    │   ╰── <31> Unary [-]
                    │       ╰── <30> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <42>  [!=]
                    │   │       ├── <37> Dot
                    │   │       │   ├── <35> Var [my_union]
                    │   │       │   ╰── b
                    │   │       ╰── <41> Unary [-]
                    │   │           ╰── <40> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <43> Constant Int [1]
                    ╰── Return
                        ╰── <48> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_semantic_analysis_union_namespace() {
    let src = r#"
        int test_shared_member_names(void) {
            union u1 {
                int a;
            };
            union u2 {
                long l;
                double a;
            };
            struct s {
                char a[2];
            };
            union u1 var1 = {10};
            union u2 var2 = {-9223372036854775807l - 1};
            struct s var3 = {{-1, -2}};
            if (var1.a != 10 || var2.a != -0.0 || var3.a[0] != -1) {
                return 0;
            }
            return 1;
        }
        int test_same_name_var_member_and_tag(void) {
            union u {
                int u;
            };
            union u u = {100};
            if (u.u != 100) {
                return 0;
            }
            return 1;
        }
        int f(void) {
            return 10;
        }
        union f {
            int f;
        };
        int test_same_name_fun_and_tag(void) {
            union f x;
            x.f = f();
            if (x.f != 10) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_shared_member_names()) {
                return 1;
            }
            if (!test_same_name_var_member_and_tag()) {
                return 2;
            }
            if (!test_same_name_fun_and_tag()) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [test_shared_member_names]
            │   ╰── Body
            │       ├── Union [u1]
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── a
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── Union [u2]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── l
            │       │   │   ╰── Type
            │       │   │       ╰── Long
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── a
            │       │       ╰── Type
            │       │           ╰── Double
            │       ├── Struct [s]
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── a
            │       │       ╰── Type
            │       │           ╰── Array
            │       │               ├── 2
            │       │               ╰── Char
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── var1
            │       │   ├── Type
            │       │   │   ╰── Union [u1]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <35> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── var2
            │       │   ├── Type
            │       │   │   ╰── Union [u2]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <48>  [-]
            │       │               ├── <45> Unary [-]
            │       │               │   ╰── <44> Constant Long [9223372036854775807]
            │       │               ╰── <47> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── var3
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <58> Unary [-]
            │       │               │   ╰── <57> Constant Int [1]
            │       │               ╰── <62> Unary [-]
            │       │                   ╰── <61> Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <97>  [||]
            │       │   │       ├── <84>  [||]
            │       │   │       │   ├── <73>  [!=]
            │       │   │       │   │   ├── <70> Dot
            │       │   │       │   │   │   ├── <68> Var [var1]
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <72> Constant Int [10]
            │       │   │       │   ╰── <83>  [!=]
            │       │   │       │       ├── <78> Dot
            │       │   │       │       │   ├── <76> Var [var2]
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <82> Unary [-]
            │       │   │       │           ╰── <81> Constant Double [+0e0]
            │       │   │       ╰── <96>  [!=]
            │       │   │           ├── <91> Subscript
            │       │   │           │   ├── <89> Dot
            │       │   │           │   │   ├── <87> Var [var3]
            │       │   │           │   │   ╰── a
            │       │   │           │   ╰── <90> Constant Int [0]
            │       │   │           ╰── <95> Unary [-]
            │       │   │               ╰── <94> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <98> Constant Int [0]
            │       ╰── Return
            │           ╰── <103> Constant Int [1]
            ├── Function [test_same_name_var_member_and_tag]
            │   ╰── Body
            │       ├── Union [u]
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── u
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── u
            │       │   ├── Type
            │       │   │   ╰── Union [u]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <122> Constant Int [100]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <132>  [!=]
            │       │   │       ├── <129> Dot
            │       │   │       │   ├── <127> Var [u]
            │       │   │       │   ╰── u
            │       │   │       ╰── <131> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <133> Constant Int [0]
            │       ╰── Return
            │           ╰── <138> Constant Int [1]
            ├── Function [f]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <147> Constant Int [10]
            ├── Union [f]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── f
            │       ╰── Type
            │           ╰── Int
            ├── Function [test_same_name_fun_and_tag]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Union [f]
            │       ├── <174> Assign [=]
            │       │   ├── <170> Dot
            │       │   │   ├── <168> Var [x]
            │       │   │   ╰── f
            │       │   ╰── <173> FunctionCall [f]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <182>  [!=]
            │       │   │       ├── <179> Dot
            │       │   │       │   ├── <177> Var [x]
            │       │   │       │   ╰── f
            │       │   │       ╰── <181> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <183> Constant Int [0]
            │       ╰── Return
            │           ╰── <188> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <200> Unary [!]
                    │   │       ╰── <199> FunctionCall [test_shared_member_names]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <201> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <209> Unary [!]
                    │   │       ╰── <208> FunctionCall [test_same_name_var_member_and_tag]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <210> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <218> Unary [!]
                    │   │       ╰── <217> FunctionCall [test_same_name_fun_and_tag]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <219> Constant Int [3]
                    ╰── Return
                        ╰── <224> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_semantic_analysis_union_self_pointer() {
    let src = r#"
        union self_ptr {
            union self_ptr *ptr;
            long l;
        };
        int main(void) {
            union self_ptr u = {&u};
            if (&u != u.ptr) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [self_ptr]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Union [self_ptr]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── u
                    │   ├── Type
                    │   │   ╰── Union [self_ptr]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <25> AddressOf
                    │               ╰── <24> Var [u]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37>  [!=]
                    │   │       ├── <31> AddressOf
                    │   │       │   ╰── <30> Var [u]
                    │   │       ╰── <36> Dot
                    │   │           ├── <34> Var [u]
                    │   │           ╰── ptr
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <38> Constant Int [1]
                    ╰── Return
                        ╰── <43> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_semantic_analysis_union_shadows_struct() {
    let src = r#"
        
        struct tag {
            int a;
            int b;
        };
        struct tag global_struct = {1, 2};
        int main(void) {
            union tag {
                int x;
                long y;
            };
            union tag local_union = {100};
            if (global_struct.a != 1) {
                return 1;
            }
            if (local_union.x != 100) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [tag]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global_struct
            │   ├── Type
            │   │   ╰── Struct [tag]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <15> Constant Int [1]
            │           ╰── <17> Constant Int [2]
            ╰── Function [main]
                ╰── Body
                    ├── Union [tag]
                    │   ├── Field
                    │   │   ├── Name
                    │   │   │   ╰── x
                    │   │   ╰── Type
                    │   │       ╰── Int
                    │   ╰── Field
                    │       ├── Name
                    │       │   ╰── y
                    │       ╰── Type
                    │           ╰── Long
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── local_union
                    │   ├── Type
                    │   │   ╰── Union [tag]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <40> Constant Int [100]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <50>  [!=]
                    │   │       ├── <47> Dot
                    │   │       │   ├── <45> Var [global_struct]
                    │   │       │   ╰── a
                    │   │       ╰── <49> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <51> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <62>  [!=]
                    │   │       ├── <59> Dot
                    │   │       │   ├── <57> Var [local_union]
                    │   │       │   ╰── x
                    │   │       ╰── <61> Constant Int [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <63> Constant Int [2]
                    ╰── Return
                        ╰── <68> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_size_and_offset_compare_union_pointers() {
    let src = r#"
        
        struct s {
            int i;
        };
        union u {
            char arr[3];
            double d;
            struct s my_struct;
        };
        union u my_union;
        int main(void) {
            union u* u_ptr = &my_union;
            if ((void*)u_ptr != (void*)&(u_ptr->arr)) {
                return 1;
            }
            if (!((void*)u_ptr == (void*)&(u_ptr->d))) {
                return 2;
            }
            if ((void*)&(u_ptr->my_struct) != u_ptr) {
                return 3;
            }
            if (my_union.arr != (char*)&my_union.d) {
                return 4;
            }
            if (!(&my_union.arr[0] >= (char *) &my_union.my_struct.i)) {
                return 5;
            }
            if (! ((char *) (&u_ptr->d) <= (char *) &u_ptr->my_struct)) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── my_struct
            │       ╰── Type
            │           ╰── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── my_union
            │   ╰── Type
            │       ╰── Union [u]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── u_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── <43> AddressOf
                    │           ╰── <42> Var [my_union]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <63>  [!=]
                    │   │       ├── <51> Cast
                    │   │       │   ├── Target
                    │   │       │   │   ╰── Pointer
                    │   │       │   │       ╰── Void
                    │   │       │   ╰── Expression
                    │   │       │       ╰── <50> Var [u_ptr]
                    │   │       ╰── <62> Cast
                    │   │           ├── Target
                    │   │           │   ╰── Pointer
                    │   │           │       ╰── Void
                    │   │           ╰── Expression
                    │   │               ╰── <61> AddressOf
                    │   │                   ╰── <60> Arrow
                    │   │                       ├── <57> Var [u_ptr]
                    │   │                       ╰── arr
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <64> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <89> Unary [!]
                    │   │       ╰── <88>  [==]
                    │   │           ├── <75> Cast
                    │   │           │   ├── Target
                    │   │           │   │   ╰── Pointer
                    │   │           │   │       ╰── Void
                    │   │           │   ╰── Expression
                    │   │           │       ╰── <74> Var [u_ptr]
                    │   │           ╰── <86> Cast
                    │   │               ├── Target
                    │   │               │   ╰── Pointer
                    │   │               │       ╰── Void
                    │   │               ╰── Expression
                    │   │                   ╰── <85> AddressOf
                    │   │                       ╰── <84> Arrow
                    │   │                           ├── <81> Var [u_ptr]
                    │   │                           ╰── d
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <90> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <108>  [!=]
                    │   │       ├── <104> Cast
                    │   │       │   ├── Target
                    │   │       │   │   ╰── Pointer
                    │   │       │   │       ╰── Void
                    │   │       │   ╰── Expression
                    │   │       │       ╰── <103> AddressOf
                    │   │       │           ╰── <102> Arrow
                    │   │       │               ├── <99> Var [u_ptr]
                    │   │       │               ╰── my_struct
                    │   │       ╰── <107> Var [u_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <109> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <128>  [!=]
                    │   │       ├── <117> Dot
                    │   │       │   ├── <115> Var [my_union]
                    │   │       │   ╰── arr
                    │   │       ╰── <127> Cast
                    │   │           ├── Target
                    │   │           │   ╰── Pointer
                    │   │           │       ╰── Char
                    │   │           ╰── Expression
                    │   │               ╰── <126> AddressOf
                    │   │                   ╰── <125> Dot
                    │   │                       ├── <123> Var [my_union]
                    │   │                       ╰── d
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <129> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <156> Unary [!]
                    │   │       ╰── <155>  [>=]
                    │   │           ├── <141> AddressOf
                    │   │           │   ╰── <140> Subscript
                    │   │           │       ├── <138> Dot
                    │   │           │       │   ├── <136> Var [my_union]
                    │   │           │       │   ╰── arr
                    │   │           │       ╰── <139> Constant Int [0]
                    │   │           ╰── <153> Cast
                    │   │               ├── Target
                    │   │               │   ╰── Pointer
                    │   │               │       ╰── Char
                    │   │               ╰── Expression
                    │   │                   ╰── <152> AddressOf
                    │   │                       ╰── <151> Dot
                    │   │                           ├── <149> Dot
                    │   │                           │   ├── <147> Var [my_union]
                    │   │                           │   ╰── my_struct
                    │   │                           ╰── i
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <157> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <185> Unary [!]
                    │   │       ╰── <184>  [<=]
                    │   │           ├── <172> Cast
                    │   │           │   ├── Target
                    │   │           │   │   ╰── Pointer
                    │   │           │   │       ╰── Char
                    │   │           │   ╰── Expression
                    │   │           │       ╰── <171> AddressOf
                    │   │           │           ╰── <169> Arrow
                    │   │           │               ├── <167> Var [u_ptr]
                    │   │           │               ╰── d
                    │   │           ╰── <182> Cast
                    │   │               ├── Target
                    │   │               │   ╰── Pointer
                    │   │               │       ╰── Char
                    │   │               ╰── Expression
                    │   │                   ╰── <181> AddressOf
                    │   │                       ╰── <180> Arrow
                    │   │                           ├── <178> Var [u_ptr]
                    │   │                           ╰── my_struct
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <186> Constant Int [6]
                    ╰── Return
                        ╰── <191> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_size_and_offset_union_sizes() {
    let src = r#"
        
        struct eight_bytes {
            int i;
            char c;
        };
        struct two_bytes {
            char arr[2];
        };
        struct three_bytes {
            char arr[3];
        };
        struct sixteen_bytes {
            struct eight_bytes eight;
            struct two_bytes two;
            struct three_bytes three;
        };
        struct seven_bytes {
            struct two_bytes two;
            struct three_bytes three;
            struct two_bytes two2;
        };
        struct twentyfour_bytes {
            struct seven_bytes seven;
            struct sixteen_bytes sixteen;
        };
        struct twenty_bytes {
            struct sixteen_bytes sixteen;
            struct two_bytes two;
        };
        struct wonky {
            char arr[19];
        };
        struct internal_padding {
            char c;
            double d;
        };
        struct contains_struct_array {
            char c;
            struct eight_bytes struct_array[3];
        };
        union no_padding {
            char c;
            unsigned char uc;
            signed char arr[11];
        };
        union with_padding {
            signed char arr[10];
            unsigned int ui;
        };
        union contains_array {
            union with_padding arr1[2];
            union no_padding arr[3];
        };
        union double_and_int {
            int i;
            double d;
        };
        union contains_structs {
            struct wonky x;
            struct eight_bytes y;
        };
        int main(void) {
            if (sizeof(union no_padding) != 11) {
                return 1;
            }
            if (sizeof(union with_padding) != 12) {
                return 2;
            }
            if (sizeof(union contains_array) != 36) {
                return 3;
            }
            if (sizeof(union double_and_int) != 8) {
                return 4;
            }
            if (sizeof(union contains_structs) != 20) {
                return 5;
            }
            union no_padding x = { 1 };
            union contains_array y = { {{{-1, 2}} }};
            union contains_structs* get_union_ptr(void);
            if (sizeof x != 11) {
                return 6;
            }
            if (sizeof y.arr1 != 24) {
                return 7;
            }
            if (sizeof * get_union_ptr() != 20) {
                return 8;
            }
            return 0;
        }
        union contains_structs* get_union_ptr(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Char
            ├── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [sixteen_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── eight
            │   │   ╰── Type
            │   │       ╰── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three
            │       ╰── Type
            │           ╰── Struct [three_bytes]
            ├── Struct [seven_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three
            │   │   ╰── Type
            │   │       ╰── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two2
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [twentyfour_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── seven
            │   │   ╰── Type
            │   │       ╰── Struct [seven_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sixteen
            │       ╰── Type
            │           ╰── Struct [sixteen_bytes]
            ├── Struct [twenty_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── sixteen
            │   │   ╰── Type
            │   │       ╰── Struct [sixteen_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [wonky]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Char
            ├── Struct [internal_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [contains_struct_array]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── struct_array
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [eight_bytes]
            ├── Union [no_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── uc
            │   │   ╰── Type
            │   │       ╰── Unsigned Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 11
            │               ╰── Signed Char
            ├── Union [with_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 10
            │   │           ╰── Signed Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ui
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Union [contains_array]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr1
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Union [with_padding]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Union [no_padding]
            ├── Union [double_and_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Union [contains_structs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Struct [wonky]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Struct [eight_bytes]
            ├── Function [main]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <201>  [!=]
            │       │   │       ├── <198> SizeOfType
            │       │   │       │   ╰── Union [no_padding]
            │       │   │       ╰── <200> Constant Int [11]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <202> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <213>  [!=]
            │       │   │       ├── <210> SizeOfType
            │       │   │       │   ╰── Union [with_padding]
            │       │   │       ╰── <212> Constant Int [12]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <214> Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <225>  [!=]
            │       │   │       ├── <222> SizeOfType
            │       │   │       │   ╰── Union [contains_array]
            │       │   │       ╰── <224> Constant Int [36]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <226> Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <237>  [!=]
            │       │   │       ├── <234> SizeOfType
            │       │   │       │   ╰── Union [double_and_int]
            │       │   │       ╰── <236> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <238> Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <249>  [!=]
            │       │   │       ├── <246> SizeOfType
            │       │   │       │   ╰── Union [contains_structs]
            │       │   │       ╰── <248> Constant Int [20]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <250> Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Union [no_padding]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <259> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Union [contains_array]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ╰── Compound
            │       │                   ╰── Compound
            │       │                       ├── <269> Unary [-]
            │       │                       │   ╰── <268> Constant Int [1]
            │       │                       ╰── <271> Constant Int [2]
            │       ├── Function [get_union_ptr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <292>  [!=]
            │       │   │       ├── <289> SizeOfExpr
            │       │   │       │   ╰── <288> Var [x]
            │       │   │       ╰── <291> Constant Int [11]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <293> Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <305>  [!=]
            │       │   │       ├── <302> SizeOfExpr
            │       │   │       │   ╰── <301> Dot
            │       │   │       │       ├── <299> Var [y]
            │       │   │       │       ╰── arr1
            │       │   │       ╰── <304> Constant Int [24]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <306> Constant Int [7]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <317>  [!=]
            │       │   │       ├── <314> SizeOfExpr
            │       │   │       │   ╰── <313> Dereference
            │       │   │       │       ╰── <312> FunctionCall [get_union_ptr]
            │       │   │       ╰── <316> Constant Int [20]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <318> Constant Int [8]
            │       ╰── Return
            │           ╰── <323> Constant Int [0]
            ╰── Function [get_union_ptr]
                ╰── Body
                    ╰── Return
                        ╰── <335> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_union_copy_assign_to_union() {
    let src = r#"
        
        struct s {
            int a;
            int b;
        };
        union u {
            struct s str;
            long l;
            double arr[3];
        };
        int main(void) {
            union u x = { {1, 2} };
            union u y = { {0, 0} };
            y = x;
            if (y.str.a != 1) {
                return 1;
            }
            if (y.str.b != 2) {
                return 2;
            }
            x.arr[0] = -20.;
            x.arr[1] = -30.;
            x.arr[2] = -40.;
            y = x;
            if (y.arr[0] != -20.) {
                return 3;
            }
            if (y.arr[1] != -30.) {
                return 4;
            }
            if (y.arr[2] != -40.) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── str
            │   │   ╰── Type
            │   │       ╰── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <38> Constant Int [1]
                    │               ╰── <40> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Union [u]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <49> Constant Int [0]
                    │               ╰── <51> Constant Int [0]
                    ├── <61> Assign [=]
                    │   ├── <57> Var [y]
                    │   ╰── <60> Var [x]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <71>  [!=]
                    │   │       ├── <68> Dot
                    │   │       │   ├── <66> Dot
                    │   │       │   │   ├── <64> Var [y]
                    │   │       │   │   ╰── str
                    │   │       │   ╰── a
                    │   │       ╰── <70> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <72> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <85>  [!=]
                    │   │       ├── <82> Dot
                    │   │       │   ├── <80> Dot
                    │   │       │   │   ├── <78> Var [y]
                    │   │       │   │   ╰── str
                    │   │       │   ╰── b
                    │   │       ╰── <84> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <86> Constant Int [2]
                    ├── <101> Assign [=]
                    │   ├── <96> Subscript
                    │   │   ├── <94> Dot
                    │   │   │   ├── <92> Var [x]
                    │   │   │   ╰── arr
                    │   │   ╰── <95> Constant Int [0]
                    │   ╰── <100> Unary [-]
                    │       ╰── <99> Constant Double [+2e1]
                    ├── <113> Assign [=]
                    │   ├── <108> Subscript
                    │   │   ├── <106> Dot
                    │   │   │   ├── <104> Var [x]
                    │   │   │   ╰── arr
                    │   │   ╰── <107> Constant Int [1]
                    │   ╰── <112> Unary [-]
                    │       ╰── <111> Constant Double [+3e1]
                    ├── <125> Assign [=]
                    │   ├── <120> Subscript
                    │   │   ├── <118> Dot
                    │   │   │   ├── <116> Var [x]
                    │   │   │   ╰── arr
                    │   │   ╰── <119> Constant Int [2]
                    │   ╰── <124> Unary [-]
                    │       ╰── <123> Constant Double [+4e1]
                    ├── <132> Assign [=]
                    │   ├── <128> Var [y]
                    │   ╰── <131> Var [x]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <144>  [!=]
                    │   │       ├── <139> Subscript
                    │   │       │   ├── <137> Dot
                    │   │       │   │   ├── <135> Var [y]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <138> Constant Int [0]
                    │   │       ╰── <143> Unary [-]
                    │   │           ╰── <142> Constant Double [+2e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <145> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <160>  [!=]
                    │   │       ├── <155> Subscript
                    │   │       │   ├── <153> Dot
                    │   │       │   │   ├── <151> Var [y]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <154> Constant Int [1]
                    │   │       ╰── <159> Unary [-]
                    │   │           ╰── <158> Constant Double [+3e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <161> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <176>  [!=]
                    │   │       ├── <171> Subscript
                    │   │       │   ├── <169> Dot
                    │   │       │   │   ├── <167> Var [y]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <170> Constant Int [2]
                    │   │       ╰── <175> Unary [-]
                    │   │           ╰── <174> Constant Double [+4e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <177> Constant Int [5]
                    ╰── Return
                        ╰── <182> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_union_copy_copy_non_scalar_members() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        void *malloc(unsigned long size);
        union simple {
            int i;
            long l;
            char c;
            unsigned char uc_arr[3];
        };
        union has_union {
            double d;
            union simple u;
            union simple *u_ptr;
        };
        struct simple_struct {
            long l;
            double d;
            unsigned int u;
        };
        union has_struct {
            long l;
            struct simple_struct s;
        };
        struct struct_with_union {
            union simple u;
            unsigned long ul;
        };
        union complex_union {
            double d_arr[2];
            struct struct_with_union s;
            union has_union *u_ptr;
        };
        
        void* calloc(unsigned long nmemb, unsigned long size);
        int test_dot(void) {
            struct struct_with_union my_struct = { {0}, 100000l };
            union simple my_simple_union;
            my_simple_union.l = -1;
            my_struct.u = my_simple_union;
            static union complex_union my_union;
            my_union.s = my_struct;
            if (my_struct.ul != 100000l || my_struct.u.l != -1) {
                return 0;
            }
            if (my_union.s.ul != 100000l) {
                return 0;
            }
            my_union.s.u.i = 45;
            my_simple_union = my_union.s.u;
            if (my_simple_union.i != 45) {
                return 0;
            }
            static struct struct_with_union another_struct;
            another_struct = my_union.s;
            if (another_struct.ul != 100000l || another_struct.u.i != 45) {
                return 0;
            }
            return 1;
        }
        int test_arrow(void) {
            union complex_union* my_union_ptr = calloc(1, sizeof(union complex_union));
            my_union_ptr->u_ptr = calloc(1, sizeof(union has_union));
            my_union_ptr->u_ptr->u_ptr = calloc(1, sizeof(union simple));
            my_union_ptr->u_ptr->u_ptr->i = 987654321;
            union has_union another_union = *my_union_ptr->u_ptr;
            if (another_union.u_ptr != my_union_ptr->u_ptr->u_ptr || another_union.u_ptr->c != my_union_ptr->u_ptr->u_ptr->c) {
                return 0;
            }
            union simple small_union = { -9999 };
            my_union_ptr->u_ptr->u = small_union;
            if (my_union_ptr->u_ptr->u.i != -9999) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_dot()) {
                return 1;
            }
            if (!test_arrow()) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Union [simple]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── uc_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Unsigned Char
            ├── Union [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [simple]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Union [simple]
            ├── Struct [simple_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Union [has_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [simple_struct]
            ├── Struct [struct_with_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [simple]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ul
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Union [complex_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [struct_with_union]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Union [has_union]
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [test_dot]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [struct_with_union]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ╰── <145> Constant Int [0]
            │       │           ╰── <148> Constant Long [100000]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_simple_union
            │       │   ╰── Type
            │       │       ╰── Union [simple]
            │       ├── <165> Assign [=]
            │       │   ├── <160> Dot
            │       │   │   ├── <158> Var [my_simple_union]
            │       │   │   ╰── l
            │       │   ╰── <164> Unary [-]
            │       │       ╰── <163> Constant Int [1]
            │       ├── <174> Assign [=]
            │       │   ├── <170> Dot
            │       │   │   ├── <168> Var [my_struct]
            │       │   │   ╰── u
            │       │   ╰── <173> Var [my_simple_union]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_union
            │       │   ├── Type
            │       │   │   ╰── Union [complex_union]
            │       │   ╰── Static
            │       ├── <189> Assign [=]
            │       │   ├── <185> Dot
            │       │   │   ├── <183> Var [my_union]
            │       │   │   ╰── s
            │       │   ╰── <188> Var [my_struct]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <210>  [||]
            │       │   │       ├── <197>  [!=]
            │       │   │       │   ├── <194> Dot
            │       │   │       │   │   ├── <192> Var [my_struct]
            │       │   │       │   │   ╰── ul
            │       │   │       │   ╰── <196> Constant Long [100000]
            │       │   │       ╰── <209>  [!=]
            │       │   │           ├── <204> Dot
            │       │   │           │   ├── <202> Dot
            │       │   │           │   │   ├── <200> Var [my_struct]
            │       │   │           │   │   ╰── u
            │       │   │           │   ╰── l
            │       │   │           ╰── <208> Unary [-]
            │       │   │               ╰── <207> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <211> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <224>  [!=]
            │       │   │       ├── <221> Dot
            │       │   │       │   ├── <219> Dot
            │       │   │       │   │   ├── <217> Var [my_union]
            │       │   │       │   │   ╰── s
            │       │   │       │   ╰── ul
            │       │   │       ╰── <223> Constant Long [100000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <225> Constant Int [0]
            │       ├── <240> Assign [=]
            │       │   ├── <237> Dot
            │       │   │   ├── <235> Dot
            │       │   │   │   ├── <233> Dot
            │       │   │   │   │   ├── <231> Var [my_union]
            │       │   │   │   │   ╰── s
            │       │   │   │   ╰── u
            │       │   │   ╰── i
            │       │   ╰── <239> Constant Int [45]
            │       ├── <251> Assign [=]
            │       │   ├── <243> Var [my_simple_union]
            │       │   ╰── <250> Dot
            │       │       ├── <248> Dot
            │       │       │   ├── <246> Var [my_union]
            │       │       │   ╰── s
            │       │       ╰── u
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <259>  [!=]
            │       │   │       ├── <256> Dot
            │       │   │       │   ├── <254> Var [my_simple_union]
            │       │   │       │   ╰── i
            │       │   │       ╰── <258> Constant Int [45]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <260> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── another_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [struct_with_union]
            │       │   ╰── Static
            │       ├── <278> Assign [=]
            │       │   ├── <272> Var [another_struct]
            │       │   ╰── <277> Dot
            │       │       ├── <275> Var [my_union]
            │       │       ╰── s
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <297>  [||]
            │       │   │       ├── <286>  [!=]
            │       │   │       │   ├── <283> Dot
            │       │   │       │   │   ├── <281> Var [another_struct]
            │       │   │       │   │   ╰── ul
            │       │   │       │   ╰── <285> Constant Long [100000]
            │       │   │       ╰── <296>  [!=]
            │       │   │           ├── <293> Dot
            │       │   │           │   ├── <291> Dot
            │       │   │           │   │   ├── <289> Var [another_struct]
            │       │   │           │   │   ╰── u
            │       │   │           │   ╰── i
            │       │   │           ╰── <295> Constant Int [45]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <298> Constant Int [0]
            │       ╰── Return
            │           ╰── <303> Constant Int [1]
            ├── Function [test_arrow]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_union_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Union [complex_union]
            │       │   ╰── Initializer
            │       │       ╰── <324> FunctionCall [calloc]
            │       │           ├── <319> Constant Int [1]
            │       │           ╰── <323> SizeOfType
            │       │               ╰── Union [complex_union]
            │       ├── <339> Assign [=]
            │       │   ├── <330> Arrow
            │       │   │   ├── <328> Var [my_union_ptr]
            │       │   │   ╰── u_ptr
            │       │   ╰── <338> FunctionCall [calloc]
            │       │       ├── <333> Constant Int [1]
            │       │       ╰── <337> SizeOfType
            │       │           ╰── Union [has_union]
            │       ├── <355> Assign [=]
            │       │   ├── <346> Arrow
            │       │   │   ├── <344> Arrow
            │       │   │   │   ├── <342> Var [my_union_ptr]
            │       │   │   │   ╰── u_ptr
            │       │   │   ╰── u_ptr
            │       │   ╰── <354> FunctionCall [calloc]
            │       │       ├── <349> Constant Int [1]
            │       │       ╰── <353> SizeOfType
            │       │           ╰── Union [simple]
            │       ├── <367> Assign [=]
            │       │   ├── <364> Arrow
            │       │   │   ├── <362> Arrow
            │       │   │   │   ├── <360> Arrow
            │       │   │   │   │   ├── <358> Var [my_union_ptr]
            │       │   │   │   │   ╰── u_ptr
            │       │   │   │   ╰── u_ptr
            │       │   │   ╰── i
            │       │   ╰── <366> Constant Int [987654321]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── another_union
            │       │   ├── Type
            │       │   │   ╰── Union [has_union]
            │       │   ╰── Initializer
            │       │       ╰── <377> Dereference
            │       │           ╰── <376> Arrow
            │       │               ├── <374> Var [my_union_ptr]
            │       │               ╰── u_ptr
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <409>  [||]
            │       │   │       ├── <391>  [!=]
            │       │   │       │   ├── <383> Dot
            │       │   │       │   │   ├── <381> Var [another_union]
            │       │   │       │   │   ╰── u_ptr
            │       │   │       │   ╰── <390> Arrow
            │       │   │       │       ├── <388> Arrow
            │       │   │       │       │   ├── <386> Var [my_union_ptr]
            │       │   │       │       │   ╰── u_ptr
            │       │   │       │       ╰── u_ptr
            │       │   │       ╰── <408>  [!=]
            │       │   │           ├── <398> Arrow
            │       │   │           │   ├── <396> Dot
            │       │   │           │   │   ├── <394> Var [another_union]
            │       │   │           │   │   ╰── u_ptr
            │       │   │           │   ╰── c
            │       │   │           ╰── <407> Arrow
            │       │   │               ├── <405> Arrow
            │       │   │               │   ├── <403> Arrow
            │       │   │               │   │   ├── <401> Var [my_union_ptr]
            │       │   │               │   │   ╰── u_ptr
            │       │   │               │   ╰── u_ptr
            │       │   │               ╰── c
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <410> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small_union
            │       │   ├── Type
            │       │   │   ╰── Union [simple]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <421> Unary [-]
            │       │               ╰── <420> Constant Int [9999]
            │       ├── <434> Assign [=]
            │       │   ├── <430> Arrow
            │       │   │   ├── <428> Arrow
            │       │   │   │   ├── <426> Var [my_union_ptr]
            │       │   │   │   ╰── u_ptr
            │       │   │   ╰── u
            │       │   ╰── <433> Var [small_union]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <448>  [!=]
            │       │   │       ├── <443> Dot
            │       │   │       │   ├── <441> Arrow
            │       │   │       │   │   ├── <439> Arrow
            │       │   │       │   │   │   ├── <437> Var [my_union_ptr]
            │       │   │       │   │   │   ╰── u_ptr
            │       │   │       │   │   ╰── u
            │       │   │       │   ╰── i
            │       │   │       ╰── <447> Unary [-]
            │       │   │           ╰── <446> Constant Int [9999]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <449> Constant Int [0]
            │       ╰── Return
            │           ╰── <454> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <466> Unary [!]
                    │   │       ╰── <465> FunctionCall [test_dot]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <467> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <475> Unary [!]
                    │   │       ╰── <474> FunctionCall [test_arrow]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <476> Constant Int [2]
                    ╰── Return
                        ╰── <481> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_union_copy_copy_thru_pointer() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        void *malloc(unsigned long size);
        union simple {
            int i;
            long l;
            char c;
            unsigned char uc_arr[3];
        };
        union has_union {
            double d;
            union simple u;
            union simple *u_ptr;
        };
        struct simple_struct {
            long l;
            double d;
            unsigned int u;
        };
        union has_struct {
            long l;
            struct simple_struct s;
        };
        struct struct_with_union {
            union simple u;
            unsigned long ul;
        };
        union complex_union {
            double d_arr[2];
            struct struct_with_union s;
            union has_union *u_ptr;
        };
        
        int strcmp(char* s1, char* s2);
        int test_copy_to_pointer(void) {
            union simple y;
            y.l = -20;
            union simple* x = malloc(sizeof(union simple));
            *x = y;
            if (x->l != -20 || x->i != -20 || x->uc_arr[0] != 236 || x->uc_arr[1] != 255 || x->uc_arr[2] != 255) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_pointer(void) {
            struct simple_struct my_struct = { 8223372036854775807l, 20e3, 2147483650u };
            static union has_struct my_union;
            my_union.s = my_struct;
            union has_struct* union_ptr;
            union_ptr = &my_union;
            union has_struct another_union = *union_ptr;
            if (another_union.s.l != 8223372036854775807l || another_union.s.d != 20e3 || another_union.s.u != 2147483650u) {
                return 0;
            }
            return 1;
        }
        union with_padding {
            char arr[10];
            unsigned int ui;
        };
        int test_copy_array_members(void) {
            union with_padding union_array[3] = { {"foobar"}, {"hello"}, {"itsaunion"} };
            union with_padding another_union = union_array[0];
            union with_padding yet_another_union = { "blahblah" };
            union_array[2] = yet_another_union;
            if (strcmp(union_array[0].arr, "foobar") || strcmp(union_array[1].arr, "hello") || strcmp(union_array[2].arr, "blahblah")) {
                return 0;
            }
            if (strcmp(another_union.arr, "foobar")) {
                return 0;
            }
            if (strcmp(yet_another_union.arr, "blahblah")) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_copy_to_pointer()){
                return 1;
            }
            if (!test_copy_from_pointer()) {
                return 2;
            }
            if (!test_copy_array_members()) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Union [simple]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── uc_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Unsigned Char
            ├── Union [has_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [simple]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Union [simple]
            ├── Struct [simple_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Union [has_struct]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [simple_struct]
            ├── Struct [struct_with_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── u
            │   │   ╰── Type
            │   │       ╰── Union [simple]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ul
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Union [complex_union]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [struct_with_union]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── u_ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Union [has_union]
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [test_copy_to_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ╰── Type
            │       │       ╰── Union [simple]
            │       ├── <156> Assign [=]
            │       │   ├── <151> Dot
            │       │   │   ├── <149> Var [y]
            │       │   │   ╰── l
            │       │   ╰── <155> Unary [-]
            │       │       ╰── <154> Constant Int [20]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Union [simple]
            │       │   ╰── Initializer
            │       │       ╰── <169> FunctionCall [malloc]
            │       │           ╰── <168> SizeOfType
            │       │               ╰── Union [simple]
            │       ├── <178> Assign [=]
            │       │   ├── <174> Dereference
            │       │   │   ╰── <173> Var [x]
            │       │   ╰── <177> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <232>  [||]
            │       │   │       ├── <221>  [||]
            │       │   │       │   ├── <210>  [||]
            │       │   │       │   │   ├── <199>  [||]
            │       │   │       │   │   │   ├── <188>  [!=]
            │       │   │       │   │   │   │   ├── <183> Arrow
            │       │   │       │   │   │   │   │   ├── <181> Var [x]
            │       │   │       │   │   │   │   │   ╰── l
            │       │   │       │   │   │   │   ╰── <187> Unary [-]
            │       │   │       │   │   │   │       ╰── <186> Constant Int [20]
            │       │   │       │   │   │   ╰── <198>  [!=]
            │       │   │       │   │   │       ├── <193> Arrow
            │       │   │       │   │   │       │   ├── <191> Var [x]
            │       │   │       │   │   │       │   ╰── i
            │       │   │       │   │   │       ╰── <197> Unary [-]
            │       │   │       │   │   │           ╰── <196> Constant Int [20]
            │       │   │       │   │   ╰── <209>  [!=]
            │       │   │       │   │       ├── <206> Subscript
            │       │   │       │   │       │   ├── <204> Arrow
            │       │   │       │   │       │   │   ├── <202> Var [x]
            │       │   │       │   │       │   │   ╰── uc_arr
            │       │   │       │   │       │   ╰── <205> Constant Int [0]
            │       │   │       │   │       ╰── <208> Constant Int [236]
            │       │   │       │   ╰── <220>  [!=]
            │       │   │       │       ├── <217> Subscript
            │       │   │       │       │   ├── <215> Arrow
            │       │   │       │       │   │   ├── <213> Var [x]
            │       │   │       │       │   │   ╰── uc_arr
            │       │   │       │       │   ╰── <216> Constant Int [1]
            │       │   │       │       ╰── <219> Constant Int [255]
            │       │   │       ╰── <231>  [!=]
            │       │   │           ├── <228> Subscript
            │       │   │           │   ├── <226> Arrow
            │       │   │           │   │   ├── <224> Var [x]
            │       │   │           │   │   ╰── uc_arr
            │       │   │           │   ╰── <227> Constant Int [2]
            │       │   │           ╰── <230> Constant Int [255]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <233> Constant Int [0]
            │       ╰── Return
            │           ╰── <238> Constant Int [1]
            ├── Function [test_copy_from_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [simple_struct]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <251> Constant Long [8223372036854775807]
            │       │           ├── <253> Constant Double [+2e4]
            │       │           ╰── <255> Constant UInt [2147483650]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_union
            │       │   ├── Type
            │       │   │   ╰── Union [has_struct]
            │       │   ╰── Static
            │       ├── <272> Assign [=]
            │       │   ├── <268> Dot
            │       │   │   ├── <266> Var [my_union]
            │       │   │   ╰── s
            │       │   ╰── <271> Var [my_struct]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── union_ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Union [has_struct]
            │       ├── <287> Assign [=]
            │       │   ├── <282> Var [union_ptr]
            │       │   ╰── <286> AddressOf
            │       │       ╰── <285> Var [my_union]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── another_union
            │       │   ├── Type
            │       │   │   ╰── Union [has_struct]
            │       │   ╰── Initializer
            │       │       ╰── <295> Dereference
            │       │           ╰── <294> Var [union_ptr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <328>  [||]
            │       │   │       ├── <317>  [||]
            │       │   │       │   ├── <306>  [!=]
            │       │   │       │   │   ├── <303> Dot
            │       │   │       │   │   │   ├── <301> Dot
            │       │   │       │   │   │   │   ├── <299> Var [another_union]
            │       │   │       │   │   │   │   ╰── s
            │       │   │       │   │   │   ╰── l
            │       │   │       │   │   ╰── <305> Constant Long [8223372036854775807]
            │       │   │       │   ╰── <316>  [!=]
            │       │   │       │       ├── <313> Dot
            │       │   │       │       │   ├── <311> Dot
            │       │   │       │       │   │   ├── <309> Var [another_union]
            │       │   │       │       │   │   ╰── s
            │       │   │       │       │   ╰── d
            │       │   │       │       ╰── <315> Constant Double [+2e4]
            │       │   │       ╰── <327>  [!=]
            │       │   │           ├── <324> Dot
            │       │   │           │   ├── <322> Dot
            │       │   │           │   │   ├── <320> Var [another_union]
            │       │   │           │   │   ╰── s
            │       │   │           │   ╰── u
            │       │   │           ╰── <326> Constant UInt [2147483650]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <329> Constant Int [0]
            │       ╰── Return
            │           ╰── <334> Constant Int [1]
            ├── Union [with_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 10
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ui
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Function [test_copy_array_members]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── union_array
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Union [with_padding]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ╰── <363> "foobar"
            │       │           ├── Compound
            │       │           │   ╰── <366> "hello"
            │       │           ╰── Compound
            │       │               ╰── <369> "itsaunion"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── another_union
            │       │   ├── Type
            │       │   │   ╰── Union [with_padding]
            │       │   ╰── Initializer
            │       │       ╰── <381> Subscript
            │       │           ├── <379> Var [union_array]
            │       │           ╰── <380> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── yet_another_union
            │       │   ├── Type
            │       │   │   ╰── Union [with_padding]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <388> "blahblah"
            │       ├── <399> Assign [=]
            │       │   ├── <395> Subscript
            │       │   │   ├── <393> Var [union_array]
            │       │   │   ╰── <394> Constant Int [2]
            │       │   ╰── <398> Var [yet_another_union]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <431>  [||]
            │       │   │       ├── <420>  [||]
            │       │   │       │   ├── <409> FunctionCall [strcmp]
            │       │   │       │   │   ├── <407> Dot
            │       │   │       │   │   │   ├── <405> Subscript
            │       │   │       │   │   │   │   ├── <403> Var [union_array]
            │       │   │       │   │   │   │   ╰── <404> Constant Int [0]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <408> "foobar"
            │       │   │       │   ╰── <419> FunctionCall [strcmp]
            │       │   │       │       ├── <417> Dot
            │       │   │       │       │   ├── <415> Subscript
            │       │   │       │       │   │   ├── <413> Var [union_array]
            │       │   │       │       │   │   ╰── <414> Constant Int [1]
            │       │   │       │       │   ╰── arr
            │       │   │       │       ╰── <418> "hello"
            │       │   │       ╰── <430> FunctionCall [strcmp]
            │       │   │           ├── <428> Dot
            │       │   │           │   ├── <426> Subscript
            │       │   │           │   │   ├── <424> Var [union_array]
            │       │   │           │   │   ╰── <425> Constant Int [2]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <429> "blahblah"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <432> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <443> FunctionCall [strcmp]
            │       │   │       ├── <441> Dot
            │       │   │       │   ├── <439> Var [another_union]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <442> "foobar"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <444> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <455> FunctionCall [strcmp]
            │       │   │       ├── <453> Dot
            │       │   │       │   ├── <451> Var [yet_another_union]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <454> "blahblah"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <456> Constant Int [0]
            │       ╰── Return
            │           ╰── <461> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <473> Unary [!]
                    │   │       ╰── <472> FunctionCall [test_copy_to_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <474> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <482> Unary [!]
                    │   │       ╰── <481> FunctionCall [test_copy_from_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <483> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <491> Unary [!]
                    │   │       ╰── <490> FunctionCall [test_copy_array_members]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <492> Constant Int [3]
                    ╰── Return
                        ╰── <497> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_extra_credit_union_copy_unions_in_conditionals() {
    let src = r#"
        union u {
            long l;
            int i;
            char c;
        };
        int choose_union(int flag) {
            union u one;
            union u two;
            one.l = -1;
            two.i = 100;
            return (flag ? one : two).c;
        }
        int main(void) {
            if (choose_union(1) != -1) {
                return 1;
            }
            if (choose_union(0) != 100) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Union [u]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Function [choose_union]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── flag
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── one
            │       │   ╰── Type
            │       │       ╰── Union [u]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two
            │       │   ╰── Type
            │       │       ╰── Union [u]
            │       ├── <41> Assign [=]
            │       │   ├── <36> Dot
            │       │   │   ├── <34> Var [one]
            │       │   │   ╰── l
            │       │   ╰── <40> Unary [-]
            │       │       ╰── <39> Constant Int [1]
            │       ├── <49> Assign [=]
            │       │   ├── <46> Dot
            │       │   │   ├── <44> Var [two]
            │       │   │   ╰── i
            │       │   ╰── <48> Constant Int [100]
            │       ╰── Return
            │           ╰── <60> Dot
            │               ├── <58> Conditional [?]
            │               │   ├── <52> Var [flag]
            │               │   ├── Then
            │               │   │   ╰── <54> Var [one]
            │               │   ╰── Else
            │               │       ╰── <56> Var [two]
            │               ╰── c
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <76>  [!=]
                    │   │       ├── <71> FunctionCall [choose_union]
                    │   │       │   ╰── <70> Constant Int [1]
                    │   │       ╰── <75> Unary [-]
                    │   │           ╰── <74> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <77> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <87>  [!=]
                    │   │       ├── <84> FunctionCall [choose_union]
                    │   │       │   ╰── <83> Constant Int [0]
                    │   │       ╰── <86> Constant Int [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <88> Constant Int [2]
                    ╰── Return
                        ╰── <93> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_array_of_structs() {
    let src = r#"
        struct inner {
            long l;
            char arr[2];
        };
        struct outer {
            char a;
            struct inner b;
        };
        int validate_struct_array(struct outer *struct_array);
        
        int validate_struct_array(struct outer *struct_array) {
            for (int i = 0; i < 3; i = i + 1) {
                if (struct_array[i].a != i * 2)
                    return 0;
                if (struct_array[i].b.l != i * 3)
                    return 0;
                if (struct_array[i].b.arr[0] != i * 4)
                    return 0;
                if (struct_array[i].b.arr[1] != i * 5)
                    return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Char
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [validate_struct_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── struct_array
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ╰── Function [validate_struct_array]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── struct_array
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Struct [outer]
                ╰── Body
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <51> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <59>  [<]
                    │   │       ├── <56> Var [i]
                    │   │       ╰── <58> Constant Int [3]
                    │   ├── Condition
                    │   │   ╰── <68> Assign [=]
                    │   │       ├── <61> Var [i]
                    │   │       ╰── <67>  [+]
                    │   │           ├── <64> Var [i]
                    │   │           ╰── <66> Constant Int [1]
                    │   ╰── Block
                    │       ├── If
                    │       │   ├── Condition
                    │       │   │   ╰── <82>  [!=]
                    │       │   │       ├── <75> Dot
                    │       │   │       │   ├── <73> Subscript
                    │       │   │       │   │   ├── <70> Var [struct_array]
                    │       │   │       │   │   ╰── <72> Var [i]
                    │       │   │       │   ╰── a
                    │       │   │       ╰── <81>  [*]
                    │       │   │           ├── <78> Var [i]
                    │       │   │           ╰── <80> Constant Int [2]
                    │       │   ╰── Then
                    │       │       ╰── Return
                    │       │           ╰── <83> Constant Int [0]
                    │       ├── If
                    │       │   ├── Condition
                    │       │   │   ╰── <101>  [!=]
                    │       │   │       ├── <94> Dot
                    │       │   │       │   ├── <92> Dot
                    │       │   │       │   │   ├── <90> Subscript
                    │       │   │       │   │   │   ├── <87> Var [struct_array]
                    │       │   │       │   │   │   ╰── <89> Var [i]
                    │       │   │       │   │   ╰── b
                    │       │   │       │   ╰── l
                    │       │   │       ╰── <100>  [*]
                    │       │   │           ├── <97> Var [i]
                    │       │   │           ╰── <99> Constant Int [3]
                    │       │   ╰── Then
                    │       │       ╰── Return
                    │       │           ╰── <102> Constant Int [0]
                    │       ├── If
                    │       │   ├── Condition
                    │       │   │   ╰── <122>  [!=]
                    │       │   │       ├── <115> Subscript
                    │       │   │       │   ├── <113> Dot
                    │       │   │       │   │   ├── <111> Dot
                    │       │   │       │   │   │   ├── <109> Subscript
                    │       │   │       │   │   │   │   ├── <106> Var [struct_array]
                    │       │   │       │   │   │   │   ╰── <108> Var [i]
                    │       │   │       │   │   │   ╰── b
                    │       │   │       │   │   ╰── arr
                    │       │   │       │   ╰── <114> Constant Int [0]
                    │       │   │       ╰── <121>  [*]
                    │       │   │           ├── <118> Var [i]
                    │       │   │           ╰── <120> Constant Int [4]
                    │       │   ╰── Then
                    │       │       ╰── Return
                    │       │           ╰── <123> Constant Int [0]
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <143>  [!=]
                    │           │       ├── <136> Subscript
                    │           │       │   ├── <134> Dot
                    │           │       │   │   ├── <132> Dot
                    │           │       │   │   │   ├── <130> Subscript
                    │           │       │   │   │   │   ├── <127> Var [struct_array]
                    │           │       │   │   │   │   ╰── <129> Var [i]
                    │           │       │   │   │   ╰── b
                    │           │       │   │   ╰── arr
                    │           │       │   ╰── <135> Constant Int [1]
                    │           │       ╰── <142>  [*]
                    │           │           ├── <139> Var [i]
                    │           │           ╰── <141> Constant Int [5]
                    │           ╰── Then
                    │               ╰── Return
                    │                   ╰── <144> Constant Int [0]
                    ╰── Return
                        ╰── <150> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_array_of_structs_client() {
    let src = r#"
        struct inner {
            long l;
            char arr[2];
        };
        struct outer {
            char a;
            struct inner b;
        };
        int validate_struct_array(struct outer *struct_array);
        
        static struct outer static_array[3] = {
            {0, {0, {0, 0}}}, {2, {3, {4, 5}}}, {4, {6, {8, 10}}}};
        int main(void) {
            struct outer auto_array[3] = {
                {0, {0, {0, 0}}}, {2, {3, {4, 5}}}, {4, {6, {8, 10}}}};
            if (!validate_struct_array(static_array)) {
                return 1;
            }
            if (!validate_struct_array(auto_array)) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Char
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [validate_struct_array]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── struct_array
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── static_array
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Struct [outer]
            │   ├── Initializer
            │   │   ╰── Compound
            │   │       ├── Compound
            │   │       │   ├── <45> Constant Int [0]
            │   │       │   ╰── Compound
            │   │       │       ├── <47> Constant Int [0]
            │   │       │       ╰── Compound
            │   │       │           ├── <49> Constant Int [0]
            │   │       │           ╰── <51> Constant Int [0]
            │   │       ├── Compound
            │   │       │   ├── <56> Constant Int [2]
            │   │       │   ╰── Compound
            │   │       │       ├── <58> Constant Int [3]
            │   │       │       ╰── Compound
            │   │       │           ├── <60> Constant Int [4]
            │   │       │           ╰── <62> Constant Int [5]
            │   │       ╰── Compound
            │   │           ├── <67> Constant Int [4]
            │   │           ╰── Compound
            │   │               ├── <69> Constant Int [6]
            │   │               ╰── Compound
            │   │                   ├── <71> Constant Int [8]
            │   │                   ╰── <73> Constant Int [10]
            │   ╰── Static
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── auto_array
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <92> Constant Int [0]
                    │           │   ╰── Compound
                    │           │       ├── <94> Constant Int [0]
                    │           │       ╰── Compound
                    │           │           ├── <96> Constant Int [0]
                    │           │           ╰── <98> Constant Int [0]
                    │           ├── Compound
                    │           │   ├── <103> Constant Int [2]
                    │           │   ╰── Compound
                    │           │       ├── <105> Constant Int [3]
                    │           │       ╰── Compound
                    │           │           ├── <107> Constant Int [4]
                    │           │           ╰── <109> Constant Int [5]
                    │           ╰── Compound
                    │               ├── <114> Constant Int [4]
                    │               ╰── Compound
                    │                   ├── <116> Constant Int [6]
                    │                   ╰── Compound
                    │                       ├── <118> Constant Int [8]
                    │                       ╰── <120> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <132> Unary [!]
                    │   │       ╰── <131> FunctionCall [validate_struct_array]
                    │   │           ╰── <130> Var [static_array]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <133> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <143> Unary [!]
                    │   │       ╰── <142> FunctionCall [validate_struct_array]
                    │   │           ╰── <141> Var [auto_array]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <144> Constant Int [2]
                    ╰── Return
                        ╰── <149> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_global_struct() {
    let src = r#"
        struct s {
            int i;
            char arr[2];
            double d;
        };
        struct outer {
            char c;
            struct s inner;
        };
        extern struct s global;
        extern struct outer global_outer;
        void update_struct(void);
        void update_outer_struct(void);
        
        void update_struct(void) {
            global.arr[1] = global.arr[0] * 2;
            global.d = 5.0;
        }
        void update_outer_struct(void) {
            struct s inner = {0, {-1, -1}, 0};
            global_outer.inner = inner;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── inner
            │       ╰── Type
            │           ╰── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global_outer
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── Function [update_struct]
            ├── Function [update_outer_struct]
            ├── Function [update_struct]
            │   ╰── Body
            │       ├── <74> Assign [=]
            │       │   ├── <63> Subscript
            │       │   │   ├── <61> Dot
            │       │   │   │   ├── <59> Var [global]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <62> Constant Int [1]
            │       │   ╰── <73>  [*]
            │       │       ├── <70> Subscript
            │       │       │   ├── <68> Dot
            │       │       │   │   ├── <66> Var [global]
            │       │       │   │   ╰── arr
            │       │       │   ╰── <69> Constant Int [0]
            │       │       ╰── <72> Constant Int [2]
            │       ╰── <82> Assign [=]
            │           ├── <79> Dot
            │           │   ├── <77> Var [global]
            │           │   ╰── d
            │           ╰── <81> Constant Double [+5e0]
            ╰── Function [update_outer_struct]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── inner
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <95> Constant Int [0]
                    │           ├── Compound
                    │           │   ├── <99> Unary [-]
                    │           │   │   ╰── <98> Constant Int [1]
                    │           │   ╰── <103> Unary [-]
                    │           │       ╰── <102> Constant Int [1]
                    │           ╰── <106> Constant Int [0]
                    ╰── <117> Assign [=]
                        ├── <113> Dot
                        │   ├── <111> Var [global_outer]
                        │   ╰── inner
                        ╰── <116> Var [inner]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_global_struct_client() {
    let src = r#"
        struct s {
            int i;
            char arr[2];
            double d;
        };
        struct outer {
            char c;
            struct s inner;
        };
        extern struct s global;
        extern struct outer global_outer;
        void update_struct(void);
        void update_outer_struct(void);
        
        struct s global = {1, {2, 3}, 4.0};
        struct outer global_outer = {5, {6, {7, 8}, 9.0}};
        int main(void) {
            update_struct();
            if (global.arr[1] != 4) {
                return 1;
            }
            if (global.d != 5.0) {
                return 2;
            }
            update_outer_struct();
            if (global_outer.c != 5) {
                return 3;
            }
            if (global_outer.inner.i || global_outer.inner.d) {
                return 4;
            }
            if (global_outer.inner.arr[0] != -1 || global_outer.inner.arr[1] != -1) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── inner
            │       ╰── Type
            │           ╰── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global_outer
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── Function [update_struct]
            ├── Function [update_outer_struct]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <57> Constant Int [1]
            │           ├── Compound
            │           │   ├── <59> Constant Int [2]
            │           │   ╰── <61> Constant Int [3]
            │           ╰── <64> Constant Double [+4e0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global_outer
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <72> Constant Int [5]
            │           ╰── Compound
            │               ├── <74> Constant Int [6]
            │               ├── Compound
            │               │   ├── <76> Constant Int [7]
            │               │   ╰── <78> Constant Int [8]
            │               ╰── <81> Constant Double [+9e0]
            ╰── Function [main]
                ╰── Body
                    ├── <92> FunctionCall [update_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <102>  [!=]
                    │   │       ├── <99> Subscript
                    │   │       │   ├── <97> Dot
                    │   │       │   │   ├── <95> Var [global]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <98> Constant Int [1]
                    │   │       ╰── <101> Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <103> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <114>  [!=]
                    │   │       ├── <111> Dot
                    │   │       │   ├── <109> Var [global]
                    │   │       │   ╰── d
                    │   │       ╰── <113> Constant Double [+5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <115> Constant Int [2]
                    ├── <121> FunctionCall [update_outer_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <129>  [!=]
                    │   │       ├── <126> Dot
                    │   │       │   ├── <124> Var [global_outer]
                    │   │       │   ╰── c
                    │   │       ╰── <128> Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <130> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <148>  [||]
                    │   │       ├── <140> Dot
                    │   │       │   ├── <138> Dot
                    │   │       │   │   ├── <136> Var [global_outer]
                    │   │       │   │   ╰── inner
                    │   │       │   ╰── i
                    │   │       ╰── <147> Dot
                    │   │           ├── <145> Dot
                    │   │           │   ├── <143> Var [global_outer]
                    │   │           │   ╰── inner
                    │   │           ╰── d
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <149> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <181>  [||]
                    │   │       ├── <166>  [!=]
                    │   │       │   ├── <161> Subscript
                    │   │       │   │   ├── <159> Dot
                    │   │       │   │   │   ├── <157> Dot
                    │   │       │   │   │   │   ├── <155> Var [global_outer]
                    │   │       │   │   │   │   ╰── inner
                    │   │       │   │   │   ╰── arr
                    │   │       │   │   ╰── <160> Constant Int [0]
                    │   │       │   ╰── <165> Unary [-]
                    │   │       │       ╰── <164> Constant Int [1]
                    │   │       ╰── <180>  [!=]
                    │   │           ├── <175> Subscript
                    │   │           │   ├── <173> Dot
                    │   │           │   │   ├── <171> Dot
                    │   │           │   │   │   ├── <169> Var [global_outer]
                    │   │           │   │   │   ╰── inner
                    │   │           │   │   ╰── arr
                    │   │           │   ╰── <174> Constant Int [1]
                    │   │           ╰── <179> Unary [-]
                    │   │               ╰── <178> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <182> Constant Int [5]
                    ╰── Return
                        ╰── <187> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_auto_struct_initializers() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void *malloc(unsigned long size);
        void *calloc(unsigned long nmemb, unsigned long size);
        struct s {
            char *one_msg;
            unsigned char two_arr[3];
            struct s *three_self_ptr;
            double four_d;
            double *five_d_ptr;
        };
        int validate_full_initialization(struct s *ptr);
        int validate_partial_initialization(struct s *ptr, char *expected_msg);
        int validate_converted(struct s *ptr);
        int validate_two_structs(struct s *ptr1, struct s *ptr2);
        
        int validate_full_initialization(struct s *ptr) {
            if (strcmp(ptr->one_msg, "I'm a struct!") || ptr->two_arr[0] != 's' ||
                ptr->two_arr[1] != 'u' || ptr->two_arr[2] != 'p' ||
                ptr->three_self_ptr != ptr || ptr->four_d != 2e12 ||
                *ptr->five_d_ptr != 2e12) {
                return 0;
            }
            return 1;
        }
        int validate_partial_initialization(struct s *ptr, char *expected_msg) {
            if (ptr->one_msg != expected_msg || ptr->two_arr[0] != 'a' ||
                ptr->two_arr[1] != 'b') {
                return 0;
            }
            if (ptr->three_self_ptr->one_msg) {
                return 0;
            }
            if (ptr->two_arr[2] || ptr->four_d || ptr->five_d_ptr) {
                return 0;
            }
            return 1;
        }
        int validate_converted(struct s *ptr) {
            if (!ptr->one_msg ||
                ptr->two_arr[0] != 220 || ptr->two_arr[1] != 232 ||
                ptr->two_arr[2] != 224 || ptr->three_self_ptr ||
                ptr->four_d != 2999.0 || *ptr->five_d_ptr != 0.0) {
                return 0;
            }
            return 1;
        }
        int validate_two_structs(struct s *ptr1, struct s *ptr2) {
            if (strcmp(ptr2->one_msg, "Yet another string") ||
                ptr2->one_msg != ptr1->one_msg ||
                ptr2->two_arr[0] != 'x' || ptr2->two_arr[1] != 'y' ||
                ptr2->three_self_ptr !=
                    ptr1 ||
                ptr2->four_d != 150.0 ||
                *ptr1->five_d_ptr != 123.4) {
                return 0;
            }
            if (ptr1->two_arr == ptr2->two_arr) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Unsigned Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_self_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── four_d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── five_d_ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Double
            ├── Function [validate_full_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [validate_partial_initialization]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [s]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── expected_msg
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [validate_converted]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [validate_two_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [s]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [validate_full_initialization]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [s]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <212>  [||]
            │       │   │       ├── <202>  [||]
            │       │   │       │   ├── <193>  [||]
            │       │   │       │   │   ├── <183>  [||]
            │       │   │       │   │   │   ├── <172>  [||]
            │       │   │       │   │   │   │   ├── <161>  [||]
            │       │   │       │   │   │   │   │   ├── <150> FunctionCall [strcmp]
            │       │   │       │   │   │   │   │   │   ├── <148> Arrow
            │       │   │       │   │   │   │   │   │   │   ├── <146> Var [ptr]
            │       │   │       │   │   │   │   │   │   │   ╰── one_msg
            │       │   │       │   │   │   │   │   │   ╰── <149> "I'm a struct!"
            │       │   │       │   │   │   │   │   ╰── <160>  [!=]
            │       │   │       │   │   │   │   │       ├── <157> Subscript
            │       │   │       │   │   │   │   │       │   ├── <155> Arrow
            │       │   │       │   │   │   │   │       │   │   ├── <153> Var [ptr]
            │       │   │       │   │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │   │       │   ╰── <156> Constant Int [0]
            │       │   │       │   │   │   │   │       ╰── <159> Constant Int [115]
            │       │   │       │   │   │   │   ╰── <171>  [!=]
            │       │   │       │   │   │   │       ├── <168> Subscript
            │       │   │       │   │   │   │       │   ├── <166> Arrow
            │       │   │       │   │   │   │       │   │   ├── <164> Var [ptr]
            │       │   │       │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │       │   ╰── <167> Constant Int [1]
            │       │   │       │   │   │   │       ╰── <170> Constant Int [117]
            │       │   │       │   │   │   ╰── <182>  [!=]
            │       │   │       │   │   │       ├── <179> Subscript
            │       │   │       │   │   │       │   ├── <177> Arrow
            │       │   │       │   │   │       │   │   ├── <175> Var [ptr]
            │       │   │       │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │       │   ╰── <178> Constant Int [2]
            │       │   │       │   │   │       ╰── <181> Constant Int [112]
            │       │   │       │   │   ╰── <192>  [!=]
            │       │   │       │   │       ├── <188> Arrow
            │       │   │       │   │       │   ├── <186> Var [ptr]
            │       │   │       │   │       │   ╰── three_self_ptr
            │       │   │       │   │       ╰── <191> Var [ptr]
            │       │   │       │   ╰── <201>  [!=]
            │       │   │       │       ├── <198> Arrow
            │       │   │       │       │   ├── <196> Var [ptr]
            │       │   │       │       │   ╰── four_d
            │       │   │       │       ╰── <200> Constant Double [+2e12]
            │       │   │       ╰── <211>  [!=]
            │       │   │           ├── <208> Dereference
            │       │   │           │   ╰── <207> Arrow
            │       │   │           │       ├── <205> Var [ptr]
            │       │   │           │       ╰── five_d_ptr
            │       │   │           ╰── <210> Constant Double [+2e12]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <213> Constant Int [0]
            │       ╰── Return
            │           ╰── <218> Constant Int [1]
            ├── Function [validate_partial_initialization]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ptr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Struct [s]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected_msg
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <267>  [||]
            │       │   │       ├── <256>  [||]
            │       │   │       │   ├── <245>  [!=]
            │       │   │       │   │   ├── <241> Arrow
            │       │   │       │   │   │   ├── <239> Var [ptr]
            │       │   │       │   │   │   ╰── one_msg
            │       │   │       │   │   ╰── <244> Var [expected_msg]
            │       │   │       │   ╰── <255>  [!=]
            │       │   │       │       ├── <252> Subscript
            │       │   │       │       │   ├── <250> Arrow
            │       │   │       │       │   │   ├── <248> Var [ptr]
            │       │   │       │       │   │   ╰── two_arr
            │       │   │       │       │   ╰── <251> Constant Int [0]
            │       │   │       │       ╰── <254> Constant Int [97]
            │       │   │       ╰── <266>  [!=]
            │       │   │           ├── <263> Subscript
            │       │   │           │   ├── <261> Arrow
            │       │   │           │   │   ├── <259> Var [ptr]
            │       │   │           │   │   ╰── two_arr
            │       │   │           │   ╰── <262> Constant Int [1]
            │       │   │           ╰── <265> Constant Int [98]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <268> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <278> Arrow
            │       │   │       ├── <276> Arrow
            │       │   │       │   ├── <274> Var [ptr]
            │       │   │       │   ╰── three_self_ptr
            │       │   │       ╰── one_msg
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <279> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <301>  [||]
            │       │   │       ├── <295>  [||]
            │       │   │       │   ├── <289> Subscript
            │       │   │       │   │   ├── <287> Arrow
            │       │   │       │   │   │   ├── <285> Var [ptr]
            │       │   │       │   │   │   ╰── two_arr
            │       │   │       │   │   ╰── <288> Constant Int [2]
            │       │   │       │   ╰── <294> Arrow
            │       │   │       │       ├── <292> Var [ptr]
            │       │   │       │       ╰── four_d
            │       │   │       ╰── <300> Arrow
            │       │   │           ├── <298> Var [ptr]
            │       │   │           ╰── five_d_ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <302> Constant Int [0]
            │       ╰── Return
            │           ╰── <307> Constant Int [1]
            ├── Function [validate_converted]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [s]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <385>  [||]
            │       │   │       ├── <375>  [||]
            │       │   │       │   ├── <366>  [||]
            │       │   │       │   │   ├── <360>  [||]
            │       │   │       │   │   │   ├── <349>  [||]
            │       │   │       │   │   │   │   ├── <338>  [||]
            │       │   │       │   │   │   │   │   ├── <327> Unary [!]
            │       │   │       │   │   │   │   │   │   ╰── <326> Arrow
            │       │   │       │   │   │   │   │   │       ├── <324> Var [ptr]
            │       │   │       │   │   │   │   │   │       ╰── one_msg
            │       │   │       │   │   │   │   │   ╰── <337>  [!=]
            │       │   │       │   │   │   │   │       ├── <334> Subscript
            │       │   │       │   │   │   │   │       │   ├── <332> Arrow
            │       │   │       │   │   │   │   │       │   │   ├── <330> Var [ptr]
            │       │   │       │   │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │   │       │   ╰── <333> Constant Int [0]
            │       │   │       │   │   │   │   │       ╰── <336> Constant Int [220]
            │       │   │       │   │   │   │   ╰── <348>  [!=]
            │       │   │       │   │   │   │       ├── <345> Subscript
            │       │   │       │   │   │   │       │   ├── <343> Arrow
            │       │   │       │   │   │   │       │   │   ├── <341> Var [ptr]
            │       │   │       │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │       │   ╰── <344> Constant Int [1]
            │       │   │       │   │   │   │       ╰── <347> Constant Int [232]
            │       │   │       │   │   │   ╰── <359>  [!=]
            │       │   │       │   │   │       ├── <356> Subscript
            │       │   │       │   │   │       │   ├── <354> Arrow
            │       │   │       │   │   │       │   │   ├── <352> Var [ptr]
            │       │   │       │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │       │   ╰── <355> Constant Int [2]
            │       │   │       │   │   │       ╰── <358> Constant Int [224]
            │       │   │       │   │   ╰── <365> Arrow
            │       │   │       │   │       ├── <363> Var [ptr]
            │       │   │       │   │       ╰── three_self_ptr
            │       │   │       │   ╰── <374>  [!=]
            │       │   │       │       ├── <371> Arrow
            │       │   │       │       │   ├── <369> Var [ptr]
            │       │   │       │       │   ╰── four_d
            │       │   │       │       ╰── <373> Constant Double [+2.999e3]
            │       │   │       ╰── <384>  [!=]
            │       │   │           ├── <381> Dereference
            │       │   │           │   ╰── <380> Arrow
            │       │   │           │       ├── <378> Var [ptr]
            │       │   │           │       ╰── five_d_ptr
            │       │   │           ╰── <383> Constant Double [+0e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <386> Constant Int [0]
            │       ╰── Return
            │           ╰── <391> Constant Int [1]
            ╰── Function [validate_two_structs]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── ptr1
                │   │   ╰── Type
                │   │       ╰── Pointer
                │   │           ╰── Struct [s]
                │   ╰── Param
                │       ├── Name
                │       │   ╰── ptr2
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Struct [s]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <481>  [||]
                    │   │       ├── <471>  [||]
                    │   │       │   ├── <462>  [||]
                    │   │       │   │   ├── <452>  [||]
                    │   │       │   │   │   ├── <441>  [||]
                    │   │       │   │   │   │   ├── <430>  [||]
                    │   │       │   │   │   │   │   ├── <418> FunctionCall [strcmp]
                    │   │       │   │   │   │   │   │   ├── <416> Arrow
                    │   │       │   │   │   │   │   │   │   ├── <414> Var [ptr2]
                    │   │       │   │   │   │   │   │   │   ╰── one_msg
                    │   │       │   │   │   │   │   │   ╰── <417> "Yet another string"
                    │   │       │   │   │   │   │   ╰── <429>  [!=]
                    │   │       │   │   │   │   │       ├── <423> Arrow
                    │   │       │   │   │   │   │       │   ├── <421> Var [ptr2]
                    │   │       │   │   │   │   │       │   ╰── one_msg
                    │   │       │   │   │   │   │       ╰── <428> Arrow
                    │   │       │   │   │   │   │           ├── <426> Var [ptr1]
                    │   │       │   │   │   │   │           ╰── one_msg
                    │   │       │   │   │   │   ╰── <440>  [!=]
                    │   │       │   │   │   │       ├── <437> Subscript
                    │   │       │   │   │   │       │   ├── <435> Arrow
                    │   │       │   │   │   │       │   │   ├── <433> Var [ptr2]
                    │   │       │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │       │   ╰── <436> Constant Int [0]
                    │   │       │   │   │   │       ╰── <439> Constant Int [120]
                    │   │       │   │   │   ╰── <451>  [!=]
                    │   │       │   │   │       ├── <448> Subscript
                    │   │       │   │   │       │   ├── <446> Arrow
                    │   │       │   │   │       │   │   ├── <444> Var [ptr2]
                    │   │       │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │       │   ╰── <447> Constant Int [1]
                    │   │       │   │   │       ╰── <450> Constant Int [121]
                    │   │       │   │   ╰── <461>  [!=]
                    │   │       │   │       ├── <457> Arrow
                    │   │       │   │       │   ├── <455> Var [ptr2]
                    │   │       │   │       │   ╰── three_self_ptr
                    │   │       │   │       ╰── <460> Var [ptr1]
                    │   │       │   ╰── <470>  [!=]
                    │   │       │       ├── <467> Arrow
                    │   │       │       │   ├── <465> Var [ptr2]
                    │   │       │       │   ╰── four_d
                    │   │       │       ╰── <469> Constant Double [+1.5e2]
                    │   │       ╰── <480>  [!=]
                    │   │           ├── <477> Dereference
                    │   │           │   ╰── <476> Arrow
                    │   │           │       ├── <474> Var [ptr1]
                    │   │           │       ╰── five_d_ptr
                    │   │           ╰── <479> Constant Double [+1.234e2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <482> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <496>  [==]
                    │   │       ├── <490> Arrow
                    │   │       │   ├── <488> Var [ptr1]
                    │   │       │   ╰── two_arr
                    │   │       ╰── <495> Arrow
                    │   │           ├── <493> Var [ptr2]
                    │   │           ╰── two_arr
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <497> Constant Int [0]
                    ╰── Return
                        ╰── <502> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_auto_struct_initializers_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void *malloc(unsigned long size);
        void *calloc(unsigned long nmemb, unsigned long size);
        struct s {
            char *one_msg;
            unsigned char two_arr[3];
            struct s *three_self_ptr;
            double four_d;
            double *five_d_ptr;
        };
        int validate_full_initialization(struct s *ptr);
        int validate_partial_initialization(struct s *ptr, char *expected_msg);
        int validate_converted(struct s *ptr);
        int validate_two_structs(struct s *ptr1, struct s *ptr2);
        double get_double(void) {
            return 2e12;
        }
        int test_full_initialization(void) {
            struct s full = {
                "I'm a struct!", "sup",
                &full,
                get_double(),
                &(full.four_d)
            };
            return validate_full_initialization(&full);
        }
        int test_partial_initialization(void) {
            static char *msg = "Another string literal";
            struct s partial = {
                msg,
                {'a', 'b'},
                (struct s *)calloc(
                    1,
                    sizeof(struct s))
            };
            return validate_partial_initialization(&partial, msg);
        }
        int test_implicit_type_conversions(void) {
            static int i = 3000;
            struct s converted = {
                malloc(5),
                {i / 2, i / 3, i * 4},
                0l,
                i - 1,
                calloc(1, sizeof(double))
            };
            return validate_converted(&converted);
        }
        int test_single_exp_initializer(void) {
            double d = 123.4;
            struct s s1 = {"Yet another string", "xy", &s1, 150.0, &d};
            struct s s2 = s1;
            return validate_two_structs(&s1, &s2);
        }
        int main(void) {
            if (!test_full_initialization()) {
                return 1;
            }
            if (!test_partial_initialization()) {
                return 2;
            }
            if (!test_implicit_type_conversions()) {
                return 3;
            }
            if (!test_single_exp_initializer()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Unsigned Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_self_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── four_d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── five_d_ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Double
            ├── Function [validate_full_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [validate_partial_initialization]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [s]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── expected_msg
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [validate_converted]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [validate_two_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [s]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [get_double]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <138> Constant Double [+2e12]
            ├── Function [test_full_initialization]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── full
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <151> "I'm a struct!"
            │       │           ├── <153> "sup"
            │       │           ├── <157> AddressOf
            │       │           │   ╰── <156> Var [full]
            │       │           ├── <160> FunctionCall [get_double]
            │       │           ╰── <167> AddressOf
            │       │               ╰── <166> Dot
            │       │                   ├── <163> Var [full]
            │       │                   ╰── four_d
            │       ╰── Return
            │           ╰── <175> FunctionCall [validate_full_initialization]
            │               ╰── <174> AddressOf
            │                   ╰── <173> Var [full]
            ├── Function [test_partial_initialization]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── msg
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ├── Initializer
            │       │   │   ╰── <190> "Another string literal"
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── partial
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <198> Var [msg]
            │       │           ├── Compound
            │       │           │   ├── <200> Constant Int [97]
            │       │           │   ╰── <202> Constant Int [98]
            │       │           ╰── <216> Cast
            │       │               ├── Target
            │       │               │   ╰── Pointer
            │       │               │       ╰── Struct [s]
            │       │               ╰── Expression
            │       │                   ╰── <215> FunctionCall [calloc]
            │       │                       ├── <210> Constant Int [1]
            │       │                       ╰── <214> SizeOfType
            │       │                           ╰── Struct [s]
            │       ╰── Return
            │           ╰── <226> FunctionCall [validate_partial_initialization]
            │               ├── <223> AddressOf
            │               │   ╰── <222> Var [partial]
            │               ╰── <225> Var [msg]
            ├── Function [test_implicit_type_conversions]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <239> Constant Int [3000]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── converted
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <248> FunctionCall [malloc]
            │       │           │   ╰── <247> Constant Int [5]
            │       │           ├── Compound
            │       │           │   ├── <254>  [/]
            │       │           │   │   ├── <251> Var [i]
            │       │           │   │   ╰── <253> Constant Int [2]
            │       │           │   ├── <260>  [/]
            │       │           │   │   ├── <257> Var [i]
            │       │           │   │   ╰── <259> Constant Int [3]
            │       │           │   ╰── <266>  [*]
            │       │           │       ├── <263> Var [i]
            │       │           │       ╰── <265> Constant Int [4]
            │       │           ├── <269> Constant Long [0]
            │       │           ├── <275>  [-]
            │       │           │   ├── <272> Var [i]
            │       │           │   ╰── <274> Constant Int [1]
            │       │           ╰── <282> FunctionCall [calloc]
            │       │               ├── <278> Constant Int [1]
            │       │               ╰── <281> SizeOfType
            │       │                   ╰── Double
            │       ╰── Return
            │           ╰── <290> FunctionCall [validate_converted]
            │               ╰── <289> AddressOf
            │                   ╰── <288> Var [converted]
            ├── Function [test_single_exp_initializer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ├── Type
            │       │   │   ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <302> Constant Double [+1.234e2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <309> "Yet another string"
            │       │           ├── <311> "xy"
            │       │           ├── <315> AddressOf
            │       │           │   ╰── <314> Var [s1]
            │       │           ├── <317> Constant Double [+1.5e2]
            │       │           ╰── <321> AddressOf
            │       │               ╰── <320> Var [d]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <330> Var [s1]
            │       ╰── Return
            │           ╰── <340> FunctionCall [validate_two_structs]
            │               ├── <336> AddressOf
            │               │   ╰── <335> Var [s1]
            │               ╰── <339> AddressOf
            │                   ╰── <338> Var [s2]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <352> Unary [!]
                    │   │       ╰── <351> FunctionCall [test_full_initialization]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <353> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <361> Unary [!]
                    │   │       ╰── <360> FunctionCall [test_partial_initialization]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <362> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <370> Unary [!]
                    │   │       ╰── <369> FunctionCall [test_implicit_type_conversions]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <371> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <379> Unary [!]
                    │   │       ╰── <378> FunctionCall [test_single_exp_initializer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <380> Constant Int [4]
                    ╰── Return
                        ╰── <385> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_nested_auto_struct_initializers() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct pair {
            int a;
            int b;
        };
        struct inner {
            int one_i;
            unsigned char two_arr[3];
            unsigned three_u;
        };
        struct outer {
            long one_l;
            struct inner two_struct;
            char *three_msg;
            double four_d;
            struct pair five_pair;
        };
        int validate_full_initialization(struct outer *ptr);
        int validate_partial_initialization(struct outer *ptr);
        int validate_mixed_initialization(struct outer *ptr);
        int validate_array_of_structs(struct outer *struct_array);
        
        int validate_full_initialization(struct outer *ptr) {
            if (ptr->one_l != -200l || ptr->two_struct.one_i != -171 ||
                ptr->two_struct.two_arr[0] != 200 ||
                ptr->two_struct.two_arr[1] != 202 ||
                ptr->two_struct.two_arr[2] != 203 || ptr->two_struct.three_u != 40u ||
                strcmp(ptr->three_msg, "Important message!") || ptr->four_d != -22. ||
                ptr->five_pair.a != 1 || ptr->five_pair.b != 2) {
                return 0;
            }
            return 1;
        }
        int validate_partial_initialization(struct outer *ptr) {
            if (ptr->one_l != 1000 || ptr->two_struct.one_i != 1 ||
                strcmp(ptr->three_msg, "Partial")) {
                return 0;
            }
            if (ptr->two_struct.two_arr[0] || ptr->two_struct.two_arr[1] ||
                ptr->two_struct.two_arr[2] || ptr->two_struct.three_u || ptr->four_d ||
                ptr->five_pair.a || ptr->five_pair.b) {
                return 0;
            }
            return 1;
        }
        int validate_mixed_initialization(struct outer *ptr) {
            if (ptr->one_l != 200 || ptr->two_struct.one_i != 20 ||
                ptr->two_struct.two_arr[0] != 21 || ptr->two_struct.three_u != 22u ||
                strcmp(ptr->three_msg, "mixed") || ptr->four_d != 10.0 ||
                ptr->five_pair.a != 99 || ptr->five_pair.b != 100) {
                return 0;
            }
            if (ptr->two_struct.two_arr[1] || ptr->two_struct.two_arr[2]) {
                return 0;
            }
            return 1;
        }
        int validate_array_of_structs(struct outer *struct_array) {
            if (struct_array[0].one_l != 1 || struct_array[0].two_struct.one_i != 2 ||
                struct_array[0].two_struct.two_arr[0] != 3 ||
                struct_array[0].two_struct.two_arr[1] != 4 ||
                struct_array[0].two_struct.two_arr[2] != 5 ||
                struct_array[0].two_struct.three_u != 6 ||
                strcmp(struct_array[0].three_msg, "7") ||
                struct_array[0].four_d != 8.0 || struct_array[0].five_pair.a != 9 ||
                struct_array[0].five_pair.b != 10) {
                return 0;
            }
            if (struct_array[1].one_l != 101 ||
                struct_array[1].two_struct.one_i != 102 ||
                struct_array[1].two_struct.two_arr[0] != 103 ||
                struct_array[1].two_struct.two_arr[1] != 104 ||
                struct_array[1].two_struct.two_arr[2] != 105 ||
                struct_array[1].two_struct.three_u != 106 ||
                strcmp(struct_array[1].three_msg, "107") ||
                struct_array[1].four_d != 108.0 || struct_array[1].five_pair.a != 109 ||
                struct_array[1].five_pair.b != 110) {
                return 0;
            }
            if (struct_array[2].one_l != 201 ||
                struct_array[2].two_struct.one_i != 202 ||
                struct_array[2].two_struct.two_arr[0] != 203 ||
                struct_array[2].two_struct.two_arr[1] ||
                struct_array[2].two_struct.two_arr[2] ||
                struct_array[2].two_struct.three_u ||
                strcmp(struct_array[2].three_msg, "207") ||
                struct_array[2].four_d != 208.0 || struct_array[2].five_pair.a != 209 ||
                struct_array[2].five_pair.b) {
                return 0;
            }
            if (struct_array[3].one_l != 301 || struct_array[3].two_struct.one_i ||
                struct_array[3].two_struct.two_arr[0] ||
                struct_array[3].two_struct.two_arr[1] ||
                struct_array[3].two_struct.two_arr[2] ||
                struct_array[3].two_struct.three_u || struct_array[3].three_msg ||
                struct_array[3].four_d || struct_array[3].five_pair.a ||
                struct_array[3].five_pair.b) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Unsigned Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three_u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_struct
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── four_d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── five_pair
            │       ╰── Type
            │           ╰── Struct [pair]
            ├── Function [validate_full_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_partial_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_mixed_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_array_of_structs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── struct_array
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_full_initialization]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [outer]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <242>  [||]
            │       │   │       ├── <231>  [||]
            │       │   │       │   ├── <220>  [||]
            │       │   │       │   │   ├── <209>  [||]
            │       │   │       │   │   │   ├── <200>  [||]
            │       │   │       │   │   │   │   ├── <189>  [||]
            │       │   │       │   │   │   │   │   ├── <176>  [||]
            │       │   │       │   │   │   │   │   │   ├── <163>  [||]
            │       │   │       │   │   │   │   │   │   │   ├── <150>  [||]
            │       │   │       │   │   │   │   │   │   │   │   ├── <137>  [!=]
            │       │   │       │   │   │   │   │   │   │   │   │   ├── <132> Arrow
            │       │   │       │   │   │   │   │   │   │   │   │   │   ├── <130> Var [ptr]
            │       │   │       │   │   │   │   │   │   │   │   │   │   ╰── one_l
            │       │   │       │   │   │   │   │   │   │   │   │   ╰── <136> Unary [-]
            │       │   │       │   │   │   │   │   │   │   │   │       ╰── <135> Constant Long [200]
            │       │   │       │   │   │   │   │   │   │   │   ╰── <149>  [!=]
            │       │   │       │   │   │   │   │   │   │   │       ├── <144> Dot
            │       │   │       │   │   │   │   │   │   │   │       │   ├── <142> Arrow
            │       │   │       │   │   │   │   │   │   │   │       │   │   ├── <140> Var [ptr]
            │       │   │       │   │   │   │   │   │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   │   │   │       │   ╰── one_i
            │       │   │       │   │   │   │   │   │   │   │       ╰── <148> Unary [-]
            │       │   │       │   │   │   │   │   │   │   │           ╰── <147> Constant Int [171]
            │       │   │       │   │   │   │   │   │   │   ╰── <162>  [!=]
            │       │   │       │   │   │   │   │   │   │       ├── <159> Subscript
            │       │   │       │   │   │   │   │   │   │       │   ├── <157> Dot
            │       │   │       │   │   │   │   │   │   │       │   │   ├── <155> Arrow
            │       │   │       │   │   │   │   │   │   │       │   │   │   ├── <153> Var [ptr]
            │       │   │       │   │   │   │   │   │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │   │   │   │       │   ╰── <158> Constant Int [0]
            │       │   │       │   │   │   │   │   │   │       ╰── <161> Constant Int [200]
            │       │   │       │   │   │   │   │   │   ╰── <175>  [!=]
            │       │   │       │   │   │   │   │   │       ├── <172> Subscript
            │       │   │       │   │   │   │   │   │       │   ├── <170> Dot
            │       │   │       │   │   │   │   │   │       │   │   ├── <168> Arrow
            │       │   │       │   │   │   │   │   │       │   │   │   ├── <166> Var [ptr]
            │       │   │       │   │   │   │   │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │   │   │       │   ╰── <171> Constant Int [1]
            │       │   │       │   │   │   │   │   │       ╰── <174> Constant Int [202]
            │       │   │       │   │   │   │   │   ╰── <188>  [!=]
            │       │   │       │   │   │   │   │       ├── <185> Subscript
            │       │   │       │   │   │   │   │       │   ├── <183> Dot
            │       │   │       │   │   │   │   │       │   │   ├── <181> Arrow
            │       │   │       │   │   │   │   │       │   │   │   ├── <179> Var [ptr]
            │       │   │       │   │   │   │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │   │       │   ╰── <184> Constant Int [2]
            │       │   │       │   │   │   │   │       ╰── <187> Constant Int [203]
            │       │   │       │   │   │   │   ╰── <199>  [!=]
            │       │   │       │   │   │   │       ├── <196> Dot
            │       │   │       │   │   │   │       │   ├── <194> Arrow
            │       │   │       │   │   │   │       │   │   ├── <192> Var [ptr]
            │       │   │       │   │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │   │       │   ╰── three_u
            │       │   │       │   │   │   │       ╰── <198> Constant UInt [40]
            │       │   │       │   │   │   ╰── <208> FunctionCall [strcmp]
            │       │   │       │   │   │       ├── <206> Arrow
            │       │   │       │   │   │       │   ├── <204> Var [ptr]
            │       │   │       │   │   │       │   ╰── three_msg
            │       │   │       │   │   │       ╰── <207> "Important message!"
            │       │   │       │   │   ╰── <219>  [!=]
            │       │   │       │   │       ├── <214> Arrow
            │       │   │       │   │       │   ├── <212> Var [ptr]
            │       │   │       │   │       │   ╰── four_d
            │       │   │       │   │       ╰── <218> Unary [-]
            │       │   │       │   │           ╰── <217> Constant Double [+2.2e1]
            │       │   │       │   ╰── <230>  [!=]
            │       │   │       │       ├── <227> Dot
            │       │   │       │       │   ├── <225> Arrow
            │       │   │       │       │   │   ├── <223> Var [ptr]
            │       │   │       │       │   │   ╰── five_pair
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <229> Constant Int [1]
            │       │   │       ╰── <241>  [!=]
            │       │   │           ├── <238> Dot
            │       │   │           │   ├── <236> Arrow
            │       │   │           │   │   ├── <234> Var [ptr]
            │       │   │           │   │   ╰── five_pair
            │       │   │           │   ╰── b
            │       │   │           ╰── <240> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <243> Constant Int [0]
            │       ╰── Return
            │           ╰── <248> Constant Int [1]
            ├── Function [validate_partial_initialization]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [outer]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <289>  [||]
            │       │   │       ├── <280>  [||]
            │       │   │       │   ├── <269>  [!=]
            │       │   │       │   │   ├── <266> Arrow
            │       │   │       │   │   │   ├── <264> Var [ptr]
            │       │   │       │   │   │   ╰── one_l
            │       │   │       │   │   ╰── <268> Constant Int [1000]
            │       │   │       │   ╰── <279>  [!=]
            │       │   │       │       ├── <276> Dot
            │       │   │       │       │   ├── <274> Arrow
            │       │   │       │       │   │   ├── <272> Var [ptr]
            │       │   │       │       │   │   ╰── two_struct
            │       │   │       │       │   ╰── one_i
            │       │   │       │       ╰── <278> Constant Int [1]
            │       │   │       ╰── <288> FunctionCall [strcmp]
            │       │   │           ├── <286> Arrow
            │       │   │           │   ├── <284> Var [ptr]
            │       │   │           │   ╰── three_msg
            │       │   │           ╰── <287> "Partial"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <290> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <352>  [||]
            │       │   │       ├── <344>  [||]
            │       │   │       │   ├── <336>  [||]
            │       │   │       │   │   ├── <330>  [||]
            │       │   │       │   │   │   ├── <322>  [||]
            │       │   │       │   │   │   │   ├── <312>  [||]
            │       │   │       │   │   │   │   │   ├── <302> Subscript
            │       │   │       │   │   │   │   │   │   ├── <300> Dot
            │       │   │       │   │   │   │   │   │   │   ├── <298> Arrow
            │       │   │       │   │   │   │   │   │   │   │   ├── <296> Var [ptr]
            │       │   │       │   │   │   │   │   │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   │   │   ╰── two_arr
            │       │   │       │   │   │   │   │   │   ╰── <301> Constant Int [0]
            │       │   │       │   │   │   │   │   ╰── <311> Subscript
            │       │   │       │   │   │   │   │       ├── <309> Dot
            │       │   │       │   │   │   │   │       │   ├── <307> Arrow
            │       │   │       │   │   │   │   │       │   │   ├── <305> Var [ptr]
            │       │   │       │   │   │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │   │   │       │   ╰── two_arr
            │       │   │       │   │   │   │   │       ╰── <310> Constant Int [1]
            │       │   │       │   │   │   │   ╰── <321> Subscript
            │       │   │       │   │   │   │       ├── <319> Dot
            │       │   │       │   │   │   │       │   ├── <317> Arrow
            │       │   │       │   │   │   │       │   │   ├── <315> Var [ptr]
            │       │   │       │   │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │   │       │   ╰── two_arr
            │       │   │       │   │   │   │       ╰── <320> Constant Int [2]
            │       │   │       │   │   │   ╰── <329> Dot
            │       │   │       │   │   │       ├── <327> Arrow
            │       │   │       │   │   │       │   ├── <325> Var [ptr]
            │       │   │       │   │   │       │   ╰── two_struct
            │       │   │       │   │   │       ╰── three_u
            │       │   │       │   │   ╰── <335> Arrow
            │       │   │       │   │       ├── <333> Var [ptr]
            │       │   │       │   │       ╰── four_d
            │       │   │       │   ╰── <343> Dot
            │       │   │       │       ├── <341> Arrow
            │       │   │       │       │   ├── <339> Var [ptr]
            │       │   │       │       │   ╰── five_pair
            │       │   │       │       ╰── a
            │       │   │       ╰── <351> Dot
            │       │   │           ├── <349> Arrow
            │       │   │           │   ├── <347> Var [ptr]
            │       │   │           │   ╰── five_pair
            │       │   │           ╰── b
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <353> Constant Int [0]
            │       ╰── Return
            │           ╰── <358> Constant Int [1]
            ├── Function [validate_mixed_initialization]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [outer]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <454>  [||]
            │       │   │       ├── <443>  [||]
            │       │   │       │   ├── <432>  [||]
            │       │   │       │   │   ├── <423>  [||]
            │       │   │       │   │   │   ├── <414>  [||]
            │       │   │       │   │   │   │   ├── <403>  [||]
            │       │   │       │   │   │   │   │   ├── <390>  [||]
            │       │   │       │   │   │   │   │   │   ├── <379>  [!=]
            │       │   │       │   │   │   │   │   │   │   ├── <376> Arrow
            │       │   │       │   │   │   │   │   │   │   │   ├── <374> Var [ptr]
            │       │   │       │   │   │   │   │   │   │   │   ╰── one_l
            │       │   │       │   │   │   │   │   │   │   ╰── <378> Constant Int [200]
            │       │   │       │   │   │   │   │   │   ╰── <389>  [!=]
            │       │   │       │   │   │   │   │   │       ├── <386> Dot
            │       │   │       │   │   │   │   │   │       │   ├── <384> Arrow
            │       │   │       │   │   │   │   │   │       │   │   ├── <382> Var [ptr]
            │       │   │       │   │   │   │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   │       │   ╰── one_i
            │       │   │       │   │   │   │   │   │       ╰── <388> Constant Int [20]
            │       │   │       │   │   │   │   │   ╰── <402>  [!=]
            │       │   │       │   │   │   │   │       ├── <399> Subscript
            │       │   │       │   │   │   │   │       │   ├── <397> Dot
            │       │   │       │   │   │   │   │       │   │   ├── <395> Arrow
            │       │   │       │   │   │   │   │       │   │   │   ├── <393> Var [ptr]
            │       │   │       │   │   │   │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │   │   │       │   ╰── <398> Constant Int [0]
            │       │   │       │   │   │   │   │       ╰── <401> Constant Int [21]
            │       │   │       │   │   │   │   ╰── <413>  [!=]
            │       │   │       │   │   │   │       ├── <410> Dot
            │       │   │       │   │   │   │       │   ├── <408> Arrow
            │       │   │       │   │   │   │       │   │   ├── <406> Var [ptr]
            │       │   │       │   │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │   │       │   ╰── three_u
            │       │   │       │   │   │   │       ╰── <412> Constant UInt [22]
            │       │   │       │   │   │   ╰── <422> FunctionCall [strcmp]
            │       │   │       │   │   │       ├── <420> Arrow
            │       │   │       │   │   │       │   ├── <418> Var [ptr]
            │       │   │       │   │   │       │   ╰── three_msg
            │       │   │       │   │   │       ╰── <421> "mixed"
            │       │   │       │   │   ╰── <431>  [!=]
            │       │   │       │   │       ├── <428> Arrow
            │       │   │       │   │       │   ├── <426> Var [ptr]
            │       │   │       │   │       │   ╰── four_d
            │       │   │       │   │       ╰── <430> Constant Double [+1e1]
            │       │   │       │   ╰── <442>  [!=]
            │       │   │       │       ├── <439> Dot
            │       │   │       │       │   ├── <437> Arrow
            │       │   │       │       │   │   ├── <435> Var [ptr]
            │       │   │       │       │   │   ╰── five_pair
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <441> Constant Int [99]
            │       │   │       ╰── <453>  [!=]
            │       │   │           ├── <450> Dot
            │       │   │           │   ├── <448> Arrow
            │       │   │           │   │   ├── <446> Var [ptr]
            │       │   │           │   │   ╰── five_pair
            │       │   │           │   ╰── b
            │       │   │           ╰── <452> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <455> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <477>  [||]
            │       │   │       ├── <467> Subscript
            │       │   │       │   ├── <465> Dot
            │       │   │       │   │   ├── <463> Arrow
            │       │   │       │   │   │   ├── <461> Var [ptr]
            │       │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   ╰── two_arr
            │       │   │       │   ╰── <466> Constant Int [1]
            │       │   │       ╰── <476> Subscript
            │       │   │           ├── <474> Dot
            │       │   │           │   ├── <472> Arrow
            │       │   │           │   │   ├── <470> Var [ptr]
            │       │   │           │   │   ╰── two_struct
            │       │   │           │   ╰── two_arr
            │       │   │           ╰── <475> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <478> Constant Int [0]
            │       ╰── Return
            │           ╰── <483> Constant Int [1]
            ╰── Function [validate_array_of_structs]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── struct_array
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Struct [outer]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <625>  [||]
                    │   │       ├── <612>  [||]
                    │   │       │   ├── <599>  [||]
                    │   │       │   │   ├── <588>  [||]
                    │   │       │   │   │   ├── <577>  [||]
                    │   │       │   │   │   │   ├── <564>  [||]
                    │   │       │   │   │   │   │   ├── <549>  [||]
                    │   │       │   │   │   │   │   │   ├── <534>  [||]
                    │   │       │   │   │   │   │   │   │   ├── <519>  [||]
                    │   │       │   │   │   │   │   │   │   │   ├── <506>  [!=]
                    │   │       │   │   │   │   │   │   │   │   │   ├── <503> Dot
                    │   │       │   │   │   │   │   │   │   │   │   │   ├── <501> Subscript
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ├── <499> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ╰── <500> Constant Int [0]
                    │   │       │   │   │   │   │   │   │   │   │   │   ╰── one_l
                    │   │       │   │   │   │   │   │   │   │   │   ╰── <505> Constant Int [1]
                    │   │       │   │   │   │   │   │   │   │   ╰── <518>  [!=]
                    │   │       │   │   │   │   │   │   │   │       ├── <515> Dot
                    │   │       │   │   │   │   │   │   │   │       │   ├── <513> Dot
                    │   │       │   │   │   │   │   │   │   │       │   │   ├── <511> Subscript
                    │   │       │   │   │   │   │   │   │   │       │   │   │   ├── <509> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │       │   │   │   ╰── <510> Constant Int [0]
                    │   │       │   │   │   │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │   │       │   ╰── one_i
                    │   │       │   │   │   │   │   │   │   │       ╰── <517> Constant Int [2]
                    │   │       │   │   │   │   │   │   │   ╰── <533>  [!=]
                    │   │       │   │   │   │   │   │   │       ├── <530> Subscript
                    │   │       │   │   │   │   │   │   │       │   ├── <528> Dot
                    │   │       │   │   │   │   │   │   │       │   │   ├── <526> Dot
                    │   │       │   │   │   │   │   │   │       │   │   │   ├── <524> Subscript
                    │   │       │   │   │   │   │   │   │       │   │   │   │   ├── <522> Var [struct_array]
                    │   │       │   │   │   │   │   │   │       │   │   │   │   ╰── <523> Constant Int [0]
                    │   │       │   │   │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │   │   │       │   ╰── <529> Constant Int [0]
                    │   │       │   │   │   │   │   │   │       ╰── <532> Constant Int [3]
                    │   │       │   │   │   │   │   │   ╰── <548>  [!=]
                    │   │       │   │   │   │   │   │       ├── <545> Subscript
                    │   │       │   │   │   │   │   │       │   ├── <543> Dot
                    │   │       │   │   │   │   │   │       │   │   ├── <541> Dot
                    │   │       │   │   │   │   │   │       │   │   │   ├── <539> Subscript
                    │   │       │   │   │   │   │   │       │   │   │   │   ├── <537> Var [struct_array]
                    │   │       │   │   │   │   │   │       │   │   │   │   ╰── <538> Constant Int [0]
                    │   │       │   │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │   │       │   ╰── <544> Constant Int [1]
                    │   │       │   │   │   │   │   │       ╰── <547> Constant Int [4]
                    │   │       │   │   │   │   │   ╰── <563>  [!=]
                    │   │       │   │   │   │   │       ├── <560> Subscript
                    │   │       │   │   │   │   │       │   ├── <558> Dot
                    │   │       │   │   │   │   │       │   │   ├── <556> Dot
                    │   │       │   │   │   │   │       │   │   │   ├── <554> Subscript
                    │   │       │   │   │   │   │       │   │   │   │   ├── <552> Var [struct_array]
                    │   │       │   │   │   │   │       │   │   │   │   ╰── <553> Constant Int [0]
                    │   │       │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │       │   ╰── <559> Constant Int [2]
                    │   │       │   │   │   │   │       ╰── <562> Constant Int [5]
                    │   │       │   │   │   │   ╰── <576>  [!=]
                    │   │       │   │   │   │       ├── <573> Dot
                    │   │       │   │   │   │       │   ├── <571> Dot
                    │   │       │   │   │   │       │   │   ├── <569> Subscript
                    │   │       │   │   │   │       │   │   │   ├── <567> Var [struct_array]
                    │   │       │   │   │   │       │   │   │   ╰── <568> Constant Int [0]
                    │   │       │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │       │   ╰── three_u
                    │   │       │   │   │   │       ╰── <575> Constant Int [6]
                    │   │       │   │   │   ╰── <587> FunctionCall [strcmp]
                    │   │       │   │   │       ├── <585> Dot
                    │   │       │   │   │       │   ├── <583> Subscript
                    │   │       │   │   │       │   │   ├── <581> Var [struct_array]
                    │   │       │   │   │       │   │   ╰── <582> Constant Int [0]
                    │   │       │   │   │       │   ╰── three_msg
                    │   │       │   │   │       ╰── <586> "7"
                    │   │       │   │   ╰── <598>  [!=]
                    │   │       │   │       ├── <595> Dot
                    │   │       │   │       │   ├── <593> Subscript
                    │   │       │   │       │   │   ├── <591> Var [struct_array]
                    │   │       │   │       │   │   ╰── <592> Constant Int [0]
                    │   │       │   │       │   ╰── four_d
                    │   │       │   │       ╰── <597> Constant Double [+8e0]
                    │   │       │   ╰── <611>  [!=]
                    │   │       │       ├── <608> Dot
                    │   │       │       │   ├── <606> Dot
                    │   │       │       │   │   ├── <604> Subscript
                    │   │       │       │   │   │   ├── <602> Var [struct_array]
                    │   │       │       │   │   │   ╰── <603> Constant Int [0]
                    │   │       │       │   │   ╰── five_pair
                    │   │       │       │   ╰── a
                    │   │       │       ╰── <610> Constant Int [9]
                    │   │       ╰── <624>  [!=]
                    │   │           ├── <621> Dot
                    │   │           │   ├── <619> Dot
                    │   │           │   │   ├── <617> Subscript
                    │   │           │   │   │   ├── <615> Var [struct_array]
                    │   │           │   │   │   ╰── <616> Constant Int [0]
                    │   │           │   │   ╰── five_pair
                    │   │           │   ╰── b
                    │   │           ╰── <623> Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <626> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <758>  [||]
                    │   │       ├── <745>  [||]
                    │   │       │   ├── <732>  [||]
                    │   │       │   │   ├── <721>  [||]
                    │   │       │   │   │   ├── <710>  [||]
                    │   │       │   │   │   │   ├── <697>  [||]
                    │   │       │   │   │   │   │   ├── <682>  [||]
                    │   │       │   │   │   │   │   │   ├── <667>  [||]
                    │   │       │   │   │   │   │   │   │   ├── <652>  [||]
                    │   │       │   │   │   │   │   │   │   │   ├── <639>  [!=]
                    │   │       │   │   │   │   │   │   │   │   │   ├── <636> Dot
                    │   │       │   │   │   │   │   │   │   │   │   │   ├── <634> Subscript
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ├── <632> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ╰── <633> Constant Int [1]
                    │   │       │   │   │   │   │   │   │   │   │   │   ╰── one_l
                    │   │       │   │   │   │   │   │   │   │   │   ╰── <638> Constant Int [101]
                    │   │       │   │   │   │   │   │   │   │   ╰── <651>  [!=]
                    │   │       │   │   │   │   │   │   │   │       ├── <648> Dot
                    │   │       │   │   │   │   │   │   │   │       │   ├── <646> Dot
                    │   │       │   │   │   │   │   │   │   │       │   │   ├── <644> Subscript
                    │   │       │   │   │   │   │   │   │   │       │   │   │   ├── <642> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │       │   │   │   ╰── <643> Constant Int [1]
                    │   │       │   │   │   │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │   │       │   ╰── one_i
                    │   │       │   │   │   │   │   │   │   │       ╰── <650> Constant Int [102]
                    │   │       │   │   │   │   │   │   │   ╰── <666>  [!=]
                    │   │       │   │   │   │   │   │   │       ├── <663> Subscript
                    │   │       │   │   │   │   │   │   │       │   ├── <661> Dot
                    │   │       │   │   │   │   │   │   │       │   │   ├── <659> Dot
                    │   │       │   │   │   │   │   │   │       │   │   │   ├── <657> Subscript
                    │   │       │   │   │   │   │   │   │       │   │   │   │   ├── <655> Var [struct_array]
                    │   │       │   │   │   │   │   │   │       │   │   │   │   ╰── <656> Constant Int [1]
                    │   │       │   │   │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │   │   │       │   ╰── <662> Constant Int [0]
                    │   │       │   │   │   │   │   │   │       ╰── <665> Constant Int [103]
                    │   │       │   │   │   │   │   │   ╰── <681>  [!=]
                    │   │       │   │   │   │   │   │       ├── <678> Subscript
                    │   │       │   │   │   │   │   │       │   ├── <676> Dot
                    │   │       │   │   │   │   │   │       │   │   ├── <674> Dot
                    │   │       │   │   │   │   │   │       │   │   │   ├── <672> Subscript
                    │   │       │   │   │   │   │   │       │   │   │   │   ├── <670> Var [struct_array]
                    │   │       │   │   │   │   │   │       │   │   │   │   ╰── <671> Constant Int [1]
                    │   │       │   │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │   │       │   ╰── <677> Constant Int [1]
                    │   │       │   │   │   │   │   │       ╰── <680> Constant Int [104]
                    │   │       │   │   │   │   │   ╰── <696>  [!=]
                    │   │       │   │   │   │   │       ├── <693> Subscript
                    │   │       │   │   │   │   │       │   ├── <691> Dot
                    │   │       │   │   │   │   │       │   │   ├── <689> Dot
                    │   │       │   │   │   │   │       │   │   │   ├── <687> Subscript
                    │   │       │   │   │   │   │       │   │   │   │   ├── <685> Var [struct_array]
                    │   │       │   │   │   │   │       │   │   │   │   ╰── <686> Constant Int [1]
                    │   │       │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │       │   ╰── <692> Constant Int [2]
                    │   │       │   │   │   │   │       ╰── <695> Constant Int [105]
                    │   │       │   │   │   │   ╰── <709>  [!=]
                    │   │       │   │   │   │       ├── <706> Dot
                    │   │       │   │   │   │       │   ├── <704> Dot
                    │   │       │   │   │   │       │   │   ├── <702> Subscript
                    │   │       │   │   │   │       │   │   │   ├── <700> Var [struct_array]
                    │   │       │   │   │   │       │   │   │   ╰── <701> Constant Int [1]
                    │   │       │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │       │   ╰── three_u
                    │   │       │   │   │   │       ╰── <708> Constant Int [106]
                    │   │       │   │   │   ╰── <720> FunctionCall [strcmp]
                    │   │       │   │   │       ├── <718> Dot
                    │   │       │   │   │       │   ├── <716> Subscript
                    │   │       │   │   │       │   │   ├── <714> Var [struct_array]
                    │   │       │   │   │       │   │   ╰── <715> Constant Int [1]
                    │   │       │   │   │       │   ╰── three_msg
                    │   │       │   │   │       ╰── <719> "107"
                    │   │       │   │   ╰── <731>  [!=]
                    │   │       │   │       ├── <728> Dot
                    │   │       │   │       │   ├── <726> Subscript
                    │   │       │   │       │   │   ├── <724> Var [struct_array]
                    │   │       │   │       │   │   ╰── <725> Constant Int [1]
                    │   │       │   │       │   ╰── four_d
                    │   │       │   │       ╰── <730> Constant Double [+1.08e2]
                    │   │       │   ╰── <744>  [!=]
                    │   │       │       ├── <741> Dot
                    │   │       │       │   ├── <739> Dot
                    │   │       │       │   │   ├── <737> Subscript
                    │   │       │       │   │   │   ├── <735> Var [struct_array]
                    │   │       │       │   │   │   ╰── <736> Constant Int [1]
                    │   │       │       │   │   ╰── five_pair
                    │   │       │       │   ╰── a
                    │   │       │       ╰── <743> Constant Int [109]
                    │   │       ╰── <757>  [!=]
                    │   │           ├── <754> Dot
                    │   │           │   ├── <752> Dot
                    │   │           │   │   ├── <750> Subscript
                    │   │           │   │   │   ├── <748> Var [struct_array]
                    │   │           │   │   │   ╰── <749> Constant Int [1]
                    │   │           │   │   ╰── five_pair
                    │   │           │   ╰── b
                    │   │           ╰── <756> Constant Int [110]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <759> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <879>  [||]
                    │   │       ├── <869>  [||]
                    │   │       │   ├── <856>  [||]
                    │   │       │   │   ├── <845>  [||]
                    │   │       │   │   │   ├── <834>  [||]
                    │   │       │   │   │   │   ├── <824>  [||]
                    │   │       │   │   │   │   │   ├── <812>  [||]
                    │   │       │   │   │   │   │   │   ├── <800>  [||]
                    │   │       │   │   │   │   │   │   │   ├── <785>  [||]
                    │   │       │   │   │   │   │   │   │   │   ├── <772>  [!=]
                    │   │       │   │   │   │   │   │   │   │   │   ├── <769> Dot
                    │   │       │   │   │   │   │   │   │   │   │   │   ├── <767> Subscript
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ├── <765> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ╰── <766> Constant Int [2]
                    │   │       │   │   │   │   │   │   │   │   │   │   ╰── one_l
                    │   │       │   │   │   │   │   │   │   │   │   ╰── <771> Constant Int [201]
                    │   │       │   │   │   │   │   │   │   │   ╰── <784>  [!=]
                    │   │       │   │   │   │   │   │   │   │       ├── <781> Dot
                    │   │       │   │   │   │   │   │   │   │       │   ├── <779> Dot
                    │   │       │   │   │   │   │   │   │   │       │   │   ├── <777> Subscript
                    │   │       │   │   │   │   │   │   │   │       │   │   │   ├── <775> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │       │   │   │   ╰── <776> Constant Int [2]
                    │   │       │   │   │   │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │   │       │   ╰── one_i
                    │   │       │   │   │   │   │   │   │   │       ╰── <783> Constant Int [202]
                    │   │       │   │   │   │   │   │   │   ╰── <799>  [!=]
                    │   │       │   │   │   │   │   │   │       ├── <796> Subscript
                    │   │       │   │   │   │   │   │   │       │   ├── <794> Dot
                    │   │       │   │   │   │   │   │   │       │   │   ├── <792> Dot
                    │   │       │   │   │   │   │   │   │       │   │   │   ├── <790> Subscript
                    │   │       │   │   │   │   │   │   │       │   │   │   │   ├── <788> Var [struct_array]
                    │   │       │   │   │   │   │   │   │       │   │   │   │   ╰── <789> Constant Int [2]
                    │   │       │   │   │   │   │   │   │       │   │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │       │   │   ╰── two_arr
                    │   │       │   │   │   │   │   │   │       │   ╰── <795> Constant Int [0]
                    │   │       │   │   │   │   │   │   │       ╰── <798> Constant Int [203]
                    │   │       │   │   │   │   │   │   ╰── <811> Subscript
                    │   │       │   │   │   │   │   │       ├── <809> Dot
                    │   │       │   │   │   │   │   │       │   ├── <807> Dot
                    │   │       │   │   │   │   │   │       │   │   ├── <805> Subscript
                    │   │       │   │   │   │   │   │       │   │   │   ├── <803> Var [struct_array]
                    │   │       │   │   │   │   │   │       │   │   │   ╰── <804> Constant Int [2]
                    │   │       │   │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │       │   ╰── two_arr
                    │   │       │   │   │   │   │   │       ╰── <810> Constant Int [1]
                    │   │       │   │   │   │   │   ╰── <823> Subscript
                    │   │       │   │   │   │   │       ├── <821> Dot
                    │   │       │   │   │   │   │       │   ├── <819> Dot
                    │   │       │   │   │   │   │       │   │   ├── <817> Subscript
                    │   │       │   │   │   │   │       │   │   │   ├── <815> Var [struct_array]
                    │   │       │   │   │   │   │       │   │   │   ╰── <816> Constant Int [2]
                    │   │       │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │       │   ╰── two_arr
                    │   │       │   │   │   │   │       ╰── <822> Constant Int [2]
                    │   │       │   │   │   │   ╰── <833> Dot
                    │   │       │   │   │   │       ├── <831> Dot
                    │   │       │   │   │   │       │   ├── <829> Subscript
                    │   │       │   │   │   │       │   │   ├── <827> Var [struct_array]
                    │   │       │   │   │   │       │   │   ╰── <828> Constant Int [2]
                    │   │       │   │   │   │       │   ╰── two_struct
                    │   │       │   │   │   │       ╰── three_u
                    │   │       │   │   │   ╰── <844> FunctionCall [strcmp]
                    │   │       │   │   │       ├── <842> Dot
                    │   │       │   │   │       │   ├── <840> Subscript
                    │   │       │   │   │       │   │   ├── <838> Var [struct_array]
                    │   │       │   │   │       │   │   ╰── <839> Constant Int [2]
                    │   │       │   │   │       │   ╰── three_msg
                    │   │       │   │   │       ╰── <843> "207"
                    │   │       │   │   ╰── <855>  [!=]
                    │   │       │   │       ├── <852> Dot
                    │   │       │   │       │   ├── <850> Subscript
                    │   │       │   │       │   │   ├── <848> Var [struct_array]
                    │   │       │   │       │   │   ╰── <849> Constant Int [2]
                    │   │       │   │       │   ╰── four_d
                    │   │       │   │       ╰── <854> Constant Double [+2.08e2]
                    │   │       │   ╰── <868>  [!=]
                    │   │       │       ├── <865> Dot
                    │   │       │       │   ├── <863> Dot
                    │   │       │       │   │   ├── <861> Subscript
                    │   │       │       │   │   │   ├── <859> Var [struct_array]
                    │   │       │       │   │   │   ╰── <860> Constant Int [2]
                    │   │       │       │   │   ╰── five_pair
                    │   │       │       │   ╰── a
                    │   │       │       ╰── <867> Constant Int [209]
                    │   │       ╰── <878> Dot
                    │   │           ├── <876> Dot
                    │   │           │   ├── <874> Subscript
                    │   │           │   │   ├── <872> Var [struct_array]
                    │   │           │   │   ╰── <873> Constant Int [2]
                    │   │           │   ╰── five_pair
                    │   │           ╰── b
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <880> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <985>  [||]
                    │   │       ├── <975>  [||]
                    │   │       │   ├── <965>  [||]
                    │   │       │   │   ├── <957>  [||]
                    │   │       │   │   │   ├── <949>  [||]
                    │   │       │   │   │   │   ├── <939>  [||]
                    │   │       │   │   │   │   │   ├── <927>  [||]
                    │   │       │   │   │   │   │   │   ├── <915>  [||]
                    │   │       │   │   │   │   │   │   │   ├── <903>  [||]
                    │   │       │   │   │   │   │   │   │   │   ├── <893>  [!=]
                    │   │       │   │   │   │   │   │   │   │   │   ├── <890> Dot
                    │   │       │   │   │   │   │   │   │   │   │   │   ├── <888> Subscript
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ├── <886> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │   │   │   │   ╰── <887> Constant Int [3]
                    │   │       │   │   │   │   │   │   │   │   │   │   ╰── one_l
                    │   │       │   │   │   │   │   │   │   │   │   ╰── <892> Constant Int [301]
                    │   │       │   │   │   │   │   │   │   │   ╰── <902> Dot
                    │   │       │   │   │   │   │   │   │   │       ├── <900> Dot
                    │   │       │   │   │   │   │   │   │   │       │   ├── <898> Subscript
                    │   │       │   │   │   │   │   │   │   │       │   │   ├── <896> Var [struct_array]
                    │   │       │   │   │   │   │   │   │   │       │   │   ╰── <897> Constant Int [3]
                    │   │       │   │   │   │   │   │   │   │       │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │   │       ╰── one_i
                    │   │       │   │   │   │   │   │   │   ╰── <914> Subscript
                    │   │       │   │   │   │   │   │   │       ├── <912> Dot
                    │   │       │   │   │   │   │   │   │       │   ├── <910> Dot
                    │   │       │   │   │   │   │   │   │       │   │   ├── <908> Subscript
                    │   │       │   │   │   │   │   │   │       │   │   │   ├── <906> Var [struct_array]
                    │   │       │   │   │   │   │   │   │       │   │   │   ╰── <907> Constant Int [3]
                    │   │       │   │   │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │   │       │   ╰── two_arr
                    │   │       │   │   │   │   │   │   │       ╰── <913> Constant Int [0]
                    │   │       │   │   │   │   │   │   ╰── <926> Subscript
                    │   │       │   │   │   │   │   │       ├── <924> Dot
                    │   │       │   │   │   │   │   │       │   ├── <922> Dot
                    │   │       │   │   │   │   │   │       │   │   ├── <920> Subscript
                    │   │       │   │   │   │   │   │       │   │   │   ├── <918> Var [struct_array]
                    │   │       │   │   │   │   │   │       │   │   │   ╰── <919> Constant Int [3]
                    │   │       │   │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │   │       │   ╰── two_arr
                    │   │       │   │   │   │   │   │       ╰── <925> Constant Int [1]
                    │   │       │   │   │   │   │   ╰── <938> Subscript
                    │   │       │   │   │   │   │       ├── <936> Dot
                    │   │       │   │   │   │   │       │   ├── <934> Dot
                    │   │       │   │   │   │   │       │   │   ├── <932> Subscript
                    │   │       │   │   │   │   │       │   │   │   ├── <930> Var [struct_array]
                    │   │       │   │   │   │   │       │   │   │   ╰── <931> Constant Int [3]
                    │   │       │   │   │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │   │   │       │   ╰── two_arr
                    │   │       │   │   │   │   │       ╰── <937> Constant Int [2]
                    │   │       │   │   │   │   ╰── <948> Dot
                    │   │       │   │   │   │       ├── <946> Dot
                    │   │       │   │   │   │       │   ├── <944> Subscript
                    │   │       │   │   │   │       │   │   ├── <942> Var [struct_array]
                    │   │       │   │   │   │       │   │   ╰── <943> Constant Int [3]
                    │   │       │   │   │   │       │   ╰── two_struct
                    │   │       │   │   │   │       ╰── three_u
                    │   │       │   │   │   ╰── <956> Dot
                    │   │       │   │   │       ├── <954> Subscript
                    │   │       │   │   │       │   ├── <952> Var [struct_array]
                    │   │       │   │   │       │   ╰── <953> Constant Int [3]
                    │   │       │   │   │       ╰── three_msg
                    │   │       │   │   ╰── <964> Dot
                    │   │       │   │       ├── <962> Subscript
                    │   │       │   │       │   ├── <960> Var [struct_array]
                    │   │       │   │       │   ╰── <961> Constant Int [3]
                    │   │       │   │       ╰── four_d
                    │   │       │   ╰── <974> Dot
                    │   │       │       ├── <972> Dot
                    │   │       │       │   ├── <970> Subscript
                    │   │       │       │   │   ├── <968> Var [struct_array]
                    │   │       │       │   │   ╰── <969> Constant Int [3]
                    │   │       │       │   ╰── five_pair
                    │   │       │       ╰── a
                    │   │       ╰── <984> Dot
                    │   │           ├── <982> Dot
                    │   │           │   ├── <980> Subscript
                    │   │           │   │   ├── <978> Var [struct_array]
                    │   │           │   │   ╰── <979> Constant Int [3]
                    │   │           │   ╰── five_pair
                    │   │           ╰── b
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <986> Constant Int [0]
                    ╰── Return
                        ╰── <991> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_nested_auto_struct_initializers_client(
) {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct pair {
            int a;
            int b;
        };
        struct inner {
            int one_i;
            unsigned char two_arr[3];
            unsigned three_u;
        };
        struct outer {
            long one_l;
            struct inner two_struct;
            char *three_msg;
            double four_d;
            struct pair five_pair;
        };
        int validate_full_initialization(struct outer *ptr);
        int validate_partial_initialization(struct outer *ptr);
        int validate_mixed_initialization(struct outer *ptr);
        int validate_array_of_structs(struct outer *struct_array);
        int test_full_initialization(void) {
            struct outer full = {-200,
                                 {-171l, {-56, -54, -53}, 40.5},
                                 "Important message!",
                                 -22,
                                 {1, 2}};
            return validate_full_initialization(&full);
        }
        int test_partial_initialization(void) {
            struct outer partial = {1000,
                                    {
                                        1,
                                    },
                                    "Partial"};
            return validate_partial_initialization(&partial);
        }
        int test_mixed_initialization(void) {
            struct inner inner1 = {10};
            struct inner inner2 = {20, {21}, 22u};
            static int flag = 0;
            struct outer mixed = {
                200,
                flag ? inner1 : inner2,
                "mixed",
                10.0,
                {99,
                 100}
            };
            return validate_mixed_initialization(&mixed);
        }
        int test_array_of_structs(void) {
            struct outer s0 = {1, {2, {3, 4, 5}, 6}, "7", 8.0, {9, 10}};
            struct inner in1 = {102, {103, 104, 105}, 106};
            struct pair pair1 = {109, 110};
            struct pair pair2 = {209};
            struct outer s3 = {301};
            struct outer struct_array[4] = {
                s0,
                {101, in1, "107", 108.0, pair1},
                {201,
                 {202, {203}},
                 "207",
                 208.0,
                 pair2},
                s3};
            return validate_array_of_structs(struct_array);
        }
        int main(void) {
            if (!test_full_initialization()) {
                return 1;
            }
            if (!test_partial_initialization()) {
                return 2;
            }
            if (!test_mixed_initialization()) {
                return 3;
            }
            if (!test_array_of_structs()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Unsigned Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three_u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_struct
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── four_d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── five_pair
            │       ╰── Type
            │           ╰── Struct [pair]
            ├── Function [validate_full_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_partial_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_mixed_initialization]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [validate_array_of_structs]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── struct_array
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [outer]
            ├── Function [test_full_initialization]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── full
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <129> Unary [-]
            │       │           │   ╰── <128> Constant Int [200]
            │       │           ├── Compound
            │       │           │   ├── <133> Unary [-]
            │       │           │   │   ╰── <132> Constant Long [171]
            │       │           │   ├── Compound
            │       │           │   │   ├── <137> Unary [-]
            │       │           │   │   │   ╰── <136> Constant Int [56]
            │       │           │   │   ├── <141> Unary [-]
            │       │           │   │   │   ╰── <140> Constant Int [54]
            │       │           │   │   ╰── <145> Unary [-]
            │       │           │   │       ╰── <144> Constant Int [53]
            │       │           │   ╰── <148> Constant Double [+4.05e1]
            │       │           ├── <151> "Important message!"
            │       │           ├── <155> Unary [-]
            │       │           │   ╰── <154> Constant Int [22]
            │       │           ╰── Compound
            │       │               ├── <157> Constant Int [1]
            │       │               ╰── <159> Constant Int [2]
            │       ╰── Return
            │           ╰── <168> FunctionCall [validate_full_initialization]
            │               ╰── <167> AddressOf
            │                   ╰── <166> Var [full]
            ├── Function [test_partial_initialization]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── partial
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <181> Constant Int [1000]
            │       │           ├── Compound
            │       │           │   ╰── <183> Constant Int [1]
            │       │           ╰── <186> "Partial"
            │       ╰── Return
            │           ╰── <194> FunctionCall [validate_partial_initialization]
            │               ╰── <193> AddressOf
            │                   ╰── <192> Var [partial]
            ├── Function [test_mixed_initialization]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── inner1
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <207> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── inner2
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <215> Constant Int [20]
            │       │           ├── Compound
            │       │           │   ╰── <217> Constant Int [21]
            │       │           ╰── <220> Constant UInt [22]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── flag
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <228> Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── mixed
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <235> Constant Int [200]
            │       │           ├── <243> Conditional [?]
            │       │           │   ├── <238> Var [flag]
            │       │           │   ├── Then
            │       │           │   │   ╰── <240> Var [inner1]
            │       │           │   ╰── Else
            │       │           │       ╰── <242> Var [inner2]
            │       │           ├── <245> "mixed"
            │       │           ├── <247> Constant Double [+1e1]
            │       │           ╰── Compound
            │       │               ├── <249> Constant Int [99]
            │       │               ╰── <251> Constant Int [100]
            │       ╰── Return
            │           ╰── <260> FunctionCall [validate_mixed_initialization]
            │               ╰── <259> AddressOf
            │                   ╰── <258> Var [mixed]
            ├── Function [test_array_of_structs]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s0
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <273> Constant Int [1]
            │       │           ├── Compound
            │       │           │   ├── <275> Constant Int [2]
            │       │           │   ├── Compound
            │       │           │   │   ├── <277> Constant Int [3]
            │       │           │   │   ├── <279> Constant Int [4]
            │       │           │   │   ╰── <281> Constant Int [5]
            │       │           │   ╰── <284> Constant Int [6]
            │       │           ├── <287> "7"
            │       │           ├── <289> Constant Double [+8e0]
            │       │           ╰── Compound
            │       │               ├── <291> Constant Int [9]
            │       │               ╰── <293> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── in1
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <302> Constant Int [102]
            │       │           ├── Compound
            │       │           │   ├── <304> Constant Int [103]
            │       │           │   ├── <306> Constant Int [104]
            │       │           │   ╰── <308> Constant Int [105]
            │       │           ╰── <311> Constant Int [106]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── pair1
            │       │   ├── Type
            │       │   │   ╰── Struct [pair]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <319> Constant Int [109]
            │       │           ╰── <321> Constant Int [110]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── pair2
            │       │   ├── Type
            │       │   │   ╰── Struct [pair]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <329> Constant Int [209]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s3
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <337> Constant Int [301]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── struct_array
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 4
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <349> Var [s0]
            │       │           ├── Compound
            │       │           │   ├── <351> Constant Int [101]
            │       │           │   ├── <354> Var [in1]
            │       │           │   ├── <356> "107"
            │       │           │   ├── <358> Constant Double [+1.08e2]
            │       │           │   ╰── <361> Var [pair1]
            │       │           ├── Compound
            │       │           │   ├── <364> Constant Int [201]
            │       │           │   ├── Compound
            │       │           │   │   ├── <366> Constant Int [202]
            │       │           │   │   ╰── Compound
            │       │           │   │       ╰── <368> Constant Int [203]
            │       │           │   ├── <372> "207"
            │       │           │   ├── <374> Constant Double [+2.08e2]
            │       │           │   ╰── <377> Var [pair2]
            │       │           ╰── <381> Var [s3]
            │       ╰── Return
            │           ╰── <388> FunctionCall [validate_array_of_structs]
            │               ╰── <387> Var [struct_array]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <400> Unary [!]
                    │   │       ╰── <399> FunctionCall [test_full_initialization]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <401> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <409> Unary [!]
                    │   │       ╰── <408> FunctionCall [test_partial_initialization]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <410> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <418> Unary [!]
                    │   │       ╰── <417> FunctionCall [test_mixed_initialization]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <419> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <427> Unary [!]
                    │   │       ╰── <426> FunctionCall [test_array_of_structs]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <428> Constant Int [4]
                    ╰── Return
                        ╰── <433> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_nested_static_struct_initializers() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct inner {
            int one_i;
            signed char two_arr[3];
            unsigned three_u;
        };
        struct outer {
            long one_l;
            struct inner two_struct;
            char *three_msg;
            double four_d;
        };
        extern struct outer all_zeros;
        extern struct outer partial;
        extern struct outer full;
        extern struct outer converted;
        extern struct outer struct_array[3];
        int test_uninitialized(void);
        int test_partially_initialized(void);
        int test_fully_intialized(void);
        int test_implicit_conversions(void);
        int test_array_of_structs(void);
        int test_uninitialized(void) {
            if (all_zeros.one_l || all_zeros.three_msg || all_zeros.four_d) {
                return 0;
            }
            if (all_zeros.two_struct.one_i || all_zeros.two_struct.two_arr[0] ||
                all_zeros.two_struct.two_arr[1] || all_zeros.two_struct.two_arr[2] ||
                all_zeros.two_struct.three_u) {
                return 0;
            }
            return 1;
        }
        int test_partially_initialized(void) {
            if (partial.one_l != 100l || strcmp(partial.three_msg, "Hello!")) {
                return 0;
            }
            if (partial.four_d) {
                return 0;
            }
            if (partial.two_struct.one_i != 10 || partial.two_struct.two_arr[0] != 10) {
                return 0;
            }
            if (partial.two_struct.two_arr[1] || partial.two_struct.two_arr[2] ||
                partial.two_struct
                    .three_u) {
                return 0;
            }
            return 1;
        }
        int test_fully_intialized(void) {
            if (full.one_l != 18014398509481979l ||
                strcmp(full.three_msg, "Another message") || full.four_d != 2e12) {
                return 0;
            }
            if (full.two_struct.one_i != 1000 || full.two_struct.two_arr[0] != 'o' ||
                full.two_struct.two_arr[1] != 'k' || full.two_struct.two_arr[2] != 0 ||
                full.two_struct.three_u != 4292870144u) {
                return 0;
            }
            return 1;
        }
        int test_implicit_conversions(void) {
            if (converted.one_l != 10l || converted.three_msg != 0 ||
                converted.four_d != 9223372036854777856.0) {
                return 0;
            }
            if (converted.two_struct.one_i != -2147483646 ||
                converted.two_struct.two_arr[0] != 15 ||
                converted.two_struct.two_arr[1] != 3 ||
                converted.two_struct.two_arr[2] != -127 ||
                converted.two_struct.three_u != 2147483648u) {
                return 0;
            }
            return 1;
        }
        int test_array_of_structs(void) {
            if (struct_array[0].one_l != 1 || struct_array[0].three_msg != 0 ||
                struct_array[0].four_d != 5) {
                return 0;
            }
            if (struct_array[0].two_struct.one_i != 2 ||
                strcmp((char *)struct_array[0].two_struct.two_arr, "ab") ||
                struct_array[0].two_struct.three_u != 3) {
                return 0;
            }
            if (struct_array[1].one_l != 6 ||
                strcmp((char *)struct_array[1].three_msg, "Message") ||
                struct_array[1].four_d != 9) {
                return 0;
            }
            if (struct_array[1].two_struct.one_i != 7 ||
                strcmp((char *)struct_array[1].two_struct.two_arr, "cd") ||
                struct_array[1].two_struct.three_u != 8) {
                return 0;
            }
            if (struct_array[2].one_l || struct_array[2].three_msg ||
                struct_array[2].four_d) {
                return 0;
            }
            if (struct_array[2].two_struct.one_i ||
                struct_array[2].two_struct.two_arr[0] ||
                struct_array[2].two_struct.two_arr[1] ||
                struct_array[2].two_struct.two_arr[2] ||
                struct_array[2].two_struct.three_u) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Signed Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three_u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_struct
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── four_d
            │       ╰── Type
            │           ╰── Double
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── all_zeros
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── full
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── converted
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── struct_array
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Struct [outer]
            │   ╰── Extern
            ├── Function [test_uninitialized]
            ├── Function [test_partially_initialized]
            ├── Function [test_fully_intialized]
            ├── Function [test_implicit_conversions]
            ├── Function [test_array_of_structs]
            ├── Function [test_uninitialized]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <138>  [||]
            │       │   │       ├── <132>  [||]
            │       │   │       │   ├── <126> Dot
            │       │   │       │   │   ├── <124> Var [all_zeros]
            │       │   │       │   │   ╰── one_l
            │       │   │       │   ╰── <131> Dot
            │       │   │       │       ├── <129> Var [all_zeros]
            │       │   │       │       ╰── three_msg
            │       │   │       ╰── <137> Dot
            │       │   │           ├── <135> Var [all_zeros]
            │       │   │           ╰── four_d
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <139> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <187>  [||]
            │       │   │       ├── <179>  [||]
            │       │   │       │   ├── <169>  [||]
            │       │   │       │   │   ├── <159>  [||]
            │       │   │       │   │   │   ├── <149> Dot
            │       │   │       │   │   │   │   ├── <147> Dot
            │       │   │       │   │   │   │   │   ├── <145> Var [all_zeros]
            │       │   │       │   │   │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   ╰── one_i
            │       │   │       │   │   │   ╰── <158> Subscript
            │       │   │       │   │   │       ├── <156> Dot
            │       │   │       │   │   │       │   ├── <154> Dot
            │       │   │       │   │   │       │   │   ├── <152> Var [all_zeros]
            │       │   │       │   │   │       │   │   ╰── two_struct
            │       │   │       │   │   │       │   ╰── two_arr
            │       │   │       │   │   │       ╰── <157> Constant Int [0]
            │       │   │       │   │   ╰── <168> Subscript
            │       │   │       │   │       ├── <166> Dot
            │       │   │       │   │       │   ├── <164> Dot
            │       │   │       │   │       │   │   ├── <162> Var [all_zeros]
            │       │   │       │   │       │   │   ╰── two_struct
            │       │   │       │   │       │   ╰── two_arr
            │       │   │       │   │       ╰── <167> Constant Int [1]
            │       │   │       │   ╰── <178> Subscript
            │       │   │       │       ├── <176> Dot
            │       │   │       │       │   ├── <174> Dot
            │       │   │       │       │   │   ├── <172> Var [all_zeros]
            │       │   │       │       │   │   ╰── two_struct
            │       │   │       │       │   ╰── two_arr
            │       │   │       │       ╰── <177> Constant Int [2]
            │       │   │       ╰── <186> Dot
            │       │   │           ├── <184> Dot
            │       │   │           │   ├── <182> Var [all_zeros]
            │       │   │           │   ╰── two_struct
            │       │   │           ╰── three_u
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <188> Constant Int [0]
            │       ╰── Return
            │           ╰── <193> Constant Int [1]
            ├── Function [test_partially_initialized]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <217>  [||]
            │       │   │       ├── <208>  [!=]
            │       │   │       │   ├── <205> Dot
            │       │   │       │   │   ├── <203> Var [partial]
            │       │   │       │   │   ╰── one_l
            │       │   │       │   ╰── <207> Constant Long [100]
            │       │   │       ╰── <216> FunctionCall [strcmp]
            │       │   │           ├── <214> Dot
            │       │   │           │   ├── <212> Var [partial]
            │       │   │           │   ╰── three_msg
            │       │   │           ╰── <215> "Hello!"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <218> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <226> Dot
            │       │   │       ├── <224> Var [partial]
            │       │   │       ╰── four_d
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <227> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <253>  [||]
            │       │   │       ├── <240>  [!=]
            │       │   │       │   ├── <237> Dot
            │       │   │       │   │   ├── <235> Dot
            │       │   │       │   │   │   ├── <233> Var [partial]
            │       │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   ╰── one_i
            │       │   │       │   ╰── <239> Constant Int [10]
            │       │   │       ╰── <252>  [!=]
            │       │   │           ├── <249> Subscript
            │       │   │           │   ├── <247> Dot
            │       │   │           │   │   ├── <245> Dot
            │       │   │           │   │   │   ├── <243> Var [partial]
            │       │   │           │   │   │   ╰── two_struct
            │       │   │           │   │   ╰── two_arr
            │       │   │           │   ╰── <248> Constant Int [0]
            │       │   │           ╰── <251> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <254> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <284>  [||]
            │       │   │       ├── <276>  [||]
            │       │   │       │   ├── <266> Subscript
            │       │   │       │   │   ├── <264> Dot
            │       │   │       │   │   │   ├── <262> Dot
            │       │   │       │   │   │   │   ├── <260> Var [partial]
            │       │   │       │   │   │   │   ╰── two_struct
            │       │   │       │   │   │   ╰── two_arr
            │       │   │       │   │   ╰── <265> Constant Int [1]
            │       │   │       │   ╰── <275> Subscript
            │       │   │       │       ├── <273> Dot
            │       │   │       │       │   ├── <271> Dot
            │       │   │       │       │   │   ├── <269> Var [partial]
            │       │   │       │       │   │   ╰── two_struct
            │       │   │       │       │   ╰── two_arr
            │       │   │       │       ╰── <274> Constant Int [2]
            │       │   │       ╰── <283> Dot
            │       │   │           ├── <281> Dot
            │       │   │           │   ├── <279> Var [partial]
            │       │   │           │   ╰── two_struct
            │       │   │           ╰── three_u
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <285> Constant Int [0]
            │       ╰── Return
            │           ╰── <290> Constant Int [1]
            ├── Function [test_fully_intialized]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <323>  [||]
            │       │   │       ├── <314>  [||]
            │       │   │       │   ├── <305>  [!=]
            │       │   │       │   │   ├── <302> Dot
            │       │   │       │   │   │   ├── <300> Var [full]
            │       │   │       │   │   │   ╰── one_l
            │       │   │       │   │   ╰── <304> Constant Long [18014398509481979]
            │       │   │       │   ╰── <313> FunctionCall [strcmp]
            │       │   │       │       ├── <311> Dot
            │       │   │       │       │   ├── <309> Var [full]
            │       │   │       │       │   ╰── three_msg
            │       │   │       │       ╰── <312> "Another message"
            │       │   │       ╰── <322>  [!=]
            │       │   │           ├── <319> Dot
            │       │   │           │   ├── <317> Var [full]
            │       │   │           │   ╰── four_d
            │       │   │           ╰── <321> Constant Double [+2e12]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <324> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <387>  [||]
            │       │   │       ├── <376>  [||]
            │       │   │       │   ├── <363>  [||]
            │       │   │       │   │   ├── <350>  [||]
            │       │   │       │   │   │   ├── <337>  [!=]
            │       │   │       │   │   │   │   ├── <334> Dot
            │       │   │       │   │   │   │   │   ├── <332> Dot
            │       │   │       │   │   │   │   │   │   ├── <330> Var [full]
            │       │   │       │   │   │   │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   ╰── one_i
            │       │   │       │   │   │   │   ╰── <336> Constant Int [1000]
            │       │   │       │   │   │   ╰── <349>  [!=]
            │       │   │       │   │   │       ├── <346> Subscript
            │       │   │       │   │   │       │   ├── <344> Dot
            │       │   │       │   │   │       │   │   ├── <342> Dot
            │       │   │       │   │   │       │   │   │   ├── <340> Var [full]
            │       │   │       │   │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │       │   ╰── <345> Constant Int [0]
            │       │   │       │   │   │       ╰── <348> Constant Int [111]
            │       │   │       │   │   ╰── <362>  [!=]
            │       │   │       │   │       ├── <359> Subscript
            │       │   │       │   │       │   ├── <357> Dot
            │       │   │       │   │       │   │   ├── <355> Dot
            │       │   │       │   │       │   │   │   ├── <353> Var [full]
            │       │   │       │   │       │   │   │   ╰── two_struct
            │       │   │       │   │       │   │   ╰── two_arr
            │       │   │       │   │       │   ╰── <358> Constant Int [1]
            │       │   │       │   │       ╰── <361> Constant Int [107]
            │       │   │       │   ╰── <375>  [!=]
            │       │   │       │       ├── <372> Subscript
            │       │   │       │       │   ├── <370> Dot
            │       │   │       │       │   │   ├── <368> Dot
            │       │   │       │       │   │   │   ├── <366> Var [full]
            │       │   │       │       │   │   │   ╰── two_struct
            │       │   │       │       │   │   ╰── two_arr
            │       │   │       │       │   ╰── <371> Constant Int [2]
            │       │   │       │       ╰── <374> Constant Int [0]
            │       │   │       ╰── <386>  [!=]
            │       │   │           ├── <383> Dot
            │       │   │           │   ├── <381> Dot
            │       │   │           │   │   ├── <379> Var [full]
            │       │   │           │   │   ╰── two_struct
            │       │   │           │   ╰── three_u
            │       │   │           ╰── <385> Constant UInt [4292870144]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <388> Constant Int [0]
            │       ╰── Return
            │           ╰── <393> Constant Int [1]
            ├── Function [test_implicit_conversions]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <426>  [||]
            │       │   │       ├── <417>  [||]
            │       │   │       │   ├── <408>  [!=]
            │       │   │       │   │   ├── <405> Dot
            │       │   │       │   │   │   ├── <403> Var [converted]
            │       │   │       │   │   │   ╰── one_l
            │       │   │       │   │   ╰── <407> Constant Long [10]
            │       │   │       │   ╰── <416>  [!=]
            │       │   │       │       ├── <413> Dot
            │       │   │       │       │   ├── <411> Var [converted]
            │       │   │       │       │   ╰── three_msg
            │       │   │       │       ╰── <415> Constant Int [0]
            │       │   │       ╰── <425>  [!=]
            │       │   │           ├── <422> Dot
            │       │   │           │   ├── <420> Var [converted]
            │       │   │           │   ╰── four_d
            │       │   │           ╰── <424> Constant Double [+9.223372036854778e18]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <427> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <494>  [||]
            │       │   │       ├── <483>  [||]
            │       │   │       │   ├── <468>  [||]
            │       │   │       │   │   ├── <455>  [||]
            │       │   │       │   │   │   ├── <442>  [!=]
            │       │   │       │   │   │   │   ├── <437> Dot
            │       │   │       │   │   │   │   │   ├── <435> Dot
            │       │   │       │   │   │   │   │   │   ├── <433> Var [converted]
            │       │   │       │   │   │   │   │   │   ╰── two_struct
            │       │   │       │   │   │   │   │   ╰── one_i
            │       │   │       │   │   │   │   ╰── <441> Unary [-]
            │       │   │       │   │   │   │       ╰── <440> Constant Int [2147483646]
            │       │   │       │   │   │   ╰── <454>  [!=]
            │       │   │       │   │   │       ├── <451> Subscript
            │       │   │       │   │   │       │   ├── <449> Dot
            │       │   │       │   │   │       │   │   ├── <447> Dot
            │       │   │       │   │   │       │   │   │   ├── <445> Var [converted]
            │       │   │       │   │   │       │   │   │   ╰── two_struct
            │       │   │       │   │   │       │   │   ╰── two_arr
            │       │   │       │   │   │       │   ╰── <450> Constant Int [0]
            │       │   │       │   │   │       ╰── <453> Constant Int [15]
            │       │   │       │   │   ╰── <467>  [!=]
            │       │   │       │   │       ├── <464> Subscript
            │       │   │       │   │       │   ├── <462> Dot
            │       │   │       │   │       │   │   ├── <460> Dot
            │       │   │       │   │       │   │   │   ├── <458> Var [converted]
            │       │   │       │   │       │   │   │   ╰── two_struct
            │       │   │       │   │       │   │   ╰── two_arr
            │       │   │       │   │       │   ╰── <463> Constant Int [1]
            │       │   │       │   │       ╰── <466> Constant Int [3]
            │       │   │       │   ╰── <482>  [!=]
            │       │   │       │       ├── <477> Subscript
            │       │   │       │       │   ├── <475> Dot
            │       │   │       │       │   │   ├── <473> Dot
            │       │   │       │       │   │   │   ├── <471> Var [converted]
            │       │   │       │       │   │   │   ╰── two_struct
            │       │   │       │       │   │   ╰── two_arr
            │       │   │       │       │   ╰── <476> Constant Int [2]
            │       │   │       │       ╰── <481> Unary [-]
            │       │   │       │           ╰── <480> Constant Int [127]
            │       │   │       ╰── <493>  [!=]
            │       │   │           ├── <490> Dot
            │       │   │           │   ├── <488> Dot
            │       │   │           │   │   ├── <486> Var [converted]
            │       │   │           │   │   ╰── two_struct
            │       │   │           │   ╰── three_u
            │       │   │           ╰── <492> Constant UInt [2147483648]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <495> Constant Int [0]
            │       ╰── Return
            │           ╰── <500> Constant Int [1]
            ╰── Function [test_array_of_structs]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <539>  [||]
                    │   │       ├── <528>  [||]
                    │   │       │   ├── <517>  [!=]
                    │   │       │   │   ├── <514> Dot
                    │   │       │   │   │   ├── <512> Subscript
                    │   │       │   │   │   │   ├── <510> Var [struct_array]
                    │   │       │   │   │   │   ╰── <511> Constant Int [0]
                    │   │       │   │   │   ╰── one_l
                    │   │       │   │   ╰── <516> Constant Int [1]
                    │   │       │   ╰── <527>  [!=]
                    │   │       │       ├── <524> Dot
                    │   │       │       │   ├── <522> Subscript
                    │   │       │       │   │   ├── <520> Var [struct_array]
                    │   │       │       │   │   ╰── <521> Constant Int [0]
                    │   │       │       │   ╰── three_msg
                    │   │       │       ╰── <526> Constant Int [0]
                    │   │       ╰── <538>  [!=]
                    │   │           ├── <535> Dot
                    │   │           │   ├── <533> Subscript
                    │   │           │   │   ├── <531> Var [struct_array]
                    │   │           │   │   ╰── <532> Constant Int [0]
                    │   │           │   ╰── four_d
                    │   │           ╰── <537> Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <540> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <585>  [||]
                    │   │       ├── <572>  [||]
                    │   │       │   ├── <555>  [!=]
                    │   │       │   │   ├── <552> Dot
                    │   │       │   │   │   ├── <550> Dot
                    │   │       │   │   │   │   ├── <548> Subscript
                    │   │       │   │   │   │   │   ├── <546> Var [struct_array]
                    │   │       │   │   │   │   │   ╰── <547> Constant Int [0]
                    │   │       │   │   │   │   ╰── two_struct
                    │   │       │   │   │   ╰── one_i
                    │   │       │   │   ╰── <554> Constant Int [2]
                    │   │       │   ╰── <571> FunctionCall [strcmp]
                    │   │       │       ├── <569> Cast
                    │   │       │       │   ├── Target
                    │   │       │       │   │   ╰── Pointer
                    │   │       │       │   │       ╰── Char
                    │   │       │       │   ╰── Expression
                    │   │       │       │       ╰── <568> Dot
                    │   │       │       │           ├── <566> Dot
                    │   │       │       │           │   ├── <564> Subscript
                    │   │       │       │           │   │   ├── <562> Var [struct_array]
                    │   │       │       │           │   │   ╰── <563> Constant Int [0]
                    │   │       │       │           │   ╰── two_struct
                    │   │       │       │           ╰── two_arr
                    │   │       │       ╰── <570> "ab"
                    │   │       ╰── <584>  [!=]
                    │   │           ├── <581> Dot
                    │   │           │   ├── <579> Dot
                    │   │           │   │   ├── <577> Subscript
                    │   │           │   │   │   ├── <575> Var [struct_array]
                    │   │           │   │   │   ╰── <576> Constant Int [0]
                    │   │           │   │   ╰── two_struct
                    │   │           │   ╰── three_u
                    │   │           ╰── <583> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <586> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <625>  [||]
                    │   │       ├── <614>  [||]
                    │   │       │   ├── <599>  [!=]
                    │   │       │   │   ├── <596> Dot
                    │   │       │   │   │   ├── <594> Subscript
                    │   │       │   │   │   │   ├── <592> Var [struct_array]
                    │   │       │   │   │   │   ╰── <593> Constant Int [1]
                    │   │       │   │   │   ╰── one_l
                    │   │       │   │   ╰── <598> Constant Int [6]
                    │   │       │   ╰── <613> FunctionCall [strcmp]
                    │   │       │       ├── <611> Cast
                    │   │       │       │   ├── Target
                    │   │       │       │   │   ╰── Pointer
                    │   │       │       │   │       ╰── Char
                    │   │       │       │   ╰── Expression
                    │   │       │       │       ╰── <610> Dot
                    │   │       │       │           ├── <608> Subscript
                    │   │       │       │           │   ├── <606> Var [struct_array]
                    │   │       │       │           │   ╰── <607> Constant Int [1]
                    │   │       │       │           ╰── three_msg
                    │   │       │       ╰── <612> "Message"
                    │   │       ╰── <624>  [!=]
                    │   │           ├── <621> Dot
                    │   │           │   ├── <619> Subscript
                    │   │           │   │   ├── <617> Var [struct_array]
                    │   │           │   │   ╰── <618> Constant Int [1]
                    │   │           │   ╰── four_d
                    │   │           ╰── <623> Constant Int [9]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <626> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <671>  [||]
                    │   │       ├── <658>  [||]
                    │   │       │   ├── <641>  [!=]
                    │   │       │   │   ├── <638> Dot
                    │   │       │   │   │   ├── <636> Dot
                    │   │       │   │   │   │   ├── <634> Subscript
                    │   │       │   │   │   │   │   ├── <632> Var [struct_array]
                    │   │       │   │   │   │   │   ╰── <633> Constant Int [1]
                    │   │       │   │   │   │   ╰── two_struct
                    │   │       │   │   │   ╰── one_i
                    │   │       │   │   ╰── <640> Constant Int [7]
                    │   │       │   ╰── <657> FunctionCall [strcmp]
                    │   │       │       ├── <655> Cast
                    │   │       │       │   ├── Target
                    │   │       │       │   │   ╰── Pointer
                    │   │       │       │   │       ╰── Char
                    │   │       │       │   ╰── Expression
                    │   │       │       │       ╰── <654> Dot
                    │   │       │       │           ├── <652> Dot
                    │   │       │       │           │   ├── <650> Subscript
                    │   │       │       │           │   │   ├── <648> Var [struct_array]
                    │   │       │       │           │   │   ╰── <649> Constant Int [1]
                    │   │       │       │           │   ╰── two_struct
                    │   │       │       │           ╰── two_arr
                    │   │       │       ╰── <656> "cd"
                    │   │       ╰── <670>  [!=]
                    │   │           ├── <667> Dot
                    │   │           │   ├── <665> Dot
                    │   │           │   │   ├── <663> Subscript
                    │   │           │   │   │   ├── <661> Var [struct_array]
                    │   │           │   │   │   ╰── <662> Constant Int [1]
                    │   │           │   │   ╰── two_struct
                    │   │           │   ╰── three_u
                    │   │           ╰── <669> Constant Int [8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <672> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <698>  [||]
                    │   │       ├── <690>  [||]
                    │   │       │   ├── <682> Dot
                    │   │       │   │   ├── <680> Subscript
                    │   │       │   │   │   ├── <678> Var [struct_array]
                    │   │       │   │   │   ╰── <679> Constant Int [2]
                    │   │       │   │   ╰── one_l
                    │   │       │   ╰── <689> Dot
                    │   │       │       ├── <687> Subscript
                    │   │       │       │   ├── <685> Var [struct_array]
                    │   │       │       │   ╰── <686> Constant Int [2]
                    │   │       │       ╰── three_msg
                    │   │       ╰── <697> Dot
                    │   │           ├── <695> Subscript
                    │   │           │   ├── <693> Var [struct_array]
                    │   │           │   ╰── <694> Constant Int [2]
                    │   │           ╰── four_d
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <699> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <757>  [||]
                    │   │       ├── <747>  [||]
                    │   │       │   ├── <735>  [||]
                    │   │       │   │   ├── <723>  [||]
                    │   │       │   │   │   ├── <711> Dot
                    │   │       │   │   │   │   ├── <709> Dot
                    │   │       │   │   │   │   │   ├── <707> Subscript
                    │   │       │   │   │   │   │   │   ├── <705> Var [struct_array]
                    │   │       │   │   │   │   │   │   ╰── <706> Constant Int [2]
                    │   │       │   │   │   │   │   ╰── two_struct
                    │   │       │   │   │   │   ╰── one_i
                    │   │       │   │   │   ╰── <722> Subscript
                    │   │       │   │   │       ├── <720> Dot
                    │   │       │   │   │       │   ├── <718> Dot
                    │   │       │   │   │       │   │   ├── <716> Subscript
                    │   │       │   │   │       │   │   │   ├── <714> Var [struct_array]
                    │   │       │   │   │       │   │   │   ╰── <715> Constant Int [2]
                    │   │       │   │   │       │   │   ╰── two_struct
                    │   │       │   │   │       │   ╰── two_arr
                    │   │       │   │   │       ╰── <721> Constant Int [0]
                    │   │       │   │   ╰── <734> Subscript
                    │   │       │   │       ├── <732> Dot
                    │   │       │   │       │   ├── <730> Dot
                    │   │       │   │       │   │   ├── <728> Subscript
                    │   │       │   │       │   │   │   ├── <726> Var [struct_array]
                    │   │       │   │       │   │   │   ╰── <727> Constant Int [2]
                    │   │       │   │       │   │   ╰── two_struct
                    │   │       │   │       │   ╰── two_arr
                    │   │       │   │       ╰── <733> Constant Int [1]
                    │   │       │   ╰── <746> Subscript
                    │   │       │       ├── <744> Dot
                    │   │       │       │   ├── <742> Dot
                    │   │       │       │   │   ├── <740> Subscript
                    │   │       │       │   │   │   ├── <738> Var [struct_array]
                    │   │       │       │   │   │   ╰── <739> Constant Int [2]
                    │   │       │       │   │   ╰── two_struct
                    │   │       │       │   ╰── two_arr
                    │   │       │       ╰── <745> Constant Int [2]
                    │   │       ╰── <756> Dot
                    │   │           ├── <754> Dot
                    │   │           │   ├── <752> Subscript
                    │   │           │   │   ├── <750> Var [struct_array]
                    │   │           │   │   ╰── <751> Constant Int [2]
                    │   │           │   ╰── two_struct
                    │   │           ╰── three_u
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <758> Constant Int [0]
                    ╰── Return
                        ╰── <763> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_nested_static_struct_initializers_client(
) {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct inner {
            int one_i;
            signed char two_arr[3];
            unsigned three_u;
        };
        struct outer {
            long one_l;
            struct inner two_struct;
            char *three_msg;
            double four_d;
        };
        extern struct outer all_zeros;
        extern struct outer partial;
        extern struct outer full;
        extern struct outer converted;
        extern struct outer struct_array[3];
        int test_uninitialized(void);
        int test_partially_initialized(void);
        int test_fully_intialized(void);
        int test_implicit_conversions(void);
        int test_array_of_structs(void);
        struct outer all_zeros;
        struct outer partial = {
            100l,
            {10, {10}},
            "Hello!"};
        struct outer full = {
            18014398509481979l,
            {1000, "ok",
             4292870144u},
            "Another message",
            2e12};
        struct outer converted = {
            10.5,
            {
                2147483650u,
                {
                    15.6,
                    17592186044419l,
                    2147483777u
                },
                1152921506754330624ul
            },
            0ul,
            9223372036854776833ul
        };
        struct outer struct_array[3] = {{1, {2, "ab", 3}, 0, 5},
                                        {6, {7, "cd", 8}, "Message", 9}};
        int main(void) {
            if (!test_uninitialized()) {
                return 1;
            }
            if (!test_partially_initialized()) {
                return 2;
            }
            if (!test_fully_intialized()) {
                return 3;
            }
            if (!test_implicit_conversions()) {
                return 4;
            }
            if (!test_array_of_structs()) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Signed Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three_u
            │       ╰── Type
            │           ╰── Unsigned Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_struct
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── four_d
            │       ╰── Type
            │           ╰── Double
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── all_zeros
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── full
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── converted
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── struct_array
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Struct [outer]
            │   ╰── Extern
            ├── Function [test_uninitialized]
            ├── Function [test_partially_initialized]
            ├── Function [test_fully_intialized]
            ├── Function [test_implicit_conversions]
            ├── Function [test_array_of_structs]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── all_zeros
            │   ╰── Type
            │       ╰── Struct [outer]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <127> Constant Long [100]
            │           ├── Compound
            │           │   ├── <129> Constant Int [10]
            │           │   ╰── Compound
            │           │       ╰── <131> Constant Int [10]
            │           ╰── <135> "Hello!"
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── full
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <143> Constant Long [18014398509481979]
            │           ├── Compound
            │           │   ├── <145> Constant Int [1000]
            │           │   ├── <147> "ok"
            │           │   ╰── <149> Constant UInt [4292870144]
            │           ├── <152> "Another message"
            │           ╰── <154> Constant Double [+2e12]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── converted
            │   ├── Type
            │   │   ╰── Struct [outer]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <162> Constant Double [+1.05e1]
            │           ├── Compound
            │           │   ├── <164> Constant UInt [2147483650]
            │           │   ├── Compound
            │           │   │   ├── <166> Constant Double [+1.56e1]
            │           │   │   ├── <168> Constant Long [17592186044419]
            │           │   │   ╰── <170> Constant UInt [2147483777]
            │           │   ╰── <173> Constant ULong [1152921506754330624]
            │           ├── <176> Constant ULong [0]
            │           ╰── <178> Constant ULong [9223372036854776833]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── struct_array
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Struct [outer]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Compound
            │           │   ├── <189> Constant Int [1]
            │           │   ├── Compound
            │           │   │   ├── <191> Constant Int [2]
            │           │   │   ├── <193> "ab"
            │           │   │   ╰── <195> Constant Int [3]
            │           │   ├── <198> Constant Int [0]
            │           │   ╰── <200> Constant Int [5]
            │           ╰── Compound
            │               ├── <203> Constant Int [6]
            │               ├── Compound
            │               │   ├── <205> Constant Int [7]
            │               │   ├── <207> "cd"
            │               │   ╰── <209> Constant Int [8]
            │               ├── <212> "Message"
            │               ╰── <214> Constant Int [9]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <227> Unary [!]
                    │   │       ╰── <226> FunctionCall [test_uninitialized]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <228> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <236> Unary [!]
                    │   │       ╰── <235> FunctionCall [test_partially_initialized]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <237> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <245> Unary [!]
                    │   │       ╰── <244> FunctionCall [test_fully_intialized]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <246> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <254> Unary [!]
                    │   │       ╰── <253> FunctionCall [test_implicit_conversions]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <255> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <263> Unary [!]
                    │   │       ╰── <262> FunctionCall [test_array_of_structs]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <264> Constant Int [5]
                    ╰── Return
                        ╰── <269> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_static_struct_initializers() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct s {
            double one_d;
            char *two_msg;
            unsigned char three_arr[3];
            int four_i;
        };
        extern struct s uninitialized;
        extern struct s partial;
        extern struct s partial_with_array;
        extern struct s converted;
        int test_uninitialized(void);
        int test_partially_initialized(void);
        int test_partial_inner_init(void);
        int test_implicit_conversion(void);
        int test_uninitialized(void) {
            if (uninitialized.one_d || uninitialized.two_msg ||
                uninitialized.three_arr[0] || uninitialized.three_arr[1] ||
                uninitialized.three_arr[2] || uninitialized.four_i) {
                return 0;
            }
            return 1;
        }
        int test_partially_initialized(void) {
            if (partial.one_d != 1.0 || strcmp(partial.two_msg, "Hello")) {
                return 0;
            }
            if (partial.three_arr[0] || partial.three_arr[1] || partial.three_arr[2] ||
                partial.four_i) {
                return 0;
            }
            return 1;
        }
        int test_partial_inner_init(void) {
            if (partial_with_array.one_d != 3.0 ||
                strcmp(partial_with_array.two_msg, "!") ||
                partial_with_array.three_arr[0] != 1 ||
                partial_with_array.four_i != 2) {
                return 0;
            }
            if (partial_with_array.three_arr[1] || partial_with_array.three_arr[2]) {
                return 0;
            }
            return 1;
        }
        int test_implicit_conversion(void) {
            if (converted.one_d != 1152921504606846976.0 || converted.two_msg ||
                converted.three_arr[0] != 'a' || converted.three_arr[1] != 'b' ||
                converted.three_arr[2] != 'c' || converted.four_i != 5) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Unsigned Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── four_i
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── uninitialized
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial_with_array
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── converted
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── Function [test_uninitialized]
            ├── Function [test_partially_initialized]
            ├── Function [test_partial_inner_init]
            ├── Function [test_implicit_conversion]
            ├── Function [test_uninitialized]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <132>  [||]
            │       │   │       ├── <126>  [||]
            │       │   │       │   ├── <118>  [||]
            │       │   │       │   │   ├── <110>  [||]
            │       │   │       │   │   │   ├── <102>  [||]
            │       │   │       │   │   │   │   ├── <96> Dot
            │       │   │       │   │   │   │   │   ├── <94> Var [uninitialized]
            │       │   │       │   │   │   │   │   ╰── one_d
            │       │   │       │   │   │   │   ╰── <101> Dot
            │       │   │       │   │   │   │       ├── <99> Var [uninitialized]
            │       │   │       │   │   │   │       ╰── two_msg
            │       │   │       │   │   │   ╰── <109> Subscript
            │       │   │       │   │   │       ├── <107> Dot
            │       │   │       │   │   │       │   ├── <105> Var [uninitialized]
            │       │   │       │   │   │       │   ╰── three_arr
            │       │   │       │   │   │       ╰── <108> Constant Int [0]
            │       │   │       │   │   ╰── <117> Subscript
            │       │   │       │   │       ├── <115> Dot
            │       │   │       │   │       │   ├── <113> Var [uninitialized]
            │       │   │       │   │       │   ╰── three_arr
            │       │   │       │   │       ╰── <116> Constant Int [1]
            │       │   │       │   ╰── <125> Subscript
            │       │   │       │       ├── <123> Dot
            │       │   │       │       │   ├── <121> Var [uninitialized]
            │       │   │       │       │   ╰── three_arr
            │       │   │       │       ╰── <124> Constant Int [2]
            │       │   │       ╰── <131> Dot
            │       │   │           ├── <129> Var [uninitialized]
            │       │   │           ╰── four_i
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <133> Constant Int [0]
            │       ╰── Return
            │           ╰── <138> Constant Int [1]
            ├── Function [test_partially_initialized]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <162>  [||]
            │       │   │       ├── <153>  [!=]
            │       │   │       │   ├── <150> Dot
            │       │   │       │   │   ├── <148> Var [partial]
            │       │   │       │   │   ╰── one_d
            │       │   │       │   ╰── <152> Constant Double [+1e0]
            │       │   │       ╰── <161> FunctionCall [strcmp]
            │       │   │           ├── <159> Dot
            │       │   │           │   ├── <157> Var [partial]
            │       │   │           │   ╰── two_msg
            │       │   │           ╰── <160> "Hello"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <163> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <195>  [||]
            │       │   │       ├── <189>  [||]
            │       │   │       │   ├── <181>  [||]
            │       │   │       │   │   ├── <173> Subscript
            │       │   │       │   │   │   ├── <171> Dot
            │       │   │       │   │   │   │   ├── <169> Var [partial]
            │       │   │       │   │   │   │   ╰── three_arr
            │       │   │       │   │   │   ╰── <172> Constant Int [0]
            │       │   │       │   │   ╰── <180> Subscript
            │       │   │       │   │       ├── <178> Dot
            │       │   │       │   │       │   ├── <176> Var [partial]
            │       │   │       │   │       │   ╰── three_arr
            │       │   │       │   │       ╰── <179> Constant Int [1]
            │       │   │       │   ╰── <188> Subscript
            │       │   │       │       ├── <186> Dot
            │       │   │       │       │   ├── <184> Var [partial]
            │       │   │       │       │   ╰── three_arr
            │       │   │       │       ╰── <187> Constant Int [2]
            │       │   │       ╰── <194> Dot
            │       │   │           ├── <192> Var [partial]
            │       │   │           ╰── four_i
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <196> Constant Int [0]
            │       ╰── Return
            │           ╰── <201> Constant Int [1]
            ├── Function [test_partial_inner_init]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <245>  [||]
            │       │   │       ├── <236>  [||]
            │       │   │       │   ├── <225>  [||]
            │       │   │       │   │   ├── <216>  [!=]
            │       │   │       │   │   │   ├── <213> Dot
            │       │   │       │   │   │   │   ├── <211> Var [partial_with_array]
            │       │   │       │   │   │   │   ╰── one_d
            │       │   │       │   │   │   ╰── <215> Constant Double [+3e0]
            │       │   │       │   │   ╰── <224> FunctionCall [strcmp]
            │       │   │       │   │       ├── <222> Dot
            │       │   │       │   │       │   ├── <220> Var [partial_with_array]
            │       │   │       │   │       │   ╰── two_msg
            │       │   │       │   │       ╰── <223> "!"
            │       │   │       │   ╰── <235>  [!=]
            │       │   │       │       ├── <232> Subscript
            │       │   │       │       │   ├── <230> Dot
            │       │   │       │       │   │   ├── <228> Var [partial_with_array]
            │       │   │       │       │   │   ╰── three_arr
            │       │   │       │       │   ╰── <231> Constant Int [0]
            │       │   │       │       ╰── <234> Constant Int [1]
            │       │   │       ╰── <244>  [!=]
            │       │   │           ├── <241> Dot
            │       │   │           │   ├── <239> Var [partial_with_array]
            │       │   │           │   ╰── four_i
            │       │   │           ╰── <243> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <246> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <264>  [||]
            │       │   │       ├── <256> Subscript
            │       │   │       │   ├── <254> Dot
            │       │   │       │   │   ├── <252> Var [partial_with_array]
            │       │   │       │   │   ╰── three_arr
            │       │   │       │   ╰── <255> Constant Int [1]
            │       │   │       ╰── <263> Subscript
            │       │   │           ├── <261> Dot
            │       │   │           │   ├── <259> Var [partial_with_array]
            │       │   │           │   ╰── three_arr
            │       │   │           ╰── <262> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <265> Constant Int [0]
            │       ╰── Return
            │           ╰── <270> Constant Int [1]
            ╰── Function [test_implicit_conversion]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <333>  [||]
                    │   │       ├── <324>  [||]
                    │   │       │   ├── <313>  [||]
                    │   │       │   │   ├── <302>  [||]
                    │   │       │   │   │   ├── <291>  [||]
                    │   │       │   │   │   │   ├── <285>  [!=]
                    │   │       │   │   │   │   │   ├── <282> Dot
                    │   │       │   │   │   │   │   │   ├── <280> Var [converted]
                    │   │       │   │   │   │   │   │   ╰── one_d
                    │   │       │   │   │   │   │   ╰── <284> Constant Double [+1.152921504606847e18]
                    │   │       │   │   │   │   ╰── <290> Dot
                    │   │       │   │   │   │       ├── <288> Var [converted]
                    │   │       │   │   │   │       ╰── two_msg
                    │   │       │   │   │   ╰── <301>  [!=]
                    │   │       │   │   │       ├── <298> Subscript
                    │   │       │   │   │       │   ├── <296> Dot
                    │   │       │   │   │       │   │   ├── <294> Var [converted]
                    │   │       │   │   │       │   │   ╰── three_arr
                    │   │       │   │   │       │   ╰── <297> Constant Int [0]
                    │   │       │   │   │       ╰── <300> Constant Int [97]
                    │   │       │   │   ╰── <312>  [!=]
                    │   │       │   │       ├── <309> Subscript
                    │   │       │   │       │   ├── <307> Dot
                    │   │       │   │       │   │   ├── <305> Var [converted]
                    │   │       │   │       │   │   ╰── three_arr
                    │   │       │   │       │   ╰── <308> Constant Int [1]
                    │   │       │   │       ╰── <311> Constant Int [98]
                    │   │       │   ╰── <323>  [!=]
                    │   │       │       ├── <320> Subscript
                    │   │       │       │   ├── <318> Dot
                    │   │       │       │   │   ├── <316> Var [converted]
                    │   │       │       │   │   ╰── three_arr
                    │   │       │       │   ╰── <319> Constant Int [2]
                    │   │       │       ╰── <322> Constant Int [99]
                    │   │       ╰── <332>  [!=]
                    │   │           ├── <329> Dot
                    │   │           │   ├── <327> Var [converted]
                    │   │           │   ╰── four_i
                    │   │           ╰── <331> Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <334> Constant Int [0]
                    ╰── Return
                        ╰── <339> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_static_struct_initializers_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct s {
            double one_d;
            char *two_msg;
            unsigned char three_arr[3];
            int four_i;
        };
        extern struct s uninitialized;
        extern struct s partial;
        extern struct s partial_with_array;
        extern struct s converted;
        int test_uninitialized(void);
        int test_partially_initialized(void);
        int test_partial_inner_init(void);
        int test_implicit_conversion(void);
        struct s uninitialized;
        struct s partial = {1.0, "Hello"};
        struct s partial_with_array = {3.0, "!", {1}, 2};
        struct s converted = {
            1152921504606846977l,
            0l,
            "abc",
            17179869189l
        };
        int main(void) {
            if (!test_uninitialized()) {
                return 1;
            }
            if (!test_partially_initialized()) {
                return 2;
            }
            if (!test_partial_inner_init()) {
                return 3;
            }
            if (!test_implicit_conversion()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── one_d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two_msg
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three_arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Unsigned Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── four_i
            │       ╰── Type
            │           ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── uninitialized
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial_with_array
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── converted
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── Function [test_uninitialized]
            ├── Function [test_partially_initialized]
            ├── Function [test_partial_inner_init]
            ├── Function [test_implicit_conversion]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── uninitialized
            │   ╰── Type
            │       ╰── Struct [s]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <97> Constant Double [+1e0]
            │           ╰── <99> "Hello"
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── partial_with_array
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <107> Constant Double [+3e0]
            │           ├── <109> "!"
            │           ├── Compound
            │           │   ╰── <111> Constant Int [1]
            │           ╰── <114> Constant Int [2]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── converted
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <122> Constant Long [1152921504606846977]
            │           ├── <124> Constant Long [0]
            │           ├── <126> "abc"
            │           ╰── <128> Constant Long [17179869189]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <140> Unary [!]
                    │   │       ╰── <139> FunctionCall [test_uninitialized]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <141> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <149> Unary [!]
                    │   │       ╰── <148> FunctionCall [test_partially_initialized]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <150> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <158> Unary [!]
                    │   │       ╰── <157> FunctionCall [test_partial_inner_init]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <159> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <167> Unary [!]
                    │   │       ╰── <166> FunctionCall [test_implicit_conversion]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <168> Constant Int [4]
                    ╰── Return
                        ╰── <173> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_opaque_struct() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int puts(char *s);
        void *malloc(unsigned long size);
        struct s {
            int member1;
            double member2;
            char *member3;
        };
        struct s *create_struct(int i, double d, char *s) {
            struct s *ptr = malloc(sizeof(struct s));
            ptr->member1 = i;
            ptr->member2 = d;
            ptr->member3 = s;
            return ptr;
        }
        void increment_struct(struct s *ptr) {
            ptr->member1 = ptr->member1 + 1;
            ptr->member2 = ptr->member2 + 1;
            ptr->member3 = ptr->member3;
        }
        int check_struct(struct s *ptr, int expected_i, double expected_d,
                         char *expected_s) {
            if (ptr->member1 != expected_i) {
                return 0;
            }
            if (ptr->member2 != expected_d) {
                return 0;
            }
            if (strcmp(ptr->member3, expected_s)) {
                return 0;
            }
            return 1;
        }
        void print_struct_msg(struct s *ptr) {
            puts(ptr->member3);
        }
        static struct s internal = {1, 2.0, "static struct"};
        struct s *get_internal_struct(void) {
            return &internal;
        }
        struct s incomplete_var = {3, 4.0, "global struct"};
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [puts]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member1
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── member2
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── member3
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Char
            ├── Function [create_struct]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Char
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <85> FunctionCall [malloc]
            │       │           ╰── <84> SizeOfType
            │       │               ╰── Struct [s]
            │       ├── <95> Assign [=]
            │       │   ├── <91> Arrow
            │       │   │   ├── <89> Var [ptr]
            │       │   │   ╰── member1
            │       │   ╰── <94> Var [i]
            │       ├── <104> Assign [=]
            │       │   ├── <100> Arrow
            │       │   │   ├── <98> Var [ptr]
            │       │   │   ╰── member2
            │       │   ╰── <103> Var [d]
            │       ├── <113> Assign [=]
            │       │   ├── <109> Arrow
            │       │   │   ├── <107> Var [ptr]
            │       │   │   ╰── member3
            │       │   ╰── <112> Var [s]
            │       ╰── Return
            │           ╰── <116> Var [ptr]
            ├── Function [increment_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [s]
            │   ╰── Body
            │       ├── <143> Assign [=]
            │       │   ├── <134> Arrow
            │       │   │   ├── <132> Var [ptr]
            │       │   │   ╰── member1
            │       │   ╰── <142>  [+]
            │       │       ├── <139> Arrow
            │       │       │   ├── <137> Var [ptr]
            │       │       │   ╰── member1
            │       │       ╰── <141> Constant Int [1]
            │       ├── <157> Assign [=]
            │       │   ├── <148> Arrow
            │       │   │   ├── <146> Var [ptr]
            │       │   │   ╰── member2
            │       │   ╰── <156>  [+]
            │       │       ├── <153> Arrow
            │       │       │   ├── <151> Var [ptr]
            │       │       │   ╰── member2
            │       │       ╰── <155> Constant Int [1]
            │       ╰── <168> Assign [=]
            │           ├── <162> Arrow
            │           │   ├── <160> Var [ptr]
            │           │   ╰── member3
            │           ╰── <167> Arrow
            │               ├── <165> Var [ptr]
            │               ╰── member3
            ├── Function [check_struct]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ptr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Struct [s]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── expected_i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── expected_d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected_s
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <201>  [!=]
            │       │   │       ├── <197> Arrow
            │       │   │       │   ├── <195> Var [ptr]
            │       │   │       │   ╰── member1
            │       │   │       ╰── <200> Var [expected_i]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <202> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <214>  [!=]
            │       │   │       ├── <210> Arrow
            │       │   │       │   ├── <208> Var [ptr]
            │       │   │       │   ╰── member2
            │       │   │       ╰── <213> Var [expected_d]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <215> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <227> FunctionCall [strcmp]
            │       │   │       ├── <224> Arrow
            │       │   │       │   ├── <222> Var [ptr]
            │       │   │       │   ╰── member3
            │       │   │       ╰── <226> Var [expected_s]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <228> Constant Int [0]
            │       ╰── Return
            │           ╰── <233> Constant Int [1]
            ├── Function [print_struct_msg]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [s]
            │   ╰── Body
            │       ╰── <253> FunctionCall [puts]
            │           ╰── <252> Arrow
            │               ├── <250> Var [ptr]
            │               ╰── member3
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── internal
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ├── Initializer
            │   │   ╰── Compound
            │   │       ├── <262> Constant Int [1]
            │   │       ├── <264> Constant Double [+2e0]
            │   │       ╰── <266> "static struct"
            │   ╰── Static
            ├── Function [get_internal_struct]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <280> AddressOf
            │               ╰── <279> Var [internal]
            ╰── VarDeclaration
                ├── Name
                │   ╰── incomplete_var
                ├── Type
                │   ╰── Struct [s]
                ╰── Initializer
                    ╰── Compound
                        ├── <288> Constant Int [3]
                        ├── <290> Constant Double [+4e0]
                        ╰── <292> "global struct"
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_opaque_struct_client() {
    let src = r#"
        struct s;
        struct s *create_struct(int i, double d, char *s);
        void increment_struct(struct s *src_ptr);
        int check_struct(struct s *ptr, int expected_i, double expected_d,
                         char *expected_s);
        void print_struct_msg(struct s *ptr);
        struct s *get_internal_struct(void);
        extern struct s incomplete_var;
        int main(void) {
            struct s *new_struct = create_struct(101, 102.0, "new struct");
            struct s *internal_struct = get_internal_struct();
            print_struct_msg(new_struct);
            print_struct_msg(internal_struct);
            print_struct_msg(&incomplete_var);
            increment_struct(new_struct);
            increment_struct(&incomplete_var);
            if (!check_struct(new_struct, 102, 103.0, "new struct")) {
                return 1;
            }
            if (!check_struct(&incomplete_var, 4, 5.0, "global struct")) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [create_struct]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [increment_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── src_ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [check_struct]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [s]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_i
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── expected_s
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [print_struct_msg]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ├── Function [get_internal_struct]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── incomplete_var
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── new_struct
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── <100> FunctionCall [create_struct]
                    │           ├── <97> Constant Int [101]
                    │           ├── <98> Constant Double [+1.02e2]
                    │           ╰── <99> "new struct"
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── internal_struct
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── <110> FunctionCall [get_internal_struct]
                    ├── <116> FunctionCall [print_struct_msg]
                    │   ╰── <115> Var [new_struct]
                    ├── <121> FunctionCall [print_struct_msg]
                    │   ╰── <120> Var [internal_struct]
                    ├── <127> FunctionCall [print_struct_msg]
                    │   ╰── <126> AddressOf
                    │       ╰── <125> Var [incomplete_var]
                    ├── <132> FunctionCall [increment_struct]
                    │   ╰── <131> Var [new_struct]
                    ├── <138> FunctionCall [increment_struct]
                    │   ╰── <137> AddressOf
                    │       ╰── <136> Var [incomplete_var]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <148> Unary [!]
                    │   │       ╰── <147> FunctionCall [check_struct]
                    │   │           ├── <143> Var [new_struct]
                    │   │           ├── <144> Constant Int [102]
                    │   │           ├── <145> Constant Double [+1.03e2]
                    │   │           ╰── <146> "new struct"
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <149> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <163> Unary [!]
                    │   │       ╰── <162> FunctionCall [check_struct]
                    │   │           ├── <158> AddressOf
                    │   │           │   ╰── <157> Var [incomplete_var]
                    │   │           ├── <159> Constant Int [4]
                    │   │           ├── <160> Constant Double [+5e0]
                    │   │           ╰── <161> "global struct"
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <164> Constant Int [2]
                    ╰── Return
                        ╰── <169> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_param_struct_pointer() {
    let src = r#"
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        int access_members_through_pointer(struct outer *ptr, int expected_a,
                                           int expected_b, double expected_d,
                                           int expected_i);
        void update_members_through_pointer(struct outer *ptr, int a, int b,
                                            struct inner *inner_ptr);
        
        int access_members_through_pointer(struct outer *ptr, int expected_a,
                                           int expected_b, double expected_d,
                                           int expected_i) {
            if (ptr->a != expected_a) {
                return 0;
            }
            if (ptr->b != expected_b) {
                return 0;
            }
            if (ptr->substruct.d != expected_d) {
                return 0;
            }
            if (ptr->substruct.i != expected_i) {
                return 0;
            }
            return 1;
        }
        void update_members_through_pointer(struct outer *ptr, int a, int b,
                                            struct inner *inner_ptr) {
            ptr->a = a;
            ptr->b = b;
            ptr->substruct = *inner_ptr;
            return;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── substruct
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [access_members_through_pointer]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [outer]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── expected_i
            │           ╰── Type
            │               ╰── Int
            ├── Function [update_members_through_pointer]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [outer]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── inner_ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [inner]
            ├── Function [access_members_through_pointer]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ptr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Struct [outer]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── expected_a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── expected_b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── expected_d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected_i
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <115>  [!=]
            │       │   │       ├── <111> Arrow
            │       │   │       │   ├── <109> Var [ptr]
            │       │   │       │   ╰── a
            │       │   │       ╰── <114> Var [expected_a]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <116> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <128>  [!=]
            │       │   │       ├── <124> Arrow
            │       │   │       │   ├── <122> Var [ptr]
            │       │   │       │   ╰── b
            │       │   │       ╰── <127> Var [expected_b]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <129> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <143>  [!=]
            │       │   │       ├── <139> Dot
            │       │   │       │   ├── <137> Arrow
            │       │   │       │   │   ├── <135> Var [ptr]
            │       │   │       │   │   ╰── substruct
            │       │   │       │   ╰── d
            │       │   │       ╰── <142> Var [expected_d]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <144> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <158>  [!=]
            │       │   │       ├── <154> Dot
            │       │   │       │   ├── <152> Arrow
            │       │   │       │   │   ├── <150> Var [ptr]
            │       │   │       │   │   ╰── substruct
            │       │   │       │   ╰── i
            │       │   │       ╰── <157> Var [expected_i]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <159> Constant Int [0]
            │       ╰── Return
            │           ╰── <164> Constant Int [1]
            ╰── Function [update_members_through_pointer]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── ptr
                │   │   ╰── Type
                │   │       ╰── Pointer
                │   │           ╰── Struct [outer]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── inner_ptr
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Struct [inner]
                ╰── Body
                    ├── <198> Assign [=]
                    │   ├── <194> Arrow
                    │   │   ├── <192> Var [ptr]
                    │   │   ╰── a
                    │   ╰── <197> Var [a]
                    ├── <207> Assign [=]
                    │   ├── <203> Arrow
                    │   │   ├── <201> Var [ptr]
                    │   │   ╰── b
                    │   ╰── <206> Var [b]
                    ├── <217> Assign [=]
                    │   ├── <212> Arrow
                    │   │   ├── <210> Var [ptr]
                    │   │   ╰── substruct
                    │   ╰── <216> Dereference
                    │       ╰── <215> Var [inner_ptr]
                    ╰── Return
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_param_struct_pointer_client() {
    let src = r#"
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        int access_members_through_pointer(struct outer *ptr, int expected_a,
                                           int expected_b, double expected_d,
                                           int expected_i);
        void update_members_through_pointer(struct outer *ptr, int a, int b,
                                            struct inner *inner_ptr);
        
        int main(void) {
            struct outer s = {1, 2, {3.0, 4}};
            if (!access_members_through_pointer(&s, 1, 2, 3.0, 4)) {
                return 1;
            }
            struct inner inner_struct = {7, 8};
            update_members_through_pointer(&s, 5, 6, &inner_struct);
            if (s.a != 5 || s.b != 6 || s.substruct.d != 7 || s.substruct.i != 8) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── substruct
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [access_members_through_pointer]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [outer]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── expected_d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── expected_i
            │           ╰── Type
            │               ╰── Int
            ├── Function [update_members_through_pointer]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Struct [outer]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── inner_ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <94> Constant Int [1]
                    │           ├── <96> Constant Int [2]
                    │           ╰── Compound
                    │               ├── <98> Constant Double [+3e0]
                    │               ╰── <100> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <115> Unary [!]
                    │   │       ╰── <114> FunctionCall [access_members_through_pointer]
                    │   │           ├── <109> AddressOf
                    │   │           │   ╰── <108> Var [s]
                    │   │           ├── <110> Constant Int [1]
                    │   │           ├── <111> Constant Int [2]
                    │   │           ├── <112> Constant Double [+3e0]
                    │   │           ╰── <113> Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <116> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── inner_struct
                    │   ├── Type
                    │   │   ╰── Struct [inner]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <125> Constant Int [7]
                    │           ╰── <127> Constant Int [8]
                    ├── <140> FunctionCall [update_members_through_pointer]
                    │   ├── <134> AddressOf
                    │   │   ╰── <133> Var [s]
                    │   ├── <135> Constant Int [5]
                    │   ├── <136> Constant Int [6]
                    │   ╰── <139> AddressOf
                    │       ╰── <138> Var [inner_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <179>  [||]
                    │   │       ├── <168>  [||]
                    │   │       │   ├── <157>  [||]
                    │   │       │   │   ├── <148>  [!=]
                    │   │       │   │   │   ├── <145> Dot
                    │   │       │   │   │   │   ├── <143> Var [s]
                    │   │       │   │   │   │   ╰── a
                    │   │       │   │   │   ╰── <147> Constant Int [5]
                    │   │       │   │   ╰── <156>  [!=]
                    │   │       │   │       ├── <153> Dot
                    │   │       │   │       │   ├── <151> Var [s]
                    │   │       │   │       │   ╰── b
                    │   │       │   │       ╰── <155> Constant Int [6]
                    │   │       │   ╰── <167>  [!=]
                    │   │       │       ├── <164> Dot
                    │   │       │       │   ├── <162> Dot
                    │   │       │       │   │   ├── <160> Var [s]
                    │   │       │       │   │   ╰── substruct
                    │   │       │       │   ╰── d
                    │   │       │       ╰── <166> Constant Int [7]
                    │   │       ╰── <178>  [!=]
                    │   │           ├── <175> Dot
                    │   │           │   ├── <173> Dot
                    │   │           │   │   ├── <171> Var [s]
                    │   │           │   │   ╰── substruct
                    │   │           │   ╰── i
                    │   │           ╰── <177> Constant Int [8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <180> Constant Int [2]
                    ╰── Return
                        ╰── <185> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_return_struct_pointer() {
    let src = r#"
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        struct outermost {
            int i;
            struct outer *nested_ptr;
            struct outer nested_struct;
        };
        struct inner *make_struct_inner(int seed);
        struct outer *make_struct_outer(int seed);
        struct outermost *make_struct_outermost(int seed);
        struct inner *make_struct_inner(int seed) {
            struct inner *ptr = malloc(sizeof(struct inner));
            ptr->d = seed;
            ptr->i = seed;
            return ptr;
        }
        struct outer *make_struct_outer(int seed) {
            struct outer *ptr = malloc(sizeof(struct outer));
            ptr->a = seed;
            ptr->b = seed + 1;
            ptr->substruct.d = seed + 2;
            ptr->substruct.i = seed + 3;
            return ptr;
        }
        struct outermost *make_struct_outermost(int seed) {
            struct outermost *ptr = malloc(sizeof(struct outermost));
            ptr->i = seed;
            ptr->nested_ptr = make_struct_outer(seed + 1);
            ptr->nested_struct.a = seed + 5;
            ptr->nested_struct.b = seed + 6;
            ptr->nested_struct.substruct.d = seed + 7;
            ptr->nested_struct.substruct.i = seed + 8;
            return ptr;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── substruct
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Struct [outermost]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── nested_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── nested_struct
            │       ╰── Type
            │           ╰── Struct [outer]
            ├── Function [make_struct_inner]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── seed
            │           ╰── Type
            │               ╰── Int
            ├── Function [make_struct_outer]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── seed
            │           ╰── Type
            │               ╰── Int
            ├── Function [make_struct_outermost]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── seed
            │           ╰── Type
            │               ╰── Int
            ├── Function [make_struct_inner]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── seed
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── <113> FunctionCall [malloc]
            │       │           ╰── <112> SizeOfType
            │       │               ╰── Struct [inner]
            │       ├── <123> Assign [=]
            │       │   ├── <119> Arrow
            │       │   │   ├── <117> Var [ptr]
            │       │   │   ╰── d
            │       │   ╰── <122> Var [seed]
            │       ├── <132> Assign [=]
            │       │   ├── <128> Arrow
            │       │   │   ├── <126> Var [ptr]
            │       │   │   ╰── i
            │       │   ╰── <131> Var [seed]
            │       ╰── Return
            │           ╰── <135> Var [ptr]
            ├── Function [make_struct_outer]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── seed
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── <161> FunctionCall [malloc]
            │       │           ╰── <160> SizeOfType
            │       │               ╰── Struct [outer]
            │       ├── <171> Assign [=]
            │       │   ├── <167> Arrow
            │       │   │   ├── <165> Var [ptr]
            │       │   │   ╰── a
            │       │   ╰── <170> Var [seed]
            │       ├── <183> Assign [=]
            │       │   ├── <176> Arrow
            │       │   │   ├── <174> Var [ptr]
            │       │   │   ╰── b
            │       │   ╰── <182>  [+]
            │       │       ├── <179> Var [seed]
            │       │       ╰── <181> Constant Int [1]
            │       ├── <197> Assign [=]
            │       │   ├── <190> Dot
            │       │   │   ├── <188> Arrow
            │       │   │   │   ├── <186> Var [ptr]
            │       │   │   │   ╰── substruct
            │       │   │   ╰── d
            │       │   ╰── <196>  [+]
            │       │       ├── <193> Var [seed]
            │       │       ╰── <195> Constant Int [2]
            │       ├── <211> Assign [=]
            │       │   ├── <204> Dot
            │       │   │   ├── <202> Arrow
            │       │   │   │   ├── <200> Var [ptr]
            │       │   │   │   ╰── substruct
            │       │   │   ╰── i
            │       │   ╰── <210>  [+]
            │       │       ├── <207> Var [seed]
            │       │       ╰── <209> Constant Int [3]
            │       ╰── Return
            │           ╰── <214> Var [ptr]
            ╰── Function [make_struct_outermost]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── seed
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [outermost]
                    │   ╰── Initializer
                    │       ╰── <240> FunctionCall [malloc]
                    │           ╰── <239> SizeOfType
                    │               ╰── Struct [outermost]
                    ├── <250> Assign [=]
                    │   ├── <246> Arrow
                    │   │   ├── <244> Var [ptr]
                    │   │   ╰── i
                    │   ╰── <249> Var [seed]
                    ├── <264> Assign [=]
                    │   ├── <255> Arrow
                    │   │   ├── <253> Var [ptr]
                    │   │   ╰── nested_ptr
                    │   ╰── <263> FunctionCall [make_struct_outer]
                    │       ╰── <262>  [+]
                    │           ├── <259> Var [seed]
                    │           ╰── <261> Constant Int [1]
                    ├── <278> Assign [=]
                    │   ├── <271> Dot
                    │   │   ├── <269> Arrow
                    │   │   │   ├── <267> Var [ptr]
                    │   │   │   ╰── nested_struct
                    │   │   ╰── a
                    │   ╰── <277>  [+]
                    │       ├── <274> Var [seed]
                    │       ╰── <276> Constant Int [5]
                    ├── <292> Assign [=]
                    │   ├── <285> Dot
                    │   │   ├── <283> Arrow
                    │   │   │   ├── <281> Var [ptr]
                    │   │   │   ╰── nested_struct
                    │   │   ╰── b
                    │   ╰── <291>  [+]
                    │       ├── <288> Var [seed]
                    │       ╰── <290> Constant Int [6]
                    ├── <308> Assign [=]
                    │   ├── <301> Dot
                    │   │   ├── <299> Dot
                    │   │   │   ├── <297> Arrow
                    │   │   │   │   ├── <295> Var [ptr]
                    │   │   │   │   ╰── nested_struct
                    │   │   │   ╰── substruct
                    │   │   ╰── d
                    │   ╰── <307>  [+]
                    │       ├── <304> Var [seed]
                    │       ╰── <306> Constant Int [7]
                    ├── <324> Assign [=]
                    │   ├── <317> Dot
                    │   │   ├── <315> Dot
                    │   │   │   ├── <313> Arrow
                    │   │   │   │   ├── <311> Var [ptr]
                    │   │   │   │   ╰── nested_struct
                    │   │   │   ╰── substruct
                    │   │   ╰── i
                    │   ╰── <323>  [+]
                    │       ├── <320> Var [seed]
                    │       ╰── <322> Constant Int [8]
                    ╰── Return
                        ╰── <327> Var [ptr]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_return_struct_pointer_client() {
    let src = r#"
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        struct outermost {
            int i;
            struct outer *nested_ptr;
            struct outer nested_struct;
        };
        struct inner *make_struct_inner(int seed);
        struct outer *make_struct_outer(int seed);
        struct outermost *make_struct_outermost(int seed);
        int test_get_struct_ptr(void) {
            struct inner *inner_ptr = make_struct_inner(11);
            if (inner_ptr->d != 11 || inner_ptr->i != 11) {
                return 0;
            }
            struct outermost o = {0, 0, {0, 0, {0, 0}}};
            o.nested_ptr = make_struct_outer(20);
            if (o.nested_ptr->a != 20 || o.nested_ptr->b != 21 ||
                o.nested_ptr->substruct.d != 22 || o.nested_ptr->substruct.i != 23) {
                return 0;
            }
            return 1;
        }
        int test_get_struct_pointer_member(void) {
            if (make_struct_inner(2)->d != 2) {
                return 0;
            }
            if (make_struct_outer(2)->substruct.d != 4) {
                return 0;
            }
            if (make_struct_outermost(0)->nested_ptr->a != 1) {
                return 0;
            }
            return 1;
        }
        struct outer *get_static_struct_ptr(void) {
            static struct outer s;
            return &s;
        }
        int test_update_member_thru_retval(void) {
            get_static_struct_ptr()->a = 10;
            get_static_struct_ptr()->substruct.d = 20.0;
            struct outer *ptr = get_static_struct_ptr();
            if (ptr->a != 10 || ptr->substruct.d != 20.0) {
                return 0;
            }
            return 1;
        }
        int test_update_nested_struct_thru_retval(void) {
            struct inner small = {12.0, 13};
            get_static_struct_ptr()->substruct = small;
            if (get_static_struct_ptr()->substruct.d != 12.0) {
                return 0;
            }
            if (get_static_struct_ptr()->substruct.i != 13) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_get_struct_ptr()) {
                return 1;
            }
            if (!test_get_struct_pointer_member()) {
                return 2;
            }
            if (!test_update_member_thru_retval()) {
                return 3;
            }
            if (!test_update_nested_struct_thru_retval()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── substruct
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Struct [outermost]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── nested_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── nested_struct
            │       ╰── Type
            │           ╰── Struct [outer]
            ├── Function [make_struct_inner]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── seed
            │           ╰── Type
            │               ╰── Int
            ├── Function [make_struct_outer]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── seed
            │           ╰── Type
            │               ╰── Int
            ├── Function [make_struct_outermost]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── seed
            │           ╰── Type
            │               ╰── Int
            ├── Function [test_get_struct_ptr]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── inner_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── <104> FunctionCall [make_struct_inner]
            │       │           ╰── <103> Constant Int [11]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <122>  [||]
            │       │   │       ├── <113>  [!=]
            │       │   │       │   ├── <110> Arrow
            │       │   │       │   │   ├── <108> Var [inner_ptr]
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <112> Constant Int [11]
            │       │   │       ╰── <121>  [!=]
            │       │   │           ├── <118> Arrow
            │       │   │           │   ├── <116> Var [inner_ptr]
            │       │   │           │   ╰── i
            │       │   │           ╰── <120> Constant Int [11]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <123> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── o
            │       │   ├── Type
            │       │   │   ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <132> Constant Int [0]
            │       │           ├── <134> Constant Int [0]
            │       │           ╰── Compound
            │       │               ├── <136> Constant Int [0]
            │       │               ├── <138> Constant Int [0]
            │       │               ╰── Compound
            │       │                   ├── <140> Constant Int [0]
            │       │                   ╰── <142> Constant Int [0]
            │       ├── <156> Assign [=]
            │       │   ├── <151> Dot
            │       │   │   ├── <149> Var [o]
            │       │   │   ╰── nested_ptr
            │       │   ╰── <155> FunctionCall [make_struct_outer]
            │       │       ╰── <154> Constant Int [20]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <203>  [||]
            │       │   │       ├── <190>  [||]
            │       │   │       │   ├── <177>  [||]
            │       │   │       │   │   ├── <166>  [!=]
            │       │   │       │   │   │   ├── <163> Arrow
            │       │   │       │   │   │   │   ├── <161> Dot
            │       │   │       │   │   │   │   │   ├── <159> Var [o]
            │       │   │       │   │   │   │   │   ╰── nested_ptr
            │       │   │       │   │   │   │   ╰── a
            │       │   │       │   │   │   ╰── <165> Constant Int [20]
            │       │   │       │   │   ╰── <176>  [!=]
            │       │   │       │   │       ├── <173> Arrow
            │       │   │       │   │       │   ├── <171> Dot
            │       │   │       │   │       │   │   ├── <169> Var [o]
            │       │   │       │   │       │   │   ╰── nested_ptr
            │       │   │       │   │       │   ╰── b
            │       │   │       │   │       ╰── <175> Constant Int [21]
            │       │   │       │   ╰── <189>  [!=]
            │       │   │       │       ├── <186> Dot
            │       │   │       │       │   ├── <184> Arrow
            │       │   │       │       │   │   ├── <182> Dot
            │       │   │       │       │   │   │   ├── <180> Var [o]
            │       │   │       │       │   │   │   ╰── nested_ptr
            │       │   │       │       │   │   ╰── substruct
            │       │   │       │       │   ╰── d
            │       │   │       │       ╰── <188> Constant Int [22]
            │       │   │       ╰── <202>  [!=]
            │       │   │           ├── <199> Dot
            │       │   │           │   ├── <197> Arrow
            │       │   │           │   │   ├── <195> Dot
            │       │   │           │   │   │   ├── <193> Var [o]
            │       │   │           │   │   │   ╰── nested_ptr
            │       │   │           │   │   ╰── substruct
            │       │   │           │   ╰── i
            │       │   │           ╰── <201> Constant Int [23]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <204> Constant Int [0]
            │       ╰── Return
            │           ╰── <209> Constant Int [1]
            ├── Function [test_get_struct_pointer_member]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <225>  [!=]
            │       │   │       ├── <222> Arrow
            │       │   │       │   ├── <220> FunctionCall [make_struct_inner]
            │       │   │       │   │   ╰── <219> Constant Int [2]
            │       │   │       │   ╰── d
            │       │   │       ╰── <224> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <226> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <240>  [!=]
            │       │   │       ├── <237> Dot
            │       │   │       │   ├── <235> Arrow
            │       │   │       │   │   ├── <233> FunctionCall [make_struct_outer]
            │       │   │       │   │   │   ╰── <232> Constant Int [2]
            │       │   │       │   │   ╰── substruct
            │       │   │       │   ╰── d
            │       │   │       ╰── <239> Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <241> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <255>  [!=]
            │       │   │       ├── <252> Arrow
            │       │   │       │   ├── <250> Arrow
            │       │   │       │   │   ├── <248> FunctionCall [make_struct_outermost]
            │       │   │       │   │   │   ╰── <247> Constant Int [0]
            │       │   │       │   │   ╰── nested_ptr
            │       │   │       │   ╰── a
            │       │   │       ╰── <254> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <256> Constant Int [0]
            │       ╰── Return
            │           ╰── <261> Constant Int [1]
            ├── Function [get_static_struct_ptr]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Static
            │       ╰── Return
            │           ╰── <281> AddressOf
            │               ╰── <280> Var [s]
            ├── Function [test_update_member_thru_retval]
            │   ╰── Body
            │       ├── <296> Assign [=]
            │       │   ├── <293> Arrow
            │       │   │   ├── <291> FunctionCall [get_static_struct_ptr]
            │       │   │   ╰── a
            │       │   ╰── <295> Constant Int [10]
            │       ├── <306> Assign [=]
            │       │   ├── <303> Dot
            │       │   │   ├── <301> Arrow
            │       │   │   │   ├── <299> FunctionCall [get_static_struct_ptr]
            │       │   │   │   ╰── substruct
            │       │   │   ╰── d
            │       │   ╰── <305> Constant Double [+2e1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── <315> FunctionCall [get_static_struct_ptr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <335>  [||]
            │       │   │       ├── <324>  [!=]
            │       │   │       │   ├── <321> Arrow
            │       │   │       │   │   ├── <319> Var [ptr]
            │       │   │       │   │   ╰── a
            │       │   │       │   ╰── <323> Constant Int [10]
            │       │   │       ╰── <334>  [!=]
            │       │   │           ├── <331> Dot
            │       │   │           │   ├── <329> Arrow
            │       │   │           │   │   ├── <327> Var [ptr]
            │       │   │           │   │   ╰── substruct
            │       │   │           │   ╰── d
            │       │   │           ╰── <333> Constant Double [+2e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <336> Constant Int [0]
            │       ╰── Return
            │           ╰── <341> Constant Int [1]
            ├── Function [test_update_nested_struct_thru_retval]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <354> Constant Double [+1.2e1]
            │       │           ╰── <356> Constant Int [13]
            │       ├── <367> Assign [=]
            │       │   ├── <363> Arrow
            │       │   │   ├── <361> FunctionCall [get_static_struct_ptr]
            │       │   │   ╰── substruct
            │       │   ╰── <366> Var [small]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <377>  [!=]
            │       │   │       ├── <374> Dot
            │       │   │       │   ├── <372> Arrow
            │       │   │       │   │   ├── <370> FunctionCall [get_static_struct_ptr]
            │       │   │       │   │   ╰── substruct
            │       │   │       │   ╰── d
            │       │   │       ╰── <376> Constant Double [+1.2e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <378> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <391>  [!=]
            │       │   │       ├── <388> Dot
            │       │   │       │   ├── <386> Arrow
            │       │   │       │   │   ├── <384> FunctionCall [get_static_struct_ptr]
            │       │   │       │   │   ╰── substruct
            │       │   │       │   ╰── i
            │       │   │       ╰── <390> Constant Int [13]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <392> Constant Int [0]
            │       ╰── Return
            │           ╰── <397> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <409> Unary [!]
                    │   │       ╰── <408> FunctionCall [test_get_struct_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <410> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <418> Unary [!]
                    │   │       ╰── <417> FunctionCall [test_get_struct_pointer_member]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <419> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <427> Unary [!]
                    │   │       ╰── <426> FunctionCall [test_update_member_thru_retval]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <428> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <436> Unary [!]
                    │   │       ╰── <435> FunctionCall [test_update_nested_struct_thru_retval]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <437> Constant Int [4]
                    ╰── Return
                        ╰── <442> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_parse_and_lex_postfix_precedence() {
    let src = r#"
        
        struct inner {
            int inner_arr[3];
        };
        struct outer {
            int a;
            struct inner b;
        };
        int main(void) {
            struct outer array[4] = {{1, {{2, 3, 4}}},
                                     {5, {{6, 7, 8}}},
                                     {9, {{10, 11, 12}}},
                                     {13, {{14, 15, 16}}}};
            int i = -array[2].b.inner_arr[1];
            return i == -11;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── inner_arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [inner]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── array
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <33> Constant Int [1]
                    │           │   ╰── Compound
                    │           │       ╰── Compound
                    │           │           ├── <35> Constant Int [2]
                    │           │           ├── <37> Constant Int [3]
                    │           │           ╰── <39> Constant Int [4]
                    │           ├── Compound
                    │           │   ├── <44> Constant Int [5]
                    │           │   ╰── Compound
                    │           │       ╰── Compound
                    │           │           ├── <46> Constant Int [6]
                    │           │           ├── <48> Constant Int [7]
                    │           │           ╰── <50> Constant Int [8]
                    │           ├── Compound
                    │           │   ├── <55> Constant Int [9]
                    │           │   ╰── Compound
                    │           │       ╰── Compound
                    │           │           ├── <57> Constant Int [10]
                    │           │           ├── <59> Constant Int [11]
                    │           │           ╰── <61> Constant Int [12]
                    │           ╰── Compound
                    │               ├── <66> Constant Int [13]
                    │               ╰── Compound
                    │                   ╰── Compound
                    │                       ├── <68> Constant Int [14]
                    │                       ├── <70> Constant Int [15]
                    │                       ╰── <72> Constant Int [16]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <93> Unary [-]
                    │           ╰── <92> Subscript
                    │               ├── <90> Dot
                    │               │   ├── <88> Dot
                    │               │   │   ├── <86> Subscript
                    │               │   │   │   ├── <84> Var [array]
                    │               │   │   │   ╰── <85> Constant Int [2]
                    │               │   │   ╰── b
                    │               │   ╰── inner_arr
                    │               ╰── <91> Constant Int [1]
                    ╰── Return
                        ╰── <102>  [==]
                            ├── <97> Var [i]
                            ╰── <101> Unary [-]
                                ╰── <100> Constant Int [11]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_parse_and_lex_space_around_struct_member() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s foo;
            foo .a = 10;
            int b = foo .a;
            return foo . a == b;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ╰── Type
                    │       ╰── Struct [s]
                    ├── <23> Assign [=]
                    │   ├── <20> Dot
                    │   │   ├── <18> Var [foo]
                    │   │   ╰── a
                    │   ╰── <22> Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <31> Dot
                    │           ├── <29> Var [foo]
                    │           ╰── a
                    ╰── Return
                        ╰── <41>  [==]
                            ├── <37> Dot
                            │   ├── <35> Var [foo]
                            │   ╰── a
                            ╰── <40> Var [b]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_parse_and_lex_struct_member_looks_like_const() {
    let src = r#"
        struct s {
            int E10;
        };
        int main(void) {
            struct s x1 = {3};
            return x1.E10;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── E10
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x1
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <16> Constant Int [3]
                    ╰── Return
                        ╰── <23> Dot
                            ├── <21> Var [x1]
                            ╰── E10
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_parse_and_lex_trailing_comma() {
    let src = r#"
        
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s x = {
                1,
                2,
            };
            if (x.a != 1 || x.b != 2) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <20> Constant Int [1]
                    │           ╰── <22> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <41>  [||]
                    │   │       ├── <32>  [!=]
                    │   │       │   ├── <29> Dot
                    │   │       │   │   ├── <27> Var [x]
                    │   │       │   │   ╰── a
                    │   │       │   ╰── <31> Constant Int [1]
                    │   │       ╰── <40>  [!=]
                    │   │           ├── <37> Dot
                    │   │           │   ├── <35> Var [x]
                    │   │           │   ╰── b
                    │   │           ╰── <39> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <42> Constant Int [1]
                    ╰── Return
                        ╰── <47> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_arrow() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        struct four_members {
            double d;
            char c;
            long l;
            char *ptr;
        };
        double get_double(void) {
            return 2e12;
        }
        static long l = 34359738378l;
        int accept_params(int d_divided, int c_doubled, double l_cast,
                          int dereferenced_ptr, double d, int c, long l, char *ptr) {
            if (d != -1845381177299.0 || c != 127 || l != 58 || *ptr != 100 ||
                d_divided != -922690588 || c_doubled != 254 || l_cast != 58.0 ||
                dereferenced_ptr != 100) {
                return 0;
            }
            return 1;
        }
        int test_auto(void) {
            struct four_members autom;
            struct four_members *autom_ptr = &autom;
            autom_ptr->d = (l - get_double()) + (l * 3.5);
            autom_ptr->c = 127;
            autom_ptr->l = get_double() / l;
            char chr = 100;
            autom_ptr->ptr = &chr;
            if (autom_ptr->d != -1845381177299.0 || autom_ptr->c != 127 ||
                autom_ptr->l != 58 || autom_ptr->ptr != &chr) {
                return 0;
            }
            double *d_ptr = &autom_ptr->d;
            char *c_ptr = &autom_ptr->c;
            if (*d_ptr != -1845381177299.0 || *c_ptr != 127) {
                return 0;
            }
            if (*autom_ptr->ptr != 100) {
                return 0;
            }
            if (!accept_params(autom.d / 2000, autom.c * 2, (double)autom.l, *autom.ptr,
                               autom.d, autom.c, autom.l, autom.ptr)) {
                return 0;
            }
            return 1;
        }
        int test_static(void) {
            static struct four_members stat;
            static struct four_members *stat_ptr;
            stat_ptr = &stat;
            static char chr = 100;
            stat_ptr->d = (l - get_double()) + (l * 3.5);
            stat_ptr->c = 127;
            stat_ptr->l = get_double() / l;
            stat_ptr->ptr = &chr;
            if (stat_ptr->d != -1845381177299.0 || stat_ptr->c != 127 ||
                stat_ptr->l != 58 || stat_ptr->ptr != &chr) {
                return 0;
            }
            double *d_ptr = &stat_ptr->d;
            char *c_ptr = &stat_ptr->c;
            if (*d_ptr != -1845381177299.0 || *c_ptr != 127) {
                return 0;
            }
            if (*stat_ptr->ptr != 100) {
                return 0;
            }
            if (!accept_params(stat.d / 2000, stat.c * 2, (double)stat.l, *stat.ptr,
                               stat.d, stat.c, stat.l, stat.ptr)) {
                return 0;
            }
            return 1;
        }
        int test_exp_result_member(void) {
            static int flag = 1;
            struct four_members s1;
            s1.d = 10.0;
            s1.c = 99;
            s1.l = 9223372036854775807l;
            s1.ptr = 0;
            struct four_members s2;
            s2.d = 12.0;
            s2.c = 98;
            s2.l = -9223372036854775807l;
            s2.ptr = 0;
            struct four_members *s1_ptr = &s1;
            struct four_members *s2_ptr = &s2;
            (flag ? s1_ptr : s2_ptr)->c = 127;
            if (s1.c != 127) {
                return 0;
            }
            if (s2.c != 98) {
                return 0;
            }
            struct four_members *result_ptr = 0;
            if ((result_ptr = s2_ptr)->d != 12.0 ||
                result_ptr->l != -9223372036854775807l) {
                return 0;
            }
            void *void_ptr = calloc(1, sizeof(struct four_members));
            ((struct four_members *)void_ptr)->c = 80;
            result_ptr = void_ptr;
            if (result_ptr->c != 80) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto()) {
                return 1;
            }
            if (!test_static()) {
                return 2;
            }
            if (!test_exp_result_member()) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [four_members]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Char
            ├── Function [get_double]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <40> Constant Double [+2e12]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ├── Type
            │   │   ╰── Long
            │   ├── Initializer
            │   │   ╰── <48> Constant Long [34359738378]
            │   ╰── Static
            ├── Function [accept_params]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d_divided
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c_doubled
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l_cast
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── dereferenced_ptr
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <140>  [||]
            │       │   │       ├── <133>  [||]
            │       │   │       │   ├── <126>  [||]
            │       │   │       │   │   ├── <119>  [||]
            │       │   │       │   │   │   ├── <110>  [||]
            │       │   │       │   │   │   │   ├── <102>  [||]
            │       │   │       │   │   │   │   │   ├── <95>  [||]
            │       │   │       │   │   │   │   │   │   ├── <88>  [!=]
            │       │   │       │   │   │   │   │   │   │   ├── <83> Var [d]
            │       │   │       │   │   │   │   │   │   │   ╰── <87> Unary [-]
            │       │   │       │   │   │   │   │   │   │       ╰── <86> Constant Double [+1.845381177299e12]
            │       │   │       │   │   │   │   │   │   ╰── <94>  [!=]
            │       │   │       │   │   │   │   │   │       ├── <91> Var [c]
            │       │   │       │   │   │   │   │   │       ╰── <93> Constant Int [127]
            │       │   │       │   │   │   │   │   ╰── <101>  [!=]
            │       │   │       │   │   │   │   │       ├── <98> Var [l]
            │       │   │       │   │   │   │   │       ╰── <100> Constant Int [58]
            │       │   │       │   │   │   │   ╰── <109>  [!=]
            │       │   │       │   │   │   │       ├── <106> Dereference
            │       │   │       │   │   │   │       │   ╰── <105> Var [ptr]
            │       │   │       │   │   │   │       ╰── <108> Constant Int [100]
            │       │   │       │   │   │   ╰── <118>  [!=]
            │       │   │       │   │   │       ├── <113> Var [d_divided]
            │       │   │       │   │   │       ╰── <117> Unary [-]
            │       │   │       │   │   │           ╰── <116> Constant Int [922690588]
            │       │   │       │   │   ╰── <125>  [!=]
            │       │   │       │   │       ├── <122> Var [c_doubled]
            │       │   │       │   │       ╰── <124> Constant Int [254]
            │       │   │       │   ╰── <132>  [!=]
            │       │   │       │       ├── <129> Var [l_cast]
            │       │   │       │       ╰── <131> Constant Double [+5.8e1]
            │       │   │       ╰── <139>  [!=]
            │       │   │           ├── <136> Var [dereferenced_ptr]
            │       │   │           ╰── <138> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <141> Constant Int [0]
            │       ╰── Return
            │           ╰── <146> Constant Int [1]
            ├── Function [test_auto]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── autom
            │       │   ╰── Type
            │       │       ╰── Struct [four_members]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── autom_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [four_members]
            │       │   ╰── Initializer
            │       │       ╰── <168> AddressOf
            │       │           ╰── <167> Var [autom]
            │       ├── <191> Assign [=]
            │       │   ├── <174> Arrow
            │       │   │   ├── <172> Var [autom_ptr]
            │       │   │   ╰── d
            │       │   ╰── <190>  [+]
            │       │       ├── <182>  [-]
            │       │       │   ├── <177> Var [l]
            │       │       │   ╰── <180> FunctionCall [get_double]
            │       │       ╰── <189>  [*]
            │       │           ├── <185> Var [l]
            │       │           ╰── <187> Constant Double [+3.5e0]
            │       ├── <199> Assign [=]
            │       │   ├── <196> Arrow
            │       │   │   ├── <194> Var [autom_ptr]
            │       │   │   ╰── c
            │       │   ╰── <198> Constant Int [127]
            │       ├── <212> Assign [=]
            │       │   ├── <204> Arrow
            │       │   │   ├── <202> Var [autom_ptr]
            │       │   │   ╰── l
            │       │   ╰── <211>  [/]
            │       │       ├── <207> FunctionCall [get_double]
            │       │       ╰── <210> Var [l]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── chr
            │       │   ├── Type
            │       │   │   ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <217> Constant Int [100]
            │       ├── <228> Assign [=]
            │       │   ├── <223> Arrow
            │       │   │   ├── <221> Var [autom_ptr]
            │       │   │   ╰── ptr
            │       │   ╰── <227> AddressOf
            │       │       ╰── <226> Var [chr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <267>  [||]
            │       │   │       ├── <256>  [||]
            │       │   │       │   ├── <247>  [||]
            │       │   │       │   │   ├── <238>  [!=]
            │       │   │       │   │   │   ├── <233> Arrow
            │       │   │       │   │   │   │   ├── <231> Var [autom_ptr]
            │       │   │       │   │   │   │   ╰── d
            │       │   │       │   │   │   ╰── <237> Unary [-]
            │       │   │       │   │   │       ╰── <236> Constant Double [+1.845381177299e12]
            │       │   │       │   │   ╰── <246>  [!=]
            │       │   │       │   │       ├── <243> Arrow
            │       │   │       │   │       │   ├── <241> Var [autom_ptr]
            │       │   │       │   │       │   ╰── c
            │       │   │       │   │       ╰── <245> Constant Int [127]
            │       │   │       │   ╰── <255>  [!=]
            │       │   │       │       ├── <252> Arrow
            │       │   │       │       │   ├── <250> Var [autom_ptr]
            │       │   │       │       │   ╰── l
            │       │   │       │       ╰── <254> Constant Int [58]
            │       │   │       ╰── <266>  [!=]
            │       │   │           ├── <261> Arrow
            │       │   │           │   ├── <259> Var [autom_ptr]
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <265> AddressOf
            │       │   │               ╰── <264> Var [chr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <268> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <282> AddressOf
            │       │           ╰── <281> Arrow
            │       │               ├── <279> Var [autom_ptr]
            │       │               ╰── d
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <294> AddressOf
            │       │           ╰── <293> Arrow
            │       │               ├── <291> Var [autom_ptr]
            │       │               ╰── c
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <312>  [||]
            │       │   │       ├── <304>  [!=]
            │       │   │       │   ├── <299> Dereference
            │       │   │       │   │   ╰── <298> Var [d_ptr]
            │       │   │       │   ╰── <303> Unary [-]
            │       │   │       │       ╰── <302> Constant Double [+1.845381177299e12]
            │       │   │       ╰── <311>  [!=]
            │       │   │           ├── <308> Dereference
            │       │   │           │   ╰── <307> Var [c_ptr]
            │       │   │           ╰── <310> Constant Int [127]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <313> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <325>  [!=]
            │       │   │       ├── <322> Dereference
            │       │   │       │   ╰── <321> Arrow
            │       │   │       │       ├── <319> Var [autom_ptr]
            │       │   │       │       ╰── ptr
            │       │   │       ╰── <324> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <326> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <376> Unary [!]
            │       │   │       ╰── <375> FunctionCall [accept_params]
            │       │   │           ├── <339>  [/]
            │       │   │           │   ├── <336> Dot
            │       │   │           │   │   ├── <334> Var [autom]
            │       │   │           │   │   ╰── d
            │       │   │           │   ╰── <338> Constant Int [2000]
            │       │   │           ├── <346>  [*]
            │       │   │           │   ├── <343> Dot
            │       │   │           │   │   ├── <341> Var [autom]
            │       │   │           │   │   ╰── c
            │       │   │           │   ╰── <345> Constant Int [2]
            │       │   │           ├── <353> Cast
            │       │   │           │   ├── Target
            │       │   │           │   │   ╰── Double
            │       │   │           │   ╰── Expression
            │       │   │           │       ╰── <352> Dot
            │       │   │           │           ├── <350> Var [autom]
            │       │   │           │           ╰── l
            │       │   │           ├── <358> Dereference
            │       │   │           │   ╰── <357> Dot
            │       │   │           │       ├── <355> Var [autom]
            │       │   │           │       ╰── ptr
            │       │   │           ├── <362> Dot
            │       │   │           │   ├── <360> Var [autom]
            │       │   │           │   ╰── d
            │       │   │           ├── <366> Dot
            │       │   │           │   ├── <364> Var [autom]
            │       │   │           │   ╰── c
            │       │   │           ├── <370> Dot
            │       │   │           │   ├── <368> Var [autom]
            │       │   │           │   ╰── l
            │       │   │           ╰── <374> Dot
            │       │   │               ├── <372> Var [autom]
            │       │   │               ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <377> Constant Int [0]
            │       ╰── Return
            │           ╰── <382> Constant Int [1]
            ├── Function [test_static]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── stat
            │       │   ├── Type
            │       │   │   ╰── Struct [four_members]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── stat_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [four_members]
            │       │   ╰── Static
            │       ├── <411> Assign [=]
            │       │   ├── <406> Var [stat_ptr]
            │       │   ╰── <410> AddressOf
            │       │       ╰── <409> Var [stat]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── chr
            │       │   ├── Type
            │       │   │   ╰── Char
            │       │   ├── Initializer
            │       │   │   ╰── <417> Constant Int [100]
            │       │   ╰── Static
            │       ├── <440> Assign [=]
            │       │   ├── <423> Arrow
            │       │   │   ├── <421> Var [stat_ptr]
            │       │   │   ╰── d
            │       │   ╰── <439>  [+]
            │       │       ├── <431>  [-]
            │       │       │   ├── <426> Var [l]
            │       │       │   ╰── <429> FunctionCall [get_double]
            │       │       ╰── <438>  [*]
            │       │           ├── <434> Var [l]
            │       │           ╰── <436> Constant Double [+3.5e0]
            │       ├── <448> Assign [=]
            │       │   ├── <445> Arrow
            │       │   │   ├── <443> Var [stat_ptr]
            │       │   │   ╰── c
            │       │   ╰── <447> Constant Int [127]
            │       ├── <461> Assign [=]
            │       │   ├── <453> Arrow
            │       │   │   ├── <451> Var [stat_ptr]
            │       │   │   ╰── l
            │       │   ╰── <460>  [/]
            │       │       ├── <456> FunctionCall [get_double]
            │       │       ╰── <459> Var [l]
            │       ├── <471> Assign [=]
            │       │   ├── <466> Arrow
            │       │   │   ├── <464> Var [stat_ptr]
            │       │   │   ╰── ptr
            │       │   ╰── <470> AddressOf
            │       │       ╰── <469> Var [chr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <510>  [||]
            │       │   │       ├── <499>  [||]
            │       │   │       │   ├── <490>  [||]
            │       │   │       │   │   ├── <481>  [!=]
            │       │   │       │   │   │   ├── <476> Arrow
            │       │   │       │   │   │   │   ├── <474> Var [stat_ptr]
            │       │   │       │   │   │   │   ╰── d
            │       │   │       │   │   │   ╰── <480> Unary [-]
            │       │   │       │   │   │       ╰── <479> Constant Double [+1.845381177299e12]
            │       │   │       │   │   ╰── <489>  [!=]
            │       │   │       │   │       ├── <486> Arrow
            │       │   │       │   │       │   ├── <484> Var [stat_ptr]
            │       │   │       │   │       │   ╰── c
            │       │   │       │   │       ╰── <488> Constant Int [127]
            │       │   │       │   ╰── <498>  [!=]
            │       │   │       │       ├── <495> Arrow
            │       │   │       │       │   ├── <493> Var [stat_ptr]
            │       │   │       │       │   ╰── l
            │       │   │       │       ╰── <497> Constant Int [58]
            │       │   │       ╰── <509>  [!=]
            │       │   │           ├── <504> Arrow
            │       │   │           │   ├── <502> Var [stat_ptr]
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <508> AddressOf
            │       │   │               ╰── <507> Var [chr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <511> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <525> AddressOf
            │       │           ╰── <524> Arrow
            │       │               ├── <522> Var [stat_ptr]
            │       │               ╰── d
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <537> AddressOf
            │       │           ╰── <536> Arrow
            │       │               ├── <534> Var [stat_ptr]
            │       │               ╰── c
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <555>  [||]
            │       │   │       ├── <547>  [!=]
            │       │   │       │   ├── <542> Dereference
            │       │   │       │   │   ╰── <541> Var [d_ptr]
            │       │   │       │   ╰── <546> Unary [-]
            │       │   │       │       ╰── <545> Constant Double [+1.845381177299e12]
            │       │   │       ╰── <554>  [!=]
            │       │   │           ├── <551> Dereference
            │       │   │           │   ╰── <550> Var [c_ptr]
            │       │   │           ╰── <553> Constant Int [127]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <556> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <568>  [!=]
            │       │   │       ├── <565> Dereference
            │       │   │       │   ╰── <564> Arrow
            │       │   │       │       ├── <562> Var [stat_ptr]
            │       │   │       │       ╰── ptr
            │       │   │       ╰── <567> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <569> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <619> Unary [!]
            │       │   │       ╰── <618> FunctionCall [accept_params]
            │       │   │           ├── <582>  [/]
            │       │   │           │   ├── <579> Dot
            │       │   │           │   │   ├── <577> Var [stat]
            │       │   │           │   │   ╰── d
            │       │   │           │   ╰── <581> Constant Int [2000]
            │       │   │           ├── <589>  [*]
            │       │   │           │   ├── <586> Dot
            │       │   │           │   │   ├── <584> Var [stat]
            │       │   │           │   │   ╰── c
            │       │   │           │   ╰── <588> Constant Int [2]
            │       │   │           ├── <596> Cast
            │       │   │           │   ├── Target
            │       │   │           │   │   ╰── Double
            │       │   │           │   ╰── Expression
            │       │   │           │       ╰── <595> Dot
            │       │   │           │           ├── <593> Var [stat]
            │       │   │           │           ╰── l
            │       │   │           ├── <601> Dereference
            │       │   │           │   ╰── <600> Dot
            │       │   │           │       ├── <598> Var [stat]
            │       │   │           │       ╰── ptr
            │       │   │           ├── <605> Dot
            │       │   │           │   ├── <603> Var [stat]
            │       │   │           │   ╰── d
            │       │   │           ├── <609> Dot
            │       │   │           │   ├── <607> Var [stat]
            │       │   │           │   ╰── c
            │       │   │           ├── <613> Dot
            │       │   │           │   ├── <611> Var [stat]
            │       │   │           │   ╰── l
            │       │   │           ╰── <617> Dot
            │       │   │               ├── <615> Var [stat]
            │       │   │               ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <620> Constant Int [0]
            │       ╰── Return
            │           ╰── <625> Constant Int [1]
            ├── Function [test_exp_result_member]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── flag
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <638> Constant Int [1]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Struct [four_members]
            │       ├── <652> Assign [=]
            │       │   ├── <649> Dot
            │       │   │   ├── <647> Var [s1]
            │       │   │   ╰── d
            │       │   ╰── <651> Constant Double [+1e1]
            │       ├── <660> Assign [=]
            │       │   ├── <657> Dot
            │       │   │   ├── <655> Var [s1]
            │       │   │   ╰── c
            │       │   ╰── <659> Constant Int [99]
            │       ├── <668> Assign [=]
            │       │   ├── <665> Dot
            │       │   │   ├── <663> Var [s1]
            │       │   │   ╰── l
            │       │   ╰── <667> Constant Long [9223372036854775807]
            │       ├── <676> Assign [=]
            │       │   ├── <673> Dot
            │       │   │   ├── <671> Var [s1]
            │       │   │   ╰── ptr
            │       │   ╰── <675> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Struct [four_members]
            │       ├── <689> Assign [=]
            │       │   ├── <686> Dot
            │       │   │   ├── <684> Var [s2]
            │       │   │   ╰── d
            │       │   ╰── <688> Constant Double [+1.2e1]
            │       ├── <697> Assign [=]
            │       │   ├── <694> Dot
            │       │   │   ├── <692> Var [s2]
            │       │   │   ╰── c
            │       │   ╰── <696> Constant Int [98]
            │       ├── <707> Assign [=]
            │       │   ├── <702> Dot
            │       │   │   ├── <700> Var [s2]
            │       │   │   ╰── l
            │       │   ╰── <706> Unary [-]
            │       │       ╰── <705> Constant Long [9223372036854775807]
            │       ├── <715> Assign [=]
            │       │   ├── <712> Dot
            │       │   │   ├── <710> Var [s2]
            │       │   │   ╰── ptr
            │       │   ╰── <714> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s1_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [four_members]
            │       │   ╰── Initializer
            │       │       ╰── <725> AddressOf
            │       │           ╰── <724> Var [s1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s2_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [four_members]
            │       │   ╰── Initializer
            │       │       ╰── <736> AddressOf
            │       │           ╰── <735> Var [s2]
            │       ├── <751> Assign [=]
            │       │   ├── <748> Arrow
            │       │   │   ├── <746> Conditional [?]
            │       │   │   │   ├── <740> Var [flag]
            │       │   │   │   ├── Then
            │       │   │   │   │   ╰── <742> Var [s1_ptr]
            │       │   │   │   ╰── Else
            │       │   │   │       ╰── <744> Var [s2_ptr]
            │       │   │   ╰── c
            │       │   ╰── <750> Constant Int [127]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <759>  [!=]
            │       │   │       ├── <756> Dot
            │       │   │       │   ├── <754> Var [s1]
            │       │   │       │   ╰── c
            │       │   │       ╰── <758> Constant Int [127]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <760> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <771>  [!=]
            │       │   │       ├── <768> Dot
            │       │   │       │   ├── <766> Var [s2]
            │       │   │       │   ╰── c
            │       │   │       ╰── <770> Constant Int [98]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <772> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [four_members]
            │       │   ╰── Initializer
            │       │       ╰── <783> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <808>  [||]
            │       │   │       ├── <797>  [!=]
            │       │   │       │   ├── <794> Arrow
            │       │   │       │   │   ├── <792> Assign [=]
            │       │   │       │   │   │   ├── <787> Var [result_ptr]
            │       │   │       │   │   │   ╰── <790> Var [s2_ptr]
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <796> Constant Double [+1.2e1]
            │       │   │       ╰── <807>  [!=]
            │       │   │           ├── <802> Arrow
            │       │   │           │   ├── <800> Var [result_ptr]
            │       │   │           │   ╰── l
            │       │   │           ╰── <806> Unary [-]
            │       │   │               ╰── <805> Constant Long [9223372036854775807]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <809> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── void_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Void
            │       │   ╰── Initializer
            │       │       ╰── <825> FunctionCall [calloc]
            │       │           ├── <820> Constant Int [1]
            │       │           ╰── <824> SizeOfType
            │       │               ╰── Struct [four_members]
            │       ├── <840> Assign [=]
            │       │   ├── <837> Arrow
            │       │   │   ├── <835> Cast
            │       │   │   │   ├── Target
            │       │   │   │   │   ╰── Pointer
            │       │   │   │   │       ╰── Struct [four_members]
            │       │   │   │   ╰── Expression
            │       │   │   │       ╰── <833> Var [void_ptr]
            │       │   │   ╰── c
            │       │   ╰── <839> Constant Int [80]
            │       ├── <847> Assign [=]
            │       │   ├── <843> Var [result_ptr]
            │       │   ╰── <846> Var [void_ptr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <855>  [!=]
            │       │   │       ├── <852> Arrow
            │       │   │       │   ├── <850> Var [result_ptr]
            │       │   │       │   ╰── c
            │       │   │       ╰── <854> Constant Int [80]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <856> Constant Int [0]
            │       ╰── Return
            │           ╰── <861> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <873> Unary [!]
                    │   │       ╰── <872> FunctionCall [test_auto]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <874> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <882> Unary [!]
                    │   │       ╰── <881> FunctionCall [test_static]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <883> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <891> Unary [!]
                    │   │       ╰── <890> FunctionCall [test_exp_result_member]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <892> Constant Int [3]
                    ╰── Return
                        ╰── <897> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_dot() {
    let src = r#"
        struct four_members {
            double d;
            char c;
            long l;
            char *ptr;
        };
        double get_double(void) {
            return 2e12;
        }
        static long l = 34359738378l;
        int accept_params(int d_divided, int c_doubled, double l_cast,
                          int dereferenced_ptr, double d, int c, long l, char *ptr) {
            if (d != 4e12 || c != 127 || l != 8589934594l || *ptr != 100 ||
                d_divided != 100.0 || c_doubled != 254 || l_cast != 8589934594.0 ||
                dereferenced_ptr != 100) {
                return 0;
            }
            return 1;
        }
        int test_auto(void) {
            struct four_members autom;
            autom.d = get_double() * 2.0;
            autom.c = 127;
            autom.l = l / 4;
            char chr = 100;
            autom.ptr = &chr;
            if (autom.d != 4e12 || autom.c != 127 || autom.l != 8589934594l ||
                autom.ptr != &chr) {
                return 0;
            }
            double *d_ptr = &autom.d;
            char *c_ptr = &autom.c;
            if (*d_ptr != 4e12 || *c_ptr != 127) {
                return 0;
            }
            if (*autom.ptr != 100) {
                return 0;
            }
            if (!accept_params(autom.d / 4e10, autom.c * 2, (double)autom.l, *autom.ptr,
                               autom.d, autom.c, autom.l, autom.ptr)) {
                return 0;
            }
            return 1;
        }
        int test_static(void) {
            static struct four_members stat;
            static char chr = 100;
            stat.d = get_double() * 2.0;
            stat.c = 127;
            stat.l = l / 4;
            stat.ptr = &chr;
            if (stat.d != 4e12 || stat.c != 127 || stat.l != 8589934594l ||
                stat.ptr != &chr) {
                return 0;
            }
            double *d_ptr = &stat.d;
            char *c_ptr = &stat.c;
            if (*d_ptr != 4e12 || *c_ptr != 127) {
                return 0;
            }
            if (*stat.ptr != 100) {
                return 0;
            }
            if (!accept_params(stat.d / 4e10, stat.c * 2, (double)stat.l, *stat.ptr,
                               stat.d, stat.c, stat.l, stat.ptr)) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto()) {
                return 1;
            }
            if (!test_static()) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [four_members]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Char
            ├── Function [get_double]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <26> Constant Double [+2e12]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ├── Type
            │   │   ╰── Long
            │   ├── Initializer
            │   │   ╰── <34> Constant Long [34359738378]
            │   ╰── Static
            ├── Function [accept_params]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d_divided
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c_doubled
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l_cast
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── dereferenced_ptr
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <122>  [||]
            │       │   │       ├── <115>  [||]
            │       │   │       │   ├── <108>  [||]
            │       │   │       │   │   ├── <101>  [||]
            │       │   │       │   │   │   ├── <94>  [||]
            │       │   │       │   │   │   │   ├── <86>  [||]
            │       │   │       │   │   │   │   │   ├── <79>  [||]
            │       │   │       │   │   │   │   │   │   ├── <72>  [!=]
            │       │   │       │   │   │   │   │   │   │   ├── <69> Var [d]
            │       │   │       │   │   │   │   │   │   │   ╰── <71> Constant Double [+4e12]
            │       │   │       │   │   │   │   │   │   ╰── <78>  [!=]
            │       │   │       │   │   │   │   │   │       ├── <75> Var [c]
            │       │   │       │   │   │   │   │   │       ╰── <77> Constant Int [127]
            │       │   │       │   │   │   │   │   ╰── <85>  [!=]
            │       │   │       │   │   │   │   │       ├── <82> Var [l]
            │       │   │       │   │   │   │   │       ╰── <84> Constant Long [8589934594]
            │       │   │       │   │   │   │   ╰── <93>  [!=]
            │       │   │       │   │   │   │       ├── <90> Dereference
            │       │   │       │   │   │   │       │   ╰── <89> Var [ptr]
            │       │   │       │   │   │   │       ╰── <92> Constant Int [100]
            │       │   │       │   │   │   ╰── <100>  [!=]
            │       │   │       │   │   │       ├── <97> Var [d_divided]
            │       │   │       │   │   │       ╰── <99> Constant Double [+1e2]
            │       │   │       │   │   ╰── <107>  [!=]
            │       │   │       │   │       ├── <104> Var [c_doubled]
            │       │   │       │   │       ╰── <106> Constant Int [254]
            │       │   │       │   ╰── <114>  [!=]
            │       │   │       │       ├── <111> Var [l_cast]
            │       │   │       │       ╰── <113> Constant Double [+8.589934594e9]
            │       │   │       ╰── <121>  [!=]
            │       │   │           ├── <118> Var [dereferenced_ptr]
            │       │   │           ╰── <120> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <123> Constant Int [0]
            │       ╰── Return
            │           ╰── <128> Constant Int [1]
            ├── Function [test_auto]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── autom
            │       │   ╰── Type
            │       │       ╰── Struct [four_members]
            │       ├── <152> Assign [=]
            │       │   ├── <145> Dot
            │       │   │   ├── <143> Var [autom]
            │       │   │   ╰── d
            │       │   ╰── <151>  [*]
            │       │       ├── <148> FunctionCall [get_double]
            │       │       ╰── <150> Constant Double [+2e0]
            │       ├── <160> Assign [=]
            │       │   ├── <157> Dot
            │       │   │   ├── <155> Var [autom]
            │       │   │   ╰── c
            │       │   ╰── <159> Constant Int [127]
            │       ├── <172> Assign [=]
            │       │   ├── <165> Dot
            │       │   │   ├── <163> Var [autom]
            │       │   │   ╰── l
            │       │   ╰── <171>  [/]
            │       │       ├── <168> Var [l]
            │       │       ╰── <170> Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── chr
            │       │   ├── Type
            │       │   │   ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <177> Constant Int [100]
            │       ├── <188> Assign [=]
            │       │   ├── <183> Dot
            │       │   │   ├── <181> Var [autom]
            │       │   │   ╰── ptr
            │       │   ╰── <187> AddressOf
            │       │       ╰── <186> Var [chr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <225>  [||]
            │       │   │       ├── <214>  [||]
            │       │   │       │   ├── <205>  [||]
            │       │   │       │   │   ├── <196>  [!=]
            │       │   │       │   │   │   ├── <193> Dot
            │       │   │       │   │   │   │   ├── <191> Var [autom]
            │       │   │       │   │   │   │   ╰── d
            │       │   │       │   │   │   ╰── <195> Constant Double [+4e12]
            │       │   │       │   │   ╰── <204>  [!=]
            │       │   │       │   │       ├── <201> Dot
            │       │   │       │   │       │   ├── <199> Var [autom]
            │       │   │       │   │       │   ╰── c
            │       │   │       │   │       ╰── <203> Constant Int [127]
            │       │   │       │   ╰── <213>  [!=]
            │       │   │       │       ├── <210> Dot
            │       │   │       │       │   ├── <208> Var [autom]
            │       │   │       │       │   ╰── l
            │       │   │       │       ╰── <212> Constant Long [8589934594]
            │       │   │       ╰── <224>  [!=]
            │       │   │           ├── <219> Dot
            │       │   │           │   ├── <217> Var [autom]
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <223> AddressOf
            │       │   │               ╰── <222> Var [chr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <226> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <240> AddressOf
            │       │           ╰── <239> Dot
            │       │               ├── <237> Var [autom]
            │       │               ╰── d
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <252> AddressOf
            │       │           ╰── <251> Dot
            │       │               ├── <249> Var [autom]
            │       │               ╰── c
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <268>  [||]
            │       │   │       ├── <260>  [!=]
            │       │   │       │   ├── <257> Dereference
            │       │   │       │   │   ╰── <256> Var [d_ptr]
            │       │   │       │   ╰── <259> Constant Double [+4e12]
            │       │   │       ╰── <267>  [!=]
            │       │   │           ├── <264> Dereference
            │       │   │           │   ╰── <263> Var [c_ptr]
            │       │   │           ╰── <266> Constant Int [127]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <269> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <281>  [!=]
            │       │   │       ├── <278> Dereference
            │       │   │       │   ╰── <277> Dot
            │       │   │       │       ├── <275> Var [autom]
            │       │   │       │       ╰── ptr
            │       │   │       ╰── <280> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <282> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <332> Unary [!]
            │       │   │       ╰── <331> FunctionCall [accept_params]
            │       │   │           ├── <295>  [/]
            │       │   │           │   ├── <292> Dot
            │       │   │           │   │   ├── <290> Var [autom]
            │       │   │           │   │   ╰── d
            │       │   │           │   ╰── <294> Constant Double [+4e10]
            │       │   │           ├── <302>  [*]
            │       │   │           │   ├── <299> Dot
            │       │   │           │   │   ├── <297> Var [autom]
            │       │   │           │   │   ╰── c
            │       │   │           │   ╰── <301> Constant Int [2]
            │       │   │           ├── <309> Cast
            │       │   │           │   ├── Target
            │       │   │           │   │   ╰── Double
            │       │   │           │   ╰── Expression
            │       │   │           │       ╰── <308> Dot
            │       │   │           │           ├── <306> Var [autom]
            │       │   │           │           ╰── l
            │       │   │           ├── <314> Dereference
            │       │   │           │   ╰── <313> Dot
            │       │   │           │       ├── <311> Var [autom]
            │       │   │           │       ╰── ptr
            │       │   │           ├── <318> Dot
            │       │   │           │   ├── <316> Var [autom]
            │       │   │           │   ╰── d
            │       │   │           ├── <322> Dot
            │       │   │           │   ├── <320> Var [autom]
            │       │   │           │   ╰── c
            │       │   │           ├── <326> Dot
            │       │   │           │   ├── <324> Var [autom]
            │       │   │           │   ╰── l
            │       │   │           ╰── <330> Dot
            │       │   │               ├── <328> Var [autom]
            │       │   │               ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <333> Constant Int [0]
            │       ╰── Return
            │           ╰── <338> Constant Int [1]
            ├── Function [test_static]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── stat
            │       │   ├── Type
            │       │   │   ╰── Struct [four_members]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── chr
            │       │   ├── Type
            │       │   │   ╰── Char
            │       │   ├── Initializer
            │       │   │   ╰── <357> Constant Int [100]
            │       │   ╰── Static
            │       ├── <370> Assign [=]
            │       │   ├── <363> Dot
            │       │   │   ├── <361> Var [stat]
            │       │   │   ╰── d
            │       │   ╰── <369>  [*]
            │       │       ├── <366> FunctionCall [get_double]
            │       │       ╰── <368> Constant Double [+2e0]
            │       ├── <378> Assign [=]
            │       │   ├── <375> Dot
            │       │   │   ├── <373> Var [stat]
            │       │   │   ╰── c
            │       │   ╰── <377> Constant Int [127]
            │       ├── <390> Assign [=]
            │       │   ├── <383> Dot
            │       │   │   ├── <381> Var [stat]
            │       │   │   ╰── l
            │       │   ╰── <389>  [/]
            │       │       ├── <386> Var [l]
            │       │       ╰── <388> Constant Int [4]
            │       ├── <400> Assign [=]
            │       │   ├── <395> Dot
            │       │   │   ├── <393> Var [stat]
            │       │   │   ╰── ptr
            │       │   ╰── <399> AddressOf
            │       │       ╰── <398> Var [chr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <437>  [||]
            │       │   │       ├── <426>  [||]
            │       │   │       │   ├── <417>  [||]
            │       │   │       │   │   ├── <408>  [!=]
            │       │   │       │   │   │   ├── <405> Dot
            │       │   │       │   │   │   │   ├── <403> Var [stat]
            │       │   │       │   │   │   │   ╰── d
            │       │   │       │   │   │   ╰── <407> Constant Double [+4e12]
            │       │   │       │   │   ╰── <416>  [!=]
            │       │   │       │   │       ├── <413> Dot
            │       │   │       │   │       │   ├── <411> Var [stat]
            │       │   │       │   │       │   ╰── c
            │       │   │       │   │       ╰── <415> Constant Int [127]
            │       │   │       │   ╰── <425>  [!=]
            │       │   │       │       ├── <422> Dot
            │       │   │       │       │   ├── <420> Var [stat]
            │       │   │       │       │   ╰── l
            │       │   │       │       ╰── <424> Constant Long [8589934594]
            │       │   │       ╰── <436>  [!=]
            │       │   │           ├── <431> Dot
            │       │   │           │   ├── <429> Var [stat]
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <435> AddressOf
            │       │   │               ╰── <434> Var [chr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <438> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <452> AddressOf
            │       │           ╰── <451> Dot
            │       │               ├── <449> Var [stat]
            │       │               ╰── d
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <464> AddressOf
            │       │           ╰── <463> Dot
            │       │               ├── <461> Var [stat]
            │       │               ╰── c
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <480>  [||]
            │       │   │       ├── <472>  [!=]
            │       │   │       │   ├── <469> Dereference
            │       │   │       │   │   ╰── <468> Var [d_ptr]
            │       │   │       │   ╰── <471> Constant Double [+4e12]
            │       │   │       ╰── <479>  [!=]
            │       │   │           ├── <476> Dereference
            │       │   │           │   ╰── <475> Var [c_ptr]
            │       │   │           ╰── <478> Constant Int [127]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <481> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <493>  [!=]
            │       │   │       ├── <490> Dereference
            │       │   │       │   ╰── <489> Dot
            │       │   │       │       ├── <487> Var [stat]
            │       │   │       │       ╰── ptr
            │       │   │       ╰── <492> Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <494> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <544> Unary [!]
            │       │   │       ╰── <543> FunctionCall [accept_params]
            │       │   │           ├── <507>  [/]
            │       │   │           │   ├── <504> Dot
            │       │   │           │   │   ├── <502> Var [stat]
            │       │   │           │   │   ╰── d
            │       │   │           │   ╰── <506> Constant Double [+4e10]
            │       │   │           ├── <514>  [*]
            │       │   │           │   ├── <511> Dot
            │       │   │           │   │   ├── <509> Var [stat]
            │       │   │           │   │   ╰── c
            │       │   │           │   ╰── <513> Constant Int [2]
            │       │   │           ├── <521> Cast
            │       │   │           │   ├── Target
            │       │   │           │   │   ╰── Double
            │       │   │           │   ╰── Expression
            │       │   │           │       ╰── <520> Dot
            │       │   │           │           ├── <518> Var [stat]
            │       │   │           │           ╰── l
            │       │   │           ├── <526> Dereference
            │       │   │           │   ╰── <525> Dot
            │       │   │           │       ├── <523> Var [stat]
            │       │   │           │       ╰── ptr
            │       │   │           ├── <530> Dot
            │       │   │           │   ├── <528> Var [stat]
            │       │   │           │   ╰── d
            │       │   │           ├── <534> Dot
            │       │   │           │   ├── <532> Var [stat]
            │       │   │           │   ╰── c
            │       │   │           ├── <538> Dot
            │       │   │           │   ├── <536> Var [stat]
            │       │   │           │   ╰── l
            │       │   │           ╰── <542> Dot
            │       │   │               ├── <540> Var [stat]
            │       │   │               ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <545> Constant Int [0]
            │       ╰── Return
            │           ╰── <550> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <562> Unary [!]
                    │   │       ╰── <561> FunctionCall [test_auto]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <563> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <571> Unary [!]
                    │   │       ╰── <570> FunctionCall [test_static]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <572> Constant Int [2]
                    ╰── Return
                        ╰── <577> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_linked_list() {
    let src = r#"
        void *malloc(unsigned long size);
        struct linked_list_node {
            int val;
            struct linked_list_node *next;
        };
        struct linked_list_node *array_to_list(int *array, int count) {
            struct linked_list_node *head =
                (struct linked_list_node *)malloc(sizeof(struct linked_list_node));
            head->val = array[0];
            head->next = 0;
            struct linked_list_node *current = head;
            for (int i = 1; i < count; i = i + 1) {
                current->next =
                    (struct linked_list_node *)malloc(sizeof(struct linked_list_node));
                current->next->next = 0;
                current->next->val = array[i];
                current = current->next;
            }
            return head;
        }
        int main(void) {
            int arr[4] = {9, 8, 7, 6};
            struct linked_list_node *elem = array_to_list(arr, 4);
            for (int i = 0; i < 4; i = i + 1) {
                int expected = arr[i];
                if (elem->val != expected) {
                    return i + 1;
                }
                elem = elem->next;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [linked_list_node]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── val
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── next
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Struct [linked_list_node]
            ├── Function [array_to_list]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── array
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── count
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── head
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [linked_list_node]
            │       │   ╰── Initializer
            │       │       ╰── <57> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Struct [linked_list_node]
            │       │           ╰── Expression
            │       │               ╰── <56> FunctionCall [malloc]
            │       │                   ╰── <55> SizeOfType
            │       │                       ╰── Struct [linked_list_node]
            │       ├── <69> Assign [=]
            │       │   ├── <63> Arrow
            │       │   │   ├── <61> Var [head]
            │       │   │   ╰── val
            │       │   ╰── <68> Subscript
            │       │       ├── <66> Var [array]
            │       │       ╰── <67> Constant Int [0]
            │       ├── <77> Assign [=]
            │       │   ├── <74> Arrow
            │       │   │   ├── <72> Var [head]
            │       │   │   ╰── next
            │       │   ╰── <76> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── current
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [linked_list_node]
            │       │   ╰── Initializer
            │       │       ╰── <86> Var [head]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <92> Constant Int [1]
            │       │   ├── Condition
            │       │   │   ╰── <101>  [<]
            │       │   │       ├── <97> Var [i]
            │       │   │       ╰── <100> Var [count]
            │       │   ├── Condition
            │       │   │   ╰── <110> Assign [=]
            │       │   │       ├── <103> Var [i]
            │       │   │       ╰── <109>  [+]
            │       │   │           ├── <106> Var [i]
            │       │   │           ╰── <108> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── <127> Assign [=]
            │       │       │   ├── <114> Arrow
            │       │       │   │   ├── <112> Var [current]
            │       │       │   │   ╰── next
            │       │       │   ╰── <126> Cast
            │       │       │       ├── Target
            │       │       │       │   ╰── Pointer
            │       │       │       │       ╰── Struct [linked_list_node]
            │       │       │       ╰── Expression
            │       │       │           ╰── <125> FunctionCall [malloc]
            │       │       │               ╰── <124> SizeOfType
            │       │       │                   ╰── Struct [linked_list_node]
            │       │       ├── <137> Assign [=]
            │       │       │   ├── <134> Arrow
            │       │       │   │   ├── <132> Arrow
            │       │       │   │   │   ├── <130> Var [current]
            │       │       │   │   │   ╰── next
            │       │       │   │   ╰── next
            │       │       │   ╰── <136> Constant Int [0]
            │       │       ├── <151> Assign [=]
            │       │       │   ├── <144> Arrow
            │       │       │   │   ├── <142> Arrow
            │       │       │   │   │   ├── <140> Var [current]
            │       │       │   │   │   ╰── next
            │       │       │   │   ╰── val
            │       │       │   ╰── <150> Subscript
            │       │       │       ├── <147> Var [array]
            │       │       │       ╰── <149> Var [i]
            │       │       ╰── <160> Assign [=]
            │       │           ├── <154> Var [current]
            │       │           ╰── <159> Arrow
            │       │               ├── <157> Var [current]
            │       │               ╰── next
            │       ╰── Return
            │           ╰── <166> Var [head]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <181> Constant Int [9]
                    │           ├── <183> Constant Int [8]
                    │           ├── <185> Constant Int [7]
                    │           ╰── <187> Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── elem
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [linked_list_node]
                    │   ╰── Initializer
                    │       ╰── <201> FunctionCall [array_to_list]
                    │           ├── <199> Var [arr]
                    │           ╰── <200> Constant Int [4]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <207> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <215>  [<]
                    │   │       ├── <212> Var [i]
                    │   │       ╰── <214> Constant Int [4]
                    │   ├── Condition
                    │   │   ╰── <224> Assign [=]
                    │   │       ├── <217> Var [i]
                    │   │       ╰── <223>  [+]
                    │   │           ├── <220> Var [i]
                    │   │           ╰── <222> Constant Int [1]
                    │   ╰── Block
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── expected
                    │       │   ├── Type
                    │       │   │   ╰── Int
                    │       │   ╰── Initializer
                    │       │       ╰── <232> Subscript
                    │       │           ├── <229> Var [arr]
                    │       │           ╰── <231> Var [i]
                    │       ├── If
                    │       │   ├── Condition
                    │       │   │   ╰── <242>  [!=]
                    │       │   │       ├── <238> Arrow
                    │       │   │       │   ├── <236> Var [elem]
                    │       │   │       │   ╰── val
                    │       │   │       ╰── <241> Var [expected]
                    │       │   ╰── Then
                    │       │       ╰── Block
                    │       │           ╰── Return
                    │       │               ╰── <247>  [+]
                    │       │                   ├── <244> Var [i]
                    │       │                   ╰── <246> Constant Int [1]
                    │       ╰── <259> Assign [=]
                    │           ├── <253> Var [elem]
                    │           ╰── <258> Arrow
                    │               ├── <256> Var [elem]
                    │               ╰── next
                    ╰── Return
                        ╰── <264> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_nested_struct() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        void *malloc(unsigned long size);
        struct inner {
            double a;
            char b;
            int *ptr;
        };
        struct outer {
            unsigned long l;
            struct inner *in_ptr;
            struct inner in_array[4];
            int bar;
            struct inner in;
        };
        int ptr_target;
        int test_auto_dot(void) {
            struct outer s;
            s.in.a = 1.0;
            s.in.b = 2;
            s.in.ptr = &ptr_target;
            if (s.in.a != 1.0 || s.in.b != 2 || s.in.ptr != &ptr_target) {
                return 0;
            }
            char *char_ptr = &s.in.b;
            if (*char_ptr != 2) {
                return 0;
            }
            *s.in.ptr = 5;
            if (ptr_target != 5) {
                return 0;
            }
            s.in.a = s.in.b;
            if (s.in.a != 2.0) {
                return 0;
            }
            return 1;
        }
        int test_static_dot(void) {
            static struct outer s;
            s.in.a = 1.0;
            s.in.b = 2;
            s.in.ptr = &ptr_target;
            if (s.in.a != 1.0 || s.in.b != 2 || s.in.ptr != &ptr_target) {
                return 0;
            }
            char *char_ptr = &s.in.b;
            if (*char_ptr != 2) {
                return 0;
            }
            *s.in.ptr = 6;
            if (ptr_target != 6) {
                return 0;
            }
            s.in.a = s.in.b;
            if (s.in.a != 2.0) {
                return 0;
            }
            return 1;
        }
        int test_auto_arrow(void) {
            struct inner in;
            struct outer s;
            struct outer *s_ptr = &s;
            s_ptr->in_ptr = &in;
            s_ptr->l = 4294967295ul;
            s_ptr->bar = -5;
            s_ptr->in_ptr->a = 10.0;
            s_ptr->in_ptr->b = 'x';
            s_ptr->in_array->a = 11.0;
            (s_ptr->in_array + 3)->a = 12.0;
            s_ptr->in_array->ptr = &s_ptr->bar;
            if (s_ptr->l != 4294967295ul || s_ptr->bar != -5) {
                return 0;
            }
            if (s_ptr->in_ptr->a != 10.0 || s_ptr->in_ptr->b != 'x' ||
                s_ptr->in_array->a != 11.0 || (s_ptr->in_array + 3)->a != 12.0) {
                return 0;
            }
            char *char_ptr = &s_ptr->in_ptr->b;
            if (*char_ptr != 'x') {
                return 0;
            }
            *s_ptr->in_array->ptr = 123;
            if (s_ptr->bar != 123) {
                return 0;
            }
            s_ptr->in_array->b = s_ptr->in_ptr->b;
            if (s_ptr->in_array[0].b != 'x') {
                return 0;
            }
            return 1;
        }
        int test_static_arrow(void) {
            static struct inner in;
            static struct outer s;
            static struct outer *s_ptr;
            s_ptr = &s;
            s_ptr->in_ptr = &in;
            s_ptr->l = 4294967295ul;
            s_ptr->bar = -5;
            s_ptr->in_ptr->a = 10.0;
            s_ptr->in_ptr->b = 'x';
            s_ptr->in_array->a = 11.0;
            (s_ptr->in_array + 3)->a = 12.0;
            s_ptr->in_array->ptr = &s_ptr->bar;
            if (s_ptr->l != 4294967295ul || s_ptr->bar != -5) {
                return 0;
            }
            if (s_ptr->in_ptr->a != 10.0 || s_ptr->in_ptr->b != 'x' ||
                s_ptr->in_array->a != 11.0 || (s_ptr->in_array + 3)->a != 12.0) {
                return 0;
            }
            char *char_ptr = &s_ptr->in_ptr->b;
            if (*char_ptr != 'x') {
                return 0;
            }
            *s_ptr->in_array->ptr = 123;
            if (s_ptr->bar != 123) {
                return 0;
            }
            s_ptr->in_ptr->b = s_ptr->in_ptr->a;
            if (s_ptr->in_ptr->b != 10) {
                return 0;
            }
            return 1;
        }
        int test_mixed(void) {
            struct inner *in_ptr = malloc(sizeof(struct inner));
            struct outer out;
            out.in_ptr = in_ptr;
            struct outer *out_ptr = &out;
            out.l = 10;
            out.bar = 20;
            out.in_ptr->a = -1.0;
            out.in_ptr->b = '!';
            out.in_ptr->ptr = 0;
            out_ptr->in_array[0].a = -2.0;
            out_ptr->in_array[0].b = '?';
            out_ptr->in_array[0].ptr = 0;
            out_ptr->in_array[3].a = -3.0;
            out_ptr->in_array[3].b = '*';
            out_ptr->in_array[3].ptr = malloc(sizeof(int));
            out_ptr->in.a = -3.0;
            out_ptr->in.b = '&';
            int i = 9;
            out_ptr->in.ptr = &i;
            if (out.l != 10 || out.bar != 20) {
                return 0;
            }
            if (out.in_ptr->a != -1.0 || out.in_ptr->b != '!' || out.in_ptr->ptr) {
                return 0;
            }
            if (out_ptr->in_array[0].a != -2.0 || out_ptr->in_array[0].b != '?' ||
                out_ptr->in_array[0].ptr || out_ptr->in_array[3].a != -3.0 ||
                out_ptr->in_array[3].b != '*' || out_ptr->in.a != -3.0 ||
                out_ptr->in.b != '&' || out_ptr->in.ptr != &i) {
                return 0;
            }
            *out_ptr->in_array[3].ptr = 5;
            if (*out_ptr->in_array[3].ptr != 5) {
                return 0;
            }
            out_ptr->in.b = out.in_ptr->b;
            if (out_ptr->in.b != out.in_ptr->b) {
                return 0;
            }
            return 1;
        }
        int test_array_of_structs(void) {
            static struct outer struct_array[3];
            struct inner *in_ptr = malloc(sizeof(struct inner));
            struct_array[0].in_ptr = in_ptr;
            struct_array[1].in_ptr = in_ptr;
            struct_array[0].in_ptr->a = 20.0;
            struct_array[1].in_ptr->b = '@';
            struct_array[0].in_ptr->ptr = 0;
            struct_array[1].in_array[1].a = 30.0;
            struct_array[1].in_array[0].b = '#';
            struct_array[2].in.a = 40.0;
            struct_array[2].in.b = '$';
            if (struct_array[1].in_ptr->a != 20.0 || struct_array[0].in_ptr->b != '@' ||
                struct_array[1].in_ptr->ptr) {
                return 0;
            }
            if (struct_array[1].in_array[1].a != 30.0 ||
                struct_array[1].in_array[0].b != '#' || struct_array[2].in.a != 40.0 ||
                struct_array[2].in.b != '$') {
                return 0;
            }
            return 1;
        }
        int test_array_of_struct_pointers(void) {
            struct outer *ptr_array[2];
            ptr_array[0] = calloc(1, sizeof(struct outer));
            ptr_array[1] = calloc(1, sizeof(struct outer));
            ptr_array[1]->in_ptr = calloc(1, sizeof(struct inner));
            ptr_array[1]->in_ptr->ptr = 0;
            ptr_array[1]->in_ptr->b = '%';
            ptr_array[1]->in_ptr->a = 876.5;
            ptr_array[1]->in_array[2].a = 1000.5;
            ptr_array[1]->in.a = 7e6;
            ptr_array[0]->in_ptr = calloc(1, sizeof(struct inner));
            ptr_array[0]->in_ptr->ptr = 0;
            ptr_array[0]->in_ptr->b = '^';
            ptr_array[0]->in_ptr->a = 123.4;
            ptr_array[0]->in_array[1].b = '&';
            ptr_array[0]->in.ptr = &ptr_array[0]->bar;
            ptr_array[0]->bar = 900;
            if (ptr_array[0]->in_array[1].b != '&') {
                return 0;
            }
            if (ptr_array[0]->in_ptr->a != 123.4 || ptr_array[0]->in_ptr->b != '^' ||
                ptr_array[0]->in_ptr->ptr) {
                return 0;
            }
            if (ptr_array[1]->in.a != 7e6) {
                return 0;
            }
            if (ptr_array[1]->in_array[2].a != 1000.5) {
                return 0;
            }
            if (ptr_array[1]->in_ptr->a != 876.5 || ptr_array[1]->in_ptr->b != '%' ||
                ptr_array[1]->in_ptr->ptr) {
                return 0;
            }
            if (*ptr_array[0]->in.ptr != 900) {
                return 0;
            }
            if (ptr_array[0]->l) {
                return 0;
            }
            for (int i = 0; i < 4; i = i + 1) {
                struct inner *elem_ptr = &ptr_array[0]->in_array[i];
                if (elem_ptr->a || elem_ptr->ptr) {
                    return 0;
                }
                if (elem_ptr->b && i != 1) {
                    return 0;
                }
            }
            if (ptr_array[0]->in.a || ptr_array[0]->in.b) {
                return 0;
            }
            if (ptr_array[1]->l || ptr_array[1]->bar) {
                return 0;
            }
            for (int i = 0; i < 4; i = i + 1) {
                struct inner *elem_ptr = &ptr_array[1]->in_array[i];
                if (elem_ptr->b || elem_ptr->ptr) {
                    return 0;
                }
                if (elem_ptr->a && i != 2) {
                    return 0;
                }
            }
            if (ptr_array[1]->in.b || ptr_array[1]->in.ptr) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto_dot()) {
                return 1;
            }
            if (!test_static_dot()) {
                return 2;
            }
            if (!test_auto_arrow()) {
                return 3;
            }
            if (!test_static_arrow()) {
                return 4;
            }
            if (!test_mixed()) {
                return 5;
            }
            if (!test_array_of_structs()) {
                return 6;
            }
            if (!test_array_of_struct_pointers()) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ptr
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Unsigned Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── in_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── in_array
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 4
            │   │           ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── bar
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── in
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr_target
            │   ╰── Type
            │       ╰── Int
            ├── Function [test_auto_dot]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ╰── Type
            │       │       ╰── Struct [outer]
            │       ├── <94> Assign [=]
            │       │   ├── <91> Dot
            │       │   │   ├── <89> Dot
            │       │   │   │   ├── <87> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <93> Constant Double [+1e0]
            │       ├── <104> Assign [=]
            │       │   ├── <101> Dot
            │       │   │   ├── <99> Dot
            │       │   │   │   ├── <97> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── b
            │       │   ╰── <103> Constant Int [2]
            │       ├── <116> Assign [=]
            │       │   ├── <111> Dot
            │       │   │   ├── <109> Dot
            │       │   │   │   ├── <107> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── ptr
            │       │   ╰── <115> AddressOf
            │       │       ╰── <114> Var [ptr_target]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <150>  [||]
            │       │   │       ├── <137>  [||]
            │       │   │       │   ├── <126>  [!=]
            │       │   │       │   │   ├── <123> Dot
            │       │   │       │   │   │   ├── <121> Dot
            │       │   │       │   │   │   │   ├── <119> Var [s]
            │       │   │       │   │   │   │   ╰── in
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <125> Constant Double [+1e0]
            │       │   │       │   ╰── <136>  [!=]
            │       │   │       │       ├── <133> Dot
            │       │   │       │       │   ├── <131> Dot
            │       │   │       │       │   │   ├── <129> Var [s]
            │       │   │       │       │   │   ╰── in
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <135> Constant Int [2]
            │       │   │       ╰── <149>  [!=]
            │       │   │           ├── <144> Dot
            │       │   │           │   ├── <142> Dot
            │       │   │           │   │   ├── <140> Var [s]
            │       │   │           │   │   ╰── in
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <148> AddressOf
            │       │   │               ╰── <147> Var [ptr_target]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <151> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── char_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <167> AddressOf
            │       │           ╰── <166> Dot
            │       │               ├── <164> Dot
            │       │               │   ├── <162> Var [s]
            │       │               │   ╰── in
            │       │               ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <175>  [!=]
            │       │   │       ├── <172> Dereference
            │       │   │       │   ╰── <171> Var [char_ptr]
            │       │   │       ╰── <174> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <176> Constant Int [0]
            │       ├── <190> Assign [=]
            │       │   ├── <187> Dereference
            │       │   │   ╰── <186> Dot
            │       │   │       ├── <184> Dot
            │       │   │       │   ├── <182> Var [s]
            │       │   │       │   ╰── in
            │       │   │       ╰── ptr
            │       │   ╰── <189> Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <196>  [!=]
            │       │   │       ├── <193> Var [ptr_target]
            │       │   │       ╰── <195> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <197> Constant Int [0]
            │       ├── <215> Assign [=]
            │       │   ├── <207> Dot
            │       │   │   ├── <205> Dot
            │       │   │   │   ├── <203> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <214> Dot
            │       │       ├── <212> Dot
            │       │       │   ├── <210> Var [s]
            │       │       │   ╰── in
            │       │       ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <225>  [!=]
            │       │   │       ├── <222> Dot
            │       │   │       │   ├── <220> Dot
            │       │   │       │   │   ├── <218> Var [s]
            │       │   │       │   │   ╰── in
            │       │   │       │   ╰── a
            │       │   │       ╰── <224> Constant Double [+2e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <226> Constant Int [0]
            │       ╰── Return
            │           ╰── <231> Constant Int [1]
            ├── Function [test_static_dot]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Static
            │       ├── <254> Assign [=]
            │       │   ├── <251> Dot
            │       │   │   ├── <249> Dot
            │       │   │   │   ├── <247> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <253> Constant Double [+1e0]
            │       ├── <264> Assign [=]
            │       │   ├── <261> Dot
            │       │   │   ├── <259> Dot
            │       │   │   │   ├── <257> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── b
            │       │   ╰── <263> Constant Int [2]
            │       ├── <276> Assign [=]
            │       │   ├── <271> Dot
            │       │   │   ├── <269> Dot
            │       │   │   │   ├── <267> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── ptr
            │       │   ╰── <275> AddressOf
            │       │       ╰── <274> Var [ptr_target]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <310>  [||]
            │       │   │       ├── <297>  [||]
            │       │   │       │   ├── <286>  [!=]
            │       │   │       │   │   ├── <283> Dot
            │       │   │       │   │   │   ├── <281> Dot
            │       │   │       │   │   │   │   ├── <279> Var [s]
            │       │   │       │   │   │   │   ╰── in
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <285> Constant Double [+1e0]
            │       │   │       │   ╰── <296>  [!=]
            │       │   │       │       ├── <293> Dot
            │       │   │       │       │   ├── <291> Dot
            │       │   │       │       │   │   ├── <289> Var [s]
            │       │   │       │       │   │   ╰── in
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <295> Constant Int [2]
            │       │   │       ╰── <309>  [!=]
            │       │   │           ├── <304> Dot
            │       │   │           │   ├── <302> Dot
            │       │   │           │   │   ├── <300> Var [s]
            │       │   │           │   │   ╰── in
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <308> AddressOf
            │       │   │               ╰── <307> Var [ptr_target]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <311> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── char_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <327> AddressOf
            │       │           ╰── <326> Dot
            │       │               ├── <324> Dot
            │       │               │   ├── <322> Var [s]
            │       │               │   ╰── in
            │       │               ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <335>  [!=]
            │       │   │       ├── <332> Dereference
            │       │   │       │   ╰── <331> Var [char_ptr]
            │       │   │       ╰── <334> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <336> Constant Int [0]
            │       ├── <350> Assign [=]
            │       │   ├── <347> Dereference
            │       │   │   ╰── <346> Dot
            │       │   │       ├── <344> Dot
            │       │   │       │   ├── <342> Var [s]
            │       │   │       │   ╰── in
            │       │   │       ╰── ptr
            │       │   ╰── <349> Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <356>  [!=]
            │       │   │       ├── <353> Var [ptr_target]
            │       │   │       ╰── <355> Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <357> Constant Int [0]
            │       ├── <375> Assign [=]
            │       │   ├── <367> Dot
            │       │   │   ├── <365> Dot
            │       │   │   │   ├── <363> Var [s]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <374> Dot
            │       │       ├── <372> Dot
            │       │       │   ├── <370> Var [s]
            │       │       │   ╰── in
            │       │       ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <385>  [!=]
            │       │   │       ├── <382> Dot
            │       │   │       │   ├── <380> Dot
            │       │   │       │   │   ├── <378> Var [s]
            │       │   │       │   │   ╰── in
            │       │   │       │   ╰── a
            │       │   │       ╰── <384> Constant Double [+2e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <386> Constant Int [0]
            │       ╰── Return
            │           ╰── <391> Constant Int [1]
            ├── Function [test_auto_arrow]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── in
            │       │   ╰── Type
            │       │       ╰── Struct [inner]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ╰── Type
            │       │       ╰── Struct [outer]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── <418> AddressOf
            │       │           ╰── <417> Var [s]
            │       ├── <429> Assign [=]
            │       │   ├── <424> Arrow
            │       │   │   ├── <422> Var [s_ptr]
            │       │   │   ╰── in_ptr
            │       │   ╰── <428> AddressOf
            │       │       ╰── <427> Var [in]
            │       ├── <437> Assign [=]
            │       │   ├── <434> Arrow
            │       │   │   ├── <432> Var [s_ptr]
            │       │   │   ╰── l
            │       │   ╰── <436> Constant ULong [4294967295]
            │       ├── <447> Assign [=]
            │       │   ├── <442> Arrow
            │       │   │   ├── <440> Var [s_ptr]
            │       │   │   ╰── bar
            │       │   ╰── <446> Unary [-]
            │       │       ╰── <445> Constant Int [5]
            │       ├── <457> Assign [=]
            │       │   ├── <454> Arrow
            │       │   │   ├── <452> Arrow
            │       │   │   │   ├── <450> Var [s_ptr]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── a
            │       │   ╰── <456> Constant Double [+1e1]
            │       ├── <467> Assign [=]
            │       │   ├── <464> Arrow
            │       │   │   ├── <462> Arrow
            │       │   │   │   ├── <460> Var [s_ptr]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <466> Constant Int [120]
            │       ├── <477> Assign [=]
            │       │   ├── <474> Arrow
            │       │   │   ├── <472> Arrow
            │       │   │   │   ├── <470> Var [s_ptr]
            │       │   │   │   ╰── in_array
            │       │   │   ╰── a
            │       │   ╰── <476> Constant Double [+1.1e1]
            │       ├── <491> Assign [=]
            │       │   ├── <488> Arrow
            │       │   │   ├── <486>  [+]
            │       │   │   │   ├── <482> Arrow
            │       │   │   │   │   ├── <480> Var [s_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <484> Constant Int [3]
            │       │   │   ╰── a
            │       │   ╰── <490> Constant Double [+1.2e1]
            │       ├── <505> Assign [=]
            │       │   ├── <498> Arrow
            │       │   │   ├── <496> Arrow
            │       │   │   │   ├── <494> Var [s_ptr]
            │       │   │   │   ╰── in_array
            │       │   │   ╰── ptr
            │       │   ╰── <504> AddressOf
            │       │       ╰── <503> Arrow
            │       │           ├── <501> Var [s_ptr]
            │       │           ╰── bar
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <524>  [||]
            │       │   │       ├── <513>  [!=]
            │       │   │       │   ├── <510> Arrow
            │       │   │       │   │   ├── <508> Var [s_ptr]
            │       │   │       │   │   ╰── l
            │       │   │       │   ╰── <512> Constant ULong [4294967295]
            │       │   │       ╰── <523>  [!=]
            │       │   │           ├── <518> Arrow
            │       │   │           │   ├── <516> Var [s_ptr]
            │       │   │           │   ╰── bar
            │       │   │           ╰── <522> Unary [-]
            │       │   │               ╰── <521> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <525> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <575>  [||]
            │       │   │       ├── <560>  [||]
            │       │   │       │   ├── <549>  [||]
            │       │   │       │   │   ├── <538>  [!=]
            │       │   │       │   │   │   ├── <535> Arrow
            │       │   │       │   │   │   │   ├── <533> Arrow
            │       │   │       │   │   │   │   │   ├── <531> Var [s_ptr]
            │       │   │       │   │   │   │   │   ╰── in_ptr
            │       │   │       │   │   │   │   ╰── a
            │       │   │       │   │   │   ╰── <537> Constant Double [+1e1]
            │       │   │       │   │   ╰── <548>  [!=]
            │       │   │       │   │       ├── <545> Arrow
            │       │   │       │   │       │   ├── <543> Arrow
            │       │   │       │   │       │   │   ├── <541> Var [s_ptr]
            │       │   │       │   │       │   │   ╰── in_ptr
            │       │   │       │   │       │   ╰── b
            │       │   │       │   │       ╰── <547> Constant Int [120]
            │       │   │       │   ╰── <559>  [!=]
            │       │   │       │       ├── <556> Arrow
            │       │   │       │       │   ├── <554> Arrow
            │       │   │       │       │   │   ├── <552> Var [s_ptr]
            │       │   │       │       │   │   ╰── in_array
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <558> Constant Double [+1.1e1]
            │       │   │       ╰── <574>  [!=]
            │       │   │           ├── <571> Arrow
            │       │   │           │   ├── <569>  [+]
            │       │   │           │   │   ├── <565> Arrow
            │       │   │           │   │   │   ├── <563> Var [s_ptr]
            │       │   │           │   │   │   ╰── in_array
            │       │   │           │   │   ╰── <567> Constant Int [3]
            │       │   │           │   ╰── a
            │       │   │           ╰── <573> Constant Double [+1.2e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <576> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── char_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <592> AddressOf
            │       │           ╰── <591> Arrow
            │       │               ├── <589> Arrow
            │       │               │   ├── <587> Var [s_ptr]
            │       │               │   ╰── in_ptr
            │       │               ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <600>  [!=]
            │       │   │       ├── <597> Dereference
            │       │   │       │   ╰── <596> Var [char_ptr]
            │       │   │       ╰── <599> Constant Int [120]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <601> Constant Int [0]
            │       ├── <615> Assign [=]
            │       │   ├── <612> Dereference
            │       │   │   ╰── <611> Arrow
            │       │   │       ├── <609> Arrow
            │       │   │       │   ├── <607> Var [s_ptr]
            │       │   │       │   ╰── in_array
            │       │   │       ╰── ptr
            │       │   ╰── <614> Constant Int [123]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <623>  [!=]
            │       │   │       ├── <620> Arrow
            │       │   │       │   ├── <618> Var [s_ptr]
            │       │   │       │   ╰── bar
            │       │   │       ╰── <622> Constant Int [123]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <624> Constant Int [0]
            │       ├── <642> Assign [=]
            │       │   ├── <634> Arrow
            │       │   │   ├── <632> Arrow
            │       │   │   │   ├── <630> Var [s_ptr]
            │       │   │   │   ╰── in_array
            │       │   │   ╰── b
            │       │   ╰── <641> Arrow
            │       │       ├── <639> Arrow
            │       │       │   ├── <637> Var [s_ptr]
            │       │       │   ╰── in_ptr
            │       │       ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <654>  [!=]
            │       │   │       ├── <651> Dot
            │       │   │       │   ├── <649> Subscript
            │       │   │       │   │   ├── <647> Arrow
            │       │   │       │   │   │   ├── <645> Var [s_ptr]
            │       │   │       │   │   │   ╰── in_array
            │       │   │       │   │   ╰── <648> Constant Int [0]
            │       │   │       │   ╰── b
            │       │   │       ╰── <653> Constant Int [120]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <655> Constant Int [0]
            │       ╰── Return
            │           ╰── <660> Constant Int [1]
            ├── Function [test_static_arrow]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── in
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Static
            │       ├── <695> Assign [=]
            │       │   ├── <690> Var [s_ptr]
            │       │   ╰── <694> AddressOf
            │       │       ╰── <693> Var [s]
            │       ├── <705> Assign [=]
            │       │   ├── <700> Arrow
            │       │   │   ├── <698> Var [s_ptr]
            │       │   │   ╰── in_ptr
            │       │   ╰── <704> AddressOf
            │       │       ╰── <703> Var [in]
            │       ├── <713> Assign [=]
            │       │   ├── <710> Arrow
            │       │   │   ├── <708> Var [s_ptr]
            │       │   │   ╰── l
            │       │   ╰── <712> Constant ULong [4294967295]
            │       ├── <723> Assign [=]
            │       │   ├── <718> Arrow
            │       │   │   ├── <716> Var [s_ptr]
            │       │   │   ╰── bar
            │       │   ╰── <722> Unary [-]
            │       │       ╰── <721> Constant Int [5]
            │       ├── <733> Assign [=]
            │       │   ├── <730> Arrow
            │       │   │   ├── <728> Arrow
            │       │   │   │   ├── <726> Var [s_ptr]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── a
            │       │   ╰── <732> Constant Double [+1e1]
            │       ├── <743> Assign [=]
            │       │   ├── <740> Arrow
            │       │   │   ├── <738> Arrow
            │       │   │   │   ├── <736> Var [s_ptr]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <742> Constant Int [120]
            │       ├── <753> Assign [=]
            │       │   ├── <750> Arrow
            │       │   │   ├── <748> Arrow
            │       │   │   │   ├── <746> Var [s_ptr]
            │       │   │   │   ╰── in_array
            │       │   │   ╰── a
            │       │   ╰── <752> Constant Double [+1.1e1]
            │       ├── <767> Assign [=]
            │       │   ├── <764> Arrow
            │       │   │   ├── <762>  [+]
            │       │   │   │   ├── <758> Arrow
            │       │   │   │   │   ├── <756> Var [s_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <760> Constant Int [3]
            │       │   │   ╰── a
            │       │   ╰── <766> Constant Double [+1.2e1]
            │       ├── <781> Assign [=]
            │       │   ├── <774> Arrow
            │       │   │   ├── <772> Arrow
            │       │   │   │   ├── <770> Var [s_ptr]
            │       │   │   │   ╰── in_array
            │       │   │   ╰── ptr
            │       │   ╰── <780> AddressOf
            │       │       ╰── <779> Arrow
            │       │           ├── <777> Var [s_ptr]
            │       │           ╰── bar
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <800>  [||]
            │       │   │       ├── <789>  [!=]
            │       │   │       │   ├── <786> Arrow
            │       │   │       │   │   ├── <784> Var [s_ptr]
            │       │   │       │   │   ╰── l
            │       │   │       │   ╰── <788> Constant ULong [4294967295]
            │       │   │       ╰── <799>  [!=]
            │       │   │           ├── <794> Arrow
            │       │   │           │   ├── <792> Var [s_ptr]
            │       │   │           │   ╰── bar
            │       │   │           ╰── <798> Unary [-]
            │       │   │               ╰── <797> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <801> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <851>  [||]
            │       │   │       ├── <836>  [||]
            │       │   │       │   ├── <825>  [||]
            │       │   │       │   │   ├── <814>  [!=]
            │       │   │       │   │   │   ├── <811> Arrow
            │       │   │       │   │   │   │   ├── <809> Arrow
            │       │   │       │   │   │   │   │   ├── <807> Var [s_ptr]
            │       │   │       │   │   │   │   │   ╰── in_ptr
            │       │   │       │   │   │   │   ╰── a
            │       │   │       │   │   │   ╰── <813> Constant Double [+1e1]
            │       │   │       │   │   ╰── <824>  [!=]
            │       │   │       │   │       ├── <821> Arrow
            │       │   │       │   │       │   ├── <819> Arrow
            │       │   │       │   │       │   │   ├── <817> Var [s_ptr]
            │       │   │       │   │       │   │   ╰── in_ptr
            │       │   │       │   │       │   ╰── b
            │       │   │       │   │       ╰── <823> Constant Int [120]
            │       │   │       │   ╰── <835>  [!=]
            │       │   │       │       ├── <832> Arrow
            │       │   │       │       │   ├── <830> Arrow
            │       │   │       │       │   │   ├── <828> Var [s_ptr]
            │       │   │       │       │   │   ╰── in_array
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <834> Constant Double [+1.1e1]
            │       │   │       ╰── <850>  [!=]
            │       │   │           ├── <847> Arrow
            │       │   │           │   ├── <845>  [+]
            │       │   │           │   │   ├── <841> Arrow
            │       │   │           │   │   │   ├── <839> Var [s_ptr]
            │       │   │           │   │   │   ╰── in_array
            │       │   │           │   │   ╰── <843> Constant Int [3]
            │       │   │           │   ╰── a
            │       │   │           ╰── <849> Constant Double [+1.2e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <852> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── char_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <868> AddressOf
            │       │           ╰── <867> Arrow
            │       │               ├── <865> Arrow
            │       │               │   ├── <863> Var [s_ptr]
            │       │               │   ╰── in_ptr
            │       │               ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <876>  [!=]
            │       │   │       ├── <873> Dereference
            │       │   │       │   ╰── <872> Var [char_ptr]
            │       │   │       ╰── <875> Constant Int [120]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <877> Constant Int [0]
            │       ├── <891> Assign [=]
            │       │   ├── <888> Dereference
            │       │   │   ╰── <887> Arrow
            │       │   │       ├── <885> Arrow
            │       │   │       │   ├── <883> Var [s_ptr]
            │       │   │       │   ╰── in_array
            │       │   │       ╰── ptr
            │       │   ╰── <890> Constant Int [123]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <899>  [!=]
            │       │   │       ├── <896> Arrow
            │       │   │       │   ├── <894> Var [s_ptr]
            │       │   │       │   ╰── bar
            │       │   │       ╰── <898> Constant Int [123]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <900> Constant Int [0]
            │       ├── <918> Assign [=]
            │       │   ├── <910> Arrow
            │       │   │   ├── <908> Arrow
            │       │   │   │   ├── <906> Var [s_ptr]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <917> Arrow
            │       │       ├── <915> Arrow
            │       │       │   ├── <913> Var [s_ptr]
            │       │       │   ╰── in_ptr
            │       │       ╰── a
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <928>  [!=]
            │       │   │       ├── <925> Arrow
            │       │   │       │   ├── <923> Arrow
            │       │   │       │   │   ├── <921> Var [s_ptr]
            │       │   │       │   │   ╰── in_ptr
            │       │   │       │   ╰── b
            │       │   │       ╰── <927> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <929> Constant Int [0]
            │       ╰── Return
            │           ╰── <934> Constant Int [1]
            ├── Function [test_mixed]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── in_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── <954> FunctionCall [malloc]
            │       │           ╰── <953> SizeOfType
            │       │               ╰── Struct [inner]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── out
            │       │   ╰── Type
            │       │       ╰── Struct [outer]
            │       ├── <969> Assign [=]
            │       │   ├── <965> Dot
            │       │   │   ├── <963> Var [out]
            │       │   │   ╰── in_ptr
            │       │   ╰── <968> Var [in_ptr]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── out_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── <979> AddressOf
            │       │           ╰── <978> Var [out]
            │       ├── <988> Assign [=]
            │       │   ├── <985> Dot
            │       │   │   ├── <983> Var [out]
            │       │   │   ╰── l
            │       │   ╰── <987> Constant Int [10]
            │       ├── <996> Assign [=]
            │       │   ├── <993> Dot
            │       │   │   ├── <991> Var [out]
            │       │   │   ╰── bar
            │       │   ╰── <995> Constant Int [20]
            │       ├── <1008> Assign [=]
            │       │   ├── <1003> Arrow
            │       │   │   ├── <1001> Dot
            │       │   │   │   ├── <999> Var [out]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── a
            │       │   ╰── <1007> Unary [-]
            │       │       ╰── <1006> Constant Double [+1e0]
            │       ├── <1018> Assign [=]
            │       │   ├── <1015> Arrow
            │       │   │   ├── <1013> Dot
            │       │   │   │   ├── <1011> Var [out]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <1017> Constant Int [33]
            │       ├── <1028> Assign [=]
            │       │   ├── <1025> Arrow
            │       │   │   ├── <1023> Dot
            │       │   │   │   ├── <1021> Var [out]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── ptr
            │       │   ╰── <1027> Constant Int [0]
            │       ├── <1042> Assign [=]
            │       │   ├── <1037> Dot
            │       │   │   ├── <1035> Subscript
            │       │   │   │   ├── <1033> Arrow
            │       │   │   │   │   ├── <1031> Var [out_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1034> Constant Int [0]
            │       │   │   ╰── a
            │       │   ╰── <1041> Unary [-]
            │       │       ╰── <1040> Constant Double [+2e0]
            │       ├── <1054> Assign [=]
            │       │   ├── <1051> Dot
            │       │   │   ├── <1049> Subscript
            │       │   │   │   ├── <1047> Arrow
            │       │   │   │   │   ├── <1045> Var [out_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1048> Constant Int [0]
            │       │   │   ╰── b
            │       │   ╰── <1053> Constant Int [63]
            │       ├── <1066> Assign [=]
            │       │   ├── <1063> Dot
            │       │   │   ├── <1061> Subscript
            │       │   │   │   ├── <1059> Arrow
            │       │   │   │   │   ├── <1057> Var [out_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1060> Constant Int [0]
            │       │   │   ╰── ptr
            │       │   ╰── <1065> Constant Int [0]
            │       ├── <1080> Assign [=]
            │       │   ├── <1075> Dot
            │       │   │   ├── <1073> Subscript
            │       │   │   │   ├── <1071> Arrow
            │       │   │   │   │   ├── <1069> Var [out_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1072> Constant Int [3]
            │       │   │   ╰── a
            │       │   ╰── <1079> Unary [-]
            │       │       ╰── <1078> Constant Double [+3e0]
            │       ├── <1092> Assign [=]
            │       │   ├── <1089> Dot
            │       │   │   ├── <1087> Subscript
            │       │   │   │   ├── <1085> Arrow
            │       │   │   │   │   ├── <1083> Var [out_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1086> Constant Int [3]
            │       │   │   ╰── b
            │       │   ╰── <1091> Constant Int [42]
            │       ├── <1108> Assign [=]
            │       │   ├── <1101> Dot
            │       │   │   ├── <1099> Subscript
            │       │   │   │   ├── <1097> Arrow
            │       │   │   │   │   ├── <1095> Var [out_ptr]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1098> Constant Int [3]
            │       │   │   ╰── ptr
            │       │   ╰── <1107> FunctionCall [malloc]
            │       │       ╰── <1106> SizeOfType
            │       │           ╰── Int
            │       ├── <1120> Assign [=]
            │       │   ├── <1115> Dot
            │       │   │   ├── <1113> Arrow
            │       │   │   │   ├── <1111> Var [out_ptr]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <1119> Unary [-]
            │       │       ╰── <1118> Constant Double [+3e0]
            │       ├── <1130> Assign [=]
            │       │   ├── <1127> Dot
            │       │   │   ├── <1125> Arrow
            │       │   │   │   ├── <1123> Var [out_ptr]
            │       │   │   │   ╰── in
            │       │   │   ╰── b
            │       │   ╰── <1129> Constant Int [38]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <1135> Constant Int [9]
            │       ├── <1148> Assign [=]
            │       │   ├── <1143> Dot
            │       │   │   ├── <1141> Arrow
            │       │   │   │   ├── <1139> Var [out_ptr]
            │       │   │   │   ╰── in
            │       │   │   ╰── ptr
            │       │   ╰── <1147> AddressOf
            │       │       ╰── <1146> Var [i]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1165>  [||]
            │       │   │       ├── <1156>  [!=]
            │       │   │       │   ├── <1153> Dot
            │       │   │       │   │   ├── <1151> Var [out]
            │       │   │       │   │   ╰── l
            │       │   │       │   ╰── <1155> Constant Int [10]
            │       │   │       ╰── <1164>  [!=]
            │       │   │           ├── <1161> Dot
            │       │   │           │   ├── <1159> Var [out]
            │       │   │           │   ╰── bar
            │       │   │           ╰── <1163> Constant Int [20]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1166> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1200>  [||]
            │       │   │       ├── <1192>  [||]
            │       │   │       │   ├── <1181>  [!=]
            │       │   │       │   │   ├── <1176> Arrow
            │       │   │       │   │   │   ├── <1174> Dot
            │       │   │       │   │   │   │   ├── <1172> Var [out]
            │       │   │       │   │   │   │   ╰── in_ptr
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <1180> Unary [-]
            │       │   │       │   │       ╰── <1179> Constant Double [+1e0]
            │       │   │       │   ╰── <1191>  [!=]
            │       │   │       │       ├── <1188> Arrow
            │       │   │       │       │   ├── <1186> Dot
            │       │   │       │       │   │   ├── <1184> Var [out]
            │       │   │       │       │   │   ╰── in_ptr
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <1190> Constant Int [33]
            │       │   │       ╰── <1199> Arrow
            │       │   │           ├── <1197> Dot
            │       │   │           │   ├── <1195> Var [out]
            │       │   │           │   ╰── in_ptr
            │       │   │           ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1201> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1306>  [||]
            │       │   │       ├── <1293>  [||]
            │       │   │       │   ├── <1282>  [||]
            │       │   │       │   │   ├── <1269>  [||]
            │       │   │       │   │   │   ├── <1256>  [||]
            │       │   │       │   │   │   │   ├── <1241>  [||]
            │       │   │       │   │   │   │   │   ├── <1231>  [||]
            │       │   │       │   │   │   │   │   │   ├── <1218>  [!=]
            │       │   │       │   │   │   │   │   │   │   ├── <1213> Dot
            │       │   │       │   │   │   │   │   │   │   │   ├── <1211> Subscript
            │       │   │       │   │   │   │   │   │   │   │   │   ├── <1209> Arrow
            │       │   │       │   │   │   │   │   │   │   │   │   │   ├── <1207> Var [out_ptr]
            │       │   │       │   │   │   │   │   │   │   │   │   │   ╰── in_array
            │       │   │       │   │   │   │   │   │   │   │   │   ╰── <1210> Constant Int [0]
            │       │   │       │   │   │   │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   │   │   │   ╰── <1217> Unary [-]
            │       │   │       │   │   │   │   │   │   │       ╰── <1216> Constant Double [+2e0]
            │       │   │       │   │   │   │   │   │   ╰── <1230>  [!=]
            │       │   │       │   │   │   │   │   │       ├── <1227> Dot
            │       │   │       │   │   │   │   │   │       │   ├── <1225> Subscript
            │       │   │       │   │   │   │   │   │       │   │   ├── <1223> Arrow
            │       │   │       │   │   │   │   │   │       │   │   │   ├── <1221> Var [out_ptr]
            │       │   │       │   │   │   │   │   │       │   │   │   ╰── in_array
            │       │   │       │   │   │   │   │   │       │   │   ╰── <1224> Constant Int [0]
            │       │   │       │   │   │   │   │   │       │   ╰── b
            │       │   │       │   │   │   │   │   │       ╰── <1229> Constant Int [63]
            │       │   │       │   │   │   │   │   ╰── <1240> Dot
            │       │   │       │   │   │   │   │       ├── <1238> Subscript
            │       │   │       │   │   │   │   │       │   ├── <1236> Arrow
            │       │   │       │   │   │   │   │       │   │   ├── <1234> Var [out_ptr]
            │       │   │       │   │   │   │   │       │   │   ╰── in_array
            │       │   │       │   │   │   │   │       │   ╰── <1237> Constant Int [0]
            │       │   │       │   │   │   │   │       ╰── ptr
            │       │   │       │   │   │   │   ╰── <1255>  [!=]
            │       │   │       │   │   │   │       ├── <1250> Dot
            │       │   │       │   │   │   │       │   ├── <1248> Subscript
            │       │   │       │   │   │   │       │   │   ├── <1246> Arrow
            │       │   │       │   │   │   │       │   │   │   ├── <1244> Var [out_ptr]
            │       │   │       │   │   │   │       │   │   │   ╰── in_array
            │       │   │       │   │   │   │       │   │   ╰── <1247> Constant Int [3]
            │       │   │       │   │   │   │       │   ╰── a
            │       │   │       │   │   │   │       ╰── <1254> Unary [-]
            │       │   │       │   │   │   │           ╰── <1253> Constant Double [+3e0]
            │       │   │       │   │   │   ╰── <1268>  [!=]
            │       │   │       │   │   │       ├── <1265> Dot
            │       │   │       │   │   │       │   ├── <1263> Subscript
            │       │   │       │   │   │       │   │   ├── <1261> Arrow
            │       │   │       │   │   │       │   │   │   ├── <1259> Var [out_ptr]
            │       │   │       │   │   │       │   │   │   ╰── in_array
            │       │   │       │   │   │       │   │   ╰── <1262> Constant Int [3]
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <1267> Constant Int [42]
            │       │   │       │   │   ╰── <1281>  [!=]
            │       │   │       │   │       ├── <1276> Dot
            │       │   │       │   │       │   ├── <1274> Arrow
            │       │   │       │   │       │   │   ├── <1272> Var [out_ptr]
            │       │   │       │   │       │   │   ╰── in
            │       │   │       │   │       │   ╰── a
            │       │   │       │   │       ╰── <1280> Unary [-]
            │       │   │       │   │           ╰── <1279> Constant Double [+3e0]
            │       │   │       │   ╰── <1292>  [!=]
            │       │   │       │       ├── <1289> Dot
            │       │   │       │       │   ├── <1287> Arrow
            │       │   │       │       │   │   ├── <1285> Var [out_ptr]
            │       │   │       │       │   │   ╰── in
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <1291> Constant Int [38]
            │       │   │       ╰── <1305>  [!=]
            │       │   │           ├── <1300> Dot
            │       │   │           │   ├── <1298> Arrow
            │       │   │           │   │   ├── <1296> Var [out_ptr]
            │       │   │           │   │   ╰── in
            │       │   │           │   ╰── ptr
            │       │   │           ╰── <1304> AddressOf
            │       │   │               ╰── <1303> Var [i]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1307> Constant Int [0]
            │       ├── <1323> Assign [=]
            │       │   ├── <1320> Dereference
            │       │   │   ╰── <1319> Dot
            │       │   │       ├── <1317> Subscript
            │       │   │       │   ├── <1315> Arrow
            │       │   │       │   │   ├── <1313> Var [out_ptr]
            │       │   │       │   │   ╰── in_array
            │       │   │       │   ╰── <1316> Constant Int [3]
            │       │   │       ╰── ptr
            │       │   ╰── <1322> Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1336>  [!=]
            │       │   │       ├── <1333> Dereference
            │       │   │       │   ╰── <1332> Dot
            │       │   │       │       ├── <1330> Subscript
            │       │   │       │       │   ├── <1328> Arrow
            │       │   │       │       │   │   ├── <1326> Var [out_ptr]
            │       │   │       │       │   │   ╰── in_array
            │       │   │       │       │   ╰── <1329> Constant Int [3]
            │       │   │       │       ╰── ptr
            │       │   │       ╰── <1335> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1337> Constant Int [0]
            │       ├── <1355> Assign [=]
            │       │   ├── <1347> Dot
            │       │   │   ├── <1345> Arrow
            │       │   │   │   ├── <1343> Var [out_ptr]
            │       │   │   │   ╰── in
            │       │   │   ╰── b
            │       │   ╰── <1354> Arrow
            │       │       ├── <1352> Dot
            │       │       │   ├── <1350> Var [out]
            │       │       │   ╰── in_ptr
            │       │       ╰── b
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1370>  [!=]
            │       │   │       ├── <1362> Dot
            │       │   │       │   ├── <1360> Arrow
            │       │   │       │   │   ├── <1358> Var [out_ptr]
            │       │   │       │   │   ╰── in
            │       │   │       │   ╰── b
            │       │   │       ╰── <1369> Arrow
            │       │   │           ├── <1367> Dot
            │       │   │           │   ├── <1365> Var [out]
            │       │   │           │   ╰── in_ptr
            │       │   │           ╰── b
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1371> Constant Int [0]
            │       ╰── Return
            │           ╰── <1376> Constant Int [1]
            ├── Function [test_array_of_structs]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── struct_array
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── in_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── <1405> FunctionCall [malloc]
            │       │           ╰── <1404> SizeOfType
            │       │               ╰── Struct [inner]
            │       ├── <1417> Assign [=]
            │       │   ├── <1413> Dot
            │       │   │   ├── <1411> Subscript
            │       │   │   │   ├── <1409> Var [struct_array]
            │       │   │   │   ╰── <1410> Constant Int [0]
            │       │   │   ╰── in_ptr
            │       │   ╰── <1416> Var [in_ptr]
            │       ├── <1428> Assign [=]
            │       │   ├── <1424> Dot
            │       │   │   ├── <1422> Subscript
            │       │   │   │   ├── <1420> Var [struct_array]
            │       │   │   │   ╰── <1421> Constant Int [1]
            │       │   │   ╰── in_ptr
            │       │   ╰── <1427> Var [in_ptr]
            │       ├── <1440> Assign [=]
            │       │   ├── <1437> Arrow
            │       │   │   ├── <1435> Dot
            │       │   │   │   ├── <1433> Subscript
            │       │   │   │   │   ├── <1431> Var [struct_array]
            │       │   │   │   │   ╰── <1432> Constant Int [0]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── a
            │       │   ╰── <1439> Constant Double [+2e1]
            │       ├── <1452> Assign [=]
            │       │   ├── <1449> Arrow
            │       │   │   ├── <1447> Dot
            │       │   │   │   ├── <1445> Subscript
            │       │   │   │   │   ├── <1443> Var [struct_array]
            │       │   │   │   │   ╰── <1444> Constant Int [1]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <1451> Constant Int [64]
            │       ├── <1464> Assign [=]
            │       │   ├── <1461> Arrow
            │       │   │   ├── <1459> Dot
            │       │   │   │   ├── <1457> Subscript
            │       │   │   │   │   ├── <1455> Var [struct_array]
            │       │   │   │   │   ╰── <1456> Constant Int [0]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── ptr
            │       │   ╰── <1463> Constant Int [0]
            │       ├── <1478> Assign [=]
            │       │   ├── <1475> Dot
            │       │   │   ├── <1473> Subscript
            │       │   │   │   ├── <1471> Dot
            │       │   │   │   │   ├── <1469> Subscript
            │       │   │   │   │   │   ├── <1467> Var [struct_array]
            │       │   │   │   │   │   ╰── <1468> Constant Int [1]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1472> Constant Int [1]
            │       │   │   ╰── a
            │       │   ╰── <1477> Constant Double [+3e1]
            │       ├── <1492> Assign [=]
            │       │   ├── <1489> Dot
            │       │   │   ├── <1487> Subscript
            │       │   │   │   ├── <1485> Dot
            │       │   │   │   │   ├── <1483> Subscript
            │       │   │   │   │   │   ├── <1481> Var [struct_array]
            │       │   │   │   │   │   ╰── <1482> Constant Int [1]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1486> Constant Int [0]
            │       │   │   ╰── b
            │       │   ╰── <1491> Constant Int [35]
            │       ├── <1504> Assign [=]
            │       │   ├── <1501> Dot
            │       │   │   ├── <1499> Dot
            │       │   │   │   ├── <1497> Subscript
            │       │   │   │   │   ├── <1495> Var [struct_array]
            │       │   │   │   │   ╰── <1496> Constant Int [2]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <1503> Constant Double [+4e1]
            │       ├── <1516> Assign [=]
            │       │   ├── <1513> Dot
            │       │   │   ├── <1511> Dot
            │       │   │   │   ├── <1509> Subscript
            │       │   │   │   │   ├── <1507> Var [struct_array]
            │       │   │   │   │   ╰── <1508> Constant Int [2]
            │       │   │   │   ╰── in
            │       │   │   ╰── b
            │       │   ╰── <1515> Constant Int [36]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1551>  [||]
            │       │   │       ├── <1541>  [||]
            │       │   │       │   ├── <1528>  [!=]
            │       │   │       │   │   ├── <1525> Arrow
            │       │   │       │   │   │   ├── <1523> Dot
            │       │   │       │   │   │   │   ├── <1521> Subscript
            │       │   │       │   │   │   │   │   ├── <1519> Var [struct_array]
            │       │   │       │   │   │   │   │   ╰── <1520> Constant Int [1]
            │       │   │       │   │   │   │   ╰── in_ptr
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <1527> Constant Double [+2e1]
            │       │   │       │   ╰── <1540>  [!=]
            │       │   │       │       ├── <1537> Arrow
            │       │   │       │       │   ├── <1535> Dot
            │       │   │       │       │   │   ├── <1533> Subscript
            │       │   │       │       │   │   │   ├── <1531> Var [struct_array]
            │       │   │       │       │   │   │   ╰── <1532> Constant Int [0]
            │       │   │       │       │   │   ╰── in_ptr
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <1539> Constant Int [64]
            │       │   │       ╰── <1550> Arrow
            │       │   │           ├── <1548> Dot
            │       │   │           │   ├── <1546> Subscript
            │       │   │           │   │   ├── <1544> Var [struct_array]
            │       │   │           │   │   ╰── <1545> Constant Int [1]
            │       │   │           │   ╰── in_ptr
            │       │   │           ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1552> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1610>  [||]
            │       │   │       ├── <1597>  [||]
            │       │   │       │   ├── <1584>  [||]
            │       │   │       │   │   ├── <1569>  [!=]
            │       │   │       │   │   │   ├── <1566> Dot
            │       │   │       │   │   │   │   ├── <1564> Subscript
            │       │   │       │   │   │   │   │   ├── <1562> Dot
            │       │   │       │   │   │   │   │   │   ├── <1560> Subscript
            │       │   │       │   │   │   │   │   │   │   ├── <1558> Var [struct_array]
            │       │   │       │   │   │   │   │   │   │   ╰── <1559> Constant Int [1]
            │       │   │       │   │   │   │   │   │   ╰── in_array
            │       │   │       │   │   │   │   │   ╰── <1563> Constant Int [1]
            │       │   │       │   │   │   │   ╰── a
            │       │   │       │   │   │   ╰── <1568> Constant Double [+3e1]
            │       │   │       │   │   ╰── <1583>  [!=]
            │       │   │       │   │       ├── <1580> Dot
            │       │   │       │   │       │   ├── <1578> Subscript
            │       │   │       │   │       │   │   ├── <1576> Dot
            │       │   │       │   │       │   │   │   ├── <1574> Subscript
            │       │   │       │   │       │   │   │   │   ├── <1572> Var [struct_array]
            │       │   │       │   │       │   │   │   │   ╰── <1573> Constant Int [1]
            │       │   │       │   │       │   │   │   ╰── in_array
            │       │   │       │   │       │   │   ╰── <1577> Constant Int [0]
            │       │   │       │   │       │   ╰── b
            │       │   │       │   │       ╰── <1582> Constant Int [35]
            │       │   │       │   ╰── <1596>  [!=]
            │       │   │       │       ├── <1593> Dot
            │       │   │       │       │   ├── <1591> Dot
            │       │   │       │       │   │   ├── <1589> Subscript
            │       │   │       │       │   │   │   ├── <1587> Var [struct_array]
            │       │   │       │       │   │   │   ╰── <1588> Constant Int [2]
            │       │   │       │       │   │   ╰── in
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <1595> Constant Double [+4e1]
            │       │   │       ╰── <1609>  [!=]
            │       │   │           ├── <1606> Dot
            │       │   │           │   ├── <1604> Dot
            │       │   │           │   │   ├── <1602> Subscript
            │       │   │           │   │   │   ├── <1600> Var [struct_array]
            │       │   │           │   │   │   ╰── <1601> Constant Int [2]
            │       │   │           │   │   ╰── in
            │       │   │           │   ╰── b
            │       │   │           ╰── <1608> Constant Int [36]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1611> Constant Int [0]
            │       ╰── Return
            │           ╰── <1616> Constant Int [1]
            ├── Function [test_array_of_struct_pointers]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr_array
            │       │   ╰── Type
            │       │       ╰── Array
            │       │           ├── 2
            │       │           ╰── Pointer
            │       │               ╰── Struct [outer]
            │       ├── <1647> Assign [=]
            │       │   ├── <1638> Subscript
            │       │   │   ├── <1636> Var [ptr_array]
            │       │   │   ╰── <1637> Constant Int [0]
            │       │   ╰── <1646> FunctionCall [calloc]
            │       │       ├── <1641> Constant Int [1]
            │       │       ╰── <1645> SizeOfType
            │       │           ╰── Struct [outer]
            │       ├── <1661> Assign [=]
            │       │   ├── <1652> Subscript
            │       │   │   ├── <1650> Var [ptr_array]
            │       │   │   ╰── <1651> Constant Int [1]
            │       │   ╰── <1660> FunctionCall [calloc]
            │       │       ├── <1655> Constant Int [1]
            │       │       ╰── <1659> SizeOfType
            │       │           ╰── Struct [outer]
            │       ├── <1677> Assign [=]
            │       │   ├── <1668> Arrow
            │       │   │   ├── <1666> Subscript
            │       │   │   │   ├── <1664> Var [ptr_array]
            │       │   │   │   ╰── <1665> Constant Int [1]
            │       │   │   ╰── in_ptr
            │       │   ╰── <1676> FunctionCall [calloc]
            │       │       ├── <1671> Constant Int [1]
            │       │       ╰── <1675> SizeOfType
            │       │           ╰── Struct [inner]
            │       ├── <1689> Assign [=]
            │       │   ├── <1686> Arrow
            │       │   │   ├── <1684> Arrow
            │       │   │   │   ├── <1682> Subscript
            │       │   │   │   │   ├── <1680> Var [ptr_array]
            │       │   │   │   │   ╰── <1681> Constant Int [1]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── ptr
            │       │   ╰── <1688> Constant Int [0]
            │       ├── <1701> Assign [=]
            │       │   ├── <1698> Arrow
            │       │   │   ├── <1696> Arrow
            │       │   │   │   ├── <1694> Subscript
            │       │   │   │   │   ├── <1692> Var [ptr_array]
            │       │   │   │   │   ╰── <1693> Constant Int [1]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <1700> Constant Int [37]
            │       ├── <1713> Assign [=]
            │       │   ├── <1710> Arrow
            │       │   │   ├── <1708> Arrow
            │       │   │   │   ├── <1706> Subscript
            │       │   │   │   │   ├── <1704> Var [ptr_array]
            │       │   │   │   │   ╰── <1705> Constant Int [1]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── a
            │       │   ╰── <1712> Constant Double [+8.765e2]
            │       ├── <1727> Assign [=]
            │       │   ├── <1724> Dot
            │       │   │   ├── <1722> Subscript
            │       │   │   │   ├── <1720> Arrow
            │       │   │   │   │   ├── <1718> Subscript
            │       │   │   │   │   │   ├── <1716> Var [ptr_array]
            │       │   │   │   │   │   ╰── <1717> Constant Int [1]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1721> Constant Int [2]
            │       │   │   ╰── a
            │       │   ╰── <1726> Constant Double [+1.0005e3]
            │       ├── <1739> Assign [=]
            │       │   ├── <1736> Dot
            │       │   │   ├── <1734> Arrow
            │       │   │   │   ├── <1732> Subscript
            │       │   │   │   │   ├── <1730> Var [ptr_array]
            │       │   │   │   │   ╰── <1731> Constant Int [1]
            │       │   │   │   ╰── in
            │       │   │   ╰── a
            │       │   ╰── <1738> Constant Double [+7e6]
            │       ├── <1755> Assign [=]
            │       │   ├── <1746> Arrow
            │       │   │   ├── <1744> Subscript
            │       │   │   │   ├── <1742> Var [ptr_array]
            │       │   │   │   ╰── <1743> Constant Int [0]
            │       │   │   ╰── in_ptr
            │       │   ╰── <1754> FunctionCall [calloc]
            │       │       ├── <1749> Constant Int [1]
            │       │       ╰── <1753> SizeOfType
            │       │           ╰── Struct [inner]
            │       ├── <1767> Assign [=]
            │       │   ├── <1764> Arrow
            │       │   │   ├── <1762> Arrow
            │       │   │   │   ├── <1760> Subscript
            │       │   │   │   │   ├── <1758> Var [ptr_array]
            │       │   │   │   │   ╰── <1759> Constant Int [0]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── ptr
            │       │   ╰── <1766> Constant Int [0]
            │       ├── <1779> Assign [=]
            │       │   ├── <1776> Arrow
            │       │   │   ├── <1774> Arrow
            │       │   │   │   ├── <1772> Subscript
            │       │   │   │   │   ├── <1770> Var [ptr_array]
            │       │   │   │   │   ╰── <1771> Constant Int [0]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── b
            │       │   ╰── <1778> Constant Int [94]
            │       ├── <1791> Assign [=]
            │       │   ├── <1788> Arrow
            │       │   │   ├── <1786> Arrow
            │       │   │   │   ├── <1784> Subscript
            │       │   │   │   │   ├── <1782> Var [ptr_array]
            │       │   │   │   │   ╰── <1783> Constant Int [0]
            │       │   │   │   ╰── in_ptr
            │       │   │   ╰── a
            │       │   ╰── <1790> Constant Double [+1.234e2]
            │       ├── <1805> Assign [=]
            │       │   ├── <1802> Dot
            │       │   │   ├── <1800> Subscript
            │       │   │   │   ├── <1798> Arrow
            │       │   │   │   │   ├── <1796> Subscript
            │       │   │   │   │   │   ├── <1794> Var [ptr_array]
            │       │   │   │   │   │   ╰── <1795> Constant Int [0]
            │       │   │   │   │   ╰── in_array
            │       │   │   │   ╰── <1799> Constant Int [1]
            │       │   │   ╰── b
            │       │   ╰── <1804> Constant Int [38]
            │       ├── <1823> Assign [=]
            │       │   ├── <1814> Dot
            │       │   │   ├── <1812> Arrow
            │       │   │   │   ├── <1810> Subscript
            │       │   │   │   │   ├── <1808> Var [ptr_array]
            │       │   │   │   │   ╰── <1809> Constant Int [0]
            │       │   │   │   ╰── in
            │       │   │   ╰── ptr
            │       │   ╰── <1822> AddressOf
            │       │       ╰── <1821> Arrow
            │       │           ├── <1819> Subscript
            │       │           │   ├── <1817> Var [ptr_array]
            │       │           │   ╰── <1818> Constant Int [0]
            │       │           ╰── bar
            │       ├── <1833> Assign [=]
            │       │   ├── <1830> Arrow
            │       │   │   ├── <1828> Subscript
            │       │   │   │   ├── <1826> Var [ptr_array]
            │       │   │   │   ╰── <1827> Constant Int [0]
            │       │   │   ╰── bar
            │       │   ╰── <1832> Constant Int [900]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1847>  [!=]
            │       │   │       ├── <1844> Dot
            │       │   │       │   ├── <1842> Subscript
            │       │   │       │   │   ├── <1840> Arrow
            │       │   │       │   │   │   ├── <1838> Subscript
            │       │   │       │   │   │   │   ├── <1836> Var [ptr_array]
            │       │   │       │   │   │   │   ╰── <1837> Constant Int [0]
            │       │   │       │   │   │   ╰── in_array
            │       │   │       │   │   ╰── <1841> Constant Int [1]
            │       │   │       │   ╰── b
            │       │   │       ╰── <1846> Constant Int [38]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1848> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1886>  [||]
            │       │   │       ├── <1876>  [||]
            │       │   │       │   ├── <1863>  [!=]
            │       │   │       │   │   ├── <1860> Arrow
            │       │   │       │   │   │   ├── <1858> Arrow
            │       │   │       │   │   │   │   ├── <1856> Subscript
            │       │   │       │   │   │   │   │   ├── <1854> Var [ptr_array]
            │       │   │       │   │   │   │   │   ╰── <1855> Constant Int [0]
            │       │   │       │   │   │   │   ╰── in_ptr
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <1862> Constant Double [+1.234e2]
            │       │   │       │   ╰── <1875>  [!=]
            │       │   │       │       ├── <1872> Arrow
            │       │   │       │       │   ├── <1870> Arrow
            │       │   │       │       │   │   ├── <1868> Subscript
            │       │   │       │       │   │   │   ├── <1866> Var [ptr_array]
            │       │   │       │       │   │   │   ╰── <1867> Constant Int [0]
            │       │   │       │       │   │   ╰── in_ptr
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <1874> Constant Int [94]
            │       │   │       ╰── <1885> Arrow
            │       │   │           ├── <1883> Arrow
            │       │   │           │   ├── <1881> Subscript
            │       │   │           │   │   ├── <1879> Var [ptr_array]
            │       │   │           │   │   ╰── <1880> Constant Int [0]
            │       │   │           │   ╰── in_ptr
            │       │   │           ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1887> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1902>  [!=]
            │       │   │       ├── <1899> Dot
            │       │   │       │   ├── <1897> Arrow
            │       │   │       │   │   ├── <1895> Subscript
            │       │   │       │   │   │   ├── <1893> Var [ptr_array]
            │       │   │       │   │   │   ╰── <1894> Constant Int [1]
            │       │   │       │   │   ╰── in
            │       │   │       │   ╰── a
            │       │   │       ╰── <1901> Constant Double [+7e6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1903> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1920>  [!=]
            │       │   │       ├── <1917> Dot
            │       │   │       │   ├── <1915> Subscript
            │       │   │       │   │   ├── <1913> Arrow
            │       │   │       │   │   │   ├── <1911> Subscript
            │       │   │       │   │   │   │   ├── <1909> Var [ptr_array]
            │       │   │       │   │   │   │   ╰── <1910> Constant Int [1]
            │       │   │       │   │   │   ╰── in_array
            │       │   │       │   │   ╰── <1914> Constant Int [2]
            │       │   │       │   ╰── a
            │       │   │       ╰── <1919> Constant Double [+1.0005e3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1921> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1959>  [||]
            │       │   │       ├── <1949>  [||]
            │       │   │       │   ├── <1936>  [!=]
            │       │   │       │   │   ├── <1933> Arrow
            │       │   │       │   │   │   ├── <1931> Arrow
            │       │   │       │   │   │   │   ├── <1929> Subscript
            │       │   │       │   │   │   │   │   ├── <1927> Var [ptr_array]
            │       │   │       │   │   │   │   │   ╰── <1928> Constant Int [1]
            │       │   │       │   │   │   │   ╰── in_ptr
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <1935> Constant Double [+8.765e2]
            │       │   │       │   ╰── <1948>  [!=]
            │       │   │       │       ├── <1945> Arrow
            │       │   │       │       │   ├── <1943> Arrow
            │       │   │       │       │   │   ├── <1941> Subscript
            │       │   │       │       │   │   │   ├── <1939> Var [ptr_array]
            │       │   │       │       │   │   │   ╰── <1940> Constant Int [1]
            │       │   │       │       │   │   ╰── in_ptr
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <1947> Constant Int [37]
            │       │   │       ╰── <1958> Arrow
            │       │   │           ├── <1956> Arrow
            │       │   │           │   ├── <1954> Subscript
            │       │   │           │   │   ├── <1952> Var [ptr_array]
            │       │   │           │   │   ╰── <1953> Constant Int [1]
            │       │   │           │   ╰── in_ptr
            │       │   │           ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1960> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1976>  [!=]
            │       │   │       ├── <1973> Dereference
            │       │   │       │   ╰── <1972> Dot
            │       │   │       │       ├── <1970> Arrow
            │       │   │       │       │   ├── <1968> Subscript
            │       │   │       │       │   │   ├── <1966> Var [ptr_array]
            │       │   │       │       │   │   ╰── <1967> Constant Int [0]
            │       │   │       │       │   ╰── in
            │       │   │       │       ╰── ptr
            │       │   │       ╰── <1975> Constant Int [900]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1977> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1987> Arrow
            │       │   │       ├── <1985> Subscript
            │       │   │       │   ├── <1983> Var [ptr_array]
            │       │   │       │   ╰── <1984> Constant Int [0]
            │       │   │       ╰── l
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1988> Constant Int [0]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <1996> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <2004>  [<]
            │       │   │       ├── <2001> Var [i]
            │       │   │       ╰── <2003> Constant Int [4]
            │       │   ├── Condition
            │       │   │   ╰── <2013> Assign [=]
            │       │   │       ├── <2006> Var [i]
            │       │   │       ╰── <2012>  [+]
            │       │   │           ├── <2009> Var [i]
            │       │   │           ╰── <2011> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── elem_ptr
            │       │       │   ├── Type
            │       │       │   │   ╰── Pointer
            │       │       │   │       ╰── Struct [inner]
            │       │       │   ╰── Initializer
            │       │       │       ╰── <2029> AddressOf
            │       │       │           ╰── <2028> Subscript
            │       │       │               ├── <2025> Arrow
            │       │       │               │   ├── <2023> Subscript
            │       │       │               │   │   ├── <2021> Var [ptr_array]
            │       │       │               │   │   ╰── <2022> Constant Int [0]
            │       │       │               │   ╰── in_array
            │       │       │               ╰── <2027> Var [i]
            │       │       ├── If
            │       │       │   ├── Condition
            │       │       │   │   ╰── <2041>  [||]
            │       │       │   │       ├── <2035> Arrow
            │       │       │   │       │   ├── <2033> Var [elem_ptr]
            │       │       │   │       │   ╰── a
            │       │       │   │       ╰── <2040> Arrow
            │       │       │   │           ├── <2038> Var [elem_ptr]
            │       │       │   │           ╰── ptr
            │       │       │   ╰── Then
            │       │       │       ╰── Block
            │       │       │           ╰── Return
            │       │       │               ╰── <2042> Constant Int [0]
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <2057>  [&&]
            │       │           │       ├── <2050> Arrow
            │       │           │       │   ├── <2048> Var [elem_ptr]
            │       │           │       │   ╰── b
            │       │           │       ╰── <2056>  [!=]
            │       │           │           ├── <2053> Var [i]
            │       │           │           ╰── <2055> Constant Int [1]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── <2058> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2083>  [||]
            │       │   │       ├── <2073> Dot
            │       │   │       │   ├── <2071> Arrow
            │       │   │       │   │   ├── <2069> Subscript
            │       │   │       │   │   │   ├── <2067> Var [ptr_array]
            │       │   │       │   │   │   ╰── <2068> Constant Int [0]
            │       │   │       │   │   ╰── in
            │       │   │       │   ╰── a
            │       │   │       ╰── <2082> Dot
            │       │   │           ├── <2080> Arrow
            │       │   │           │   ├── <2078> Subscript
            │       │   │           │   │   ├── <2076> Var [ptr_array]
            │       │   │           │   │   ╰── <2077> Constant Int [0]
            │       │   │           │   ╰── in
            │       │   │           ╰── b
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2084> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2102>  [||]
            │       │   │       ├── <2094> Arrow
            │       │   │       │   ├── <2092> Subscript
            │       │   │       │   │   ├── <2090> Var [ptr_array]
            │       │   │       │   │   ╰── <2091> Constant Int [1]
            │       │   │       │   ╰── l
            │       │   │       ╰── <2101> Arrow
            │       │   │           ├── <2099> Subscript
            │       │   │           │   ├── <2097> Var [ptr_array]
            │       │   │           │   ╰── <2098> Constant Int [1]
            │       │   │           ╰── bar
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2103> Constant Int [0]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <2111> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <2119>  [<]
            │       │   │       ├── <2116> Var [i]
            │       │   │       ╰── <2118> Constant Int [4]
            │       │   ├── Condition
            │       │   │   ╰── <2128> Assign [=]
            │       │   │       ├── <2121> Var [i]
            │       │   │       ╰── <2127>  [+]
            │       │   │           ├── <2124> Var [i]
            │       │   │           ╰── <2126> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── elem_ptr
            │       │       │   ├── Type
            │       │       │   │   ╰── Pointer
            │       │       │   │       ╰── Struct [inner]
            │       │       │   ╰── Initializer
            │       │       │       ╰── <2144> AddressOf
            │       │       │           ╰── <2143> Subscript
            │       │       │               ├── <2140> Arrow
            │       │       │               │   ├── <2138> Subscript
            │       │       │               │   │   ├── <2136> Var [ptr_array]
            │       │       │               │   │   ╰── <2137> Constant Int [1]
            │       │       │               │   ╰── in_array
            │       │       │               ╰── <2142> Var [i]
            │       │       ├── If
            │       │       │   ├── Condition
            │       │       │   │   ╰── <2156>  [||]
            │       │       │   │       ├── <2150> Arrow
            │       │       │   │       │   ├── <2148> Var [elem_ptr]
            │       │       │   │       │   ╰── b
            │       │       │   │       ╰── <2155> Arrow
            │       │       │   │           ├── <2153> Var [elem_ptr]
            │       │       │   │           ╰── ptr
            │       │       │   ╰── Then
            │       │       │       ╰── Block
            │       │       │           ╰── Return
            │       │       │               ╰── <2157> Constant Int [0]
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <2172>  [&&]
            │       │           │       ├── <2165> Arrow
            │       │           │       │   ├── <2163> Var [elem_ptr]
            │       │           │       │   ╰── a
            │       │           │       ╰── <2171>  [!=]
            │       │           │           ├── <2168> Var [i]
            │       │           │           ╰── <2170> Constant Int [2]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── <2173> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2198>  [||]
            │       │   │       ├── <2188> Dot
            │       │   │       │   ├── <2186> Arrow
            │       │   │       │   │   ├── <2184> Subscript
            │       │   │       │   │   │   ├── <2182> Var [ptr_array]
            │       │   │       │   │   │   ╰── <2183> Constant Int [1]
            │       │   │       │   │   ╰── in
            │       │   │       │   ╰── b
            │       │   │       ╰── <2197> Dot
            │       │   │           ├── <2195> Arrow
            │       │   │           │   ├── <2193> Subscript
            │       │   │           │   │   ├── <2191> Var [ptr_array]
            │       │   │           │   │   ╰── <2192> Constant Int [1]
            │       │   │           │   ╰── in
            │       │   │           ╰── ptr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2199> Constant Int [0]
            │       ╰── Return
            │           ╰── <2204> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2216> Unary [!]
                    │   │       ╰── <2215> FunctionCall [test_auto_dot]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2217> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2225> Unary [!]
                    │   │       ╰── <2224> FunctionCall [test_static_dot]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2226> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2234> Unary [!]
                    │   │       ╰── <2233> FunctionCall [test_auto_arrow]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2235> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2243> Unary [!]
                    │   │       ╰── <2242> FunctionCall [test_static_arrow]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2244> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2252> Unary [!]
                    │   │       ╰── <2251> FunctionCall [test_mixed]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2253> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2261> Unary [!]
                    │   │       ╰── <2260> FunctionCall [test_array_of_structs]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2262> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <2270> Unary [!]
                    │   │       ╰── <2269> FunctionCall [test_array_of_struct_pointers]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <2271> Constant Int [7]
                    ╰── Return
                        ╰── <2276> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_static_structs() {
    let src = r#"
        void *malloc(unsigned long size);
        int putchar(int ch);
        int puts(char *s);
        void test_static_local(int a, int b) {
            struct s {
                int a;
                int b;
            };
            static struct s static_struct;
            if (!(static_struct.a || static_struct.b)) {
                puts("zero");
            } else {
                putchar(static_struct.a);
                putchar(static_struct.b);
                putchar('\n');
            }
            static_struct.a = a;
            static_struct.b = b;
        }
        void test_static_local_pointer(int a, int b) {
            struct s {
                int a;
                int b;
            };
            static struct s *struct_ptr;
            if (!struct_ptr) {
                struct_ptr = malloc(sizeof(struct s));
            } else {
                putchar(struct_ptr->a);
                putchar(struct_ptr->b);
                putchar('\n');
            }
            struct_ptr->a = a;
            struct_ptr->b = b;
        }
        struct global {
            char x;
            char y;
            char z;
        };
        struct global g;
        void f1(void) {
            g.x = g.x + 1;
            g.y = g.y + 1;
            g.z = g.z + 1;
        }
        void f2(void) {
            putchar(g.x);
            putchar(g.y);
            putchar(g.z);
            putchar('\n');
        }
        void test_global_struct(void) {
            g.x = 'A';
            g.y = 'B';
            g.z = 'C';
            f1();
            f2();
            f1();
            f2();
        }
        struct global *g_ptr;
        void f3(void) {
            g_ptr->x = g_ptr->x + 1;
            g_ptr->y = g_ptr->y + 1;
            g_ptr->z = g_ptr->z + 1;
        }
        void f4(void) {
            putchar(g_ptr->x);
            putchar(g_ptr->y);
            putchar(g_ptr->z);
            putchar('\n');
        }
        void test_global_struct_pointer(void) {
            g_ptr = &g;
            f3();
            f4();
            f3();
            f4();
            g_ptr = malloc(sizeof(struct global));
            g_ptr->x = 'a';
            g_ptr->y = 'b';
            g_ptr->z = 'c';
            f3();
            f4();
            f3();
            f4();
        }
        int main(void) {
            test_static_local('m', 'n');
            test_static_local('o', 'p');
            test_static_local('!', '!');
            ;
            test_static_local_pointer('w', 'x');
            test_static_local_pointer('y', 'z');
            test_static_local_pointer('!', '!');
            ;
            test_global_struct();
            test_global_struct_pointer();
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [putchar]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ch
            │           ╰── Type
            │               ╰── Int
            ├── Function [puts]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [test_static_local]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── a
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── b
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── static_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Static
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <71> Unary [!]
            │       │   │       ╰── <70>  [||]
            │       │   │           ├── <63> Dot
            │       │   │           │   ├── <61> Var [static_struct]
            │       │   │           │   ╰── a
            │       │   │           ╰── <68> Dot
            │       │   │               ├── <66> Var [static_struct]
            │       │   │               ╰── b
            │       │   ├── Then
            │       │   │   ╰── Block
            │       │   │       ╰── <74> FunctionCall [puts]
            │       │   │           ╰── <73> "zero"
            │       │   ╰── Else
            │       │       ╰── Block
            │       │           ├── <83> FunctionCall [putchar]
            │       │           │   ╰── <82> Dot
            │       │           │       ├── <80> Var [static_struct]
            │       │           │       ╰── a
            │       │           ├── <90> FunctionCall [putchar]
            │       │           │   ╰── <89> Dot
            │       │           │       ├── <87> Var [static_struct]
            │       │           │       ╰── b
            │       │           ╰── <94> FunctionCall [putchar]
            │       │               ╰── <93> Constant Int [10]
            │       ├── <106> Assign [=]
            │       │   ├── <102> Dot
            │       │   │   ├── <100> Var [static_struct]
            │       │   │   ╰── a
            │       │   ╰── <105> Var [a]
            │       ╰── <115> Assign [=]
            │           ├── <111> Dot
            │           │   ├── <109> Var [static_struct]
            │           │   ╰── b
            │           ╰── <114> Var [b]
            ├── Function [test_static_local_pointer]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── a
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── b
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── struct_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Static
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <151> Unary [!]
            │       │   │       ╰── <150> Var [struct_ptr]
            │       │   ├── Then
            │       │   │   ╰── Block
            │       │   │       ╰── <161> Assign [=]
            │       │   │           ├── <153> Var [struct_ptr]
            │       │   │           ╰── <160> FunctionCall [malloc]
            │       │   │               ╰── <159> SizeOfType
            │       │   │                   ╰── Struct [s]
            │       │   ╰── Else
            │       │       ╰── Block
            │       │           ├── <170> FunctionCall [putchar]
            │       │           │   ╰── <169> Arrow
            │       │           │       ├── <167> Var [struct_ptr]
            │       │           │       ╰── a
            │       │           ├── <177> FunctionCall [putchar]
            │       │           │   ╰── <176> Arrow
            │       │           │       ├── <174> Var [struct_ptr]
            │       │           │       ╰── b
            │       │           ╰── <181> FunctionCall [putchar]
            │       │               ╰── <180> Constant Int [10]
            │       ├── <193> Assign [=]
            │       │   ├── <189> Arrow
            │       │   │   ├── <187> Var [struct_ptr]
            │       │   │   ╰── a
            │       │   ╰── <192> Var [a]
            │       ╰── <202> Assign [=]
            │           ├── <198> Arrow
            │           │   ├── <196> Var [struct_ptr]
            │           │   ╰── b
            │           ╰── <201> Var [b]
            ├── Struct [global]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── y
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── z
            │       ╰── Type
            │           ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── g
            │   ╰── Type
            │       ╰── Struct [global]
            ├── Function [f1]
            │   ╰── Body
            │       ├── <242> Assign [=]
            │       │   ├── <233> Dot
            │       │   │   ├── <231> Var [g]
            │       │   │   ╰── x
            │       │   ╰── <241>  [+]
            │       │       ├── <238> Dot
            │       │       │   ├── <236> Var [g]
            │       │       │   ╰── x
            │       │       ╰── <240> Constant Int [1]
            │       ├── <256> Assign [=]
            │       │   ├── <247> Dot
            │       │   │   ├── <245> Var [g]
            │       │   │   ╰── y
            │       │   ╰── <255>  [+]
            │       │       ├── <252> Dot
            │       │       │   ├── <250> Var [g]
            │       │       │   ╰── y
            │       │       ╰── <254> Constant Int [1]
            │       ╰── <270> Assign [=]
            │           ├── <261> Dot
            │           │   ├── <259> Var [g]
            │           │   ╰── z
            │           ╰── <269>  [+]
            │               ├── <266> Dot
            │               │   ├── <264> Var [g]
            │               │   ╰── z
            │               ╰── <268> Constant Int [1]
            ├── Function [f2]
            │   ╰── Body
            │       ├── <284> FunctionCall [putchar]
            │       │   ╰── <283> Dot
            │       │       ├── <281> Var [g]
            │       │       ╰── x
            │       ├── <291> FunctionCall [putchar]
            │       │   ╰── <290> Dot
            │       │       ├── <288> Var [g]
            │       │       ╰── y
            │       ├── <298> FunctionCall [putchar]
            │       │   ╰── <297> Dot
            │       │       ├── <295> Var [g]
            │       │       ╰── z
            │       ╰── <302> FunctionCall [putchar]
            │           ╰── <301> Constant Int [10]
            ├── Function [test_global_struct]
            │   ╰── Body
            │       ├── <317> Assign [=]
            │       │   ├── <314> Dot
            │       │   │   ├── <312> Var [g]
            │       │   │   ╰── x
            │       │   ╰── <316> Constant Int [65]
            │       ├── <325> Assign [=]
            │       │   ├── <322> Dot
            │       │   │   ├── <320> Var [g]
            │       │   │   ╰── y
            │       │   ╰── <324> Constant Int [66]
            │       ├── <333> Assign [=]
            │       │   ├── <330> Dot
            │       │   │   ├── <328> Var [g]
            │       │   │   ╰── z
            │       │   ╰── <332> Constant Int [67]
            │       ├── <336> FunctionCall [f1]
            │       ├── <339> FunctionCall [f2]
            │       ├── <342> FunctionCall [f1]
            │       ╰── <345> FunctionCall [f2]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── g_ptr
            │   ╰── Type
            │       ╰── Pointer
            │           ╰── Struct [global]
            ├── Function [f3]
            │   ╰── Body
            │       ├── <373> Assign [=]
            │       │   ├── <364> Arrow
            │       │   │   ├── <362> Var [g_ptr]
            │       │   │   ╰── x
            │       │   ╰── <372>  [+]
            │       │       ├── <369> Arrow
            │       │       │   ├── <367> Var [g_ptr]
            │       │       │   ╰── x
            │       │       ╰── <371> Constant Int [1]
            │       ├── <387> Assign [=]
            │       │   ├── <378> Arrow
            │       │   │   ├── <376> Var [g_ptr]
            │       │   │   ╰── y
            │       │   ╰── <386>  [+]
            │       │       ├── <383> Arrow
            │       │       │   ├── <381> Var [g_ptr]
            │       │       │   ╰── y
            │       │       ╰── <385> Constant Int [1]
            │       ╰── <401> Assign [=]
            │           ├── <392> Arrow
            │           │   ├── <390> Var [g_ptr]
            │           │   ╰── z
            │           ╰── <400>  [+]
            │               ├── <397> Arrow
            │               │   ├── <395> Var [g_ptr]
            │               │   ╰── z
            │               ╰── <399> Constant Int [1]
            ├── Function [f4]
            │   ╰── Body
            │       ├── <415> FunctionCall [putchar]
            │       │   ╰── <414> Arrow
            │       │       ├── <412> Var [g_ptr]
            │       │       ╰── x
            │       ├── <422> FunctionCall [putchar]
            │       │   ╰── <421> Arrow
            │       │       ├── <419> Var [g_ptr]
            │       │       ╰── y
            │       ├── <429> FunctionCall [putchar]
            │       │   ╰── <428> Arrow
            │       │       ├── <426> Var [g_ptr]
            │       │       ╰── z
            │       ╰── <433> FunctionCall [putchar]
            │           ╰── <432> Constant Int [10]
            ├── Function [test_global_struct_pointer]
            │   ╰── Body
            │       ├── <448> Assign [=]
            │       │   ├── <443> Var [g_ptr]
            │       │   ╰── <447> AddressOf
            │       │       ╰── <446> Var [g]
            │       ├── <451> FunctionCall [f3]
            │       ├── <454> FunctionCall [f4]
            │       ├── <457> FunctionCall [f3]
            │       ├── <460> FunctionCall [f4]
            │       ├── <471> Assign [=]
            │       │   ├── <463> Var [g_ptr]
            │       │   ╰── <470> FunctionCall [malloc]
            │       │       ╰── <469> SizeOfType
            │       │           ╰── Struct [global]
            │       ├── <479> Assign [=]
            │       │   ├── <476> Arrow
            │       │   │   ├── <474> Var [g_ptr]
            │       │   │   ╰── x
            │       │   ╰── <478> Constant Int [97]
            │       ├── <487> Assign [=]
            │       │   ├── <484> Arrow
            │       │   │   ├── <482> Var [g_ptr]
            │       │   │   ╰── y
            │       │   ╰── <486> Constant Int [98]
            │       ├── <495> Assign [=]
            │       │   ├── <492> Arrow
            │       │   │   ├── <490> Var [g_ptr]
            │       │   │   ╰── z
            │       │   ╰── <494> Constant Int [99]
            │       ├── <498> FunctionCall [f3]
            │       ├── <501> FunctionCall [f4]
            │       ├── <504> FunctionCall [f3]
            │       ╰── <507> FunctionCall [f4]
            ╰── Function [main]
                ╰── Body
                    ├── <519> FunctionCall [test_static_local]
                    │   ├── <517> Constant Int [109]
                    │   ╰── <518> Constant Int [110]
                    ├── <524> FunctionCall [test_static_local]
                    │   ├── <522> Constant Int [111]
                    │   ╰── <523> Constant Int [112]
                    ├── <529> FunctionCall [test_static_local]
                    │   ├── <527> Constant Int [33]
                    │   ╰── <528> Constant Int [33]
                    ├── Empty
                    ├── <535> FunctionCall [test_static_local_pointer]
                    │   ├── <533> Constant Int [119]
                    │   ╰── <534> Constant Int [120]
                    ├── <540> FunctionCall [test_static_local_pointer]
                    │   ├── <538> Constant Int [121]
                    │   ╰── <539> Constant Int [122]
                    ├── <545> FunctionCall [test_static_local_pointer]
                    │   ├── <543> Constant Int [33]
                    │   ╰── <544> Constant Int [33]
                    ├── Empty
                    ├── <549> FunctionCall [test_global_struct]
                    ├── <552> FunctionCall [test_global_struct_pointer]
                    ╰── Return
                        ╰── <554> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_semantic_analysis_cast_struct_to_void() {
    let src = r#"
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s x = {1, 2};
            (void)x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <20> Constant Int [1]
                    │           ╰── <22> Constant Int [2]
                    ├── <30> Cast
                    │   ├── Target
                    │   │   ╰── Void
                    │   ╰── Expression
                    │       ╰── <29> Var [x]
                    ╰── Return
                        ╰── <32> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_semantic_analysis_incomplete_structs() {
    let src = r#"
        void *malloc(unsigned long size);
        void *calloc(unsigned long nmemb, unsigned long size);
        int puts(char *s);
        int strcmp(char *s1, char *s2);
        struct never_used;
        struct never_used incomplete_fun(struct never_used x);
        int test_block_scope_forward_decl(void) {
            struct s;
            struct s *s_ptr = 0;
            struct s {
                int x;
                int y;
            };
            struct s val = {1, 2};
            s_ptr = &val;
            if (s_ptr->x != 1 || s_ptr->y != 2) {
                return 0;
            }
            return 1;
        }
        struct pair;
        struct pair *make_struct(void);
        int validate_struct(struct pair *ptr);
        int test_file_scope_forward_decl(void) {
            struct pair *my_struct = make_struct();
            return validate_struct(my_struct);
        }
        struct pair {
            long l;
            long m;
        };
        struct pair *make_struct(void) {
            struct pair *retval = malloc(sizeof(struct pair));
            retval->l = 100;
            retval->m = 200;
            return retval;
        }
        int validate_struct(struct pair *ptr) {
            return (ptr->l == 100 && ptr->m == 200);
        }
        struct msg_holder;
        void print_msg(struct msg_holder *param);
        int validate_incomplete_var(void);
        extern struct msg_holder incomplete_var;
        int test_incomplete_var(void) {
            print_msg(&incomplete_var);
            return validate_incomplete_var();
        }
        struct msg_holder {
            char *msg;
        };
        int validate_incomplete_var(void) {
            if (strcmp(incomplete_var.msg, "I'm a struct!")) {
                return 0;
            }
            return 1;
        }
        struct msg_holder incomplete_var = {"I'm a struct!"};
        void print_msg(struct msg_holder *param) {
            puts(param->msg);
        }
        int test_deref_incomplete_var(void) {
            struct undefined_struct;
            struct undefined_struct *ptr = malloc(4);
            return &*ptr == ptr;
        }
        struct opaque_struct;
        struct opaque_struct *use_struct_pointers(struct opaque_struct *param) {
            if (param == 0) {
                puts("empty pointer!");
            }
            return 0;
        }
        int test_use_incomplete_struct_pointers(void) {
            struct opaque_struct *ptr1 = calloc(1, 4);
            struct opaque_struct *ptr2 = calloc(1, 4);
            char *ptr1_bytes = (char *)ptr1;
            if (ptr1_bytes[0] || ptr1_bytes[1]) {
                return 0;
            }
            if (ptr1 == 0 || ptr2 == 0 || ptr1 == ptr2) {
                return 0;
            }
            static int flse = 0;
            struct opaque_struct *ptr3 = flse ? ptr1 : ptr2;
            if (ptr3 != ptr2) {
                return 0;
            }
            if (use_struct_pointers(ptr3)) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_block_scope_forward_decl()) {
                return 2;
            }
            if (!test_file_scope_forward_decl()) {
                return 3;
            }
            if (!test_incomplete_var()) {
                return 4;
            }
            if (!test_deref_incomplete_var()) {
                return 5;
            }
            if (!test_use_incomplete_struct_pointers()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [puts]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [never_used]
            ├── Function [incomplete_fun]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── x
            │           ╰── Type
            │               ╰── Struct [never_used]
            ├── Function [test_block_scope_forward_decl]
            │   ╰── Body
            │       ├── Struct [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <79> Constant Int [0]
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── val
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <96> Constant Int [1]
            │       │           ╰── <98> Constant Int [2]
            │       ├── <108> Assign [=]
            │       │   ├── <103> Var [s_ptr]
            │       │   ╰── <107> AddressOf
            │       │       ╰── <106> Var [val]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <125>  [||]
            │       │   │       ├── <116>  [!=]
            │       │   │       │   ├── <113> Arrow
            │       │   │       │   │   ├── <111> Var [s_ptr]
            │       │   │       │   │   ╰── x
            │       │   │       │   ╰── <115> Constant Int [1]
            │       │   │       ╰── <124>  [!=]
            │       │   │           ├── <121> Arrow
            │       │   │           │   ├── <119> Var [s_ptr]
            │       │   │           │   ╰── y
            │       │   │           ╰── <123> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <126> Constant Int [0]
            │       ╰── Return
            │           ╰── <131> Constant Int [1]
            ├── Struct [pair]
            ├── Function [make_struct]
            ├── Function [validate_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [pair]
            ├── Function [test_file_scope_forward_decl]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_struct
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [pair]
            │       │   ╰── Initializer
            │       │       ╰── <170> FunctionCall [make_struct]
            │       ╰── Return
            │           ╰── <176> FunctionCall [validate_struct]
            │               ╰── <175> Var [my_struct]
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── m
            │       ╰── Type
            │           ╰── Long
            ├── Function [make_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [pair]
            │       │   ╰── Initializer
            │       │       ╰── <209> FunctionCall [malloc]
            │       │           ╰── <208> SizeOfType
            │       │               ╰── Struct [pair]
            │       ├── <218> Assign [=]
            │       │   ├── <215> Arrow
            │       │   │   ├── <213> Var [retval]
            │       │   │   ╰── l
            │       │   ╰── <217> Constant Int [100]
            │       ├── <226> Assign [=]
            │       │   ├── <223> Arrow
            │       │   │   ├── <221> Var [retval]
            │       │   │   ╰── m
            │       │   ╰── <225> Constant Int [200]
            │       ╰── Return
            │           ╰── <229> Var [retval]
            ├── Function [validate_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [pair]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <260>  [&&]
            │               ├── <250>  [==]
            │               │   ├── <247> Arrow
            │               │   │   ├── <245> Var [ptr]
            │               │   │   ╰── l
            │               │   ╰── <249> Constant Int [100]
            │               ╰── <258>  [==]
            │                   ├── <255> Arrow
            │                   │   ├── <253> Var [ptr]
            │                   │   ╰── m
            │                   ╰── <257> Constant Int [200]
            ├── Struct [msg_holder]
            ├── Function [print_msg]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── param
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [msg_holder]
            ├── Function [validate_incomplete_var]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── incomplete_var
            │   ├── Type
            │   │   ╰── Struct [msg_holder]
            │   ╰── Extern
            ├── Function [test_incomplete_var]
            │   ╰── Body
            │       ├── <299> FunctionCall [print_msg]
            │       │   ╰── <298> AddressOf
            │       │       ╰── <297> Var [incomplete_var]
            │       ╰── Return
            │           ╰── <302> FunctionCall [validate_incomplete_var]
            ├── Struct [msg_holder]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── msg
            │       ╰── Type
            │           ╰── Pointer
            │               ╰── Char
            ├── Function [validate_incomplete_var]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <325> FunctionCall [strcmp]
            │       │   │       ├── <323> Dot
            │       │   │       │   ├── <321> Var [incomplete_var]
            │       │   │       │   ╰── msg
            │       │   │       ╰── <324> "I'm a struct!"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <326> Constant Int [0]
            │       ╰── Return
            │           ╰── <331> Constant Int [1]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── incomplete_var
            │   ├── Type
            │   │   ╰── Struct [msg_holder]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── <339> "I'm a struct!"
            ├── Function [print_msg]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── param
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [msg_holder]
            │   ╰── Body
            │       ╰── <359> FunctionCall [puts]
            │           ╰── <358> Arrow
            │               ├── <356> Var [param]
            │               ╰── msg
            ├── Function [test_deref_incomplete_var]
            │   ╰── Body
            │       ├── Struct [undefined_struct]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [undefined_struct]
            │       │   ╰── Initializer
            │       │       ╰── <378> FunctionCall [malloc]
            │       │           ╰── <377> Constant Int [4]
            │       ╰── Return
            │           ╰── <388>  [==]
            │               ├── <384> AddressOf
            │               │   ╰── <383> Dereference
            │               │       ╰── <382> Var [ptr]
            │               ╰── <387> Var [ptr]
            ├── Struct [opaque_struct]
            ├── Function [use_struct_pointers]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── param
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [opaque_struct]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <412>  [==]
            │       │   │       ├── <409> Var [param]
            │       │   │       ╰── <411> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <415> FunctionCall [puts]
            │       │               ╰── <414> "empty pointer!"
            │       ╰── Return
            │           ╰── <420> Constant Int [0]
            ├── Function [test_use_incomplete_struct_pointers]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr1
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [opaque_struct]
            │       │   ╰── Initializer
            │       │       ╰── <438> FunctionCall [calloc]
            │       │           ├── <436> Constant Int [1]
            │       │           ╰── <437> Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr2
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [opaque_struct]
            │       │   ╰── Initializer
            │       │       ╰── <450> FunctionCall [calloc]
            │       │           ├── <448> Constant Int [1]
            │       │           ╰── <449> Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr1_bytes
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <463> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Char
            │       │           ╰── Expression
            │       │               ╰── <462> Var [ptr1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <475>  [||]
            │       │   │       ├── <469> Subscript
            │       │   │       │   ├── <467> Var [ptr1_bytes]
            │       │   │       │   ╰── <468> Constant Int [0]
            │       │   │       ╰── <474> Subscript
            │       │   │           ├── <472> Var [ptr1_bytes]
            │       │   │           ╰── <473> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <476> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <500>  [||]
            │       │   │       ├── <492>  [||]
            │       │   │       │   ├── <485>  [==]
            │       │   │       │   │   ├── <482> Var [ptr1]
            │       │   │       │   │   ╰── <484> Constant Int [0]
            │       │   │       │   ╰── <491>  [==]
            │       │   │       │       ├── <488> Var [ptr2]
            │       │   │       │       ╰── <490> Constant Int [0]
            │       │   │       ╰── <499>  [==]
            │       │   │           ├── <495> Var [ptr1]
            │       │   │           ╰── <498> Var [ptr2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <501> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── flse
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <510> Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr3
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [opaque_struct]
            │       │   ╰── Initializer
            │       │       ╰── <525> Conditional [?]
            │       │           ├── <520> Var [flse]
            │       │           ├── Then
            │       │           │   ╰── <522> Var [ptr1]
            │       │           ╰── Else
            │       │               ╰── <524> Var [ptr2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <533>  [!=]
            │       │   │       ├── <529> Var [ptr3]
            │       │   │       ╰── <532> Var [ptr2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <534> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <542> FunctionCall [use_struct_pointers]
            │       │   │       ╰── <541> Var [ptr3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <543> Constant Int [0]
            │       ╰── Return
            │           ╰── <548> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <560> Unary [!]
                    │   │       ╰── <559> FunctionCall [test_block_scope_forward_decl]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <561> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <569> Unary [!]
                    │   │       ╰── <568> FunctionCall [test_file_scope_forward_decl]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <570> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <578> Unary [!]
                    │   │       ╰── <577> FunctionCall [test_incomplete_var]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <579> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <587> Unary [!]
                    │   │       ╰── <586> FunctionCall [test_deref_incomplete_var]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <588> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <596> Unary [!]
                    │   │       ╰── <595> FunctionCall [test_use_incomplete_struct_pointers]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <597> Constant Int [6]
                    ╰── Return
                        ╰── <602> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_semantic_analysis_namespaces() {
    let src = r#"
        int test_shared_member_names(void) {
            struct pair1 {
                int x;
                int y;
            };
            struct pair2 {
                double x;
                char y;
            };
            struct pair1 p1 = {1, 2};
            struct pair2 p2 = {3.0, 4};
            if (p1.x != 1 || p2.x != 3.0) {
                return 0;
            }
            return 1;
        }
        int test_shared_nested_member_names(void) {
            struct pair1 {
                int x;
                int *y;
            };
            struct pair2 {
                void *x;
                double y[4];
            };
            struct pair1 p1 = {3, &(p1.x)};
            struct pair2 p2 = {&p1, {1.0, 2.0, 3.0, 4.0}};
            if (((struct pair1 *)p2.x)->x != 3) {
                return 0;
            }
            return 1;
        }
        int test_same_name_var_member_and_tag(void) {
            struct x {
                int x;
            };
            struct x x = {10};
            if (x.x != 10) {
                return 0;
            }
            return 1;
        }
        int test_same_name_fun_member_and_tag(void) {
            struct f {
                int f;
            };
            int f(void);
            struct f my_struct;
            my_struct.f = f();
            if (my_struct.f != 10) {
                return 0;
            }
            return 1;
        }
        int f(void) {
            return 10;
        }
        int main(void) {
            if (!test_shared_member_names()) {
                return 1;
            }
            if (!test_shared_nested_member_names()) {
                return 2;
            }
            if (!test_same_name_var_member_and_tag()) {
                return 3;
            }
            if (!test_same_name_fun_member_and_tag()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [test_shared_member_names]
            │   ╰── Body
            │       ├── Struct [pair1]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── Struct [pair2]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Double
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Char
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── p1
            │       │   ├── Type
            │       │   │   ╰── Struct [pair1]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <30> Constant Int [1]
            │       │           ╰── <32> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── p2
            │       │   ├── Type
            │       │   │   ╰── Struct [pair2]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <40> Constant Double [+3e0]
            │       │           ╰── <42> Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <61>  [||]
            │       │   │       ├── <52>  [!=]
            │       │   │       │   ├── <49> Dot
            │       │   │       │   │   ├── <47> Var [p1]
            │       │   │       │   │   ╰── x
            │       │   │       │   ╰── <51> Constant Int [1]
            │       │   │       ╰── <60>  [!=]
            │       │   │           ├── <57> Dot
            │       │   │           │   ├── <55> Var [p2]
            │       │   │           │   ╰── x
            │       │   │           ╰── <59> Constant Double [+3e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <62> Constant Int [0]
            │       ╰── Return
            │           ╰── <67> Constant Int [1]
            ├── Function [test_shared_nested_member_names]
            │   ╰── Body
            │       ├── Struct [pair1]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Pointer
            │       │               ╰── Int
            │       ├── Struct [pair2]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Pointer
            │       │   │           ╰── Void
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Array
            │       │               ├── 4
            │       │               ╰── Double
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── p1
            │       │   ├── Type
            │       │   │   ╰── Struct [pair1]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <107> Constant Int [3]
            │       │           ╰── <114> AddressOf
            │       │               ╰── <113> Dot
            │       │                   ├── <110> Var [p1]
            │       │                   ╰── x
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── p2
            │       │   ├── Type
            │       │   │   ╰── Struct [pair2]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <124> AddressOf
            │       │           │   ╰── <123> Var [p1]
            │       │           ╰── Compound
            │       │               ├── <126> Constant Double [+1e0]
            │       │               ├── <128> Constant Double [+2e0]
            │       │               ├── <130> Constant Double [+3e0]
            │       │               ╰── <132> Constant Double [+4e0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <151>  [!=]
            │       │   │       ├── <148> Arrow
            │       │   │       │   ├── <146> Cast
            │       │   │       │   │   ├── Target
            │       │   │       │   │   │   ╰── Pointer
            │       │   │       │   │   │       ╰── Struct [pair1]
            │       │   │       │   │   ╰── Expression
            │       │   │       │   │       ╰── <144> Dot
            │       │   │       │   │           ├── <142> Var [p2]
            │       │   │       │   │           ╰── x
            │       │   │       │   ╰── x
            │       │   │       ╰── <150> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <152> Constant Int [0]
            │       ╰── Return
            │           ╰── <157> Constant Int [1]
            ├── Function [test_same_name_var_member_and_tag]
            │   ╰── Body
            │       ├── Struct [x]
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── x
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [x]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <176> Constant Int [10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <186>  [!=]
            │       │   │       ├── <183> Dot
            │       │   │       │   ├── <181> Var [x]
            │       │   │       │   ╰── x
            │       │   │       ╰── <185> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <187> Constant Int [0]
            │       ╰── Return
            │           ╰── <192> Constant Int [1]
            ├── Function [test_same_name_fun_member_and_tag]
            │   ╰── Body
            │       ├── Struct [f]
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── f
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── Function [f]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_struct
            │       │   ╰── Type
            │       │       ╰── Struct [f]
            │       ├── <225> Assign [=]
            │       │   ├── <221> Dot
            │       │   │   ├── <219> Var [my_struct]
            │       │   │   ╰── f
            │       │   ╰── <224> FunctionCall [f]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <233>  [!=]
            │       │   │       ├── <230> Dot
            │       │   │       │   ├── <228> Var [my_struct]
            │       │   │       │   ╰── f
            │       │   │       ╰── <232> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <234> Constant Int [0]
            │       ╰── Return
            │           ╰── <239> Constant Int [1]
            ├── Function [f]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <248> Constant Int [10]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <260> Unary [!]
                    │   │       ╰── <259> FunctionCall [test_shared_member_names]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <261> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <269> Unary [!]
                    │   │       ╰── <268> FunctionCall [test_shared_nested_member_names]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <270> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <278> Unary [!]
                    │   │       ╰── <277> FunctionCall [test_same_name_var_member_and_tag]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <279> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <287> Unary [!]
                    │   │       ╰── <286> FunctionCall [test_same_name_fun_member_and_tag]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <288> Constant Int [4]
                    ╰── Return
                        ╰── <293> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_semantic_analysis_resolve_tags() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        void *malloc(unsigned long size);
        struct s {
            int a;
        };
        int test_var_declaration(void) {
            struct shadow {
                int x;
            };
            struct shadow outer;
            outer.x = 2;
            {
                struct shadow {
                    int y;
                };
                struct shadow inner;
                inner.y = 3;
                if (outer.x != 2) {
                    return 0;
                }
                if (inner.y != 3) {
                    return 0;
                }
            }
            return 1;
        }
        int test_member_declaration(void) {
            struct s {
                int b;
                struct s *self_ptr;
            };
            struct s my_struct = {123, 0};
            my_struct.self_ptr = &my_struct;
            if (my_struct.self_ptr->b != 123) {
                return 0;
            }
            return 1;
        }
        int test_function_declaration(void) {
            struct s outer_struct = {1};
            {
                struct s {
                    int arr[40];
                };
            }
            struct s *copy_struct(struct s * arg);
            struct s *copy = copy_struct(&outer_struct);
            if (copy->a != outer_struct.a) {
                return 0;
            }
            return 1;
        }
        struct s *copy_struct(struct s *arg) {
            struct s *ptr = malloc(4);
            ptr->a = arg->a;
            return ptr;
        }
        int test_for_loop(void) {
            for (struct s loop_struct = {10}; loop_struct.a > 0;
                 loop_struct.a = loop_struct.a - 1) {
                struct s {
                    double d;
                };
                static struct s loop_body_struct = {0};
                loop_body_struct.d = loop_body_struct.d + 1;
                if (loop_struct.a == 1) {
                    if (loop_body_struct.d != 10.0) {
                        return 0;
                    }
                }
            }
            return 1;
        }
        int test_cast(void) {
            void *ptr = malloc(10);
            if (ptr) {
                struct s {
                    char arr[10];
                };
                ((struct s *)ptr)->arr[2] = 10;
                char byte = ((char *)ptr)[2];
                if (byte != 10) {
                    return 0;
                }
            }
            void *second_ptr = malloc(4);
            ((struct s *)second_ptr)->a = 10;
            char lowest_byte = ((char *)second_ptr)[0];
            if (lowest_byte != 10) {
                return 0;
            }
            return 1;
        }
        int test_sizeof(void) {
            struct s {
                int a;
                int b;
            };
            struct s x;
            {
                struct s {
                    char arr[15];
                };
                if (sizeof x != 8) {
                    return 0;
                };
                if (sizeof(struct s) != 15) {
                    return 0;
                }
            }
            if (sizeof(struct s) != 8) {
                return 0;
            }
            return 1;
        }
        int test_derived_types(void) {
            struct s outer_struct = {1};
            struct s *(*outer_arr)[3] = calloc(3, sizeof(void *));
            struct s {
                int x;
            };
            struct s inner_struct = {2};
            struct s *(*inner_arr)[3] = calloc(3, sizeof(void *));
            outer_arr[0][0] = &outer_struct;
            outer_arr[0][1] = &outer_struct;
            inner_arr[0][0] = &inner_struct;
            inner_arr[0][2] = &inner_struct;
            if (outer_arr[0][0]->a != 1) {
                return 0;
            }
            if (inner_arr[0][0]->x != 2) {
                return 0;
            }
            return 1;
        }
        int test_contentless_tag_noop(void) {
            struct s {
                int x;
                int y;
            };
            struct s;
            struct s var;
            var.x = 10;
            var.y = 11;
            if (var.x != 10 || var.y != 11) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_var_declaration()) {
                return 1;
            }
            if (!test_member_declaration()) {
                return 2;
            }
            if (!test_function_declaration()) {
                return 3;
            }
            if (!test_for_loop()) {
                return 4;
            }
            if (!test_cast()) {
                return 5;
            }
            if (!test_sizeof()) {
                return 6;
            }
            if (!test_derived_types()) {
                return 7;
            }
            if (!test_contentless_tag_noop()) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Int
            ├── Function [test_var_declaration]
            │   ╰── Body
            │       ├── Struct [shadow]
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── x
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer
            │       │   ╰── Type
            │       │       ╰── Struct [shadow]
            │       ├── <54> Assign [=]
            │       │   ├── <51> Dot
            │       │   │   ├── <49> Var [outer]
            │       │   │   ╰── x
            │       │   ╰── <53> Constant Int [2]
            │       ├── Block
            │       │   ├── Struct [shadow]
            │       │   │   ╰── Field
            │       │   │       ├── Name
            │       │   │       │   ╰── y
            │       │   │       ╰── Type
            │       │   │           ╰── Int
            │       │   ├── VarDeclaration
            │       │   │   ├── Name
            │       │   │   │   ╰── inner
            │       │   │   ╰── Type
            │       │   │       ╰── Struct [shadow]
            │       │   ├── <73> Assign [=]
            │       │   │   ├── <70> Dot
            │       │   │   │   ├── <68> Var [inner]
            │       │   │   │   ╰── y
            │       │   │   ╰── <72> Constant Int [3]
            │       │   ├── If
            │       │   │   ├── Condition
            │       │   │   │   ╰── <81>  [!=]
            │       │   │   │       ├── <78> Dot
            │       │   │   │       │   ├── <76> Var [outer]
            │       │   │   │       │   ╰── x
            │       │   │   │       ╰── <80> Constant Int [2]
            │       │   │   ╰── Then
            │       │   │       ╰── Block
            │       │   │           ╰── Return
            │       │   │               ╰── <82> Constant Int [0]
            │       │   ╰── If
            │       │       ├── Condition
            │       │       │   ╰── <93>  [!=]
            │       │       │       ├── <90> Dot
            │       │       │       │   ├── <88> Var [inner]
            │       │       │       │   ╰── y
            │       │       │       ╰── <92> Constant Int [3]
            │       │       ╰── Then
            │       │           ╰── Block
            │       │               ╰── Return
            │       │                   ╰── <94> Constant Int [0]
            │       ╰── Return
            │           ╰── <101> Constant Int [1]
            ├── Function [test_member_declaration]
            │   ╰── Body
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── b
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── self_ptr
            │       │       ╰── Type
            │       │           ╰── Pointer
            │       │               ╰── Struct [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <127> Constant Int [123]
            │       │           ╰── <129> Constant Int [0]
            │       ├── <141> Assign [=]
            │       │   ├── <136> Dot
            │       │   │   ├── <134> Var [my_struct]
            │       │   │   ╰── self_ptr
            │       │   ╰── <140> AddressOf
            │       │       ╰── <139> Var [my_struct]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <151>  [!=]
            │       │   │       ├── <148> Arrow
            │       │   │       │   ├── <146> Dot
            │       │   │       │   │   ├── <144> Var [my_struct]
            │       │   │       │   │   ╰── self_ptr
            │       │   │       │   ╰── b
            │       │   │       ╰── <150> Constant Int [123]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <152> Constant Int [0]
            │       ╰── Return
            │           ╰── <157> Constant Int [1]
            ├── Function [test_function_declaration]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <170> Constant Int [1]
            │       ├── Block
            │       │   ╰── Struct [s]
            │       │       ╰── Field
            │       │           ├── Name
            │       │           │   ╰── arr
            │       │           ╰── Type
            │       │               ╰── Array
            │       │                   ├── 40
            │       │                   ╰── Int
            │       ├── Function [copy_struct]
            │       │   ╰── Parameters
            │       │       ╰── Param
            │       │           ├── Name
            │       │           │   ╰── arg
            │       │           ╰── Type
            │       │               ╰── Pointer
            │       │                   ╰── Struct [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── copy
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <210> FunctionCall [copy_struct]
            │       │           ╰── <209> AddressOf
            │       │               ╰── <208> Var [outer_struct]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <222>  [!=]
            │       │   │       ├── <216> Arrow
            │       │   │       │   ├── <214> Var [copy]
            │       │   │       │   ╰── a
            │       │   │       ╰── <221> Dot
            │       │   │           ├── <219> Var [outer_struct]
            │       │   │           ╰── a
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <223> Constant Int [0]
            │       ╰── Return
            │           ╰── <228> Constant Int [1]
            ├── Function [copy_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── arg
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Struct [s]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <254> FunctionCall [malloc]
            │       │           ╰── <253> Constant Int [4]
            │       ├── <266> Assign [=]
            │       │   ├── <260> Arrow
            │       │   │   ├── <258> Var [ptr]
            │       │   │   ╰── a
            │       │   ╰── <265> Arrow
            │       │       ├── <263> Var [arg]
            │       │       ╰── a
            │       ╰── Return
            │           ╰── <269> Var [ptr]
            ├── Function [test_for_loop]
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── loop_struct
            │       │   │       ├── Type
            │       │   │       │   ╰── Struct [s]
            │       │   │       ╰── Initializer
            │       │   │           ╰── Compound
            │       │   │               ╰── <282> Constant Int [10]
            │       │   ├── Condition
            │       │   │   ╰── <293>  [>]
            │       │   │       ├── <290> Dot
            │       │   │       │   ├── <288> Var [loop_struct]
            │       │   │       │   ╰── a
            │       │   │       ╰── <292> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <306> Assign [=]
            │       │   │       ├── <297> Dot
            │       │   │       │   ├── <295> Var [loop_struct]
            │       │   │       │   ╰── a
            │       │   │       ╰── <305>  [-]
            │       │   │           ├── <302> Dot
            │       │   │           │   ├── <300> Var [loop_struct]
            │       │   │           │   ╰── a
            │       │   │           ╰── <304> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── Struct [s]
            │       │       │   ╰── Field
            │       │       │       ├── Name
            │       │       │       │   ╰── d
            │       │       │       ╰── Type
            │       │       │           ╰── Double
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── loop_body_struct
            │       │       │   ├── Type
            │       │       │   │   ╰── Struct [s]
            │       │       │   ├── Initializer
            │       │       │   │   ╰── Compound
            │       │       │   │       ╰── <318> Constant Int [0]
            │       │       │   ╰── Static
            │       │       ├── <334> Assign [=]
            │       │       │   ├── <325> Dot
            │       │       │   │   ├── <323> Var [loop_body_struct]
            │       │       │   │   ╰── d
            │       │       │   ╰── <333>  [+]
            │       │       │       ├── <330> Dot
            │       │       │       │   ├── <328> Var [loop_body_struct]
            │       │       │       │   ╰── d
            │       │       │       ╰── <332> Constant Int [1]
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <342>  [==]
            │       │           │       ├── <339> Dot
            │       │           │       │   ├── <337> Var [loop_struct]
            │       │           │       │   ╰── a
            │       │           │       ╰── <341> Constant Int [1]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── If
            │       │                       ├── Condition
            │       │                       │   ╰── <349>  [!=]
            │       │                       │       ├── <346> Dot
            │       │                       │       │   ├── <344> Var [loop_body_struct]
            │       │                       │       │   ╰── d
            │       │                       │       ╰── <348> Constant Double [+1e1]
            │       │                       ╰── Then
            │       │                           ╰── Block
            │       │                               ╰── Return
            │       │                                   ╰── <350> Constant Int [0]
            │       ╰── Return
            │           ╰── <361> Constant Int [1]
            ├── Function [test_cast]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Void
            │       │   ╰── Initializer
            │       │       ╰── <377> FunctionCall [malloc]
            │       │           ╰── <376> Constant Int [10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <381> Var [ptr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ├── Struct [s]
            │       │           │   ╰── Field
            │       │           │       ├── Name
            │       │           │       │   ╰── arr
            │       │           │       ╰── Type
            │       │           │           ╰── Array
            │       │           │               ├── 10
            │       │           │               ╰── Char
            │       │           ├── <405> Assign [=]
            │       │           │   ├── <402> Subscript
            │       │           │   │   ├── <400> Arrow
            │       │           │   │   │   ├── <398> Cast
            │       │           │   │   │   │   ├── Target
            │       │           │   │   │   │   │   ╰── Pointer
            │       │           │   │   │   │   │       ╰── Struct [s]
            │       │           │   │   │   │   ╰── Expression
            │       │           │   │   │   │       ╰── <396> Var [ptr]
            │       │           │   │   │   ╰── arr
            │       │           │   │   ╰── <401> Constant Int [2]
            │       │           │   ╰── <404> Constant Int [10]
            │       │           ├── VarDeclaration
            │       │           │   ├── Name
            │       │           │   │   ╰── byte
            │       │           │   ├── Type
            │       │           │   │   ╰── Char
            │       │           │   ╰── Initializer
            │       │           │       ╰── <418> Subscript
            │       │           │           ├── <416> Cast
            │       │           │           │   ├── Target
            │       │           │           │   │   ╰── Pointer
            │       │           │           │   │       ╰── Char
            │       │           │           │   ╰── Expression
            │       │           │           │       ╰── <414> Var [ptr]
            │       │           │           ╰── <417> Constant Int [2]
            │       │           ╰── If
            │       │               ├── Condition
            │       │               │   ╰── <425>  [!=]
            │       │               │       ├── <422> Var [byte]
            │       │               │       ╰── <424> Constant Int [10]
            │       │               ╰── Then
            │       │                   ╰── Block
            │       │                       ╰── Return
            │       │                           ╰── <426> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── second_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Void
            │       │   ╰── Initializer
            │       │       ╰── <441> FunctionCall [malloc]
            │       │           ╰── <440> Constant Int [4]
            │       ├── <456> Assign [=]
            │       │   ├── <453> Arrow
            │       │   │   ├── <451> Cast
            │       │   │   │   ├── Target
            │       │   │   │   │   ╰── Pointer
            │       │   │   │   │       ╰── Struct [s]
            │       │   │   │   ╰── Expression
            │       │   │   │       ╰── <449> Var [second_ptr]
            │       │   │   ╰── a
            │       │   ╰── <455> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── lowest_byte
            │       │   ├── Type
            │       │   │   ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── <469> Subscript
            │       │           ├── <467> Cast
            │       │           │   ├── Target
            │       │           │   │   ╰── Pointer
            │       │           │   │       ╰── Char
            │       │           │   ╰── Expression
            │       │           │       ╰── <465> Var [second_ptr]
            │       │           ╰── <468> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <476>  [!=]
            │       │   │       ├── <473> Var [lowest_byte]
            │       │   │       ╰── <475> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <477> Constant Int [0]
            │       ╰── Return
            │           ╰── <482> Constant Int [1]
            ├── Function [test_sizeof]
            │   ╰── Body
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── a
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── b
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Struct [s]
            │       ├── Block
            │       │   ├── Struct [s]
            │       │   │   ╰── Field
            │       │   │       ├── Name
            │       │   │       │   ╰── arr
            │       │   │       ╰── Type
            │       │   │           ╰── Array
            │       │   │               ├── 15
            │       │   │               ╰── Char
            │       │   ├── If
            │       │   │   ├── Condition
            │       │   │   │   ╰── <520>  [!=]
            │       │   │   │       ├── <517> SizeOfExpr
            │       │   │   │       │   ╰── <516> Var [x]
            │       │   │   │       ╰── <519> Constant Int [8]
            │       │   │   ╰── Then
            │       │   │       ╰── Block
            │       │   │           ╰── Return
            │       │   │               ╰── <521> Constant Int [0]
            │       │   ├── Empty
            │       │   ╰── If
            │       │       ├── Condition
            │       │       │   ╰── <533>  [!=]
            │       │       │       ├── <530> SizeOfType
            │       │       │       │   ╰── Struct [s]
            │       │       │       ╰── <532> Constant Int [15]
            │       │       ╰── Then
            │       │           ╰── Block
            │       │               ╰── Return
            │       │                   ╰── <534> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <547>  [!=]
            │       │   │       ├── <544> SizeOfType
            │       │   │       │   ╰── Struct [s]
            │       │   │       ╰── <546> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <548> Constant Int [0]
            │       ╰── Return
            │           ╰── <553> Constant Int [1]
            ├── Function [test_derived_types]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <566> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_arr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Array
            │       │   │           ├── 3
            │       │   │           ╰── Pointer
            │       │   │               ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <588> FunctionCall [calloc]
            │       │           ├── <583> Constant Int [3]
            │       │           ╰── <587> SizeOfType
            │       │               ╰── Pointer
            │       │                   ╰── Void
            │       ├── Struct [s]
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── x
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── inner_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <601> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── inner_arr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Array
            │       │   │           ├── 3
            │       │   │           ╰── Pointer
            │       │   │               ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <623> FunctionCall [calloc]
            │       │           ├── <618> Constant Int [3]
            │       │           ╰── <622> SizeOfType
            │       │               ╰── Pointer
            │       │                   ╰── Void
            │       ├── <636> Assign [=]
            │       │   ├── <631> Subscript
            │       │   │   ├── <629> Subscript
            │       │   │   │   ├── <627> Var [outer_arr]
            │       │   │   │   ╰── <628> Constant Int [0]
            │       │   │   ╰── <630> Constant Int [0]
            │       │   ╰── <635> AddressOf
            │       │       ╰── <634> Var [outer_struct]
            │       ├── <648> Assign [=]
            │       │   ├── <643> Subscript
            │       │   │   ├── <641> Subscript
            │       │   │   │   ├── <639> Var [outer_arr]
            │       │   │   │   ╰── <640> Constant Int [0]
            │       │   │   ╰── <642> Constant Int [1]
            │       │   ╰── <647> AddressOf
            │       │       ╰── <646> Var [outer_struct]
            │       ├── <660> Assign [=]
            │       │   ├── <655> Subscript
            │       │   │   ├── <653> Subscript
            │       │   │   │   ├── <651> Var [inner_arr]
            │       │   │   │   ╰── <652> Constant Int [0]
            │       │   │   ╰── <654> Constant Int [0]
            │       │   ╰── <659> AddressOf
            │       │       ╰── <658> Var [inner_struct]
            │       ├── <672> Assign [=]
            │       │   ├── <667> Subscript
            │       │   │   ├── <665> Subscript
            │       │   │   │   ├── <663> Var [inner_arr]
            │       │   │   │   ╰── <664> Constant Int [0]
            │       │   │   ╰── <666> Constant Int [2]
            │       │   ╰── <671> AddressOf
            │       │       ╰── <670> Var [inner_struct]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <684>  [!=]
            │       │   │       ├── <681> Arrow
            │       │   │       │   ├── <679> Subscript
            │       │   │       │   │   ├── <677> Subscript
            │       │   │       │   │   │   ├── <675> Var [outer_arr]
            │       │   │       │   │   │   ╰── <676> Constant Int [0]
            │       │   │       │   │   ╰── <678> Constant Int [0]
            │       │   │       │   ╰── a
            │       │   │       ╰── <683> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <685> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <700>  [!=]
            │       │   │       ├── <697> Arrow
            │       │   │       │   ├── <695> Subscript
            │       │   │       │   │   ├── <693> Subscript
            │       │   │       │   │   │   ├── <691> Var [inner_arr]
            │       │   │       │   │   │   ╰── <692> Constant Int [0]
            │       │   │       │   │   ╰── <694> Constant Int [0]
            │       │   │       │   ╰── x
            │       │   │       ╰── <699> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <701> Constant Int [0]
            │       ╰── Return
            │           ╰── <706> Constant Int [1]
            ├── Function [test_contentless_tag_noop]
            │   ╰── Body
            │       ├── Struct [s]
            │       │   ├── Field
            │       │   │   ├── Name
            │       │   │   │   ╰── x
            │       │   │   ╰── Type
            │       │   │       ╰── Int
            │       │   ╰── Field
            │       │       ├── Name
            │       │       │   ╰── y
            │       │       ╰── Type
            │       │           ╰── Int
            │       ├── Struct [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── var
            │       │   ╰── Type
            │       │       ╰── Struct [s]
            │       ├── <738> Assign [=]
            │       │   ├── <735> Dot
            │       │   │   ├── <733> Var [var]
            │       │   │   ╰── x
            │       │   ╰── <737> Constant Int [10]
            │       ├── <746> Assign [=]
            │       │   ├── <743> Dot
            │       │   │   ├── <741> Var [var]
            │       │   │   ╰── y
            │       │   ╰── <745> Constant Int [11]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <763>  [||]
            │       │   │       ├── <754>  [!=]
            │       │   │       │   ├── <751> Dot
            │       │   │       │   │   ├── <749> Var [var]
            │       │   │       │   │   ╰── x
            │       │   │       │   ╰── <753> Constant Int [10]
            │       │   │       ╰── <762>  [!=]
            │       │   │           ├── <759> Dot
            │       │   │           │   ├── <757> Var [var]
            │       │   │           │   ╰── y
            │       │   │           ╰── <761> Constant Int [11]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <764> Constant Int [0]
            │       ╰── Return
            │           ╰── <769> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <781> Unary [!]
                    │   │       ╰── <780> FunctionCall [test_var_declaration]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <782> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <790> Unary [!]
                    │   │       ╰── <789> FunctionCall [test_member_declaration]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <791> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <799> Unary [!]
                    │   │       ╰── <798> FunctionCall [test_function_declaration]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <800> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <808> Unary [!]
                    │   │       ╰── <807> FunctionCall [test_for_loop]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <809> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <817> Unary [!]
                    │   │       ╰── <816> FunctionCall [test_cast]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <818> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <826> Unary [!]
                    │   │       ╰── <825> FunctionCall [test_sizeof]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <827> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <835> Unary [!]
                    │   │       ╰── <834> FunctionCall [test_derived_types]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <836> Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <844> Unary [!]
                    │   │       ╰── <843> FunctionCall [test_contentless_tag_noop]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <845> Constant Int [8]
                    ╰── Return
                        ╰── <850> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_size_and_offset_calculations_member_comparisons() {
    let src = r#"
        struct three_ints {
            int a;
            int b;
            int c;
        };
        void* calloc(unsigned long nmem, unsigned long size);
        int main(void) {
            struct three_ints* my_struct = calloc(1, sizeof(struct three_ints));
            if ((void*)my_struct != &my_struct->a) {
                return 1;
            }
            if (!((int *)my_struct <= &my_struct->a)) {
                return 2;
            }
            if (&my_struct->c <= &my_struct->a) {
                return 3;
            }
            if (&my_struct->b > &my_struct->c) {
                return 4;
            }
            if (!(&my_struct->b > &my_struct->a)) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [three_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Int
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmem
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [three_ints]
                    │   ╰── Initializer
                    │       ╰── <46> FunctionCall [calloc]
                    │           ├── <41> Constant Int [1]
                    │           ╰── <45> SizeOfType
                    │               ╰── Struct [three_ints]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <61>  [!=]
                    │   │       ├── <54> Cast
                    │   │       │   ├── Target
                    │   │       │   │   ╰── Pointer
                    │   │       │   │       ╰── Void
                    │   │       │   ╰── Expression
                    │   │       │       ╰── <53> Var [my_struct]
                    │   │       ╰── <60> AddressOf
                    │   │           ╰── <59> Arrow
                    │   │               ├── <57> Var [my_struct]
                    │   │               ╰── a
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <62> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <82> Unary [!]
                    │   │       ╰── <81>  [<=]
                    │   │           ├── <73> Cast
                    │   │           │   ├── Target
                    │   │           │   │   ╰── Pointer
                    │   │           │   │       ╰── Int
                    │   │           │   ╰── Expression
                    │   │           │       ╰── <72> Var [my_struct]
                    │   │           ╰── <79> AddressOf
                    │   │               ╰── <78> Arrow
                    │   │                   ├── <76> Var [my_struct]
                    │   │                   ╰── a
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <83> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <99>  [<=]
                    │   │       ├── <92> AddressOf
                    │   │       │   ╰── <91> Arrow
                    │   │       │       ├── <89> Var [my_struct]
                    │   │       │       ╰── c
                    │   │       ╰── <98> AddressOf
                    │   │           ╰── <97> Arrow
                    │   │               ├── <95> Var [my_struct]
                    │   │               ╰── a
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <100> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <116>  [>]
                    │   │       ├── <109> AddressOf
                    │   │       │   ╰── <108> Arrow
                    │   │       │       ├── <106> Var [my_struct]
                    │   │       │       ╰── b
                    │   │       ╰── <115> AddressOf
                    │   │           ╰── <114> Arrow
                    │   │               ├── <112> Var [my_struct]
                    │   │               ╰── c
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <117> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <136> Unary [!]
                    │   │       ╰── <135>  [>]
                    │   │           ├── <127> AddressOf
                    │   │           │   ╰── <126> Arrow
                    │   │           │       ├── <124> Var [my_struct]
                    │   │           │       ╰── b
                    │   │           ╰── <133> AddressOf
                    │   │               ╰── <132> Arrow
                    │   │                   ├── <130> Var [my_struct]
                    │   │                   ╰── a
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <137> Constant Int [5]
                    ╰── Return
                        ╰── <142> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_size_and_offset_calculations_member_offsets() {
    let src = r#"
        struct eight_bytes {
            int i;
            char c;
        };
        struct two_bytes {
            char arr[2];
        };
        struct three_bytes {
            char arr[3];
        };
        struct sixteen_bytes {
            struct eight_bytes eight;
            struct two_bytes two;
            struct three_bytes three;
        };
        struct seven_bytes {
            struct two_bytes two;
            struct three_bytes three;
            struct two_bytes two2;
        };
        struct twentyfour_bytes {
            struct seven_bytes seven;
            struct sixteen_bytes sixteen;
        };
        struct twenty_bytes {
            struct sixteen_bytes sixteen;
            struct two_bytes two;
        };
        struct wonky {
            char arr[19];
        };
        struct internal_padding {
            char c;
            double d;
        };
        struct contains_struct_array {
            char c;
            struct eight_bytes struct_array[3];
        };
        
        void *malloc(unsigned long size);
        int test_eightbytes(void) {
            struct eight_bytes s;
            unsigned long start_addr = (unsigned long)&s;
            unsigned long i_addr = (unsigned long)&s.i;
            unsigned long c_addr = (unsigned long)&s.c;
            unsigned long end_addr = (unsigned long)(&s + 1);
            if (start_addr % 4 != 0) {
                return 0;
            }
            if (start_addr != i_addr) {
                return 0;
            }
            if (c_addr - start_addr != 4) {
                return 0;
            }
            if (end_addr - start_addr != 8) {
                return 0;
            }
            return 1;
        }
        int test_internal_padding(void) {
            struct internal_padding *s_ptr = malloc(sizeof(struct internal_padding));
            unsigned long start_addr = (unsigned long)s_ptr;
            unsigned long c_addr = (unsigned long)&s_ptr->c;
            unsigned long d_addr = (unsigned long)&s_ptr->d;
            unsigned long end_ptr = (unsigned long)(s_ptr + 1);
            if (start_addr % 8 != 0) {
                return 0;
            }
            if (start_addr != c_addr) {
                return 0;
            }
            if (d_addr - c_addr != 8) {
                return 0;
            }
            if (end_ptr - start_addr != 16) {
                return 0;
            }
            return 1;
        }
        int test_three_bytes(void) {
            static struct three_bytes s;
            unsigned long start_addr = (unsigned long)&s;
            unsigned long arr_addr = (unsigned long)&s.arr;
            unsigned long arr0_addr = (unsigned long)&s.arr[0];
            unsigned long arr1_addr = (unsigned long)&s.arr[1];
            unsigned long arr1_addr_alt = (unsigned long)(s.arr + 1);
            unsigned long arr2_addr = (unsigned long)&s.arr[2];
            unsigned long arr_end = (unsigned long)(&s.arr + 1);
            unsigned long struct_end = (unsigned long)(&s + 1);
            if (start_addr != arr_addr) {
                return 0;
            }
            if (start_addr != arr0_addr) {
                return 0;
            }
            if (arr1_addr - start_addr != 1) {
                return 0;
            }
            if (arr1_addr != arr1_addr_alt) {
                return 0;
            }
            if (arr2_addr - start_addr != 2) {
                return 0;
            }
            if (arr_end - start_addr != 3) {
                return 0;
            }
            if (struct_end - start_addr != 3) {
                return 0;
            }
            return 1;
        }
        int test_sixteen_bytes(void) {
            static struct sixteen_bytes s;
            struct sixteen_bytes *s_ptr = &s;
            unsigned long start_addr = (unsigned long)s_ptr;
            unsigned long eight_addr = (unsigned long)&s_ptr->eight;
            unsigned long eight_i_addr = (unsigned long)&s_ptr->eight.i;
            unsigned long eight_c_addr = (unsigned long)&s_ptr->eight.c;
            unsigned long two = (unsigned long)&s_ptr->two;
            unsigned long two_arr = (unsigned long)s_ptr->two.arr;
            unsigned long two_arr0 = (unsigned long)&s_ptr->two.arr[0];
            unsigned long two_arr1 = (unsigned long)&s_ptr->two.arr[1];
            unsigned long two_arr_end = (unsigned long)(&s_ptr->two.arr + 1);
            unsigned long two_end = (unsigned long)(&s_ptr->two + 1);
            unsigned long three = (unsigned long)&s_ptr->three;
            unsigned long three_end = (unsigned long)(&s_ptr->three + 1);
            unsigned long struct_end = (unsigned long)(s_ptr + 1);
            if (start_addr % 4 != 0) {
                return 0;
            }
            if (start_addr != eight_addr) {
                return 0;
            }
            if (start_addr != eight_i_addr) {
                return 0;
            }
            if (eight_c_addr - start_addr != 4) {
                return 0;
            }
            if (two - start_addr != 8) {
                return 0;
            }
            if (two_arr - start_addr != 8) {
                return 0;
            }
            if (two_arr0 - start_addr != 8) {
                return 0;
            }
            if (two_arr1 - start_addr != 9) {
                return 0;
            }
            if (two_arr_end - start_addr != 10) {
                return 0;
            }
            if (two_arr_end != two_end) {
                return 0;
            }
            if (three - start_addr != 10) {
                return 0;
            }
            if (three_end - start_addr != 13) {
                return 0;
            }
            if (struct_end - start_addr != 16) {
                return 0;
            }
            unsigned long eight_i_addr_alt = (unsigned long)&s.eight.i;
            unsigned long eight_c_addr_alt = (unsigned long)&s.eight.c;
            unsigned long two_arr_alt = (unsigned long)s.two.arr;
            unsigned long two_arr1_alt = (unsigned long)&s.two.arr[1];
            unsigned long three_alt = (unsigned long)&s.three;
            if (eight_i_addr_alt != eight_i_addr) {
                return 0;
            }
            if (eight_c_addr_alt != eight_c_addr) {
                return 0;
            }
            if (two_arr_alt != two_arr) {
                return 0;
            }
            if (two_arr1_alt != two_arr1) {
                return 0;
            }
            if (three_alt != three) {
                return 0;
            }
            return 1;
        }
        int test_wonky_array(void) {
            struct wonky wonky_array[5];
            unsigned long array_start = (unsigned long)wonky_array;
            unsigned long elem3 = (unsigned long)(wonky_array + 3);
            unsigned long elem3_arr = (unsigned long)wonky_array[3].arr;
            unsigned long elem2_arr2 = (unsigned long)&wonky_array[2].arr[2];
            unsigned long elem2_arr_end = (unsigned long)(wonky_array[2].arr + 19);
            unsigned long elem4_arr_end = (unsigned long)(wonky_array[4].arr + 19);
            unsigned long array_end = (unsigned long)(wonky_array + 5);
            if (elem3 - array_start != 19 * 3) {
                return 0;
            }
            if (elem3_arr != elem3) {
                return 0;
            }
            if (elem2_arr2 - array_start != 19 * 2 + 2) {
                return 0;
            }
            if (elem2_arr_end != elem3) {
                return 0;
            }
            if (elem4_arr_end != array_end) {
                return 0;
            }
            return 1;
        }
        int test_contains_struct_array_array(void) {
            struct contains_struct_array arr[3];
            unsigned long array_start = (unsigned long)arr;
            unsigned long first_scalar_elem = (unsigned long)(&arr[0].c);
            unsigned long outer0_inner0_i = (unsigned long)(&arr[0].struct_array->i);
            unsigned long outer0_inner0_c = (unsigned long)(&arr->struct_array->c);
            unsigned long outer0_end = (unsigned long)(arr->struct_array + 3);
            unsigned long outer1 = (unsigned long)(&arr[1]);
            unsigned long outer1_arr = (unsigned long)(arr[1].struct_array);
            unsigned long outer1_inner1_i =
                (unsigned long)&(((arr + 1)->struct_array + 1)->i);
            unsigned long outer2_inner0_c =
                (unsigned long)&((arr + 2)->struct_array->c);
            if (array_start % 4 != 0) {
                return 0;
            }
            if (first_scalar_elem != array_start) {
                return 0;
            }
            if (outer0_inner0_i - array_start != 4) {
                return 0;
            }
            if (outer0_inner0_c - array_start != 8) {
                return 0;
            }
            if (outer0_end != outer1) {
                return 0;
            }
            if (outer1_arr - array_start != 32) {
                return 0;
            }
            if (outer1_arr - outer1 != 4) {
                return 0;
            }
            if (outer1_inner1_i - array_start != 40) {
                return 0;
            }
            if (outer2_inner0_c - array_start != 64) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_eightbytes()) {
                return 1;
            }
            if (!test_internal_padding()) {
                return 2;
            }
            if (!test_three_bytes()) {
                return 3;
            }
            if (!test_sixteen_bytes()) {
                return 4;
            }
            if (!test_wonky_array()) {
                return 5;
            }
            if (!test_contains_struct_array_array()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Char
            ├── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [sixteen_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── eight
            │   │   ╰── Type
            │   │       ╰── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three
            │       ╰── Type
            │           ╰── Struct [three_bytes]
            ├── Struct [seven_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three
            │   │   ╰── Type
            │   │       ╰── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two2
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [twentyfour_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── seven
            │   │   ╰── Type
            │   │       ╰── Struct [seven_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sixteen
            │       ╰── Type
            │           ╰── Struct [sixteen_bytes]
            ├── Struct [twenty_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── sixteen
            │   │   ╰── Type
            │   │       ╰── Struct [sixteen_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [wonky]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Char
            ├── Struct [internal_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [contains_struct_array]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── struct_array
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [eight_bytes]
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [test_eightbytes]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ╰── Type
            │       │       ╰── Struct [eight_bytes]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── start_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <149> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <148> AddressOf
            │       │                   ╰── <147> Var [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <162> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <161> AddressOf
            │       │                   ╰── <160> Dot
            │       │                       ├── <158> Var [s]
            │       │                       ╰── i
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <175> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <174> AddressOf
            │       │                   ╰── <173> Dot
            │       │                       ├── <171> Var [s]
            │       │                       ╰── c
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── end_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <190> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <189>  [+]
            │       │                   ├── <185> AddressOf
            │       │                   │   ╰── <184> Var [s]
            │       │                   ╰── <187> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <200>  [!=]
            │       │   │       ├── <197>  [%]
            │       │   │       │   ├── <194> Var [start_addr]
            │       │   │       │   ╰── <196> Constant Int [4]
            │       │   │       ╰── <199> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <201> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <211>  [!=]
            │       │   │       ├── <207> Var [start_addr]
            │       │   │       ╰── <210> Var [i_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <212> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <225>  [!=]
            │       │   │       ├── <222>  [-]
            │       │   │       │   ├── <218> Var [c_addr]
            │       │   │       │   ╰── <221> Var [start_addr]
            │       │   │       ╰── <224> Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <226> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <239>  [!=]
            │       │   │       ├── <236>  [-]
            │       │   │       │   ├── <232> Var [end_addr]
            │       │   │       │   ╰── <235> Var [start_addr]
            │       │   │       ╰── <238> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <240> Constant Int [0]
            │       ╰── Return
            │           ╰── <245> Constant Int [1]
            ├── Function [test_internal_padding]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [internal_padding]
            │       │   ╰── Initializer
            │       │       ╰── <265> FunctionCall [malloc]
            │       │           ╰── <264> SizeOfType
            │       │               ╰── Struct [internal_padding]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── start_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <275> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <274> Var [s_ptr]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <288> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <287> AddressOf
            │       │                   ╰── <286> Arrow
            │       │                       ├── <284> Var [s_ptr]
            │       │                       ╰── c
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <301> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <300> AddressOf
            │       │                   ╰── <299> Arrow
            │       │                       ├── <297> Var [s_ptr]
            │       │                       ╰── d
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── end_ptr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <315> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <314>  [+]
            │       │                   ├── <310> Var [s_ptr]
            │       │                   ╰── <312> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <325>  [!=]
            │       │   │       ├── <322>  [%]
            │       │   │       │   ├── <319> Var [start_addr]
            │       │   │       │   ╰── <321> Constant Int [8]
            │       │   │       ╰── <324> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <326> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <336>  [!=]
            │       │   │       ├── <332> Var [start_addr]
            │       │   │       ╰── <335> Var [c_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <337> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <350>  [!=]
            │       │   │       ├── <347>  [-]
            │       │   │       │   ├── <343> Var [d_addr]
            │       │   │       │   ╰── <346> Var [c_addr]
            │       │   │       ╰── <349> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <351> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <364>  [!=]
            │       │   │       ├── <361>  [-]
            │       │   │       │   ├── <357> Var [end_ptr]
            │       │   │       │   ╰── <360> Var [start_addr]
            │       │   │       ╰── <363> Constant Int [16]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <365> Constant Int [0]
            │       ╰── Return
            │           ╰── <370> Constant Int [1]
            ├── Function [test_three_bytes]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ├── Type
            │       │   │   ╰── Struct [three_bytes]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── start_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <393> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <392> AddressOf
            │       │                   ╰── <391> Var [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <406> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <405> AddressOf
            │       │                   ╰── <404> Dot
            │       │                       ├── <402> Var [s]
            │       │                       ╰── arr
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr0_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <421> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <420> AddressOf
            │       │                   ╰── <419> Subscript
            │       │                       ├── <417> Dot
            │       │                       │   ├── <415> Var [s]
            │       │                       │   ╰── arr
            │       │                       ╰── <418> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr1_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <436> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <435> AddressOf
            │       │                   ╰── <434> Subscript
            │       │                       ├── <432> Dot
            │       │                       │   ├── <430> Var [s]
            │       │                       │   ╰── arr
            │       │                       ╰── <433> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr1_addr_alt
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <452> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <451>  [+]
            │       │                   ├── <447> Dot
            │       │                   │   ├── <445> Var [s]
            │       │                   │   ╰── arr
            │       │                   ╰── <449> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr2_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <467> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <466> AddressOf
            │       │                   ╰── <465> Subscript
            │       │                       ├── <463> Dot
            │       │                       │   ├── <461> Var [s]
            │       │                       │   ╰── arr
            │       │                       ╰── <464> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <484> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <483>  [+]
            │       │                   ├── <479> AddressOf
            │       │                   │   ╰── <478> Dot
            │       │                   │       ├── <476> Var [s]
            │       │                   │       ╰── arr
            │       │                   ╰── <481> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── struct_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <499> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <498>  [+]
            │       │                   ├── <494> AddressOf
            │       │                   │   ╰── <493> Var [s]
            │       │                   ╰── <496> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <507>  [!=]
            │       │   │       ├── <503> Var [start_addr]
            │       │   │       ╰── <506> Var [arr_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <508> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <518>  [!=]
            │       │   │       ├── <514> Var [start_addr]
            │       │   │       ╰── <517> Var [arr0_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <519> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <532>  [!=]
            │       │   │       ├── <529>  [-]
            │       │   │       │   ├── <525> Var [arr1_addr]
            │       │   │       │   ╰── <528> Var [start_addr]
            │       │   │       ╰── <531> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <533> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <543>  [!=]
            │       │   │       ├── <539> Var [arr1_addr]
            │       │   │       ╰── <542> Var [arr1_addr_alt]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <544> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <557>  [!=]
            │       │   │       ├── <554>  [-]
            │       │   │       │   ├── <550> Var [arr2_addr]
            │       │   │       │   ╰── <553> Var [start_addr]
            │       │   │       ╰── <556> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <558> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <571>  [!=]
            │       │   │       ├── <568>  [-]
            │       │   │       │   ├── <564> Var [arr_end]
            │       │   │       │   ╰── <567> Var [start_addr]
            │       │   │       ╰── <570> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <572> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <585>  [!=]
            │       │   │       ├── <582>  [-]
            │       │   │       │   ├── <578> Var [struct_end]
            │       │   │       │   ╰── <581> Var [start_addr]
            │       │   │       ╰── <584> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <586> Constant Int [0]
            │       ╰── Return
            │           ╰── <591> Constant Int [1]
            ├── Function [test_sixteen_bytes]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ├── Type
            │       │   │   ╰── Struct [sixteen_bytes]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [sixteen_bytes]
            │       │   ╰── Initializer
            │       │       ╰── <614> AddressOf
            │       │           ╰── <613> Var [s]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── start_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <624> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <623> Var [s_ptr]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <637> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <636> AddressOf
            │       │                   ╰── <635> Arrow
            │       │                       ├── <633> Var [s_ptr]
            │       │                       ╰── eight
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight_i_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <652> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <651> AddressOf
            │       │                   ╰── <650> Dot
            │       │                       ├── <648> Arrow
            │       │                       │   ├── <646> Var [s_ptr]
            │       │                       │   ╰── eight
            │       │                       ╰── i
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight_c_addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <667> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <666> AddressOf
            │       │                   ╰── <665> Dot
            │       │                       ├── <663> Arrow
            │       │                       │   ├── <661> Var [s_ptr]
            │       │                       │   ╰── eight
            │       │                       ╰── c
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <680> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <679> AddressOf
            │       │                   ╰── <678> Arrow
            │       │                       ├── <676> Var [s_ptr]
            │       │                       ╰── two
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_arr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <694> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <693> Dot
            │       │                   ├── <691> Arrow
            │       │                   │   ├── <689> Var [s_ptr]
            │       │                   │   ╰── two
            │       │                   ╰── arr
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_arr0
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <711> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <710> AddressOf
            │       │                   ╰── <709> Subscript
            │       │                       ├── <707> Dot
            │       │                       │   ├── <705> Arrow
            │       │                       │   │   ├── <703> Var [s_ptr]
            │       │                       │   │   ╰── two
            │       │                       │   ╰── arr
            │       │                       ╰── <708> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_arr1
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <728> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <727> AddressOf
            │       │                   ╰── <726> Subscript
            │       │                       ├── <724> Dot
            │       │                       │   ├── <722> Arrow
            │       │                       │   │   ├── <720> Var [s_ptr]
            │       │                       │   │   ╰── two
            │       │                       │   ╰── arr
            │       │                       ╰── <725> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_arr_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <747> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <746>  [+]
            │       │                   ├── <742> AddressOf
            │       │                   │   ╰── <741> Dot
            │       │                   │       ├── <739> Arrow
            │       │                   │       │   ├── <737> Var [s_ptr]
            │       │                   │       │   ╰── two
            │       │                   │       ╰── arr
            │       │                   ╰── <744> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <764> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <763>  [+]
            │       │                   ├── <759> AddressOf
            │       │                   │   ╰── <758> Arrow
            │       │                   │       ├── <756> Var [s_ptr]
            │       │                   │       ╰── two
            │       │                   ╰── <761> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── three
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <777> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <776> AddressOf
            │       │                   ╰── <775> Arrow
            │       │                       ├── <773> Var [s_ptr]
            │       │                       ╰── three
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── three_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <794> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <793>  [+]
            │       │                   ├── <789> AddressOf
            │       │                   │   ╰── <788> Arrow
            │       │                   │       ├── <786> Var [s_ptr]
            │       │                   │       ╰── three
            │       │                   ╰── <791> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── struct_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <808> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <807>  [+]
            │       │                   ├── <803> Var [s_ptr]
            │       │                   ╰── <805> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <818>  [!=]
            │       │   │       ├── <815>  [%]
            │       │   │       │   ├── <812> Var [start_addr]
            │       │   │       │   ╰── <814> Constant Int [4]
            │       │   │       ╰── <817> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <819> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <829>  [!=]
            │       │   │       ├── <825> Var [start_addr]
            │       │   │       ╰── <828> Var [eight_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <830> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <840>  [!=]
            │       │   │       ├── <836> Var [start_addr]
            │       │   │       ╰── <839> Var [eight_i_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <841> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <854>  [!=]
            │       │   │       ├── <851>  [-]
            │       │   │       │   ├── <847> Var [eight_c_addr]
            │       │   │       │   ╰── <850> Var [start_addr]
            │       │   │       ╰── <853> Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <855> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <868>  [!=]
            │       │   │       ├── <865>  [-]
            │       │   │       │   ├── <861> Var [two]
            │       │   │       │   ╰── <864> Var [start_addr]
            │       │   │       ╰── <867> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <869> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <882>  [!=]
            │       │   │       ├── <879>  [-]
            │       │   │       │   ├── <875> Var [two_arr]
            │       │   │       │   ╰── <878> Var [start_addr]
            │       │   │       ╰── <881> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <883> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <896>  [!=]
            │       │   │       ├── <893>  [-]
            │       │   │       │   ├── <889> Var [two_arr0]
            │       │   │       │   ╰── <892> Var [start_addr]
            │       │   │       ╰── <895> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <897> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <910>  [!=]
            │       │   │       ├── <907>  [-]
            │       │   │       │   ├── <903> Var [two_arr1]
            │       │   │       │   ╰── <906> Var [start_addr]
            │       │   │       ╰── <909> Constant Int [9]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <911> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <924>  [!=]
            │       │   │       ├── <921>  [-]
            │       │   │       │   ├── <917> Var [two_arr_end]
            │       │   │       │   ╰── <920> Var [start_addr]
            │       │   │       ╰── <923> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <925> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <935>  [!=]
            │       │   │       ├── <931> Var [two_arr_end]
            │       │   │       ╰── <934> Var [two_end]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <936> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <949>  [!=]
            │       │   │       ├── <946>  [-]
            │       │   │       │   ├── <942> Var [three]
            │       │   │       │   ╰── <945> Var [start_addr]
            │       │   │       ╰── <948> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <950> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <963>  [!=]
            │       │   │       ├── <960>  [-]
            │       │   │       │   ├── <956> Var [three_end]
            │       │   │       │   ╰── <959> Var [start_addr]
            │       │   │       ╰── <962> Constant Int [13]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <964> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <977>  [!=]
            │       │   │       ├── <974>  [-]
            │       │   │       │   ├── <970> Var [struct_end]
            │       │   │       │   ╰── <973> Var [start_addr]
            │       │   │       ╰── <976> Constant Int [16]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <978> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight_i_addr_alt
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <995> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <994> AddressOf
            │       │                   ╰── <993> Dot
            │       │                       ├── <991> Dot
            │       │                       │   ├── <989> Var [s]
            │       │                       │   ╰── eight
            │       │                       ╰── i
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight_c_addr_alt
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1010> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1009> AddressOf
            │       │                   ╰── <1008> Dot
            │       │                       ├── <1006> Dot
            │       │                       │   ├── <1004> Var [s]
            │       │                       │   ╰── eight
            │       │                       ╰── c
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_arr_alt
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1024> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1023> Dot
            │       │                   ├── <1021> Dot
            │       │                   │   ├── <1019> Var [s]
            │       │                   │   ╰── two
            │       │                   ╰── arr
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two_arr1_alt
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1041> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1040> AddressOf
            │       │                   ╰── <1039> Subscript
            │       │                       ├── <1037> Dot
            │       │                       │   ├── <1035> Dot
            │       │                       │   │   ├── <1033> Var [s]
            │       │                       │   │   ╰── two
            │       │                       │   ╰── arr
            │       │                       ╰── <1038> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── three_alt
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1054> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1053> AddressOf
            │       │                   ╰── <1052> Dot
            │       │                       ├── <1050> Var [s]
            │       │                       ╰── three
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1062>  [!=]
            │       │   │       ├── <1058> Var [eight_i_addr_alt]
            │       │   │       ╰── <1061> Var [eight_i_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1063> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1073>  [!=]
            │       │   │       ├── <1069> Var [eight_c_addr_alt]
            │       │   │       ╰── <1072> Var [eight_c_addr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1074> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1084>  [!=]
            │       │   │       ├── <1080> Var [two_arr_alt]
            │       │   │       ╰── <1083> Var [two_arr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1085> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1095>  [!=]
            │       │   │       ├── <1091> Var [two_arr1_alt]
            │       │   │       ╰── <1094> Var [two_arr1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1096> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1106>  [!=]
            │       │   │       ├── <1102> Var [three_alt]
            │       │   │       ╰── <1105> Var [three]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1107> Constant Int [0]
            │       ╰── Return
            │           ╰── <1112> Constant Int [1]
            ├── Function [test_wonky_array]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── wonky_array
            │       │   ╰── Type
            │       │       ╰── Array
            │       │           ├── 5
            │       │           ╰── Struct [wonky]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── array_start
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1136> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1135> Var [wonky_array]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem3
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1150> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1149>  [+]
            │       │                   ├── <1145> Var [wonky_array]
            │       │                   ╰── <1147> Constant Int [3]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem3_arr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1164> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1163> Dot
            │       │                   ├── <1161> Subscript
            │       │                   │   ├── <1159> Var [wonky_array]
            │       │                   │   ╰── <1160> Constant Int [3]
            │       │                   ╰── arr
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem2_arr2
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1181> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1180> AddressOf
            │       │                   ╰── <1179> Subscript
            │       │                       ├── <1177> Dot
            │       │                       │   ├── <1175> Subscript
            │       │                       │   │   ├── <1173> Var [wonky_array]
            │       │                       │   │   ╰── <1174> Constant Int [2]
            │       │                       │   ╰── arr
            │       │                       ╰── <1178> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem2_arr_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1199> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1198>  [+]
            │       │                   ├── <1194> Dot
            │       │                   │   ├── <1192> Subscript
            │       │                   │   │   ├── <1190> Var [wonky_array]
            │       │                   │   │   ╰── <1191> Constant Int [2]
            │       │                   │   ╰── arr
            │       │                   ╰── <1196> Constant Int [19]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem4_arr_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1217> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1216>  [+]
            │       │                   ├── <1212> Dot
            │       │                   │   ├── <1210> Subscript
            │       │                   │   │   ├── <1208> Var [wonky_array]
            │       │                   │   │   ╰── <1209> Constant Int [4]
            │       │                   │   ╰── arr
            │       │                   ╰── <1214> Constant Int [19]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── array_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1231> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1230>  [+]
            │       │                   ├── <1226> Var [wonky_array]
            │       │                   ╰── <1228> Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1245>  [!=]
            │       │   │       ├── <1239>  [-]
            │       │   │       │   ├── <1235> Var [elem3]
            │       │   │       │   ╰── <1238> Var [array_start]
            │       │   │       ╰── <1244>  [*]
            │       │   │           ├── <1241> Constant Int [19]
            │       │   │           ╰── <1243> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1246> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1256>  [!=]
            │       │   │       ├── <1252> Var [elem3_arr]
            │       │   │       ╰── <1255> Var [elem3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1257> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1276>  [!=]
            │       │   │       ├── <1267>  [-]
            │       │   │       │   ├── <1263> Var [elem2_arr2]
            │       │   │       │   ╰── <1266> Var [array_start]
            │       │   │       ╰── <1275>  [+]
            │       │   │           ├── <1272>  [*]
            │       │   │           │   ├── <1269> Constant Int [19]
            │       │   │           │   ╰── <1271> Constant Int [2]
            │       │   │           ╰── <1274> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1277> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1287>  [!=]
            │       │   │       ├── <1283> Var [elem2_arr_end]
            │       │   │       ╰── <1286> Var [elem3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1288> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1298>  [!=]
            │       │   │       ├── <1294> Var [elem4_arr_end]
            │       │   │       ╰── <1297> Var [array_end]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1299> Constant Int [0]
            │       ╰── Return
            │           ╰── <1304> Constant Int [1]
            ├── Function [test_contains_struct_array_array]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ╰── Type
            │       │       ╰── Array
            │       │           ├── 3
            │       │           ╰── Struct [contains_struct_array]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── array_start
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1328> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1327> Var [arr]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── first_scalar_elem
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1344> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1343> AddressOf
            │       │                   ╰── <1341> Dot
            │       │                       ├── <1339> Subscript
            │       │                       │   ├── <1337> Var [arr]
            │       │                       │   ╰── <1338> Constant Int [0]
            │       │                       ╰── c
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer0_inner0_i
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1362> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1361> AddressOf
            │       │                   ╰── <1359> Arrow
            │       │                       ├── <1357> Dot
            │       │                       │   ├── <1355> Subscript
            │       │                       │   │   ├── <1353> Var [arr]
            │       │                       │   │   ╰── <1354> Constant Int [0]
            │       │                       │   ╰── struct_array
            │       │                       ╰── i
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer0_inner0_c
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1378> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1377> AddressOf
            │       │                   ╰── <1375> Arrow
            │       │                       ├── <1373> Arrow
            │       │                       │   ├── <1371> Var [arr]
            │       │                       │   ╰── struct_array
            │       │                       ╰── c
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer0_end
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1394> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1393>  [+]
            │       │                   ├── <1389> Arrow
            │       │                   │   ├── <1387> Var [arr]
            │       │                   │   ╰── struct_array
            │       │                   ╰── <1391> Constant Int [3]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer1
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1408> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1407> AddressOf
            │       │                   ╰── <1405> Subscript
            │       │                       ├── <1403> Var [arr]
            │       │                       ╰── <1404> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer1_arr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1423> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1422> Dot
            │       │                   ├── <1419> Subscript
            │       │                   │   ├── <1417> Var [arr]
            │       │                   │   ╰── <1418> Constant Int [1]
            │       │                   ╰── struct_array
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer1_inner1_i
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1447> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1446> AddressOf
            │       │                   ╰── <1445> Arrow
            │       │                       ├── <1442>  [+]
            │       │                       │   ├── <1438> Arrow
            │       │                       │   │   ├── <1436>  [+]
            │       │                       │   │   │   ├── <1432> Var [arr]
            │       │                       │   │   │   ╰── <1434> Constant Int [1]
            │       │                       │   │   ╰── struct_array
            │       │                       │   ╰── <1440> Constant Int [1]
            │       │                       ╰── i
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer2_inner0_c
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <1467> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <1466> AddressOf
            │       │                   ╰── <1465> Arrow
            │       │                       ├── <1462> Arrow
            │       │                       │   ├── <1460>  [+]
            │       │                       │   │   ├── <1456> Var [arr]
            │       │                       │   │   ╰── <1458> Constant Int [2]
            │       │                       │   ╰── struct_array
            │       │                       ╰── c
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1477>  [!=]
            │       │   │       ├── <1474>  [%]
            │       │   │       │   ├── <1471> Var [array_start]
            │       │   │       │   ╰── <1473> Constant Int [4]
            │       │   │       ╰── <1476> Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1478> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1488>  [!=]
            │       │   │       ├── <1484> Var [first_scalar_elem]
            │       │   │       ╰── <1487> Var [array_start]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1489> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1502>  [!=]
            │       │   │       ├── <1499>  [-]
            │       │   │       │   ├── <1495> Var [outer0_inner0_i]
            │       │   │       │   ╰── <1498> Var [array_start]
            │       │   │       ╰── <1501> Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1503> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1516>  [!=]
            │       │   │       ├── <1513>  [-]
            │       │   │       │   ├── <1509> Var [outer0_inner0_c]
            │       │   │       │   ╰── <1512> Var [array_start]
            │       │   │       ╰── <1515> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1517> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1527>  [!=]
            │       │   │       ├── <1523> Var [outer0_end]
            │       │   │       ╰── <1526> Var [outer1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1528> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1541>  [!=]
            │       │   │       ├── <1538>  [-]
            │       │   │       │   ├── <1534> Var [outer1_arr]
            │       │   │       │   ╰── <1537> Var [array_start]
            │       │   │       ╰── <1540> Constant Int [32]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1542> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1555>  [!=]
            │       │   │       ├── <1552>  [-]
            │       │   │       │   ├── <1548> Var [outer1_arr]
            │       │   │       │   ╰── <1551> Var [outer1]
            │       │   │       ╰── <1554> Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1556> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1569>  [!=]
            │       │   │       ├── <1566>  [-]
            │       │   │       │   ├── <1562> Var [outer1_inner1_i]
            │       │   │       │   ╰── <1565> Var [array_start]
            │       │   │       ╰── <1568> Constant Int [40]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1570> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1583>  [!=]
            │       │   │       ├── <1580>  [-]
            │       │   │       │   ├── <1576> Var [outer2_inner0_c]
            │       │   │       │   ╰── <1579> Var [array_start]
            │       │   │       ╰── <1582> Constant Int [64]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1584> Constant Int [0]
            │       ╰── Return
            │           ╰── <1589> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1601> Unary [!]
                    │   │       ╰── <1600> FunctionCall [test_eightbytes]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1602> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1610> Unary [!]
                    │   │       ╰── <1609> FunctionCall [test_internal_padding]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1611> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1619> Unary [!]
                    │   │       ╰── <1618> FunctionCall [test_three_bytes]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1620> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1628> Unary [!]
                    │   │       ╰── <1627> FunctionCall [test_sixteen_bytes]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1629> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1637> Unary [!]
                    │   │       ╰── <1636> FunctionCall [test_wonky_array]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1638> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1646> Unary [!]
                    │   │       ╰── <1645> FunctionCall [test_contains_struct_array_array]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1647> Constant Int [6]
                    ╰── Return
                        ╰── <1652> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_size_and_offset_calculations_sizeof_exps() {
    let src = r#"
        struct eight_bytes {
            int i;
            char c;
        };
        struct two_bytes {
            char arr[2];
        };
        struct three_bytes {
            char arr[3];
        };
        struct sixteen_bytes {
            struct eight_bytes eight;
            struct two_bytes two;
            struct three_bytes three;
        };
        struct seven_bytes {
            struct two_bytes two;
            struct three_bytes three;
            struct two_bytes two2;
        };
        struct twentyfour_bytes {
            struct seven_bytes seven;
            struct sixteen_bytes sixteen;
        };
        struct twenty_bytes {
            struct sixteen_bytes sixteen;
            struct two_bytes two;
        };
        struct wonky {
            char arr[19];
        };
        struct internal_padding {
            char c;
            double d;
        };
        struct contains_struct_array {
            char c;
            struct eight_bytes struct_array[3];
        };
        
        struct twenty_bytes *get_twentybyte_ptr(void) {
            return 0;
        }
        int main(void) {
            struct contains_struct_array arr_struct;
            if (sizeof arr_struct.struct_array[2] !=
                8) {
                return 1;
            }
            static struct twentyfour_bytes twentyfour;
            if (sizeof twentyfour.seven.two2 != 2) {
                return 2;
            }
            if (sizeof get_twentybyte_ptr()->sixteen.three != 3) {
                return 3;
            }
            if (sizeof get_twentybyte_ptr()->sixteen != 16) {
                return 4;
            }
            if (sizeof twentyfour.seven != 7) {
                return 5;
            }
            if (sizeof twentyfour != 24) {
                return 6;
            }
            if (sizeof *get_twentybyte_ptr() != 20) {
                return 7;
            }
            if (sizeof *((struct wonky *)0) != 19) {
                return 8;
            }
            extern struct internal_padding struct_array[4];
            if (sizeof struct_array[0] != 16) {
                return 9;
            }
            if (sizeof arr_struct != 28) {
                return 10;
            }
            if (sizeof struct_array != 64) {
                return 11;
            }
            if (sizeof arr_struct.struct_array != 24) {
                return 12;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Char
            ├── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [sixteen_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── eight
            │   │   ╰── Type
            │   │       ╰── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three
            │       ╰── Type
            │           ╰── Struct [three_bytes]
            ├── Struct [seven_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three
            │   │   ╰── Type
            │   │       ╰── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two2
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [twentyfour_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── seven
            │   │   ╰── Type
            │   │       ╰── Struct [seven_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sixteen
            │       ╰── Type
            │           ╰── Struct [sixteen_bytes]
            ├── Struct [twenty_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── sixteen
            │   │   ╰── Type
            │   │       ╰── Struct [sixteen_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [wonky]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Char
            ├── Struct [internal_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [contains_struct_array]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── struct_array
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [eight_bytes]
            ├── Function [get_twentybyte_ptr]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <128> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr_struct
                    │   ╰── Type
                    │       ╰── Struct [contains_struct_array]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <151>  [!=]
                    │   │       ├── <148> SizeOfExpr
                    │   │       │   ╰── <147> Subscript
                    │   │       │       ├── <145> Dot
                    │   │       │       │   ├── <143> Var [arr_struct]
                    │   │       │       │   ╰── struct_array
                    │   │       │       ╰── <146> Constant Int [2]
                    │   │       ╰── <150> Constant Int [8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <152> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── twentyfour
                    │   ├── Type
                    │   │   ╰── Struct [twentyfour_bytes]
                    │   ╰── Static
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <172>  [!=]
                    │   │       ├── <169> SizeOfExpr
                    │   │       │   ╰── <168> Dot
                    │   │       │       ├── <166> Dot
                    │   │       │       │   ├── <164> Var [twentyfour]
                    │   │       │       │   ╰── seven
                    │   │       │       ╰── two2
                    │   │       ╰── <171> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <173> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <187>  [!=]
                    │   │       ├── <184> SizeOfExpr
                    │   │       │   ╰── <183> Dot
                    │   │       │       ├── <181> Arrow
                    │   │       │       │   ├── <179> FunctionCall [get_twentybyte_ptr]
                    │   │       │       │   ╰── sixteen
                    │   │       │       ╰── three
                    │   │       ╰── <186> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <188> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <200>  [!=]
                    │   │       ├── <197> SizeOfExpr
                    │   │       │   ╰── <196> Arrow
                    │   │       │       ├── <194> FunctionCall [get_twentybyte_ptr]
                    │   │       │       ╰── sixteen
                    │   │       ╰── <199> Constant Int [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <201> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <213>  [!=]
                    │   │       ├── <210> SizeOfExpr
                    │   │       │   ╰── <209> Dot
                    │   │       │       ├── <207> Var [twentyfour]
                    │   │       │       ╰── seven
                    │   │       ╰── <212> Constant Int [7]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <214> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <224>  [!=]
                    │   │       ├── <221> SizeOfExpr
                    │   │       │   ╰── <220> Var [twentyfour]
                    │   │       ╰── <223> Constant Int [24]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <225> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <236>  [!=]
                    │   │       ├── <233> SizeOfExpr
                    │   │       │   ╰── <232> Dereference
                    │   │       │       ╰── <231> FunctionCall [get_twentybyte_ptr]
                    │   │       ╰── <235> Constant Int [20]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <237> Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <253>  [!=]
                    │   │       ├── <250> SizeOfExpr
                    │   │       │   ╰── <249> Dereference
                    │   │       │       ╰── <248> Cast
                    │   │       │           ├── Target
                    │   │       │           │   ╰── Pointer
                    │   │       │           │       ╰── Struct [wonky]
                    │   │       │           ╰── Expression
                    │   │       │               ╰── <246> Constant Int [0]
                    │   │       ╰── <252> Constant Int [19]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <254> Constant Int [8]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── struct_array
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Struct [internal_padding]
                    │   ╰── Extern
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <275>  [!=]
                    │   │       ├── <272> SizeOfExpr
                    │   │       │   ╰── <271> Subscript
                    │   │       │       ├── <269> Var [struct_array]
                    │   │       │       ╰── <270> Constant Int [0]
                    │   │       ╰── <274> Constant Int [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <276> Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <286>  [!=]
                    │   │       ├── <283> SizeOfExpr
                    │   │       │   ╰── <282> Var [arr_struct]
                    │   │       ╰── <285> Constant Int [28]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <287> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <297>  [!=]
                    │   │       ├── <294> SizeOfExpr
                    │   │       │   ╰── <293> Var [struct_array]
                    │   │       ╰── <296> Constant Int [64]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <298> Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <310>  [!=]
                    │   │       ├── <307> SizeOfExpr
                    │   │       │   ╰── <306> Dot
                    │   │       │       ├── <304> Var [arr_struct]
                    │   │       │       ╰── struct_array
                    │   │       ╰── <309> Constant Int [24]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <311> Constant Int [12]
                    ╰── Return
                        ╰── <316> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_size_and_offset_calculations_sizeof_type() {
    let src = r#"
        struct eight_bytes {
            int i;
            char c;
        };
        struct two_bytes {
            char arr[2];
        };
        struct three_bytes {
            char arr[3];
        };
        struct sixteen_bytes {
            struct eight_bytes eight;
            struct two_bytes two;
            struct three_bytes three;
        };
        struct seven_bytes {
            struct two_bytes two;
            struct three_bytes three;
            struct two_bytes two2;
        };
        struct twentyfour_bytes {
            struct seven_bytes seven;
            struct sixteen_bytes sixteen;
        };
        struct twenty_bytes {
            struct sixteen_bytes sixteen;
            struct two_bytes two;
        };
        struct wonky {
            char arr[19];
        };
        struct internal_padding {
            char c;
            double d;
        };
        struct contains_struct_array {
            char c;
            struct eight_bytes struct_array[3];
        };
        
        int main(void) {
            if (sizeof(struct eight_bytes) != 8) {
                return 1;
            }
            if (sizeof(struct two_bytes) != 2) {
                return 2;
            }
            if (sizeof(struct three_bytes) != 3) {
                return 3;
            }
            if (sizeof(struct sixteen_bytes) != 16) {
                return 4;
            }
            if (sizeof(struct seven_bytes) != 7) {
                return 5;
            }
            if (sizeof(struct twentyfour_bytes) != 24) {
                return 6;
            }
            if (sizeof(struct twenty_bytes) != 20) {
                return 7;
            }
            if (sizeof(struct wonky) != 19) {
                return 8;
            }
            if (sizeof(struct internal_padding) != 16) {
                return 9;
            }
            if (sizeof(struct contains_struct_array) != 28) {
                return 10;
            }
            if (sizeof(struct internal_padding[4]) != 64) {
                return 11;
            }
            if (sizeof(struct wonky[2]) != 38) {
                return 12;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Char
            ├── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [sixteen_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── eight
            │   │   ╰── Type
            │   │       ╰── Struct [eight_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── three
            │       ╰── Type
            │           ╰── Struct [three_bytes]
            ├── Struct [seven_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── two
            │   │   ╰── Type
            │   │       ╰── Struct [two_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── three
            │   │   ╰── Type
            │   │       ╰── Struct [three_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two2
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [twentyfour_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── seven
            │   │   ╰── Type
            │   │       ╰── Struct [seven_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── sixteen
            │       ╰── Type
            │           ╰── Struct [sixteen_bytes]
            ├── Struct [twenty_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── sixteen
            │   │   ╰── Type
            │   │       ╰── Struct [sixteen_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── two
            │       ╰── Type
            │           ╰── Struct [two_bytes]
            ├── Struct [wonky]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Char
            ├── Struct [internal_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [contains_struct_array]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── struct_array
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Struct [eight_bytes]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <131>  [!=]
                    │   │       ├── <128> SizeOfType
                    │   │       │   ╰── Struct [eight_bytes]
                    │   │       ╰── <130> Constant Int [8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <132> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <143>  [!=]
                    │   │       ├── <140> SizeOfType
                    │   │       │   ╰── Struct [two_bytes]
                    │   │       ╰── <142> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <144> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <155>  [!=]
                    │   │       ├── <152> SizeOfType
                    │   │       │   ╰── Struct [three_bytes]
                    │   │       ╰── <154> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <156> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <167>  [!=]
                    │   │       ├── <164> SizeOfType
                    │   │       │   ╰── Struct [sixteen_bytes]
                    │   │       ╰── <166> Constant Int [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <168> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <179>  [!=]
                    │   │       ├── <176> SizeOfType
                    │   │       │   ╰── Struct [seven_bytes]
                    │   │       ╰── <178> Constant Int [7]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <180> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <191>  [!=]
                    │   │       ├── <188> SizeOfType
                    │   │       │   ╰── Struct [twentyfour_bytes]
                    │   │       ╰── <190> Constant Int [24]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <192> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <203>  [!=]
                    │   │       ├── <200> SizeOfType
                    │   │       │   ╰── Struct [twenty_bytes]
                    │   │       ╰── <202> Constant Int [20]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <204> Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <215>  [!=]
                    │   │       ├── <212> SizeOfType
                    │   │       │   ╰── Struct [wonky]
                    │   │       ╰── <214> Constant Int [19]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <216> Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <227>  [!=]
                    │   │       ├── <224> SizeOfType
                    │   │       │   ╰── Struct [internal_padding]
                    │   │       ╰── <226> Constant Int [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <228> Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <239>  [!=]
                    │   │       ├── <236> SizeOfType
                    │   │       │   ╰── Struct [contains_struct_array]
                    │   │       ╰── <238> Constant Int [28]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <240> Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <254>  [!=]
                    │   │       ├── <251> SizeOfType
                    │   │       │   ╰── Array
                    │   │       │       ├── 4
                    │   │       │       ╰── Struct [internal_padding]
                    │   │       ╰── <253> Constant Int [64]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <255> Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <269>  [!=]
                    │   │       ├── <266> SizeOfType
                    │   │       │   ╰── Array
                    │   │       │       ├── 2
                    │   │       │       ╰── Struct [wonky]
                    │   │       ╰── <268> Constant Int [38]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <270> Constant Int [12]
                    ╰── Return
                        ╰── <275> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_smoke_tests_simple() {
    let src = r#"
        struct pair {
            int a;
            int b;
        };
        int main(void) {
            struct pair x = {1, 2};
            if (x.a != 1 || x.b != 2) {
                return 1;
            }
            struct pair *x_ptr = &x;
            if (x_ptr->a != 1 || x_ptr->b != 2) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [pair]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <20> Constant Int [1]
                    │           ╰── <22> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <41>  [||]
                    │   │       ├── <32>  [!=]
                    │   │       │   ├── <29> Dot
                    │   │       │   │   ├── <27> Var [x]
                    │   │       │   │   ╰── a
                    │   │       │   ╰── <31> Constant Int [1]
                    │   │       ╰── <40>  [!=]
                    │   │           ├── <37> Dot
                    │   │           │   ├── <35> Var [x]
                    │   │           │   ╰── b
                    │   │           ╰── <39> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <42> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Struct [pair]
                    │   ╰── Initializer
                    │       ╰── <55> AddressOf
                    │           ╰── <54> Var [x]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <73>  [||]
                    │   │       ├── <64>  [!=]
                    │   │       │   ├── <61> Arrow
                    │   │       │   │   ├── <59> Var [x_ptr]
                    │   │       │   │   ╰── a
                    │   │       │   ╰── <63> Constant Int [1]
                    │   │       ╰── <72>  [!=]
                    │   │           ├── <69> Arrow
                    │   │           │   ├── <67> Var [x_ptr]
                    │   │           │   ╰── b
                    │   │           ╰── <71> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <74> Constant Int [2]
                    ╰── Return
                        ╰── <79> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_smoke_tests_static_vs_auto() {
    let src = r#"
        struct s {
            int a;
            int b;
        };
        int main(void) {
            for (int i = 0; i < 10; i = i + 1) {
                struct s autom = {1, 2};
                static struct s stat = {1, 2};
                autom.a = autom.a + 1;
                autom.b = autom.b + 1;
                stat.a = stat.a + 1;
                stat.b = stat.b + 1;
                if (i == 9) {
                    if (stat.a != 11 || stat.b != 12) {
                        return 1;
                    }
                    if (autom.a != 2 || autom.b != 3) {
                        return 2;
                    }
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <19> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <27>  [<]
                    │   │       ├── <24> Var [i]
                    │   │       ╰── <26> Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <36> Assign [=]
                    │   │       ├── <29> Var [i]
                    │   │       ╰── <35>  [+]
                    │   │           ├── <32> Var [i]
                    │   │           ╰── <34> Constant Int [1]
                    │   ╰── Block
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── autom
                    │       │   ├── Type
                    │       │   │   ╰── Struct [s]
                    │       │   ╰── Initializer
                    │       │       ╰── Compound
                    │       │           ├── <41> Constant Int [1]
                    │       │           ╰── <43> Constant Int [2]
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── stat
                    │       │   ├── Type
                    │       │   │   ╰── Struct [s]
                    │       │   ├── Initializer
                    │       │   │   ╰── Compound
                    │       │   │       ├── <52> Constant Int [1]
                    │       │   │       ╰── <54> Constant Int [2]
                    │       │   ╰── Static
                    │       ├── <70> Assign [=]
                    │       │   ├── <61> Dot
                    │       │   │   ├── <59> Var [autom]
                    │       │   │   ╰── a
                    │       │   ╰── <69>  [+]
                    │       │       ├── <66> Dot
                    │       │       │   ├── <64> Var [autom]
                    │       │       │   ╰── a
                    │       │       ╰── <68> Constant Int [1]
                    │       ├── <84> Assign [=]
                    │       │   ├── <75> Dot
                    │       │   │   ├── <73> Var [autom]
                    │       │   │   ╰── b
                    │       │   ╰── <83>  [+]
                    │       │       ├── <80> Dot
                    │       │       │   ├── <78> Var [autom]
                    │       │       │   ╰── b
                    │       │       ╰── <82> Constant Int [1]
                    │       ├── <98> Assign [=]
                    │       │   ├── <89> Dot
                    │       │   │   ├── <87> Var [stat]
                    │       │   │   ╰── a
                    │       │   ╰── <97>  [+]
                    │       │       ├── <94> Dot
                    │       │       │   ├── <92> Var [stat]
                    │       │       │   ╰── a
                    │       │       ╰── <96> Constant Int [1]
                    │       ├── <112> Assign [=]
                    │       │   ├── <103> Dot
                    │       │   │   ├── <101> Var [stat]
                    │       │   │   ╰── b
                    │       │   ╰── <111>  [+]
                    │       │       ├── <108> Dot
                    │       │       │   ├── <106> Var [stat]
                    │       │       │   ╰── b
                    │       │       ╰── <110> Constant Int [1]
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <118>  [==]
                    │           │       ├── <115> Var [i]
                    │           │       ╰── <117> Constant Int [9]
                    │           ╰── Then
                    │               ╰── Block
                    │                   ├── If
                    │                   │   ├── Condition
                    │                   │   │   ╰── <134>  [||]
                    │                   │   │       ├── <125>  [!=]
                    │                   │   │       │   ├── <122> Dot
                    │                   │   │       │   │   ├── <120> Var [stat]
                    │                   │   │       │   │   ╰── a
                    │                   │   │       │   ╰── <124> Constant Int [11]
                    │                   │   │       ╰── <133>  [!=]
                    │                   │   │           ├── <130> Dot
                    │                   │   │           │   ├── <128> Var [stat]
                    │                   │   │           │   ╰── b
                    │                   │   │           ╰── <132> Constant Int [12]
                    │                   │   ╰── Then
                    │                   │       ╰── Block
                    │                   │           ╰── Return
                    │                   │               ╰── <135> Constant Int [1]
                    │                   ╰── If
                    │                       ├── Condition
                    │                       │   ╰── <155>  [||]
                    │                       │       ├── <146>  [!=]
                    │                       │       │   ├── <143> Dot
                    │                       │       │   │   ├── <141> Var [autom]
                    │                       │       │   │   ╰── a
                    │                       │       │   ╰── <145> Constant Int [2]
                    │                       │       ╰── <154>  [!=]
                    │                       │           ├── <151> Dot
                    │                       │           │   ├── <149> Var [autom]
                    │                       │           │   ╰── b
                    │                       │           ╰── <153> Constant Int [3]
                    │                       ╰── Then
                    │                           ╰── Block
                    │                               ╰── Return
                    │                                   ╰── <156> Constant Int [2]
                    ╰── Return
                        ╰── <167> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_copy_struct() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void *malloc(unsigned long size);
        struct small {
            int a;
            long b;
        };
        struct s {
            char arr[3];
            struct small inner;
        };
        struct with_end_padding {
            int a;
            int b;
            char c;
        };
        int test_auto(void) {
            struct s x = {"ab", {-1, 2}};
            struct s y = {"x", {1}};
            y = x;
            if (strcmp(y.arr, "ab") || y.inner.a != -1 || y.inner.b != 2) {
                return 0;
            }
            y.inner.a = 20;
            if (y.inner.a != 20 || x.inner.a != -1) {
                return 0;
            }
            return 1;
        }
        int test_static(void) {
            static struct s x = {"ab", {1, 2}};
            static struct s y;
            y = x;
            if (strcmp(y.arr, "ab") || y.inner.a != 1 || y.inner.b != 2) {
                return 0;
            }
            return 1;
        }
        struct wonky {
            char arr[7];
        };
        int test_wonky_size(void) {
            struct wonky x = {"abcdef"};
            static struct wonky y;
            y = x;
            if (strcmp(y.arr, "abcdef")) {
                return 0;
            }
            return 1;
        }
        int true_flag(void) {
            return 1;
        }
        int test_conditional(void) {
            static struct s x = {"xy", {1234, 5678}};
            struct s y = {"!", {-10}};
            struct s z;
            z = true_flag() ? x : y;
            if (strcmp(z.arr, "xy") || z.inner.a != 1234 || z.inner.b != 5678) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto()) {
                return 1;
            }
            if (!test_static()) {
                return 2;
            }
            if (!test_wonky_size()) {
                return 3;
            }
            if (!test_conditional()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [small]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Long
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── inner
            │       ╰── Type
            │           ╰── Struct [small]
            ├── Struct [with_end_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Function [test_auto]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <75> "ab"
            │       │           ╰── Compound
            │       │               ├── <79> Unary [-]
            │       │               │   ╰── <78> Constant Int [1]
            │       │               ╰── <81> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <90> "x"
            │       │           ╰── Compound
            │       │               ╰── <92> Constant Int [1]
            │       ├── <102> Assign [=]
            │       │   ├── <98> Var [y]
            │       │   ╰── <101> Var [x]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <134>  [||]
            │       │   │       ├── <123>  [||]
            │       │   │       │   ├── <110> FunctionCall [strcmp]
            │       │   │       │   │   ├── <108> Dot
            │       │   │       │   │   │   ├── <106> Var [y]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <109> "ab"
            │       │   │       │   ╰── <122>  [!=]
            │       │   │       │       ├── <117> Dot
            │       │   │       │       │   ├── <115> Dot
            │       │   │       │       │   │   ├── <113> Var [y]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <121> Unary [-]
            │       │   │       │           ╰── <120> Constant Int [1]
            │       │   │       ╰── <133>  [!=]
            │       │   │           ├── <130> Dot
            │       │   │           │   ├── <128> Dot
            │       │   │           │   │   ├── <126> Var [y]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <132> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <135> Constant Int [0]
            │       ├── <148> Assign [=]
            │       │   ├── <145> Dot
            │       │   │   ├── <143> Dot
            │       │   │   │   ├── <141> Var [y]
            │       │   │   │   ╰── inner
            │       │   │   ╰── a
            │       │   ╰── <147> Constant Int [20]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <171>  [||]
            │       │   │       ├── <158>  [!=]
            │       │   │       │   ├── <155> Dot
            │       │   │       │   │   ├── <153> Dot
            │       │   │       │   │   │   ├── <151> Var [y]
            │       │   │       │   │   │   ╰── inner
            │       │   │       │   │   ╰── a
            │       │   │       │   ╰── <157> Constant Int [20]
            │       │   │       ╰── <170>  [!=]
            │       │   │           ├── <165> Dot
            │       │   │           │   ├── <163> Dot
            │       │   │           │   │   ├── <161> Var [x]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── a
            │       │   │           ╰── <169> Unary [-]
            │       │   │               ╰── <168> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <172> Constant Int [0]
            │       ╰── Return
            │           ╰── <177> Constant Int [1]
            ├── Function [test_static]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── <191> "ab"
            │       │   │       ╰── Compound
            │       │   │           ├── <193> Constant Int [1]
            │       │   │           ╰── <195> Constant Int [2]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Static
            │       ├── <211> Assign [=]
            │       │   ├── <207> Var [y]
            │       │   ╰── <210> Var [x]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <241>  [||]
            │       │   │       ├── <230>  [||]
            │       │   │       │   ├── <219> FunctionCall [strcmp]
            │       │   │       │   │   ├── <217> Dot
            │       │   │       │   │   │   ├── <215> Var [y]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <218> "ab"
            │       │   │       │   ╰── <229>  [!=]
            │       │   │       │       ├── <226> Dot
            │       │   │       │       │   ├── <224> Dot
            │       │   │       │       │   │   ├── <222> Var [y]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <228> Constant Int [1]
            │       │   │       ╰── <240>  [!=]
            │       │   │           ├── <237> Dot
            │       │   │           │   ├── <235> Dot
            │       │   │           │   │   ├── <233> Var [y]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <239> Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <242> Constant Int [0]
            │       ╰── Return
            │           ╰── <247> Constant Int [1]
            ├── Struct [wonky]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 7
            │               ╰── Char
            ├── Function [test_wonky_size]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [wonky]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <269> "abcdef"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Struct [wonky]
            │       │   ╰── Static
            │       ├── <284> Assign [=]
            │       │   ├── <280> Var [y]
            │       │   ╰── <283> Var [x]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <292> FunctionCall [strcmp]
            │       │   │       ├── <290> Dot
            │       │   │       │   ├── <288> Var [y]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <291> "abcdef"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <293> Constant Int [0]
            │       ╰── Return
            │           ╰── <298> Constant Int [1]
            ├── Function [true_flag]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <307> Constant Int [1]
            ├── Function [test_conditional]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── <321> "xy"
            │       │   │       ╰── Compound
            │       │   │           ├── <323> Constant Int [1234]
            │       │   │           ╰── <325> Constant Int [5678]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <334> "!"
            │       │           ╰── Compound
            │       │               ╰── <338> Unary [-]
            │       │                   ╰── <337> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── z
            │       │   ╰── Type
            │       │       ╰── Struct [s]
            │       ├── <358> Assign [=]
            │       │   ├── <349> Var [z]
            │       │   ╰── <357> Conditional [?]
            │       │       ├── <352> FunctionCall [true_flag]
            │       │       ├── Then
            │       │       │   ╰── <354> Var [x]
            │       │       ╰── Else
            │       │           ╰── <356> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <388>  [||]
            │       │   │       ├── <377>  [||]
            │       │   │       │   ├── <366> FunctionCall [strcmp]
            │       │   │       │   │   ├── <364> Dot
            │       │   │       │   │   │   ├── <362> Var [z]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <365> "xy"
            │       │   │       │   ╰── <376>  [!=]
            │       │   │       │       ├── <373> Dot
            │       │   │       │       │   ├── <371> Dot
            │       │   │       │       │   │   ├── <369> Var [z]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <375> Constant Int [1234]
            │       │   │       ╰── <387>  [!=]
            │       │   │           ├── <384> Dot
            │       │   │           │   ├── <382> Dot
            │       │   │           │   │   ├── <380> Var [z]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <386> Constant Int [5678]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <389> Constant Int [0]
            │       ╰── Return
            │           ╰── <394> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <406> Unary [!]
                    │   │       ╰── <405> FunctionCall [test_auto]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <407> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <415> Unary [!]
                    │   │       ╰── <414> FunctionCall [test_static]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <416> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <424> Unary [!]
                    │   │       ╰── <423> FunctionCall [test_wonky_size]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <425> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <433> Unary [!]
                    │   │       ╰── <432> FunctionCall [test_conditional]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <434> Constant Int [4]
                    ╰── Return
                        ╰── <439> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_copy_struct_through_pointer() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void *malloc(unsigned long size);
        struct small {
            int a;
            long b;
        };
        struct s {
            char arr[3];
            struct small inner;
        };
        struct with_end_padding {
            int a;
            int b;
            char c;
        };
        int test_copy_to_pointer(void) {
            struct s y = {"!?", {-20, -30}};
            struct s *x = malloc(sizeof(struct s));
            *x = y;
            if (strcmp(x->arr, "!?") || x->inner.a != -20 || x->inner.b != -30) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_pointer(void) {
            static struct s my_struct = {"()", {77, 78}};
            struct s *y = &my_struct;
            struct s x = {"", {0, 0}};
            x = *y;
            if (strcmp(x.arr, "()") || x.inner.a != 77 || x.inner.b != 78) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_and_from_pointer(void) {
            struct s my_struct = {"+-", {1000, 1001}};
            struct s *y = &my_struct;
            struct s *x = malloc(sizeof(struct s));
            *x = *y;
            if (strcmp(x->arr, "+-") || x->inner.a != 1000 || x->inner.b != 1001) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_array_elem(void) {
            struct s y = {"\n\t", {10000, 20000}};
            static struct s arr[3];
            arr[1] = y;
            if (strcmp(arr[1].arr, "\n\t") || arr[1].inner.a != 10000 ||
                arr[1].inner.b != 20000) {
                return 0;
            }
            if (arr[0].inner.a || arr[0].inner.b || arr[2].arr[0] || arr[2].arr[1]) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_array_elem(void) {
            struct s arr[3] = {
                {"ab", {-3000, -4000}}, {"cd", {-5000, -6000}}, {"ef", {-7000, -8000}}};
            struct s x = {"", {0, 0}};
            x = arr[1];
            if (strcmp(x.arr, "cd") || x.inner.a != -5000 || x.inner.b != -6000) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_and_from_array_elem(void) {
            struct s arr[3] = {
                {"ab", {-3000, -4000}}, {"cd", {-5000, -6000}}, {"ef", {-7000, -8000}}};
            arr[0] = arr[2];
            if (strcmp(arr[0].arr, "ef") || arr[0].inner.a != -7000 ||
                arr[0].inner.b != -8000) {
                return 0;
            }
            if (strcmp(arr[1].arr, "cd") || arr[1].inner.a != -5000 ||
                arr[1].inner.b != -6000) {
                return 0;
            }
            if (strcmp(arr[2].arr, "ef") || arr[2].inner.a != -7000 ||
                arr[2].inner.b != -8000) {
                return 0;
            }
            return 1;
        }
        int test_copy_array_element_with_padding(void) {
            struct with_end_padding arr[3] = {{0, 1, 2}, {3, 4, 5}, {6, 7, 8}};
            struct with_end_padding elem = {9, 9, 9};
            arr[1] = elem;
            if (arr[0].a != 0 || arr[0].b != 1 || arr[0].c != 2 || arr[1].a != 9 ||
                arr[1].b != 9 || arr[1].c != 9 || arr[2].a != 6 || arr[2].b != 7 ||
                arr[2].c != 8) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_copy_to_pointer()) {
                return 1;
            }
            if (!test_copy_from_pointer()) {
                return 2;
            }
            if (!test_copy_to_and_from_pointer()) {
                return 3;
            }
            if (!test_copy_to_array_elem()) {
                return 4;
            }
            if (!test_copy_from_array_elem()) {
                return 5;
            }
            if (!test_copy_to_and_from_array_elem()) {
                return 6;
            }
            if (!test_copy_array_element_with_padding()) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [small]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Long
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── arr
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── inner
            │       ╰── Type
            │           ╰── Struct [small]
            ├── Struct [with_end_padding]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Function [test_copy_to_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <75> "!?"
            │       │           ╰── Compound
            │       │               ├── <79> Unary [-]
            │       │               │   ╰── <78> Constant Int [20]
            │       │               ╰── <83> Unary [-]
            │       │                   ╰── <82> Constant Int [30]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <99> FunctionCall [malloc]
            │       │           ╰── <98> SizeOfType
            │       │               ╰── Struct [s]
            │       ├── <108> Assign [=]
            │       │   ├── <104> Dereference
            │       │   │   ╰── <103> Var [x]
            │       │   ╰── <107> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <142>  [||]
            │       │   │       ├── <129>  [||]
            │       │   │       │   ├── <116> FunctionCall [strcmp]
            │       │   │       │   │   ├── <114> Arrow
            │       │   │       │   │   │   ├── <112> Var [x]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <115> "!?"
            │       │   │       │   ╰── <128>  [!=]
            │       │   │       │       ├── <123> Dot
            │       │   │       │       │   ├── <121> Arrow
            │       │   │       │       │   │   ├── <119> Var [x]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <127> Unary [-]
            │       │   │       │           ╰── <126> Constant Int [20]
            │       │   │       ╰── <141>  [!=]
            │       │   │           ├── <136> Dot
            │       │   │           │   ├── <134> Arrow
            │       │   │           │   │   ├── <132> Var [x]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <140> Unary [-]
            │       │   │               ╰── <139> Constant Int [30]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <143> Constant Int [0]
            │       ╰── Return
            │           ╰── <148> Constant Int [1]
            ├── Function [test_copy_from_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── <162> "()"
            │       │   │       ╰── Compound
            │       │   │           ├── <164> Constant Int [77]
            │       │   │           ╰── <166> Constant Int [78]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <179> AddressOf
            │       │           ╰── <178> Var [my_struct]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <186> ""
            │       │           ╰── Compound
            │       │               ├── <188> Constant Int [0]
            │       │               ╰── <190> Constant Int [0]
            │       ├── <201> Assign [=]
            │       │   ├── <196> Var [x]
            │       │   ╰── <200> Dereference
            │       │       ╰── <199> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <231>  [||]
            │       │   │       ├── <220>  [||]
            │       │   │       │   ├── <209> FunctionCall [strcmp]
            │       │   │       │   │   ├── <207> Dot
            │       │   │       │   │   │   ├── <205> Var [x]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <208> "()"
            │       │   │       │   ╰── <219>  [!=]
            │       │   │       │       ├── <216> Dot
            │       │   │       │       │   ├── <214> Dot
            │       │   │       │       │   │   ├── <212> Var [x]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <218> Constant Int [77]
            │       │   │       ╰── <230>  [!=]
            │       │   │           ├── <227> Dot
            │       │   │           │   ├── <225> Dot
            │       │   │           │   │   ├── <223> Var [x]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <229> Constant Int [78]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <232> Constant Int [0]
            │       ╰── Return
            │           ╰── <237> Constant Int [1]
            ├── Function [test_copy_to_and_from_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <250> "+-"
            │       │           ╰── Compound
            │       │               ├── <252> Constant Int [1000]
            │       │               ╰── <254> Constant Int [1001]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <267> AddressOf
            │       │           ╰── <266> Var [my_struct]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <281> FunctionCall [malloc]
            │       │           ╰── <280> SizeOfType
            │       │               ╰── Struct [s]
            │       ├── <291> Assign [=]
            │       │   ├── <286> Dereference
            │       │   │   ╰── <285> Var [x]
            │       │   ╰── <290> Dereference
            │       │       ╰── <289> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <321>  [||]
            │       │   │       ├── <310>  [||]
            │       │   │       │   ├── <299> FunctionCall [strcmp]
            │       │   │       │   │   ├── <297> Arrow
            │       │   │       │   │   │   ├── <295> Var [x]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <298> "+-"
            │       │   │       │   ╰── <309>  [!=]
            │       │   │       │       ├── <306> Dot
            │       │   │       │       │   ├── <304> Arrow
            │       │   │       │       │   │   ├── <302> Var [x]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <308> Constant Int [1000]
            │       │   │       ╰── <320>  [!=]
            │       │   │           ├── <317> Dot
            │       │   │           │   ├── <315> Arrow
            │       │   │           │   │   ├── <313> Var [x]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <319> Constant Int [1001]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <322> Constant Int [0]
            │       ╰── Return
            │           ╰── <327> Constant Int [1]
            ├── Function [test_copy_to_array_elem]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <340> "
        	"
            │       │           ╰── Compound
            │       │               ├── <342> Constant Int [10000]
            │       │               ╰── <344> Constant Int [20000]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Struct [s]
            │       │   ╰── Static
            │       ├── <365> Assign [=]
            │       │   ├── <361> Subscript
            │       │   │   ├── <359> Var [arr]
            │       │   │   ╰── <360> Constant Int [1]
            │       │   ╰── <364> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <401>  [||]
            │       │   │       ├── <388>  [||]
            │       │   │       │   ├── <375> FunctionCall [strcmp]
            │       │   │       │   │   ├── <373> Dot
            │       │   │       │   │   │   ├── <371> Subscript
            │       │   │       │   │   │   │   ├── <369> Var [arr]
            │       │   │       │   │   │   │   ╰── <370> Constant Int [1]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <374> "
        	"
            │       │   │       │   ╰── <387>  [!=]
            │       │   │       │       ├── <384> Dot
            │       │   │       │       │   ├── <382> Dot
            │       │   │       │       │   │   ├── <380> Subscript
            │       │   │       │       │   │   │   ├── <378> Var [arr]
            │       │   │       │       │   │   │   ╰── <379> Constant Int [1]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <386> Constant Int [10000]
            │       │   │       ╰── <400>  [!=]
            │       │   │           ├── <397> Dot
            │       │   │           │   ├── <395> Dot
            │       │   │           │   │   ├── <393> Subscript
            │       │   │           │   │   │   ├── <391> Var [arr]
            │       │   │           │   │   │   ╰── <392> Constant Int [1]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <399> Constant Int [20000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <402> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <444>  [||]
            │       │   │       ├── <434>  [||]
            │       │   │       │   ├── <424>  [||]
            │       │   │       │   │   ├── <414> Dot
            │       │   │       │   │   │   ├── <412> Dot
            │       │   │       │   │   │   │   ├── <410> Subscript
            │       │   │       │   │   │   │   │   ├── <408> Var [arr]
            │       │   │       │   │   │   │   │   ╰── <409> Constant Int [0]
            │       │   │       │   │   │   │   ╰── inner
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── <423> Dot
            │       │   │       │   │       ├── <421> Dot
            │       │   │       │   │       │   ├── <419> Subscript
            │       │   │       │   │       │   │   ├── <417> Var [arr]
            │       │   │       │   │       │   │   ╰── <418> Constant Int [0]
            │       │   │       │   │       │   ╰── inner
            │       │   │       │   │       ╰── b
            │       │   │       │   ╰── <433> Subscript
            │       │   │       │       ├── <431> Dot
            │       │   │       │       │   ├── <429> Subscript
            │       │   │       │       │   │   ├── <427> Var [arr]
            │       │   │       │       │   │   ╰── <428> Constant Int [2]
            │       │   │       │       │   ╰── arr
            │       │   │       │       ╰── <432> Constant Int [0]
            │       │   │       ╰── <443> Subscript
            │       │   │           ├── <441> Dot
            │       │   │           │   ├── <439> Subscript
            │       │   │           │   │   ├── <437> Var [arr]
            │       │   │           │   │   ╰── <438> Constant Int [2]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <442> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <445> Constant Int [0]
            │       ╰── Return
            │           ╰── <450> Constant Int [1]
            ├── Function [test_copy_from_array_elem]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <466> "ab"
            │       │           │   ╰── Compound
            │       │           │       ├── <470> Unary [-]
            │       │           │       │   ╰── <469> Constant Int [3000]
            │       │           │       ╰── <474> Unary [-]
            │       │           │           ╰── <473> Constant Int [4000]
            │       │           ├── Compound
            │       │           │   ├── <478> "cd"
            │       │           │   ╰── Compound
            │       │           │       ├── <482> Unary [-]
            │       │           │       │   ╰── <481> Constant Int [5000]
            │       │           │       ╰── <486> Unary [-]
            │       │           │           ╰── <485> Constant Int [6000]
            │       │           ╰── Compound
            │       │               ├── <490> "ef"
            │       │               ╰── Compound
            │       │                   ├── <494> Unary [-]
            │       │                   │   ╰── <493> Constant Int [7000]
            │       │                   ╰── <498> Unary [-]
            │       │                       ╰── <497> Constant Int [8000]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <508> ""
            │       │           ╰── Compound
            │       │               ├── <510> Constant Int [0]
            │       │               ╰── <512> Constant Int [0]
            │       ├── <524> Assign [=]
            │       │   ├── <518> Var [x]
            │       │   ╰── <523> Subscript
            │       │       ├── <521> Var [arr]
            │       │       ╰── <522> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <558>  [||]
            │       │   │       ├── <545>  [||]
            │       │   │       │   ├── <532> FunctionCall [strcmp]
            │       │   │       │   │   ├── <530> Dot
            │       │   │       │   │   │   ├── <528> Var [x]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <531> "cd"
            │       │   │       │   ╰── <544>  [!=]
            │       │   │       │       ├── <539> Dot
            │       │   │       │       │   ├── <537> Dot
            │       │   │       │       │   │   ├── <535> Var [x]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <543> Unary [-]
            │       │   │       │           ╰── <542> Constant Int [5000]
            │       │   │       ╰── <557>  [!=]
            │       │   │           ├── <552> Dot
            │       │   │           │   ├── <550> Dot
            │       │   │           │   │   ├── <548> Var [x]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <556> Unary [-]
            │       │   │               ╰── <555> Constant Int [6000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <559> Constant Int [0]
            │       ╰── Return
            │           ╰── <564> Constant Int [1]
            ├── Function [test_copy_to_and_from_array_elem]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <580> "ab"
            │       │           │   ╰── Compound
            │       │           │       ├── <584> Unary [-]
            │       │           │       │   ╰── <583> Constant Int [3000]
            │       │           │       ╰── <588> Unary [-]
            │       │           │           ╰── <587> Constant Int [4000]
            │       │           ├── Compound
            │       │           │   ├── <592> "cd"
            │       │           │   ╰── Compound
            │       │           │       ├── <596> Unary [-]
            │       │           │       │   ╰── <595> Constant Int [5000]
            │       │           │       ╰── <600> Unary [-]
            │       │           │           ╰── <599> Constant Int [6000]
            │       │           ╰── Compound
            │       │               ├── <604> "ef"
            │       │               ╰── Compound
            │       │                   ├── <608> Unary [-]
            │       │                   │   ╰── <607> Constant Int [7000]
            │       │                   ╰── <612> Unary [-]
            │       │                       ╰── <611> Constant Int [8000]
            │       ├── <627> Assign [=]
            │       │   ├── <621> Subscript
            │       │   │   ├── <619> Var [arr]
            │       │   │   ╰── <620> Constant Int [0]
            │       │   ╰── <626> Subscript
            │       │       ├── <624> Var [arr]
            │       │       ╰── <625> Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <667>  [||]
            │       │   │       ├── <652>  [||]
            │       │   │       │   ├── <637> FunctionCall [strcmp]
            │       │   │       │   │   ├── <635> Dot
            │       │   │       │   │   │   ├── <633> Subscript
            │       │   │       │   │   │   │   ├── <631> Var [arr]
            │       │   │       │   │   │   │   ╰── <632> Constant Int [0]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <636> "ef"
            │       │   │       │   ╰── <651>  [!=]
            │       │   │       │       ├── <646> Dot
            │       │   │       │       │   ├── <644> Dot
            │       │   │       │       │   │   ├── <642> Subscript
            │       │   │       │       │   │   │   ├── <640> Var [arr]
            │       │   │       │       │   │   │   ╰── <641> Constant Int [0]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <650> Unary [-]
            │       │   │       │           ╰── <649> Constant Int [7000]
            │       │   │       ╰── <666>  [!=]
            │       │   │           ├── <661> Dot
            │       │   │           │   ├── <659> Dot
            │       │   │           │   │   ├── <657> Subscript
            │       │   │           │   │   │   ├── <655> Var [arr]
            │       │   │           │   │   │   ╰── <656> Constant Int [0]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <665> Unary [-]
            │       │   │               ╰── <664> Constant Int [8000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <668> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <711>  [||]
            │       │   │       ├── <696>  [||]
            │       │   │       │   ├── <681> FunctionCall [strcmp]
            │       │   │       │   │   ├── <679> Dot
            │       │   │       │   │   │   ├── <677> Subscript
            │       │   │       │   │   │   │   ├── <675> Var [arr]
            │       │   │       │   │   │   │   ╰── <676> Constant Int [1]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <680> "cd"
            │       │   │       │   ╰── <695>  [!=]
            │       │   │       │       ├── <690> Dot
            │       │   │       │       │   ├── <688> Dot
            │       │   │       │       │   │   ├── <686> Subscript
            │       │   │       │       │   │   │   ├── <684> Var [arr]
            │       │   │       │       │   │   │   ╰── <685> Constant Int [1]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <694> Unary [-]
            │       │   │       │           ╰── <693> Constant Int [5000]
            │       │   │       ╰── <710>  [!=]
            │       │   │           ├── <705> Dot
            │       │   │           │   ├── <703> Dot
            │       │   │           │   │   ├── <701> Subscript
            │       │   │           │   │   │   ├── <699> Var [arr]
            │       │   │           │   │   │   ╰── <700> Constant Int [1]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <709> Unary [-]
            │       │   │               ╰── <708> Constant Int [6000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <712> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <755>  [||]
            │       │   │       ├── <740>  [||]
            │       │   │       │   ├── <725> FunctionCall [strcmp]
            │       │   │       │   │   ├── <723> Dot
            │       │   │       │   │   │   ├── <721> Subscript
            │       │   │       │   │   │   │   ├── <719> Var [arr]
            │       │   │       │   │   │   │   ╰── <720> Constant Int [2]
            │       │   │       │   │   │   ╰── arr
            │       │   │       │   │   ╰── <724> "ef"
            │       │   │       │   ╰── <739>  [!=]
            │       │   │       │       ├── <734> Dot
            │       │   │       │       │   ├── <732> Dot
            │       │   │       │       │   │   ├── <730> Subscript
            │       │   │       │       │   │   │   ├── <728> Var [arr]
            │       │   │       │       │   │   │   ╰── <729> Constant Int [2]
            │       │   │       │       │   │   ╰── inner
            │       │   │       │       │   ╰── a
            │       │   │       │       ╰── <738> Unary [-]
            │       │   │       │           ╰── <737> Constant Int [7000]
            │       │   │       ╰── <754>  [!=]
            │       │   │           ├── <749> Dot
            │       │   │           │   ├── <747> Dot
            │       │   │           │   │   ├── <745> Subscript
            │       │   │           │   │   │   ├── <743> Var [arr]
            │       │   │           │   │   │   ╰── <744> Constant Int [2]
            │       │   │           │   │   ╰── inner
            │       │   │           │   ╰── b
            │       │   │           ╰── <753> Unary [-]
            │       │   │               ╰── <752> Constant Int [8000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <756> Constant Int [0]
            │       ╰── Return
            │           ╰── <761> Constant Int [1]
            ├── Function [test_copy_array_element_with_padding]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Struct [with_end_padding]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <777> Constant Int [0]
            │       │           │   ├── <779> Constant Int [1]
            │       │           │   ╰── <781> Constant Int [2]
            │       │           ├── Compound
            │       │           │   ├── <784> Constant Int [3]
            │       │           │   ├── <786> Constant Int [4]
            │       │           │   ╰── <788> Constant Int [5]
            │       │           ╰── Compound
            │       │               ├── <791> Constant Int [6]
            │       │               ├── <793> Constant Int [7]
            │       │               ╰── <795> Constant Int [8]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem
            │       │   ├── Type
            │       │   │   ╰── Struct [with_end_padding]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <804> Constant Int [9]
            │       │           ├── <806> Constant Int [9]
            │       │           ╰── <808> Constant Int [9]
            │       ├── <819> Assign [=]
            │       │   ├── <815> Subscript
            │       │   │   ├── <813> Var [arr]
            │       │   │   ╰── <814> Constant Int [1]
            │       │   ╰── <818> Var [elem]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <917>  [||]
            │       │   │       ├── <906>  [||]
            │       │   │       │   ├── <895>  [||]
            │       │   │       │   │   ├── <884>  [||]
            │       │   │       │   │   │   ├── <873>  [||]
            │       │   │       │   │   │   │   ├── <862>  [||]
            │       │   │       │   │   │   │   │   ├── <851>  [||]
            │       │   │       │   │   │   │   │   │   ├── <840>  [||]
            │       │   │       │   │   │   │   │   │   │   ├── <829>  [!=]
            │       │   │       │   │   │   │   │   │   │   │   ├── <826> Dot
            │       │   │       │   │   │   │   │   │   │   │   │   ├── <824> Subscript
            │       │   │       │   │   │   │   │   │   │   │   │   │   ├── <822> Var [arr]
            │       │   │       │   │   │   │   │   │   │   │   │   │   ╰── <823> Constant Int [0]
            │       │   │       │   │   │   │   │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   │   │   │   │   ╰── <828> Constant Int [0]
            │       │   │       │   │   │   │   │   │   │   ╰── <839>  [!=]
            │       │   │       │   │   │   │   │   │   │       ├── <836> Dot
            │       │   │       │   │   │   │   │   │   │       │   ├── <834> Subscript
            │       │   │       │   │   │   │   │   │   │       │   │   ├── <832> Var [arr]
            │       │   │       │   │   │   │   │   │   │       │   │   ╰── <833> Constant Int [0]
            │       │   │       │   │   │   │   │   │   │       │   ╰── b
            │       │   │       │   │   │   │   │   │   │       ╰── <838> Constant Int [1]
            │       │   │       │   │   │   │   │   │   ╰── <850>  [!=]
            │       │   │       │   │   │   │   │   │       ├── <847> Dot
            │       │   │       │   │   │   │   │   │       │   ├── <845> Subscript
            │       │   │       │   │   │   │   │   │       │   │   ├── <843> Var [arr]
            │       │   │       │   │   │   │   │   │       │   │   ╰── <844> Constant Int [0]
            │       │   │       │   │   │   │   │   │       │   ╰── c
            │       │   │       │   │   │   │   │   │       ╰── <849> Constant Int [2]
            │       │   │       │   │   │   │   │   ╰── <861>  [!=]
            │       │   │       │   │   │   │   │       ├── <858> Dot
            │       │   │       │   │   │   │   │       │   ├── <856> Subscript
            │       │   │       │   │   │   │   │       │   │   ├── <854> Var [arr]
            │       │   │       │   │   │   │   │       │   │   ╰── <855> Constant Int [1]
            │       │   │       │   │   │   │   │       │   ╰── a
            │       │   │       │   │   │   │   │       ╰── <860> Constant Int [9]
            │       │   │       │   │   │   │   ╰── <872>  [!=]
            │       │   │       │   │   │   │       ├── <869> Dot
            │       │   │       │   │   │   │       │   ├── <867> Subscript
            │       │   │       │   │   │   │       │   │   ├── <865> Var [arr]
            │       │   │       │   │   │   │       │   │   ╰── <866> Constant Int [1]
            │       │   │       │   │   │   │       │   ╰── b
            │       │   │       │   │   │   │       ╰── <871> Constant Int [9]
            │       │   │       │   │   │   ╰── <883>  [!=]
            │       │   │       │   │   │       ├── <880> Dot
            │       │   │       │   │   │       │   ├── <878> Subscript
            │       │   │       │   │   │       │   │   ├── <876> Var [arr]
            │       │   │       │   │   │       │   │   ╰── <877> Constant Int [1]
            │       │   │       │   │   │       │   ╰── c
            │       │   │       │   │   │       ╰── <882> Constant Int [9]
            │       │   │       │   │   ╰── <894>  [!=]
            │       │   │       │   │       ├── <891> Dot
            │       │   │       │   │       │   ├── <889> Subscript
            │       │   │       │   │       │   │   ├── <887> Var [arr]
            │       │   │       │   │       │   │   ╰── <888> Constant Int [2]
            │       │   │       │   │       │   ╰── a
            │       │   │       │   │       ╰── <893> Constant Int [6]
            │       │   │       │   ╰── <905>  [!=]
            │       │   │       │       ├── <902> Dot
            │       │   │       │       │   ├── <900> Subscript
            │       │   │       │       │   │   ├── <898> Var [arr]
            │       │   │       │       │   │   ╰── <899> Constant Int [2]
            │       │   │       │       │   ╰── b
            │       │   │       │       ╰── <904> Constant Int [7]
            │       │   │       ╰── <916>  [!=]
            │       │   │           ├── <913> Dot
            │       │   │           │   ├── <911> Subscript
            │       │   │           │   │   ├── <909> Var [arr]
            │       │   │           │   │   ╰── <910> Constant Int [2]
            │       │   │           │   ╰── c
            │       │   │           ╰── <915> Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <918> Constant Int [0]
            │       ╰── Return
            │           ╰── <923> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <935> Unary [!]
                    │   │       ╰── <934> FunctionCall [test_copy_to_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <936> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <944> Unary [!]
                    │   │       ╰── <943> FunctionCall [test_copy_from_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <945> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <953> Unary [!]
                    │   │       ╰── <952> FunctionCall [test_copy_to_and_from_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <954> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <962> Unary [!]
                    │   │       ╰── <961> FunctionCall [test_copy_to_array_elem]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <963> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <971> Unary [!]
                    │   │       ╰── <970> FunctionCall [test_copy_from_array_elem]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <972> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <980> Unary [!]
                    │   │       ╰── <979> FunctionCall [test_copy_to_and_from_array_elem]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <981> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <989> Unary [!]
                    │   │       ╰── <988> FunctionCall [test_copy_array_element_with_padding]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <990> Constant Int [7]
                    ╰── Return
                        ╰── <995> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_copy_struct_with_arrow_operator() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        struct outermost {
            int i;
            struct outer *nested_ptr;
            struct outer nested_struct;
        };
        int test_copy_from_member_pointer(void) {
            struct inner small = {0.0, 0};
            struct outer *outer_ptr = malloc(sizeof(struct outer));
            outer_ptr->a = 100;
            outer_ptr->substruct.d = 21.5;
            outer_ptr->substruct.i = 100001;
            small = outer_ptr->substruct;
            if (small.d != 21.5 || small.i != 100001) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_member_pointer(void) {
            struct inner small = {99.25, 987654};
            struct outer *outer_ptr = calloc(1, sizeof(struct outer));
            outer_ptr->substruct = small;
            if (outer_ptr->substruct.d != 99.25 || outer_ptr->substruct.i != 987654) {
                return 0;
            }
            if (outer_ptr->a || outer_ptr->b) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_nested_member_pointer(void) {
            struct inner small = {99.25, 987654};
            struct outermost *outer_ptr = calloc(1, sizeof(struct outermost));
            outer_ptr->nested_ptr = calloc(1, sizeof(struct outer));
            outer_ptr->i = -5;
            outer_ptr->nested_ptr->a = 101;
            outer_ptr->nested_ptr->b = 102;
            outer_ptr->nested_ptr->substruct.d = 77.5;
            outer_ptr->nested_ptr->substruct.i = 88;
            small = outer_ptr->nested_ptr->substruct;
            if (small.d != 77.5 || small.i != 88) {
                return 0;
            }
            if (outer_ptr->i != -5 || outer_ptr->nested_struct.a) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_nested_member_pointer(void) {
            struct inner small = {99.25, 987654};
            struct outermost *outer_ptr = calloc(1, sizeof(struct outermost));
            outer_ptr->nested_ptr = calloc(1, sizeof(struct outer));
            outer_ptr->nested_ptr->substruct = small;
            if (outer_ptr->nested_ptr->substruct.d != 99.25 ||
                outer_ptr->nested_ptr->substruct.i != 987654) {
                return 0;
            }
            if (outer_ptr->nested_ptr->a || outer_ptr->nested_ptr->b) {
                return 0;
            }
            return 1;
        }
        int test_mixed_nested_access(void) {
            struct outermost s1 = {100, 0, {0, 0, {0, 0}}};
            struct outermost *s2_ptr = calloc(1, sizeof(struct outermost));
            s1.i = 2147483647;
            s1.nested_ptr = calloc(1, sizeof(struct outermost));
            s1.nested_ptr->a = 125;
            s1.nested_ptr->b = 126;
            s1.nested_ptr->substruct.d = -50.;
            s1.nested_ptr->substruct.i = -70;
            s1.nested_struct.a = 101;
            s1.nested_struct.b = 102;
            s2_ptr->i = -2147483647;
            s2_ptr->nested_ptr = calloc(1, sizeof(struct outermost));
            s2_ptr->nested_ptr->a = 5;
            s2_ptr->nested_ptr->b = 6;
            s2_ptr->nested_struct.substruct.d = 8.e8;
            s2_ptr->nested_struct.substruct.i = -5;
            s1.nested_ptr->substruct = s2_ptr->nested_struct.substruct;
            if (s1.nested_ptr->substruct.d != 8.e8 ||
                s1.nested_ptr->substruct.i != -5) {
                return 0;
            }
            if (s1.nested_ptr->a != 125 || s1.nested_ptr->b != 126) {
                return 0;
            }
            return 1;
        }
        int test_member_from_cast(void) {
            struct inner small = {20.0, 10};
            void *outer_ptr = calloc(1, sizeof(struct outer));
            ((struct outer *)outer_ptr)->substruct = small;
            if (((struct outer *)outer_ptr)->substruct.d != 20.0 ||
                ((struct outer *)outer_ptr)->substruct.i != 10) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_copy_from_member_pointer()) {
                return 1;
            }
            if (!test_copy_to_member_pointer()) {
                return 2;
            }
            if (!test_copy_from_nested_member_pointer()) {
                return 3;
            }
            if (!test_copy_to_nested_member_pointer()) {
                return 4;
            }
            if (!test_mixed_nested_access()) {
                return 5;
            }
            if (!test_member_from_cast()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [malloc]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── substruct
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Struct [outermost]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── nested_ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── nested_struct
            │       ╰── Type
            │           ╰── Struct [outer]
            ├── Function [test_copy_from_member_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <78> Constant Double [+0e0]
            │       │           ╰── <80> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── <95> FunctionCall [malloc]
            │       │           ╰── <94> SizeOfType
            │       │               ╰── Struct [outer]
            │       ├── <104> Assign [=]
            │       │   ├── <101> Arrow
            │       │   │   ├── <99> Var [outer_ptr]
            │       │   │   ╰── a
            │       │   ╰── <103> Constant Int [100]
            │       ├── <114> Assign [=]
            │       │   ├── <111> Dot
            │       │   │   ├── <109> Arrow
            │       │   │   │   ├── <107> Var [outer_ptr]
            │       │   │   │   ╰── substruct
            │       │   │   ╰── d
            │       │   ╰── <113> Constant Double [+2.15e1]
            │       ├── <124> Assign [=]
            │       │   ├── <121> Dot
            │       │   │   ├── <119> Arrow
            │       │   │   │   ├── <117> Var [outer_ptr]
            │       │   │   │   ╰── substruct
            │       │   │   ╰── i
            │       │   ╰── <123> Constant Int [100001]
            │       ├── <133> Assign [=]
            │       │   ├── <127> Var [small]
            │       │   ╰── <132> Arrow
            │       │       ├── <130> Var [outer_ptr]
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <150>  [||]
            │       │   │       ├── <141>  [!=]
            │       │   │       │   ├── <138> Dot
            │       │   │       │   │   ├── <136> Var [small]
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <140> Constant Double [+2.15e1]
            │       │   │       ╰── <149>  [!=]
            │       │   │           ├── <146> Dot
            │       │   │           │   ├── <144> Var [small]
            │       │   │           │   ╰── i
            │       │   │           ╰── <148> Constant Int [100001]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <151> Constant Int [0]
            │       ╰── Return
            │           ╰── <156> Constant Int [1]
            ├── Function [test_copy_to_member_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <169> Constant Double [+9.925e1]
            │       │           ╰── <171> Constant Int [987654]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── <187> FunctionCall [calloc]
            │       │           ├── <182> Constant Int [1]
            │       │           ╰── <186> SizeOfType
            │       │               ╰── Struct [outer]
            │       ├── <197> Assign [=]
            │       │   ├── <193> Arrow
            │       │   │   ├── <191> Var [outer_ptr]
            │       │   │   ╰── substruct
            │       │   ╰── <196> Var [small]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <218>  [||]
            │       │   │       ├── <207>  [!=]
            │       │   │       │   ├── <204> Dot
            │       │   │       │   │   ├── <202> Arrow
            │       │   │       │   │   │   ├── <200> Var [outer_ptr]
            │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <206> Constant Double [+9.925e1]
            │       │   │       ╰── <217>  [!=]
            │       │   │           ├── <214> Dot
            │       │   │           │   ├── <212> Arrow
            │       │   │           │   │   ├── <210> Var [outer_ptr]
            │       │   │           │   │   ╰── substruct
            │       │   │           │   ╰── i
            │       │   │           ╰── <216> Constant Int [987654]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <219> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <233>  [||]
            │       │   │       ├── <227> Arrow
            │       │   │       │   ├── <225> Var [outer_ptr]
            │       │   │       │   ╰── a
            │       │   │       ╰── <232> Arrow
            │       │   │           ├── <230> Var [outer_ptr]
            │       │   │           ╰── b
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <234> Constant Int [0]
            │       ╰── Return
            │           ╰── <239> Constant Int [1]
            ├── Function [test_copy_from_nested_member_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <252> Constant Double [+9.925e1]
            │       │           ╰── <254> Constant Int [987654]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── <270> FunctionCall [calloc]
            │       │           ├── <265> Constant Int [1]
            │       │           ╰── <269> SizeOfType
            │       │               ╰── Struct [outermost]
            │       ├── <285> Assign [=]
            │       │   ├── <276> Arrow
            │       │   │   ├── <274> Var [outer_ptr]
            │       │   │   ╰── nested_ptr
            │       │   ╰── <284> FunctionCall [calloc]
            │       │       ├── <279> Constant Int [1]
            │       │       ╰── <283> SizeOfType
            │       │           ╰── Struct [outer]
            │       ├── <295> Assign [=]
            │       │   ├── <290> Arrow
            │       │   │   ├── <288> Var [outer_ptr]
            │       │   │   ╰── i
            │       │   ╰── <294> Unary [-]
            │       │       ╰── <293> Constant Int [5]
            │       ├── <305> Assign [=]
            │       │   ├── <302> Arrow
            │       │   │   ├── <300> Arrow
            │       │   │   │   ├── <298> Var [outer_ptr]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── a
            │       │   ╰── <304> Constant Int [101]
            │       ├── <315> Assign [=]
            │       │   ├── <312> Arrow
            │       │   │   ├── <310> Arrow
            │       │   │   │   ├── <308> Var [outer_ptr]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── b
            │       │   ╰── <314> Constant Int [102]
            │       ├── <327> Assign [=]
            │       │   ├── <324> Dot
            │       │   │   ├── <322> Arrow
            │       │   │   │   ├── <320> Arrow
            │       │   │   │   │   ├── <318> Var [outer_ptr]
            │       │   │   │   │   ╰── nested_ptr
            │       │   │   │   ╰── substruct
            │       │   │   ╰── d
            │       │   ╰── <326> Constant Double [+7.75e1]
            │       ├── <339> Assign [=]
            │       │   ├── <336> Dot
            │       │   │   ├── <334> Arrow
            │       │   │   │   ├── <332> Arrow
            │       │   │   │   │   ├── <330> Var [outer_ptr]
            │       │   │   │   │   ╰── nested_ptr
            │       │   │   │   ╰── substruct
            │       │   │   ╰── i
            │       │   ╰── <338> Constant Int [88]
            │       ├── <350> Assign [=]
            │       │   ├── <342> Var [small]
            │       │   ╰── <349> Arrow
            │       │       ├── <347> Arrow
            │       │       │   ├── <345> Var [outer_ptr]
            │       │       │   ╰── nested_ptr
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <367>  [||]
            │       │   │       ├── <358>  [!=]
            │       │   │       │   ├── <355> Dot
            │       │   │       │   │   ├── <353> Var [small]
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <357> Constant Double [+7.75e1]
            │       │   │       ╰── <366>  [!=]
            │       │   │           ├── <363> Dot
            │       │   │           │   ├── <361> Var [small]
            │       │   │           │   ╰── i
            │       │   │           ╰── <365> Constant Int [88]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <368> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <389>  [||]
            │       │   │       ├── <381>  [!=]
            │       │   │       │   ├── <376> Arrow
            │       │   │       │   │   ├── <374> Var [outer_ptr]
            │       │   │       │   │   ╰── i
            │       │   │       │   ╰── <380> Unary [-]
            │       │   │       │       ╰── <379> Constant Int [5]
            │       │   │       ╰── <388> Dot
            │       │   │           ├── <386> Arrow
            │       │   │           │   ├── <384> Var [outer_ptr]
            │       │   │           │   ╰── nested_struct
            │       │   │           ╰── a
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <390> Constant Int [0]
            │       ╰── Return
            │           ╰── <395> Constant Int [1]
            ├── Function [test_copy_to_nested_member_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <408> Constant Double [+9.925e1]
            │       │           ╰── <410> Constant Int [987654]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── <426> FunctionCall [calloc]
            │       │           ├── <421> Constant Int [1]
            │       │           ╰── <425> SizeOfType
            │       │               ╰── Struct [outermost]
            │       ├── <441> Assign [=]
            │       │   ├── <432> Arrow
            │       │   │   ├── <430> Var [outer_ptr]
            │       │   │   ╰── nested_ptr
            │       │   ╰── <440> FunctionCall [calloc]
            │       │       ├── <435> Constant Int [1]
            │       │       ╰── <439> SizeOfType
            │       │           ╰── Struct [outer]
            │       ├── <452> Assign [=]
            │       │   ├── <448> Arrow
            │       │   │   ├── <446> Arrow
            │       │   │   │   ├── <444> Var [outer_ptr]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── substruct
            │       │   ╰── <451> Var [small]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <477>  [||]
            │       │   │       ├── <464>  [!=]
            │       │   │       │   ├── <461> Dot
            │       │   │       │   │   ├── <459> Arrow
            │       │   │       │   │   │   ├── <457> Arrow
            │       │   │       │   │   │   │   ├── <455> Var [outer_ptr]
            │       │   │       │   │   │   │   ╰── nested_ptr
            │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <463> Constant Double [+9.925e1]
            │       │   │       ╰── <476>  [!=]
            │       │   │           ├── <473> Dot
            │       │   │           │   ├── <471> Arrow
            │       │   │           │   │   ├── <469> Arrow
            │       │   │           │   │   │   ├── <467> Var [outer_ptr]
            │       │   │           │   │   │   ╰── nested_ptr
            │       │   │           │   │   ╰── substruct
            │       │   │           │   ╰── i
            │       │   │           ╰── <475> Constant Int [987654]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <478> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <496>  [||]
            │       │   │       ├── <488> Arrow
            │       │   │       │   ├── <486> Arrow
            │       │   │       │   │   ├── <484> Var [outer_ptr]
            │       │   │       │   │   ╰── nested_ptr
            │       │   │       │   ╰── a
            │       │   │       ╰── <495> Arrow
            │       │   │           ├── <493> Arrow
            │       │   │           │   ├── <491> Var [outer_ptr]
            │       │   │           │   ╰── nested_ptr
            │       │   │           ╰── b
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <497> Constant Int [0]
            │       ╰── Return
            │           ╰── <502> Constant Int [1]
            ├── Function [test_mixed_nested_access]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ├── Type
            │       │   │   ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <515> Constant Int [100]
            │       │           ├── <517> Constant Int [0]
            │       │           ╰── Compound
            │       │               ├── <519> Constant Int [0]
            │       │               ├── <521> Constant Int [0]
            │       │               ╰── Compound
            │       │                   ├── <523> Constant Int [0]
            │       │                   ╰── <525> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s2_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── <543> FunctionCall [calloc]
            │       │           ├── <538> Constant Int [1]
            │       │           ╰── <542> SizeOfType
            │       │               ╰── Struct [outermost]
            │       ├── <552> Assign [=]
            │       │   ├── <549> Dot
            │       │   │   ├── <547> Var [s1]
            │       │   │   ╰── i
            │       │   ╰── <551> Constant Int [2147483647]
            │       ├── <566> Assign [=]
            │       │   ├── <557> Dot
            │       │   │   ├── <555> Var [s1]
            │       │   │   ╰── nested_ptr
            │       │   ╰── <565> FunctionCall [calloc]
            │       │       ├── <560> Constant Int [1]
            │       │       ╰── <564> SizeOfType
            │       │           ╰── Struct [outermost]
            │       ├── <576> Assign [=]
            │       │   ├── <573> Arrow
            │       │   │   ├── <571> Dot
            │       │   │   │   ├── <569> Var [s1]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── a
            │       │   ╰── <575> Constant Int [125]
            │       ├── <586> Assign [=]
            │       │   ├── <583> Arrow
            │       │   │   ├── <581> Dot
            │       │   │   │   ├── <579> Var [s1]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── b
            │       │   ╰── <585> Constant Int [126]
            │       ├── <600> Assign [=]
            │       │   ├── <595> Dot
            │       │   │   ├── <593> Arrow
            │       │   │   │   ├── <591> Dot
            │       │   │   │   │   ├── <589> Var [s1]
            │       │   │   │   │   ╰── nested_ptr
            │       │   │   │   ╰── substruct
            │       │   │   ╰── d
            │       │   ╰── <599> Unary [-]
            │       │       ╰── <598> Constant Double [+5e1]
            │       ├── <614> Assign [=]
            │       │   ├── <609> Dot
            │       │   │   ├── <607> Arrow
            │       │   │   │   ├── <605> Dot
            │       │   │   │   │   ├── <603> Var [s1]
            │       │   │   │   │   ╰── nested_ptr
            │       │   │   │   ╰── substruct
            │       │   │   ╰── i
            │       │   ╰── <613> Unary [-]
            │       │       ╰── <612> Constant Int [70]
            │       ├── <624> Assign [=]
            │       │   ├── <621> Dot
            │       │   │   ├── <619> Dot
            │       │   │   │   ├── <617> Var [s1]
            │       │   │   │   ╰── nested_struct
            │       │   │   ╰── a
            │       │   ╰── <623> Constant Int [101]
            │       ├── <634> Assign [=]
            │       │   ├── <631> Dot
            │       │   │   ├── <629> Dot
            │       │   │   │   ├── <627> Var [s1]
            │       │   │   │   ╰── nested_struct
            │       │   │   ╰── b
            │       │   ╰── <633> Constant Int [102]
            │       ├── <644> Assign [=]
            │       │   ├── <639> Arrow
            │       │   │   ├── <637> Var [s2_ptr]
            │       │   │   ╰── i
            │       │   ╰── <643> Unary [-]
            │       │       ╰── <642> Constant Int [2147483647]
            │       ├── <658> Assign [=]
            │       │   ├── <649> Arrow
            │       │   │   ├── <647> Var [s2_ptr]
            │       │   │   ╰── nested_ptr
            │       │   ╰── <657> FunctionCall [calloc]
            │       │       ├── <652> Constant Int [1]
            │       │       ╰── <656> SizeOfType
            │       │           ╰── Struct [outermost]
            │       ├── <668> Assign [=]
            │       │   ├── <665> Arrow
            │       │   │   ├── <663> Arrow
            │       │   │   │   ├── <661> Var [s2_ptr]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── a
            │       │   ╰── <667> Constant Int [5]
            │       ├── <678> Assign [=]
            │       │   ├── <675> Arrow
            │       │   │   ├── <673> Arrow
            │       │   │   │   ├── <671> Var [s2_ptr]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── b
            │       │   ╰── <677> Constant Int [6]
            │       ├── <690> Assign [=]
            │       │   ├── <687> Dot
            │       │   │   ├── <685> Dot
            │       │   │   │   ├── <683> Arrow
            │       │   │   │   │   ├── <681> Var [s2_ptr]
            │       │   │   │   │   ╰── nested_struct
            │       │   │   │   ╰── substruct
            │       │   │   ╰── d
            │       │   ╰── <689> Constant Double [+8e8]
            │       ├── <704> Assign [=]
            │       │   ├── <699> Dot
            │       │   │   ├── <697> Dot
            │       │   │   │   ├── <695> Arrow
            │       │   │   │   │   ├── <693> Var [s2_ptr]
            │       │   │   │   │   ╰── nested_struct
            │       │   │   │   ╰── substruct
            │       │   │   ╰── i
            │       │   ╰── <703> Unary [-]
            │       │       ╰── <702> Constant Int [5]
            │       ├── <719> Assign [=]
            │       │   ├── <711> Arrow
            │       │   │   ├── <709> Dot
            │       │   │   │   ├── <707> Var [s1]
            │       │   │   │   ╰── nested_ptr
            │       │   │   ╰── substruct
            │       │   ╰── <718> Dot
            │       │       ├── <716> Arrow
            │       │       │   ├── <714> Var [s2_ptr]
            │       │       │   ╰── nested_struct
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <746>  [||]
            │       │   │       ├── <731>  [!=]
            │       │   │       │   ├── <728> Dot
            │       │   │       │   │   ├── <726> Arrow
            │       │   │       │   │   │   ├── <724> Dot
            │       │   │       │   │   │   │   ├── <722> Var [s1]
            │       │   │       │   │   │   │   ╰── nested_ptr
            │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <730> Constant Double [+8e8]
            │       │   │       ╰── <745>  [!=]
            │       │   │           ├── <740> Dot
            │       │   │           │   ├── <738> Arrow
            │       │   │           │   │   ├── <736> Dot
            │       │   │           │   │   │   ├── <734> Var [s1]
            │       │   │           │   │   │   ╰── nested_ptr
            │       │   │           │   │   ╰── substruct
            │       │   │           │   ╰── i
            │       │   │           ╰── <744> Unary [-]
            │       │   │               ╰── <743> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <747> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <771>  [||]
            │       │   │       ├── <760>  [!=]
            │       │   │       │   ├── <757> Arrow
            │       │   │       │   │   ├── <755> Dot
            │       │   │       │   │   │   ├── <753> Var [s1]
            │       │   │       │   │   │   ╰── nested_ptr
            │       │   │       │   │   ╰── a
            │       │   │       │   ╰── <759> Constant Int [125]
            │       │   │       ╰── <770>  [!=]
            │       │   │           ├── <767> Arrow
            │       │   │           │   ├── <765> Dot
            │       │   │           │   │   ├── <763> Var [s1]
            │       │   │           │   │   ╰── nested_ptr
            │       │   │           │   ╰── b
            │       │   │           ╰── <769> Constant Int [126]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <772> Constant Int [0]
            │       ╰── Return
            │           ╰── <777> Constant Int [1]
            ├── Function [test_member_from_cast]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <790> Constant Double [+2e1]
            │       │           ╰── <792> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Void
            │       │   ╰── Initializer
            │       │       ╰── <807> FunctionCall [calloc]
            │       │           ├── <802> Constant Int [1]
            │       │           ╰── <806> SizeOfType
            │       │               ╰── Struct [outer]
            │       ├── <823> Assign [=]
            │       │   ├── <819> Arrow
            │       │   │   ├── <817> Cast
            │       │   │   │   ├── Target
            │       │   │   │   │   ╰── Pointer
            │       │   │   │   │       ╰── Struct [outer]
            │       │   │   │   ╰── Expression
            │       │   │   │       ╰── <815> Var [outer_ptr]
            │       │   │   ╰── substruct
            │       │   ╰── <822> Var [small]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <856>  [||]
            │       │   │       ├── <839>  [!=]
            │       │   │       │   ├── <836> Dot
            │       │   │       │   │   ├── <834> Arrow
            │       │   │       │   │   │   ├── <832> Cast
            │       │   │       │   │   │   │   ├── Target
            │       │   │       │   │   │   │   │   ╰── Pointer
            │       │   │       │   │   │   │   │       ╰── Struct [outer]
            │       │   │       │   │   │   │   ╰── Expression
            │       │   │       │   │   │   │       ╰── <830> Var [outer_ptr]
            │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <838> Constant Double [+2e1]
            │       │   │       ╰── <855>  [!=]
            │       │   │           ├── <852> Dot
            │       │   │           │   ├── <850> Arrow
            │       │   │           │   │   ├── <848> Cast
            │       │   │           │   │   │   ├── Target
            │       │   │           │   │   │   │   ╰── Pointer
            │       │   │           │   │   │   │       ╰── Struct [outer]
            │       │   │           │   │   │   ╰── Expression
            │       │   │           │   │   │       ╰── <846> Var [outer_ptr]
            │       │   │           │   │   ╰── substruct
            │       │   │           │   ╰── i
            │       │   │           ╰── <854> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <857> Constant Int [0]
            │       ╰── Return
            │           ╰── <862> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <874> Unary [!]
                    │   │       ╰── <873> FunctionCall [test_copy_from_member_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <875> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <883> Unary [!]
                    │   │       ╰── <882> FunctionCall [test_copy_to_member_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <884> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <892> Unary [!]
                    │   │       ╰── <891> FunctionCall [test_copy_from_nested_member_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <893> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <901> Unary [!]
                    │   │       ╰── <900> FunctionCall [test_copy_to_nested_member_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <902> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <910> Unary [!]
                    │   │       ╰── <909> FunctionCall [test_mixed_nested_access]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <911> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <919> Unary [!]
                    │   │       ╰── <918> FunctionCall [test_member_from_cast]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <920> Constant Int [6]
                    ╰── Return
                        ╰── <925> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_copy_struct_with_dot_operator() {
    let src = r#"
        struct inner {
            signed char a;
            signed char b;
            signed char arr[3];
        };
        struct outer {
            struct inner substruct;
            signed char x;
            signed char y;
        };
        struct outermost {
            struct outer nested;
            int i;
        };
        int test_copy_from_member(void) {
            static struct outer big_struct = {{10, 9, {8, 7, 6}}, 5, 4};
            char arr[3] = {'a', 'b', 'c'};
            struct inner substruct = {-1, -1, {-1, -1, -1}};
            char arr2[3] = {'d', 'e', 'f'};
            substruct = big_struct.substruct;
            if (substruct.a != 10 || substruct.b != 9 || substruct.arr[0] != 8 ||
                substruct.arr[1] != 7 || substruct.arr[2] != 6) {
                return 0;
            }
            if (arr[0] != 'a' || arr[1] != 'b' || arr[2] != 'c' || arr2[0] != 'd' ||
                arr2[1] != 'e' || arr2[2] != 'f') {
                return 0;
            }
            return 1;
        }
        int test_copy_to_member(void) {
            static struct outer big_struct = {{0, 0, {0, 0, 0}}, 0, 0};
            struct inner small_struct = {-1, -2, {-3, -4, -5}};
            big_struct.substruct = small_struct;
            if (big_struct.substruct.a != -1 || big_struct.substruct.b != -2 ||
                big_struct.substruct.arr[0] != -3 ||
                big_struct.substruct.arr[1] != -4 ||
                big_struct.substruct.arr[2] != -5) {
                return 0;
            }
            if (big_struct.x || big_struct.y) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_nested_member(void) {
            struct outermost biggest_struct = {{{-1, -2, {-3, -4, -5}}, -6, -7}, 0};
            static struct inner small_struct;
            small_struct = biggest_struct.nested.substruct;
            if (small_struct.a != -1 || small_struct.b != -2 ||
                small_struct.arr[0] != -3 || small_struct.arr[1] != -4 ||
                small_struct.arr[2] != -5) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_nested_member(void) {
            struct outermost biggest_struct = {{{0, 0, {0, 0, 0}}, 0, 0}, -1};
            static struct inner small_struct = {50, 51, {52, 53, 54}};
            biggest_struct.nested.substruct = small_struct;
            if (biggest_struct.nested.substruct.a != 50 ||
                biggest_struct.nested.substruct.b != 51 ||
                biggest_struct.nested.substruct.arr[0] != 52 ||
                biggest_struct.nested.substruct.arr[1] != 53 ||
                biggest_struct.nested.substruct.arr[2] != 54) {
                return 0;
            }
            if (biggest_struct.nested.x || biggest_struct.nested.y) {
                return 0;
            }
            if (biggest_struct.i != -1) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_conditional(void) {
            struct outer big_struct = {{127, -128, {61, 62, 63}}, -10, -11};
            struct outer big_struct2 = {{0, 1, {2, 3, 4}}, 5, 6};
            static int t = 1;
            static int f = 0;
            struct inner small_struct = (f ? big_struct : big_struct2).substruct;
            if (small_struct.a != 0 || small_struct.b != 1 ||
                small_struct.arr[0] != 2 || small_struct.arr[1] != 3 ||
                small_struct.arr[2] != 4) {
                return 0;
            }
            small_struct = (t ? big_struct : big_struct2).substruct;
            if (small_struct.a != 127 || small_struct.b != -128 ||
                small_struct.arr[0] != 61 || small_struct.arr[1] != 62 ||
                small_struct.arr[2] != 63) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_assignment(void) {
            struct outer big_struct = {{127, -128, {61, 62, 63}}, -10, -11};
            static struct outer big_struct2;
            static struct inner small_struct;
            small_struct = (big_struct2 = big_struct).substruct;
            if (small_struct.a != 127 || small_struct.b != -128 ||
                small_struct.arr[0] != 61 || small_struct.arr[1] != 62 ||
                small_struct.arr[2] != 63) {
                return 0;
            }
            if (big_struct2.substruct.a != 127 || big_struct2.substruct.b != -128 ||
                big_struct2.substruct.arr[0] != 61 ||
                big_struct2.substruct.arr[1] != 62 ||
                big_struct2.substruct.arr[2] != 63 || big_struct2.x != -10 ||
                big_struct2.y != -11) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_copy_from_member()) {
                return 1;
            }
            if (!test_copy_to_member()) {
                return 2;
            }
            if (!test_copy_from_nested_member()) {
                return 3;
            }
            if (!test_copy_to_nested_member()) {
                return 4;
            }
            if (!test_copy_from_conditional()) {
                return 6;
            }
            if (!test_copy_from_assignment()) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Signed Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── b
            │   │   ╰── Type
            │   │       ╰── Signed Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Signed Char
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── substruct
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Signed Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Signed Char
            ├── Struct [outermost]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── nested
            │   │   ╰── Type
            │   │       ╰── Struct [outer]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Function [test_copy_from_member]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── big_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── Compound
            │       │   │       │   ├── <54> Constant Int [10]
            │       │   │       │   ├── <56> Constant Int [9]
            │       │   │       │   ╰── Compound
            │       │   │       │       ├── <58> Constant Int [8]
            │       │   │       │       ├── <60> Constant Int [7]
            │       │   │       │       ╰── <62> Constant Int [6]
            │       │   │       ├── <66> Constant Int [5]
            │       │   │       ╰── <68> Constant Int [4]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <78> Constant Int [97]
            │       │           ├── <80> Constant Int [98]
            │       │           ╰── <82> Constant Int [99]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── substruct
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <92> Unary [-]
            │       │           │   ╰── <91> Constant Int [1]
            │       │           ├── <96> Unary [-]
            │       │           │   ╰── <95> Constant Int [1]
            │       │           ╰── Compound
            │       │               ├── <100> Unary [-]
            │       │               │   ╰── <99> Constant Int [1]
            │       │               ├── <104> Unary [-]
            │       │               │   ╰── <103> Constant Int [1]
            │       │               ╰── <108> Unary [-]
            │       │                   ╰── <107> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr2
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Char
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <119> Constant Int [100]
            │       │           ├── <121> Constant Int [101]
            │       │           ╰── <123> Constant Int [102]
            │       ├── <134> Assign [=]
            │       │   ├── <128> Var [substruct]
            │       │   ╰── <133> Dot
            │       │       ├── <131> Var [big_struct]
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <184>  [||]
            │       │   │       ├── <173>  [||]
            │       │   │       │   ├── <162>  [||]
            │       │   │       │   │   ├── <151>  [||]
            │       │   │       │   │   │   ├── <142>  [!=]
            │       │   │       │   │   │   │   ├── <139> Dot
            │       │   │       │   │   │   │   │   ├── <137> Var [substruct]
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <141> Constant Int [10]
            │       │   │       │   │   │   ╰── <150>  [!=]
            │       │   │       │   │   │       ├── <147> Dot
            │       │   │       │   │   │       │   ├── <145> Var [substruct]
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <149> Constant Int [9]
            │       │   │       │   │   ╰── <161>  [!=]
            │       │   │       │   │       ├── <158> Subscript
            │       │   │       │   │       │   ├── <156> Dot
            │       │   │       │   │       │   │   ├── <154> Var [substruct]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <157> Constant Int [0]
            │       │   │       │   │       ╰── <160> Constant Int [8]
            │       │   │       │   ╰── <172>  [!=]
            │       │   │       │       ├── <169> Subscript
            │       │   │       │       │   ├── <167> Dot
            │       │   │       │       │   │   ├── <165> Var [substruct]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <168> Constant Int [1]
            │       │   │       │       ╰── <171> Constant Int [7]
            │       │   │       ╰── <183>  [!=]
            │       │   │           ├── <180> Subscript
            │       │   │           │   ├── <178> Dot
            │       │   │           │   │   ├── <176> Var [substruct]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <179> Constant Int [2]
            │       │   │           ╰── <182> Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <185> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <241>  [||]
            │       │   │       ├── <232>  [||]
            │       │   │       │   ├── <223>  [||]
            │       │   │       │   │   ├── <214>  [||]
            │       │   │       │   │   │   ├── <205>  [||]
            │       │   │       │   │   │   │   ├── <196>  [!=]
            │       │   │       │   │   │   │   │   ├── <193> Subscript
            │       │   │       │   │   │   │   │   │   ├── <191> Var [arr]
            │       │   │       │   │   │   │   │   │   ╰── <192> Constant Int [0]
            │       │   │       │   │   │   │   │   ╰── <195> Constant Int [97]
            │       │   │       │   │   │   │   ╰── <204>  [!=]
            │       │   │       │   │   │   │       ├── <201> Subscript
            │       │   │       │   │   │   │       │   ├── <199> Var [arr]
            │       │   │       │   │   │   │       │   ╰── <200> Constant Int [1]
            │       │   │       │   │   │   │       ╰── <203> Constant Int [98]
            │       │   │       │   │   │   ╰── <213>  [!=]
            │       │   │       │   │   │       ├── <210> Subscript
            │       │   │       │   │   │       │   ├── <208> Var [arr]
            │       │   │       │   │   │       │   ╰── <209> Constant Int [2]
            │       │   │       │   │   │       ╰── <212> Constant Int [99]
            │       │   │       │   │   ╰── <222>  [!=]
            │       │   │       │   │       ├── <219> Subscript
            │       │   │       │   │       │   ├── <217> Var [arr2]
            │       │   │       │   │       │   ╰── <218> Constant Int [0]
            │       │   │       │   │       ╰── <221> Constant Int [100]
            │       │   │       │   ╰── <231>  [!=]
            │       │   │       │       ├── <228> Subscript
            │       │   │       │       │   ├── <226> Var [arr2]
            │       │   │       │       │   ╰── <227> Constant Int [1]
            │       │   │       │       ╰── <230> Constant Int [101]
            │       │   │       ╰── <240>  [!=]
            │       │   │           ├── <237> Subscript
            │       │   │           │   ├── <235> Var [arr2]
            │       │   │           │   ╰── <236> Constant Int [2]
            │       │   │           ╰── <239> Constant Int [102]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <242> Constant Int [0]
            │       ╰── Return
            │           ╰── <247> Constant Int [1]
            ├── Function [test_copy_to_member]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── big_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── Compound
            │       │   │       │   ├── <261> Constant Int [0]
            │       │   │       │   ├── <263> Constant Int [0]
            │       │   │       │   ╰── Compound
            │       │   │       │       ├── <265> Constant Int [0]
            │       │   │       │       ├── <267> Constant Int [0]
            │       │   │       │       ╰── <269> Constant Int [0]
            │       │   │       ├── <273> Constant Int [0]
            │       │   │       ╰── <275> Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <285> Unary [-]
            │       │           │   ╰── <284> Constant Int [1]
            │       │           ├── <289> Unary [-]
            │       │           │   ╰── <288> Constant Int [2]
            │       │           ╰── Compound
            │       │               ├── <293> Unary [-]
            │       │               │   ╰── <292> Constant Int [3]
            │       │               ├── <297> Unary [-]
            │       │               │   ╰── <296> Constant Int [4]
            │       │               ╰── <301> Unary [-]
            │       │                   ╰── <300> Constant Int [5]
            │       ├── <313> Assign [=]
            │       │   ├── <309> Dot
            │       │   │   ├── <307> Var [big_struct]
            │       │   │   ╰── substruct
            │       │   ╰── <312> Var [small_struct]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <383>  [||]
            │       │   │       ├── <368>  [||]
            │       │   │       │   ├── <353>  [||]
            │       │   │       │   │   ├── <338>  [||]
            │       │   │       │   │   │   ├── <325>  [!=]
            │       │   │       │   │   │   │   ├── <320> Dot
            │       │   │       │   │   │   │   │   ├── <318> Dot
            │       │   │       │   │   │   │   │   │   ├── <316> Var [big_struct]
            │       │   │       │   │   │   │   │   │   ╰── substruct
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <324> Unary [-]
            │       │   │       │   │   │   │       ╰── <323> Constant Int [1]
            │       │   │       │   │   │   ╰── <337>  [!=]
            │       │   │       │   │   │       ├── <332> Dot
            │       │   │       │   │   │       │   ├── <330> Dot
            │       │   │       │   │   │       │   │   ├── <328> Var [big_struct]
            │       │   │       │   │   │       │   │   ╰── substruct
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <336> Unary [-]
            │       │   │       │   │   │           ╰── <335> Constant Int [2]
            │       │   │       │   │   ╰── <352>  [!=]
            │       │   │       │   │       ├── <347> Subscript
            │       │   │       │   │       │   ├── <345> Dot
            │       │   │       │   │       │   │   ├── <343> Dot
            │       │   │       │   │       │   │   │   ├── <341> Var [big_struct]
            │       │   │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <346> Constant Int [0]
            │       │   │       │   │       ╰── <351> Unary [-]
            │       │   │       │   │           ╰── <350> Constant Int [3]
            │       │   │       │   ╰── <367>  [!=]
            │       │   │       │       ├── <362> Subscript
            │       │   │       │       │   ├── <360> Dot
            │       │   │       │       │   │   ├── <358> Dot
            │       │   │       │       │   │   │   ├── <356> Var [big_struct]
            │       │   │       │       │   │   │   ╰── substruct
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <361> Constant Int [1]
            │       │   │       │       ╰── <366> Unary [-]
            │       │   │       │           ╰── <365> Constant Int [4]
            │       │   │       ╰── <382>  [!=]
            │       │   │           ├── <377> Subscript
            │       │   │           │   ├── <375> Dot
            │       │   │           │   │   ├── <373> Dot
            │       │   │           │   │   │   ├── <371> Var [big_struct]
            │       │   │           │   │   │   ╰── substruct
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <376> Constant Int [2]
            │       │   │           ╰── <381> Unary [-]
            │       │   │               ╰── <380> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <384> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <398>  [||]
            │       │   │       ├── <392> Dot
            │       │   │       │   ├── <390> Var [big_struct]
            │       │   │       │   ╰── x
            │       │   │       ╰── <397> Dot
            │       │   │           ├── <395> Var [big_struct]
            │       │   │           ╰── y
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <399> Constant Int [0]
            │       ╰── Return
            │           ╰── <404> Constant Int [1]
            ├── Function [test_copy_from_nested_member]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── biggest_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── Compound
            │       │           │   │   ├── <419> Unary [-]
            │       │           │   │   │   ╰── <418> Constant Int [1]
            │       │           │   │   ├── <423> Unary [-]
            │       │           │   │   │   ╰── <422> Constant Int [2]
            │       │           │   │   ╰── Compound
            │       │           │   │       ├── <427> Unary [-]
            │       │           │   │       │   ╰── <426> Constant Int [3]
            │       │           │   │       ├── <431> Unary [-]
            │       │           │   │       │   ╰── <430> Constant Int [4]
            │       │           │   │       ╰── <435> Unary [-]
            │       │           │   │           ╰── <434> Constant Int [5]
            │       │           │   ├── <441> Unary [-]
            │       │           │   │   ╰── <440> Constant Int [6]
            │       │           │   ╰── <445> Unary [-]
            │       │           │       ╰── <444> Constant Int [7]
            │       │           ╰── <448> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Static
            │       ├── <467> Assign [=]
            │       │   ├── <459> Var [small_struct]
            │       │   ╰── <466> Dot
            │       │       ├── <464> Dot
            │       │       │   ├── <462> Var [biggest_struct]
            │       │       │   ╰── nested
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <527>  [||]
            │       │   │       ├── <514>  [||]
            │       │   │       │   ├── <501>  [||]
            │       │   │       │   │   ├── <488>  [||]
            │       │   │       │   │   │   ├── <477>  [!=]
            │       │   │       │   │   │   │   ├── <472> Dot
            │       │   │       │   │   │   │   │   ├── <470> Var [small_struct]
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <476> Unary [-]
            │       │   │       │   │   │   │       ╰── <475> Constant Int [1]
            │       │   │       │   │   │   ╰── <487>  [!=]
            │       │   │       │   │   │       ├── <482> Dot
            │       │   │       │   │   │       │   ├── <480> Var [small_struct]
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <486> Unary [-]
            │       │   │       │   │   │           ╰── <485> Constant Int [2]
            │       │   │       │   │   ╰── <500>  [!=]
            │       │   │       │   │       ├── <495> Subscript
            │       │   │       │   │       │   ├── <493> Dot
            │       │   │       │   │       │   │   ├── <491> Var [small_struct]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <494> Constant Int [0]
            │       │   │       │   │       ╰── <499> Unary [-]
            │       │   │       │   │           ╰── <498> Constant Int [3]
            │       │   │       │   ╰── <513>  [!=]
            │       │   │       │       ├── <508> Subscript
            │       │   │       │       │   ├── <506> Dot
            │       │   │       │       │   │   ├── <504> Var [small_struct]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <507> Constant Int [1]
            │       │   │       │       ╰── <512> Unary [-]
            │       │   │       │           ╰── <511> Constant Int [4]
            │       │   │       ╰── <526>  [!=]
            │       │   │           ├── <521> Subscript
            │       │   │           │   ├── <519> Dot
            │       │   │           │   │   ├── <517> Var [small_struct]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <520> Constant Int [2]
            │       │   │           ╰── <525> Unary [-]
            │       │   │               ╰── <524> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <528> Constant Int [0]
            │       ╰── Return
            │           ╰── <533> Constant Int [1]
            ├── Function [test_copy_to_nested_member]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── biggest_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [outermost]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── Compound
            │       │           │   │   ├── <546> Constant Int [0]
            │       │           │   │   ├── <548> Constant Int [0]
            │       │           │   │   ╰── Compound
            │       │           │   │       ├── <550> Constant Int [0]
            │       │           │   │       ├── <552> Constant Int [0]
            │       │           │   │       ╰── <554> Constant Int [0]
            │       │           │   ├── <558> Constant Int [0]
            │       │           │   ╰── <560> Constant Int [0]
            │       │           ╰── <565> Unary [-]
            │       │               ╰── <564> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── <574> Constant Int [50]
            │       │   │       ├── <576> Constant Int [51]
            │       │   │       ╰── Compound
            │       │   │           ├── <578> Constant Int [52]
            │       │   │           ├── <580> Constant Int [53]
            │       │   │           ╰── <582> Constant Int [54]
            │       │   ╰── Static
            │       ├── <596> Assign [=]
            │       │   ├── <592> Dot
            │       │   │   ├── <590> Dot
            │       │   │   │   ├── <588> Var [biggest_struct]
            │       │   │   │   ╰── nested
            │       │   │   ╰── substruct
            │       │   ╰── <595> Var [small_struct]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <666>  [||]
            │       │   │       ├── <651>  [||]
            │       │   │       │   ├── <636>  [||]
            │       │   │       │   │   ├── <621>  [||]
            │       │   │       │   │   │   ├── <608>  [!=]
            │       │   │       │   │   │   │   ├── <605> Dot
            │       │   │       │   │   │   │   │   ├── <603> Dot
            │       │   │       │   │   │   │   │   │   ├── <601> Dot
            │       │   │       │   │   │   │   │   │   │   ├── <599> Var [biggest_struct]
            │       │   │       │   │   │   │   │   │   │   ╰── nested
            │       │   │       │   │   │   │   │   │   ╰── substruct
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <607> Constant Int [50]
            │       │   │       │   │   │   ╰── <620>  [!=]
            │       │   │       │   │   │       ├── <617> Dot
            │       │   │       │   │   │       │   ├── <615> Dot
            │       │   │       │   │   │       │   │   ├── <613> Dot
            │       │   │       │   │   │       │   │   │   ├── <611> Var [biggest_struct]
            │       │   │       │   │   │       │   │   │   ╰── nested
            │       │   │       │   │   │       │   │   ╰── substruct
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <619> Constant Int [51]
            │       │   │       │   │   ╰── <635>  [!=]
            │       │   │       │   │       ├── <632> Subscript
            │       │   │       │   │       │   ├── <630> Dot
            │       │   │       │   │       │   │   ├── <628> Dot
            │       │   │       │   │       │   │   │   ├── <626> Dot
            │       │   │       │   │       │   │   │   │   ├── <624> Var [biggest_struct]
            │       │   │       │   │       │   │   │   │   ╰── nested
            │       │   │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <631> Constant Int [0]
            │       │   │       │   │       ╰── <634> Constant Int [52]
            │       │   │       │   ╰── <650>  [!=]
            │       │   │       │       ├── <647> Subscript
            │       │   │       │       │   ├── <645> Dot
            │       │   │       │       │   │   ├── <643> Dot
            │       │   │       │       │   │   │   ├── <641> Dot
            │       │   │       │       │   │   │   │   ├── <639> Var [biggest_struct]
            │       │   │       │       │   │   │   │   ╰── nested
            │       │   │       │       │   │   │   ╰── substruct
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <646> Constant Int [1]
            │       │   │       │       ╰── <649> Constant Int [53]
            │       │   │       ╰── <665>  [!=]
            │       │   │           ├── <662> Subscript
            │       │   │           │   ├── <660> Dot
            │       │   │           │   │   ├── <658> Dot
            │       │   │           │   │   │   ├── <656> Dot
            │       │   │           │   │   │   │   ├── <654> Var [biggest_struct]
            │       │   │           │   │   │   │   ╰── nested
            │       │   │           │   │   │   ╰── substruct
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <661> Constant Int [2]
            │       │   │           ╰── <664> Constant Int [54]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <667> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <685>  [||]
            │       │   │       ├── <677> Dot
            │       │   │       │   ├── <675> Dot
            │       │   │       │   │   ├── <673> Var [biggest_struct]
            │       │   │       │   │   ╰── nested
            │       │   │       │   ╰── x
            │       │   │       ╰── <684> Dot
            │       │   │           ├── <682> Dot
            │       │   │           │   ├── <680> Var [biggest_struct]
            │       │   │           │   ╰── nested
            │       │   │           ╰── y
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <686> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <699>  [!=]
            │       │   │       ├── <694> Dot
            │       │   │       │   ├── <692> Var [biggest_struct]
            │       │   │       │   ╰── i
            │       │   │       ╰── <698> Unary [-]
            │       │   │           ╰── <697> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <700> Constant Int [0]
            │       ╰── Return
            │           ╰── <705> Constant Int [1]
            ├── Function [test_copy_from_conditional]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── big_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <718> Constant Int [127]
            │       │           │   ├── <722> Unary [-]
            │       │           │   │   ╰── <721> Constant Int [128]
            │       │           │   ╰── Compound
            │       │           │       ├── <724> Constant Int [61]
            │       │           │       ├── <726> Constant Int [62]
            │       │           │       ╰── <728> Constant Int [63]
            │       │           ├── <734> Unary [-]
            │       │           │   ╰── <733> Constant Int [10]
            │       │           ╰── <738> Unary [-]
            │       │               ╰── <737> Constant Int [11]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── big_struct2
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <746> Constant Int [0]
            │       │           │   ├── <748> Constant Int [1]
            │       │           │   ╰── Compound
            │       │           │       ├── <750> Constant Int [2]
            │       │           │       ├── <752> Constant Int [3]
            │       │           │       ╰── <754> Constant Int [4]
            │       │           ├── <758> Constant Int [5]
            │       │           ╰── <760> Constant Int [6]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── t
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <768> Constant Int [1]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── <775> Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── <791> Dot
            │       │           ├── <789> Conditional [?]
            │       │           │   ├── <783> Var [f]
            │       │           │   ├── Then
            │       │           │   │   ╰── <785> Var [big_struct]
            │       │           │   ╰── Else
            │       │           │       ╰── <787> Var [big_struct2]
            │       │           ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <842>  [||]
            │       │   │       ├── <831>  [||]
            │       │   │       │   ├── <820>  [||]
            │       │   │       │   │   ├── <809>  [||]
            │       │   │       │   │   │   ├── <800>  [!=]
            │       │   │       │   │   │   │   ├── <797> Dot
            │       │   │       │   │   │   │   │   ├── <795> Var [small_struct]
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <799> Constant Int [0]
            │       │   │       │   │   │   ╰── <808>  [!=]
            │       │   │       │   │   │       ├── <805> Dot
            │       │   │       │   │   │       │   ├── <803> Var [small_struct]
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <807> Constant Int [1]
            │       │   │       │   │   ╰── <819>  [!=]
            │       │   │       │   │       ├── <816> Subscript
            │       │   │       │   │       │   ├── <814> Dot
            │       │   │       │   │       │   │   ├── <812> Var [small_struct]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <815> Constant Int [0]
            │       │   │       │   │       ╰── <818> Constant Int [2]
            │       │   │       │   ╰── <830>  [!=]
            │       │   │       │       ├── <827> Subscript
            │       │   │       │       │   ├── <825> Dot
            │       │   │       │       │   │   ├── <823> Var [small_struct]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <826> Constant Int [1]
            │       │   │       │       ╰── <829> Constant Int [3]
            │       │   │       ╰── <841>  [!=]
            │       │   │           ├── <838> Subscript
            │       │   │           │   ├── <836> Dot
            │       │   │           │   │   ├── <834> Var [small_struct]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <837> Constant Int [2]
            │       │   │           ╰── <840> Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <843> Constant Int [0]
            │       ├── <861> Assign [=]
            │       │   ├── <849> Var [small_struct]
            │       │   ╰── <860> Dot
            │       │       ├── <858> Conditional [?]
            │       │       │   ├── <852> Var [t]
            │       │       │   ├── Then
            │       │       │   │   ╰── <854> Var [big_struct]
            │       │       │   ╰── Else
            │       │       │       ╰── <856> Var [big_struct2]
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <913>  [||]
            │       │   │       ├── <902>  [||]
            │       │   │       │   ├── <891>  [||]
            │       │   │       │   │   ├── <880>  [||]
            │       │   │       │   │   │   ├── <869>  [!=]
            │       │   │       │   │   │   │   ├── <866> Dot
            │       │   │       │   │   │   │   │   ├── <864> Var [small_struct]
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <868> Constant Int [127]
            │       │   │       │   │   │   ╰── <879>  [!=]
            │       │   │       │   │   │       ├── <874> Dot
            │       │   │       │   │   │       │   ├── <872> Var [small_struct]
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <878> Unary [-]
            │       │   │       │   │   │           ╰── <877> Constant Int [128]
            │       │   │       │   │   ╰── <890>  [!=]
            │       │   │       │   │       ├── <887> Subscript
            │       │   │       │   │       │   ├── <885> Dot
            │       │   │       │   │       │   │   ├── <883> Var [small_struct]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <886> Constant Int [0]
            │       │   │       │   │       ╰── <889> Constant Int [61]
            │       │   │       │   ╰── <901>  [!=]
            │       │   │       │       ├── <898> Subscript
            │       │   │       │       │   ├── <896> Dot
            │       │   │       │       │   │   ├── <894> Var [small_struct]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <897> Constant Int [1]
            │       │   │       │       ╰── <900> Constant Int [62]
            │       │   │       ╰── <912>  [!=]
            │       │   │           ├── <909> Subscript
            │       │   │           │   ├── <907> Dot
            │       │   │           │   │   ├── <905> Var [small_struct]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <908> Constant Int [2]
            │       │   │           ╰── <911> Constant Int [63]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <914> Constant Int [0]
            │       ╰── Return
            │           ╰── <919> Constant Int [1]
            ├── Function [test_copy_from_assignment]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── big_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <932> Constant Int [127]
            │       │           │   ├── <936> Unary [-]
            │       │           │   │   ╰── <935> Constant Int [128]
            │       │           │   ╰── Compound
            │       │           │       ├── <938> Constant Int [61]
            │       │           │       ├── <940> Constant Int [62]
            │       │           │       ╰── <942> Constant Int [63]
            │       │           ├── <948> Unary [-]
            │       │           │   ╰── <947> Constant Int [10]
            │       │           ╰── <952> Unary [-]
            │       │               ╰── <951> Constant Int [11]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── big_struct2
            │       │   ├── Type
            │       │   │   ╰── Struct [outer]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small_struct
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Static
            │       ├── <980> Assign [=]
            │       │   ├── <969> Var [small_struct]
            │       │   ╰── <979> Dot
            │       │       ├── <977> Assign [=]
            │       │       │   ├── <972> Var [big_struct2]
            │       │       │   ╰── <975> Var [big_struct]
            │       │       ╰── substruct
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1032>  [||]
            │       │   │       ├── <1021>  [||]
            │       │   │       │   ├── <1010>  [||]
            │       │   │       │   │   ├── <999>  [||]
            │       │   │       │   │   │   ├── <988>  [!=]
            │       │   │       │   │   │   │   ├── <985> Dot
            │       │   │       │   │   │   │   │   ├── <983> Var [small_struct]
            │       │   │       │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   ╰── <987> Constant Int [127]
            │       │   │       │   │   │   ╰── <998>  [!=]
            │       │   │       │   │   │       ├── <993> Dot
            │       │   │       │   │   │       │   ├── <991> Var [small_struct]
            │       │   │       │   │   │       │   ╰── b
            │       │   │       │   │   │       ╰── <997> Unary [-]
            │       │   │       │   │   │           ╰── <996> Constant Int [128]
            │       │   │       │   │   ╰── <1009>  [!=]
            │       │   │       │   │       ├── <1006> Subscript
            │       │   │       │   │       │   ├── <1004> Dot
            │       │   │       │   │       │   │   ├── <1002> Var [small_struct]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <1005> Constant Int [0]
            │       │   │       │   │       ╰── <1008> Constant Int [61]
            │       │   │       │   ╰── <1020>  [!=]
            │       │   │       │       ├── <1017> Subscript
            │       │   │       │       │   ├── <1015> Dot
            │       │   │       │       │   │   ├── <1013> Var [small_struct]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <1016> Constant Int [1]
            │       │   │       │       ╰── <1019> Constant Int [62]
            │       │   │       ╰── <1031>  [!=]
            │       │   │           ├── <1028> Subscript
            │       │   │           │   ├── <1026> Dot
            │       │   │           │   │   ├── <1024> Var [small_struct]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <1027> Constant Int [2]
            │       │   │           ╰── <1030> Constant Int [63]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1033> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1120>  [||]
            │       │   │       ├── <1109>  [||]
            │       │   │       │   ├── <1098>  [||]
            │       │   │       │   │   ├── <1085>  [||]
            │       │   │       │   │   │   ├── <1072>  [||]
            │       │   │       │   │   │   │   ├── <1059>  [||]
            │       │   │       │   │   │   │   │   ├── <1046>  [!=]
            │       │   │       │   │   │   │   │   │   ├── <1043> Dot
            │       │   │       │   │   │   │   │   │   │   ├── <1041> Dot
            │       │   │       │   │   │   │   │   │   │   │   ├── <1039> Var [big_struct2]
            │       │   │       │   │   │   │   │   │   │   │   ╰── substruct
            │       │   │       │   │   │   │   │   │   │   ╰── a
            │       │   │       │   │   │   │   │   │   ╰── <1045> Constant Int [127]
            │       │   │       │   │   │   │   │   ╰── <1058>  [!=]
            │       │   │       │   │   │   │   │       ├── <1053> Dot
            │       │   │       │   │   │   │   │       │   ├── <1051> Dot
            │       │   │       │   │   │   │   │       │   │   ├── <1049> Var [big_struct2]
            │       │   │       │   │   │   │   │       │   │   ╰── substruct
            │       │   │       │   │   │   │   │       │   ╰── b
            │       │   │       │   │   │   │   │       ╰── <1057> Unary [-]
            │       │   │       │   │   │   │   │           ╰── <1056> Constant Int [128]
            │       │   │       │   │   │   │   ╰── <1071>  [!=]
            │       │   │       │   │   │   │       ├── <1068> Subscript
            │       │   │       │   │   │   │       │   ├── <1066> Dot
            │       │   │       │   │   │   │       │   │   ├── <1064> Dot
            │       │   │       │   │   │   │       │   │   │   ├── <1062> Var [big_struct2]
            │       │   │       │   │   │   │       │   │   │   ╰── substruct
            │       │   │       │   │   │   │       │   │   ╰── arr
            │       │   │       │   │   │   │       │   ╰── <1067> Constant Int [0]
            │       │   │       │   │   │   │       ╰── <1070> Constant Int [61]
            │       │   │       │   │   │   ╰── <1084>  [!=]
            │       │   │       │   │   │       ├── <1081> Subscript
            │       │   │       │   │   │       │   ├── <1079> Dot
            │       │   │       │   │   │       │   │   ├── <1077> Dot
            │       │   │       │   │   │       │   │   │   ├── <1075> Var [big_struct2]
            │       │   │       │   │   │       │   │   │   ╰── substruct
            │       │   │       │   │   │       │   │   ╰── arr
            │       │   │       │   │   │       │   ╰── <1080> Constant Int [1]
            │       │   │       │   │   │       ╰── <1083> Constant Int [62]
            │       │   │       │   │   ╰── <1097>  [!=]
            │       │   │       │   │       ├── <1094> Subscript
            │       │   │       │   │       │   ├── <1092> Dot
            │       │   │       │   │       │   │   ├── <1090> Dot
            │       │   │       │   │       │   │   │   ├── <1088> Var [big_struct2]
            │       │   │       │   │       │   │   │   ╰── substruct
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <1093> Constant Int [2]
            │       │   │       │   │       ╰── <1096> Constant Int [63]
            │       │   │       │   ╰── <1108>  [!=]
            │       │   │       │       ├── <1103> Dot
            │       │   │       │       │   ├── <1101> Var [big_struct2]
            │       │   │       │       │   ╰── x
            │       │   │       │       ╰── <1107> Unary [-]
            │       │   │       │           ╰── <1106> Constant Int [10]
            │       │   │       ╰── <1119>  [!=]
            │       │   │           ├── <1114> Dot
            │       │   │           │   ├── <1112> Var [big_struct2]
            │       │   │           │   ╰── y
            │       │   │           ╰── <1118> Unary [-]
            │       │   │               ╰── <1117> Constant Int [11]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1121> Constant Int [0]
            │       ╰── Return
            │           ╰── <1126> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1138> Unary [!]
                    │   │       ╰── <1137> FunctionCall [test_copy_from_member]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1139> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1147> Unary [!]
                    │   │       ╰── <1146> FunctionCall [test_copy_to_member]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1148> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1156> Unary [!]
                    │   │       ╰── <1155> FunctionCall [test_copy_from_nested_member]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1157> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1165> Unary [!]
                    │   │       ╰── <1164> FunctionCall [test_copy_to_nested_member]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1166> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1174> Unary [!]
                    │   │       ╰── <1173> FunctionCall [test_copy_from_conditional]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1175> Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1183> Unary [!]
                    │   │       ╰── <1182> FunctionCall [test_copy_from_assignment]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1184> Constant Int [7]
                    ╰── Return
                        ╰── <1189> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_stack_clobber() {
    let src = r#"
        void exit(int status);
        struct chars {
            char char_array[3];
        };
        static struct chars y = {{0, 1, 2}};
        static struct chars *ptr;
        void validate_array(char *char_array, int start, int code) {
            for (int i = 0; i < 3; i = i + 1) {
                if (char_array[i] != start + i) {
                    exit(code);
                }
            }
            return;
        }
        void increment_y(void) {
            y.char_array[0] = y.char_array[0] + 3;
            y.char_array[1] = y.char_array[1] + 3;
            y.char_array[2] = y.char_array[2] + 3;
        }
        int test_copy(void) {
            struct chars a = {"abc"};
            struct chars b = {"xyz"};
            struct chars c = {"def"};
            b = y;
            validate_array(a.char_array, 'a', 1);
            validate_array(b.char_array, 0, 2);
            validate_array(c.char_array, 'd', 3);
            return 0;
        }
        static struct chars to_validate;
        void validate_static(int start, int code) {
            validate_array(to_validate.char_array, start, code);
        }
        int test_load(void) {
            static struct chars b;
            struct chars a = {"ghi"};
            b = *ptr;
            to_validate = a;
            validate_static('g', 4);
            to_validate = b;
            validate_static(3, 5);
            return 0;
        }
        int test_store(void) {
            struct chars struct_array[3] = {{"jkl"}, {"xyz"}, {"mno"}};
            struct chars *ptr = &struct_array[1];
            *ptr = y;
            validate_array(struct_array[0].char_array, 'j', 6);
            validate_array(struct_array[1].char_array, 6, 7);
            validate_array(struct_array[2].char_array, 'm', 8);
            return 0;
        }
        struct chars_container {
            char c;
            struct chars chars;
            char arr[3];
        };
        int test_copy_from_offset(void) {
            struct chars a = {"pqr"};
            static struct chars b = {"xyz"};
            static struct chars_container container = {100, {{9, 10, 11}}, "123"};
            b = container.chars;
            to_validate = a;
            validate_static('p', 9);
            to_validate = b;
            validate_static(9, 10);
            return 0;
        }
        int test_copy_to_offset(void) {
            struct chars_container container = {
                'x', {{0, 0, 0}}, "stu"
            };
            container.chars = y;
            if (container.c != 'x') {
                exit(11);
            }
            validate_array(container.chars.char_array, 12, 12);
            validate_array(container.arr, 's', 13);
            return 0;
        }
        int main(void) {
            ptr = &y;
            test_copy();
            increment_y();
            test_load();
            increment_y();
            test_store();
            increment_y();
            test_copy_from_offset();
            increment_y();
            test_copy_to_offset();
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Struct [chars]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── char_array
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── y
            │   ├── Type
            │   │   ╰── Struct [chars]
            │   ├── Initializer
            │   │   ╰── Compound
            │   │       ╰── Compound
            │   │           ├── <24> Constant Int [0]
            │   │           ├── <26> Constant Int [1]
            │   │           ╰── <28> Constant Int [2]
            │   ╰── Static
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Struct [chars]
            │   ╰── Static
            ├── Function [validate_array]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── char_array
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── start
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <60> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <68>  [<]
            │       │   │       ├── <65> Var [i]
            │       │   │       ╰── <67> Constant Int [3]
            │       │   ├── Condition
            │       │   │   ╰── <77> Assign [=]
            │       │   │       ├── <70> Var [i]
            │       │   │       ╰── <76>  [+]
            │       │   │           ├── <73> Var [i]
            │       │   │           ╰── <75> Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <90>  [!=]
            │       │           │       ├── <82> Subscript
            │       │           │       │   ├── <79> Var [char_array]
            │       │           │       │   ╰── <81> Var [i]
            │       │           │       ╰── <89>  [+]
            │       │           │           ├── <85> Var [start]
            │       │           │           ╰── <88> Var [i]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── <94> FunctionCall [exit]
            │       │                       ╰── <93> Var [code]
            │       ╰── Return
            ├── Function [increment_y]
            │   ╰── Body
            │       ├── <126> Assign [=]
            │       │   ├── <115> Subscript
            │       │   │   ├── <113> Dot
            │       │   │   │   ├── <111> Var [y]
            │       │   │   │   ╰── char_array
            │       │   │   ╰── <114> Constant Int [0]
            │       │   ╰── <125>  [+]
            │       │       ├── <122> Subscript
            │       │       │   ├── <120> Dot
            │       │       │   │   ├── <118> Var [y]
            │       │       │   │   ╰── char_array
            │       │       │   ╰── <121> Constant Int [0]
            │       │       ╰── <124> Constant Int [3]
            │       ├── <144> Assign [=]
            │       │   ├── <133> Subscript
            │       │   │   ├── <131> Dot
            │       │   │   │   ├── <129> Var [y]
            │       │   │   │   ╰── char_array
            │       │   │   ╰── <132> Constant Int [1]
            │       │   ╰── <143>  [+]
            │       │       ├── <140> Subscript
            │       │       │   ├── <138> Dot
            │       │       │   │   ├── <136> Var [y]
            │       │       │   │   ╰── char_array
            │       │       │   ╰── <139> Constant Int [1]
            │       │       ╰── <142> Constant Int [3]
            │       ╰── <162> Assign [=]
            │           ├── <151> Subscript
            │           │   ├── <149> Dot
            │           │   │   ├── <147> Var [y]
            │           │   │   ╰── char_array
            │           │   ╰── <150> Constant Int [2]
            │           ╰── <161>  [+]
            │               ├── <158> Subscript
            │               │   ├── <156> Dot
            │               │   │   ├── <154> Var [y]
            │               │   │   ╰── char_array
            │               │   ╰── <157> Constant Int [2]
            │               ╰── <160> Constant Int [3]
            ├── Function [test_copy]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <175> "abc"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <183> "xyz"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <191> "def"
            │       ├── <200> Assign [=]
            │       │   ├── <196> Var [b]
            │       │   ╰── <199> Var [y]
            │       ├── <209> FunctionCall [validate_array]
            │       │   ├── <206> Dot
            │       │   │   ├── <204> Var [a]
            │       │   │   ╰── char_array
            │       │   ├── <207> Constant Int [97]
            │       │   ╰── <208> Constant Int [1]
            │       ├── <218> FunctionCall [validate_array]
            │       │   ├── <215> Dot
            │       │   │   ├── <213> Var [b]
            │       │   │   ╰── char_array
            │       │   ├── <216> Constant Int [0]
            │       │   ╰── <217> Constant Int [2]
            │       ├── <227> FunctionCall [validate_array]
            │       │   ├── <224> Dot
            │       │   │   ├── <222> Var [c]
            │       │   │   ╰── char_array
            │       │   ├── <225> Constant Int [100]
            │       │   ╰── <226> Constant Int [3]
            │       ╰── Return
            │           ╰── <229> Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── to_validate
            │   ├── Type
            │   │   ╰── Struct [chars]
            │   ╰── Static
            ├── Function [validate_static]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── start
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── <259> FunctionCall [validate_array]
            │           ├── <254> Dot
            │           │   ├── <252> Var [to_validate]
            │           │   ╰── char_array
            │           ├── <256> Var [start]
            │           ╰── <258> Var [code]
            ├── Function [test_load]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <278> "ghi"
            │       ├── <288> Assign [=]
            │       │   ├── <283> Var [b]
            │       │   ╰── <287> Dereference
            │       │       ╰── <286> Var [ptr]
            │       ├── <295> Assign [=]
            │       │   ├── <291> Var [to_validate]
            │       │   ╰── <294> Var [a]
            │       ├── <300> FunctionCall [validate_static]
            │       │   ├── <298> Constant Int [103]
            │       │   ╰── <299> Constant Int [4]
            │       ├── <307> Assign [=]
            │       │   ├── <303> Var [to_validate]
            │       │   ╰── <306> Var [b]
            │       ├── <312> FunctionCall [validate_static]
            │       │   ├── <310> Constant Int [3]
            │       │   ╰── <311> Constant Int [5]
            │       ╰── Return
            │           ╰── <314> Constant Int [0]
            ├── Function [test_store]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── struct_array
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ╰── <330> "jkl"
            │       │           ├── Compound
            │       │           │   ╰── <333> "xyz"
            │       │           ╰── Compound
            │       │               ╰── <336> "mno"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── <351> AddressOf
            │       │           ╰── <350> Subscript
            │       │               ├── <348> Var [struct_array]
            │       │               ╰── <349> Constant Int [1]
            │       ├── <360> Assign [=]
            │       │   ├── <356> Dereference
            │       │   │   ╰── <355> Var [ptr]
            │       │   ╰── <359> Var [y]
            │       ├── <371> FunctionCall [validate_array]
            │       │   ├── <368> Dot
            │       │   │   ├── <366> Subscript
            │       │   │   │   ├── <364> Var [struct_array]
            │       │   │   │   ╰── <365> Constant Int [0]
            │       │   │   ╰── char_array
            │       │   ├── <369> Constant Int [106]
            │       │   ╰── <370> Constant Int [6]
            │       ├── <382> FunctionCall [validate_array]
            │       │   ├── <379> Dot
            │       │   │   ├── <377> Subscript
            │       │   │   │   ├── <375> Var [struct_array]
            │       │   │   │   ╰── <376> Constant Int [1]
            │       │   │   ╰── char_array
            │       │   ├── <380> Constant Int [6]
            │       │   ╰── <381> Constant Int [7]
            │       ├── <393> FunctionCall [validate_array]
            │       │   ├── <390> Dot
            │       │   │   ├── <388> Subscript
            │       │   │   │   ├── <386> Var [struct_array]
            │       │   │   │   ╰── <387> Constant Int [2]
            │       │   │   ╰── char_array
            │       │   ├── <391> Constant Int [109]
            │       │   ╰── <392> Constant Int [8]
            │       ╰── Return
            │           ╰── <395> Constant Int [0]
            ├── Struct [chars_container]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── chars
            │   │   ╰── Type
            │   │       ╰── Struct [chars]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Function [test_copy_from_offset]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <426> "pqr"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ├── Type
            │       │   │   ╰── Struct [chars]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <435> "xyz"
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── container
            │       │   ├── Type
            │       │   │   ╰── Struct [chars_container]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── <444> Constant Int [100]
            │       │   │       ├── Compound
            │       │   │       │   ╰── Compound
            │       │   │       │       ├── <446> Constant Int [9]
            │       │   │       │       ├── <448> Constant Int [10]
            │       │   │       │       ╰── <450> Constant Int [11]
            │       │   │       ╰── <454> "123"
            │       │   ╰── Static
            │       ├── <465> Assign [=]
            │       │   ├── <459> Var [b]
            │       │   ╰── <464> Dot
            │       │       ├── <462> Var [container]
            │       │       ╰── chars
            │       ├── <472> Assign [=]
            │       │   ├── <468> Var [to_validate]
            │       │   ╰── <471> Var [a]
            │       ├── <477> FunctionCall [validate_static]
            │       │   ├── <475> Constant Int [112]
            │       │   ╰── <476> Constant Int [9]
            │       ├── <484> Assign [=]
            │       │   ├── <480> Var [to_validate]
            │       │   ╰── <483> Var [b]
            │       ├── <489> FunctionCall [validate_static]
            │       │   ├── <487> Constant Int [9]
            │       │   ╰── <488> Constant Int [10]
            │       ╰── Return
            │           ╰── <491> Constant Int [0]
            ├── Function [test_copy_to_offset]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── container
            │       │   ├── Type
            │       │   │   ╰── Struct [chars_container]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <504> Constant Int [120]
            │       │           ├── Compound
            │       │           │   ╰── Compound
            │       │           │       ├── <506> Constant Int [0]
            │       │           │       ├── <508> Constant Int [0]
            │       │           │       ╰── <510> Constant Int [0]
            │       │           ╰── <514> "stu"
            │       ├── <525> Assign [=]
            │       │   ├── <521> Dot
            │       │   │   ├── <519> Var [container]
            │       │   │   ╰── chars
            │       │   ╰── <524> Var [y]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <533>  [!=]
            │       │   │       ├── <530> Dot
            │       │   │       │   ├── <528> Var [container]
            │       │   │       │   ╰── c
            │       │   │       ╰── <532> Constant Int [120]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <536> FunctionCall [exit]
            │       │               ╰── <535> Constant Int [11]
            │       ├── <550> FunctionCall [validate_array]
            │       │   ├── <547> Dot
            │       │   │   ├── <545> Dot
            │       │   │   │   ├── <543> Var [container]
            │       │   │   │   ╰── chars
            │       │   │   ╰── char_array
            │       │   ├── <548> Constant Int [12]
            │       │   ╰── <549> Constant Int [12]
            │       ├── <559> FunctionCall [validate_array]
            │       │   ├── <556> Dot
            │       │   │   ├── <554> Var [container]
            │       │   │   ╰── arr
            │       │   ├── <557> Constant Int [115]
            │       │   ╰── <558> Constant Int [13]
            │       ╰── Return
            │           ╰── <561> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <576> Assign [=]
                    │   ├── <571> Var [ptr]
                    │   ╰── <575> AddressOf
                    │       ╰── <574> Var [y]
                    ├── <579> FunctionCall [test_copy]
                    ├── <582> FunctionCall [increment_y]
                    ├── <585> FunctionCall [test_load]
                    ├── <588> FunctionCall [increment_y]
                    ├── <591> FunctionCall [test_store]
                    ├── <594> FunctionCall [increment_y]
                    ├── <597> FunctionCall [test_copy_from_offset]
                    ├── <600> FunctionCall [increment_y]
                    ├── <603> FunctionCall [test_copy_to_offset]
                    ╰── Return
                        ╰── <605> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_incomplete_param_type() {
    let src = r#"
        struct s;
        int foo(struct s blah);
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s arg = {1, 2};
            return foo(arg);
        }
        int foo(struct s blah) {
            return blah.a + blah.b;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [foo]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── blah
            │           ╰── Type
            │               ╰── Struct [s]
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arg
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <32> Constant Int [1]
            │       │           ╰── <34> Constant Int [2]
            │       ╰── Return
            │           ╰── <41> FunctionCall [foo]
            │               ╰── <40> Var [arg]
            ╰── Function [foo]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── blah
                │       ╰── Type
                │           ╰── Struct [s]
                ╰── Body
                    ╰── Return
                        ╰── <63>  [+]
                            ├── <57> Dot
                            │   ├── <55> Var [blah]
                            │   ╰── a
                            ╰── <62> Dot
                                ├── <60> Var [blah]
                                ╰── b
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_classify_params() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct inner {
            int i;
            char ch2;
        };
        struct nested_ints {
            char ch1;
            struct inner nested;
        };
        struct flattened_ints {
            char c;
            int i;
            char a;
        };
        struct large {
            int i;
            double d;
            char arr[10];
        };
        struct two_ints {
            int i;
            int i2;
        };
        struct nested_double {
            double array[1];
        };
        struct two_eightbytes {
            double d;
            char c;
        };
        struct pass_in_memory {
            double w;
            double x;
            int y;
            long z;
        };
        int test_twelve_bytes(struct twelve_bytes s);
        int test_nested_ints(struct nested_ints s);
        int test_flattened_ints(struct flattened_ints s);
        int test_large(struct large s);
        int test_two_ints(struct two_ints s);
        int test_nested_double(struct nested_double s);
        int test_two_eightbytes(struct two_eightbytes s);
        int test_pass_in_memory(struct pass_in_memory s);
        
        int test_twelve_bytes(struct twelve_bytes s) {
            if (s.i != 0 || strcmp(s.arr, "lmnopqr")) {
                return 0;
            }
            return 1;
        }
        int test_nested_ints(struct nested_ints s) {
            if (s.ch1 != 127 || s.nested.i != 2147483647 || s.nested.ch2 != -128) {
                return 0;
            }
            return 1;
        }
        int test_flattened_ints(struct flattened_ints s) {
            if (s.c != 127 || s.i != 2147483647 || s.a != -128) {
                return 0;
            }
            return 1;
        }
        int test_large(struct large s) {
            if (s.i != 200000 || s.d != 23.25 || strcmp(s.arr, "abcdefghi")) {
                return 0;
            }
            return 1;
        }
        int test_two_ints(struct two_ints s) {
            if (s.i != 999 || s.i2 != 888) {
                return 0;
            }
            return 1;
        }
        int test_nested_double(struct nested_double s) {
            if (s.array[0] != 25.125e3) {
                return 0;
            }
            return 1;
        }
        int test_two_eightbytes(struct two_eightbytes s) {
            if (s.d != 1000. || s.c != 'x') {
                return 0;
            }
            return 1;
        }
        int test_pass_in_memory(struct pass_in_memory s) {
            if (s.w != 1.7e308 || s.x != -1.7e308 || s.y != -2147483647 ||
                s.z != -9223372036854775807l) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [twelve_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ch2
            │       ╰── Type
            │           ╰── Char
            ├── Struct [nested_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ch1
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── nested
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Struct [flattened_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Char
            ├── Struct [large]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Char
            ├── Struct [two_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i2
            │       ╰── Type
            │           ╰── Int
            ├── Struct [nested_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── array
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Double
            ├── Struct [two_eightbytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [pass_in_memory]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── w
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── y
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── z
            │       ╰── Type
            │           ╰── Long
            ├── Function [test_twelve_bytes]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [twelve_bytes]
            ├── Function [test_nested_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [nested_ints]
            ├── Function [test_flattened_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [flattened_ints]
            ├── Function [test_large]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [large]
            ├── Function [test_two_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [two_ints]
            ├── Function [test_nested_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [nested_double]
            ├── Function [test_two_eightbytes]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [two_eightbytes]
            ├── Function [test_pass_in_memory]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [pass_in_memory]
            ├── Function [test_twelve_bytes]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [twelve_bytes]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <233>  [||]
            │       │   │       ├── <224>  [!=]
            │       │   │       │   ├── <221> Dot
            │       │   │       │   │   ├── <219> Var [s]
            │       │   │       │   │   ╰── i
            │       │   │       │   ╰── <223> Constant Int [0]
            │       │   │       ╰── <232> FunctionCall [strcmp]
            │       │   │           ├── <230> Dot
            │       │   │           │   ├── <228> Var [s]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <231> "lmnopqr"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <234> Constant Int [0]
            │       ╰── Return
            │           ╰── <239> Constant Int [1]
            ├── Function [test_nested_ints]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [nested_ints]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <282>  [||]
            │       │   │       ├── <269>  [||]
            │       │   │       │   ├── <258>  [!=]
            │       │   │       │   │   ├── <255> Dot
            │       │   │       │   │   │   ├── <253> Var [s]
            │       │   │       │   │   │   ╰── ch1
            │       │   │       │   │   ╰── <257> Constant Int [127]
            │       │   │       │   ╰── <268>  [!=]
            │       │   │       │       ├── <265> Dot
            │       │   │       │       │   ├── <263> Dot
            │       │   │       │       │   │   ├── <261> Var [s]
            │       │   │       │       │   │   ╰── nested
            │       │   │       │       │   ╰── i
            │       │   │       │       ╰── <267> Constant Int [2147483647]
            │       │   │       ╰── <281>  [!=]
            │       │   │           ├── <276> Dot
            │       │   │           │   ├── <274> Dot
            │       │   │           │   │   ├── <272> Var [s]
            │       │   │           │   │   ╰── nested
            │       │   │           │   ╰── ch2
            │       │   │           ╰── <280> Unary [-]
            │       │   │               ╰── <279> Constant Int [128]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <283> Constant Int [0]
            │       ╰── Return
            │           ╰── <288> Constant Int [1]
            ├── Function [test_flattened_ints]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [flattened_ints]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <327>  [||]
            │       │   │       ├── <316>  [||]
            │       │   │       │   ├── <307>  [!=]
            │       │   │       │   │   ├── <304> Dot
            │       │   │       │   │   │   ├── <302> Var [s]
            │       │   │       │   │   │   ╰── c
            │       │   │       │   │   ╰── <306> Constant Int [127]
            │       │   │       │   ╰── <315>  [!=]
            │       │   │       │       ├── <312> Dot
            │       │   │       │       │   ├── <310> Var [s]
            │       │   │       │       │   ╰── i
            │       │   │       │       ╰── <314> Constant Int [2147483647]
            │       │   │       ╰── <326>  [!=]
            │       │   │           ├── <321> Dot
            │       │   │           │   ├── <319> Var [s]
            │       │   │           │   ╰── a
            │       │   │           ╰── <325> Unary [-]
            │       │   │               ╰── <324> Constant Int [128]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <328> Constant Int [0]
            │       ╰── Return
            │           ╰── <333> Constant Int [1]
            ├── Function [test_large]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [large]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <370>  [||]
            │       │   │       ├── <361>  [||]
            │       │   │       │   ├── <352>  [!=]
            │       │   │       │   │   ├── <349> Dot
            │       │   │       │   │   │   ├── <347> Var [s]
            │       │   │       │   │   │   ╰── i
            │       │   │       │   │   ╰── <351> Constant Int [200000]
            │       │   │       │   ╰── <360>  [!=]
            │       │   │       │       ├── <357> Dot
            │       │   │       │       │   ├── <355> Var [s]
            │       │   │       │       │   ╰── d
            │       │   │       │       ╰── <359> Constant Double [+2.325e1]
            │       │   │       ╰── <369> FunctionCall [strcmp]
            │       │   │           ├── <367> Dot
            │       │   │           │   ├── <365> Var [s]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <368> "abcdefghi"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <371> Constant Int [0]
            │       ╰── Return
            │           ╰── <376> Constant Int [1]
            ├── Function [test_two_ints]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [two_ints]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <404>  [||]
            │       │   │       ├── <395>  [!=]
            │       │   │       │   ├── <392> Dot
            │       │   │       │   │   ├── <390> Var [s]
            │       │   │       │   │   ╰── i
            │       │   │       │   ╰── <394> Constant Int [999]
            │       │   │       ╰── <403>  [!=]
            │       │   │           ├── <400> Dot
            │       │   │           │   ├── <398> Var [s]
            │       │   │           │   ╰── i2
            │       │   │           ╰── <402> Constant Int [888]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <405> Constant Int [0]
            │       ╰── Return
            │           ╰── <410> Constant Int [1]
            ├── Function [test_nested_double]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [nested_double]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <431>  [!=]
            │       │   │       ├── <428> Subscript
            │       │   │       │   ├── <426> Dot
            │       │   │       │   │   ├── <424> Var [s]
            │       │   │       │   │   ╰── array
            │       │   │       │   ╰── <427> Constant Int [0]
            │       │   │       ╰── <430> Constant Double [+2.5125e4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <432> Constant Int [0]
            │       ╰── Return
            │           ╰── <437> Constant Int [1]
            ├── Function [test_two_eightbytes]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [two_eightbytes]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <465>  [||]
            │       │   │       ├── <456>  [!=]
            │       │   │       │   ├── <453> Dot
            │       │   │       │   │   ├── <451> Var [s]
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <455> Constant Double [+1e3]
            │       │   │       ╰── <464>  [!=]
            │       │   │           ├── <461> Dot
            │       │   │           │   ├── <459> Var [s]
            │       │   │           │   ╰── c
            │       │   │           ╰── <463> Constant Int [120]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <466> Constant Int [0]
            │       ╰── Return
            │           ╰── <471> Constant Int [1]
            ╰── Function [test_pass_in_memory]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── s
                │       ╰── Type
                │           ╰── Struct [pass_in_memory]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <523>  [||]
                    │   │       ├── <512>  [||]
                    │   │       │   ├── <501>  [||]
                    │   │       │   │   ├── <490>  [!=]
                    │   │       │   │   │   ├── <487> Dot
                    │   │       │   │   │   │   ├── <485> Var [s]
                    │   │       │   │   │   │   ╰── w
                    │   │       │   │   │   ╰── <489> Constant Double [+1.7e308]
                    │   │       │   │   ╰── <500>  [!=]
                    │   │       │   │       ├── <495> Dot
                    │   │       │   │       │   ├── <493> Var [s]
                    │   │       │   │       │   ╰── x
                    │   │       │   │       ╰── <499> Unary [-]
                    │   │       │   │           ╰── <498> Constant Double [+1.7e308]
                    │   │       │   ╰── <511>  [!=]
                    │   │       │       ├── <506> Dot
                    │   │       │       │   ├── <504> Var [s]
                    │   │       │       │   ╰── y
                    │   │       │       ╰── <510> Unary [-]
                    │   │       │           ╰── <509> Constant Int [2147483647]
                    │   │       ╰── <522>  [!=]
                    │   │           ├── <517> Dot
                    │   │           │   ├── <515> Var [s]
                    │   │           │   ╰── z
                    │   │           ╰── <521> Unary [-]
                    │   │               ╰── <520> Constant Long [9223372036854775807]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <524> Constant Int [0]
                    ╰── Return
                        ╰── <529> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_classify_params_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct inner {
            int i;
            char ch2;
        };
        struct nested_ints {
            char ch1;
            struct inner nested;
        };
        struct flattened_ints {
            char c;
            int i;
            char a;
        };
        struct large {
            int i;
            double d;
            char arr[10];
        };
        struct two_ints {
            int i;
            int i2;
        };
        struct nested_double {
            double array[1];
        };
        struct two_eightbytes {
            double d;
            char c;
        };
        struct pass_in_memory {
            double w;
            double x;
            int y;
            long z;
        };
        int test_twelve_bytes(struct twelve_bytes s);
        int test_nested_ints(struct nested_ints s);
        int test_flattened_ints(struct flattened_ints s);
        int test_large(struct large s);
        int test_two_ints(struct two_ints s);
        int test_nested_double(struct nested_double s);
        int test_two_eightbytes(struct two_eightbytes s);
        int test_pass_in_memory(struct pass_in_memory s);
        
        int main(void) {
            struct twelve_bytes s1 = {0, "lmnopqr"};
            if (!test_twelve_bytes(s1)) {
                return 1;
            }
            struct nested_ints s2 = {127, {2147483647, -128}};
            if (!test_nested_ints(s2)) {
                return 2;
            }
            struct flattened_ints s3 = {127, 2147483647, -128};
            if (!test_flattened_ints(s3)) {
                return 3;
            }
            struct large s4 = {200000, 23.25, "abcdefghi"};
            if (!test_large(s4)) {
                return 4;
            }
            struct two_ints s5 = {999, 888};
            if (!test_two_ints(s5)) {
                return 5;
            }
            struct nested_double s6 = {{25.125e3}};
            if (!test_nested_double(s6)) {
                return 6;
            }
            struct two_eightbytes s7 = {1000., 'x'};
            if (!test_two_eightbytes(s7)) {
                return 7;
            }
            struct pass_in_memory s8 = {1.7e308, -1.7e308, -2147483647, -9223372036854775807l};
            if (!test_pass_in_memory(s8)) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Struct [twelve_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── ch2
            │       ╰── Type
            │           ╰── Char
            ├── Struct [nested_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ch1
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── nested
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Struct [flattened_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── a
            │       ╰── Type
            │           ╰── Char
            ├── Struct [large]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Char
            ├── Struct [two_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i2
            │       ╰── Type
            │           ╰── Int
            ├── Struct [nested_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── array
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Double
            ├── Struct [two_eightbytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [pass_in_memory]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── w
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── y
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── z
            │       ╰── Type
            │           ╰── Long
            ├── Function [test_twelve_bytes]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [twelve_bytes]
            ├── Function [test_nested_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [nested_ints]
            ├── Function [test_flattened_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [flattened_ints]
            ├── Function [test_large]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [large]
            ├── Function [test_two_ints]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [two_ints]
            ├── Function [test_nested_double]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [nested_double]
            ├── Function [test_two_eightbytes]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [two_eightbytes]
            ├── Function [test_pass_in_memory]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [pass_in_memory]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s1
                    │   ├── Type
                    │   │   ╰── Struct [twelve_bytes]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <218> Constant Int [0]
                    │           ╰── <220> "lmnopqr"
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <229> Unary [!]
                    │   │       ╰── <228> FunctionCall [test_twelve_bytes]
                    │   │           ╰── <227> Var [s1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <230> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s2
                    │   ├── Type
                    │   │   ╰── Struct [nested_ints]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <239> Constant Int [127]
                    │           ╰── Compound
                    │               ├── <241> Constant Int [2147483647]
                    │               ╰── <245> Unary [-]
                    │                   ╰── <244> Constant Int [128]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <255> Unary [!]
                    │   │       ╰── <254> FunctionCall [test_nested_ints]
                    │   │           ╰── <253> Var [s2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <256> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s3
                    │   ├── Type
                    │   │   ╰── Struct [flattened_ints]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <265> Constant Int [127]
                    │           ├── <267> Constant Int [2147483647]
                    │           ╰── <271> Unary [-]
                    │               ╰── <270> Constant Int [128]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <280> Unary [!]
                    │   │       ╰── <279> FunctionCall [test_flattened_ints]
                    │   │           ╰── <278> Var [s3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <281> Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s4
                    │   ├── Type
                    │   │   ╰── Struct [large]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <290> Constant Int [200000]
                    │           ├── <292> Constant Double [+2.325e1]
                    │           ╰── <294> "abcdefghi"
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <303> Unary [!]
                    │   │       ╰── <302> FunctionCall [test_large]
                    │   │           ╰── <301> Var [s4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <304> Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s5
                    │   ├── Type
                    │   │   ╰── Struct [two_ints]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <313> Constant Int [999]
                    │           ╰── <315> Constant Int [888]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <324> Unary [!]
                    │   │       ╰── <323> FunctionCall [test_two_ints]
                    │   │           ╰── <322> Var [s5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <325> Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s6
                    │   ├── Type
                    │   │   ╰── Struct [nested_double]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── <334> Constant Double [+2.5125e4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <344> Unary [!]
                    │   │       ╰── <343> FunctionCall [test_nested_double]
                    │   │           ╰── <342> Var [s6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <345> Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s7
                    │   ├── Type
                    │   │   ╰── Struct [two_eightbytes]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <354> Constant Double [+1e3]
                    │           ╰── <356> Constant Int [120]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <365> Unary [!]
                    │   │       ╰── <364> FunctionCall [test_two_eightbytes]
                    │   │           ╰── <363> Var [s7]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <366> Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s8
                    │   ├── Type
                    │   │   ╰── Struct [pass_in_memory]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <375> Constant Double [+1.7e308]
                    │           ├── <379> Unary [-]
                    │           │   ╰── <378> Constant Double [+1.7e308]
                    │           ├── <383> Unary [-]
                    │           │   ╰── <382> Constant Int [2147483647]
                    │           ╰── <387> Unary [-]
                    │               ╰── <386> Constant Long [9223372036854775807]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <396> Unary [!]
                    │   │       ╰── <395> FunctionCall [test_pass_in_memory]
                    │   │           ╰── <394> Var [s8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <397> Constant Int [8]
                    ╰── Return
                        ╰── <402> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_modify_param() {
    let src = r#"
        struct inner {
            double d;
            int i;
        };
        struct outer {
            struct inner s;
            struct inner *ptr;
            long l;
        };
        int modify_simple_struct(struct inner s);
        int modify_nested_struct(struct outer s);
        
        int modify_simple_struct(struct inner s) {
            struct inner copy = s;
            s.d = 0.0;
            if (s.d || s.i != 3) {
                return 0;
            }
            if (copy.d != 2.0 || copy.i != 3) {
                return 0;
            }
            return 1;
        }
        int modify_nested_struct(struct outer s) {
            struct outer copy = s;
            s.l = 10;
            s.s.i = 200;
            s.ptr->d = 10.0;
            s.ptr->i = 11;
            if (s.s.i != 200 || s.s.d != 4.0 || s.l != 10 || s.ptr->d != 10.0 ||
                s.ptr->i != 11) {
                return 0;
            }
            if (copy.s.i != 5 || copy.s.d != 4.0 || copy.l != 1000 ||
                copy.ptr->d != 10.0 || copy.ptr->i != 11) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Function [modify_simple_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [inner]
            ├── Function [modify_nested_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [outer]
            ├── Function [modify_simple_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── s
            │   │       ╰── Type
            │   │           ╰── Struct [inner]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── copy
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── <63> Var [s]
            │       ├── <72> Assign [=]
            │       │   ├── <69> Dot
            │       │   │   ├── <67> Var [s]
            │       │   │   ╰── d
            │       │   ╰── <71> Constant Double [+0e0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <86>  [||]
            │       │   │       ├── <77> Dot
            │       │   │       │   ├── <75> Var [s]
            │       │   │       │   ╰── d
            │       │   │       ╰── <85>  [!=]
            │       │   │           ├── <82> Dot
            │       │   │           │   ├── <80> Var [s]
            │       │   │           │   ╰── i
            │       │   │           ╰── <84> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <87> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <107>  [||]
            │       │   │       ├── <98>  [!=]
            │       │   │       │   ├── <95> Dot
            │       │   │       │   │   ├── <93> Var [copy]
            │       │   │       │   │   ╰── d
            │       │   │       │   ╰── <97> Constant Double [+2e0]
            │       │   │       ╰── <106>  [!=]
            │       │   │           ├── <103> Dot
            │       │   │           │   ├── <101> Var [copy]
            │       │   │           │   ╰── i
            │       │   │           ╰── <105> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <108> Constant Int [0]
            │       ╰── Return
            │           ╰── <113> Constant Int [1]
            ╰── Function [modify_nested_struct]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── s
                │       ╰── Type
                │           ╰── Struct [outer]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── copy
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── <131> Var [s]
                    ├── <140> Assign [=]
                    │   ├── <137> Dot
                    │   │   ├── <135> Var [s]
                    │   │   ╰── l
                    │   ╰── <139> Constant Int [10]
                    ├── <150> Assign [=]
                    │   ├── <147> Dot
                    │   │   ├── <145> Dot
                    │   │   │   ├── <143> Var [s]
                    │   │   │   ╰── s
                    │   │   ╰── i
                    │   ╰── <149> Constant Int [200]
                    ├── <160> Assign [=]
                    │   ├── <157> Arrow
                    │   │   ├── <155> Dot
                    │   │   │   ├── <153> Var [s]
                    │   │   │   ╰── ptr
                    │   │   ╰── d
                    │   ╰── <159> Constant Double [+1e1]
                    ├── <170> Assign [=]
                    │   ├── <167> Arrow
                    │   │   ├── <165> Dot
                    │   │   │   ├── <163> Var [s]
                    │   │   │   ╰── ptr
                    │   │   ╰── i
                    │   ╰── <169> Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <222>  [||]
                    │   │       ├── <211>  [||]
                    │   │       │   ├── <200>  [||]
                    │   │       │   │   ├── <191>  [||]
                    │   │       │   │   │   ├── <180>  [!=]
                    │   │       │   │   │   │   ├── <177> Dot
                    │   │       │   │   │   │   │   ├── <175> Dot
                    │   │       │   │   │   │   │   │   ├── <173> Var [s]
                    │   │       │   │   │   │   │   │   ╰── s
                    │   │       │   │   │   │   │   ╰── i
                    │   │       │   │   │   │   ╰── <179> Constant Int [200]
                    │   │       │   │   │   ╰── <190>  [!=]
                    │   │       │   │   │       ├── <187> Dot
                    │   │       │   │   │       │   ├── <185> Dot
                    │   │       │   │   │       │   │   ├── <183> Var [s]
                    │   │       │   │   │       │   │   ╰── s
                    │   │       │   │   │       │   ╰── d
                    │   │       │   │   │       ╰── <189> Constant Double [+4e0]
                    │   │       │   │   ╰── <199>  [!=]
                    │   │       │   │       ├── <196> Dot
                    │   │       │   │       │   ├── <194> Var [s]
                    │   │       │   │       │   ╰── l
                    │   │       │   │       ╰── <198> Constant Int [10]
                    │   │       │   ╰── <210>  [!=]
                    │   │       │       ├── <207> Arrow
                    │   │       │       │   ├── <205> Dot
                    │   │       │       │   │   ├── <203> Var [s]
                    │   │       │       │   │   ╰── ptr
                    │   │       │       │   ╰── d
                    │   │       │       ╰── <209> Constant Double [+1e1]
                    │   │       ╰── <221>  [!=]
                    │   │           ├── <218> Arrow
                    │   │           │   ├── <216> Dot
                    │   │           │   │   ├── <214> Var [s]
                    │   │           │   │   ╰── ptr
                    │   │           │   ╰── i
                    │   │           ╰── <220> Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <223> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <278>  [||]
                    │   │       ├── <267>  [||]
                    │   │       │   ├── <256>  [||]
                    │   │       │   │   ├── <247>  [||]
                    │   │       │   │   │   ├── <236>  [!=]
                    │   │       │   │   │   │   ├── <233> Dot
                    │   │       │   │   │   │   │   ├── <231> Dot
                    │   │       │   │   │   │   │   │   ├── <229> Var [copy]
                    │   │       │   │   │   │   │   │   ╰── s
                    │   │       │   │   │   │   │   ╰── i
                    │   │       │   │   │   │   ╰── <235> Constant Int [5]
                    │   │       │   │   │   ╰── <246>  [!=]
                    │   │       │   │   │       ├── <243> Dot
                    │   │       │   │   │       │   ├── <241> Dot
                    │   │       │   │   │       │   │   ├── <239> Var [copy]
                    │   │       │   │   │       │   │   ╰── s
                    │   │       │   │   │       │   ╰── d
                    │   │       │   │   │       ╰── <245> Constant Double [+4e0]
                    │   │       │   │   ╰── <255>  [!=]
                    │   │       │   │       ├── <252> Dot
                    │   │       │   │       │   ├── <250> Var [copy]
                    │   │       │   │       │   ╰── l
                    │   │       │   │       ╰── <254> Constant Int [1000]
                    │   │       │   ╰── <266>  [!=]
                    │   │       │       ├── <263> Arrow
                    │   │       │       │   ├── <261> Dot
                    │   │       │       │   │   ├── <259> Var [copy]
                    │   │       │       │   │   ╰── ptr
                    │   │       │       │   ╰── d
                    │   │       │       ╰── <265> Constant Double [+1e1]
                    │   │       ╰── <277>  [!=]
                    │   │           ├── <274> Arrow
                    │   │           │   ├── <272> Dot
                    │   │           │   │   ├── <270> Var [copy]
                    │   │           │   │   ╰── ptr
                    │   │           │   ╰── i
                    │   │           ╰── <276> Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <279> Constant Int [0]
                    ╰── Return
                        ╰── <284> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_modify_param_client() {
    let src = r#"
        struct inner {
            double d;
            int i;
        };
        struct outer {
            struct inner s;
            struct inner *ptr;
            long l;
        };
        int modify_simple_struct(struct inner s);
        int modify_nested_struct(struct outer s);
        
        int main(void) {
            struct inner s_inner = {2.0, 3};
            if (!modify_simple_struct(s_inner)) {
                return 1;
            }
            if (s_inner.d != 2.0 || s_inner.i != 3) {
                return 2;
            }
            struct outer s_o = {{4.0, 5}, &s_inner, 1000l};
            if (!modify_nested_struct(s_o)) {
                return 3;
            }
            if (s_o.s.d != 4.0 || s_o.s.i != 5 || s_o.l != 1000l) {
                return 4;
            }
            if (s_o.ptr != &s_inner) {
                return 5;
            }
            if (s_o.ptr->d != 10.0 || s_o.ptr->i != 11) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── s
            │   │   ╰── Type
            │   │       ╰── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Function [modify_simple_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [inner]
            ├── Function [modify_nested_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s
            │           ╰── Type
            │               ╰── Struct [outer]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s_inner
                    │   ├── Type
                    │   │   ╰── Struct [inner]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <58> Constant Double [+2e0]
                    │           ╰── <60> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <69> Unary [!]
                    │   │       ╰── <68> FunctionCall [modify_simple_struct]
                    │   │           ╰── <67> Var [s_inner]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <70> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <90>  [||]
                    │   │       ├── <81>  [!=]
                    │   │       │   ├── <78> Dot
                    │   │       │   │   ├── <76> Var [s_inner]
                    │   │       │   │   ╰── d
                    │   │       │   ╰── <80> Constant Double [+2e0]
                    │   │       ╰── <89>  [!=]
                    │   │           ├── <86> Dot
                    │   │           │   ├── <84> Var [s_inner]
                    │   │           │   ╰── i
                    │   │           ╰── <88> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <91> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s_o
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <100> Constant Double [+4e0]
                    │           │   ╰── <102> Constant Int [5]
                    │           ├── <107> AddressOf
                    │           │   ╰── <106> Var [s_inner]
                    │           ╰── <109> Constant Long [1000]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <118> Unary [!]
                    │   │       ╰── <117> FunctionCall [modify_nested_struct]
                    │   │           ╰── <116> Var [s_o]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <119> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <152>  [||]
                    │   │       ├── <143>  [||]
                    │   │       │   ├── <132>  [!=]
                    │   │       │   │   ├── <129> Dot
                    │   │       │   │   │   ├── <127> Dot
                    │   │       │   │   │   │   ├── <125> Var [s_o]
                    │   │       │   │   │   │   ╰── s
                    │   │       │   │   │   ╰── d
                    │   │       │   │   ╰── <131> Constant Double [+4e0]
                    │   │       │   ╰── <142>  [!=]
                    │   │       │       ├── <139> Dot
                    │   │       │       │   ├── <137> Dot
                    │   │       │       │   │   ├── <135> Var [s_o]
                    │   │       │       │   │   ╰── s
                    │   │       │       │   ╰── i
                    │   │       │       ╰── <141> Constant Int [5]
                    │   │       ╰── <151>  [!=]
                    │   │           ├── <148> Dot
                    │   │           │   ├── <146> Var [s_o]
                    │   │           │   ╰── l
                    │   │           ╰── <150> Constant Long [1000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <153> Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <166>  [!=]
                    │   │       ├── <161> Dot
                    │   │       │   ├── <159> Var [s_o]
                    │   │       │   ╰── ptr
                    │   │       ╰── <165> AddressOf
                    │   │           ╰── <164> Var [s_inner]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <167> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <191>  [||]
                    │   │       ├── <180>  [!=]
                    │   │       │   ├── <177> Arrow
                    │   │       │   │   ├── <175> Dot
                    │   │       │   │   │   ├── <173> Var [s_o]
                    │   │       │   │   │   ╰── ptr
                    │   │       │   │   ╰── d
                    │   │       │   ╰── <179> Constant Double [+1e1]
                    │   │       ╰── <190>  [!=]
                    │   │           ├── <187> Arrow
                    │   │           │   ├── <185> Dot
                    │   │           │   │   ├── <183> Var [s_o]
                    │   │           │   │   ╰── ptr
                    │   │           │   ╰── i
                    │   │           ╰── <189> Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <192> Constant Int [6]
                    ╰── Return
                        ╰── <197> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_param_calling_conventions() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int strncmp(char *s1, char *s2, unsigned long n);
        struct two_longs {
            long a;
            long b;
        };
        struct one_int {
            int i;
            char c;
        };
        struct one_int_exactly {
            unsigned long l;
        };
        struct two_ints {
            char c;
            int arr[3];
        };
        struct two_ints_nested {
            struct one_int a;
            struct one_int b;
        };
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct one_xmm {
            double d;
        };
        struct two_xmm {
            double d[2];
        };
        struct int_and_xmm {
            char c;
            double d;
        };
        struct xmm_and_int {
            struct one_xmm dbl;
            char c[3];
        };
        struct odd_size {
            char arr[5];
        };
        struct memory {
            double d;
            char c[3];
            long l;
            int i;
        };
        int pass_small_structs(struct two_xmm two_xmm_struct, struct one_int int_struct,
                               struct one_xmm xmm_struct,
                               struct xmm_and_int mixed_struct,
                               struct twelve_bytes int_struct_2,
                               struct one_int_exactly another_int_struct);
        int a_bunch_of_arguments(int i0, int i1, int i2, int i3, int i4,
                                 struct two_longs param, int i5);
        int structs_and_scalars(long l, double d, struct odd_size os, struct memory mem,
                                struct one_xmm xmm_struct);
        int struct_in_mem(double a, double b, double c, struct xmm_and_int first_struct,
                          double d, struct two_xmm second_struct, long l,
                          struct int_and_xmm third_struct,
                          struct one_xmm fourth_struct);
        int pass_borderline_struct_in_memory(struct two_ints t_i, int c,
                                             struct int_and_xmm i_x, void *ptr,
                                             struct two_ints_nested t_i_n, double d);
        int pass_uneven_struct_in_mem(struct twelve_bytes struct1, long a, long b,
                                      struct twelve_bytes struct2, struct odd_size os,
                                      struct memory m);
        int pass_later_structs_in_regs(struct memory m, struct twelve_bytes struct1, struct one_xmm struct2);
        int pass_small_structs(struct two_xmm two_xmm_struct, struct one_int int_struct,
                               struct one_xmm xmm_struct,
                               struct xmm_and_int mixed_struct,
                               struct twelve_bytes int_struct_2,
                               struct one_int_exactly another_int_struct) {
            if (two_xmm_struct.d[0] != 55.5 || two_xmm_struct.d[1] != 44.4)
                return 0;
            if (int_struct.c != 'c' || int_struct.i != 54320)
                return 0;
            if (xmm_struct.d != 5.125)
                return 0;
            if (strcmp(mixed_struct.c, "hi") || mixed_struct.dbl.d != 1.234)
                return 0;
            if (strcmp(int_struct_2.arr, "string!") || int_struct_2.i != 123)
                return 0;
            if (another_int_struct.l != 567890)
                return 0;
            return 1;
        }
        int a_bunch_of_arguments(int i0, int i1, int i2, int i3, int i4,
                                 struct two_longs param, int i5) {
            if (i0 != 0 || i1 != 1 || i2 != 2 || i3 != 3 || i4 != 4 || i5 != 5) {
                return 0;
            }
            if (param.a != 1234567l || param.b != 89101112l) {
                return 0;
            }
            return 1;
        }
        int structs_and_scalars(long l, double d, struct odd_size os, struct memory mem,
                                struct one_xmm xmm_struct) {
            if (l != 10)
                return 0;
            if (d != 10.0)
                return 0;
            if (strcmp(os.arr, "lmno"))
                return 0;
            if (strcmp(mem.c, "rs") || mem.d != 15.75 || mem.i != 3333 || mem.l != 4444)
                return 0;
            if (xmm_struct.d != 5.125)
                return 0;
            return 1;
        }
        int struct_in_mem(double a, double b, double c, struct xmm_and_int first_struct,
                          double d, struct two_xmm second_struct, long l,
                          struct int_and_xmm third_struct,
                          struct one_xmm fourth_struct) {
            if (a != 10.0 || b != 11.125 || c != 12.0)
                return 0;
            if (strcmp(first_struct.c, "hi") || first_struct.dbl.d != 1.234)
                return 0;
            if (d != 13.0)
                return 0;
            if (second_struct.d[0] != 55.5 || second_struct.d[1] != 44.4)
                return 0;
            if (l)
                return 0;
            if (third_struct.c != 'p' || third_struct.d != 4.56)
                return 0;
            if (fourth_struct.d != 5.125)
                return 0;
            return 1;
        }
        int pass_borderline_struct_in_memory(struct two_ints t_i, int c,
                                             struct int_and_xmm i_x, void *ptr,
                                             struct two_ints_nested t_i_n, double d) {
            if (t_i.c != '_' || t_i.arr[0] != 5 || t_i.arr[1] != 6 || t_i.arr[2] != 7)
                return 0;
            if (c != '!')
                return 0;
            if (i_x.c != 'p' || i_x.d != 4.56)
                return 0;
            if (ptr)
                return 0;
            if (t_i_n.a.c != 'c' || t_i_n.a.i != 54320)
                return 0;
            if (t_i_n.b.c != 'c' || t_i_n.b.i != 54320)
                return 0;
            if (d != 7.8)
                return 0;
            return 1;
        }
        int pass_uneven_struct_in_mem(struct twelve_bytes struct1, long a, long b,
                                      struct twelve_bytes struct2, struct odd_size os,
                                      struct memory m) {
            if (struct1.i != -1) {
                return 0;
            }
            if (struct1.arr[0] != 127 || struct1.arr[1] != 126 ||
                struct1.arr[2] != 125) {
                return 0;
            }
            if (a != 9223372036854775805l || b != 9223372036854775800l) {
                return 0;
            }
            if (struct2.i != -5) {
                return 0;
            }
            if (struct2.arr[0] != 100 || struct2.arr[1] != 101 ||
                struct2.arr[2] != 102) {
                return 0;
            }
            for (int i = 0; i < 5; i = i + 1) {
                if (os.arr[i] != 100 - i) {
                    return 0;
                }
            }
            if (m.d != 5.345) {
                return 0;
            }
            if (m.c[0] != -1 || m.c[1] != -2 || m.c[2] != -3) {
                return 0;
            }
            if (m.l != 4294967300l) {
                return 0;
            }
            if (m.i != 10000) {
                return 0;
            }
            return 1;
        }
        int pass_later_structs_in_regs(struct memory m, struct twelve_bytes struct1,
                                       struct one_xmm struct2) {
            if (m.d != 5.345) {
                return 0;
            }
            if (m.c[0] != -1 || m.c[1] != -2 || m.c[2] != -3) {
                return 0;
            }
            if (m.l != 4294967300l) {
                return 0;
            }
            if (m.i != 10000) {
                return 0;
            }
            if (struct1.i != -1) {
                return 0;
            }
            if (struct1.arr[0] != 127 || struct1.arr[1] != 126 ||
                struct1.arr[2] != 125) {
                return 0;
            }
            if (struct2.d != 5.125) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [strncmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── n
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [two_longs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Long
            ├── Struct [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [one_int_exactly]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Struct [two_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Struct [two_ints_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Struct [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [one_int]
            ├── Struct [twelve_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [two_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Double
            ├── Struct [int_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [xmm_and_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl
            │   │   ╰── Type
            │   │       ╰── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [odd_size]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [memory]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Function [pass_small_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm_struct
            │       │   ╰── Type
            │       │       ╰── Struct [two_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_struct
            │       │   ╰── Type
            │       │       ╰── Struct [one_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── xmm_struct
            │       │   ╰── Type
            │       │       ╰── Struct [one_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_struct
            │       │   ╰── Type
            │       │       ╰── Struct [xmm_and_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_struct_2
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── another_int_struct
            │           ╰── Type
            │               ╰── Struct [one_int_exactly]
            ├── Function [a_bunch_of_arguments]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i0
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── param
            │       │   ╰── Type
            │       │       ╰── Struct [two_longs]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i5
            │           ╰── Type
            │               ╰── Int
            ├── Function [structs_and_scalars]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── os
            │       │   ╰── Type
            │       │       ╰── Struct [odd_size]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mem
            │       │   ╰── Type
            │       │       ╰── Struct [memory]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── xmm_struct
            │           ╰── Type
            │               ╰── Struct [one_xmm]
            ├── Function [struct_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── first_struct
            │       │   ╰── Type
            │       │       ╰── Struct [xmm_and_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── second_struct
            │       │   ╰── Type
            │       │       ╰── Struct [two_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── third_struct
            │       │   ╰── Type
            │       │       ╰── Struct [int_and_xmm]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── fourth_struct
            │           ╰── Type
            │               ╰── Struct [one_xmm]
            ├── Function [pass_borderline_struct_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_i
            │       │   ╰── Type
            │       │       ╰── Struct [two_ints]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i_x
            │       │   ╰── Type
            │       │       ╰── Struct [int_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Void
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_i_n
            │       │   ╰── Type
            │       │       ╰── Struct [two_ints_nested]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d
            │           ╰── Type
            │               ╰── Double
            ├── Function [pass_uneven_struct_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── struct1
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── struct2
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── os
            │       │   ╰── Type
            │       │       ╰── Struct [odd_size]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── m
            │           ╰── Type
            │               ╰── Struct [memory]
            ├── Function [pass_later_structs_in_regs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── m
            │       │   ╰── Type
            │       │       ╰── Struct [memory]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── struct1
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── struct2
            │           ╰── Type
            │               ╰── Struct [one_xmm]
            ├── Function [pass_small_structs]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── two_xmm_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [two_xmm]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── int_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [one_int]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── xmm_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [one_xmm]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── mixed_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [xmm_and_int]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── int_struct_2
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [twelve_bytes]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── another_int_struct
            │   │       ╰── Type
            │   │           ╰── Struct [one_int_exactly]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <411>  [||]
            │       │   │       ├── <400>  [!=]
            │       │   │       │   ├── <397> Subscript
            │       │   │       │   │   ├── <395> Dot
            │       │   │       │   │   │   ├── <393> Var [two_xmm_struct]
            │       │   │       │   │   │   ╰── d
            │       │   │       │   │   ╰── <396> Constant Int [0]
            │       │   │       │   ╰── <399> Constant Double [+5.55e1]
            │       │   │       ╰── <410>  [!=]
            │       │   │           ├── <407> Subscript
            │       │   │           │   ├── <405> Dot
            │       │   │           │   │   ├── <403> Var [two_xmm_struct]
            │       │   │           │   │   ╰── d
            │       │   │           │   ╰── <406> Constant Int [1]
            │       │   │           ╰── <409> Constant Double [+4.44e1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <412> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <430>  [||]
            │       │   │       ├── <421>  [!=]
            │       │   │       │   ├── <418> Dot
            │       │   │       │   │   ├── <416> Var [int_struct]
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <420> Constant Int [99]
            │       │   │       ╰── <429>  [!=]
            │       │   │           ├── <426> Dot
            │       │   │           │   ├── <424> Var [int_struct]
            │       │   │           │   ╰── i
            │       │   │           ╰── <428> Constant Int [54320]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <431> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <440>  [!=]
            │       │   │       ├── <437> Dot
            │       │   │       │   ├── <435> Var [xmm_struct]
            │       │   │       │   ╰── d
            │       │   │       ╰── <439> Constant Double [+5.125e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <441> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <461>  [||]
            │       │   │       ├── <450> FunctionCall [strcmp]
            │       │   │       │   ├── <448> Dot
            │       │   │       │   │   ├── <446> Var [mixed_struct]
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <449> "hi"
            │       │   │       ╰── <460>  [!=]
            │       │   │           ├── <457> Dot
            │       │   │           │   ├── <455> Dot
            │       │   │           │   │   ├── <453> Var [mixed_struct]
            │       │   │           │   │   ╰── dbl
            │       │   │           │   ╰── d
            │       │   │           ╰── <459> Constant Double [+1.234e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <462> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <480>  [||]
            │       │   │       ├── <471> FunctionCall [strcmp]
            │       │   │       │   ├── <469> Dot
            │       │   │       │   │   ├── <467> Var [int_struct_2]
            │       │   │       │   │   ╰── arr
            │       │   │       │   ╰── <470> "string!"
            │       │   │       ╰── <479>  [!=]
            │       │   │           ├── <476> Dot
            │       │   │           │   ├── <474> Var [int_struct_2]
            │       │   │           │   ╰── i
            │       │   │           ╰── <478> Constant Int [123]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <481> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <490>  [!=]
            │       │   │       ├── <487> Dot
            │       │   │       │   ├── <485> Var [another_int_struct]
            │       │   │       │   ╰── l
            │       │   │       ╰── <489> Constant Int [567890]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <491> Constant Int [0]
            │       ╰── Return
            │           ╰── <494> Constant Int [1]
            ├── Function [a_bunch_of_arguments]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i0
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i1
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i2
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i3
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i4
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── param
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [two_longs]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i5
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <564>  [||]
            │       │   │       ├── <557>  [||]
            │       │   │       │   ├── <550>  [||]
            │       │   │       │   │   ├── <543>  [||]
            │       │   │       │   │   │   ├── <536>  [||]
            │       │   │       │   │   │   │   ├── <529>  [!=]
            │       │   │       │   │   │   │   │   ├── <526> Var [i0]
            │       │   │       │   │   │   │   │   ╰── <528> Constant Int [0]
            │       │   │       │   │   │   │   ╰── <535>  [!=]
            │       │   │       │   │   │   │       ├── <532> Var [i1]
            │       │   │       │   │   │   │       ╰── <534> Constant Int [1]
            │       │   │       │   │   │   ╰── <542>  [!=]
            │       │   │       │   │   │       ├── <539> Var [i2]
            │       │   │       │   │   │       ╰── <541> Constant Int [2]
            │       │   │       │   │   ╰── <549>  [!=]
            │       │   │       │   │       ├── <546> Var [i3]
            │       │   │       │   │       ╰── <548> Constant Int [3]
            │       │   │       │   ╰── <556>  [!=]
            │       │   │       │       ├── <553> Var [i4]
            │       │   │       │       ╰── <555> Constant Int [4]
            │       │   │       ╰── <563>  [!=]
            │       │   │           ├── <560> Var [i5]
            │       │   │           ╰── <562> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <565> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <585>  [||]
            │       │   │       ├── <576>  [!=]
            │       │   │       │   ├── <573> Dot
            │       │   │       │   │   ├── <571> Var [param]
            │       │   │       │   │   ╰── a
            │       │   │       │   ╰── <575> Constant Long [1234567]
            │       │   │       ╰── <584>  [!=]
            │       │   │           ├── <581> Dot
            │       │   │           │   ├── <579> Var [param]
            │       │   │           │   ╰── b
            │       │   │           ╰── <583> Constant Long [89101112]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <586> Constant Int [0]
            │       ╰── Return
            │           ╰── <591> Constant Int [1]
            ├── Function [structs_and_scalars]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── os
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [odd_size]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── mem
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [memory]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── xmm_struct
            │   │       ╰── Type
            │   │           ╰── Struct [one_xmm]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <622>  [!=]
            │       │   │       ├── <619> Var [l]
            │       │   │       ╰── <621> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <623> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <630>  [!=]
            │       │   │       ├── <627> Var [d]
            │       │   │       ╰── <629> Constant Double [+1e1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <631> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <640> FunctionCall [strcmp]
            │       │   │       ├── <638> Dot
            │       │   │       │   ├── <636> Var [os]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <639> "lmno"
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <641> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <677>  [||]
            │       │   │       ├── <668>  [||]
            │       │   │       │   ├── <659>  [||]
            │       │   │       │   │   ├── <650> FunctionCall [strcmp]
            │       │   │       │   │   │   ├── <648> Dot
            │       │   │       │   │   │   │   ├── <646> Var [mem]
            │       │   │       │   │   │   │   ╰── c
            │       │   │       │   │   │   ╰── <649> "rs"
            │       │   │       │   │   ╰── <658>  [!=]
            │       │   │       │   │       ├── <655> Dot
            │       │   │       │   │       │   ├── <653> Var [mem]
            │       │   │       │   │       │   ╰── d
            │       │   │       │   │       ╰── <657> Constant Double [+1.575e1]
            │       │   │       │   ╰── <667>  [!=]
            │       │   │       │       ├── <664> Dot
            │       │   │       │       │   ├── <662> Var [mem]
            │       │   │       │       │   ╰── i
            │       │   │       │       ╰── <666> Constant Int [3333]
            │       │   │       ╰── <676>  [!=]
            │       │   │           ├── <673> Dot
            │       │   │           │   ├── <671> Var [mem]
            │       │   │           │   ╰── l
            │       │   │           ╰── <675> Constant Int [4444]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <678> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <687>  [!=]
            │       │   │       ├── <684> Dot
            │       │   │       │   ├── <682> Var [xmm_struct]
            │       │   │       │   ╰── d
            │       │   │       ╰── <686> Constant Double [+5.125e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <688> Constant Int [0]
            │       ╰── Return
            │           ╰── <691> Constant Int [1]
            ├── Function [struct_in_mem]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── first_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [xmm_and_int]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── second_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [two_xmm]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── third_struct
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [int_and_xmm]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── fourth_struct
            │   │       ╰── Type
            │   │           ╰── Struct [one_xmm]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <749>  [||]
            │       │   │       ├── <742>  [||]
            │       │   │       │   ├── <735>  [!=]
            │       │   │       │   │   ├── <732> Var [a]
            │       │   │       │   │   ╰── <734> Constant Double [+1e1]
            │       │   │       │   ╰── <741>  [!=]
            │       │   │       │       ├── <738> Var [b]
            │       │   │       │       ╰── <740> Constant Double [+1.1125e1]
            │       │   │       ╰── <748>  [!=]
            │       │   │           ├── <745> Var [c]
            │       │   │           ╰── <747> Constant Double [+1.2e1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <750> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <770>  [||]
            │       │   │       ├── <759> FunctionCall [strcmp]
            │       │   │       │   ├── <757> Dot
            │       │   │       │   │   ├── <755> Var [first_struct]
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <758> "hi"
            │       │   │       ╰── <769>  [!=]
            │       │   │           ├── <766> Dot
            │       │   │           │   ├── <764> Dot
            │       │   │           │   │   ├── <762> Var [first_struct]
            │       │   │           │   │   ╰── dbl
            │       │   │           │   ╰── d
            │       │   │           ╰── <768> Constant Double [+1.234e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <771> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <778>  [!=]
            │       │   │       ├── <775> Var [d]
            │       │   │       ╰── <777> Constant Double [+1.3e1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <779> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <801>  [||]
            │       │   │       ├── <790>  [!=]
            │       │   │       │   ├── <787> Subscript
            │       │   │       │   │   ├── <785> Dot
            │       │   │       │   │   │   ├── <783> Var [second_struct]
            │       │   │       │   │   │   ╰── d
            │       │   │       │   │   ╰── <786> Constant Int [0]
            │       │   │       │   ╰── <789> Constant Double [+5.55e1]
            │       │   │       ╰── <800>  [!=]
            │       │   │           ├── <797> Subscript
            │       │   │           │   ├── <795> Dot
            │       │   │           │   │   ├── <793> Var [second_struct]
            │       │   │           │   │   ╰── d
            │       │   │           │   ╰── <796> Constant Int [1]
            │       │   │           ╰── <799> Constant Double [+4.44e1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <802> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <806> Var [l]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <807> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <825>  [||]
            │       │   │       ├── <816>  [!=]
            │       │   │       │   ├── <813> Dot
            │       │   │       │   │   ├── <811> Var [third_struct]
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <815> Constant Int [112]
            │       │   │       ╰── <824>  [!=]
            │       │   │           ├── <821> Dot
            │       │   │           │   ├── <819> Var [third_struct]
            │       │   │           │   ╰── d
            │       │   │           ╰── <823> Constant Double [+4.56e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <826> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <835>  [!=]
            │       │   │       ├── <832> Dot
            │       │   │       │   ├── <830> Var [fourth_struct]
            │       │   │       │   ╰── d
            │       │   │       ╰── <834> Constant Double [+5.125e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <836> Constant Int [0]
            │       ╰── Return
            │           ╰── <839> Constant Int [1]
            ├── Function [pass_borderline_struct_in_memory]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── t_i
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [two_ints]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i_x
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [int_and_xmm]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ptr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Void
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── t_i_n
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [two_ints_nested]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <910>  [||]
            │       │   │       ├── <899>  [||]
            │       │   │       │   ├── <888>  [||]
            │       │   │       │   │   ├── <877>  [!=]
            │       │   │       │   │   │   ├── <874> Dot
            │       │   │       │   │   │   │   ├── <872> Var [t_i]
            │       │   │       │   │   │   │   ╰── c
            │       │   │       │   │   │   ╰── <876> Constant Int [95]
            │       │   │       │   │   ╰── <887>  [!=]
            │       │   │       │   │       ├── <884> Subscript
            │       │   │       │   │       │   ├── <882> Dot
            │       │   │       │   │       │   │   ├── <880> Var [t_i]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <883> Constant Int [0]
            │       │   │       │   │       ╰── <886> Constant Int [5]
            │       │   │       │   ╰── <898>  [!=]
            │       │   │       │       ├── <895> Subscript
            │       │   │       │       │   ├── <893> Dot
            │       │   │       │       │   │   ├── <891> Var [t_i]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <894> Constant Int [1]
            │       │   │       │       ╰── <897> Constant Int [6]
            │       │   │       ╰── <909>  [!=]
            │       │   │           ├── <906> Subscript
            │       │   │           │   ├── <904> Dot
            │       │   │           │   │   ├── <902> Var [t_i]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <905> Constant Int [2]
            │       │   │           ╰── <908> Constant Int [7]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <911> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <918>  [!=]
            │       │   │       ├── <915> Var [c]
            │       │   │       ╰── <917> Constant Int [33]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <919> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <937>  [||]
            │       │   │       ├── <928>  [!=]
            │       │   │       │   ├── <925> Dot
            │       │   │       │   │   ├── <923> Var [i_x]
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <927> Constant Int [112]
            │       │   │       ╰── <936>  [!=]
            │       │   │           ├── <933> Dot
            │       │   │           │   ├── <931> Var [i_x]
            │       │   │           │   ╰── d
            │       │   │           ╰── <935> Constant Double [+4.56e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <938> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <942> Var [ptr]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <943> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <965>  [||]
            │       │   │       ├── <954>  [!=]
            │       │   │       │   ├── <951> Dot
            │       │   │       │   │   ├── <949> Dot
            │       │   │       │   │   │   ├── <947> Var [t_i_n]
            │       │   │       │   │   │   ╰── a
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <953> Constant Int [99]
            │       │   │       ╰── <964>  [!=]
            │       │   │           ├── <961> Dot
            │       │   │           │   ├── <959> Dot
            │       │   │           │   │   ├── <957> Var [t_i_n]
            │       │   │           │   │   ╰── a
            │       │   │           │   ╰── i
            │       │   │           ╰── <963> Constant Int [54320]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <966> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <988>  [||]
            │       │   │       ├── <977>  [!=]
            │       │   │       │   ├── <974> Dot
            │       │   │       │   │   ├── <972> Dot
            │       │   │       │   │   │   ├── <970> Var [t_i_n]
            │       │   │       │   │   │   ╰── b
            │       │   │       │   │   ╰── c
            │       │   │       │   ╰── <976> Constant Int [99]
            │       │   │       ╰── <987>  [!=]
            │       │   │           ├── <984> Dot
            │       │   │           │   ├── <982> Dot
            │       │   │           │   │   ├── <980> Var [t_i_n]
            │       │   │           │   │   ╰── b
            │       │   │           │   ╰── i
            │       │   │           ╰── <986> Constant Int [54320]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <989> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <996>  [!=]
            │       │   │       ├── <993> Var [d]
            │       │   │       ╰── <995> Constant Double [+7.8e0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── <997> Constant Int [0]
            │       ╰── Return
            │           ╰── <1000> Constant Int [1]
            ├── Function [pass_uneven_struct_in_mem]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── struct1
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [twelve_bytes]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── struct2
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [twelve_bytes]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── os
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [odd_size]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── m
            │   │       ╰── Type
            │   │           ╰── Struct [memory]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1039>  [!=]
            │       │   │       ├── <1034> Dot
            │       │   │       │   ├── <1032> Var [struct1]
            │       │   │       │   ╰── i
            │       │   │       ╰── <1038> Unary [-]
            │       │   │           ╰── <1037> Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1040> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1075>  [||]
            │       │   │       ├── <1064>  [||]
            │       │   │       │   ├── <1053>  [!=]
            │       │   │       │   │   ├── <1050> Subscript
            │       │   │       │   │   │   ├── <1048> Dot
            │       │   │       │   │   │   │   ├── <1046> Var [struct1]
            │       │   │       │   │   │   │   ╰── arr
            │       │   │       │   │   │   ╰── <1049> Constant Int [0]
            │       │   │       │   │   ╰── <1052> Constant Int [127]
            │       │   │       │   ╰── <1063>  [!=]
            │       │   │       │       ├── <1060> Subscript
            │       │   │       │       │   ├── <1058> Dot
            │       │   │       │       │   │   ├── <1056> Var [struct1]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <1059> Constant Int [1]
            │       │   │       │       ╰── <1062> Constant Int [126]
            │       │   │       ╰── <1074>  [!=]
            │       │   │           ├── <1071> Subscript
            │       │   │           │   ├── <1069> Dot
            │       │   │           │   │   ├── <1067> Var [struct1]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <1070> Constant Int [2]
            │       │   │           ╰── <1073> Constant Int [125]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1076> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1092>  [||]
            │       │   │       ├── <1085>  [!=]
            │       │   │       │   ├── <1082> Var [a]
            │       │   │       │   ╰── <1084> Constant Long [9223372036854775805]
            │       │   │       ╰── <1091>  [!=]
            │       │   │           ├── <1088> Var [b]
            │       │   │           ╰── <1090> Constant Long [9223372036854775800]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1093> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1106>  [!=]
            │       │   │       ├── <1101> Dot
            │       │   │       │   ├── <1099> Var [struct2]
            │       │   │       │   ╰── i
            │       │   │       ╰── <1105> Unary [-]
            │       │   │           ╰── <1104> Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1107> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1142>  [||]
            │       │   │       ├── <1131>  [||]
            │       │   │       │   ├── <1120>  [!=]
            │       │   │       │   │   ├── <1117> Subscript
            │       │   │       │   │   │   ├── <1115> Dot
            │       │   │       │   │   │   │   ├── <1113> Var [struct2]
            │       │   │       │   │   │   │   ╰── arr
            │       │   │       │   │   │   ╰── <1116> Constant Int [0]
            │       │   │       │   │   ╰── <1119> Constant Int [100]
            │       │   │       │   ╰── <1130>  [!=]
            │       │   │       │       ├── <1127> Subscript
            │       │   │       │       │   ├── <1125> Dot
            │       │   │       │       │   │   ├── <1123> Var [struct2]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <1126> Constant Int [1]
            │       │   │       │       ╰── <1129> Constant Int [101]
            │       │   │       ╰── <1141>  [!=]
            │       │   │           ├── <1138> Subscript
            │       │   │           │   ├── <1136> Dot
            │       │   │           │   │   ├── <1134> Var [struct2]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <1137> Constant Int [2]
            │       │   │           ╰── <1140> Constant Int [102]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1143> Constant Int [0]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <1151> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <1159>  [<]
            │       │   │       ├── <1156> Var [i]
            │       │   │       ╰── <1158> Constant Int [5]
            │       │   ├── Condition
            │       │   │   ╰── <1168> Assign [=]
            │       │   │       ├── <1161> Var [i]
            │       │   │       ╰── <1167>  [+]
            │       │   │           ├── <1164> Var [i]
            │       │   │           ╰── <1166> Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <1182>  [!=]
            │       │           │       ├── <1175> Subscript
            │       │           │       │   ├── <1172> Dot
            │       │           │       │   │   ├── <1170> Var [os]
            │       │           │       │   │   ╰── arr
            │       │           │       │   ╰── <1174> Var [i]
            │       │           │       ╰── <1181>  [-]
            │       │           │           ├── <1177> Constant Int [100]
            │       │           │           ╰── <1180> Var [i]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── <1183> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1197>  [!=]
            │       │   │       ├── <1194> Dot
            │       │   │       │   ├── <1192> Var [m]
            │       │   │       │   ╰── d
            │       │   │       ╰── <1196> Constant Double [+5.345e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1198> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1239>  [||]
            │       │   │       ├── <1226>  [||]
            │       │   │       │   ├── <1213>  [!=]
            │       │   │       │   │   ├── <1208> Subscript
            │       │   │       │   │   │   ├── <1206> Dot
            │       │   │       │   │   │   │   ├── <1204> Var [m]
            │       │   │       │   │   │   │   ╰── c
            │       │   │       │   │   │   ╰── <1207> Constant Int [0]
            │       │   │       │   │   ╰── <1212> Unary [-]
            │       │   │       │   │       ╰── <1211> Constant Int [1]
            │       │   │       │   ╰── <1225>  [!=]
            │       │   │       │       ├── <1220> Subscript
            │       │   │       │       │   ├── <1218> Dot
            │       │   │       │       │   │   ├── <1216> Var [m]
            │       │   │       │       │   │   ╰── c
            │       │   │       │       │   ╰── <1219> Constant Int [1]
            │       │   │       │       ╰── <1224> Unary [-]
            │       │   │       │           ╰── <1223> Constant Int [2]
            │       │   │       ╰── <1238>  [!=]
            │       │   │           ├── <1233> Subscript
            │       │   │           │   ├── <1231> Dot
            │       │   │           │   │   ├── <1229> Var [m]
            │       │   │           │   │   ╰── c
            │       │   │           │   ╰── <1232> Constant Int [2]
            │       │   │           ╰── <1237> Unary [-]
            │       │   │               ╰── <1236> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1240> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1251>  [!=]
            │       │   │       ├── <1248> Dot
            │       │   │       │   ├── <1246> Var [m]
            │       │   │       │   ╰── l
            │       │   │       ╰── <1250> Constant Long [4294967300]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1252> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1263>  [!=]
            │       │   │       ├── <1260> Dot
            │       │   │       │   ├── <1258> Var [m]
            │       │   │       │   ╰── i
            │       │   │       ╰── <1262> Constant Int [10000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1264> Constant Int [0]
            │       ╰── Return
            │           ╰── <1269> Constant Int [1]
            ╰── Function [pass_later_structs_in_regs]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── m
                │   │   ╰── Type
                │   │       ╰── Struct [memory]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── struct1
                │   │   ╰── Type
                │   │       ╰── Struct [twelve_bytes]
                │   ╰── Param
                │       ├── Name
                │       │   ╰── struct2
                │       ╰── Type
                │           ╰── Struct [one_xmm]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1296>  [!=]
                    │   │       ├── <1293> Dot
                    │   │       │   ├── <1291> Var [m]
                    │   │       │   ╰── d
                    │   │       ╰── <1295> Constant Double [+5.345e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1297> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1338>  [||]
                    │   │       ├── <1325>  [||]
                    │   │       │   ├── <1312>  [!=]
                    │   │       │   │   ├── <1307> Subscript
                    │   │       │   │   │   ├── <1305> Dot
                    │   │       │   │   │   │   ├── <1303> Var [m]
                    │   │       │   │   │   │   ╰── c
                    │   │       │   │   │   ╰── <1306> Constant Int [0]
                    │   │       │   │   ╰── <1311> Unary [-]
                    │   │       │   │       ╰── <1310> Constant Int [1]
                    │   │       │   ╰── <1324>  [!=]
                    │   │       │       ├── <1319> Subscript
                    │   │       │       │   ├── <1317> Dot
                    │   │       │       │   │   ├── <1315> Var [m]
                    │   │       │       │   │   ╰── c
                    │   │       │       │   ╰── <1318> Constant Int [1]
                    │   │       │       ╰── <1323> Unary [-]
                    │   │       │           ╰── <1322> Constant Int [2]
                    │   │       ╰── <1337>  [!=]
                    │   │           ├── <1332> Subscript
                    │   │           │   ├── <1330> Dot
                    │   │           │   │   ├── <1328> Var [m]
                    │   │           │   │   ╰── c
                    │   │           │   ╰── <1331> Constant Int [2]
                    │   │           ╰── <1336> Unary [-]
                    │   │               ╰── <1335> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1339> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1350>  [!=]
                    │   │       ├── <1347> Dot
                    │   │       │   ├── <1345> Var [m]
                    │   │       │   ╰── l
                    │   │       ╰── <1349> Constant Long [4294967300]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1351> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1362>  [!=]
                    │   │       ├── <1359> Dot
                    │   │       │   ├── <1357> Var [m]
                    │   │       │   ╰── i
                    │   │       ╰── <1361> Constant Int [10000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1363> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1376>  [!=]
                    │   │       ├── <1371> Dot
                    │   │       │   ├── <1369> Var [struct1]
                    │   │       │   ╰── i
                    │   │       ╰── <1375> Unary [-]
                    │   │           ╰── <1374> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1377> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1412>  [||]
                    │   │       ├── <1401>  [||]
                    │   │       │   ├── <1390>  [!=]
                    │   │       │   │   ├── <1387> Subscript
                    │   │       │   │   │   ├── <1385> Dot
                    │   │       │   │   │   │   ├── <1383> Var [struct1]
                    │   │       │   │   │   │   ╰── arr
                    │   │       │   │   │   ╰── <1386> Constant Int [0]
                    │   │       │   │   ╰── <1389> Constant Int [127]
                    │   │       │   ╰── <1400>  [!=]
                    │   │       │       ├── <1397> Subscript
                    │   │       │       │   ├── <1395> Dot
                    │   │       │       │   │   ├── <1393> Var [struct1]
                    │   │       │       │   │   ╰── arr
                    │   │       │       │   ╰── <1396> Constant Int [1]
                    │   │       │       ╰── <1399> Constant Int [126]
                    │   │       ╰── <1411>  [!=]
                    │   │           ├── <1408> Subscript
                    │   │           │   ├── <1406> Dot
                    │   │           │   │   ├── <1404> Var [struct1]
                    │   │           │   │   ╰── arr
                    │   │           │   ╰── <1407> Constant Int [2]
                    │   │           ╰── <1410> Constant Int [125]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1413> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1424>  [!=]
                    │   │       ├── <1421> Dot
                    │   │       │   ├── <1419> Var [struct2]
                    │   │       │   ╰── d
                    │   │       ╰── <1423> Constant Double [+5.125e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1425> Constant Int [0]
                    ╰── Return
                        ╰── <1430> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_param_calling_conventions_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int strncmp(char *s1, char *s2, unsigned long n);
        struct two_longs {
            long a;
            long b;
        };
        struct one_int {
            int i;
            char c;
        };
        struct one_int_exactly {
            unsigned long l;
        };
        struct two_ints {
            char c;
            int arr[3];
        };
        struct two_ints_nested {
            struct one_int a;
            struct one_int b;
        };
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct one_xmm {
            double d;
        };
        struct two_xmm {
            double d[2];
        };
        struct int_and_xmm {
            char c;
            double d;
        };
        struct xmm_and_int {
            struct one_xmm dbl;
            char c[3];
        };
        struct odd_size {
            char arr[5];
        };
        struct memory {
            double d;
            char c[3];
            long l;
            int i;
        };
        int pass_small_structs(struct two_xmm two_xmm_struct, struct one_int int_struct,
                               struct one_xmm xmm_struct,
                               struct xmm_and_int mixed_struct,
                               struct twelve_bytes int_struct_2,
                               struct one_int_exactly another_int_struct);
        int a_bunch_of_arguments(int i0, int i1, int i2, int i3, int i4,
                                 struct two_longs param, int i5);
        int structs_and_scalars(long l, double d, struct odd_size os, struct memory mem,
                                struct one_xmm xmm_struct);
        int struct_in_mem(double a, double b, double c, struct xmm_and_int first_struct,
                          double d, struct two_xmm second_struct, long l,
                          struct int_and_xmm third_struct,
                          struct one_xmm fourth_struct);
        int pass_borderline_struct_in_memory(struct two_ints t_i, int c,
                                             struct int_and_xmm i_x, void *ptr,
                                             struct two_ints_nested t_i_n, double d);
        int pass_uneven_struct_in_mem(struct twelve_bytes struct1, long a, long b,
                                      struct twelve_bytes struct2, struct odd_size os,
                                      struct memory m);
        int pass_later_structs_in_regs(struct memory m, struct twelve_bytes struct1, struct one_xmm struct2);
        
        int main(void) {
            struct two_longs two_longs = {1234567l, 89101112l};
            struct one_int one_int = {54320, 'c'};
            struct one_int_exactly one_long = {567890l};
            struct two_ints two_ints = {'_', {5, 6, 7}};
            struct two_ints_nested two_ints_nested = {one_int, one_int};
            struct twelve_bytes xii = {123, "string!"};
            struct one_xmm one_xmm = {5.125};
            struct two_xmm two_xmm = {{55.5, 44.4}};
            struct int_and_xmm int_and_xmm = {'p', 4.56};
            struct xmm_and_int xmm_and_int = {{1.234}, "hi"};
            struct odd_size odd = {"lmno"};
            struct memory mem = {15.75, "rs", 4444, 3333};
            if (!pass_small_structs(two_xmm, one_int, one_xmm, xmm_and_int, xii,
                                    one_long)) {
                return 1;
            }
            if (!a_bunch_of_arguments(0, 1, 2, 3, 4, two_longs, 5)) {
                return 2;
            }
            if (!structs_and_scalars(10, 10.0, odd, mem, one_xmm)) {
                return 2;
            }
            if (!struct_in_mem(10.0, 11.125, 12.0, xmm_and_int, 13.0, two_xmm, 0,
                               int_and_xmm, one_xmm)) {
                return 3;
            }
            if (!pass_borderline_struct_in_memory(two_ints, '!', int_and_xmm, 0,
                                                  two_ints_nested, 7.8)) {
                return 4;
            }
            struct twelve_bytes struct1 = {-1, {127, 126, 125}};
            struct twelve_bytes struct2 = {-5, {100, 101, 102}};
            struct odd_size os = {{100, 99, 98, 97, 96}};
            struct memory m = {5.345, {-1, -2, -3}, 4294967300l, 10000};
            if (!pass_uneven_struct_in_mem(struct1, 9223372036854775805l,
                                           9223372036854775800l, struct2, os, m)) {
                return 5;
            }
            if (!pass_later_structs_in_regs(m, struct1, one_xmm)) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [strncmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── n
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [two_longs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Long
            ├── Struct [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [one_int_exactly]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Struct [two_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Struct [two_ints_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Struct [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [one_int]
            ├── Struct [twelve_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [two_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Double
            ├── Struct [int_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [xmm_and_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl
            │   │   ╰── Type
            │   │       ╰── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [odd_size]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [memory]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Function [pass_small_structs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── two_xmm_struct
            │       │   ╰── Type
            │       │       ╰── Struct [two_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_struct
            │       │   ╰── Type
            │       │       ╰── Struct [one_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── xmm_struct
            │       │   ╰── Type
            │       │       ╰── Struct [one_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mixed_struct
            │       │   ╰── Type
            │       │       ╰── Struct [xmm_and_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── int_struct_2
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── another_int_struct
            │           ╰── Type
            │               ╰── Struct [one_int_exactly]
            ├── Function [a_bunch_of_arguments]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i0
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── param
            │       │   ╰── Type
            │       │       ╰── Struct [two_longs]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i5
            │           ╰── Type
            │               ╰── Int
            ├── Function [structs_and_scalars]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── os
            │       │   ╰── Type
            │       │       ╰── Struct [odd_size]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── mem
            │       │   ╰── Type
            │       │       ╰── Struct [memory]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── xmm_struct
            │           ╰── Type
            │               ╰── Struct [one_xmm]
            ├── Function [struct_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── first_struct
            │       │   ╰── Type
            │       │       ╰── Struct [xmm_and_int]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── second_struct
            │       │   ╰── Type
            │       │       ╰── Struct [two_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── third_struct
            │       │   ╰── Type
            │       │       ╰── Struct [int_and_xmm]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── fourth_struct
            │           ╰── Type
            │               ╰── Struct [one_xmm]
            ├── Function [pass_borderline_struct_in_memory]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_i
            │       │   ╰── Type
            │       │       ╰── Struct [two_ints]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i_x
            │       │   ╰── Type
            │       │       ╰── Struct [int_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Void
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_i_n
            │       │   ╰── Type
            │       │       ╰── Struct [two_ints_nested]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d
            │           ╰── Type
            │               ╰── Double
            ├── Function [pass_uneven_struct_in_mem]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── struct1
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── struct2
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── os
            │       │   ╰── Type
            │       │       ╰── Struct [odd_size]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── m
            │           ╰── Type
            │               ╰── Struct [memory]
            ├── Function [pass_later_structs_in_regs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── m
            │       │   ╰── Type
            │       │       ╰── Struct [memory]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── struct1
            │       │   ╰── Type
            │       │       ╰── Struct [twelve_bytes]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── struct2
            │           ╰── Type
            │               ╰── Struct [one_xmm]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_longs
                    │   ├── Type
                    │   │   ╰── Struct [two_longs]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <372> Constant Long [1234567]
                    │           ╰── <374> Constant Long [89101112]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── one_int
                    │   ├── Type
                    │   │   ╰── Struct [one_int]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <382> Constant Int [54320]
                    │           ╰── <384> Constant Int [99]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── one_long
                    │   ├── Type
                    │   │   ╰── Struct [one_int_exactly]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <392> Constant Long [567890]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_ints
                    │   ├── Type
                    │   │   ╰── Struct [two_ints]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <400> Constant Int [95]
                    │           ╰── Compound
                    │               ├── <402> Constant Int [5]
                    │               ├── <404> Constant Int [6]
                    │               ╰── <406> Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_ints_nested
                    │   ├── Type
                    │   │   ╰── Struct [two_ints_nested]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <416> Var [one_int]
                    │           ╰── <419> Var [one_int]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── xii
                    │   ├── Type
                    │   │   ╰── Struct [twelve_bytes]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <427> Constant Int [123]
                    │           ╰── <429> "string!"
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── one_xmm
                    │   ├── Type
                    │   │   ╰── Struct [one_xmm]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <437> Constant Double [+5.125e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_xmm
                    │   ├── Type
                    │   │   ╰── Struct [two_xmm]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <445> Constant Double [+5.55e1]
                    │               ╰── <447> Constant Double [+4.44e1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── int_and_xmm
                    │   ├── Type
                    │   │   ╰── Struct [int_and_xmm]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <456> Constant Int [112]
                    │           ╰── <458> Constant Double [+4.56e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── xmm_and_int
                    │   ├── Type
                    │   │   ╰── Struct [xmm_and_int]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ╰── <466> Constant Double [+1.234e0]
                    │           ╰── <469> "hi"
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── odd
                    │   ├── Type
                    │   │   ╰── Struct [odd_size]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <477> "lmno"
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── mem
                    │   ├── Type
                    │   │   ╰── Struct [memory]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <485> Constant Double [+1.575e1]
                    │           ├── <487> "rs"
                    │           ├── <489> Constant Int [4444]
                    │           ╰── <491> Constant Int [3333]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <510> Unary [!]
                    │   │       ╰── <509> FunctionCall [pass_small_structs]
                    │   │           ├── <498> Var [two_xmm]
                    │   │           ├── <500> Var [one_int]
                    │   │           ├── <502> Var [one_xmm]
                    │   │           ├── <504> Var [xmm_and_int]
                    │   │           ├── <506> Var [xii]
                    │   │           ╰── <508> Var [one_long]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <511> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <527> Unary [!]
                    │   │       ╰── <526> FunctionCall [a_bunch_of_arguments]
                    │   │           ├── <518> Constant Int [0]
                    │   │           ├── <519> Constant Int [1]
                    │   │           ├── <520> Constant Int [2]
                    │   │           ├── <521> Constant Int [3]
                    │   │           ├── <522> Constant Int [4]
                    │   │           ├── <524> Var [two_longs]
                    │   │           ╰── <525> Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <528> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <544> Unary [!]
                    │   │       ╰── <543> FunctionCall [structs_and_scalars]
                    │   │           ├── <535> Constant Int [10]
                    │   │           ├── <536> Constant Double [+1e1]
                    │   │           ├── <538> Var [odd]
                    │   │           ├── <540> Var [mem]
                    │   │           ╰── <542> Var [one_xmm]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <545> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <566> Unary [!]
                    │   │       ╰── <565> FunctionCall [struct_in_mem]
                    │   │           ├── <552> Constant Double [+1e1]
                    │   │           ├── <553> Constant Double [+1.1125e1]
                    │   │           ├── <554> Constant Double [+1.2e1]
                    │   │           ├── <556> Var [xmm_and_int]
                    │   │           ├── <557> Constant Double [+1.3e1]
                    │   │           ├── <559> Var [two_xmm]
                    │   │           ├── <560> Constant Int [0]
                    │   │           ├── <562> Var [int_and_xmm]
                    │   │           ╰── <564> Var [one_xmm]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <567> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <584> Unary [!]
                    │   │       ╰── <583> FunctionCall [pass_borderline_struct_in_memory]
                    │   │           ├── <575> Var [two_ints]
                    │   │           ├── <576> Constant Int [33]
                    │   │           ├── <578> Var [int_and_xmm]
                    │   │           ├── <579> Constant Int [0]
                    │   │           ├── <581> Var [two_ints_nested]
                    │   │           ╰── <582> Constant Double [+7.8e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <585> Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── struct1
                    │   ├── Type
                    │   │   ╰── Struct [twelve_bytes]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <596> Unary [-]
                    │           │   ╰── <595> Constant Int [1]
                    │           ╰── Compound
                    │               ├── <598> Constant Int [127]
                    │               ├── <600> Constant Int [126]
                    │               ╰── <602> Constant Int [125]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── struct2
                    │   ├── Type
                    │   │   ╰── Struct [twelve_bytes]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <613> Unary [-]
                    │           │   ╰── <612> Constant Int [5]
                    │           ╰── Compound
                    │               ├── <615> Constant Int [100]
                    │               ├── <617> Constant Int [101]
                    │               ╰── <619> Constant Int [102]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── os
                    │   ├── Type
                    │   │   ╰── Struct [odd_size]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── <628> Constant Int [100]
                    │               ├── <630> Constant Int [99]
                    │               ├── <632> Constant Int [98]
                    │               ├── <634> Constant Int [97]
                    │               ╰── <636> Constant Int [96]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── m
                    │   ├── Type
                    │   │   ╰── Struct [memory]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <645> Constant Double [+5.345e0]
                    │           ├── Compound
                    │           │   ├── <649> Unary [-]
                    │           │   │   ╰── <648> Constant Int [1]
                    │           │   ├── <653> Unary [-]
                    │           │   │   ╰── <652> Constant Int [2]
                    │           │   ╰── <657> Unary [-]
                    │           │       ╰── <656> Constant Int [3]
                    │           ├── <660> Constant Long [4294967300]
                    │           ╰── <662> Constant Int [10000]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <679> Unary [!]
                    │   │       ╰── <678> FunctionCall [pass_uneven_struct_in_mem]
                    │   │           ├── <669> Var [struct1]
                    │   │           ├── <670> Constant Long [9223372036854775805]
                    │   │           ├── <671> Constant Long [9223372036854775800]
                    │   │           ├── <673> Var [struct2]
                    │   │           ├── <675> Var [os]
                    │   │           ╰── <677> Var [m]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <680> Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <694> Unary [!]
                    │   │       ╰── <693> FunctionCall [pass_later_structs_in_regs]
                    │   │           ├── <688> Var [m]
                    │   │           ├── <690> Var [struct1]
                    │   │           ╰── <692> Var [one_xmm]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <695> Constant Int [6]
                    ╰── Return
                        ╰── <700> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_pass_struct() {
    let src = r#"
        struct pair {
            int x;
            int y;
        };
        int validate_struct_param(struct pair p);
        
        int validate_struct_param(struct pair p) {
            if (p.x != 1 || p.y != 2) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Function [validate_struct_param]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── p
            │           ╰── Type
            │               ╰── Struct [pair]
            ╰── Function [validate_struct_param]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── p
                │       ╰── Type
                │           ╰── Struct [pair]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <45>  [||]
                    │   │       ├── <36>  [!=]
                    │   │       │   ├── <33> Dot
                    │   │       │   │   ├── <31> Var [p]
                    │   │       │   │   ╰── x
                    │   │       │   ╰── <35> Constant Int [1]
                    │   │       ╰── <44>  [!=]
                    │   │           ├── <41> Dot
                    │   │           │   ├── <39> Var [p]
                    │   │           │   ╰── y
                    │   │           ╰── <43> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <46> Constant Int [0]
                    ╰── Return
                        ╰── <51> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_pass_struct_client() {
    let src = r#"
        struct pair {
            int x;
            int y;
        };
        int validate_struct_param(struct pair p);
        
        int main(void) {
            struct pair arg = {1, 2};
            if (!validate_struct_param(arg)) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Int
            ├── Function [validate_struct_param]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── p
            │           ╰── Type
            │               ╰── Struct [pair]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arg
                    │   ├── Type
                    │   │   ╰── Struct [pair]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <30> Constant Int [1]
                    │           ╰── <32> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <41> Unary [!]
                    │   │       ╰── <40> FunctionCall [validate_struct_param]
                    │   │           ╰── <39> Var [arg]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <42> Constant Int [1]
                    ╰── Return
                        ╰── <47> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_struct_sizes() {
    let src = r#"
        struct bytesize1 {
            unsigned char arr[1];
        };
        extern struct bytesize1 globvar_1;
        struct bytesize2 {
            unsigned char arr[2];
        };
        extern struct bytesize2 globvar_2;
        struct bytesize3 {
            unsigned char arr[3];
        };
        extern struct bytesize3 globvar_3;
        struct bytesize4 {
            unsigned char arr[4];
        };
        extern struct bytesize4 globvar_4;
        struct bytesize5 {
            unsigned char arr[5];
        };
        extern struct bytesize5 globvar_5;
        struct bytesize6 {
            unsigned char arr[6];
        };
        extern struct bytesize6 globvar_6;
        struct bytesize7 {
            unsigned char arr[7];
        };
        extern struct bytesize7 globvar_7;
        struct bytesize8 {
            unsigned char arr[8];
        };
        extern struct bytesize8 globvar_8;
        struct bytesize9 {
            unsigned char arr[9];
        };
        extern struct bytesize9 globvar_9;
        struct bytesize10 {
            unsigned char arr[10];
        };
        extern struct bytesize10 globvar_10;
        struct bytesize11 {
            unsigned char arr[11];
        };
        extern struct bytesize11 globvar_11;
        struct bytesize12 {
            unsigned char arr[12];
        };
        extern struct bytesize12 globvar_12;
        struct bytesize13 {
            unsigned char arr[13];
        };
        extern struct bytesize13 globvar_13;
        struct bytesize14 {
            unsigned char arr[14];
        };
        extern struct bytesize14 globvar_14;
        struct bytesize15 {
            unsigned char arr[15];
        };
        extern struct bytesize15 globvar_15;
        struct bytesize16 {
            unsigned char arr[16];
        };
        extern struct bytesize16 globvar_16;
        struct bytesize17 {
            unsigned char arr[17];
        };
        extern struct bytesize17 globvar_17;
        struct bytesize18 {
            unsigned char arr[18];
        };
        extern struct bytesize18 globvar_18;
        struct bytesize19 {
            unsigned char arr[19];
        };
        extern struct bytesize19 globvar_19;
        struct bytesize20 {
            unsigned char arr[20];
        };
        extern struct bytesize20 globvar_20;
        struct bytesize21 {
            unsigned char arr[21];
        };
        extern struct bytesize21 globvar_21;
        struct bytesize22 {
            unsigned char arr[22];
        };
        extern struct bytesize22 globvar_22;
        struct bytesize23 {
            unsigned char arr[23];
        };
        extern struct bytesize23 globvar_23;
        struct bytesize24 {
            unsigned char arr[24];
        };
        extern struct bytesize24 globvar_24;
        int fun0(struct bytesize1 a, struct bytesize2 b, struct bytesize3 c,
                 struct bytesize4 d, struct bytesize5 e, struct bytesize6 f,
                 struct bytesize7 g, struct bytesize8 h, struct bytesize9 i,
                 struct bytesize10 j, struct bytesize11 k, struct bytesize12 l,
                 struct bytesize13 m, struct bytesize14 n, struct bytesize15 o,
                 struct bytesize16 p, struct bytesize17 q, struct bytesize18 r,
                 struct bytesize19 s, struct bytesize20 t, struct bytesize21 u,
                 struct bytesize22 v, struct bytesize23 w, struct bytesize24 x,
                 unsigned char *a_expected, unsigned char *b_expected,
                 unsigned char *c_expected, unsigned char *d_expected,
                 unsigned char *e_expected, unsigned char *f_expected,
                 unsigned char *g_expected, unsigned char *h_expected,
                 unsigned char *i_expected, unsigned char *j_expected,
                 unsigned char *k_expected, unsigned char *l_expected,
                 unsigned char *m_expected, unsigned char *n_expected,
                 unsigned char *o_expected, unsigned char *p_expected,
                 unsigned char *q_expected, unsigned char *r_expected,
                 unsigned char *s_expected, unsigned char *t_expected,
                 unsigned char *u_expected, unsigned char *v_expected,
                 unsigned char *w_expected, unsigned char *x_expected);
        int fun1(struct bytesize7 a, struct bytesize8 b, struct bytesize9 c,
                 struct bytesize10 d, struct bytesize1 e, struct bytesize2 f,
                 struct bytesize3 g, struct bytesize4 h, struct bytesize5 i,
                 struct bytesize6 j, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected, unsigned char *e_expected,
                 unsigned char *f_expected, unsigned char *g_expected,
                 unsigned char *h_expected, unsigned char *i_expected,
                 unsigned char *j_expected);
        int fun2(struct bytesize11 a, struct bytesize12 b, struct bytesize13 c,
                 struct bytesize1 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected);
        int fun3(struct bytesize14 a, struct bytesize15 b, struct bytesize16 c,
                 struct bytesize2 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected);
        int memcmp(void *s1, void *s2, unsigned long n);
        int fun0(struct bytesize1 a, struct bytesize2 b, struct bytesize3 c,
                 struct bytesize4 d, struct bytesize5 e, struct bytesize6 f,
                 struct bytesize7 g, struct bytesize8 h, struct bytesize9 i,
                 struct bytesize10 j, struct bytesize11 k, struct bytesize12 l,
                 struct bytesize13 m, struct bytesize14 n, struct bytesize15 o,
                 struct bytesize16 p, struct bytesize17 q, struct bytesize18 r,
                 struct bytesize19 s, struct bytesize20 t, struct bytesize21 u,
                 struct bytesize22 v, struct bytesize23 w, struct bytesize24 x,
                 unsigned char *a_expected, unsigned char *b_expected,
                 unsigned char *c_expected, unsigned char *d_expected,
                 unsigned char *e_expected, unsigned char *f_expected,
                 unsigned char *g_expected, unsigned char *h_expected,
                 unsigned char *i_expected, unsigned char *j_expected,
                 unsigned char *k_expected, unsigned char *l_expected,
                 unsigned char *m_expected, unsigned char *n_expected,
                 unsigned char *o_expected, unsigned char *p_expected,
                 unsigned char *q_expected, unsigned char *r_expected,
                 unsigned char *s_expected, unsigned char *t_expected,
                 unsigned char *u_expected, unsigned char *v_expected,
                 unsigned char *w_expected, unsigned char *x_expected) {
            if (memcmp(&a, a_expected, sizeof a)) {
                return 0;
            }
            if (memcmp(&b, b_expected, sizeof b)) {
                return 0;
            }
            if (memcmp(&c, c_expected, sizeof c)) {
                return 0;
            }
            if (memcmp(&d, d_expected, sizeof d)) {
                return 0;
            }
            if (memcmp(&e, e_expected, sizeof e)) {
                return 0;
            }
            if (memcmp(&f, f_expected, sizeof f)) {
                return 0;
            }
            if (memcmp(&g, g_expected, sizeof g)) {
                return 0;
            }
            if (memcmp(&h, h_expected, sizeof h)) {
                return 0;
            }
            if (memcmp(&i, i_expected, sizeof i)) {
                return 0;
            }
            if (memcmp(&j, j_expected, sizeof j)) {
                return 0;
            }
            if (memcmp(&k, k_expected, sizeof k)) {
                return 0;
            }
            if (memcmp(&l, l_expected, sizeof l)) {
                return 0;
            }
            if (memcmp(&m, m_expected, sizeof m)) {
                return 0;
            }
            if (memcmp(&n, n_expected, sizeof n)) {
                return 0;
            }
            if (memcmp(&o, o_expected, sizeof o)) {
                return 0;
            }
            if (memcmp(&p, p_expected, sizeof p)) {
                return 0;
            }
            if (memcmp(&q, q_expected, sizeof q)) {
                return 0;
            }
            if (memcmp(&r, r_expected, sizeof r)) {
                return 0;
            }
            if (memcmp(&s, s_expected, sizeof s)) {
                return 0;
            }
            if (memcmp(&t, t_expected, sizeof t)) {
                return 0;
            }
            if (memcmp(&u, u_expected, sizeof u)) {
                return 0;
            }
            if (memcmp(&v, v_expected, sizeof v)) {
                return 0;
            }
            if (memcmp(&w, w_expected, sizeof w)) {
                return 0;
            }
            if (memcmp(&x, x_expected, sizeof x)) {
                return 0;
            }
            return 1;
        }
        int fun1(struct bytesize7 a, struct bytesize8 b, struct bytesize9 c,
                 struct bytesize10 d, struct bytesize1 e, struct bytesize2 f,
                 struct bytesize3 g, struct bytesize4 h, struct bytesize5 i,
                 struct bytesize6 j, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected, unsigned char *e_expected,
                 unsigned char *f_expected, unsigned char *g_expected,
                 unsigned char *h_expected, unsigned char *i_expected,
                 unsigned char *j_expected) {
            if (memcmp(&a, a_expected, sizeof a)) {
                return 0;
            }
            if (memcmp(&b, b_expected, sizeof b)) {
                return 0;
            }
            if (memcmp(&c, c_expected, sizeof c)) {
                return 0;
            }
            if (memcmp(&d, d_expected, sizeof d)) {
                return 0;
            }
            if (memcmp(&e, e_expected, sizeof e)) {
                return 0;
            }
            if (memcmp(&f, f_expected, sizeof f)) {
                return 0;
            }
            if (memcmp(&g, g_expected, sizeof g)) {
                return 0;
            }
            if (memcmp(&h, h_expected, sizeof h)) {
                return 0;
            }
            if (memcmp(&i, i_expected, sizeof i)) {
                return 0;
            }
            if (memcmp(&j, j_expected, sizeof j)) {
                return 0;
            }
            return 1;
        }
        int fun2(struct bytesize11 a, struct bytesize12 b, struct bytesize13 c,
                 struct bytesize1 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected) {
            if (memcmp(&a, a_expected, sizeof a)) {
                return 0;
            }
            if (memcmp(&b, b_expected, sizeof b)) {
                return 0;
            }
            if (memcmp(&c, c_expected, sizeof c)) {
                return 0;
            }
            if (memcmp(&d, d_expected, sizeof d)) {
                return 0;
            }
            return 1;
        }
        int fun3(struct bytesize14 a, struct bytesize15 b, struct bytesize16 c,
                 struct bytesize2 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected) {
            if (memcmp(&a, a_expected, sizeof a)) {
                return 0;
            }
            if (memcmp(&b, b_expected, sizeof b)) {
                return 0;
            }
            if (memcmp(&c, c_expected, sizeof c)) {
                return 0;
            }
            if (memcmp(&d, d_expected, sizeof d)) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [bytesize1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_1
            │   ├── Type
            │   │   ╰── Struct [bytesize1]
            │   ╰── Extern
            ├── Struct [bytesize2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_2
            │   ├── Type
            │   │   ╰── Struct [bytesize2]
            │   ╰── Extern
            ├── Struct [bytesize3]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_3
            │   ├── Type
            │   │   ╰── Struct [bytesize3]
            │   ╰── Extern
            ├── Struct [bytesize4]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 4
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_4
            │   ├── Type
            │   │   ╰── Struct [bytesize4]
            │   ╰── Extern
            ├── Struct [bytesize5]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_5
            │   ├── Type
            │   │   ╰── Struct [bytesize5]
            │   ╰── Extern
            ├── Struct [bytesize6]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 6
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_6
            │   ├── Type
            │   │   ╰── Struct [bytesize6]
            │   ╰── Extern
            ├── Struct [bytesize7]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 7
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_7
            │   ├── Type
            │   │   ╰── Struct [bytesize7]
            │   ╰── Extern
            ├── Struct [bytesize8]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_8
            │   ├── Type
            │   │   ╰── Struct [bytesize8]
            │   ╰── Extern
            ├── Struct [bytesize9]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 9
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_9
            │   ├── Type
            │   │   ╰── Struct [bytesize9]
            │   ╰── Extern
            ├── Struct [bytesize10]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_10
            │   ├── Type
            │   │   ╰── Struct [bytesize10]
            │   ╰── Extern
            ├── Struct [bytesize11]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 11
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_11
            │   ├── Type
            │   │   ╰── Struct [bytesize11]
            │   ╰── Extern
            ├── Struct [bytesize12]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 12
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_12
            │   ├── Type
            │   │   ╰── Struct [bytesize12]
            │   ╰── Extern
            ├── Struct [bytesize13]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 13
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_13
            │   ├── Type
            │   │   ╰── Struct [bytesize13]
            │   ╰── Extern
            ├── Struct [bytesize14]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 14
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_14
            │   ├── Type
            │   │   ╰── Struct [bytesize14]
            │   ╰── Extern
            ├── Struct [bytesize15]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 15
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_15
            │   ├── Type
            │   │   ╰── Struct [bytesize15]
            │   ╰── Extern
            ├── Struct [bytesize16]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 16
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_16
            │   ├── Type
            │   │   ╰── Struct [bytesize16]
            │   ╰── Extern
            ├── Struct [bytesize17]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 17
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_17
            │   ├── Type
            │   │   ╰── Struct [bytesize17]
            │   ╰── Extern
            ├── Struct [bytesize18]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 18
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_18
            │   ├── Type
            │   │   ╰── Struct [bytesize18]
            │   ╰── Extern
            ├── Struct [bytesize19]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_19
            │   ├── Type
            │   │   ╰── Struct [bytesize19]
            │   ╰── Extern
            ├── Struct [bytesize20]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 20
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_20
            │   ├── Type
            │   │   ╰── Struct [bytesize20]
            │   ╰── Extern
            ├── Struct [bytesize21]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 21
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_21
            │   ├── Type
            │   │   ╰── Struct [bytesize21]
            │   ╰── Extern
            ├── Struct [bytesize22]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 22
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_22
            │   ├── Type
            │   │   ╰── Struct [bytesize22]
            │   ╰── Extern
            ├── Struct [bytesize23]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 23
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_23
            │   ├── Type
            │   │   ╰── Struct [bytesize23]
            │   ╰── Extern
            ├── Struct [bytesize24]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 24
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_24
            │   ├── Type
            │   │   ╰── Struct [bytesize24]
            │   ╰── Extern
            ├── Function [fun0]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize1]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize2]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize3]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize4]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize5]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize6]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize7]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize8]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize9]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize10]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── k
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize11]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize12]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── m
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize13]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── n
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize14]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── o
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize15]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── p
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize16]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── q
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize17]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── r
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize18]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize19]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize20]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── u
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize21]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── v
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize22]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── w
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize23]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize24]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── k_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── m_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── n_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── o_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── p_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── q_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── r_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── u_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── v_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── w_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── x_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [fun1]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize7]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize8]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize9]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize10]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize1]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize2]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize3]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize4]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize5]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize6]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── j_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [fun2]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize11]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize12]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize13]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize1]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [fun3]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize14]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize15]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize16]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize2]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [memcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Void
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Void
            │       ╰── Param
            │           ├── Name
            │           │   ╰── n
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [fun0]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize1]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize2]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize3]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize4]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize5]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize6]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize7]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── h
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize8]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize9]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize10]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── k
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize11]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize12]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── m
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize13]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── n
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize14]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── o
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize15]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── p
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize16]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── q
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize17]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── r
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize18]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize19]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── t
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize20]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── u
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize21]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── v
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize22]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── w
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize23]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── x
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize24]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── h_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── k_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── m_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── n_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── o_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── p_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── q_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── r_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── t_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── u_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── v_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── w_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── x_expected
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Unsigned Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1012> FunctionCall [memcmp]
            │       │   │       ├── <1006> AddressOf
            │       │   │       │   ╰── <1005> Var [a]
            │       │   │       ├── <1008> Var [a_expected]
            │       │   │       ╰── <1011> SizeOfExpr
            │       │   │           ╰── <1010> Var [a]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1013> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1027> FunctionCall [memcmp]
            │       │   │       ├── <1021> AddressOf
            │       │   │       │   ╰── <1020> Var [b]
            │       │   │       ├── <1023> Var [b_expected]
            │       │   │       ╰── <1026> SizeOfExpr
            │       │   │           ╰── <1025> Var [b]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1028> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1042> FunctionCall [memcmp]
            │       │   │       ├── <1036> AddressOf
            │       │   │       │   ╰── <1035> Var [c]
            │       │   │       ├── <1038> Var [c_expected]
            │       │   │       ╰── <1041> SizeOfExpr
            │       │   │           ╰── <1040> Var [c]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1043> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1057> FunctionCall [memcmp]
            │       │   │       ├── <1051> AddressOf
            │       │   │       │   ╰── <1050> Var [d]
            │       │   │       ├── <1053> Var [d_expected]
            │       │   │       ╰── <1056> SizeOfExpr
            │       │   │           ╰── <1055> Var [d]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1058> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1072> FunctionCall [memcmp]
            │       │   │       ├── <1066> AddressOf
            │       │   │       │   ╰── <1065> Var [e]
            │       │   │       ├── <1068> Var [e_expected]
            │       │   │       ╰── <1071> SizeOfExpr
            │       │   │           ╰── <1070> Var [e]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1073> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1087> FunctionCall [memcmp]
            │       │   │       ├── <1081> AddressOf
            │       │   │       │   ╰── <1080> Var [f]
            │       │   │       ├── <1083> Var [f_expected]
            │       │   │       ╰── <1086> SizeOfExpr
            │       │   │           ╰── <1085> Var [f]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1088> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1102> FunctionCall [memcmp]
            │       │   │       ├── <1096> AddressOf
            │       │   │       │   ╰── <1095> Var [g]
            │       │   │       ├── <1098> Var [g_expected]
            │       │   │       ╰── <1101> SizeOfExpr
            │       │   │           ╰── <1100> Var [g]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1103> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1117> FunctionCall [memcmp]
            │       │   │       ├── <1111> AddressOf
            │       │   │       │   ╰── <1110> Var [h]
            │       │   │       ├── <1113> Var [h_expected]
            │       │   │       ╰── <1116> SizeOfExpr
            │       │   │           ╰── <1115> Var [h]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1118> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1132> FunctionCall [memcmp]
            │       │   │       ├── <1126> AddressOf
            │       │   │       │   ╰── <1125> Var [i]
            │       │   │       ├── <1128> Var [i_expected]
            │       │   │       ╰── <1131> SizeOfExpr
            │       │   │           ╰── <1130> Var [i]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1133> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1147> FunctionCall [memcmp]
            │       │   │       ├── <1141> AddressOf
            │       │   │       │   ╰── <1140> Var [j]
            │       │   │       ├── <1143> Var [j_expected]
            │       │   │       ╰── <1146> SizeOfExpr
            │       │   │           ╰── <1145> Var [j]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1148> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1162> FunctionCall [memcmp]
            │       │   │       ├── <1156> AddressOf
            │       │   │       │   ╰── <1155> Var [k]
            │       │   │       ├── <1158> Var [k_expected]
            │       │   │       ╰── <1161> SizeOfExpr
            │       │   │           ╰── <1160> Var [k]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1163> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1177> FunctionCall [memcmp]
            │       │   │       ├── <1171> AddressOf
            │       │   │       │   ╰── <1170> Var [l]
            │       │   │       ├── <1173> Var [l_expected]
            │       │   │       ╰── <1176> SizeOfExpr
            │       │   │           ╰── <1175> Var [l]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1178> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1192> FunctionCall [memcmp]
            │       │   │       ├── <1186> AddressOf
            │       │   │       │   ╰── <1185> Var [m]
            │       │   │       ├── <1188> Var [m_expected]
            │       │   │       ╰── <1191> SizeOfExpr
            │       │   │           ╰── <1190> Var [m]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1193> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1207> FunctionCall [memcmp]
            │       │   │       ├── <1201> AddressOf
            │       │   │       │   ╰── <1200> Var [n]
            │       │   │       ├── <1203> Var [n_expected]
            │       │   │       ╰── <1206> SizeOfExpr
            │       │   │           ╰── <1205> Var [n]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1208> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1222> FunctionCall [memcmp]
            │       │   │       ├── <1216> AddressOf
            │       │   │       │   ╰── <1215> Var [o]
            │       │   │       ├── <1218> Var [o_expected]
            │       │   │       ╰── <1221> SizeOfExpr
            │       │   │           ╰── <1220> Var [o]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1223> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1237> FunctionCall [memcmp]
            │       │   │       ├── <1231> AddressOf
            │       │   │       │   ╰── <1230> Var [p]
            │       │   │       ├── <1233> Var [p_expected]
            │       │   │       ╰── <1236> SizeOfExpr
            │       │   │           ╰── <1235> Var [p]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1238> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1252> FunctionCall [memcmp]
            │       │   │       ├── <1246> AddressOf
            │       │   │       │   ╰── <1245> Var [q]
            │       │   │       ├── <1248> Var [q_expected]
            │       │   │       ╰── <1251> SizeOfExpr
            │       │   │           ╰── <1250> Var [q]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1253> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1267> FunctionCall [memcmp]
            │       │   │       ├── <1261> AddressOf
            │       │   │       │   ╰── <1260> Var [r]
            │       │   │       ├── <1263> Var [r_expected]
            │       │   │       ╰── <1266> SizeOfExpr
            │       │   │           ╰── <1265> Var [r]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1268> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1282> FunctionCall [memcmp]
            │       │   │       ├── <1276> AddressOf
            │       │   │       │   ╰── <1275> Var [s]
            │       │   │       ├── <1278> Var [s_expected]
            │       │   │       ╰── <1281> SizeOfExpr
            │       │   │           ╰── <1280> Var [s]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1283> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1297> FunctionCall [memcmp]
            │       │   │       ├── <1291> AddressOf
            │       │   │       │   ╰── <1290> Var [t]
            │       │   │       ├── <1293> Var [t_expected]
            │       │   │       ╰── <1296> SizeOfExpr
            │       │   │           ╰── <1295> Var [t]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1298> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1312> FunctionCall [memcmp]
            │       │   │       ├── <1306> AddressOf
            │       │   │       │   ╰── <1305> Var [u]
            │       │   │       ├── <1308> Var [u_expected]
            │       │   │       ╰── <1311> SizeOfExpr
            │       │   │           ╰── <1310> Var [u]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1313> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1327> FunctionCall [memcmp]
            │       │   │       ├── <1321> AddressOf
            │       │   │       │   ╰── <1320> Var [v]
            │       │   │       ├── <1323> Var [v_expected]
            │       │   │       ╰── <1326> SizeOfExpr
            │       │   │           ╰── <1325> Var [v]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1328> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1342> FunctionCall [memcmp]
            │       │   │       ├── <1336> AddressOf
            │       │   │       │   ╰── <1335> Var [w]
            │       │   │       ├── <1338> Var [w_expected]
            │       │   │       ╰── <1341> SizeOfExpr
            │       │   │           ╰── <1340> Var [w]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1343> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1357> FunctionCall [memcmp]
            │       │   │       ├── <1351> AddressOf
            │       │   │       │   ╰── <1350> Var [x]
            │       │   │       ├── <1353> Var [x_expected]
            │       │   │       ╰── <1356> SizeOfExpr
            │       │   │           ╰── <1355> Var [x]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1358> Constant Int [0]
            │       ╰── Return
            │           ╰── <1363> Constant Int [1]
            ├── Function [fun1]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize7]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize8]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize9]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize10]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize1]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize2]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize3]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── h
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize4]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize5]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize6]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── h_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── j_expected
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Unsigned Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1471> FunctionCall [memcmp]
            │       │   │       ├── <1465> AddressOf
            │       │   │       │   ╰── <1464> Var [a]
            │       │   │       ├── <1467> Var [a_expected]
            │       │   │       ╰── <1470> SizeOfExpr
            │       │   │           ╰── <1469> Var [a]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1472> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1486> FunctionCall [memcmp]
            │       │   │       ├── <1480> AddressOf
            │       │   │       │   ╰── <1479> Var [b]
            │       │   │       ├── <1482> Var [b_expected]
            │       │   │       ╰── <1485> SizeOfExpr
            │       │   │           ╰── <1484> Var [b]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1487> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1501> FunctionCall [memcmp]
            │       │   │       ├── <1495> AddressOf
            │       │   │       │   ╰── <1494> Var [c]
            │       │   │       ├── <1497> Var [c_expected]
            │       │   │       ╰── <1500> SizeOfExpr
            │       │   │           ╰── <1499> Var [c]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1502> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1516> FunctionCall [memcmp]
            │       │   │       ├── <1510> AddressOf
            │       │   │       │   ╰── <1509> Var [d]
            │       │   │       ├── <1512> Var [d_expected]
            │       │   │       ╰── <1515> SizeOfExpr
            │       │   │           ╰── <1514> Var [d]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1517> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1531> FunctionCall [memcmp]
            │       │   │       ├── <1525> AddressOf
            │       │   │       │   ╰── <1524> Var [e]
            │       │   │       ├── <1527> Var [e_expected]
            │       │   │       ╰── <1530> SizeOfExpr
            │       │   │           ╰── <1529> Var [e]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1532> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1546> FunctionCall [memcmp]
            │       │   │       ├── <1540> AddressOf
            │       │   │       │   ╰── <1539> Var [f]
            │       │   │       ├── <1542> Var [f_expected]
            │       │   │       ╰── <1545> SizeOfExpr
            │       │   │           ╰── <1544> Var [f]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1547> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1561> FunctionCall [memcmp]
            │       │   │       ├── <1555> AddressOf
            │       │   │       │   ╰── <1554> Var [g]
            │       │   │       ├── <1557> Var [g_expected]
            │       │   │       ╰── <1560> SizeOfExpr
            │       │   │           ╰── <1559> Var [g]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1562> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1576> FunctionCall [memcmp]
            │       │   │       ├── <1570> AddressOf
            │       │   │       │   ╰── <1569> Var [h]
            │       │   │       ├── <1572> Var [h_expected]
            │       │   │       ╰── <1575> SizeOfExpr
            │       │   │           ╰── <1574> Var [h]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1577> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1591> FunctionCall [memcmp]
            │       │   │       ├── <1585> AddressOf
            │       │   │       │   ╰── <1584> Var [i]
            │       │   │       ├── <1587> Var [i_expected]
            │       │   │       ╰── <1590> SizeOfExpr
            │       │   │           ╰── <1589> Var [i]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1592> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1606> FunctionCall [memcmp]
            │       │   │       ├── <1600> AddressOf
            │       │   │       │   ╰── <1599> Var [j]
            │       │   │       ├── <1602> Var [j_expected]
            │       │   │       ╰── <1605> SizeOfExpr
            │       │   │           ╰── <1604> Var [j]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1607> Constant Int [0]
            │       ╰── Return
            │           ╰── <1612> Constant Int [1]
            ├── Function [fun2]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize11]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize12]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize13]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [bytesize1]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c_expected
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Char
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d_expected
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Unsigned Char
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1666> FunctionCall [memcmp]
            │       │   │       ├── <1660> AddressOf
            │       │   │       │   ╰── <1659> Var [a]
            │       │   │       ├── <1662> Var [a_expected]
            │       │   │       ╰── <1665> SizeOfExpr
            │       │   │           ╰── <1664> Var [a]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1667> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1681> FunctionCall [memcmp]
            │       │   │       ├── <1675> AddressOf
            │       │   │       │   ╰── <1674> Var [b]
            │       │   │       ├── <1677> Var [b_expected]
            │       │   │       ╰── <1680> SizeOfExpr
            │       │   │           ╰── <1679> Var [b]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1682> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1696> FunctionCall [memcmp]
            │       │   │       ├── <1690> AddressOf
            │       │   │       │   ╰── <1689> Var [c]
            │       │   │       ├── <1692> Var [c_expected]
            │       │   │       ╰── <1695> SizeOfExpr
            │       │   │           ╰── <1694> Var [c]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1697> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1711> FunctionCall [memcmp]
            │       │   │       ├── <1705> AddressOf
            │       │   │       │   ╰── <1704> Var [d]
            │       │   │       ├── <1707> Var [d_expected]
            │       │   │       ╰── <1710> SizeOfExpr
            │       │   │           ╰── <1709> Var [d]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1712> Constant Int [0]
            │       ╰── Return
            │           ╰── <1717> Constant Int [1]
            ╰── Function [fun3]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Struct [bytesize14]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Struct [bytesize15]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Struct [bytesize16]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Struct [bytesize2]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a_expected
                │   │   ╰── Type
                │   │       ╰── Pointer
                │   │           ╰── Unsigned Char
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b_expected
                │   │   ╰── Type
                │   │       ╰── Pointer
                │   │           ╰── Unsigned Char
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c_expected
                │   │   ╰── Type
                │   │       ╰── Pointer
                │   │           ╰── Unsigned Char
                │   ╰── Param
                │       ├── Name
                │       │   ╰── d_expected
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Unsigned Char
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1771> FunctionCall [memcmp]
                    │   │       ├── <1765> AddressOf
                    │   │       │   ╰── <1764> Var [a]
                    │   │       ├── <1767> Var [a_expected]
                    │   │       ╰── <1770> SizeOfExpr
                    │   │           ╰── <1769> Var [a]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1772> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1786> FunctionCall [memcmp]
                    │   │       ├── <1780> AddressOf
                    │   │       │   ╰── <1779> Var [b]
                    │   │       ├── <1782> Var [b_expected]
                    │   │       ╰── <1785> SizeOfExpr
                    │   │           ╰── <1784> Var [b]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1787> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1801> FunctionCall [memcmp]
                    │   │       ├── <1795> AddressOf
                    │   │       │   ╰── <1794> Var [c]
                    │   │       ├── <1797> Var [c_expected]
                    │   │       ╰── <1800> SizeOfExpr
                    │   │           ╰── <1799> Var [c]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1802> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1816> FunctionCall [memcmp]
                    │   │       ├── <1810> AddressOf
                    │   │       │   ╰── <1809> Var [d]
                    │   │       ├── <1812> Var [d_expected]
                    │   │       ╰── <1815> SizeOfExpr
                    │   │           ╰── <1814> Var [d]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <1817> Constant Int [0]
                    ╰── Return
                        ╰── <1822> Constant Int [1]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_libraries_struct_sizes_client() {
    let src = r#"
        struct bytesize1 {
            unsigned char arr[1];
        };
        extern struct bytesize1 globvar_1;
        struct bytesize2 {
            unsigned char arr[2];
        };
        extern struct bytesize2 globvar_2;
        struct bytesize3 {
            unsigned char arr[3];
        };
        extern struct bytesize3 globvar_3;
        struct bytesize4 {
            unsigned char arr[4];
        };
        extern struct bytesize4 globvar_4;
        struct bytesize5 {
            unsigned char arr[5];
        };
        extern struct bytesize5 globvar_5;
        struct bytesize6 {
            unsigned char arr[6];
        };
        extern struct bytesize6 globvar_6;
        struct bytesize7 {
            unsigned char arr[7];
        };
        extern struct bytesize7 globvar_7;
        struct bytesize8 {
            unsigned char arr[8];
        };
        extern struct bytesize8 globvar_8;
        struct bytesize9 {
            unsigned char arr[9];
        };
        extern struct bytesize9 globvar_9;
        struct bytesize10 {
            unsigned char arr[10];
        };
        extern struct bytesize10 globvar_10;
        struct bytesize11 {
            unsigned char arr[11];
        };
        extern struct bytesize11 globvar_11;
        struct bytesize12 {
            unsigned char arr[12];
        };
        extern struct bytesize12 globvar_12;
        struct bytesize13 {
            unsigned char arr[13];
        };
        extern struct bytesize13 globvar_13;
        struct bytesize14 {
            unsigned char arr[14];
        };
        extern struct bytesize14 globvar_14;
        struct bytesize15 {
            unsigned char arr[15];
        };
        extern struct bytesize15 globvar_15;
        struct bytesize16 {
            unsigned char arr[16];
        };
        extern struct bytesize16 globvar_16;
        struct bytesize17 {
            unsigned char arr[17];
        };
        extern struct bytesize17 globvar_17;
        struct bytesize18 {
            unsigned char arr[18];
        };
        extern struct bytesize18 globvar_18;
        struct bytesize19 {
            unsigned char arr[19];
        };
        extern struct bytesize19 globvar_19;
        struct bytesize20 {
            unsigned char arr[20];
        };
        extern struct bytesize20 globvar_20;
        struct bytesize21 {
            unsigned char arr[21];
        };
        extern struct bytesize21 globvar_21;
        struct bytesize22 {
            unsigned char arr[22];
        };
        extern struct bytesize22 globvar_22;
        struct bytesize23 {
            unsigned char arr[23];
        };
        extern struct bytesize23 globvar_23;
        struct bytesize24 {
            unsigned char arr[24];
        };
        extern struct bytesize24 globvar_24;
        int fun0(struct bytesize1 a, struct bytesize2 b, struct bytesize3 c,
                 struct bytesize4 d, struct bytesize5 e, struct bytesize6 f,
                 struct bytesize7 g, struct bytesize8 h, struct bytesize9 i,
                 struct bytesize10 j, struct bytesize11 k, struct bytesize12 l,
                 struct bytesize13 m, struct bytesize14 n, struct bytesize15 o,
                 struct bytesize16 p, struct bytesize17 q, struct bytesize18 r,
                 struct bytesize19 s, struct bytesize20 t, struct bytesize21 u,
                 struct bytesize22 v, struct bytesize23 w, struct bytesize24 x,
                 unsigned char *a_expected, unsigned char *b_expected,
                 unsigned char *c_expected, unsigned char *d_expected,
                 unsigned char *e_expected, unsigned char *f_expected,
                 unsigned char *g_expected, unsigned char *h_expected,
                 unsigned char *i_expected, unsigned char *j_expected,
                 unsigned char *k_expected, unsigned char *l_expected,
                 unsigned char *m_expected, unsigned char *n_expected,
                 unsigned char *o_expected, unsigned char *p_expected,
                 unsigned char *q_expected, unsigned char *r_expected,
                 unsigned char *s_expected, unsigned char *t_expected,
                 unsigned char *u_expected, unsigned char *v_expected,
                 unsigned char *w_expected, unsigned char *x_expected);
        int fun1(struct bytesize7 a, struct bytesize8 b, struct bytesize9 c,
                 struct bytesize10 d, struct bytesize1 e, struct bytesize2 f,
                 struct bytesize3 g, struct bytesize4 h, struct bytesize5 i,
                 struct bytesize6 j, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected, unsigned char *e_expected,
                 unsigned char *f_expected, unsigned char *g_expected,
                 unsigned char *h_expected, unsigned char *i_expected,
                 unsigned char *j_expected);
        int fun2(struct bytesize11 a, struct bytesize12 b, struct bytesize13 c,
                 struct bytesize1 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected);
        int fun3(struct bytesize14 a, struct bytesize15 b, struct bytesize16 c,
                 struct bytesize2 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected);
        
        int main(void) {
            if (!fun0(globvar_1, globvar_2, globvar_3, globvar_4, globvar_5, globvar_6,
                     globvar_7, globvar_8, globvar_9, globvar_10, globvar_11,
                     globvar_12, globvar_13, globvar_14, globvar_15, globvar_16,
                     globvar_17, globvar_18, globvar_19, globvar_20, globvar_21,
                     globvar_22, globvar_23, globvar_24, globvar_1.arr, globvar_2.arr,
                     globvar_3.arr, globvar_4.arr, globvar_5.arr, globvar_6.arr,
                     globvar_7.arr, globvar_8.arr, globvar_9.arr, globvar_10.arr,
                     globvar_11.arr, globvar_12.arr, globvar_13.arr, globvar_14.arr,
                     globvar_15.arr, globvar_16.arr, globvar_17.arr, globvar_18.arr,
                     globvar_19.arr, globvar_20.arr, globvar_21.arr, globvar_22.arr,
                     globvar_23.arr, globvar_24.arr)) {
                return 1;
            }
            if (!fun1(globvar_7, globvar_8, globvar_9, globvar_10, globvar_1, globvar_2,
                     globvar_3, globvar_4, globvar_5, globvar_6, globvar_7.arr,
                     globvar_8.arr, globvar_9.arr, globvar_10.arr, globvar_1.arr,
                     globvar_2.arr, globvar_3.arr, globvar_4.arr, globvar_5.arr,
                     globvar_6.arr)) {
                return 2;
            }
            if (!fun2(globvar_11, globvar_12, globvar_13, globvar_1, globvar_11.arr,
                     globvar_12.arr, globvar_13.arr, globvar_1.arr)) {
                return 3;
            }
            if (!fun3(globvar_14, globvar_15, globvar_16, globvar_2, globvar_14.arr,
                     globvar_15.arr, globvar_16.arr, globvar_2.arr)) {
                return 4;
            }
            struct bytesize1 locvar_1 = {{0}};
            struct bytesize2 locvar_2 = {{1, 2}};
            struct bytesize3 locvar_3 = {{3, 4, 5}};
            struct bytesize4 locvar_4 = {{6, 7, 8, 9}};
            struct bytesize5 locvar_5 = {{10, 11, 12, 13, 14}};
            struct bytesize6 locvar_6 = {{15, 16, 17, 18, 19, 20}};
            struct bytesize7 locvar_7 = {{21, 22, 23, 24, 25, 26, 27}};
            struct bytesize8 locvar_8 = {{28, 29, 30, 31, 32, 33, 34, 35}};
            struct bytesize9 locvar_9 = {{36, 37, 38, 39, 40, 41, 42, 43, 44}};
            struct bytesize10 locvar_10 = {{45, 46, 47, 48, 49, 50, 51, 52, 53, 54}};
            struct bytesize11 locvar_11 = {
                {55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65}};
            struct bytesize12 locvar_12 = {
                {66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77}};
            struct bytesize13 locvar_13 = {
                {78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}};
            struct bytesize14 locvar_14 = {
                {91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104}};
            struct bytesize15 locvar_15 = {{105, 106, 107, 108, 109, 110, 111, 112, 113,
                                            114, 115, 116, 117, 118, 119}};
            struct bytesize16 locvar_16 = {{120, 121, 122, 123, 124, 125, 126, 127, 128,
                                            129, 130, 131, 132, 133, 134, 135}};
            struct bytesize17 locvar_17 = {{136, 137, 138, 139, 140, 141, 142, 143, 144,
                                            145, 146, 147, 148, 149, 150, 151, 152}};
            struct bytesize18 locvar_18 = {{153, 154, 155, 156, 157, 158, 159, 160, 161,
                                            162, 163, 164, 165, 166, 167, 168, 169,
                                            170}};
            struct bytesize19 locvar_19 = {{171, 172, 173, 174, 175, 176, 177, 178, 179,
                                            180, 181, 182, 183, 184, 185, 186, 187, 188,
                                            189}};
            struct bytesize20 locvar_20 = {{190, 191, 192, 193, 194, 195, 196,
                                            197, 198, 199, 200, 201, 202, 203,
                                            204, 205, 206, 207, 208, 209}};
            struct bytesize21 locvar_21 = {{210, 211, 212, 213, 214, 215, 216,
                                            217, 218, 219, 220, 221, 222, 223,
                                            224, 225, 226, 227, 228, 229, 230}};
            struct bytesize22 locvar_22 = {{231, 232, 233, 234, 235, 236, 237, 238,
                                            239, 240, 241, 242, 243, 244, 245, 246,
                                            247, 248, 249, 250, 251, 252}};
            struct bytesize23 locvar_23 = {{253, 254, 255, 0, 1, 2, 3, 4,
                                            5, 6, 7, 8, 9, 10, 11, 12,
                                            13, 14, 15, 16, 17, 18, 19}};
            struct bytesize24 locvar_24 = {{20, 21, 22, 23, 24, 25, 26, 27,
                                            28, 29, 30, 31, 32, 33, 34, 35,
                                            36, 37, 38, 39, 40, 41, 42, 43}};
            if (!fun0(locvar_1, locvar_2, locvar_3, locvar_4, locvar_5, locvar_6,
                     locvar_7, locvar_8, locvar_9, locvar_10, locvar_11, locvar_12,
                     locvar_13, locvar_14, locvar_15, locvar_16, locvar_17, locvar_18,
                     locvar_19, locvar_20, locvar_21, locvar_22, locvar_23, locvar_24,
                     locvar_1.arr, locvar_2.arr, locvar_3.arr, locvar_4.arr,
                     locvar_5.arr, locvar_6.arr, locvar_7.arr, locvar_8.arr,
                     locvar_9.arr, locvar_10.arr, locvar_11.arr, locvar_12.arr,
                     locvar_13.arr, locvar_14.arr, locvar_15.arr, locvar_16.arr,
                     locvar_17.arr, locvar_18.arr, locvar_19.arr, locvar_20.arr,
                     locvar_21.arr, locvar_22.arr, locvar_23.arr, locvar_24.arr)) {
                return 5;
            }
            if (!fun1(locvar_7, locvar_8, locvar_9, locvar_10, locvar_1, locvar_2,
                     locvar_3, locvar_4, locvar_5, locvar_6, locvar_7.arr, locvar_8.arr,
                     locvar_9.arr, locvar_10.arr, locvar_1.arr, locvar_2.arr,
                     locvar_3.arr, locvar_4.arr, locvar_5.arr, locvar_6.arr)) {
                return 6;
            }
            if (!fun2(locvar_11, locvar_12, locvar_13, locvar_1, locvar_11.arr,
                     locvar_12.arr, locvar_13.arr, locvar_1.arr)) {
                return 7;
            }
            if (!fun3(locvar_14, locvar_15, locvar_16, locvar_2, locvar_14.arr,
                     locvar_15.arr, locvar_16.arr, locvar_2.arr)) {
                return 8;
            }
            return 0;
        }
        struct bytesize1 globvar_1 = {{0}};
        struct bytesize2 globvar_2 = {{1, 2}};
        struct bytesize3 globvar_3 = {{3, 4, 5}};
        struct bytesize4 globvar_4 = {{6, 7, 8, 9}};
        struct bytesize5 globvar_5 = {{10, 11, 12, 13, 14}};
        struct bytesize6 globvar_6 = {{15, 16, 17, 18, 19, 20}};
        struct bytesize7 globvar_7 = {{21, 22, 23, 24, 25, 26, 27}};
        struct bytesize8 globvar_8 = {{28, 29, 30, 31, 32, 33, 34, 35}};
        struct bytesize9 globvar_9 = {{36, 37, 38, 39, 40, 41, 42, 43, 44}};
        struct bytesize10 globvar_10 = {{45, 46, 47, 48, 49, 50, 51, 52, 53, 54}};
        struct bytesize11 globvar_11 = {{55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65}};
        struct bytesize12 globvar_12 = {
            {66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77}};
        struct bytesize13 globvar_13 = {
            {78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}};
        struct bytesize14 globvar_14 = {
            {91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104}};
        struct bytesize15 globvar_15 = {{105, 106, 107, 108, 109, 110, 111, 112, 113,
                                         114, 115, 116, 117, 118, 119}};
        struct bytesize16 globvar_16 = {{120, 121, 122, 123, 124, 125, 126, 127, 128,
                                         129, 130, 131, 132, 133, 134, 135}};
        struct bytesize17 globvar_17 = {{136, 137, 138, 139, 140, 141, 142, 143, 144,
                                         145, 146, 147, 148, 149, 150, 151, 152}};
        struct bytesize18 globvar_18 = {{153, 154, 155, 156, 157, 158, 159, 160, 161,
                                         162, 163, 164, 165, 166, 167, 168, 169, 170}};
        struct bytesize19 globvar_19 = {{171, 172, 173, 174, 175, 176, 177, 178, 179,
                                         180, 181, 182, 183, 184, 185, 186, 187, 188,
                                         189}};
        struct bytesize20 globvar_20 = {{190, 191, 192, 193, 194, 195, 196,
                                         197, 198, 199, 200, 201, 202, 203,
                                         204, 205, 206, 207, 208, 209}};
        struct bytesize21 globvar_21 = {{210, 211, 212, 213, 214, 215, 216,
                                         217, 218, 219, 220, 221, 222, 223,
                                         224, 225, 226, 227, 228, 229, 230}};
        struct bytesize22 globvar_22 = {{231, 232, 233, 234, 235, 236, 237, 238,
                                         239, 240, 241, 242, 243, 244, 245, 246,
                                         247, 248, 249, 250, 251, 252}};
        struct bytesize23 globvar_23 = {{253, 254, 255, 0, 1, 2, 3, 4,
                                         5, 6, 7, 8, 9, 10, 11, 12,
                                         13, 14, 15, 16, 17, 18, 19}};
        struct bytesize24 globvar_24 = {{20, 21, 22, 23, 24, 25, 26, 27,
                                         28, 29, 30, 31, 32, 33, 34, 35,
                                         36, 37, 38, 39, 40, 41, 42, 43}};
    "#;
    let expected = r#"
        Program
            ├── Struct [bytesize1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_1
            │   ├── Type
            │   │   ╰── Struct [bytesize1]
            │   ╰── Extern
            ├── Struct [bytesize2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_2
            │   ├── Type
            │   │   ╰── Struct [bytesize2]
            │   ╰── Extern
            ├── Struct [bytesize3]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_3
            │   ├── Type
            │   │   ╰── Struct [bytesize3]
            │   ╰── Extern
            ├── Struct [bytesize4]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 4
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_4
            │   ├── Type
            │   │   ╰── Struct [bytesize4]
            │   ╰── Extern
            ├── Struct [bytesize5]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_5
            │   ├── Type
            │   │   ╰── Struct [bytesize5]
            │   ╰── Extern
            ├── Struct [bytesize6]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 6
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_6
            │   ├── Type
            │   │   ╰── Struct [bytesize6]
            │   ╰── Extern
            ├── Struct [bytesize7]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 7
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_7
            │   ├── Type
            │   │   ╰── Struct [bytesize7]
            │   ╰── Extern
            ├── Struct [bytesize8]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_8
            │   ├── Type
            │   │   ╰── Struct [bytesize8]
            │   ╰── Extern
            ├── Struct [bytesize9]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 9
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_9
            │   ├── Type
            │   │   ╰── Struct [bytesize9]
            │   ╰── Extern
            ├── Struct [bytesize10]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_10
            │   ├── Type
            │   │   ╰── Struct [bytesize10]
            │   ╰── Extern
            ├── Struct [bytesize11]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 11
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_11
            │   ├── Type
            │   │   ╰── Struct [bytesize11]
            │   ╰── Extern
            ├── Struct [bytesize12]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 12
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_12
            │   ├── Type
            │   │   ╰── Struct [bytesize12]
            │   ╰── Extern
            ├── Struct [bytesize13]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 13
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_13
            │   ├── Type
            │   │   ╰── Struct [bytesize13]
            │   ╰── Extern
            ├── Struct [bytesize14]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 14
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_14
            │   ├── Type
            │   │   ╰── Struct [bytesize14]
            │   ╰── Extern
            ├── Struct [bytesize15]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 15
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_15
            │   ├── Type
            │   │   ╰── Struct [bytesize15]
            │   ╰── Extern
            ├── Struct [bytesize16]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 16
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_16
            │   ├── Type
            │   │   ╰── Struct [bytesize16]
            │   ╰── Extern
            ├── Struct [bytesize17]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 17
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_17
            │   ├── Type
            │   │   ╰── Struct [bytesize17]
            │   ╰── Extern
            ├── Struct [bytesize18]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 18
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_18
            │   ├── Type
            │   │   ╰── Struct [bytesize18]
            │   ╰── Extern
            ├── Struct [bytesize19]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_19
            │   ├── Type
            │   │   ╰── Struct [bytesize19]
            │   ╰── Extern
            ├── Struct [bytesize20]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 20
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_20
            │   ├── Type
            │   │   ╰── Struct [bytesize20]
            │   ╰── Extern
            ├── Struct [bytesize21]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 21
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_21
            │   ├── Type
            │   │   ╰── Struct [bytesize21]
            │   ╰── Extern
            ├── Struct [bytesize22]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 22
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_22
            │   ├── Type
            │   │   ╰── Struct [bytesize22]
            │   ╰── Extern
            ├── Struct [bytesize23]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 23
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_23
            │   ├── Type
            │   │   ╰── Struct [bytesize23]
            │   ╰── Extern
            ├── Struct [bytesize24]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 24
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_24
            │   ├── Type
            │   │   ╰── Struct [bytesize24]
            │   ╰── Extern
            ├── Function [fun0]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize1]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize2]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize3]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize4]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize5]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize6]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize7]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize8]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize9]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize10]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── k
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize11]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize12]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── m
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize13]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── n
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize14]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── o
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize15]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── p
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize16]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── q
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize17]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── r
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize18]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize19]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize20]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── u
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize21]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── v
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize22]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── w
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize23]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize24]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── k_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── m_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── n_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── o_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── p_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── q_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── r_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── u_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── v_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── w_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── x_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [fun1]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize7]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize8]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize9]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize10]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize1]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize2]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize3]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize4]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize5]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize6]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── j_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [fun2]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize11]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize12]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize13]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize1]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [fun3]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize14]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize15]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize16]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Struct [bytesize2]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c_expected
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Unsigned Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d_expected
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Unsigned Char
            ├── Function [main]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <915> Unary [!]
            │       │   │       ╰── <914> FunctionCall [fun0]
            │       │   │           ├── <771> Var [globvar_1]
            │       │   │           ├── <773> Var [globvar_2]
            │       │   │           ├── <775> Var [globvar_3]
            │       │   │           ├── <777> Var [globvar_4]
            │       │   │           ├── <779> Var [globvar_5]
            │       │   │           ├── <781> Var [globvar_6]
            │       │   │           ├── <783> Var [globvar_7]
            │       │   │           ├── <785> Var [globvar_8]
            │       │   │           ├── <787> Var [globvar_9]
            │       │   │           ├── <789> Var [globvar_10]
            │       │   │           ├── <791> Var [globvar_11]
            │       │   │           ├── <793> Var [globvar_12]
            │       │   │           ├── <795> Var [globvar_13]
            │       │   │           ├── <797> Var [globvar_14]
            │       │   │           ├── <799> Var [globvar_15]
            │       │   │           ├── <801> Var [globvar_16]
            │       │   │           ├── <803> Var [globvar_17]
            │       │   │           ├── <805> Var [globvar_18]
            │       │   │           ├── <807> Var [globvar_19]
            │       │   │           ├── <809> Var [globvar_20]
            │       │   │           ├── <811> Var [globvar_21]
            │       │   │           ├── <813> Var [globvar_22]
            │       │   │           ├── <815> Var [globvar_23]
            │       │   │           ├── <817> Var [globvar_24]
            │       │   │           ├── <821> Dot
            │       │   │           │   ├── <819> Var [globvar_1]
            │       │   │           │   ╰── arr
            │       │   │           ├── <825> Dot
            │       │   │           │   ├── <823> Var [globvar_2]
            │       │   │           │   ╰── arr
            │       │   │           ├── <829> Dot
            │       │   │           │   ├── <827> Var [globvar_3]
            │       │   │           │   ╰── arr
            │       │   │           ├── <833> Dot
            │       │   │           │   ├── <831> Var [globvar_4]
            │       │   │           │   ╰── arr
            │       │   │           ├── <837> Dot
            │       │   │           │   ├── <835> Var [globvar_5]
            │       │   │           │   ╰── arr
            │       │   │           ├── <841> Dot
            │       │   │           │   ├── <839> Var [globvar_6]
            │       │   │           │   ╰── arr
            │       │   │           ├── <845> Dot
            │       │   │           │   ├── <843> Var [globvar_7]
            │       │   │           │   ╰── arr
            │       │   │           ├── <849> Dot
            │       │   │           │   ├── <847> Var [globvar_8]
            │       │   │           │   ╰── arr
            │       │   │           ├── <853> Dot
            │       │   │           │   ├── <851> Var [globvar_9]
            │       │   │           │   ╰── arr
            │       │   │           ├── <857> Dot
            │       │   │           │   ├── <855> Var [globvar_10]
            │       │   │           │   ╰── arr
            │       │   │           ├── <861> Dot
            │       │   │           │   ├── <859> Var [globvar_11]
            │       │   │           │   ╰── arr
            │       │   │           ├── <865> Dot
            │       │   │           │   ├── <863> Var [globvar_12]
            │       │   │           │   ╰── arr
            │       │   │           ├── <869> Dot
            │       │   │           │   ├── <867> Var [globvar_13]
            │       │   │           │   ╰── arr
            │       │   │           ├── <873> Dot
            │       │   │           │   ├── <871> Var [globvar_14]
            │       │   │           │   ╰── arr
            │       │   │           ├── <877> Dot
            │       │   │           │   ├── <875> Var [globvar_15]
            │       │   │           │   ╰── arr
            │       │   │           ├── <881> Dot
            │       │   │           │   ├── <879> Var [globvar_16]
            │       │   │           │   ╰── arr
            │       │   │           ├── <885> Dot
            │       │   │           │   ├── <883> Var [globvar_17]
            │       │   │           │   ╰── arr
            │       │   │           ├── <889> Dot
            │       │   │           │   ├── <887> Var [globvar_18]
            │       │   │           │   ╰── arr
            │       │   │           ├── <893> Dot
            │       │   │           │   ├── <891> Var [globvar_19]
            │       │   │           │   ╰── arr
            │       │   │           ├── <897> Dot
            │       │   │           │   ├── <895> Var [globvar_20]
            │       │   │           │   ╰── arr
            │       │   │           ├── <901> Dot
            │       │   │           │   ├── <899> Var [globvar_21]
            │       │   │           │   ╰── arr
            │       │   │           ├── <905> Dot
            │       │   │           │   ├── <903> Var [globvar_22]
            │       │   │           │   ╰── arr
            │       │   │           ├── <909> Dot
            │       │   │           │   ├── <907> Var [globvar_23]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <913> Dot
            │       │   │               ├── <911> Var [globvar_24]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <916> Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <984> Unary [!]
            │       │   │       ╰── <983> FunctionCall [fun1]
            │       │   │           ├── <924> Var [globvar_7]
            │       │   │           ├── <926> Var [globvar_8]
            │       │   │           ├── <928> Var [globvar_9]
            │       │   │           ├── <930> Var [globvar_10]
            │       │   │           ├── <932> Var [globvar_1]
            │       │   │           ├── <934> Var [globvar_2]
            │       │   │           ├── <936> Var [globvar_3]
            │       │   │           ├── <938> Var [globvar_4]
            │       │   │           ├── <940> Var [globvar_5]
            │       │   │           ├── <942> Var [globvar_6]
            │       │   │           ├── <946> Dot
            │       │   │           │   ├── <944> Var [globvar_7]
            │       │   │           │   ╰── arr
            │       │   │           ├── <950> Dot
            │       │   │           │   ├── <948> Var [globvar_8]
            │       │   │           │   ╰── arr
            │       │   │           ├── <954> Dot
            │       │   │           │   ├── <952> Var [globvar_9]
            │       │   │           │   ╰── arr
            │       │   │           ├── <958> Dot
            │       │   │           │   ├── <956> Var [globvar_10]
            │       │   │           │   ╰── arr
            │       │   │           ├── <962> Dot
            │       │   │           │   ├── <960> Var [globvar_1]
            │       │   │           │   ╰── arr
            │       │   │           ├── <966> Dot
            │       │   │           │   ├── <964> Var [globvar_2]
            │       │   │           │   ╰── arr
            │       │   │           ├── <970> Dot
            │       │   │           │   ├── <968> Var [globvar_3]
            │       │   │           │   ╰── arr
            │       │   │           ├── <974> Dot
            │       │   │           │   ├── <972> Var [globvar_4]
            │       │   │           │   ╰── arr
            │       │   │           ├── <978> Dot
            │       │   │           │   ├── <976> Var [globvar_5]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <982> Dot
            │       │   │               ├── <980> Var [globvar_6]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <985> Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1017> Unary [!]
            │       │   │       ╰── <1016> FunctionCall [fun2]
            │       │   │           ├── <993> Var [globvar_11]
            │       │   │           ├── <995> Var [globvar_12]
            │       │   │           ├── <997> Var [globvar_13]
            │       │   │           ├── <999> Var [globvar_1]
            │       │   │           ├── <1003> Dot
            │       │   │           │   ├── <1001> Var [globvar_11]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1007> Dot
            │       │   │           │   ├── <1005> Var [globvar_12]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1011> Dot
            │       │   │           │   ├── <1009> Var [globvar_13]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <1015> Dot
            │       │   │               ├── <1013> Var [globvar_1]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1018> Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1050> Unary [!]
            │       │   │       ╰── <1049> FunctionCall [fun3]
            │       │   │           ├── <1026> Var [globvar_14]
            │       │   │           ├── <1028> Var [globvar_15]
            │       │   │           ├── <1030> Var [globvar_16]
            │       │   │           ├── <1032> Var [globvar_2]
            │       │   │           ├── <1036> Dot
            │       │   │           │   ├── <1034> Var [globvar_14]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1040> Dot
            │       │   │           │   ├── <1038> Var [globvar_15]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1044> Dot
            │       │   │           │   ├── <1042> Var [globvar_16]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <1048> Dot
            │       │   │               ├── <1046> Var [globvar_2]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1051> Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_1
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize1]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ╰── <1060> Constant Int [0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_2
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize2]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1069> Constant Int [1]
            │       │               ╰── <1071> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_3
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize3]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1080> Constant Int [3]
            │       │               ├── <1082> Constant Int [4]
            │       │               ╰── <1084> Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_4
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize4]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1093> Constant Int [6]
            │       │               ├── <1095> Constant Int [7]
            │       │               ├── <1097> Constant Int [8]
            │       │               ╰── <1099> Constant Int [9]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_5
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize5]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1108> Constant Int [10]
            │       │               ├── <1110> Constant Int [11]
            │       │               ├── <1112> Constant Int [12]
            │       │               ├── <1114> Constant Int [13]
            │       │               ╰── <1116> Constant Int [14]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_6
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize6]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1125> Constant Int [15]
            │       │               ├── <1127> Constant Int [16]
            │       │               ├── <1129> Constant Int [17]
            │       │               ├── <1131> Constant Int [18]
            │       │               ├── <1133> Constant Int [19]
            │       │               ╰── <1135> Constant Int [20]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_7
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize7]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1144> Constant Int [21]
            │       │               ├── <1146> Constant Int [22]
            │       │               ├── <1148> Constant Int [23]
            │       │               ├── <1150> Constant Int [24]
            │       │               ├── <1152> Constant Int [25]
            │       │               ├── <1154> Constant Int [26]
            │       │               ╰── <1156> Constant Int [27]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_8
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize8]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1165> Constant Int [28]
            │       │               ├── <1167> Constant Int [29]
            │       │               ├── <1169> Constant Int [30]
            │       │               ├── <1171> Constant Int [31]
            │       │               ├── <1173> Constant Int [32]
            │       │               ├── <1175> Constant Int [33]
            │       │               ├── <1177> Constant Int [34]
            │       │               ╰── <1179> Constant Int [35]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_9
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize9]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1188> Constant Int [36]
            │       │               ├── <1190> Constant Int [37]
            │       │               ├── <1192> Constant Int [38]
            │       │               ├── <1194> Constant Int [39]
            │       │               ├── <1196> Constant Int [40]
            │       │               ├── <1198> Constant Int [41]
            │       │               ├── <1200> Constant Int [42]
            │       │               ├── <1202> Constant Int [43]
            │       │               ╰── <1204> Constant Int [44]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_10
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize10]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1213> Constant Int [45]
            │       │               ├── <1215> Constant Int [46]
            │       │               ├── <1217> Constant Int [47]
            │       │               ├── <1219> Constant Int [48]
            │       │               ├── <1221> Constant Int [49]
            │       │               ├── <1223> Constant Int [50]
            │       │               ├── <1225> Constant Int [51]
            │       │               ├── <1227> Constant Int [52]
            │       │               ├── <1229> Constant Int [53]
            │       │               ╰── <1231> Constant Int [54]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_11
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize11]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1240> Constant Int [55]
            │       │               ├── <1242> Constant Int [56]
            │       │               ├── <1244> Constant Int [57]
            │       │               ├── <1246> Constant Int [58]
            │       │               ├── <1248> Constant Int [59]
            │       │               ├── <1250> Constant Int [60]
            │       │               ├── <1252> Constant Int [61]
            │       │               ├── <1254> Constant Int [62]
            │       │               ├── <1256> Constant Int [63]
            │       │               ├── <1258> Constant Int [64]
            │       │               ╰── <1260> Constant Int [65]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_12
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize12]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1269> Constant Int [66]
            │       │               ├── <1271> Constant Int [67]
            │       │               ├── <1273> Constant Int [68]
            │       │               ├── <1275> Constant Int [69]
            │       │               ├── <1277> Constant Int [70]
            │       │               ├── <1279> Constant Int [71]
            │       │               ├── <1281> Constant Int [72]
            │       │               ├── <1283> Constant Int [73]
            │       │               ├── <1285> Constant Int [74]
            │       │               ├── <1287> Constant Int [75]
            │       │               ├── <1289> Constant Int [76]
            │       │               ╰── <1291> Constant Int [77]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_13
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize13]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1300> Constant Int [78]
            │       │               ├── <1302> Constant Int [79]
            │       │               ├── <1304> Constant Int [80]
            │       │               ├── <1306> Constant Int [81]
            │       │               ├── <1308> Constant Int [82]
            │       │               ├── <1310> Constant Int [83]
            │       │               ├── <1312> Constant Int [84]
            │       │               ├── <1314> Constant Int [85]
            │       │               ├── <1316> Constant Int [86]
            │       │               ├── <1318> Constant Int [87]
            │       │               ├── <1320> Constant Int [88]
            │       │               ├── <1322> Constant Int [89]
            │       │               ╰── <1324> Constant Int [90]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_14
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize14]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1333> Constant Int [91]
            │       │               ├── <1335> Constant Int [92]
            │       │               ├── <1337> Constant Int [93]
            │       │               ├── <1339> Constant Int [94]
            │       │               ├── <1341> Constant Int [95]
            │       │               ├── <1343> Constant Int [96]
            │       │               ├── <1345> Constant Int [97]
            │       │               ├── <1347> Constant Int [98]
            │       │               ├── <1349> Constant Int [99]
            │       │               ├── <1351> Constant Int [100]
            │       │               ├── <1353> Constant Int [101]
            │       │               ├── <1355> Constant Int [102]
            │       │               ├── <1357> Constant Int [103]
            │       │               ╰── <1359> Constant Int [104]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_15
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize15]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1368> Constant Int [105]
            │       │               ├── <1370> Constant Int [106]
            │       │               ├── <1372> Constant Int [107]
            │       │               ├── <1374> Constant Int [108]
            │       │               ├── <1376> Constant Int [109]
            │       │               ├── <1378> Constant Int [110]
            │       │               ├── <1380> Constant Int [111]
            │       │               ├── <1382> Constant Int [112]
            │       │               ├── <1384> Constant Int [113]
            │       │               ├── <1386> Constant Int [114]
            │       │               ├── <1388> Constant Int [115]
            │       │               ├── <1390> Constant Int [116]
            │       │               ├── <1392> Constant Int [117]
            │       │               ├── <1394> Constant Int [118]
            │       │               ╰── <1396> Constant Int [119]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_16
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize16]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1405> Constant Int [120]
            │       │               ├── <1407> Constant Int [121]
            │       │               ├── <1409> Constant Int [122]
            │       │               ├── <1411> Constant Int [123]
            │       │               ├── <1413> Constant Int [124]
            │       │               ├── <1415> Constant Int [125]
            │       │               ├── <1417> Constant Int [126]
            │       │               ├── <1419> Constant Int [127]
            │       │               ├── <1421> Constant Int [128]
            │       │               ├── <1423> Constant Int [129]
            │       │               ├── <1425> Constant Int [130]
            │       │               ├── <1427> Constant Int [131]
            │       │               ├── <1429> Constant Int [132]
            │       │               ├── <1431> Constant Int [133]
            │       │               ├── <1433> Constant Int [134]
            │       │               ╰── <1435> Constant Int [135]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_17
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize17]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1444> Constant Int [136]
            │       │               ├── <1446> Constant Int [137]
            │       │               ├── <1448> Constant Int [138]
            │       │               ├── <1450> Constant Int [139]
            │       │               ├── <1452> Constant Int [140]
            │       │               ├── <1454> Constant Int [141]
            │       │               ├── <1456> Constant Int [142]
            │       │               ├── <1458> Constant Int [143]
            │       │               ├── <1460> Constant Int [144]
            │       │               ├── <1462> Constant Int [145]
            │       │               ├── <1464> Constant Int [146]
            │       │               ├── <1466> Constant Int [147]
            │       │               ├── <1468> Constant Int [148]
            │       │               ├── <1470> Constant Int [149]
            │       │               ├── <1472> Constant Int [150]
            │       │               ├── <1474> Constant Int [151]
            │       │               ╰── <1476> Constant Int [152]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_18
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize18]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1485> Constant Int [153]
            │       │               ├── <1487> Constant Int [154]
            │       │               ├── <1489> Constant Int [155]
            │       │               ├── <1491> Constant Int [156]
            │       │               ├── <1493> Constant Int [157]
            │       │               ├── <1495> Constant Int [158]
            │       │               ├── <1497> Constant Int [159]
            │       │               ├── <1499> Constant Int [160]
            │       │               ├── <1501> Constant Int [161]
            │       │               ├── <1503> Constant Int [162]
            │       │               ├── <1505> Constant Int [163]
            │       │               ├── <1507> Constant Int [164]
            │       │               ├── <1509> Constant Int [165]
            │       │               ├── <1511> Constant Int [166]
            │       │               ├── <1513> Constant Int [167]
            │       │               ├── <1515> Constant Int [168]
            │       │               ├── <1517> Constant Int [169]
            │       │               ╰── <1519> Constant Int [170]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_19
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize19]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1528> Constant Int [171]
            │       │               ├── <1530> Constant Int [172]
            │       │               ├── <1532> Constant Int [173]
            │       │               ├── <1534> Constant Int [174]
            │       │               ├── <1536> Constant Int [175]
            │       │               ├── <1538> Constant Int [176]
            │       │               ├── <1540> Constant Int [177]
            │       │               ├── <1542> Constant Int [178]
            │       │               ├── <1544> Constant Int [179]
            │       │               ├── <1546> Constant Int [180]
            │       │               ├── <1548> Constant Int [181]
            │       │               ├── <1550> Constant Int [182]
            │       │               ├── <1552> Constant Int [183]
            │       │               ├── <1554> Constant Int [184]
            │       │               ├── <1556> Constant Int [185]
            │       │               ├── <1558> Constant Int [186]
            │       │               ├── <1560> Constant Int [187]
            │       │               ├── <1562> Constant Int [188]
            │       │               ╰── <1564> Constant Int [189]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_20
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize20]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1573> Constant Int [190]
            │       │               ├── <1575> Constant Int [191]
            │       │               ├── <1577> Constant Int [192]
            │       │               ├── <1579> Constant Int [193]
            │       │               ├── <1581> Constant Int [194]
            │       │               ├── <1583> Constant Int [195]
            │       │               ├── <1585> Constant Int [196]
            │       │               ├── <1587> Constant Int [197]
            │       │               ├── <1589> Constant Int [198]
            │       │               ├── <1591> Constant Int [199]
            │       │               ├── <1593> Constant Int [200]
            │       │               ├── <1595> Constant Int [201]
            │       │               ├── <1597> Constant Int [202]
            │       │               ├── <1599> Constant Int [203]
            │       │               ├── <1601> Constant Int [204]
            │       │               ├── <1603> Constant Int [205]
            │       │               ├── <1605> Constant Int [206]
            │       │               ├── <1607> Constant Int [207]
            │       │               ├── <1609> Constant Int [208]
            │       │               ╰── <1611> Constant Int [209]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_21
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize21]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1620> Constant Int [210]
            │       │               ├── <1622> Constant Int [211]
            │       │               ├── <1624> Constant Int [212]
            │       │               ├── <1626> Constant Int [213]
            │       │               ├── <1628> Constant Int [214]
            │       │               ├── <1630> Constant Int [215]
            │       │               ├── <1632> Constant Int [216]
            │       │               ├── <1634> Constant Int [217]
            │       │               ├── <1636> Constant Int [218]
            │       │               ├── <1638> Constant Int [219]
            │       │               ├── <1640> Constant Int [220]
            │       │               ├── <1642> Constant Int [221]
            │       │               ├── <1644> Constant Int [222]
            │       │               ├── <1646> Constant Int [223]
            │       │               ├── <1648> Constant Int [224]
            │       │               ├── <1650> Constant Int [225]
            │       │               ├── <1652> Constant Int [226]
            │       │               ├── <1654> Constant Int [227]
            │       │               ├── <1656> Constant Int [228]
            │       │               ├── <1658> Constant Int [229]
            │       │               ╰── <1660> Constant Int [230]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_22
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize22]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1669> Constant Int [231]
            │       │               ├── <1671> Constant Int [232]
            │       │               ├── <1673> Constant Int [233]
            │       │               ├── <1675> Constant Int [234]
            │       │               ├── <1677> Constant Int [235]
            │       │               ├── <1679> Constant Int [236]
            │       │               ├── <1681> Constant Int [237]
            │       │               ├── <1683> Constant Int [238]
            │       │               ├── <1685> Constant Int [239]
            │       │               ├── <1687> Constant Int [240]
            │       │               ├── <1689> Constant Int [241]
            │       │               ├── <1691> Constant Int [242]
            │       │               ├── <1693> Constant Int [243]
            │       │               ├── <1695> Constant Int [244]
            │       │               ├── <1697> Constant Int [245]
            │       │               ├── <1699> Constant Int [246]
            │       │               ├── <1701> Constant Int [247]
            │       │               ├── <1703> Constant Int [248]
            │       │               ├── <1705> Constant Int [249]
            │       │               ├── <1707> Constant Int [250]
            │       │               ├── <1709> Constant Int [251]
            │       │               ╰── <1711> Constant Int [252]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_23
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize23]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1720> Constant Int [253]
            │       │               ├── <1722> Constant Int [254]
            │       │               ├── <1724> Constant Int [255]
            │       │               ├── <1726> Constant Int [0]
            │       │               ├── <1728> Constant Int [1]
            │       │               ├── <1730> Constant Int [2]
            │       │               ├── <1732> Constant Int [3]
            │       │               ├── <1734> Constant Int [4]
            │       │               ├── <1736> Constant Int [5]
            │       │               ├── <1738> Constant Int [6]
            │       │               ├── <1740> Constant Int [7]
            │       │               ├── <1742> Constant Int [8]
            │       │               ├── <1744> Constant Int [9]
            │       │               ├── <1746> Constant Int [10]
            │       │               ├── <1748> Constant Int [11]
            │       │               ├── <1750> Constant Int [12]
            │       │               ├── <1752> Constant Int [13]
            │       │               ├── <1754> Constant Int [14]
            │       │               ├── <1756> Constant Int [15]
            │       │               ├── <1758> Constant Int [16]
            │       │               ├── <1760> Constant Int [17]
            │       │               ├── <1762> Constant Int [18]
            │       │               ╰── <1764> Constant Int [19]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── locvar_24
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize24]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <1773> Constant Int [20]
            │       │               ├── <1775> Constant Int [21]
            │       │               ├── <1777> Constant Int [22]
            │       │               ├── <1779> Constant Int [23]
            │       │               ├── <1781> Constant Int [24]
            │       │               ├── <1783> Constant Int [25]
            │       │               ├── <1785> Constant Int [26]
            │       │               ├── <1787> Constant Int [27]
            │       │               ├── <1789> Constant Int [28]
            │       │               ├── <1791> Constant Int [29]
            │       │               ├── <1793> Constant Int [30]
            │       │               ├── <1795> Constant Int [31]
            │       │               ├── <1797> Constant Int [32]
            │       │               ├── <1799> Constant Int [33]
            │       │               ├── <1801> Constant Int [34]
            │       │               ├── <1803> Constant Int [35]
            │       │               ├── <1805> Constant Int [36]
            │       │               ├── <1807> Constant Int [37]
            │       │               ├── <1809> Constant Int [38]
            │       │               ├── <1811> Constant Int [39]
            │       │               ├── <1813> Constant Int [40]
            │       │               ├── <1815> Constant Int [41]
            │       │               ├── <1817> Constant Int [42]
            │       │               ╰── <1819> Constant Int [43]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1971> Unary [!]
            │       │   │       ╰── <1970> FunctionCall [fun0]
            │       │   │           ├── <1827> Var [locvar_1]
            │       │   │           ├── <1829> Var [locvar_2]
            │       │   │           ├── <1831> Var [locvar_3]
            │       │   │           ├── <1833> Var [locvar_4]
            │       │   │           ├── <1835> Var [locvar_5]
            │       │   │           ├── <1837> Var [locvar_6]
            │       │   │           ├── <1839> Var [locvar_7]
            │       │   │           ├── <1841> Var [locvar_8]
            │       │   │           ├── <1843> Var [locvar_9]
            │       │   │           ├── <1845> Var [locvar_10]
            │       │   │           ├── <1847> Var [locvar_11]
            │       │   │           ├── <1849> Var [locvar_12]
            │       │   │           ├── <1851> Var [locvar_13]
            │       │   │           ├── <1853> Var [locvar_14]
            │       │   │           ├── <1855> Var [locvar_15]
            │       │   │           ├── <1857> Var [locvar_16]
            │       │   │           ├── <1859> Var [locvar_17]
            │       │   │           ├── <1861> Var [locvar_18]
            │       │   │           ├── <1863> Var [locvar_19]
            │       │   │           ├── <1865> Var [locvar_20]
            │       │   │           ├── <1867> Var [locvar_21]
            │       │   │           ├── <1869> Var [locvar_22]
            │       │   │           ├── <1871> Var [locvar_23]
            │       │   │           ├── <1873> Var [locvar_24]
            │       │   │           ├── <1877> Dot
            │       │   │           │   ├── <1875> Var [locvar_1]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1881> Dot
            │       │   │           │   ├── <1879> Var [locvar_2]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1885> Dot
            │       │   │           │   ├── <1883> Var [locvar_3]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1889> Dot
            │       │   │           │   ├── <1887> Var [locvar_4]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1893> Dot
            │       │   │           │   ├── <1891> Var [locvar_5]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1897> Dot
            │       │   │           │   ├── <1895> Var [locvar_6]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1901> Dot
            │       │   │           │   ├── <1899> Var [locvar_7]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1905> Dot
            │       │   │           │   ├── <1903> Var [locvar_8]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1909> Dot
            │       │   │           │   ├── <1907> Var [locvar_9]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1913> Dot
            │       │   │           │   ├── <1911> Var [locvar_10]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1917> Dot
            │       │   │           │   ├── <1915> Var [locvar_11]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1921> Dot
            │       │   │           │   ├── <1919> Var [locvar_12]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1925> Dot
            │       │   │           │   ├── <1923> Var [locvar_13]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1929> Dot
            │       │   │           │   ├── <1927> Var [locvar_14]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1933> Dot
            │       │   │           │   ├── <1931> Var [locvar_15]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1937> Dot
            │       │   │           │   ├── <1935> Var [locvar_16]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1941> Dot
            │       │   │           │   ├── <1939> Var [locvar_17]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1945> Dot
            │       │   │           │   ├── <1943> Var [locvar_18]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1949> Dot
            │       │   │           │   ├── <1947> Var [locvar_19]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1953> Dot
            │       │   │           │   ├── <1951> Var [locvar_20]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1957> Dot
            │       │   │           │   ├── <1955> Var [locvar_21]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1961> Dot
            │       │   │           │   ├── <1959> Var [locvar_22]
            │       │   │           │   ╰── arr
            │       │   │           ├── <1965> Dot
            │       │   │           │   ├── <1963> Var [locvar_23]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <1969> Dot
            │       │   │               ├── <1967> Var [locvar_24]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1972> Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2040> Unary [!]
            │       │   │       ╰── <2039> FunctionCall [fun1]
            │       │   │           ├── <1980> Var [locvar_7]
            │       │   │           ├── <1982> Var [locvar_8]
            │       │   │           ├── <1984> Var [locvar_9]
            │       │   │           ├── <1986> Var [locvar_10]
            │       │   │           ├── <1988> Var [locvar_1]
            │       │   │           ├── <1990> Var [locvar_2]
            │       │   │           ├── <1992> Var [locvar_3]
            │       │   │           ├── <1994> Var [locvar_4]
            │       │   │           ├── <1996> Var [locvar_5]
            │       │   │           ├── <1998> Var [locvar_6]
            │       │   │           ├── <2002> Dot
            │       │   │           │   ├── <2000> Var [locvar_7]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2006> Dot
            │       │   │           │   ├── <2004> Var [locvar_8]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2010> Dot
            │       │   │           │   ├── <2008> Var [locvar_9]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2014> Dot
            │       │   │           │   ├── <2012> Var [locvar_10]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2018> Dot
            │       │   │           │   ├── <2016> Var [locvar_1]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2022> Dot
            │       │   │           │   ├── <2020> Var [locvar_2]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2026> Dot
            │       │   │           │   ├── <2024> Var [locvar_3]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2030> Dot
            │       │   │           │   ├── <2028> Var [locvar_4]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2034> Dot
            │       │   │           │   ├── <2032> Var [locvar_5]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <2038> Dot
            │       │   │               ├── <2036> Var [locvar_6]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2041> Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2073> Unary [!]
            │       │   │       ╰── <2072> FunctionCall [fun2]
            │       │   │           ├── <2049> Var [locvar_11]
            │       │   │           ├── <2051> Var [locvar_12]
            │       │   │           ├── <2053> Var [locvar_13]
            │       │   │           ├── <2055> Var [locvar_1]
            │       │   │           ├── <2059> Dot
            │       │   │           │   ├── <2057> Var [locvar_11]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2063> Dot
            │       │   │           │   ├── <2061> Var [locvar_12]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2067> Dot
            │       │   │           │   ├── <2065> Var [locvar_13]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <2071> Dot
            │       │   │               ├── <2069> Var [locvar_1]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2074> Constant Int [7]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <2106> Unary [!]
            │       │   │       ╰── <2105> FunctionCall [fun3]
            │       │   │           ├── <2082> Var [locvar_14]
            │       │   │           ├── <2084> Var [locvar_15]
            │       │   │           ├── <2086> Var [locvar_16]
            │       │   │           ├── <2088> Var [locvar_2]
            │       │   │           ├── <2092> Dot
            │       │   │           │   ├── <2090> Var [locvar_14]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2096> Dot
            │       │   │           │   ├── <2094> Var [locvar_15]
            │       │   │           │   ╰── arr
            │       │   │           ├── <2100> Dot
            │       │   │           │   ├── <2098> Var [locvar_16]
            │       │   │           │   ╰── arr
            │       │   │           ╰── <2104> Dot
            │       │   │               ├── <2102> Var [locvar_2]
            │       │   │               ╰── arr
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <2107> Constant Int [8]
            │       ╰── Return
            │           ╰── <2112> Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_1
            │   ├── Type
            │   │   ╰── Struct [bytesize1]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ╰── <2120> Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_2
            │   ├── Type
            │   │   ╰── Struct [bytesize2]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2129> Constant Int [1]
            │               ╰── <2131> Constant Int [2]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_3
            │   ├── Type
            │   │   ╰── Struct [bytesize3]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2140> Constant Int [3]
            │               ├── <2142> Constant Int [4]
            │               ╰── <2144> Constant Int [5]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_4
            │   ├── Type
            │   │   ╰── Struct [bytesize4]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2153> Constant Int [6]
            │               ├── <2155> Constant Int [7]
            │               ├── <2157> Constant Int [8]
            │               ╰── <2159> Constant Int [9]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_5
            │   ├── Type
            │   │   ╰── Struct [bytesize5]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2168> Constant Int [10]
            │               ├── <2170> Constant Int [11]
            │               ├── <2172> Constant Int [12]
            │               ├── <2174> Constant Int [13]
            │               ╰── <2176> Constant Int [14]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_6
            │   ├── Type
            │   │   ╰── Struct [bytesize6]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2185> Constant Int [15]
            │               ├── <2187> Constant Int [16]
            │               ├── <2189> Constant Int [17]
            │               ├── <2191> Constant Int [18]
            │               ├── <2193> Constant Int [19]
            │               ╰── <2195> Constant Int [20]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_7
            │   ├── Type
            │   │   ╰── Struct [bytesize7]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2204> Constant Int [21]
            │               ├── <2206> Constant Int [22]
            │               ├── <2208> Constant Int [23]
            │               ├── <2210> Constant Int [24]
            │               ├── <2212> Constant Int [25]
            │               ├── <2214> Constant Int [26]
            │               ╰── <2216> Constant Int [27]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_8
            │   ├── Type
            │   │   ╰── Struct [bytesize8]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2225> Constant Int [28]
            │               ├── <2227> Constant Int [29]
            │               ├── <2229> Constant Int [30]
            │               ├── <2231> Constant Int [31]
            │               ├── <2233> Constant Int [32]
            │               ├── <2235> Constant Int [33]
            │               ├── <2237> Constant Int [34]
            │               ╰── <2239> Constant Int [35]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_9
            │   ├── Type
            │   │   ╰── Struct [bytesize9]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2248> Constant Int [36]
            │               ├── <2250> Constant Int [37]
            │               ├── <2252> Constant Int [38]
            │               ├── <2254> Constant Int [39]
            │               ├── <2256> Constant Int [40]
            │               ├── <2258> Constant Int [41]
            │               ├── <2260> Constant Int [42]
            │               ├── <2262> Constant Int [43]
            │               ╰── <2264> Constant Int [44]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_10
            │   ├── Type
            │   │   ╰── Struct [bytesize10]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2273> Constant Int [45]
            │               ├── <2275> Constant Int [46]
            │               ├── <2277> Constant Int [47]
            │               ├── <2279> Constant Int [48]
            │               ├── <2281> Constant Int [49]
            │               ├── <2283> Constant Int [50]
            │               ├── <2285> Constant Int [51]
            │               ├── <2287> Constant Int [52]
            │               ├── <2289> Constant Int [53]
            │               ╰── <2291> Constant Int [54]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_11
            │   ├── Type
            │   │   ╰── Struct [bytesize11]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2300> Constant Int [55]
            │               ├── <2302> Constant Int [56]
            │               ├── <2304> Constant Int [57]
            │               ├── <2306> Constant Int [58]
            │               ├── <2308> Constant Int [59]
            │               ├── <2310> Constant Int [60]
            │               ├── <2312> Constant Int [61]
            │               ├── <2314> Constant Int [62]
            │               ├── <2316> Constant Int [63]
            │               ├── <2318> Constant Int [64]
            │               ╰── <2320> Constant Int [65]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_12
            │   ├── Type
            │   │   ╰── Struct [bytesize12]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2329> Constant Int [66]
            │               ├── <2331> Constant Int [67]
            │               ├── <2333> Constant Int [68]
            │               ├── <2335> Constant Int [69]
            │               ├── <2337> Constant Int [70]
            │               ├── <2339> Constant Int [71]
            │               ├── <2341> Constant Int [72]
            │               ├── <2343> Constant Int [73]
            │               ├── <2345> Constant Int [74]
            │               ├── <2347> Constant Int [75]
            │               ├── <2349> Constant Int [76]
            │               ╰── <2351> Constant Int [77]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_13
            │   ├── Type
            │   │   ╰── Struct [bytesize13]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2360> Constant Int [78]
            │               ├── <2362> Constant Int [79]
            │               ├── <2364> Constant Int [80]
            │               ├── <2366> Constant Int [81]
            │               ├── <2368> Constant Int [82]
            │               ├── <2370> Constant Int [83]
            │               ├── <2372> Constant Int [84]
            │               ├── <2374> Constant Int [85]
            │               ├── <2376> Constant Int [86]
            │               ├── <2378> Constant Int [87]
            │               ├── <2380> Constant Int [88]
            │               ├── <2382> Constant Int [89]
            │               ╰── <2384> Constant Int [90]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_14
            │   ├── Type
            │   │   ╰── Struct [bytesize14]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2393> Constant Int [91]
            │               ├── <2395> Constant Int [92]
            │               ├── <2397> Constant Int [93]
            │               ├── <2399> Constant Int [94]
            │               ├── <2401> Constant Int [95]
            │               ├── <2403> Constant Int [96]
            │               ├── <2405> Constant Int [97]
            │               ├── <2407> Constant Int [98]
            │               ├── <2409> Constant Int [99]
            │               ├── <2411> Constant Int [100]
            │               ├── <2413> Constant Int [101]
            │               ├── <2415> Constant Int [102]
            │               ├── <2417> Constant Int [103]
            │               ╰── <2419> Constant Int [104]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_15
            │   ├── Type
            │   │   ╰── Struct [bytesize15]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2428> Constant Int [105]
            │               ├── <2430> Constant Int [106]
            │               ├── <2432> Constant Int [107]
            │               ├── <2434> Constant Int [108]
            │               ├── <2436> Constant Int [109]
            │               ├── <2438> Constant Int [110]
            │               ├── <2440> Constant Int [111]
            │               ├── <2442> Constant Int [112]
            │               ├── <2444> Constant Int [113]
            │               ├── <2446> Constant Int [114]
            │               ├── <2448> Constant Int [115]
            │               ├── <2450> Constant Int [116]
            │               ├── <2452> Constant Int [117]
            │               ├── <2454> Constant Int [118]
            │               ╰── <2456> Constant Int [119]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_16
            │   ├── Type
            │   │   ╰── Struct [bytesize16]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2465> Constant Int [120]
            │               ├── <2467> Constant Int [121]
            │               ├── <2469> Constant Int [122]
            │               ├── <2471> Constant Int [123]
            │               ├── <2473> Constant Int [124]
            │               ├── <2475> Constant Int [125]
            │               ├── <2477> Constant Int [126]
            │               ├── <2479> Constant Int [127]
            │               ├── <2481> Constant Int [128]
            │               ├── <2483> Constant Int [129]
            │               ├── <2485> Constant Int [130]
            │               ├── <2487> Constant Int [131]
            │               ├── <2489> Constant Int [132]
            │               ├── <2491> Constant Int [133]
            │               ├── <2493> Constant Int [134]
            │               ╰── <2495> Constant Int [135]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_17
            │   ├── Type
            │   │   ╰── Struct [bytesize17]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2504> Constant Int [136]
            │               ├── <2506> Constant Int [137]
            │               ├── <2508> Constant Int [138]
            │               ├── <2510> Constant Int [139]
            │               ├── <2512> Constant Int [140]
            │               ├── <2514> Constant Int [141]
            │               ├── <2516> Constant Int [142]
            │               ├── <2518> Constant Int [143]
            │               ├── <2520> Constant Int [144]
            │               ├── <2522> Constant Int [145]
            │               ├── <2524> Constant Int [146]
            │               ├── <2526> Constant Int [147]
            │               ├── <2528> Constant Int [148]
            │               ├── <2530> Constant Int [149]
            │               ├── <2532> Constant Int [150]
            │               ├── <2534> Constant Int [151]
            │               ╰── <2536> Constant Int [152]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_18
            │   ├── Type
            │   │   ╰── Struct [bytesize18]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2545> Constant Int [153]
            │               ├── <2547> Constant Int [154]
            │               ├── <2549> Constant Int [155]
            │               ├── <2551> Constant Int [156]
            │               ├── <2553> Constant Int [157]
            │               ├── <2555> Constant Int [158]
            │               ├── <2557> Constant Int [159]
            │               ├── <2559> Constant Int [160]
            │               ├── <2561> Constant Int [161]
            │               ├── <2563> Constant Int [162]
            │               ├── <2565> Constant Int [163]
            │               ├── <2567> Constant Int [164]
            │               ├── <2569> Constant Int [165]
            │               ├── <2571> Constant Int [166]
            │               ├── <2573> Constant Int [167]
            │               ├── <2575> Constant Int [168]
            │               ├── <2577> Constant Int [169]
            │               ╰── <2579> Constant Int [170]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_19
            │   ├── Type
            │   │   ╰── Struct [bytesize19]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2588> Constant Int [171]
            │               ├── <2590> Constant Int [172]
            │               ├── <2592> Constant Int [173]
            │               ├── <2594> Constant Int [174]
            │               ├── <2596> Constant Int [175]
            │               ├── <2598> Constant Int [176]
            │               ├── <2600> Constant Int [177]
            │               ├── <2602> Constant Int [178]
            │               ├── <2604> Constant Int [179]
            │               ├── <2606> Constant Int [180]
            │               ├── <2608> Constant Int [181]
            │               ├── <2610> Constant Int [182]
            │               ├── <2612> Constant Int [183]
            │               ├── <2614> Constant Int [184]
            │               ├── <2616> Constant Int [185]
            │               ├── <2618> Constant Int [186]
            │               ├── <2620> Constant Int [187]
            │               ├── <2622> Constant Int [188]
            │               ╰── <2624> Constant Int [189]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_20
            │   ├── Type
            │   │   ╰── Struct [bytesize20]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2633> Constant Int [190]
            │               ├── <2635> Constant Int [191]
            │               ├── <2637> Constant Int [192]
            │               ├── <2639> Constant Int [193]
            │               ├── <2641> Constant Int [194]
            │               ├── <2643> Constant Int [195]
            │               ├── <2645> Constant Int [196]
            │               ├── <2647> Constant Int [197]
            │               ├── <2649> Constant Int [198]
            │               ├── <2651> Constant Int [199]
            │               ├── <2653> Constant Int [200]
            │               ├── <2655> Constant Int [201]
            │               ├── <2657> Constant Int [202]
            │               ├── <2659> Constant Int [203]
            │               ├── <2661> Constant Int [204]
            │               ├── <2663> Constant Int [205]
            │               ├── <2665> Constant Int [206]
            │               ├── <2667> Constant Int [207]
            │               ├── <2669> Constant Int [208]
            │               ╰── <2671> Constant Int [209]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_21
            │   ├── Type
            │   │   ╰── Struct [bytesize21]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2680> Constant Int [210]
            │               ├── <2682> Constant Int [211]
            │               ├── <2684> Constant Int [212]
            │               ├── <2686> Constant Int [213]
            │               ├── <2688> Constant Int [214]
            │               ├── <2690> Constant Int [215]
            │               ├── <2692> Constant Int [216]
            │               ├── <2694> Constant Int [217]
            │               ├── <2696> Constant Int [218]
            │               ├── <2698> Constant Int [219]
            │               ├── <2700> Constant Int [220]
            │               ├── <2702> Constant Int [221]
            │               ├── <2704> Constant Int [222]
            │               ├── <2706> Constant Int [223]
            │               ├── <2708> Constant Int [224]
            │               ├── <2710> Constant Int [225]
            │               ├── <2712> Constant Int [226]
            │               ├── <2714> Constant Int [227]
            │               ├── <2716> Constant Int [228]
            │               ├── <2718> Constant Int [229]
            │               ╰── <2720> Constant Int [230]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_22
            │   ├── Type
            │   │   ╰── Struct [bytesize22]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2729> Constant Int [231]
            │               ├── <2731> Constant Int [232]
            │               ├── <2733> Constant Int [233]
            │               ├── <2735> Constant Int [234]
            │               ├── <2737> Constant Int [235]
            │               ├── <2739> Constant Int [236]
            │               ├── <2741> Constant Int [237]
            │               ├── <2743> Constant Int [238]
            │               ├── <2745> Constant Int [239]
            │               ├── <2747> Constant Int [240]
            │               ├── <2749> Constant Int [241]
            │               ├── <2751> Constant Int [242]
            │               ├── <2753> Constant Int [243]
            │               ├── <2755> Constant Int [244]
            │               ├── <2757> Constant Int [245]
            │               ├── <2759> Constant Int [246]
            │               ├── <2761> Constant Int [247]
            │               ├── <2763> Constant Int [248]
            │               ├── <2765> Constant Int [249]
            │               ├── <2767> Constant Int [250]
            │               ├── <2769> Constant Int [251]
            │               ╰── <2771> Constant Int [252]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_23
            │   ├── Type
            │   │   ╰── Struct [bytesize23]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <2780> Constant Int [253]
            │               ├── <2782> Constant Int [254]
            │               ├── <2784> Constant Int [255]
            │               ├── <2786> Constant Int [0]
            │               ├── <2788> Constant Int [1]
            │               ├── <2790> Constant Int [2]
            │               ├── <2792> Constant Int [3]
            │               ├── <2794> Constant Int [4]
            │               ├── <2796> Constant Int [5]
            │               ├── <2798> Constant Int [6]
            │               ├── <2800> Constant Int [7]
            │               ├── <2802> Constant Int [8]
            │               ├── <2804> Constant Int [9]
            │               ├── <2806> Constant Int [10]
            │               ├── <2808> Constant Int [11]
            │               ├── <2810> Constant Int [12]
            │               ├── <2812> Constant Int [13]
            │               ├── <2814> Constant Int [14]
            │               ├── <2816> Constant Int [15]
            │               ├── <2818> Constant Int [16]
            │               ├── <2820> Constant Int [17]
            │               ├── <2822> Constant Int [18]
            │               ╰── <2824> Constant Int [19]
            ╰── VarDeclaration
                ├── Name
                │   ╰── globvar_24
                ├── Type
                │   ╰── Struct [bytesize24]
                ╰── Initializer
                    ╰── Compound
                        ╰── Compound
                            ├── <2833> Constant Int [20]
                            ├── <2835> Constant Int [21]
                            ├── <2837> Constant Int [22]
                            ├── <2839> Constant Int [23]
                            ├── <2841> Constant Int [24]
                            ├── <2843> Constant Int [25]
                            ├── <2845> Constant Int [26]
                            ├── <2847> Constant Int [27]
                            ├── <2849> Constant Int [28]
                            ├── <2851> Constant Int [29]
                            ├── <2853> Constant Int [30]
                            ├── <2855> Constant Int [31]
                            ├── <2857> Constant Int [32]
                            ├── <2859> Constant Int [33]
                            ├── <2861> Constant Int [34]
                            ├── <2863> Constant Int [35]
                            ├── <2865> Constant Int [36]
                            ├── <2867> Constant Int [37]
                            ├── <2869> Constant Int [38]
                            ├── <2871> Constant Int [39]
                            ├── <2873> Constant Int [40]
                            ├── <2875> Constant Int [41]
                            ├── <2877> Constant Int [42]
                            ╰── <2879> Constant Int [43]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_pass_args_on_page_boundary() {
    let src = r#"
        struct nine_bytes {
            char arr[11];
        };
        extern struct nine_bytes on_page_boundary;
        int f(struct nine_bytes in_reg, int a, int b, int c, int d, int e,
              struct nine_bytes on_stack) {
            for (int i = 0; i < 9; i = i + 1) {
                char in_reg_c = in_reg.arr[i];
                char on_stack_c = on_stack.arr[i];
                if (i == 2) {
                    if (in_reg_c != 4 || on_stack_c != 4) {
                        return 1;
                    }
                } else if (i == 3) {
                    if (in_reg_c != 5 || on_stack_c != 5) {
                        return 2;
                    }
                } else if (i == 8) {
                    if (in_reg_c != 6 || on_stack_c != 6) {
                        return 3;
                    }
                } else {
                    if (in_reg_c || on_stack_c) {
                        return 4;
                    }
                }
            }
            if (a != 101 || b != 102 || c != 103 || d != 104 || e != 105) {
                return 5;
            }
            return 0;
        }
        int main(void) {
            on_page_boundary.arr[2] = 4;
            on_page_boundary.arr[3] = 5;
            on_page_boundary.arr[8] = 6;
            return f(on_page_boundary, 101, 102, 103, 104, 105,
                     on_page_boundary);
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [nine_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 11
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── on_page_boundary
            │   ├── Type
            │   │   ╰── Struct [nine_bytes]
            │   ╰── Extern
            ├── Function [f]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── in_reg
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [nine_bytes]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── on_stack
            │   │       ╰── Type
            │   │           ╰── Struct [nine_bytes]
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── <47> Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <55>  [<]
            │       │   │       ├── <52> Var [i]
            │       │   │       ╰── <54> Constant Int [9]
            │       │   ├── Condition
            │       │   │   ╰── <64> Assign [=]
            │       │   │       ├── <57> Var [i]
            │       │   │       ╰── <63>  [+]
            │       │   │           ├── <60> Var [i]
            │       │   │           ╰── <62> Constant Int [1]
            │       │   ╰── Block
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── in_reg_c
            │       │       │   ├── Type
            │       │       │   │   ╰── Char
            │       │       │   ╰── Initializer
            │       │       │       ╰── <74> Subscript
            │       │       │           ├── <71> Dot
            │       │       │           │   ├── <69> Var [in_reg]
            │       │       │           │   ╰── arr
            │       │       │           ╰── <73> Var [i]
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── on_stack_c
            │       │       │   ├── Type
            │       │       │   │   ╰── Char
            │       │       │   ╰── Initializer
            │       │       │       ╰── <86> Subscript
            │       │       │           ├── <83> Dot
            │       │       │           │   ├── <81> Var [on_stack]
            │       │       │           │   ╰── arr
            │       │       │           ╰── <85> Var [i]
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <93>  [==]
            │       │           │       ├── <90> Var [i]
            │       │           │       ╰── <92> Constant Int [2]
            │       │           ├── Then
            │       │           │   ╰── Block
            │       │           │       ╰── If
            │       │           │           ├── Condition
            │       │           │           │   ╰── <105>  [||]
            │       │           │           │       ├── <98>  [!=]
            │       │           │           │       │   ├── <95> Var [in_reg_c]
            │       │           │           │       │   ╰── <97> Constant Int [4]
            │       │           │           │       ╰── <104>  [!=]
            │       │           │           │           ├── <101> Var [on_stack_c]
            │       │           │           │           ╰── <103> Constant Int [4]
            │       │           │           ╰── Then
            │       │           │               ╰── Block
            │       │           │                   ╰── Return
            │       │           │                       ╰── <106> Constant Int [1]
            │       │           ╰── Else
            │       │               ╰── If
            │       │                   ├── Condition
            │       │                   │   ╰── <117>  [==]
            │       │                   │       ├── <114> Var [i]
            │       │                   │       ╰── <116> Constant Int [3]
            │       │                   ├── Then
            │       │                   │   ╰── Block
            │       │                   │       ╰── If
            │       │                   │           ├── Condition
            │       │                   │           │   ╰── <129>  [||]
            │       │                   │           │       ├── <122>  [!=]
            │       │                   │           │       │   ├── <119> Var [in_reg_c]
            │       │                   │           │       │   ╰── <121> Constant Int [5]
            │       │                   │           │       ╰── <128>  [!=]
            │       │                   │           │           ├── <125> Var [on_stack_c]
            │       │                   │           │           ╰── <127> Constant Int [5]
            │       │                   │           ╰── Then
            │       │                   │               ╰── Block
            │       │                   │                   ╰── Return
            │       │                   │                       ╰── <130> Constant Int [2]
            │       │                   ╰── Else
            │       │                       ╰── If
            │       │                           ├── Condition
            │       │                           │   ╰── <141>  [==]
            │       │                           │       ├── <138> Var [i]
            │       │                           │       ╰── <140> Constant Int [8]
            │       │                           ├── Then
            │       │                           │   ╰── Block
            │       │                           │       ╰── If
            │       │                           │           ├── Condition
            │       │                           │           │   ╰── <153>  [||]
            │       │                           │           │       ├── <146>  [!=]
            │       │                           │           │       │   ├── <143> Var [in_reg_c]
            │       │                           │           │       │   ╰── <145> Constant Int [6]
            │       │                           │           │       ╰── <152>  [!=]
            │       │                           │           │           ├── <149> Var [on_stack_c]
            │       │                           │           │           ╰── <151> Constant Int [6]
            │       │                           │           ╰── Then
            │       │                           │               ╰── Block
            │       │                           │                   ╰── Return
            │       │                           │                       ╰── <154> Constant Int [3]
            │       │                           ╰── Else
            │       │                               ╰── Block
            │       │                                   ╰── If
            │       │                                       ├── Condition
            │       │                                       │   ╰── <166>  [||]
            │       │                                       │       ├── <162> Var [in_reg_c]
            │       │                                       │       ╰── <165> Var [on_stack_c]
            │       │                                       ╰── Then
            │       │                                           ╰── Block
            │       │                                               ╰── Return
            │       │                                                   ╰── <167> Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <212>  [||]
            │       │   │       ├── <205>  [||]
            │       │   │       │   ├── <198>  [||]
            │       │   │       │   │   ├── <191>  [||]
            │       │   │       │   │   │   ├── <184>  [!=]
            │       │   │       │   │   │   │   ├── <181> Var [a]
            │       │   │       │   │   │   │   ╰── <183> Constant Int [101]
            │       │   │       │   │   │   ╰── <190>  [!=]
            │       │   │       │   │   │       ├── <187> Var [b]
            │       │   │       │   │   │       ╰── <189> Constant Int [102]
            │       │   │       │   │   ╰── <197>  [!=]
            │       │   │       │   │       ├── <194> Var [c]
            │       │   │       │   │       ╰── <196> Constant Int [103]
            │       │   │       │   ╰── <204>  [!=]
            │       │   │       │       ├── <201> Var [d]
            │       │   │       │       ╰── <203> Constant Int [104]
            │       │   │       ╰── <211>  [!=]
            │       │   │           ├── <208> Var [e]
            │       │   │           ╰── <210> Constant Int [105]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <213> Constant Int [5]
            │       ╰── Return
            │           ╰── <218> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <235> Assign [=]
                    │   ├── <232> Subscript
                    │   │   ├── <230> Dot
                    │   │   │   ├── <228> Var [on_page_boundary]
                    │   │   │   ╰── arr
                    │   │   ╰── <231> Constant Int [2]
                    │   ╰── <234> Constant Int [4]
                    ├── <245> Assign [=]
                    │   ├── <242> Subscript
                    │   │   ├── <240> Dot
                    │   │   │   ├── <238> Var [on_page_boundary]
                    │   │   │   ╰── arr
                    │   │   ╰── <241> Constant Int [3]
                    │   ╰── <244> Constant Int [5]
                    ├── <255> Assign [=]
                    │   ├── <252> Subscript
                    │   │   ├── <250> Dot
                    │   │   │   ├── <248> Var [on_page_boundary]
                    │   │   │   ╰── arr
                    │   │   ╰── <251> Constant Int [8]
                    │   ╰── <254> Constant Int [6]
                    ╰── Return
                        ╰── <267> FunctionCall [f]
                            ├── <259> Var [on_page_boundary]
                            ├── <260> Constant Int [101]
                            ├── <261> Constant Int [102]
                            ├── <262> Constant Int [103]
                            ├── <263> Constant Int [104]
                            ├── <264> Constant Int [105]
                            ╰── <266> Var [on_page_boundary]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_simple() {
    let src = r#"
        
        struct pair {
            int x;
            double y;
        };
        double test_struct_param(struct pair p) {
            if (p.x != 1 || p.y != 2.0) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            struct pair x = {1, 2.0};
            if (!test_struct_param(x)) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Double
            ├── Function [test_struct_param]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── p
            │   │       ╰── Type
            │   │           ╰── Struct [pair]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <35>  [||]
            │       │   │       ├── <26>  [!=]
            │       │   │       │   ├── <23> Dot
            │       │   │       │   │   ├── <21> Var [p]
            │       │   │       │   │   ╰── x
            │       │   │       │   ╰── <25> Constant Int [1]
            │       │   │       ╰── <34>  [!=]
            │       │   │           ├── <31> Dot
            │       │   │           │   ├── <29> Var [p]
            │       │   │           │   ╰── y
            │       │   │           ╰── <33> Constant Double [+2e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <36> Constant Int [0]
            │       ╰── Return
            │           ╰── <41> Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [pair]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <54> Constant Int [1]
                    │           ╰── <56> Constant Double [+2e0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <65> Unary [!]
                    │   │       ╰── <64> FunctionCall [test_struct_param]
                    │   │           ╰── <63> Var [x]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <66> Constant Int [1]
                    ╰── Return
                        ╰── <71> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_parameters_stack_clobber() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void exit(int status);
        struct stack_bytes {
            char bytes[16];
        };
        static struct stack_bytes to_validate;
        void validate_stack_bytes(int code) {
            if (strcmp(to_validate.bytes, "efghijklmnopqrs")) {
                exit(code);
            }
            return;
        }
        struct one_longword {
            int i;
        };
        void take_longword(struct one_longword s, int code) {
            if (s.i != 10) {
                exit(code);
            }
            return;
        }
        int pass_longword(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct one_longword my_var = {10};
            take_longword(my_var, 1);
            to_validate = bytes;
            validate_stack_bytes(2);
            return 0;
        }
        struct one_quadword {
            long l;
        };
        void take_quadword(struct one_quadword s, int code) {
            if (s.l != 10) {
                exit(code);
            }
            return;
        }
        int pass_quadword(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct one_quadword my_var = {10};
            take_quadword(my_var, 3);
            to_validate = bytes;
            validate_stack_bytes(4);
            return 0;
        }
        struct one_double {
            double d;
        };
        void take_double(struct one_double s, int code) {
            if (s.d != 10) {
                exit(code);
            }
            return;
        }
        int pass_double(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct one_double my_var = {10};
            take_double(my_var, 5);
            to_validate = bytes;
            validate_stack_bytes(6);
            return 0;
        }
        struct twelve_bytes {
            char arr[12];
        };
        void take_twelve_bytes(struct twelve_bytes s, int code) {
            if (strcmp(s.arr, "abcdefghijk")) {
                exit(code);
            }
            return;
        }
        int pass_twelve_bytes(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct twelve_bytes my_var = {"abcdefghijk"};
            take_twelve_bytes(my_var, 7);
            to_validate = bytes;
            validate_stack_bytes(8);
            return 0;
        }
        struct memory {
            char arr[32];
        };
        void take_struct_in_mem(struct memory s, int code) {
            if (strcmp(s.arr, "Here's the thing: I'm a string.")) {
                exit(code);
            }
            return;
        }
        int pass_struct_in_mem(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct memory my_var = {"Here's the thing: I'm a string."};
            take_struct_in_mem(my_var, 9);
            to_validate = bytes;
            validate_stack_bytes(10);
            return 0;
        }
        struct irregular {
            char arr[3];
        };
        void take_irregular_struct(struct irregular s, int code) {
            if (strcmp(s.arr, "12")) {
                exit(code);
            }
            return;
        }
        int pass_irregular_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct irregular my_var = {"12"};
            take_irregular_struct(my_var, 11);
            to_validate = bytes;
            validate_stack_bytes(12);
            return 0;
        }
        struct irregular_memory {
            char arr[27];
        };
        void take_irregular_memory_struct(struct irregular_memory s, int code) {
            if (strcmp(s.arr, "The quick brown fox jumped")) {
                exit(code);
            }
            return;
        }
        int pass_irregular_memory_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct irregular_memory my_var = {"The quick brown fox jumped"};
            take_irregular_memory_struct(my_var, 13);
            to_validate = bytes;
            validate_stack_bytes(14);
            return 0;
        }
        int main(void) {
            pass_longword();
            pass_quadword();
            pass_double();
            pass_twelve_bytes();
            pass_struct_in_mem();
            pass_irregular_struct();
            pass_irregular_memory_struct();
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Struct [stack_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── bytes
            │       ╰── Type
            │           ╰── Array
            │               ├── 16
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── to_validate
            │   ├── Type
            │   │   ╰── Struct [stack_bytes]
            │   ╰── Static
            ├── Function [validate_stack_bytes]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <55> FunctionCall [strcmp]
            │       │   │       ├── <53> Dot
            │       │   │       │   ├── <51> Var [to_validate]
            │       │   │       │   ╰── bytes
            │       │   │       ╰── <54> "efghijklmnopqrs"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <59> FunctionCall [exit]
            │       │               ╰── <58> Var [code]
            │       ╰── Return
            ├── Struct [one_longword]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Function [take_longword]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [one_longword]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <91>  [!=]
            │       │   │       ├── <88> Dot
            │       │   │       │   ├── <86> Var [s]
            │       │   │       │   ╰── i
            │       │   │       ╰── <90> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <95> FunctionCall [exit]
            │       │               ╰── <94> Var [code]
            │       ╰── Return
            ├── Function [pass_longword]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <112> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [one_longword]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <121> Constant Int [10]
            │       │   ╰── Static
            │       ├── <129> FunctionCall [take_longword]
            │       │   ├── <127> Var [my_var]
            │       │   ╰── <128> Constant Int [1]
            │       ├── <136> Assign [=]
            │       │   ├── <132> Var [to_validate]
            │       │   ╰── <135> Var [bytes]
            │       ├── <140> FunctionCall [validate_stack_bytes]
            │       │   ╰── <139> Constant Int [2]
            │       ╰── Return
            │           ╰── <142> Constant Int [0]
            ├── Struct [one_quadword]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Function [take_quadword]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [one_quadword]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <170>  [!=]
            │       │   │       ├── <167> Dot
            │       │   │       │   ├── <165> Var [s]
            │       │   │       │   ╰── l
            │       │   │       ╰── <169> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <174> FunctionCall [exit]
            │       │               ╰── <173> Var [code]
            │       ╰── Return
            ├── Function [pass_quadword]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <191> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [one_quadword]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <200> Constant Int [10]
            │       │   ╰── Static
            │       ├── <208> FunctionCall [take_quadword]
            │       │   ├── <206> Var [my_var]
            │       │   ╰── <207> Constant Int [3]
            │       ├── <215> Assign [=]
            │       │   ├── <211> Var [to_validate]
            │       │   ╰── <214> Var [bytes]
            │       ├── <219> FunctionCall [validate_stack_bytes]
            │       │   ╰── <218> Constant Int [4]
            │       ╰── Return
            │           ╰── <221> Constant Int [0]
            ├── Struct [one_double]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Function [take_double]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [one_double]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <249>  [!=]
            │       │   │       ├── <246> Dot
            │       │   │       │   ├── <244> Var [s]
            │       │   │       │   ╰── d
            │       │   │       ╰── <248> Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <253> FunctionCall [exit]
            │       │               ╰── <252> Var [code]
            │       ╰── Return
            ├── Function [pass_double]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <270> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [one_double]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <279> Constant Int [10]
            │       │   ╰── Static
            │       ├── <287> FunctionCall [take_double]
            │       │   ├── <285> Var [my_var]
            │       │   ╰── <286> Constant Int [5]
            │       ├── <294> Assign [=]
            │       │   ├── <290> Var [to_validate]
            │       │   ╰── <293> Var [bytes]
            │       ├── <298> FunctionCall [validate_stack_bytes]
            │       │   ╰── <297> Constant Int [6]
            │       ╰── Return
            │           ╰── <300> Constant Int [0]
            ├── Struct [twelve_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 12
            │               ╰── Char
            ├── Function [take_twelve_bytes]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [twelve_bytes]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <331> FunctionCall [strcmp]
            │       │   │       ├── <329> Dot
            │       │   │       │   ├── <327> Var [s]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <330> "abcdefghijk"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <335> FunctionCall [exit]
            │       │               ╰── <334> Var [code]
            │       ╰── Return
            ├── Function [pass_twelve_bytes]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <352> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [twelve_bytes]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <361> "abcdefghijk"
            │       │   ╰── Static
            │       ├── <369> FunctionCall [take_twelve_bytes]
            │       │   ├── <367> Var [my_var]
            │       │   ╰── <368> Constant Int [7]
            │       ├── <376> Assign [=]
            │       │   ├── <372> Var [to_validate]
            │       │   ╰── <375> Var [bytes]
            │       ├── <380> FunctionCall [validate_stack_bytes]
            │       │   ╰── <379> Constant Int [8]
            │       ╰── Return
            │           ╰── <382> Constant Int [0]
            ├── Struct [memory]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 32
            │               ╰── Char
            ├── Function [take_struct_in_mem]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [memory]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <413> FunctionCall [strcmp]
            │       │   │       ├── <411> Dot
            │       │   │       │   ├── <409> Var [s]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <412> "Here's the thing: I'm a string."
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <417> FunctionCall [exit]
            │       │               ╰── <416> Var [code]
            │       ╰── Return
            ├── Function [pass_struct_in_mem]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <434> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [memory]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <443> "Here's the thing: I'm a string."
            │       │   ╰── Static
            │       ├── <451> FunctionCall [take_struct_in_mem]
            │       │   ├── <449> Var [my_var]
            │       │   ╰── <450> Constant Int [9]
            │       ├── <458> Assign [=]
            │       │   ├── <454> Var [to_validate]
            │       │   ╰── <457> Var [bytes]
            │       ├── <462> FunctionCall [validate_stack_bytes]
            │       │   ╰── <461> Constant Int [10]
            │       ╰── Return
            │           ╰── <464> Constant Int [0]
            ├── Struct [irregular]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Function [take_irregular_struct]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [irregular]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <495> FunctionCall [strcmp]
            │       │   │       ├── <493> Dot
            │       │   │       │   ├── <491> Var [s]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <494> "12"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <499> FunctionCall [exit]
            │       │               ╰── <498> Var [code]
            │       ╰── Return
            ├── Function [pass_irregular_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <516> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [irregular]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <525> "12"
            │       │   ╰── Static
            │       ├── <533> FunctionCall [take_irregular_struct]
            │       │   ├── <531> Var [my_var]
            │       │   ╰── <532> Constant Int [11]
            │       ├── <540> Assign [=]
            │       │   ├── <536> Var [to_validate]
            │       │   ╰── <539> Var [bytes]
            │       ├── <544> FunctionCall [validate_stack_bytes]
            │       │   ╰── <543> Constant Int [12]
            │       ╰── Return
            │           ╰── <546> Constant Int [0]
            ├── Struct [irregular_memory]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 27
            │               ╰── Char
            ├── Function [take_irregular_memory_struct]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── s
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [irregular_memory]
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <577> FunctionCall [strcmp]
            │       │   │       ├── <575> Dot
            │       │   │       │   ├── <573> Var [s]
            │       │   │       │   ╰── arr
            │       │   │       ╰── <576> "The quick brown fox jumped"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <581> FunctionCall [exit]
            │       │               ╰── <580> Var [code]
            │       ╰── Return
            ├── Function [pass_irregular_memory_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <598> "efghijklmnopqrs"
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── my_var
            │       │   ├── Type
            │       │   │   ╰── Struct [irregular_memory]
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ╰── <607> "The quick brown fox jumped"
            │       │   ╰── Static
            │       ├── <615> FunctionCall [take_irregular_memory_struct]
            │       │   ├── <613> Var [my_var]
            │       │   ╰── <614> Constant Int [13]
            │       ├── <622> Assign [=]
            │       │   ├── <618> Var [to_validate]
            │       │   ╰── <621> Var [bytes]
            │       ├── <626> FunctionCall [validate_stack_bytes]
            │       │   ╰── <625> Constant Int [14]
            │       ╰── Return
            │           ╰── <628> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <638> FunctionCall [pass_longword]
                    ├── <641> FunctionCall [pass_quadword]
                    ├── <644> FunctionCall [pass_double]
                    ├── <647> FunctionCall [pass_twelve_bytes]
                    ├── <650> FunctionCall [pass_struct_in_mem]
                    ├── <653> FunctionCall [pass_irregular_struct]
                    ├── <656> FunctionCall [pass_irregular_memory_struct]
                    ╰── Return
                        ╰── <658> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_ignore_retval() {
    let src = r#"
        struct small {
            int x;
        };
        struct big {
            double d;
            int x;
            long l;
        };
        struct small globl = {0};
        struct small return_in_reg(void) {
            globl.x = globl.x + 1;
            return globl;
        }
        struct big globl2 = {1.25, 2, 300};
        struct big return_in_mem(void) {
            globl2.d = globl2.d * 2;
            globl2.x = globl2.x * 3;
            globl2.l = globl2.l * 4;
            return globl2;
        }
        int main(void) {
            (void)return_in_reg();
            return_in_reg();
            if (globl.x != 2) {
                return 1;
            }
            return_in_mem();
            (void)return_in_mem();
            if (globl2.d != 5.0 || globl2.x != 18 || globl2.l != 4800) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [small]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── x
            │       ╰── Type
            │           ╰── Int
            ├── Struct [big]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globl
            │   ├── Type
            │   │   ╰── Struct [small]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── <25> Constant Int [0]
            ├── Function [return_in_reg]
            │   ╰── Body
            │       ├── <47> Assign [=]
            │       │   ├── <38> Dot
            │       │   │   ├── <36> Var [globl]
            │       │   │   ╰── x
            │       │   ╰── <46>  [+]
            │       │       ├── <43> Dot
            │       │       │   ├── <41> Var [globl]
            │       │       │   ╰── x
            │       │       ╰── <45> Constant Int [1]
            │       ╰── Return
            │           ╰── <50> Var [globl]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globl2
            │   ├── Type
            │   │   ╰── Struct [big]
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── <58> Constant Double [+1.25e0]
            │           ├── <60> Constant Int [2]
            │           ╰── <62> Constant Int [300]
            ├── Function [return_in_mem]
            │   ╰── Body
            │       ├── <84> Assign [=]
            │       │   ├── <75> Dot
            │       │   │   ├── <73> Var [globl2]
            │       │   │   ╰── d
            │       │   ╰── <83>  [*]
            │       │       ├── <80> Dot
            │       │       │   ├── <78> Var [globl2]
            │       │       │   ╰── d
            │       │       ╰── <82> Constant Int [2]
            │       ├── <98> Assign [=]
            │       │   ├── <89> Dot
            │       │   │   ├── <87> Var [globl2]
            │       │   │   ╰── x
            │       │   ╰── <97>  [*]
            │       │       ├── <94> Dot
            │       │       │   ├── <92> Var [globl2]
            │       │       │   ╰── x
            │       │       ╰── <96> Constant Int [3]
            │       ├── <112> Assign [=]
            │       │   ├── <103> Dot
            │       │   │   ├── <101> Var [globl2]
            │       │   │   ╰── l
            │       │   ╰── <111>  [*]
            │       │       ├── <108> Dot
            │       │       │   ├── <106> Var [globl2]
            │       │       │   ╰── l
            │       │       ╰── <110> Constant Int [4]
            │       ╰── Return
            │           ╰── <115> Var [globl2]
            ╰── Function [main]
                ╰── Body
                    ├── <128> Cast
                    │   ├── Target
                    │   │   ╰── Void
                    │   ╰── Expression
                    │       ╰── <127> FunctionCall [return_in_reg]
                    ├── <131> FunctionCall [return_in_reg]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <139>  [!=]
                    │   │       ├── <136> Dot
                    │   │       │   ├── <134> Var [globl]
                    │   │       │   ╰── x
                    │   │       ╰── <138> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <140> Constant Int [1]
                    ├── <146> FunctionCall [return_in_mem]
                    ├── <152> Cast
                    │   ├── Target
                    │   │   ╰── Void
                    │   ╰── Expression
                    │       ╰── <151> FunctionCall [return_in_mem]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <178>  [||]
                    │   │       ├── <169>  [||]
                    │   │       │   ├── <160>  [!=]
                    │   │       │   │   ├── <157> Dot
                    │   │       │   │   │   ├── <155> Var [globl2]
                    │   │       │   │   │   ╰── d
                    │   │       │   │   ╰── <159> Constant Double [+5e0]
                    │   │       │   ╰── <168>  [!=]
                    │   │       │       ├── <165> Dot
                    │   │       │       │   ├── <163> Var [globl2]
                    │   │       │       │   ╰── x
                    │   │       │       ╰── <167> Constant Int [18]
                    │   │       ╰── <177>  [!=]
                    │   │           ├── <174> Dot
                    │   │           │   ├── <172> Var [globl2]
                    │   │           │   ╰── l
                    │   │           ╰── <176> Constant Int [4800]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <179> Constant Int [2]
                    ╰── Return
                        ╰── <184> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_access_retval_members() {
    let src = r#"
        
        
        struct inner {
            char x;
            long y;
        };
        struct outer {
            double d;
            struct inner *ptr;
            struct inner s;
        };
        void *calloc(unsigned long nmemb, unsigned long size);
        struct inner return_small_struct(void);
        struct outer return_nested_struct(void);
        
        struct inner return_small_struct(void) {
            struct inner i = {101, 102};
            return i;
        }
        struct outer return_nested_struct(void) {
            static struct outer ret = {2.0, 0, {10, 11}};
            if (!ret.ptr) {
                ret.ptr = calloc(1, sizeof(struct inner));
                ret.ptr->x = 12;
                ret.ptr->y = 13;
            }
            return ret;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Long
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [return_small_struct]
            ├── Function [return_nested_struct]
            ├── Function [return_small_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Struct [inner]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <67> Constant Int [101]
            │       │           ╰── <69> Constant Int [102]
            │       ╰── Return
            │           ╰── <74> Var [i]
            ╰── Function [return_nested_struct]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ret
                    │   ├── Type
                    │   │   ╰── Struct [outer]
                    │   ├── Initializer
                    │   │   ╰── Compound
                    │   │       ├── <89> Constant Double [+2e0]
                    │   │       ├── <91> Constant Int [0]
                    │   │       ╰── Compound
                    │   │           ├── <93> Constant Int [10]
                    │   │           ╰── <95> Constant Int [11]
                    │   ╰── Static
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <105> Unary [!]
                    │   │       ╰── <104> Dot
                    │   │           ├── <102> Var [ret]
                    │   │           ╰── ptr
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <118> Assign [=]
                    │           │   ├── <109> Dot
                    │           │   │   ├── <107> Var [ret]
                    │           │   │   ╰── ptr
                    │           │   ╰── <117> FunctionCall [calloc]
                    │           │       ├── <112> Constant Int [1]
                    │           │       ╰── <116> SizeOfType
                    │           │           ╰── Struct [inner]
                    │           ├── <128> Assign [=]
                    │           │   ├── <125> Arrow
                    │           │   │   ├── <123> Dot
                    │           │   │   │   ├── <121> Var [ret]
                    │           │   │   │   ╰── ptr
                    │           │   │   ╰── x
                    │           │   ╰── <127> Constant Int [12]
                    │           ╰── <138> Assign [=]
                    │               ├── <135> Arrow
                    │               │   ├── <133> Dot
                    │               │   │   ├── <131> Var [ret]
                    │               │   │   ╰── ptr
                    │               │   ╰── y
                    │               ╰── <137> Constant Int [13]
                    ╰── Return
                        ╰── <144> Var [ret]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_access_retval_members_client() {
    let src = r#"
        
        
        struct inner {
            char x;
            long y;
        };
        struct outer {
            double d;
            struct inner *ptr;
            struct inner s;
        };
        void *calloc(unsigned long nmemb, unsigned long size);
        struct inner return_small_struct(void);
        struct outer return_nested_struct(void);
        
        int main(void) {
            if (return_small_struct().y != 102) {
                return 1;
            }
            if (return_nested_struct().d != 2.0 || return_nested_struct().s.x != 10 ||
                return_nested_struct().s.y != 11) {
                return 3;
            }
            if (return_nested_struct().ptr->x != 12 ||
                return_nested_struct().ptr->y != 13) {
                return 4;
            }
            return_nested_struct().ptr->x = 70;
            return_nested_struct().ptr->y = 71;
            if (return_nested_struct().ptr->x != 70 ||
                return_nested_struct().ptr->y != 71) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [inner]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Long
            ├── Struct [outer]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── ptr
            │   │   ╰── Type
            │   │       ╰── Pointer
            │   │           ╰── Struct [inner]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── s
            │       ╰── Type
            │           ╰── Struct [inner]
            ├── Function [calloc]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── nmemb
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── size
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [return_small_struct]
            ├── Function [return_nested_struct]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <68>  [!=]
                    │   │       ├── <65> Dot
                    │   │       │   ├── <63> FunctionCall [return_small_struct]
                    │   │       │   ╰── y
                    │   │       ╰── <67> Constant Int [102]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <69> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <102>  [||]
                    │   │       ├── <91>  [||]
                    │   │       │   ├── <80>  [!=]
                    │   │       │   │   ├── <77> Dot
                    │   │       │   │   │   ├── <75> FunctionCall [return_nested_struct]
                    │   │       │   │   │   ╰── d
                    │   │       │   │   ╰── <79> Constant Double [+2e0]
                    │   │       │   ╰── <90>  [!=]
                    │   │       │       ├── <87> Dot
                    │   │       │       │   ├── <85> Dot
                    │   │       │       │   │   ├── <83> FunctionCall [return_nested_struct]
                    │   │       │       │   │   ╰── s
                    │   │       │       │   ╰── x
                    │   │       │       ╰── <89> Constant Int [10]
                    │   │       ╰── <101>  [!=]
                    │   │           ├── <98> Dot
                    │   │           │   ├── <96> Dot
                    │   │           │   │   ├── <94> FunctionCall [return_nested_struct]
                    │   │           │   │   ╰── s
                    │   │           │   ╰── y
                    │   │           ╰── <100> Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <103> Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <127>  [||]
                    │   │       ├── <116>  [!=]
                    │   │       │   ├── <113> Arrow
                    │   │       │   │   ├── <111> Dot
                    │   │       │   │   │   ├── <109> FunctionCall [return_nested_struct]
                    │   │       │   │   │   ╰── ptr
                    │   │       │   │   ╰── x
                    │   │       │   ╰── <115> Constant Int [12]
                    │   │       ╰── <126>  [!=]
                    │   │           ├── <123> Arrow
                    │   │           │   ├── <121> Dot
                    │   │           │   │   ├── <119> FunctionCall [return_nested_struct]
                    │   │           │   │   ╰── ptr
                    │   │           │   ╰── y
                    │   │           ╰── <125> Constant Int [13]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <128> Constant Int [4]
                    ├── <141> Assign [=]
                    │   ├── <138> Arrow
                    │   │   ├── <136> Dot
                    │   │   │   ├── <134> FunctionCall [return_nested_struct]
                    │   │   │   ╰── ptr
                    │   │   ╰── x
                    │   ╰── <140> Constant Int [70]
                    ├── <151> Assign [=]
                    │   ├── <148> Arrow
                    │   │   ├── <146> Dot
                    │   │   │   ├── <144> FunctionCall [return_nested_struct]
                    │   │   │   ╰── ptr
                    │   │   ╰── y
                    │   ╰── <150> Constant Int [71]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <172>  [||]
                    │   │       ├── <161>  [!=]
                    │   │       │   ├── <158> Arrow
                    │   │       │   │   ├── <156> Dot
                    │   │       │   │   │   ├── <154> FunctionCall [return_nested_struct]
                    │   │       │   │   │   ╰── ptr
                    │   │       │   │   ╰── x
                    │   │       │   ╰── <160> Constant Int [70]
                    │   │       ╰── <171>  [!=]
                    │   │           ├── <168> Arrow
                    │   │           │   ├── <166> Dot
                    │   │           │   │   ├── <164> FunctionCall [return_nested_struct]
                    │   │           │   │   ╰── ptr
                    │   │           │   ╰── y
                    │   │           ╰── <170> Constant Int [71]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <173> Constant Int [5]
                    ╰── Return
                        ╰── <178> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_missing_retval() {
    let src = r#"
        struct big {
            char arr[25];
        };
        struct big missing_return_value(int *i);
        struct big missing_return_value(int *i) {
            *i = 10;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [big]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 25
            │               ╰── Char
            ├── Function [missing_return_value]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Int
            ╰── Function [missing_return_value]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── i
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Int
                ╰── Body
                    ╰── <38> Assign [=]
                        ├── <35> Dereference
                        │   ╰── <34> Var [i]
                        ╰── <37> Constant Int [10]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_missing_retval_client() {
    let src = r#"
        struct big {
            char arr[25];
        };
        struct big missing_return_value(int *i);
        
        int main(void) {
            int array[4] = {1, 2, 3, 4};
            missing_return_value(array + 2);
            return array[2] == 10;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [big]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 25
            │               ╰── Char
            ├── Function [missing_return_value]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── array
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <33> Constant Int [1]
                    │           ├── <35> Constant Int [2]
                    │           ├── <37> Constant Int [3]
                    │           ╰── <39> Constant Int [4]
                    ├── <49> FunctionCall [missing_return_value]
                    │   ╰── <48>  [+]
                    │       ├── <45> Var [array]
                    │       ╰── <47> Constant Int [2]
                    ╰── Return
                        ╰── <57>  [==]
                            ├── <54> Subscript
                            │   ├── <52> Var [array]
                            │   ╰── <53> Constant Int [2]
                            ╰── <56> Constant Int [10]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_return_calling_conventions() {
    let src = r#"
        
        int strcmp(char *s1, char *s2);
        int strncmp(char *s1, char *s2, unsigned long n);
        struct one_int {
            int i;
            char c;
        };
        struct one_int_exactly {
            unsigned long l;
        };
        struct two_ints {
            char c;
            int arr[3];
        };
        struct two_ints_nested {
            struct one_int a;
            struct one_int b;
        };
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct one_xmm {
            double d;
        };
        struct two_xmm {
            double d[2];
        };
        struct int_and_xmm {
            char c;
            double d;
        };
        struct xmm_and_int {
            struct one_xmm dbl;
            char c[3];
        };
        struct odd_size {
            char arr[5];
        };
        struct memory {
            double d;
            char c[3];
            long l;
            int i;
        };
        struct one_int return_int_struct(void);
        struct twelve_bytes return_two_int_struct(void);
        struct one_xmm return_double_struct(void);
        struct two_xmm return_two_double_struct(void);
        struct xmm_and_int return_mixed(void);
        struct int_and_xmm return_mixed2(void);
        struct memory return_on_stack(void);
        struct memory pass_and_return_regs(int i, double d, struct int_and_xmm strct,
                                           int c, struct two_ints t_i, long l,
                                           struct one_int_exactly o_i_e, int c2);
        
        struct one_int return_int_struct(void) {
            struct one_int retval = {1, 2};
            return retval;
        }
        struct twelve_bytes return_two_int_struct(void) {
            struct twelve_bytes retval = {10, "12345678"};
            return retval;
        }
        struct one_xmm return_double_struct(void) {
            struct one_xmm retval = {100.625};
            return retval;
        }
        struct two_xmm return_two_double_struct(void) {
            struct two_xmm retval = {{8.8, 7.8}};
            return retval;
        }
        struct xmm_and_int return_mixed(void) {
            struct xmm_and_int retval = {{10.0}, "ab"};
            return retval;
        }
        struct int_and_xmm return_mixed2(void) {
            struct int_and_xmm retval = {127, 34e43};
            return retval;
        }
        struct memory return_on_stack(void) {
            struct memory retval = {1.25, "xy", 100l, 44};
            return retval;
        }
        int leaf_call(struct two_ints t_i, int c, double d) {
            if (t_i.c != '_' || t_i.arr[0] != 5 || t_i.arr[1] != 6 || t_i.arr[2] != 7) {
                return 0;
            }
            if (c != 'p' || d != 4.56) {
                return 0;
            }
            return 1;
        }
        struct memory pass_and_return_regs(int i, double d, struct int_and_xmm strct,
                                           int c, struct two_ints t_i, long l,
                                           struct one_int_exactly o_i_e, int c2) {
            char stackbytes[8] = "zyxwvut";
            struct memory retval = {0, {0, 0, 0}, 0, 0};
            if (!leaf_call(t_i, strct.c, strct.d)) {
                retval.i = 1;
                return retval;
            }
            if (i != 6 || d != 4.0 || c != 5 || l != 77 || c2 != 99) {
                retval.i = 2;
                return retval;
            }
            if (o_i_e.l != 567890) {
                retval.i = 3;
                return retval;
            }
            if (strcmp(stackbytes, "zyxwvut")) {
                retval.i = 4;
                return retval;
            }
            retval.l = 100;
            return retval;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [strncmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── n
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [one_int_exactly]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Struct [two_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Struct [two_ints_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Struct [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [one_int]
            ├── Struct [twelve_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [two_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Double
            ├── Struct [int_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [xmm_and_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl
            │   │   ╰── Type
            │   │       ╰── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [odd_size]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [memory]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Function [return_int_struct]
            ├── Function [return_two_int_struct]
            ├── Function [return_double_struct]
            ├── Function [return_two_double_struct]
            ├── Function [return_mixed]
            ├── Function [return_mixed2]
            ├── Function [return_on_stack]
            ├── Function [pass_and_return_regs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── strct
            │       │   ╰── Type
            │       │       ╰── Struct [int_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_i
            │       │   ╰── Type
            │       │       ╰── Struct [two_ints]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── o_i_e
            │       │   ╰── Type
            │       │       ╰── Struct [one_int_exactly]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── c2
            │           ╰── Type
            │               ╰── Int
            ├── Function [return_int_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [one_int]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <252> Constant Int [1]
            │       │           ╰── <254> Constant Int [2]
            │       ╰── Return
            │           ╰── <259> Var [retval]
            ├── Function [return_two_int_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [twelve_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <273> Constant Int [10]
            │       │           ╰── <275> "12345678"
            │       ╰── Return
            │           ╰── <280> Var [retval]
            ├── Function [return_double_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [one_xmm]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <294> Constant Double [+1.00625e2]
            │       ╰── Return
            │           ╰── <299> Var [retval]
            ├── Function [return_two_double_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [two_xmm]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <313> Constant Double [+8.8e0]
            │       │               ╰── <315> Constant Double [+7.8e0]
            │       ╰── Return
            │           ╰── <321> Var [retval]
            ├── Function [return_mixed]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [xmm_and_int]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ╰── <335> Constant Double [+1e1]
            │       │           ╰── <338> "ab"
            │       ╰── Return
            │           ╰── <343> Var [retval]
            ├── Function [return_mixed2]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [int_and_xmm]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <357> Constant Int [127]
            │       │           ╰── <359> Constant Double [+3.4e44]
            │       ╰── Return
            │           ╰── <364> Var [retval]
            ├── Function [return_on_stack]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [memory]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <378> Constant Double [+1.25e0]
            │       │           ├── <380> "xy"
            │       │           ├── <382> Constant Long [100]
            │       │           ╰── <384> Constant Int [44]
            │       ╰── Return
            │           ╰── <389> Var [retval]
            ├── Function [leaf_call]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── t_i
            │   │   │   ╰── Type
            │   │   │       ╰── Struct [two_ints]
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <447>  [||]
            │       │   │       ├── <436>  [||]
            │       │   │       │   ├── <425>  [||]
            │       │   │       │   │   ├── <414>  [!=]
            │       │   │       │   │   │   ├── <411> Dot
            │       │   │       │   │   │   │   ├── <409> Var [t_i]
            │       │   │       │   │   │   │   ╰── c
            │       │   │       │   │   │   ╰── <413> Constant Int [95]
            │       │   │       │   │   ╰── <424>  [!=]
            │       │   │       │   │       ├── <421> Subscript
            │       │   │       │   │       │   ├── <419> Dot
            │       │   │       │   │       │   │   ├── <417> Var [t_i]
            │       │   │       │   │       │   │   ╰── arr
            │       │   │       │   │       │   ╰── <420> Constant Int [0]
            │       │   │       │   │       ╰── <423> Constant Int [5]
            │       │   │       │   ╰── <435>  [!=]
            │       │   │       │       ├── <432> Subscript
            │       │   │       │       │   ├── <430> Dot
            │       │   │       │       │   │   ├── <428> Var [t_i]
            │       │   │       │       │   │   ╰── arr
            │       │   │       │       │   ╰── <431> Constant Int [1]
            │       │   │       │       ╰── <434> Constant Int [6]
            │       │   │       ╰── <446>  [!=]
            │       │   │           ├── <443> Subscript
            │       │   │           │   ├── <441> Dot
            │       │   │           │   │   ├── <439> Var [t_i]
            │       │   │           │   │   ╰── arr
            │       │   │           │   ╰── <442> Constant Int [2]
            │       │   │           ╰── <445> Constant Int [7]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <448> Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <464>  [||]
            │       │   │       ├── <457>  [!=]
            │       │   │       │   ├── <454> Var [c]
            │       │   │       │   ╰── <456> Constant Int [112]
            │       │   │       ╰── <463>  [!=]
            │       │   │           ├── <460> Var [d]
            │       │   │           ╰── <462> Constant Double [+4.56e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <465> Constant Int [0]
            │       ╰── Return
            │           ╰── <470> Constant Int [1]
            ╰── Function [pass_and_return_regs]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── strct
                │   │   ╰── Type
                │   │       ╰── Struct [int_and_xmm]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── t_i
                │   │   ╰── Type
                │   │       ╰── Struct [two_ints]
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── l
                │   │   ╰── Type
                │   │       ╰── Long
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── o_i_e
                │   │   ╰── Type
                │   │       ╰── Struct [one_int_exactly]
                │   ╰── Param
                │       ├── Name
                │       │   ╰── c2
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── stackbytes
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 8
                    │   │       ╰── Char
                    │   ╰── Initializer
                    │       ╰── <513> "zyxwvut"
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── retval
                    │   ├── Type
                    │   │   ╰── Struct [memory]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <520> Constant Int [0]
                    │           ├── Compound
                    │           │   ├── <522> Constant Int [0]
                    │           │   ├── <524> Constant Int [0]
                    │           │   ╰── <526> Constant Int [0]
                    │           ├── <529> Constant Int [0]
                    │           ╰── <531> Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <548> Unary [!]
                    │   │       ╰── <547> FunctionCall [leaf_call]
                    │   │           ├── <538> Var [t_i]
                    │   │           ├── <542> Dot
                    │   │           │   ├── <540> Var [strct]
                    │   │           │   ╰── c
                    │   │           ╰── <546> Dot
                    │   │               ├── <544> Var [strct]
                    │   │               ╰── d
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <555> Assign [=]
                    │           │   ├── <552> Dot
                    │           │   │   ├── <550> Var [retval]
                    │           │   │   ╰── i
                    │           │   ╰── <554> Constant Int [1]
                    │           ╰── Return
                    │               ╰── <558> Var [retval]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <595>  [||]
                    │   │       ├── <588>  [||]
                    │   │       │   ├── <581>  [||]
                    │   │       │   │   ├── <574>  [||]
                    │   │       │   │   │   ├── <567>  [!=]
                    │   │       │   │   │   │   ├── <564> Var [i]
                    │   │       │   │   │   │   ╰── <566> Constant Int [6]
                    │   │       │   │   │   ╰── <573>  [!=]
                    │   │       │   │   │       ├── <570> Var [d]
                    │   │       │   │   │       ╰── <572> Constant Double [+4e0]
                    │   │       │   │   ╰── <580>  [!=]
                    │   │       │   │       ├── <577> Var [c]
                    │   │       │   │       ╰── <579> Constant Int [5]
                    │   │       │   ╰── <587>  [!=]
                    │   │       │       ├── <584> Var [l]
                    │   │       │       ╰── <586> Constant Int [77]
                    │   │       ╰── <594>  [!=]
                    │   │           ├── <591> Var [c2]
                    │   │           ╰── <593> Constant Int [99]
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <602> Assign [=]
                    │           │   ├── <599> Dot
                    │           │   │   ├── <597> Var [retval]
                    │           │   │   ╰── i
                    │           │   ╰── <601> Constant Int [2]
                    │           ╰── Return
                    │               ╰── <605> Var [retval]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <616>  [!=]
                    │   │       ├── <613> Dot
                    │   │       │   ├── <611> Var [o_i_e]
                    │   │       │   ╰── l
                    │   │       ╰── <615> Constant Int [567890]
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <623> Assign [=]
                    │           │   ├── <620> Dot
                    │           │   │   ├── <618> Var [retval]
                    │           │   │   ╰── i
                    │           │   ╰── <622> Constant Int [3]
                    │           ╰── Return
                    │               ╰── <626> Var [retval]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <635> FunctionCall [strcmp]
                    │   │       ├── <633> Var [stackbytes]
                    │   │       ╰── <634> "zyxwvut"
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <642> Assign [=]
                    │           │   ├── <639> Dot
                    │           │   │   ├── <637> Var [retval]
                    │           │   │   ╰── i
                    │           │   ╰── <641> Constant Int [4]
                    │           ╰── Return
                    │               ╰── <645> Var [retval]
                    ├── <656> Assign [=]
                    │   ├── <653> Dot
                    │   │   ├── <651> Var [retval]
                    │   │   ╰── l
                    │   ╰── <655> Constant Int [100]
                    ╰── Return
                        ╰── <659> Var [retval]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_return_calling_conventions_client() {
    let src = r#"
        
        int strcmp(char *s1, char *s2);
        int strncmp(char *s1, char *s2, unsigned long n);
        struct one_int {
            int i;
            char c;
        };
        struct one_int_exactly {
            unsigned long l;
        };
        struct two_ints {
            char c;
            int arr[3];
        };
        struct two_ints_nested {
            struct one_int a;
            struct one_int b;
        };
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct one_xmm {
            double d;
        };
        struct two_xmm {
            double d[2];
        };
        struct int_and_xmm {
            char c;
            double d;
        };
        struct xmm_and_int {
            struct one_xmm dbl;
            char c[3];
        };
        struct odd_size {
            char arr[5];
        };
        struct memory {
            double d;
            char c[3];
            long l;
            int i;
        };
        struct one_int return_int_struct(void);
        struct twelve_bytes return_two_int_struct(void);
        struct one_xmm return_double_struct(void);
        struct two_xmm return_two_double_struct(void);
        struct xmm_and_int return_mixed(void);
        struct int_and_xmm return_mixed2(void);
        struct memory return_on_stack(void);
        struct memory pass_and_return_regs(int i, double d, struct int_and_xmm strct,
                                           int c, struct two_ints t_i, long l,
                                           struct one_int_exactly o_i_e, int c2);
        
        int main(void) {
            struct one_int_exactly one_long = {567890l};
            struct two_ints two_ints = {'_', {5, 6, 7}};
            struct int_and_xmm int_and_xmm = {'p', 4.56};
            struct one_int s1 = return_int_struct();
            if (s1.i != 1 || s1.c != 2) {
                return 1;
            }
            struct twelve_bytes s2 = return_two_int_struct();
            if (s2.i != 10 || strncmp(s2.arr, "12345678", sizeof s2.arr))
                return 2;
            struct one_xmm s3 = return_double_struct();
            if (s3.d != 100.625)
                return 3;
            struct two_xmm s4 = return_two_double_struct();
            if (s4.d[0] != 8.8 || s4.d[1] != 7.8)
                return 4;
            struct xmm_and_int s5 = return_mixed();
            if (s5.dbl.d != 10.0 || strcmp(s5.c, "ab"))
                return 5;
            struct int_and_xmm s6 = return_mixed2();
            if (s6.c != 127 || s6.d != 34e43)
                return 6;
            struct memory s7 = return_on_stack();
            if (s7.d != 1.25 || strcmp(s7.c, "xy") || s7.l != 100l || s7.i != 44)
                return 7;
            s7 = pass_and_return_regs(6, 4.0, int_and_xmm, 5, two_ints, 77, one_long,
                                      99);
            if (s7.d || s7.c[0] || s7.c[1] || s7.c[2])
                return 8;
            if (s7.i)
                return 9;
            if (s7.l != 100)
                return 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [strncmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── n
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Struct [one_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Char
            ├── Struct [one_int_exactly]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Unsigned Long
            ├── Struct [two_ints]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Struct [two_ints_nested]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Struct [one_int]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Struct [one_int]
            ├── Struct [twelve_bytes]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── i
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Char
            ├── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [two_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Double
            ├── Struct [int_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Struct [xmm_and_int]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── dbl
            │   │   ╰── Type
            │   │       ╰── Struct [one_xmm]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── c
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Char
            ├── Struct [odd_size]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Char
            ├── Struct [memory]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Char
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── i
            │       ╰── Type
            │           ╰── Int
            ├── Function [return_int_struct]
            ├── Function [return_two_int_struct]
            ├── Function [return_double_struct]
            ├── Function [return_two_double_struct]
            ├── Function [return_mixed]
            ├── Function [return_mixed2]
            ├── Function [return_on_stack]
            ├── Function [pass_and_return_regs]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── strct
            │       │   ╰── Type
            │       │       ╰── Struct [int_and_xmm]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── t_i
            │       │   ╰── Type
            │       │       ╰── Struct [two_ints]
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── o_i_e
            │       │   ╰── Type
            │       │       ╰── Struct [one_int_exactly]
            │       ╰── Param
            │           ├── Name
            │           │   ╰── c2
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── one_long
                    │   ├── Type
                    │   │   ╰── Struct [one_int_exactly]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── <251> Constant Long [567890]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── two_ints
                    │   ├── Type
                    │   │   ╰── Struct [two_ints]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <259> Constant Int [95]
                    │           ╰── Compound
                    │               ├── <261> Constant Int [5]
                    │               ├── <263> Constant Int [6]
                    │               ╰── <265> Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── int_and_xmm
                    │   ├── Type
                    │   │   ╰── Struct [int_and_xmm]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <274> Constant Int [112]
                    │           ╰── <276> Constant Double [+4.56e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s1
                    │   ├── Type
                    │   │   ╰── Struct [one_int]
                    │   ╰── Initializer
                    │       ╰── <285> FunctionCall [return_int_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <303>  [||]
                    │   │       ├── <294>  [!=]
                    │   │       │   ├── <291> Dot
                    │   │       │   │   ├── <289> Var [s1]
                    │   │       │   │   ╰── i
                    │   │       │   ╰── <293> Constant Int [1]
                    │   │       ╰── <302>  [!=]
                    │   │           ├── <299> Dot
                    │   │           │   ├── <297> Var [s1]
                    │   │           │   ╰── c
                    │   │           ╰── <301> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <304> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s2
                    │   ├── Type
                    │   │   ╰── Struct [twelve_bytes]
                    │   ╰── Initializer
                    │       ╰── <314> FunctionCall [return_two_int_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <337>  [||]
                    │   │       ├── <323>  [!=]
                    │   │       │   ├── <320> Dot
                    │   │       │   │   ├── <318> Var [s2]
                    │   │       │   │   ╰── i
                    │   │       │   ╰── <322> Constant Int [10]
                    │   │       ╰── <336> FunctionCall [strncmp]
                    │   │           ├── <329> Dot
                    │   │           │   ├── <327> Var [s2]
                    │   │           │   ╰── arr
                    │   │           ├── <330> "12345678"
                    │   │           ╰── <335> SizeOfExpr
                    │   │               ╰── <334> Dot
                    │   │                   ├── <332> Var [s2]
                    │   │                   ╰── arr
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <338> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s3
                    │   ├── Type
                    │   │   ╰── Struct [one_xmm]
                    │   ╰── Initializer
                    │       ╰── <346> FunctionCall [return_double_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <355>  [!=]
                    │   │       ├── <352> Dot
                    │   │       │   ├── <350> Var [s3]
                    │   │       │   ╰── d
                    │   │       ╰── <354> Constant Double [+1.00625e2]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <356> Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s4
                    │   ├── Type
                    │   │   ╰── Struct [two_xmm]
                    │   ╰── Initializer
                    │       ╰── <364> FunctionCall [return_two_double_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <386>  [||]
                    │   │       ├── <375>  [!=]
                    │   │       │   ├── <372> Subscript
                    │   │       │   │   ├── <370> Dot
                    │   │       │   │   │   ├── <368> Var [s4]
                    │   │       │   │   │   ╰── d
                    │   │       │   │   ╰── <371> Constant Int [0]
                    │   │       │   ╰── <374> Constant Double [+8.8e0]
                    │   │       ╰── <385>  [!=]
                    │   │           ├── <382> Subscript
                    │   │           │   ├── <380> Dot
                    │   │           │   │   ├── <378> Var [s4]
                    │   │           │   │   ╰── d
                    │   │           │   ╰── <381> Constant Int [1]
                    │   │           ╰── <384> Constant Double [+7.8e0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <387> Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s5
                    │   ├── Type
                    │   │   ╰── Struct [xmm_and_int]
                    │   ╰── Initializer
                    │       ╰── <395> FunctionCall [return_mixed]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <415>  [||]
                    │   │       ├── <406>  [!=]
                    │   │       │   ├── <403> Dot
                    │   │       │   │   ├── <401> Dot
                    │   │       │   │   │   ├── <399> Var [s5]
                    │   │       │   │   │   ╰── dbl
                    │   │       │   │   ╰── d
                    │   │       │   ╰── <405> Constant Double [+1e1]
                    │   │       ╰── <414> FunctionCall [strcmp]
                    │   │           ├── <412> Dot
                    │   │           │   ├── <410> Var [s5]
                    │   │           │   ╰── c
                    │   │           ╰── <413> "ab"
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <416> Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s6
                    │   ├── Type
                    │   │   ╰── Struct [int_and_xmm]
                    │   ╰── Initializer
                    │       ╰── <424> FunctionCall [return_mixed2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <442>  [||]
                    │   │       ├── <433>  [!=]
                    │   │       │   ├── <430> Dot
                    │   │       │   │   ├── <428> Var [s6]
                    │   │       │   │   ╰── c
                    │   │       │   ╰── <432> Constant Int [127]
                    │   │       ╰── <441>  [!=]
                    │   │           ├── <438> Dot
                    │   │           │   ├── <436> Var [s6]
                    │   │           │   ╰── d
                    │   │           ╰── <440> Constant Double [+3.4e44]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <443> Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── s7
                    │   ├── Type
                    │   │   ╰── Struct [memory]
                    │   ╰── Initializer
                    │       ╰── <451> FunctionCall [return_on_stack]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <487>  [||]
                    │   │       ├── <478>  [||]
                    │   │       │   ├── <469>  [||]
                    │   │       │   │   ├── <460>  [!=]
                    │   │       │   │   │   ├── <457> Dot
                    │   │       │   │   │   │   ├── <455> Var [s7]
                    │   │       │   │   │   │   ╰── d
                    │   │       │   │   │   ╰── <459> Constant Double [+1.25e0]
                    │   │       │   │   ╰── <468> FunctionCall [strcmp]
                    │   │       │   │       ├── <466> Dot
                    │   │       │   │       │   ├── <464> Var [s7]
                    │   │       │   │       │   ╰── c
                    │   │       │   │       ╰── <467> "xy"
                    │   │       │   ╰── <477>  [!=]
                    │   │       │       ├── <474> Dot
                    │   │       │       │   ├── <472> Var [s7]
                    │   │       │       │   ╰── l
                    │   │       │       ╰── <476> Constant Long [100]
                    │   │       ╰── <486>  [!=]
                    │   │           ├── <483> Dot
                    │   │           │   ├── <481> Var [s7]
                    │   │           │   ╰── i
                    │   │           ╰── <485> Constant Int [44]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <488> Constant Int [7]
                    ├── <507> Assign [=]
                    │   ├── <492> Var [s7]
                    │   ╰── <506> FunctionCall [pass_and_return_regs]
                    │       ├── <495> Constant Int [6]
                    │       ├── <496> Constant Double [+4e0]
                    │       ├── <498> Var [int_and_xmm]
                    │       ├── <499> Constant Int [5]
                    │       ├── <501> Var [two_ints]
                    │       ├── <502> Constant Int [77]
                    │       ├── <504> Var [one_long]
                    │       ╰── <505> Constant Int [99]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <536>  [||]
                    │   │       ├── <528>  [||]
                    │   │       │   ├── <520>  [||]
                    │   │       │   │   ├── <512> Dot
                    │   │       │   │   │   ├── <510> Var [s7]
                    │   │       │   │   │   ╰── d
                    │   │       │   │   ╰── <519> Subscript
                    │   │       │   │       ├── <517> Dot
                    │   │       │   │       │   ├── <515> Var [s7]
                    │   │       │   │       │   ╰── c
                    │   │       │   │       ╰── <518> Constant Int [0]
                    │   │       │   ╰── <527> Subscript
                    │   │       │       ├── <525> Dot
                    │   │       │       │   ├── <523> Var [s7]
                    │   │       │       │   ╰── c
                    │   │       │       ╰── <526> Constant Int [1]
                    │   │       ╰── <535> Subscript
                    │   │           ├── <533> Dot
                    │   │           │   ├── <531> Var [s7]
                    │   │           │   ╰── c
                    │   │           ╰── <534> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <537> Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <543> Dot
                    │   │       ├── <541> Var [s7]
                    │   │       ╰── i
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <544> Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <553>  [!=]
                    │   │       ├── <550> Dot
                    │   │       │   ├── <548> Var [s7]
                    │   │       │   ╰── l
                    │   │       ╰── <552> Constant Int [100]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <554> Constant Int [10]
                    ╰── Return
                        ╰── <557> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_retval_struct_sizes() {
    let src = r#"
        struct bytesize1 {
            unsigned char arr[1];
        };
        extern struct bytesize1 globvar_1;
        struct bytesize1 fun1(void);
        struct bytesize2 {
            unsigned char arr[2];
        };
        extern struct bytesize2 globvar_2;
        struct bytesize2 fun2(void);
        struct bytesize3 {
            unsigned char arr[3];
        };
        extern struct bytesize3 globvar_3;
        struct bytesize3 fun3(void);
        struct bytesize4 {
            unsigned char arr[4];
        };
        extern struct bytesize4 globvar_4;
        struct bytesize4 fun4(void);
        struct bytesize5 {
            unsigned char arr[5];
        };
        extern struct bytesize5 globvar_5;
        struct bytesize5 fun5(void);
        struct bytesize6 {
            unsigned char arr[6];
        };
        extern struct bytesize6 globvar_6;
        struct bytesize6 fun6(void);
        struct bytesize7 {
            unsigned char arr[7];
        };
        extern struct bytesize7 globvar_7;
        struct bytesize7 fun7(void);
        struct bytesize8 {
            unsigned char arr[8];
        };
        extern struct bytesize8 globvar_8;
        struct bytesize8 fun8(void);
        struct bytesize9 {
            unsigned char arr[9];
        };
        extern struct bytesize9 globvar_9;
        struct bytesize9 fun9(void);
        struct bytesize10 {
            unsigned char arr[10];
        };
        extern struct bytesize10 globvar_10;
        struct bytesize10 fun10(void);
        struct bytesize11 {
            unsigned char arr[11];
        };
        extern struct bytesize11 globvar_11;
        struct bytesize11 fun11(void);
        struct bytesize12 {
            unsigned char arr[12];
        };
        extern struct bytesize12 globvar_12;
        struct bytesize12 fun12(void);
        struct bytesize13 {
            unsigned char arr[13];
        };
        extern struct bytesize13 globvar_13;
        struct bytesize13 fun13(void);
        struct bytesize14 {
            unsigned char arr[14];
        };
        extern struct bytesize14 globvar_14;
        struct bytesize14 fun14(void);
        struct bytesize15 {
            unsigned char arr[15];
        };
        extern struct bytesize15 globvar_15;
        struct bytesize15 fun15(void);
        struct bytesize16 {
            unsigned char arr[16];
        };
        extern struct bytesize16 globvar_16;
        struct bytesize16 fun16(void);
        struct bytesize17 {
            unsigned char arr[17];
        };
        extern struct bytesize17 globvar_17;
        struct bytesize17 fun17(void);
        struct bytesize18 {
            unsigned char arr[18];
        };
        extern struct bytesize18 globvar_18;
        struct bytesize18 fun18(void);
        struct bytesize19 {
            unsigned char arr[19];
        };
        extern struct bytesize19 globvar_19;
        struct bytesize19 fun19(void);
        struct bytesize20 {
            unsigned char arr[20];
        };
        extern struct bytesize20 globvar_20;
        struct bytesize20 fun20(void);
        struct bytesize21 {
            unsigned char arr[21];
        };
        extern struct bytesize21 globvar_21;
        struct bytesize21 fun21(void);
        struct bytesize22 {
            unsigned char arr[22];
        };
        extern struct bytesize22 globvar_22;
        struct bytesize22 fun22(void);
        struct bytesize23 {
            unsigned char arr[23];
        };
        extern struct bytesize23 globvar_23;
        struct bytesize23 fun23(void);
        struct bytesize24 {
            unsigned char arr[24];
        };
        extern struct bytesize24 globvar_24;
        struct bytesize24 fun24(void);
        
        struct bytesize1 fun1(void) {
            return globvar_1;
        }
        struct bytesize2 fun2(void) {
            return globvar_2;
        }
        struct bytesize3 fun3(void) {
            return globvar_3;
        }
        struct bytesize4 fun4(void) {
            return globvar_4;
        }
        struct bytesize5 fun5(void) {
            return globvar_5;
        }
        struct bytesize6 fun6(void) {
            return globvar_6;
        }
        struct bytesize7 fun7(void) {
            return globvar_7;
        }
        struct bytesize8 fun8(void) {
            return globvar_8;
        }
        struct bytesize9 fun9(void) {
            return globvar_9;
        }
        struct bytesize10 fun10(void) {
            return globvar_10;
        }
        struct bytesize11 fun11(void) {
            return globvar_11;
        }
        struct bytesize12 fun12(void) {
            return globvar_12;
        }
        struct bytesize13 fun13(void) {
            return globvar_13;
        }
        struct bytesize14 fun14(void) {
            return globvar_14;
        }
        struct bytesize15 fun15(void) {
            return globvar_15;
        }
        struct bytesize16 fun16(void) {
            return globvar_16;
        }
        struct bytesize17 fun17(void) {
            return globvar_17;
        }
        struct bytesize18 fun18(void) {
            return globvar_18;
        }
        struct bytesize19 fun19(void) {
            return globvar_19;
        }
        struct bytesize20 fun20(void) {
            return globvar_20;
        }
        struct bytesize21 fun21(void) {
            return globvar_21;
        }
        struct bytesize22 fun22(void) {
            return globvar_22;
        }
        struct bytesize23 fun23(void) {
            return globvar_23;
        }
        struct bytesize24 fun24(void) {
            return globvar_24;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [bytesize1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_1
            │   ├── Type
            │   │   ╰── Struct [bytesize1]
            │   ╰── Extern
            ├── Function [fun1]
            ├── Struct [bytesize2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_2
            │   ├── Type
            │   │   ╰── Struct [bytesize2]
            │   ╰── Extern
            ├── Function [fun2]
            ├── Struct [bytesize3]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_3
            │   ├── Type
            │   │   ╰── Struct [bytesize3]
            │   ╰── Extern
            ├── Function [fun3]
            ├── Struct [bytesize4]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 4
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_4
            │   ├── Type
            │   │   ╰── Struct [bytesize4]
            │   ╰── Extern
            ├── Function [fun4]
            ├── Struct [bytesize5]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_5
            │   ├── Type
            │   │   ╰── Struct [bytesize5]
            │   ╰── Extern
            ├── Function [fun5]
            ├── Struct [bytesize6]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 6
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_6
            │   ├── Type
            │   │   ╰── Struct [bytesize6]
            │   ╰── Extern
            ├── Function [fun6]
            ├── Struct [bytesize7]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 7
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_7
            │   ├── Type
            │   │   ╰── Struct [bytesize7]
            │   ╰── Extern
            ├── Function [fun7]
            ├── Struct [bytesize8]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_8
            │   ├── Type
            │   │   ╰── Struct [bytesize8]
            │   ╰── Extern
            ├── Function [fun8]
            ├── Struct [bytesize9]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 9
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_9
            │   ├── Type
            │   │   ╰── Struct [bytesize9]
            │   ╰── Extern
            ├── Function [fun9]
            ├── Struct [bytesize10]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_10
            │   ├── Type
            │   │   ╰── Struct [bytesize10]
            │   ╰── Extern
            ├── Function [fun10]
            ├── Struct [bytesize11]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 11
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_11
            │   ├── Type
            │   │   ╰── Struct [bytesize11]
            │   ╰── Extern
            ├── Function [fun11]
            ├── Struct [bytesize12]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 12
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_12
            │   ├── Type
            │   │   ╰── Struct [bytesize12]
            │   ╰── Extern
            ├── Function [fun12]
            ├── Struct [bytesize13]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 13
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_13
            │   ├── Type
            │   │   ╰── Struct [bytesize13]
            │   ╰── Extern
            ├── Function [fun13]
            ├── Struct [bytesize14]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 14
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_14
            │   ├── Type
            │   │   ╰── Struct [bytesize14]
            │   ╰── Extern
            ├── Function [fun14]
            ├── Struct [bytesize15]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 15
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_15
            │   ├── Type
            │   │   ╰── Struct [bytesize15]
            │   ╰── Extern
            ├── Function [fun15]
            ├── Struct [bytesize16]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 16
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_16
            │   ├── Type
            │   │   ╰── Struct [bytesize16]
            │   ╰── Extern
            ├── Function [fun16]
            ├── Struct [bytesize17]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 17
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_17
            │   ├── Type
            │   │   ╰── Struct [bytesize17]
            │   ╰── Extern
            ├── Function [fun17]
            ├── Struct [bytesize18]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 18
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_18
            │   ├── Type
            │   │   ╰── Struct [bytesize18]
            │   ╰── Extern
            ├── Function [fun18]
            ├── Struct [bytesize19]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_19
            │   ├── Type
            │   │   ╰── Struct [bytesize19]
            │   ╰── Extern
            ├── Function [fun19]
            ├── Struct [bytesize20]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 20
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_20
            │   ├── Type
            │   │   ╰── Struct [bytesize20]
            │   ╰── Extern
            ├── Function [fun20]
            ├── Struct [bytesize21]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 21
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_21
            │   ├── Type
            │   │   ╰── Struct [bytesize21]
            │   ╰── Extern
            ├── Function [fun21]
            ├── Struct [bytesize22]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 22
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_22
            │   ├── Type
            │   │   ╰── Struct [bytesize22]
            │   ╰── Extern
            ├── Function [fun22]
            ├── Struct [bytesize23]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 23
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_23
            │   ├── Type
            │   │   ╰── Struct [bytesize23]
            │   ╰── Extern
            ├── Function [fun23]
            ├── Struct [bytesize24]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 24
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_24
            │   ├── Type
            │   │   ╰── Struct [bytesize24]
            │   ╰── Extern
            ├── Function [fun24]
            ├── Function [fun1]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <536> Var [globvar_1]
            ├── Function [fun2]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <547> Var [globvar_2]
            ├── Function [fun3]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <558> Var [globvar_3]
            ├── Function [fun4]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <569> Var [globvar_4]
            ├── Function [fun5]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <580> Var [globvar_5]
            ├── Function [fun6]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <591> Var [globvar_6]
            ├── Function [fun7]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <602> Var [globvar_7]
            ├── Function [fun8]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <613> Var [globvar_8]
            ├── Function [fun9]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <624> Var [globvar_9]
            ├── Function [fun10]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <635> Var [globvar_10]
            ├── Function [fun11]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <646> Var [globvar_11]
            ├── Function [fun12]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <657> Var [globvar_12]
            ├── Function [fun13]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <668> Var [globvar_13]
            ├── Function [fun14]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <679> Var [globvar_14]
            ├── Function [fun15]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <690> Var [globvar_15]
            ├── Function [fun16]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <701> Var [globvar_16]
            ├── Function [fun17]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <712> Var [globvar_17]
            ├── Function [fun18]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <723> Var [globvar_18]
            ├── Function [fun19]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <734> Var [globvar_19]
            ├── Function [fun20]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <745> Var [globvar_20]
            ├── Function [fun21]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <756> Var [globvar_21]
            ├── Function [fun22]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <767> Var [globvar_22]
            ├── Function [fun23]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <778> Var [globvar_23]
            ╰── Function [fun24]
                ╰── Body
                    ╰── Return
                        ╰── <789> Var [globvar_24]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_libraries_retval_struct_sizes_client() {
    let src = r#"
        
        struct bytesize1 {
            unsigned char arr[1];
        };
        extern struct bytesize1 globvar_1;
        struct bytesize1 fun1(void);
        struct bytesize2 {
            unsigned char arr[2];
        };
        extern struct bytesize2 globvar_2;
        struct bytesize2 fun2(void);
        struct bytesize3 {
            unsigned char arr[3];
        };
        extern struct bytesize3 globvar_3;
        struct bytesize3 fun3(void);
        struct bytesize4 {
            unsigned char arr[4];
        };
        extern struct bytesize4 globvar_4;
        struct bytesize4 fun4(void);
        struct bytesize5 {
            unsigned char arr[5];
        };
        extern struct bytesize5 globvar_5;
        struct bytesize5 fun5(void);
        struct bytesize6 {
            unsigned char arr[6];
        };
        extern struct bytesize6 globvar_6;
        struct bytesize6 fun6(void);
        struct bytesize7 {
            unsigned char arr[7];
        };
        extern struct bytesize7 globvar_7;
        struct bytesize7 fun7(void);
        struct bytesize8 {
            unsigned char arr[8];
        };
        extern struct bytesize8 globvar_8;
        struct bytesize8 fun8(void);
        struct bytesize9 {
            unsigned char arr[9];
        };
        extern struct bytesize9 globvar_9;
        struct bytesize9 fun9(void);
        struct bytesize10 {
            unsigned char arr[10];
        };
        extern struct bytesize10 globvar_10;
        struct bytesize10 fun10(void);
        struct bytesize11 {
            unsigned char arr[11];
        };
        extern struct bytesize11 globvar_11;
        struct bytesize11 fun11(void);
        struct bytesize12 {
            unsigned char arr[12];
        };
        extern struct bytesize12 globvar_12;
        struct bytesize12 fun12(void);
        struct bytesize13 {
            unsigned char arr[13];
        };
        extern struct bytesize13 globvar_13;
        struct bytesize13 fun13(void);
        struct bytesize14 {
            unsigned char arr[14];
        };
        extern struct bytesize14 globvar_14;
        struct bytesize14 fun14(void);
        struct bytesize15 {
            unsigned char arr[15];
        };
        extern struct bytesize15 globvar_15;
        struct bytesize15 fun15(void);
        struct bytesize16 {
            unsigned char arr[16];
        };
        extern struct bytesize16 globvar_16;
        struct bytesize16 fun16(void);
        struct bytesize17 {
            unsigned char arr[17];
        };
        extern struct bytesize17 globvar_17;
        struct bytesize17 fun17(void);
        struct bytesize18 {
            unsigned char arr[18];
        };
        extern struct bytesize18 globvar_18;
        struct bytesize18 fun18(void);
        struct bytesize19 {
            unsigned char arr[19];
        };
        extern struct bytesize19 globvar_19;
        struct bytesize19 fun19(void);
        struct bytesize20 {
            unsigned char arr[20];
        };
        extern struct bytesize20 globvar_20;
        struct bytesize20 fun20(void);
        struct bytesize21 {
            unsigned char arr[21];
        };
        extern struct bytesize21 globvar_21;
        struct bytesize21 fun21(void);
        struct bytesize22 {
            unsigned char arr[22];
        };
        extern struct bytesize22 globvar_22;
        struct bytesize22 fun22(void);
        struct bytesize23 {
            unsigned char arr[23];
        };
        extern struct bytesize23 globvar_23;
        struct bytesize23 fun23(void);
        struct bytesize24 {
            unsigned char arr[24];
        };
        extern struct bytesize24 globvar_24;
        struct bytesize24 fun24(void);
        int memcmp(void *s1, void *s2, unsigned long n);
        int main(void) {
            struct bytesize1 s1 = fun1();
            if (memcmp(&s1, &globvar_1, sizeof s1)) {
                return 1;
            }
            struct bytesize2 s2 = fun2();
            if (memcmp(&s2, &globvar_2, sizeof s2)) {
                return 2;
            }
            struct bytesize3 s3 = fun3();
            if (memcmp(&s3, &globvar_3, sizeof s3)) {
                return 3;
            }
            struct bytesize4 s4 = fun4();
            if (memcmp(&s4, &globvar_4, sizeof s4)) {
                return 4;
            }
            struct bytesize5 s5 = fun5();
            if (memcmp(&s5, &globvar_5, sizeof s5)) {
                return 5;
            }
            struct bytesize6 s6 = fun6();
            if (memcmp(&s6, &globvar_6, sizeof s6)) {
                return 6;
            }
            struct bytesize7 s7 = fun7();
            if (memcmp(&s7, &globvar_7, sizeof s7)) {
                return 7;
            }
            struct bytesize8 s8 = fun8();
            if (memcmp(&s8, &globvar_8, sizeof s8)) {
                return 8;
            }
            struct bytesize9 s9 = fun9();
            if (memcmp(&s9, &globvar_9, sizeof s9)) {
                return 9;
            }
            struct bytesize10 s10 = fun10();
            if (memcmp(&s10, &globvar_10, sizeof s10)) {
                return 10;
            }
            struct bytesize11 s11 = fun11();
            if (memcmp(&s11, &globvar_11, sizeof s11)) {
                return 11;
            }
            struct bytesize12 s12 = fun12();
            if (memcmp(&s12, &globvar_12, sizeof s12)) {
                return 12;
            }
            struct bytesize13 s13 = fun13();
            if (memcmp(&s13, &globvar_13, sizeof s13)) {
                return 13;
            }
            struct bytesize14 s14 = fun14();
            if (memcmp(&s14, &globvar_14, sizeof s14)) {
                return 14;
            }
            struct bytesize15 s15 = fun15();
            if (memcmp(&s15, &globvar_15, sizeof s15)) {
                return 15;
            }
            struct bytesize16 s16 = fun16();
            if (memcmp(&s16, &globvar_16, sizeof s16)) {
                return 16;
            }
            struct bytesize17 s17 = fun17();
            if (memcmp(&s17, &globvar_17, sizeof s17)) {
                return 17;
            }
            struct bytesize18 s18 = fun18();
            if (memcmp(&s18, &globvar_18, sizeof s18)) {
                return 18;
            }
            struct bytesize19 s19 = fun19();
            if (memcmp(&s19, &globvar_19, sizeof s19)) {
                return 19;
            }
            struct bytesize20 s20 = fun20();
            if (memcmp(&s20, &globvar_20, sizeof s20)) {
                return 20;
            }
            struct bytesize21 s21 = fun21();
            if (memcmp(&s21, &globvar_21, sizeof s21)) {
                return 21;
            }
            struct bytesize22 s22 = fun22();
            if (memcmp(&s22, &globvar_22, sizeof s22)) {
                return 22;
            }
            struct bytesize23 s23 = fun23();
            if (memcmp(&s23, &globvar_23, sizeof s23)) {
                return 23;
            }
            struct bytesize24 s24 = fun24();
            if (memcmp(&s24, &globvar_24, sizeof s24)) {
                return 24;
            }
            return 0;
        }
        struct bytesize1 globvar_1 = {{0}};
        struct bytesize2 globvar_2 = {{1, 2}};
        struct bytesize3 globvar_3 = {{3, 4, 5}};
        struct bytesize4 globvar_4 = {{6, 7, 8, 9}};
        struct bytesize5 globvar_5 = {{10, 11, 12, 13, 14}};
        struct bytesize6 globvar_6 = {{15, 16, 17, 18, 19, 20}};
        struct bytesize7 globvar_7 = {{21, 22, 23, 24, 25, 26, 27}};
        struct bytesize8 globvar_8 = {{28, 29, 30, 31, 32, 33, 34, 35}};
        struct bytesize9 globvar_9 = {{36, 37, 38, 39, 40, 41, 42, 43, 44}};
        struct bytesize10 globvar_10 = {{45, 46, 47, 48, 49, 50, 51, 52, 53, 54}};
        struct bytesize11 globvar_11 = {{55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65}};
        struct bytesize12 globvar_12 = {
            {66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77}};
        struct bytesize13 globvar_13 = {
            {78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}};
        struct bytesize14 globvar_14 = {
            {91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104}};
        struct bytesize15 globvar_15 = {{105, 106, 107, 108, 109, 110, 111, 112, 113,
                                         114, 115, 116, 117, 118, 119}};
        struct bytesize16 globvar_16 = {{120, 121, 122, 123, 124, 125, 126, 127, 128,
                                         129, 130, 131, 132, 133, 134, 135}};
        struct bytesize17 globvar_17 = {{136, 137, 138, 139, 140, 141, 142, 143, 144,
                                         145, 146, 147, 148, 149, 150, 151, 152}};
        struct bytesize18 globvar_18 = {{153, 154, 155, 156, 157, 158, 159, 160, 161,
                                         162, 163, 164, 165, 166, 167, 168, 169, 170}};
        struct bytesize19 globvar_19 = {{171, 172, 173, 174, 175, 176, 177, 178, 179,
                                         180, 181, 182, 183, 184, 185, 186, 187, 188,
                                         189}};
        struct bytesize20 globvar_20 = {{190, 191, 192, 193, 194, 195, 196,
                                         197, 198, 199, 200, 201, 202, 203,
                                         204, 205, 206, 207, 208, 209}};
        struct bytesize21 globvar_21 = {{210, 211, 212, 213, 214, 215, 216,
                                         217, 218, 219, 220, 221, 222, 223,
                                         224, 225, 226, 227, 228, 229, 230}};
        struct bytesize22 globvar_22 = {{231, 232, 233, 234, 235, 236, 237, 238,
                                         239, 240, 241, 242, 243, 244, 245, 246,
                                         247, 248, 249, 250, 251, 252}};
        struct bytesize23 globvar_23 = {{253, 254, 255, 0, 1, 2, 3, 4,
                                         5, 6, 7, 8, 9, 10, 11, 12,
                                         13, 14, 15, 16, 17, 18, 19}};
        struct bytesize24 globvar_24 = {{20, 21, 22, 23, 24, 25, 26, 27,
                                         28, 29, 30, 31, 32, 33, 34, 35,
                                         36, 37, 38, 39, 40, 41, 42, 43}};
    "#;
    let expected = r#"
        Program
            ├── Struct [bytesize1]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 1
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_1
            │   ├── Type
            │   │   ╰── Struct [bytesize1]
            │   ╰── Extern
            ├── Function [fun1]
            ├── Struct [bytesize2]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 2
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_2
            │   ├── Type
            │   │   ╰── Struct [bytesize2]
            │   ╰── Extern
            ├── Function [fun2]
            ├── Struct [bytesize3]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_3
            │   ├── Type
            │   │   ╰── Struct [bytesize3]
            │   ╰── Extern
            ├── Function [fun3]
            ├── Struct [bytesize4]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 4
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_4
            │   ├── Type
            │   │   ╰── Struct [bytesize4]
            │   ╰── Extern
            ├── Function [fun4]
            ├── Struct [bytesize5]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 5
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_5
            │   ├── Type
            │   │   ╰── Struct [bytesize5]
            │   ╰── Extern
            ├── Function [fun5]
            ├── Struct [bytesize6]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 6
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_6
            │   ├── Type
            │   │   ╰── Struct [bytesize6]
            │   ╰── Extern
            ├── Function [fun6]
            ├── Struct [bytesize7]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 7
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_7
            │   ├── Type
            │   │   ╰── Struct [bytesize7]
            │   ╰── Extern
            ├── Function [fun7]
            ├── Struct [bytesize8]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 8
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_8
            │   ├── Type
            │   │   ╰── Struct [bytesize8]
            │   ╰── Extern
            ├── Function [fun8]
            ├── Struct [bytesize9]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 9
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_9
            │   ├── Type
            │   │   ╰── Struct [bytesize9]
            │   ╰── Extern
            ├── Function [fun9]
            ├── Struct [bytesize10]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_10
            │   ├── Type
            │   │   ╰── Struct [bytesize10]
            │   ╰── Extern
            ├── Function [fun10]
            ├── Struct [bytesize11]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 11
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_11
            │   ├── Type
            │   │   ╰── Struct [bytesize11]
            │   ╰── Extern
            ├── Function [fun11]
            ├── Struct [bytesize12]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 12
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_12
            │   ├── Type
            │   │   ╰── Struct [bytesize12]
            │   ╰── Extern
            ├── Function [fun12]
            ├── Struct [bytesize13]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 13
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_13
            │   ├── Type
            │   │   ╰── Struct [bytesize13]
            │   ╰── Extern
            ├── Function [fun13]
            ├── Struct [bytesize14]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 14
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_14
            │   ├── Type
            │   │   ╰── Struct [bytesize14]
            │   ╰── Extern
            ├── Function [fun14]
            ├── Struct [bytesize15]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 15
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_15
            │   ├── Type
            │   │   ╰── Struct [bytesize15]
            │   ╰── Extern
            ├── Function [fun15]
            ├── Struct [bytesize16]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 16
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_16
            │   ├── Type
            │   │   ╰── Struct [bytesize16]
            │   ╰── Extern
            ├── Function [fun16]
            ├── Struct [bytesize17]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 17
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_17
            │   ├── Type
            │   │   ╰── Struct [bytesize17]
            │   ╰── Extern
            ├── Function [fun17]
            ├── Struct [bytesize18]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 18
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_18
            │   ├── Type
            │   │   ╰── Struct [bytesize18]
            │   ╰── Extern
            ├── Function [fun18]
            ├── Struct [bytesize19]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_19
            │   ├── Type
            │   │   ╰── Struct [bytesize19]
            │   ╰── Extern
            ├── Function [fun19]
            ├── Struct [bytesize20]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 20
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_20
            │   ├── Type
            │   │   ╰── Struct [bytesize20]
            │   ╰── Extern
            ├── Function [fun20]
            ├── Struct [bytesize21]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 21
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_21
            │   ├── Type
            │   │   ╰── Struct [bytesize21]
            │   ╰── Extern
            ├── Function [fun21]
            ├── Struct [bytesize22]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 22
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_22
            │   ├── Type
            │   │   ╰── Struct [bytesize22]
            │   ╰── Extern
            ├── Function [fun22]
            ├── Struct [bytesize23]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 23
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_23
            │   ├── Type
            │   │   ╰── Struct [bytesize23]
            │   ╰── Extern
            ├── Function [fun23]
            ├── Struct [bytesize24]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 24
            │               ╰── Unsigned Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_24
            │   ├── Type
            │   │   ╰── Struct [bytesize24]
            │   ╰── Extern
            ├── Function [fun24]
            ├── Function [memcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Void
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Void
            │       ╰── Param
            │           ├── Name
            │           │   ╰── n
            │           ╰── Type
            │               ╰── Unsigned Long
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize1]
            │       │   ╰── Initializer
            │       │       ╰── <558> FunctionCall [fun1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <571> FunctionCall [memcmp]
            │       │   │       ├── <564> AddressOf
            │       │   │       │   ╰── <563> Var [s1]
            │       │   │       ├── <567> AddressOf
            │       │   │       │   ╰── <566> Var [globvar_1]
            │       │   │       ╰── <570> SizeOfExpr
            │       │   │           ╰── <569> Var [s1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <572> Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s2
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize2]
            │       │   ╰── Initializer
            │       │       ╰── <582> FunctionCall [fun2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <595> FunctionCall [memcmp]
            │       │   │       ├── <588> AddressOf
            │       │   │       │   ╰── <587> Var [s2]
            │       │   │       ├── <591> AddressOf
            │       │   │       │   ╰── <590> Var [globvar_2]
            │       │   │       ╰── <594> SizeOfExpr
            │       │   │           ╰── <593> Var [s2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <596> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s3
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize3]
            │       │   ╰── Initializer
            │       │       ╰── <606> FunctionCall [fun3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <619> FunctionCall [memcmp]
            │       │   │       ├── <612> AddressOf
            │       │   │       │   ╰── <611> Var [s3]
            │       │   │       ├── <615> AddressOf
            │       │   │       │   ╰── <614> Var [globvar_3]
            │       │   │       ╰── <618> SizeOfExpr
            │       │   │           ╰── <617> Var [s3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <620> Constant Int [3]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s4
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize4]
            │       │   ╰── Initializer
            │       │       ╰── <630> FunctionCall [fun4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <643> FunctionCall [memcmp]
            │       │   │       ├── <636> AddressOf
            │       │   │       │   ╰── <635> Var [s4]
            │       │   │       ├── <639> AddressOf
            │       │   │       │   ╰── <638> Var [globvar_4]
            │       │   │       ╰── <642> SizeOfExpr
            │       │   │           ╰── <641> Var [s4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <644> Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s5
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize5]
            │       │   ╰── Initializer
            │       │       ╰── <654> FunctionCall [fun5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <667> FunctionCall [memcmp]
            │       │   │       ├── <660> AddressOf
            │       │   │       │   ╰── <659> Var [s5]
            │       │   │       ├── <663> AddressOf
            │       │   │       │   ╰── <662> Var [globvar_5]
            │       │   │       ╰── <666> SizeOfExpr
            │       │   │           ╰── <665> Var [s5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <668> Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s6
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize6]
            │       │   ╰── Initializer
            │       │       ╰── <678> FunctionCall [fun6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <691> FunctionCall [memcmp]
            │       │   │       ├── <684> AddressOf
            │       │   │       │   ╰── <683> Var [s6]
            │       │   │       ├── <687> AddressOf
            │       │   │       │   ╰── <686> Var [globvar_6]
            │       │   │       ╰── <690> SizeOfExpr
            │       │   │           ╰── <689> Var [s6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <692> Constant Int [6]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s7
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize7]
            │       │   ╰── Initializer
            │       │       ╰── <702> FunctionCall [fun7]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <715> FunctionCall [memcmp]
            │       │   │       ├── <708> AddressOf
            │       │   │       │   ╰── <707> Var [s7]
            │       │   │       ├── <711> AddressOf
            │       │   │       │   ╰── <710> Var [globvar_7]
            │       │   │       ╰── <714> SizeOfExpr
            │       │   │           ╰── <713> Var [s7]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <716> Constant Int [7]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s8
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize8]
            │       │   ╰── Initializer
            │       │       ╰── <726> FunctionCall [fun8]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <739> FunctionCall [memcmp]
            │       │   │       ├── <732> AddressOf
            │       │   │       │   ╰── <731> Var [s8]
            │       │   │       ├── <735> AddressOf
            │       │   │       │   ╰── <734> Var [globvar_8]
            │       │   │       ╰── <738> SizeOfExpr
            │       │   │           ╰── <737> Var [s8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <740> Constant Int [8]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s9
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize9]
            │       │   ╰── Initializer
            │       │       ╰── <750> FunctionCall [fun9]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <763> FunctionCall [memcmp]
            │       │   │       ├── <756> AddressOf
            │       │   │       │   ╰── <755> Var [s9]
            │       │   │       ├── <759> AddressOf
            │       │   │       │   ╰── <758> Var [globvar_9]
            │       │   │       ╰── <762> SizeOfExpr
            │       │   │           ╰── <761> Var [s9]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <764> Constant Int [9]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s10
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize10]
            │       │   ╰── Initializer
            │       │       ╰── <774> FunctionCall [fun10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <787> FunctionCall [memcmp]
            │       │   │       ├── <780> AddressOf
            │       │   │       │   ╰── <779> Var [s10]
            │       │   │       ├── <783> AddressOf
            │       │   │       │   ╰── <782> Var [globvar_10]
            │       │   │       ╰── <786> SizeOfExpr
            │       │   │           ╰── <785> Var [s10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <788> Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s11
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize11]
            │       │   ╰── Initializer
            │       │       ╰── <798> FunctionCall [fun11]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <811> FunctionCall [memcmp]
            │       │   │       ├── <804> AddressOf
            │       │   │       │   ╰── <803> Var [s11]
            │       │   │       ├── <807> AddressOf
            │       │   │       │   ╰── <806> Var [globvar_11]
            │       │   │       ╰── <810> SizeOfExpr
            │       │   │           ╰── <809> Var [s11]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <812> Constant Int [11]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s12
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize12]
            │       │   ╰── Initializer
            │       │       ╰── <822> FunctionCall [fun12]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <835> FunctionCall [memcmp]
            │       │   │       ├── <828> AddressOf
            │       │   │       │   ╰── <827> Var [s12]
            │       │   │       ├── <831> AddressOf
            │       │   │       │   ╰── <830> Var [globvar_12]
            │       │   │       ╰── <834> SizeOfExpr
            │       │   │           ╰── <833> Var [s12]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <836> Constant Int [12]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s13
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize13]
            │       │   ╰── Initializer
            │       │       ╰── <846> FunctionCall [fun13]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <859> FunctionCall [memcmp]
            │       │   │       ├── <852> AddressOf
            │       │   │       │   ╰── <851> Var [s13]
            │       │   │       ├── <855> AddressOf
            │       │   │       │   ╰── <854> Var [globvar_13]
            │       │   │       ╰── <858> SizeOfExpr
            │       │   │           ╰── <857> Var [s13]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <860> Constant Int [13]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s14
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize14]
            │       │   ╰── Initializer
            │       │       ╰── <870> FunctionCall [fun14]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <883> FunctionCall [memcmp]
            │       │   │       ├── <876> AddressOf
            │       │   │       │   ╰── <875> Var [s14]
            │       │   │       ├── <879> AddressOf
            │       │   │       │   ╰── <878> Var [globvar_14]
            │       │   │       ╰── <882> SizeOfExpr
            │       │   │           ╰── <881> Var [s14]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <884> Constant Int [14]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s15
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize15]
            │       │   ╰── Initializer
            │       │       ╰── <894> FunctionCall [fun15]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <907> FunctionCall [memcmp]
            │       │   │       ├── <900> AddressOf
            │       │   │       │   ╰── <899> Var [s15]
            │       │   │       ├── <903> AddressOf
            │       │   │       │   ╰── <902> Var [globvar_15]
            │       │   │       ╰── <906> SizeOfExpr
            │       │   │           ╰── <905> Var [s15]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <908> Constant Int [15]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s16
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize16]
            │       │   ╰── Initializer
            │       │       ╰── <918> FunctionCall [fun16]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <931> FunctionCall [memcmp]
            │       │   │       ├── <924> AddressOf
            │       │   │       │   ╰── <923> Var [s16]
            │       │   │       ├── <927> AddressOf
            │       │   │       │   ╰── <926> Var [globvar_16]
            │       │   │       ╰── <930> SizeOfExpr
            │       │   │           ╰── <929> Var [s16]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <932> Constant Int [16]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s17
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize17]
            │       │   ╰── Initializer
            │       │       ╰── <942> FunctionCall [fun17]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <955> FunctionCall [memcmp]
            │       │   │       ├── <948> AddressOf
            │       │   │       │   ╰── <947> Var [s17]
            │       │   │       ├── <951> AddressOf
            │       │   │       │   ╰── <950> Var [globvar_17]
            │       │   │       ╰── <954> SizeOfExpr
            │       │   │           ╰── <953> Var [s17]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <956> Constant Int [17]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s18
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize18]
            │       │   ╰── Initializer
            │       │       ╰── <966> FunctionCall [fun18]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <979> FunctionCall [memcmp]
            │       │   │       ├── <972> AddressOf
            │       │   │       │   ╰── <971> Var [s18]
            │       │   │       ├── <975> AddressOf
            │       │   │       │   ╰── <974> Var [globvar_18]
            │       │   │       ╰── <978> SizeOfExpr
            │       │   │           ╰── <977> Var [s18]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <980> Constant Int [18]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s19
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize19]
            │       │   ╰── Initializer
            │       │       ╰── <990> FunctionCall [fun19]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1003> FunctionCall [memcmp]
            │       │   │       ├── <996> AddressOf
            │       │   │       │   ╰── <995> Var [s19]
            │       │   │       ├── <999> AddressOf
            │       │   │       │   ╰── <998> Var [globvar_19]
            │       │   │       ╰── <1002> SizeOfExpr
            │       │   │           ╰── <1001> Var [s19]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1004> Constant Int [19]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s20
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize20]
            │       │   ╰── Initializer
            │       │       ╰── <1014> FunctionCall [fun20]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1027> FunctionCall [memcmp]
            │       │   │       ├── <1020> AddressOf
            │       │   │       │   ╰── <1019> Var [s20]
            │       │   │       ├── <1023> AddressOf
            │       │   │       │   ╰── <1022> Var [globvar_20]
            │       │   │       ╰── <1026> SizeOfExpr
            │       │   │           ╰── <1025> Var [s20]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1028> Constant Int [20]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s21
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize21]
            │       │   ╰── Initializer
            │       │       ╰── <1038> FunctionCall [fun21]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1051> FunctionCall [memcmp]
            │       │   │       ├── <1044> AddressOf
            │       │   │       │   ╰── <1043> Var [s21]
            │       │   │       ├── <1047> AddressOf
            │       │   │       │   ╰── <1046> Var [globvar_21]
            │       │   │       ╰── <1050> SizeOfExpr
            │       │   │           ╰── <1049> Var [s21]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1052> Constant Int [21]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s22
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize22]
            │       │   ╰── Initializer
            │       │       ╰── <1062> FunctionCall [fun22]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1075> FunctionCall [memcmp]
            │       │   │       ├── <1068> AddressOf
            │       │   │       │   ╰── <1067> Var [s22]
            │       │   │       ├── <1071> AddressOf
            │       │   │       │   ╰── <1070> Var [globvar_22]
            │       │   │       ╰── <1074> SizeOfExpr
            │       │   │           ╰── <1073> Var [s22]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1076> Constant Int [22]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s23
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize23]
            │       │   ╰── Initializer
            │       │       ╰── <1086> FunctionCall [fun23]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1099> FunctionCall [memcmp]
            │       │   │       ├── <1092> AddressOf
            │       │   │       │   ╰── <1091> Var [s23]
            │       │   │       ├── <1095> AddressOf
            │       │   │       │   ╰── <1094> Var [globvar_23]
            │       │   │       ╰── <1098> SizeOfExpr
            │       │   │           ╰── <1097> Var [s23]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1100> Constant Int [23]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── s24
            │       │   ├── Type
            │       │   │   ╰── Struct [bytesize24]
            │       │   ╰── Initializer
            │       │       ╰── <1110> FunctionCall [fun24]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <1123> FunctionCall [memcmp]
            │       │   │       ├── <1116> AddressOf
            │       │   │       │   ╰── <1115> Var [s24]
            │       │   │       ├── <1119> AddressOf
            │       │   │       │   ╰── <1118> Var [globvar_24]
            │       │   │       ╰── <1122> SizeOfExpr
            │       │   │           ╰── <1121> Var [s24]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <1124> Constant Int [24]
            │       ╰── Return
            │           ╰── <1129> Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_1
            │   ├── Type
            │   │   ╰── Struct [bytesize1]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ╰── <1137> Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_2
            │   ├── Type
            │   │   ╰── Struct [bytesize2]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1146> Constant Int [1]
            │               ╰── <1148> Constant Int [2]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_3
            │   ├── Type
            │   │   ╰── Struct [bytesize3]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1157> Constant Int [3]
            │               ├── <1159> Constant Int [4]
            │               ╰── <1161> Constant Int [5]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_4
            │   ├── Type
            │   │   ╰── Struct [bytesize4]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1170> Constant Int [6]
            │               ├── <1172> Constant Int [7]
            │               ├── <1174> Constant Int [8]
            │               ╰── <1176> Constant Int [9]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_5
            │   ├── Type
            │   │   ╰── Struct [bytesize5]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1185> Constant Int [10]
            │               ├── <1187> Constant Int [11]
            │               ├── <1189> Constant Int [12]
            │               ├── <1191> Constant Int [13]
            │               ╰── <1193> Constant Int [14]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_6
            │   ├── Type
            │   │   ╰── Struct [bytesize6]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1202> Constant Int [15]
            │               ├── <1204> Constant Int [16]
            │               ├── <1206> Constant Int [17]
            │               ├── <1208> Constant Int [18]
            │               ├── <1210> Constant Int [19]
            │               ╰── <1212> Constant Int [20]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_7
            │   ├── Type
            │   │   ╰── Struct [bytesize7]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1221> Constant Int [21]
            │               ├── <1223> Constant Int [22]
            │               ├── <1225> Constant Int [23]
            │               ├── <1227> Constant Int [24]
            │               ├── <1229> Constant Int [25]
            │               ├── <1231> Constant Int [26]
            │               ╰── <1233> Constant Int [27]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_8
            │   ├── Type
            │   │   ╰── Struct [bytesize8]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1242> Constant Int [28]
            │               ├── <1244> Constant Int [29]
            │               ├── <1246> Constant Int [30]
            │               ├── <1248> Constant Int [31]
            │               ├── <1250> Constant Int [32]
            │               ├── <1252> Constant Int [33]
            │               ├── <1254> Constant Int [34]
            │               ╰── <1256> Constant Int [35]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_9
            │   ├── Type
            │   │   ╰── Struct [bytesize9]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1265> Constant Int [36]
            │               ├── <1267> Constant Int [37]
            │               ├── <1269> Constant Int [38]
            │               ├── <1271> Constant Int [39]
            │               ├── <1273> Constant Int [40]
            │               ├── <1275> Constant Int [41]
            │               ├── <1277> Constant Int [42]
            │               ├── <1279> Constant Int [43]
            │               ╰── <1281> Constant Int [44]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_10
            │   ├── Type
            │   │   ╰── Struct [bytesize10]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1290> Constant Int [45]
            │               ├── <1292> Constant Int [46]
            │               ├── <1294> Constant Int [47]
            │               ├── <1296> Constant Int [48]
            │               ├── <1298> Constant Int [49]
            │               ├── <1300> Constant Int [50]
            │               ├── <1302> Constant Int [51]
            │               ├── <1304> Constant Int [52]
            │               ├── <1306> Constant Int [53]
            │               ╰── <1308> Constant Int [54]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_11
            │   ├── Type
            │   │   ╰── Struct [bytesize11]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1317> Constant Int [55]
            │               ├── <1319> Constant Int [56]
            │               ├── <1321> Constant Int [57]
            │               ├── <1323> Constant Int [58]
            │               ├── <1325> Constant Int [59]
            │               ├── <1327> Constant Int [60]
            │               ├── <1329> Constant Int [61]
            │               ├── <1331> Constant Int [62]
            │               ├── <1333> Constant Int [63]
            │               ├── <1335> Constant Int [64]
            │               ╰── <1337> Constant Int [65]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_12
            │   ├── Type
            │   │   ╰── Struct [bytesize12]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1346> Constant Int [66]
            │               ├── <1348> Constant Int [67]
            │               ├── <1350> Constant Int [68]
            │               ├── <1352> Constant Int [69]
            │               ├── <1354> Constant Int [70]
            │               ├── <1356> Constant Int [71]
            │               ├── <1358> Constant Int [72]
            │               ├── <1360> Constant Int [73]
            │               ├── <1362> Constant Int [74]
            │               ├── <1364> Constant Int [75]
            │               ├── <1366> Constant Int [76]
            │               ╰── <1368> Constant Int [77]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_13
            │   ├── Type
            │   │   ╰── Struct [bytesize13]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1377> Constant Int [78]
            │               ├── <1379> Constant Int [79]
            │               ├── <1381> Constant Int [80]
            │               ├── <1383> Constant Int [81]
            │               ├── <1385> Constant Int [82]
            │               ├── <1387> Constant Int [83]
            │               ├── <1389> Constant Int [84]
            │               ├── <1391> Constant Int [85]
            │               ├── <1393> Constant Int [86]
            │               ├── <1395> Constant Int [87]
            │               ├── <1397> Constant Int [88]
            │               ├── <1399> Constant Int [89]
            │               ╰── <1401> Constant Int [90]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_14
            │   ├── Type
            │   │   ╰── Struct [bytesize14]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1410> Constant Int [91]
            │               ├── <1412> Constant Int [92]
            │               ├── <1414> Constant Int [93]
            │               ├── <1416> Constant Int [94]
            │               ├── <1418> Constant Int [95]
            │               ├── <1420> Constant Int [96]
            │               ├── <1422> Constant Int [97]
            │               ├── <1424> Constant Int [98]
            │               ├── <1426> Constant Int [99]
            │               ├── <1428> Constant Int [100]
            │               ├── <1430> Constant Int [101]
            │               ├── <1432> Constant Int [102]
            │               ├── <1434> Constant Int [103]
            │               ╰── <1436> Constant Int [104]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_15
            │   ├── Type
            │   │   ╰── Struct [bytesize15]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1445> Constant Int [105]
            │               ├── <1447> Constant Int [106]
            │               ├── <1449> Constant Int [107]
            │               ├── <1451> Constant Int [108]
            │               ├── <1453> Constant Int [109]
            │               ├── <1455> Constant Int [110]
            │               ├── <1457> Constant Int [111]
            │               ├── <1459> Constant Int [112]
            │               ├── <1461> Constant Int [113]
            │               ├── <1463> Constant Int [114]
            │               ├── <1465> Constant Int [115]
            │               ├── <1467> Constant Int [116]
            │               ├── <1469> Constant Int [117]
            │               ├── <1471> Constant Int [118]
            │               ╰── <1473> Constant Int [119]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_16
            │   ├── Type
            │   │   ╰── Struct [bytesize16]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1482> Constant Int [120]
            │               ├── <1484> Constant Int [121]
            │               ├── <1486> Constant Int [122]
            │               ├── <1488> Constant Int [123]
            │               ├── <1490> Constant Int [124]
            │               ├── <1492> Constant Int [125]
            │               ├── <1494> Constant Int [126]
            │               ├── <1496> Constant Int [127]
            │               ├── <1498> Constant Int [128]
            │               ├── <1500> Constant Int [129]
            │               ├── <1502> Constant Int [130]
            │               ├── <1504> Constant Int [131]
            │               ├── <1506> Constant Int [132]
            │               ├── <1508> Constant Int [133]
            │               ├── <1510> Constant Int [134]
            │               ╰── <1512> Constant Int [135]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_17
            │   ├── Type
            │   │   ╰── Struct [bytesize17]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1521> Constant Int [136]
            │               ├── <1523> Constant Int [137]
            │               ├── <1525> Constant Int [138]
            │               ├── <1527> Constant Int [139]
            │               ├── <1529> Constant Int [140]
            │               ├── <1531> Constant Int [141]
            │               ├── <1533> Constant Int [142]
            │               ├── <1535> Constant Int [143]
            │               ├── <1537> Constant Int [144]
            │               ├── <1539> Constant Int [145]
            │               ├── <1541> Constant Int [146]
            │               ├── <1543> Constant Int [147]
            │               ├── <1545> Constant Int [148]
            │               ├── <1547> Constant Int [149]
            │               ├── <1549> Constant Int [150]
            │               ├── <1551> Constant Int [151]
            │               ╰── <1553> Constant Int [152]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_18
            │   ├── Type
            │   │   ╰── Struct [bytesize18]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1562> Constant Int [153]
            │               ├── <1564> Constant Int [154]
            │               ├── <1566> Constant Int [155]
            │               ├── <1568> Constant Int [156]
            │               ├── <1570> Constant Int [157]
            │               ├── <1572> Constant Int [158]
            │               ├── <1574> Constant Int [159]
            │               ├── <1576> Constant Int [160]
            │               ├── <1578> Constant Int [161]
            │               ├── <1580> Constant Int [162]
            │               ├── <1582> Constant Int [163]
            │               ├── <1584> Constant Int [164]
            │               ├── <1586> Constant Int [165]
            │               ├── <1588> Constant Int [166]
            │               ├── <1590> Constant Int [167]
            │               ├── <1592> Constant Int [168]
            │               ├── <1594> Constant Int [169]
            │               ╰── <1596> Constant Int [170]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_19
            │   ├── Type
            │   │   ╰── Struct [bytesize19]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1605> Constant Int [171]
            │               ├── <1607> Constant Int [172]
            │               ├── <1609> Constant Int [173]
            │               ├── <1611> Constant Int [174]
            │               ├── <1613> Constant Int [175]
            │               ├── <1615> Constant Int [176]
            │               ├── <1617> Constant Int [177]
            │               ├── <1619> Constant Int [178]
            │               ├── <1621> Constant Int [179]
            │               ├── <1623> Constant Int [180]
            │               ├── <1625> Constant Int [181]
            │               ├── <1627> Constant Int [182]
            │               ├── <1629> Constant Int [183]
            │               ├── <1631> Constant Int [184]
            │               ├── <1633> Constant Int [185]
            │               ├── <1635> Constant Int [186]
            │               ├── <1637> Constant Int [187]
            │               ├── <1639> Constant Int [188]
            │               ╰── <1641> Constant Int [189]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_20
            │   ├── Type
            │   │   ╰── Struct [bytesize20]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1650> Constant Int [190]
            │               ├── <1652> Constant Int [191]
            │               ├── <1654> Constant Int [192]
            │               ├── <1656> Constant Int [193]
            │               ├── <1658> Constant Int [194]
            │               ├── <1660> Constant Int [195]
            │               ├── <1662> Constant Int [196]
            │               ├── <1664> Constant Int [197]
            │               ├── <1666> Constant Int [198]
            │               ├── <1668> Constant Int [199]
            │               ├── <1670> Constant Int [200]
            │               ├── <1672> Constant Int [201]
            │               ├── <1674> Constant Int [202]
            │               ├── <1676> Constant Int [203]
            │               ├── <1678> Constant Int [204]
            │               ├── <1680> Constant Int [205]
            │               ├── <1682> Constant Int [206]
            │               ├── <1684> Constant Int [207]
            │               ├── <1686> Constant Int [208]
            │               ╰── <1688> Constant Int [209]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_21
            │   ├── Type
            │   │   ╰── Struct [bytesize21]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1697> Constant Int [210]
            │               ├── <1699> Constant Int [211]
            │               ├── <1701> Constant Int [212]
            │               ├── <1703> Constant Int [213]
            │               ├── <1705> Constant Int [214]
            │               ├── <1707> Constant Int [215]
            │               ├── <1709> Constant Int [216]
            │               ├── <1711> Constant Int [217]
            │               ├── <1713> Constant Int [218]
            │               ├── <1715> Constant Int [219]
            │               ├── <1717> Constant Int [220]
            │               ├── <1719> Constant Int [221]
            │               ├── <1721> Constant Int [222]
            │               ├── <1723> Constant Int [223]
            │               ├── <1725> Constant Int [224]
            │               ├── <1727> Constant Int [225]
            │               ├── <1729> Constant Int [226]
            │               ├── <1731> Constant Int [227]
            │               ├── <1733> Constant Int [228]
            │               ├── <1735> Constant Int [229]
            │               ╰── <1737> Constant Int [230]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_22
            │   ├── Type
            │   │   ╰── Struct [bytesize22]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1746> Constant Int [231]
            │               ├── <1748> Constant Int [232]
            │               ├── <1750> Constant Int [233]
            │               ├── <1752> Constant Int [234]
            │               ├── <1754> Constant Int [235]
            │               ├── <1756> Constant Int [236]
            │               ├── <1758> Constant Int [237]
            │               ├── <1760> Constant Int [238]
            │               ├── <1762> Constant Int [239]
            │               ├── <1764> Constant Int [240]
            │               ├── <1766> Constant Int [241]
            │               ├── <1768> Constant Int [242]
            │               ├── <1770> Constant Int [243]
            │               ├── <1772> Constant Int [244]
            │               ├── <1774> Constant Int [245]
            │               ├── <1776> Constant Int [246]
            │               ├── <1778> Constant Int [247]
            │               ├── <1780> Constant Int [248]
            │               ├── <1782> Constant Int [249]
            │               ├── <1784> Constant Int [250]
            │               ├── <1786> Constant Int [251]
            │               ╰── <1788> Constant Int [252]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar_23
            │   ├── Type
            │   │   ╰── Struct [bytesize23]
            │   ╰── Initializer
            │       ╰── Compound
            │           ╰── Compound
            │               ├── <1797> Constant Int [253]
            │               ├── <1799> Constant Int [254]
            │               ├── <1801> Constant Int [255]
            │               ├── <1803> Constant Int [0]
            │               ├── <1805> Constant Int [1]
            │               ├── <1807> Constant Int [2]
            │               ├── <1809> Constant Int [3]
            │               ├── <1811> Constant Int [4]
            │               ├── <1813> Constant Int [5]
            │               ├── <1815> Constant Int [6]
            │               ├── <1817> Constant Int [7]
            │               ├── <1819> Constant Int [8]
            │               ├── <1821> Constant Int [9]
            │               ├── <1823> Constant Int [10]
            │               ├── <1825> Constant Int [11]
            │               ├── <1827> Constant Int [12]
            │               ├── <1829> Constant Int [13]
            │               ├── <1831> Constant Int [14]
            │               ├── <1833> Constant Int [15]
            │               ├── <1835> Constant Int [16]
            │               ├── <1837> Constant Int [17]
            │               ├── <1839> Constant Int [18]
            │               ╰── <1841> Constant Int [19]
            ╰── VarDeclaration
                ├── Name
                │   ╰── globvar_24
                ├── Type
                │   ╰── Struct [bytesize24]
                ╰── Initializer
                    ╰── Compound
                        ╰── Compound
                            ├── <1850> Constant Int [20]
                            ├── <1852> Constant Int [21]
                            ├── <1854> Constant Int [22]
                            ├── <1856> Constant Int [23]
                            ├── <1858> Constant Int [24]
                            ├── <1860> Constant Int [25]
                            ├── <1862> Constant Int [26]
                            ├── <1864> Constant Int [27]
                            ├── <1866> Constant Int [28]
                            ├── <1868> Constant Int [29]
                            ├── <1870> Constant Int [30]
                            ├── <1872> Constant Int [31]
                            ├── <1874> Constant Int [32]
                            ├── <1876> Constant Int [33]
                            ├── <1878> Constant Int [34]
                            ├── <1880> Constant Int [35]
                            ├── <1882> Constant Int [36]
                            ├── <1884> Constant Int [37]
                            ├── <1886> Constant Int [38]
                            ├── <1888> Constant Int [39]
                            ├── <1890> Constant Int [40]
                            ├── <1892> Constant Int [41]
                            ├── <1894> Constant Int [42]
                            ╰── <1896> Constant Int [43]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_return_big_struct_on_page_boundary() {
    let src = r#"
        struct eighteen_bytes {
            char arr[18];
        };
        extern struct eighteen_bytes on_page_boundary;
        struct eighteen_bytes return_struct(void) {
            on_page_boundary.arr[17] = 12;
            on_page_boundary.arr[9] = -1;
            on_page_boundary.arr[8] = -2;
            on_page_boundary.arr[7] = -3;
            return on_page_boundary;
        }
        int main(void) {
            struct eighteen_bytes x = return_struct();
            for (int i = 0; i < 18; i = i + 1) {
                char val = x.arr[i];
                if (i == 7) {
                    if (val != -3) {
                        return 1;
                    }
                } else if (i == 8) {
                    if (val != -2) {
                        return 2;
                    }
                } else if (i == 9) {
                    if (val != -1) {
                        return 3;
                    }
                } else if (i == 17) {
                    if (val != 12) {
                        return 4;
                    }
                } else if (x.arr[i]) {
                    return 5;
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [eighteen_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 18
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── on_page_boundary
            │   ├── Type
            │   │   ╰── Struct [eighteen_bytes]
            │   ╰── Extern
            ├── Function [return_struct]
            │   ╰── Body
            │       ├── <30> Assign [=]
            │       │   ├── <27> Subscript
            │       │   │   ├── <25> Dot
            │       │   │   │   ├── <23> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <26> Constant Int [17]
            │       │   ╰── <29> Constant Int [12]
            │       ├── <42> Assign [=]
            │       │   ├── <37> Subscript
            │       │   │   ├── <35> Dot
            │       │   │   │   ├── <33> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <36> Constant Int [9]
            │       │   ╰── <41> Unary [-]
            │       │       ╰── <40> Constant Int [1]
            │       ├── <54> Assign [=]
            │       │   ├── <49> Subscript
            │       │   │   ├── <47> Dot
            │       │   │   │   ├── <45> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <48> Constant Int [8]
            │       │   ╰── <53> Unary [-]
            │       │       ╰── <52> Constant Int [2]
            │       ├── <66> Assign [=]
            │       │   ├── <61> Subscript
            │       │   │   ├── <59> Dot
            │       │   │   │   ├── <57> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <60> Constant Int [7]
            │       │   ╰── <65> Unary [-]
            │       │       ╰── <64> Constant Int [3]
            │       ╰── Return
            │           ╰── <69> Var [on_page_boundary]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [eighteen_bytes]
                    │   ╰── Initializer
                    │       ╰── <83> FunctionCall [return_struct]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <89> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <97>  [<]
                    │   │       ├── <94> Var [i]
                    │   │       ╰── <96> Constant Int [18]
                    │   ├── Condition
                    │   │   ╰── <106> Assign [=]
                    │   │       ├── <99> Var [i]
                    │   │       ╰── <105>  [+]
                    │   │           ├── <102> Var [i]
                    │   │           ╰── <104> Constant Int [1]
                    │   ╰── Block
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── val
                    │       │   ├── Type
                    │       │   │   ╰── Char
                    │       │   ╰── Initializer
                    │       │       ╰── <116> Subscript
                    │       │           ├── <113> Dot
                    │       │           │   ├── <111> Var [x]
                    │       │           │   ╰── arr
                    │       │           ╰── <115> Var [i]
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <123>  [==]
                    │           │       ├── <120> Var [i]
                    │           │       ╰── <122> Constant Int [7]
                    │           ├── Then
                    │           │   ╰── Block
                    │           │       ╰── If
                    │           │           ├── Condition
                    │           │           │   ╰── <130>  [!=]
                    │           │           │       ├── <125> Var [val]
                    │           │           │       ╰── <129> Unary [-]
                    │           │           │           ╰── <128> Constant Int [3]
                    │           │           ╰── Then
                    │           │               ╰── Block
                    │           │                   ╰── Return
                    │           │                       ╰── <131> Constant Int [1]
                    │           ╰── Else
                    │               ╰── If
                    │                   ├── Condition
                    │                   │   ╰── <142>  [==]
                    │                   │       ├── <139> Var [i]
                    │                   │       ╰── <141> Constant Int [8]
                    │                   ├── Then
                    │                   │   ╰── Block
                    │                   │       ╰── If
                    │                   │           ├── Condition
                    │                   │           │   ╰── <149>  [!=]
                    │                   │           │       ├── <144> Var [val]
                    │                   │           │       ╰── <148> Unary [-]
                    │                   │           │           ╰── <147> Constant Int [2]
                    │                   │           ╰── Then
                    │                   │               ╰── Block
                    │                   │                   ╰── Return
                    │                   │                       ╰── <150> Constant Int [2]
                    │                   ╰── Else
                    │                       ╰── If
                    │                           ├── Condition
                    │                           │   ╰── <161>  [==]
                    │                           │       ├── <158> Var [i]
                    │                           │       ╰── <160> Constant Int [9]
                    │                           ├── Then
                    │                           │   ╰── Block
                    │                           │       ╰── If
                    │                           │           ├── Condition
                    │                           │           │   ╰── <168>  [!=]
                    │                           │           │       ├── <163> Var [val]
                    │                           │           │       ╰── <167> Unary [-]
                    │                           │           │           ╰── <166> Constant Int [1]
                    │                           │           ╰── Then
                    │                           │               ╰── Block
                    │                           │                   ╰── Return
                    │                           │                       ╰── <169> Constant Int [3]
                    │                           ╰── Else
                    │                               ╰── If
                    │                                   ├── Condition
                    │                                   │   ╰── <180>  [==]
                    │                                   │       ├── <177> Var [i]
                    │                                   │       ╰── <179> Constant Int [17]
                    │                                   ├── Then
                    │                                   │   ╰── Block
                    │                                   │       ╰── If
                    │                                   │           ├── Condition
                    │                                   │           │   ╰── <185>  [!=]
                    │                                   │           │       ├── <182> Var [val]
                    │                                   │           │       ╰── <184> Constant Int [12]
                    │                                   │           ╰── Then
                    │                                   │               ╰── Block
                    │                                   │                   ╰── Return
                    │                                   │                       ╰── <186> Constant Int [4]
                    │                                   ╰── Else
                    │                                       ╰── If
                    │                                           ├── Condition
                    │                                           │   ╰── <199> Subscript
                    │                                           │       ├── <196> Dot
                    │                                           │       │   ├── <194> Var [x]
                    │                                           │       │   ╰── arr
                    │                                           │       ╰── <198> Var [i]
                    │                                           ╰── Then
                    │                                               ╰── Block
                    │                                                   ╰── Return
                    │                                                       ╰── <200> Constant Int [5]
                    ╰── Return
                        ╰── <212> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_return_incomplete_type() {
    let src = r#"
        struct s;
        struct s increment_struct(struct s param);
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s arg = {1, 2};
            struct s val = increment_struct(arg);
            if (val.a != 2 || val.b != 3) {
                return 1;
            }
            return 0;
        }
        struct s increment_struct(struct s param) {
            param.a = param.a + 1;
            param.b = param.b + 1;
            return param;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            ├── Function [increment_struct]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── param
            │           ╰── Type
            │               ╰── Struct [s]
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── a
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── b
            │       ╰── Type
            │           ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arg
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <33> Constant Int [1]
            │       │           ╰── <35> Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── val
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── <46> FunctionCall [increment_struct]
            │       │           ╰── <45> Var [arg]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <64>  [||]
            │       │   │       ├── <55>  [!=]
            │       │   │       │   ├── <52> Dot
            │       │   │       │   │   ├── <50> Var [val]
            │       │   │       │   │   ╰── a
            │       │   │       │   ╰── <54> Constant Int [2]
            │       │   │       ╰── <63>  [!=]
            │       │   │           ├── <60> Dot
            │       │   │           │   ├── <58> Var [val]
            │       │   │           │   ╰── b
            │       │   │           ╰── <62> Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <65> Constant Int [1]
            │       ╰── Return
            │           ╰── <70> Constant Int [0]
            ╰── Function [increment_struct]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── param
                │       ╰── Type
                │           ╰── Struct [s]
                ╰── Body
                    ├── <96> Assign [=]
                    │   ├── <87> Dot
                    │   │   ├── <85> Var [param]
                    │   │   ╰── a
                    │   ╰── <95>  [+]
                    │       ├── <92> Dot
                    │       │   ├── <90> Var [param]
                    │       │   ╰── a
                    │       ╰── <94> Constant Int [1]
                    ├── <110> Assign [=]
                    │   ├── <101> Dot
                    │   │   ├── <99> Var [param]
                    │   │   ╰── b
                    │   ╰── <109>  [+]
                    │       ├── <106> Dot
                    │       │   ├── <104> Var [param]
                    │       │   ╰── b
                    │       ╰── <108> Constant Int [1]
                    ╰── Return
                        ╰── <113> Var [param]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_return_pointer_in_rax() {
    let src = r#"
        struct s {
            long l1;
            long l2;
            long l3;
        };
        struct s return_in_mem(void) {
            struct s result = {1, 2, 3};
            return result;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l1
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l2
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l3
            │       ╰── Type
            │           ╰── Long
            ╰── Function [return_in_mem]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <25> Constant Int [1]
                    │           ├── <27> Constant Int [2]
                    │           ╰── <29> Constant Int [3]
                    ╰── Return
                        ╰── <34> Var [result]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_return_space_overlap() {
    let src = r#"
        struct s {
            long l1;
            long l2;
            long l3;
        };
        extern struct s globvar;
        struct s overlap_with_globvar(void);
        struct s overlap_with_pointer(struct s *ptr);
        int main(void) {
            globvar = overlap_with_globvar();
            if (globvar.l1 != 400l || globvar.l2 != 500l || globvar.l3 != 600l) {
                return 2;
            }
            struct s my_struct = {10l, 9l, 8l};
            my_struct = overlap_with_pointer(&my_struct);
            if (my_struct.l1 != 20l || my_struct.l2 != 18l || my_struct.l3 != 16l) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l1
            │   │   ╰── Type
            │   │       ╰── Long
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── l2
            │   │   ╰── Type
            │   │       ╰── Long
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l3
            │       ╰── Type
            │           ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── globvar
            │   ├── Type
            │   │   ╰── Struct [s]
            │   ╰── Extern
            ├── Function [overlap_with_globvar]
            ├── Function [overlap_with_pointer]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Struct [s]
            ╰── Function [main]
                ╰── Body
                    ├── <51> Assign [=]
                    │   ├── <47> Var [globvar]
                    │   ╰── <50> FunctionCall [overlap_with_globvar]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <77>  [||]
                    │   │       ├── <68>  [||]
                    │   │       │   ├── <59>  [!=]
                    │   │       │   │   ├── <56> Dot
                    │   │       │   │   │   ├── <54> Var [globvar]
                    │   │       │   │   │   ╰── l1
                    │   │       │   │   ╰── <58> Constant Long [400]
                    │   │       │   ╰── <67>  [!=]
                    │   │       │       ├── <64> Dot
                    │   │       │       │   ├── <62> Var [globvar]
                    │   │       │       │   ╰── l2
                    │   │       │       ╰── <66> Constant Long [500]
                    │   │       ╰── <76>  [!=]
                    │   │           ├── <73> Dot
                    │   │           │   ├── <71> Var [globvar]
                    │   │           │   ╰── l3
                    │   │           ╰── <75> Constant Long [600]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <78> Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── my_struct
                    │   ├── Type
                    │   │   ╰── Struct [s]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <87> Constant Long [10]
                    │           ├── <89> Constant Long [9]
                    │           ╰── <91> Constant Long [8]
                    ├── <103> Assign [=]
                    │   ├── <96> Var [my_struct]
                    │   ╰── <102> FunctionCall [overlap_with_pointer]
                    │       ╰── <101> AddressOf
                    │           ╰── <100> Var [my_struct]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <129>  [||]
                    │   │       ├── <120>  [||]
                    │   │       │   ├── <111>  [!=]
                    │   │       │   │   ├── <108> Dot
                    │   │       │   │   │   ├── <106> Var [my_struct]
                    │   │       │   │   │   ╰── l1
                    │   │       │   │   ╰── <110> Constant Long [20]
                    │   │       │   ╰── <119>  [!=]
                    │   │       │       ├── <116> Dot
                    │   │       │       │   ├── <114> Var [my_struct]
                    │   │       │       │   ╰── l2
                    │   │       │       ╰── <118> Constant Long [18]
                    │   │       ╰── <128>  [!=]
                    │   │           ├── <125> Dot
                    │   │           │   ├── <123> Var [my_struct]
                    │   │           │   ╰── l3
                    │   │           ╰── <127> Constant Long [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <130> Constant Int [4]
                    ╰── Return
                        ╰── <135> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_return_struct_on_page_boundary() {
    let src = r#"
        struct ten_bytes {
            char arr[10];
        };
        extern struct ten_bytes on_page_boundary;
        struct ten_bytes return_struct(void) {
            on_page_boundary.arr[9] = -1;
            on_page_boundary.arr[8] = -2;
            on_page_boundary.arr[7] = -3;
            return on_page_boundary;
        }
        int main(void) {
            struct ten_bytes x = return_struct();
            for (int i = 0; i < 7; i = i + 1) {
                if (x.arr[i]) {
                    return 1;
                }
            }
            if (x.arr[7] != -3) {
                return 2;
            }
            if (x.arr[8] != -2) {
                return 2;
            }
            if (x.arr[9] != -1) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [ten_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 10
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── on_page_boundary
            │   ├── Type
            │   │   ╰── Struct [ten_bytes]
            │   ╰── Extern
            ├── Function [return_struct]
            │   ╰── Body
            │       ├── <32> Assign [=]
            │       │   ├── <27> Subscript
            │       │   │   ├── <25> Dot
            │       │   │   │   ├── <23> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <26> Constant Int [9]
            │       │   ╰── <31> Unary [-]
            │       │       ╰── <30> Constant Int [1]
            │       ├── <44> Assign [=]
            │       │   ├── <39> Subscript
            │       │   │   ├── <37> Dot
            │       │   │   │   ├── <35> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <38> Constant Int [8]
            │       │   ╰── <43> Unary [-]
            │       │       ╰── <42> Constant Int [2]
            │       ├── <56> Assign [=]
            │       │   ├── <51> Subscript
            │       │   │   ├── <49> Dot
            │       │   │   │   ├── <47> Var [on_page_boundary]
            │       │   │   │   ╰── arr
            │       │   │   ╰── <50> Constant Int [7]
            │       │   ╰── <55> Unary [-]
            │       │       ╰── <54> Constant Int [3]
            │       ╰── Return
            │           ╰── <59> Var [on_page_boundary]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Struct [ten_bytes]
                    │   ╰── Initializer
                    │       ╰── <73> FunctionCall [return_struct]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <79> Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <87>  [<]
                    │   │       ├── <84> Var [i]
                    │   │       ╰── <86> Constant Int [7]
                    │   ├── Condition
                    │   │   ╰── <96> Assign [=]
                    │   │       ├── <89> Var [i]
                    │   │       ╰── <95>  [+]
                    │   │           ├── <92> Var [i]
                    │   │           ╰── <94> Constant Int [1]
                    │   ╰── Block
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <103> Subscript
                    │           │       ├── <100> Dot
                    │           │       │   ├── <98> Var [x]
                    │           │       │   ╰── arr
                    │           │       ╰── <102> Var [i]
                    │           ╰── Then
                    │               ╰── Block
                    │                   ╰── Return
                    │                       ╰── <104> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <122>  [!=]
                    │   │       ├── <117> Subscript
                    │   │       │   ├── <115> Dot
                    │   │       │   │   ├── <113> Var [x]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <116> Constant Int [7]
                    │   │       ╰── <121> Unary [-]
                    │   │           ╰── <120> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <123> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <138>  [!=]
                    │   │       ├── <133> Subscript
                    │   │       │   ├── <131> Dot
                    │   │       │   │   ├── <129> Var [x]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <132> Constant Int [8]
                    │   │       ╰── <137> Unary [-]
                    │   │           ╰── <136> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <139> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <154>  [!=]
                    │   │       ├── <149> Subscript
                    │   │       │   ├── <147> Dot
                    │   │       │   │   ├── <145> Var [x]
                    │   │       │   │   ╰── arr
                    │   │       │   ╰── <148> Constant Int [9]
                    │   │       ╰── <153> Unary [-]
                    │   │           ╰── <152> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <155> Constant Int [3]
                    ╰── Return
                        ╰── <160> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_simple() {
    let src = r#"
        struct pair {
            int x;
            char y;
        };
        struct pair2 {
            double d;
            long l;
        };
        struct pair2 double_members(struct pair p) {
            struct pair2 retval = {p.x * 2, p.y * 2};
            return retval;
        }
        int main(void) {
            struct pair arg = {1, 4};
            struct pair2 result = double_members(arg);
            if (result.d != 2.0 || result.l != 8) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [pair]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── x
            │   │   ╰── Type
            │   │       ╰── Int
            │   ╰── Field
            │       ├── Name
            │       │   ╰── y
            │       ╰── Type
            │           ╰── Char
            ├── Struct [pair2]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── l
            │       ╰── Type
            │           ╰── Long
            ├── Function [double_members]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── p
            │   │       ╰── Type
            │   │           ╰── Struct [pair]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [pair2]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <41>  [*]
            │       │           │   ├── <38> Dot
            │       │           │   │   ├── <36> Var [p]
            │       │           │   │   ╰── x
            │       │           │   ╰── <40> Constant Int [2]
            │       │           ╰── <49>  [*]
            │       │               ├── <46> Dot
            │       │               │   ├── <44> Var [p]
            │       │               │   ╰── y
            │       │               ╰── <48> Constant Int [2]
            │       ╰── Return
            │           ╰── <54> Var [retval]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arg
                    │   ├── Type
                    │   │   ╰── Struct [pair]
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <67> Constant Int [1]
                    │           ╰── <69> Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Struct [pair2]
                    │   ╰── Initializer
                    │       ╰── <80> FunctionCall [double_members]
                    │           ╰── <79> Var [arg]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <98>  [||]
                    │   │       ├── <89>  [!=]
                    │   │       │   ├── <86> Dot
                    │   │       │   │   ├── <84> Var [result]
                    │   │       │   │   ╰── d
                    │   │       │   ╰── <88> Constant Double [+2e0]
                    │   │       ╰── <97>  [!=]
                    │   │           ├── <94> Dot
                    │   │           │   ├── <92> Var [result]
                    │   │           │   ╰── l
                    │   │           ╰── <96> Constant Int [8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <99> Constant Int [1]
                    ╰── Return
                        ╰── <104> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_stack_clobber() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void exit(int status);
        struct stack_bytes {
            char bytes[16];
        };
        static struct stack_bytes to_validate;
        void validate_stack_bytes(int code) {
            if (strcmp(to_validate.bytes, "efghijklmnopqrs")) {
                exit(code);
            }
            return;
        }
        struct one_int_reg {
            char cs[7];
        };
        struct one_int_reg return_int_struct(void) {
            struct one_int_reg retval = {{0, 0, 0, 0, 0, 0, 0}};
            return retval;
        }
        static struct one_int_reg one_int_struct;
        void validate_one_int_struct(int code) {
            for (int i = 0; i < 7; i = i + 1) {
                if (one_int_struct.cs[i]) {
                    exit(code);
                }
            }
        }
        int test_int_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            one_int_struct = return_int_struct();
            to_validate = bytes;
            validate_stack_bytes(1);
            validate_one_int_struct(2);
            return 0;
        }
        struct two_int_regs {
            char cs[15];
        };
        struct two_int_regs return_two_int_struct(void) {
            struct two_int_regs retval = {
                {20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}};
            return retval;
        }
        static struct two_int_regs two_int_struct;
        void validate_two_int_struct(int code) {
            for (int i = 0; i < 15; i = i + 1)
                if (two_int_struct.cs[i] != i + 20) {
                    exit(code);
                }
        }
        int test_two_int_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            two_int_struct = return_two_int_struct();
            to_validate = bytes;
            validate_stack_bytes(3);
            validate_two_int_struct(4);
            return 0;
        }
        struct one_xmm_reg {
            double d;
        };
        struct one_xmm_reg return_one_xmm_struct(void) {
            struct one_xmm_reg retval = {234.5};
            return retval;
        }
        static struct one_xmm_reg one_double_struct;
        void validate_one_double_struct(int code) {
            if (one_double_struct.d != 234.5) {
                exit(code);
            }
        }
        int test_one_double_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            one_double_struct = return_one_xmm_struct();
            to_validate = bytes;
            validate_stack_bytes(5);
            validate_one_double_struct(6);
            return 0;
        }
        struct two_xmm_regs {
            double d1;
            double d2;
        };
        struct two_xmm_regs return_two_xmm_struct(void) {
            struct two_xmm_regs retval = {234.5, 678.25};
            return retval;
        }
        static struct two_xmm_regs two_doubles_struct;
        void validate_two_doubles_struct(int code) {
            if (two_doubles_struct.d1 != 234.5 || two_doubles_struct.d2 != 678.25) {
                exit(code);
            }
        }
        int test_two_doubles_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            two_doubles_struct = return_two_xmm_struct();
            to_validate = bytes;
            validate_stack_bytes(7);
            validate_two_doubles_struct(8);
            return 0;
        }
        struct int_and_xmm {
            char c;
            double d;
        };
        struct int_and_xmm return_mixed_struct(void) {
            struct int_and_xmm retval = {125, 678.25};
            return retval;
        }
        static struct int_and_xmm mixed_struct;
        void validate_mixed_struct(int code) {
            if (mixed_struct.c != 125 || mixed_struct.d != 678.25) {
                exit(code);
            }
        }
        int test_mixed_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            mixed_struct = return_mixed_struct();
            to_validate = bytes;
            validate_stack_bytes(9);
            validate_mixed_struct(10);
            return 0;
        }
        struct stack {
            char cs[28];
        };
        struct stack return_stack_struct(void) {
            struct stack retval = {{90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
                                    100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
                                    110, 111, 112, 113, 114, 115, 116, 117}};
            return retval;
        }
        static struct stack stack_struct;
        void validate_stack_struct(int code) {
            for (int i = 0; i < 28; i = i + 1) {
                if (stack_struct.cs[i] != i + 90) {
                    exit(code);
                }
            }
        }
        int test_stack_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            stack_struct = return_stack_struct();
            to_validate = bytes;
            validate_stack_bytes(11);
            validate_stack_struct(12);
            return 0;
        }
        struct stack_irregular {
            char cs[19];
        };
        struct stack_irregular return_irregular_stack_struct(void) {
            struct stack_irregular retval = {{70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
                                              80, 81, 82, 83, 84, 85, 86, 87, 88}};
            return retval;
        }
        static struct stack_irregular irregular_stack_struct;
        void validate_irregular_stack_struct(int code) {
            for (int i = 0; i < 19; i = i + 1) {
                if (irregular_stack_struct.cs[i] != i + 70) {
                    exit(code);
                }
            }
        }
        int test_irregular_stack_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            irregular_stack_struct = return_irregular_stack_struct();
            to_validate = bytes;
            validate_stack_bytes(13);
            validate_irregular_stack_struct(14);
            return 0;
        }
        int main(void) {
            test_int_struct();
            test_two_int_struct();
            test_one_double_struct();
            test_two_doubles_struct();
            test_mixed_struct();
            test_stack_struct();
            test_irregular_stack_struct();
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [strcmp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── s1
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Char
            │       ╰── Param
            │           ├── Name
            │           │   ╰── s2
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Char
            ├── Function [exit]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── status
            │           ╰── Type
            │               ╰── Int
            ├── Struct [stack_bytes]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── bytes
            │       ╰── Type
            │           ╰── Array
            │               ├── 16
            │               ╰── Char
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── to_validate
            │   ├── Type
            │   │   ╰── Struct [stack_bytes]
            │   ╰── Static
            ├── Function [validate_stack_bytes]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <55> FunctionCall [strcmp]
            │       │   │       ├── <53> Dot
            │       │   │       │   ├── <51> Var [to_validate]
            │       │   │       │   ╰── bytes
            │       │   │       ╰── <54> "efghijklmnopqrs"
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <59> FunctionCall [exit]
            │       │               ╰── <58> Var [code]
            │       ╰── Return
            ├── Struct [one_int_reg]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cs
            │       ╰── Type
            │           ╰── Array
            │               ├── 7
            │               ╰── Char
            ├── Function [return_int_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [one_int_reg]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <86> Constant Int [0]
            │       │               ├── <88> Constant Int [0]
            │       │               ├── <90> Constant Int [0]
            │       │               ├── <92> Constant Int [0]
            │       │               ├── <94> Constant Int [0]
            │       │               ├── <96> Constant Int [0]
            │       │               ╰── <98> Constant Int [0]
            │       ╰── Return
            │           ╰── <104> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── one_int_struct
            │   ├── Type
            │   │   ╰── Struct [one_int_reg]
            │   ╰── Static
            ├── Function [validate_one_int_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── For
            │           ├── Init
            │           │   ╰── VarDeclaration
            │           │       ├── Name
            │           │       │   ╰── i
            │           │       ├── Type
            │           │       │   ╰── Int
            │           │       ╰── Initializer
            │           │           ╰── <125> Constant Int [0]
            │           ├── Condition
            │           │   ╰── <133>  [<]
            │           │       ├── <130> Var [i]
            │           │       ╰── <132> Constant Int [7]
            │           ├── Condition
            │           │   ╰── <142> Assign [=]
            │           │       ├── <135> Var [i]
            │           │       ╰── <141>  [+]
            │           │           ├── <138> Var [i]
            │           │           ╰── <140> Constant Int [1]
            │           ╰── Block
            │               ╰── If
            │                   ├── Condition
            │                   │   ╰── <149> Subscript
            │                   │       ├── <146> Dot
            │                   │       │   ├── <144> Var [one_int_struct]
            │                   │       │   ╰── cs
            │                   │       ╰── <148> Var [i]
            │                   ╰── Then
            │                       ╰── Block
            │                           ╰── <153> FunctionCall [exit]
            │                               ╰── <152> Var [code]
            ├── Function [test_int_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <172> "efghijklmnopqrs"
            │       ├── <181> Assign [=]
            │       │   ├── <177> Var [one_int_struct]
            │       │   ╰── <180> FunctionCall [return_int_struct]
            │       ├── <188> Assign [=]
            │       │   ├── <184> Var [to_validate]
            │       │   ╰── <187> Var [bytes]
            │       ├── <192> FunctionCall [validate_stack_bytes]
            │       │   ╰── <191> Constant Int [1]
            │       ├── <196> FunctionCall [validate_one_int_struct]
            │       │   ╰── <195> Constant Int [2]
            │       ╰── Return
            │           ╰── <198> Constant Int [0]
            ├── Struct [two_int_regs]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cs
            │       ╰── Type
            │           ╰── Array
            │               ├── 15
            │               ╰── Char
            ├── Function [return_two_int_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [two_int_regs]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <221> Constant Int [20]
            │       │               ├── <223> Constant Int [21]
            │       │               ├── <225> Constant Int [22]
            │       │               ├── <227> Constant Int [23]
            │       │               ├── <229> Constant Int [24]
            │       │               ├── <231> Constant Int [25]
            │       │               ├── <233> Constant Int [26]
            │       │               ├── <235> Constant Int [27]
            │       │               ├── <237> Constant Int [28]
            │       │               ├── <239> Constant Int [29]
            │       │               ├── <241> Constant Int [30]
            │       │               ├── <243> Constant Int [31]
            │       │               ├── <245> Constant Int [32]
            │       │               ├── <247> Constant Int [33]
            │       │               ╰── <249> Constant Int [34]
            │       ╰── Return
            │           ╰── <255> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── two_int_struct
            │   ├── Type
            │   │   ╰── Struct [two_int_regs]
            │   ╰── Static
            ├── Function [validate_two_int_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── For
            │           ├── Init
            │           │   ╰── VarDeclaration
            │           │       ├── Name
            │           │       │   ╰── i
            │           │       ├── Type
            │           │       │   ╰── Int
            │           │       ╰── Initializer
            │           │           ╰── <276> Constant Int [0]
            │           ├── Condition
            │           │   ╰── <284>  [<]
            │           │       ├── <281> Var [i]
            │           │       ╰── <283> Constant Int [15]
            │           ├── Condition
            │           │   ╰── <293> Assign [=]
            │           │       ├── <286> Var [i]
            │           │       ╰── <292>  [+]
            │           │           ├── <289> Var [i]
            │           │           ╰── <291> Constant Int [1]
            │           ╰── If
            │               ├── Condition
            │               │   ╰── <307>  [!=]
            │               │       ├── <300> Subscript
            │               │       │   ├── <297> Dot
            │               │       │   │   ├── <295> Var [two_int_struct]
            │               │       │   │   ╰── cs
            │               │       │   ╰── <299> Var [i]
            │               │       ╰── <306>  [+]
            │               │           ├── <303> Var [i]
            │               │           ╰── <305> Constant Int [20]
            │               ╰── Then
            │                   ╰── Block
            │                       ╰── <311> FunctionCall [exit]
            │                           ╰── <310> Var [code]
            ├── Function [test_two_int_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <328> "efghijklmnopqrs"
            │       ├── <337> Assign [=]
            │       │   ├── <333> Var [two_int_struct]
            │       │   ╰── <336> FunctionCall [return_two_int_struct]
            │       ├── <344> Assign [=]
            │       │   ├── <340> Var [to_validate]
            │       │   ╰── <343> Var [bytes]
            │       ├── <348> FunctionCall [validate_stack_bytes]
            │       │   ╰── <347> Constant Int [3]
            │       ├── <352> FunctionCall [validate_two_int_struct]
            │       │   ╰── <351> Constant Int [4]
            │       ╰── Return
            │           ╰── <354> Constant Int [0]
            ├── Struct [one_xmm_reg]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Function [return_one_xmm_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [one_xmm_reg]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <374> Constant Double [+2.345e2]
            │       ╰── Return
            │           ╰── <379> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── one_double_struct
            │   ├── Type
            │   │   ╰── Struct [one_xmm_reg]
            │   ╰── Static
            ├── Function [validate_one_double_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── If
            │           ├── Condition
            │           │   ╰── <403>  [!=]
            │           │       ├── <400> Dot
            │           │       │   ├── <398> Var [one_double_struct]
            │           │       │   ╰── d
            │           │       ╰── <402> Constant Double [+2.345e2]
            │           ╰── Then
            │               ╰── Block
            │                   ╰── <407> FunctionCall [exit]
            │                       ╰── <406> Var [code]
            ├── Function [test_one_double_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <423> "efghijklmnopqrs"
            │       ├── <432> Assign [=]
            │       │   ├── <428> Var [one_double_struct]
            │       │   ╰── <431> FunctionCall [return_one_xmm_struct]
            │       ├── <439> Assign [=]
            │       │   ├── <435> Var [to_validate]
            │       │   ╰── <438> Var [bytes]
            │       ├── <443> FunctionCall [validate_stack_bytes]
            │       │   ╰── <442> Constant Int [5]
            │       ├── <447> FunctionCall [validate_one_double_struct]
            │       │   ╰── <446> Constant Int [6]
            │       ╰── Return
            │           ╰── <449> Constant Int [0]
            ├── Struct [two_xmm_regs]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── d1
            │   │   ╰── Type
            │   │       ╰── Double
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d2
            │       ╰── Type
            │           ╰── Double
            ├── Function [return_two_xmm_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [two_xmm_regs]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <473> Constant Double [+2.345e2]
            │       │           ╰── <475> Constant Double [+6.7825e2]
            │       ╰── Return
            │           ╰── <480> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── two_doubles_struct
            │   ├── Type
            │   │   ╰── Struct [two_xmm_regs]
            │   ╰── Static
            ├── Function [validate_two_doubles_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── If
            │           ├── Condition
            │           │   ╰── <513>  [||]
            │           │       ├── <504>  [!=]
            │           │       │   ├── <501> Dot
            │           │       │   │   ├── <499> Var [two_doubles_struct]
            │           │       │   │   ╰── d1
            │           │       │   ╰── <503> Constant Double [+2.345e2]
            │           │       ╰── <512>  [!=]
            │           │           ├── <509> Dot
            │           │           │   ├── <507> Var [two_doubles_struct]
            │           │           │   ╰── d2
            │           │           ╰── <511> Constant Double [+6.7825e2]
            │           ╰── Then
            │               ╰── Block
            │                   ╰── <517> FunctionCall [exit]
            │                       ╰── <516> Var [code]
            ├── Function [test_two_doubles_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <533> "efghijklmnopqrs"
            │       ├── <542> Assign [=]
            │       │   ├── <538> Var [two_doubles_struct]
            │       │   ╰── <541> FunctionCall [return_two_xmm_struct]
            │       ├── <549> Assign [=]
            │       │   ├── <545> Var [to_validate]
            │       │   ╰── <548> Var [bytes]
            │       ├── <553> FunctionCall [validate_stack_bytes]
            │       │   ╰── <552> Constant Int [7]
            │       ├── <557> FunctionCall [validate_two_doubles_struct]
            │       │   ╰── <556> Constant Int [8]
            │       ╰── Return
            │           ╰── <559> Constant Int [0]
            ├── Struct [int_and_xmm]
            │   ├── Field
            │   │   ├── Name
            │   │   │   ╰── c
            │   │   ╰── Type
            │   │       ╰── Char
            │   ╰── Field
            │       ├── Name
            │       │   ╰── d
            │       ╰── Type
            │           ╰── Double
            ├── Function [return_mixed_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [int_and_xmm]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <583> Constant Int [125]
            │       │           ╰── <585> Constant Double [+6.7825e2]
            │       ╰── Return
            │           ╰── <590> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── mixed_struct
            │   ├── Type
            │   │   ╰── Struct [int_and_xmm]
            │   ╰── Static
            ├── Function [validate_mixed_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── If
            │           ├── Condition
            │           │   ╰── <623>  [||]
            │           │       ├── <614>  [!=]
            │           │       │   ├── <611> Dot
            │           │       │   │   ├── <609> Var [mixed_struct]
            │           │       │   │   ╰── c
            │           │       │   ╰── <613> Constant Int [125]
            │           │       ╰── <622>  [!=]
            │           │           ├── <619> Dot
            │           │           │   ├── <617> Var [mixed_struct]
            │           │           │   ╰── d
            │           │           ╰── <621> Constant Double [+6.7825e2]
            │           ╰── Then
            │               ╰── Block
            │                   ╰── <627> FunctionCall [exit]
            │                       ╰── <626> Var [code]
            ├── Function [test_mixed_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <643> "efghijklmnopqrs"
            │       ├── <652> Assign [=]
            │       │   ├── <648> Var [mixed_struct]
            │       │   ╰── <651> FunctionCall [return_mixed_struct]
            │       ├── <659> Assign [=]
            │       │   ├── <655> Var [to_validate]
            │       │   ╰── <658> Var [bytes]
            │       ├── <663> FunctionCall [validate_stack_bytes]
            │       │   ╰── <662> Constant Int [9]
            │       ├── <667> FunctionCall [validate_mixed_struct]
            │       │   ╰── <666> Constant Int [10]
            │       ╰── Return
            │           ╰── <669> Constant Int [0]
            ├── Struct [stack]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cs
            │       ╰── Type
            │           ╰── Array
            │               ├── 28
            │               ╰── Char
            ├── Function [return_stack_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [stack]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <692> Constant Int [90]
            │       │               ├── <694> Constant Int [91]
            │       │               ├── <696> Constant Int [92]
            │       │               ├── <698> Constant Int [93]
            │       │               ├── <700> Constant Int [94]
            │       │               ├── <702> Constant Int [95]
            │       │               ├── <704> Constant Int [96]
            │       │               ├── <706> Constant Int [97]
            │       │               ├── <708> Constant Int [98]
            │       │               ├── <710> Constant Int [99]
            │       │               ├── <712> Constant Int [100]
            │       │               ├── <714> Constant Int [101]
            │       │               ├── <716> Constant Int [102]
            │       │               ├── <718> Constant Int [103]
            │       │               ├── <720> Constant Int [104]
            │       │               ├── <722> Constant Int [105]
            │       │               ├── <724> Constant Int [106]
            │       │               ├── <726> Constant Int [107]
            │       │               ├── <728> Constant Int [108]
            │       │               ├── <730> Constant Int [109]
            │       │               ├── <732> Constant Int [110]
            │       │               ├── <734> Constant Int [111]
            │       │               ├── <736> Constant Int [112]
            │       │               ├── <738> Constant Int [113]
            │       │               ├── <740> Constant Int [114]
            │       │               ├── <742> Constant Int [115]
            │       │               ├── <744> Constant Int [116]
            │       │               ╰── <746> Constant Int [117]
            │       ╰── Return
            │           ╰── <752> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── stack_struct
            │   ├── Type
            │   │   ╰── Struct [stack]
            │   ╰── Static
            ├── Function [validate_stack_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── For
            │           ├── Init
            │           │   ╰── VarDeclaration
            │           │       ├── Name
            │           │       │   ╰── i
            │           │       ├── Type
            │           │       │   ╰── Int
            │           │       ╰── Initializer
            │           │           ╰── <773> Constant Int [0]
            │           ├── Condition
            │           │   ╰── <781>  [<]
            │           │       ├── <778> Var [i]
            │           │       ╰── <780> Constant Int [28]
            │           ├── Condition
            │           │   ╰── <790> Assign [=]
            │           │       ├── <783> Var [i]
            │           │       ╰── <789>  [+]
            │           │           ├── <786> Var [i]
            │           │           ╰── <788> Constant Int [1]
            │           ╰── Block
            │               ╰── If
            │                   ├── Condition
            │                   │   ╰── <804>  [!=]
            │                   │       ├── <797> Subscript
            │                   │       │   ├── <794> Dot
            │                   │       │   │   ├── <792> Var [stack_struct]
            │                   │       │   │   ╰── cs
            │                   │       │   ╰── <796> Var [i]
            │                   │       ╰── <803>  [+]
            │                   │           ├── <800> Var [i]
            │                   │           ╰── <802> Constant Int [90]
            │                   ╰── Then
            │                       ╰── Block
            │                           ╰── <808> FunctionCall [exit]
            │                               ╰── <807> Var [code]
            ├── Function [test_stack_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <827> "efghijklmnopqrs"
            │       ├── <836> Assign [=]
            │       │   ├── <832> Var [stack_struct]
            │       │   ╰── <835> FunctionCall [return_stack_struct]
            │       ├── <843> Assign [=]
            │       │   ├── <839> Var [to_validate]
            │       │   ╰── <842> Var [bytes]
            │       ├── <847> FunctionCall [validate_stack_bytes]
            │       │   ╰── <846> Constant Int [11]
            │       ├── <851> FunctionCall [validate_stack_struct]
            │       │   ╰── <850> Constant Int [12]
            │       ╰── Return
            │           ╰── <853> Constant Int [0]
            ├── Struct [stack_irregular]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── cs
            │       ╰── Type
            │           ╰── Array
            │               ├── 19
            │               ╰── Char
            ├── Function [return_irregular_stack_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_irregular]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <876> Constant Int [70]
            │       │               ├── <878> Constant Int [71]
            │       │               ├── <880> Constant Int [72]
            │       │               ├── <882> Constant Int [73]
            │       │               ├── <884> Constant Int [74]
            │       │               ├── <886> Constant Int [75]
            │       │               ├── <888> Constant Int [76]
            │       │               ├── <890> Constant Int [77]
            │       │               ├── <892> Constant Int [78]
            │       │               ├── <894> Constant Int [79]
            │       │               ├── <896> Constant Int [80]
            │       │               ├── <898> Constant Int [81]
            │       │               ├── <900> Constant Int [82]
            │       │               ├── <902> Constant Int [83]
            │       │               ├── <904> Constant Int [84]
            │       │               ├── <906> Constant Int [85]
            │       │               ├── <908> Constant Int [86]
            │       │               ├── <910> Constant Int [87]
            │       │               ╰── <912> Constant Int [88]
            │       ╰── Return
            │           ╰── <918> Var [retval]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── irregular_stack_struct
            │   ├── Type
            │   │   ╰── Struct [stack_irregular]
            │   ╰── Static
            ├── Function [validate_irregular_stack_struct]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── code
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── For
            │           ├── Init
            │           │   ╰── VarDeclaration
            │           │       ├── Name
            │           │       │   ╰── i
            │           │       ├── Type
            │           │       │   ╰── Int
            │           │       ╰── Initializer
            │           │           ╰── <939> Constant Int [0]
            │           ├── Condition
            │           │   ╰── <947>  [<]
            │           │       ├── <944> Var [i]
            │           │       ╰── <946> Constant Int [19]
            │           ├── Condition
            │           │   ╰── <956> Assign [=]
            │           │       ├── <949> Var [i]
            │           │       ╰── <955>  [+]
            │           │           ├── <952> Var [i]
            │           │           ╰── <954> Constant Int [1]
            │           ╰── Block
            │               ╰── If
            │                   ├── Condition
            │                   │   ╰── <970>  [!=]
            │                   │       ├── <963> Subscript
            │                   │       │   ├── <960> Dot
            │                   │       │   │   ├── <958> Var [irregular_stack_struct]
            │                   │       │   │   ╰── cs
            │                   │       │   ╰── <962> Var [i]
            │                   │       ╰── <969>  [+]
            │                   │           ├── <966> Var [i]
            │                   │           ╰── <968> Constant Int [70]
            │                   ╰── Then
            │                       ╰── Block
            │                           ╰── <974> FunctionCall [exit]
            │                               ╰── <973> Var [code]
            ├── Function [test_irregular_stack_struct]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bytes
            │       │   ├── Type
            │       │   │   ╰── Struct [stack_bytes]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── <993> "efghijklmnopqrs"
            │       ├── <1002> Assign [=]
            │       │   ├── <998> Var [irregular_stack_struct]
            │       │   ╰── <1001> FunctionCall [return_irregular_stack_struct]
            │       ├── <1009> Assign [=]
            │       │   ├── <1005> Var [to_validate]
            │       │   ╰── <1008> Var [bytes]
            │       ├── <1013> FunctionCall [validate_stack_bytes]
            │       │   ╰── <1012> Constant Int [13]
            │       ├── <1017> FunctionCall [validate_irregular_stack_struct]
            │       │   ╰── <1016> Constant Int [14]
            │       ╰── Return
            │           ╰── <1019> Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <1029> FunctionCall [test_int_struct]
                    ├── <1032> FunctionCall [test_two_int_struct]
                    ├── <1035> FunctionCall [test_one_double_struct]
                    ├── <1038> FunctionCall [test_two_doubles_struct]
                    ├── <1041> FunctionCall [test_mixed_struct]
                    ├── <1044> FunctionCall [test_stack_struct]
                    ├── <1047> FunctionCall [test_irregular_stack_struct]
                    ╰── Return
                        ╰── <1049> Constant Int [0]
    "#;
    assert_parse(src, expected);
}

#[test]
fn test_valid_params_and_returns_temporary_lifetime() {
    let src = r#"
        struct s {
            int arr[3];
        };
        struct s f(void) {
            struct s retval = {{1, 2, 3}};
            return retval;
        }
        int main(void) {
            int i = f().arr[0];
            int j = f().arr[1];
            int k = f().arr[2];
            if (i != 1) {
                return 1;
            }
            if (j != 2) {
                return 2;
            }
            if (k != 3) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Struct [s]
            │   ╰── Field
            │       ├── Name
            │       │   ╰── arr
            │       ╰── Type
            │           ╰── Array
            │               ├── 3
            │               ╰── Int
            ├── Function [f]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Struct [s]
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ╰── Compound
            │       │               ├── <20> Constant Int [1]
            │       │               ├── <22> Constant Int [2]
            │       │               ╰── <24> Constant Int [3]
            │       ╰── Return
            │           ╰── <30> Var [retval]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <47> Subscript
                    │           ├── <45> Dot
                    │           │   ├── <43> FunctionCall [f]
                    │           │   ╰── arr
                    │           ╰── <46> Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── j
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <58> Subscript
                    │           ├── <56> Dot
                    │           │   ├── <54> FunctionCall [f]
                    │           │   ╰── arr
                    │           ╰── <57> Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── k
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <69> Subscript
                    │           ├── <67> Dot
                    │           │   ├── <65> FunctionCall [f]
                    │           │   ╰── arr
                    │           ╰── <68> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <76>  [!=]
                    │   │       ├── <73> Var [i]
                    │   │       ╰── <75> Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <77> Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <86>  [!=]
                    │   │       ├── <83> Var [j]
                    │   │       ╰── <85> Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <87> Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <96>  [!=]
                    │   │       ├── <93> Var [k]
                    │   │       ╰── <95> Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <97> Constant Int [3]
                    ╰── Return
                        ╰── <102> Constant Int [0]
    "#;
    assert_parse(src, expected);
}
