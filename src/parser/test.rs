use crate::parser::parse;
use crate::pretty::{annotate, dedent, dump_ast, remove_annotation};

fn assert_error(expected_annotated: &str) {
    let clean_source = remove_annotation(expected_annotated);
    let Err(error) = parse(&clean_source) else {
        panic!("No error produced!")
    };
    let actual_annotated = annotate(&clean_source, &error);
    assert_eq!(actual_annotated, expected_annotated);
}

#[test]
fn test_chapter_1_invalid_parse_end_before_expr() {
    assert_error(
        r#"
        int main(void) {
            return
    
// Expected expression, but found ''"#,
    );
}

#[test]
fn test_chapter_1_invalid_parse_extra_junk() {
    assert_error(
        r#"
        int main(void)
        {
            return 2;
        }
        foo
      //^^^ Expected type specifier
    "#,
    );
}

#[test]
fn test_chapter_1_invalid_parse_invalid_function_name() {
    assert_error(
        r#"
        
        int 3 (void) {
          //^ Expected identifier, but found '3'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_1_invalid_parse_keyword_wrong_case() {
    assert_error(
        r#"
        int main(void) {
            RETURN 0;
                 //^ Expected ';', but found '0'
        }
    "#,
    );
}

#[test]
fn test_chapter_1_invalid_parse_missing_type() {
    assert_error(
        r#"
        main(void) {
      //^^^^ Expected type specifier
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_1_invalid_parse_misspelled_keyword() {
    assert_error(
        r#"
        int main(void) {
            returns 0;
                  //^ Expected ';', but found '0'
        }
    "#,
    );
}

#[test]
fn test_chapter_1_invalid_parse_no_semicolon() {
    assert_error(
        r#"
        int main (void) {
            return 0
        }
      //^ Expected ';', but found '}'
    "#,
    );
}

#[test]
fn test_chapter_1_invalid_parse_not_expression() {
    assert_error(
        r#"
        int main(void) {
            return int;
                 //^^^ Expected expression, but found 'int'
        }
    "#,
    );
}

#[test]
fn test_chapter_1_invalid_parse_space_in_keyword() {
    assert_error(
        r#"
        int main(void){
            retur n 0;
                //^ Expected ';', but found 'n'
        }
    "#,
    );
}

#[test]
fn test_chapter_1_invalid_parse_switched_parens() {
    assert_error(
        r#"
        int main )( {
               //^ Expected ';', but found ')'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_1_invalid_parse_unclosed_brace() {
    assert_error(
        r#"
        int main(void) {
            return 0;
    
// Expected statement, but found ''"#,
    );
}

#[test]
fn test_chapter_1_invalid_parse_unclosed_paren() {
    assert_error(
        r#"
        int main( {
                //^ Expected type specifier
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_1_valid_multi_digit() {
    let src = r#"
        int main(void) {
            return 100;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [100]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_1_valid_newlines() {
    let src = r#"
        int
        main
        (
        void
        )
        {
        return
        0
        ;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_1_valid_no_newlines() {
    let src = r#"
        int main(void){return 0;}
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_1_valid_return_0() {
    let src = r#"
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_1_valid_return_2() {
    let src = r#"
        int main(void) {
            return 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_1_valid_spaces() {
    let src = r#"
           int main ( void) { return 0 ; }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_1_valid_tabs() {
    let src = r#"
        int main ( void) { return 0 ; }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_2_invalid_parse_extra_paren() {
    assert_error(
        r#"
        int main(void)
        {
            return (3));
                    //^ Expected ';', but found ')'
        }
    "#,
    );
}

#[test]
fn test_chapter_2_invalid_parse_missing_const() {
    assert_error(
        r#"
        int main(void) {
            return ~;
                  //^ Expected expression, but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_2_invalid_parse_missing_semicolon() {
    assert_error(
        r#"
        int main(void) {
            return -5
        }
      //^ Expected ';', but found '}'
    "#,
    );
}

#[test]
fn test_chapter_2_invalid_parse_nested_missing_const() {
    assert_error(
        r#"
        int main(void)
        {
            return -~;
                   //^ Expected expression, but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_2_invalid_parse_parenthesize_operand() {
    assert_error(
        r#"
        int main(void) {
            return (-)3;
                   //^ Expected expression, but found ')'
        }
    "#,
    );
}

#[test]
fn test_chapter_2_invalid_parse_unclosed_paren() {
    assert_error(
        r#"
        int main(void)
        {
            return (1;
                   //^ Expected ')', but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_2_invalid_parse_wrong_order() {
    assert_error(
        r#"
        int main(void) {
            return 4-;
                   //^ Expected expression, but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_2_valid_bitwise() {
    let src = r#"
        int main(void) {
            return ~12;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <7> Unary [~]
                            ╰── Constant Int [12]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_bitwise_int_min() {
    let src = r#"
        int main(void) {
            return ~-2147483647;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <9> Unary [~]
                            ╰── <8> Unary [-]
                                ╰── Constant Int [2147483647]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_bitwise_zero() {
    let src = r#"
        int main(void) {
            return ~0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <7> Unary [~]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_neg() {
    let src = r#"
        int main(void) {
            return -5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <7> Unary [-]
                            ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_neg_zero() {
    let src = r#"
        int main(void) {
            return -0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <7> Unary [-]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_negate_int_max() {
    let src = r#"
        int main(void) {
            return -2147483647;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <7> Unary [-]
                            ╰── Constant Int [2147483647]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_nested_ops() {
    let src = r#"
        int main(void) {
            return ~-3;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <9> Unary [~]
                            ╰── <8> Unary [-]
                                ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_nested_ops_2() {
    let src = r#"
        int main(void) {
            return -~0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <9> Unary [-]
                            ╰── <8> Unary [~]
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_parens() {
    let src = r#"
        int main(void) {
            return (-2);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8> Unary [-]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_parens_2() {
    let src = r#"
        int main(void) {
            return ~(2);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8> Unary [~]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_parens_3() {
    let src = r#"
        int main(void) {
            return -(-4);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <10> Unary [-]
                            ╰── <9> Unary [-]
                                ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_2_valid_redundant_parens() {
    let src = r#"
        int main(void)
        {
            return -((((10))));
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11> Unary [-]
                            ╰── Constant Int [10]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_invalid_parse_double_operation() {
    assert_error(
        r#"
        int main(void) {
            return 1 * / 2;
                     //^ Expected expression, but found '/'
        }
    "#,
    );
}

#[test]
fn test_chapter_3_invalid_parse_extra_credit_bitwise_double_operator() {
    assert_error(
        r#"
        int main(void) {
            return 1 | | 2;
                     //^ Expected expression, but found '|'
        }
    "#,
    );
}

#[test]
fn test_chapter_3_invalid_parse_imbalanced_paren() {
    assert_error(
        r#"
        int main(void) {
            return 1 + (2;
                       //^ Expected ')', but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_3_invalid_parse_malformed_paren() {
    assert_error(
        r#"
        int main(void) {
            return 2 (- 3);
                   //^ Expected ';', but found '('
        }
    "#,
    );
}

#[test]
fn test_chapter_3_invalid_parse_misplaced_semicolon() {
    assert_error(
        r#"
        int main(void) {
            return 1 + (2;)
                       //^ Expected ')', but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_3_invalid_parse_missing_first_op() {
    assert_error(
        r#"
        int main(void) {
            return /3;
                 //^ Expected expression, but found '/'
        }
    "#,
    );
}

#[test]
fn test_chapter_3_invalid_parse_missing_open_paren() {
    assert_error(
        r#"
        int main(void) {
            return 1 + 2);
                      //^ Expected ';', but found ')'
        }
    "#,
    );
}

#[test]
fn test_chapter_3_invalid_parse_missing_second_op() {
    assert_error(
        r#"
        int main(void) {
            return 1 + ;
                     //^ Expected expression, but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_3_invalid_parse_no_semicolon() {
    assert_error(
        r#"
        int main(void) {
            return 2*2
        }
      //^ Expected ';', but found '}'
    "#,
    );
}

#[test]
fn test_chapter_3_valid_add() {
    let src = r#"
        int main(void) {
            return 1 + 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [+]
                            ├── Constant Int [1]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_associativity() {
    let src = r#"
        int main(void) {
            return 1 - 2 - 3;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [-]
                            ├── <8>  [-]
                            │   ├── Constant Int [1]
                            │   ╰── Constant Int [2]
                            ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_associativity_2() {
    let src = r#"
        int main(void) {
            return 6 / 3 / 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [/]
                            ├── <8>  [/]
                            │   ├── Constant Int [6]
                            │   ╰── Constant Int [3]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_associativity_3() {
    let src = r#"
        int main(void) {
            return (3 / 2 * 4) + (5 - 4 + 3);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <22>  [+]
                            ├── <12>  [*]
                            │   ├── <8>  [/]
                            │   │   ├── Constant Int [3]
                            │   │   ╰── Constant Int [2]
                            │   ╰── Constant Int [4]
                            ╰── <21>  [+]
                                ├── <17>  [-]
                                │   ├── Constant Int [5]
                                │   ╰── Constant Int [4]
                                ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_associativity_and_precedence() {
    let src = r#"
        int main(void) {
            return 5 * 4 / 2 -
                3 % (2 + 1);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <21>  [-]
                            ├── <11>  [/]
                            │   ├── <8>  [*]
                            │   │   ├── Constant Int [5]
                            │   │   ╰── Constant Int [4]
                            │   ╰── Constant Int [2]
                            ╰── <20>  [%]
                                ├── Constant Int [3]
                                ╰── <19>  [+]
                                    ├── Constant Int [2]
                                    ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_div() {
    let src = r#"
        int main(void) {
            return 4 / 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [/]
                            ├── Constant Int [4]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_div_neg() {
    let src = r#"
        int main(void) {
            return (-12) / 5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [/]
                            ├── <8> Unary [-]
                            │   ╰── Constant Int [12]
                            ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_and() {
    let src = r#"
        int main(void) {
            return 3 & 5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [&]
                            ├── Constant Int [3]
                            ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_or() {
    let src = r#"
        int main(void) {
            return 1 | 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [|]
                            ├── Constant Int [1]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_precedence() {
    let src = r#"
        int main(void) {
            return 80 >> 2 | 1 ^ 5 & 7 << 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <20>  [|]
                            ├── <8>  [>>]
                            │   ├── Constant Int [80]
                            │   ╰── Constant Int [2]
                            ╰── <19>  [^]
                                ├── Constant Int [1]
                                ╰── <18>  [&]
                                    ├── Constant Int [5]
                                    ╰── <17>  [<<]
                                        ├── Constant Int [7]
                                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_shift_associativity() {
    let src = r#"
        int main(void) {
            return 33 << 4 >> 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [>>]
                            ├── <8>  [<<]
                            │   ├── Constant Int [33]
                            │   ╰── Constant Int [4]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_shift_associativity_2() {
    let src = r#"
        int main(void) {
            return 33 >> 2 << 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [<<]
                            ├── <8>  [>>]
                            │   ├── Constant Int [33]
                            │   ╰── Constant Int [2]
                            ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_shift_precedence() {
    let src = r#"
        int main(void) {
            return 40 << 4 + 12 >> 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <14>  [>>]
                            ├── <11>  [<<]
                            │   ├── Constant Int [40]
                            │   ╰── <10>  [+]
                            │       ├── Constant Int [4]
                            │       ╰── Constant Int [12]
                            ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_shiftl() {
    let src = r#"
        int main(void) {
            return 35 << 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [<<]
                            ├── Constant Int [35]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_shiftr() {
    let src = r#"
        int main(void) {
            return 1000 >> 4;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [>>]
                            ├── Constant Int [1000]
                            ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_shiftr_negative() {
    let src = r#"
        int main(void) {
            return -5 >> 30;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <10>  [>>]
                            ├── <7> Unary [-]
                            │   ╰── Constant Int [5]
                            ╰── Constant Int [30]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_variable_shift_count() {
    let src = r#"
        int main(void) {
            return (4 << (2 * 2)) + (100 >> (1 + 2));
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <24>  [+]
                            ├── <13>  [<<]
                            │   ├── Constant Int [4]
                            │   ╰── <11>  [*]
                            │       ├── Constant Int [2]
                            │       ╰── Constant Int [2]
                            ╰── <23>  [>>]
                                ├── Constant Int [100]
                                ╰── <21>  [+]
                                    ├── Constant Int [1]
                                    ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_extra_credit_bitwise_xor() {
    let src = r#"
        int main(void) {
            return 7 ^ 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [^]
                            ├── Constant Int [7]
                            ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_mod() {
    let src = r#"
        int main(void) {
            return 4 % 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [%]
                            ├── Constant Int [4]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_mult() {
    let src = r#"
        int main(void) {
            return 2 * 3;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [*]
                            ├── Constant Int [2]
                            ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_parens() {
    let src = r#"
        int main(void) {
            return 2 * (3 + 4);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <12>  [*]
                            ├── Constant Int [2]
                            ╰── <11>  [+]
                                ├── Constant Int [3]
                                ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_precedence() {
    let src = r#"
        int main(void) {
            return 2 + 3 * 4;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [+]
                            ├── Constant Int [2]
                            ╰── <10>  [*]
                                ├── Constant Int [3]
                                ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_sub() {
    let src = r#"
        int main(void) {
            return 1 - 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [-]
                            ├── Constant Int [1]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_sub_neg() {
    let src = r#"
        int main(void) {
            return 2- -1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <10>  [-]
                            ├── Constant Int [2]
                            ╰── <9> Unary [-]
                                ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_unop_add() {
    let src = r#"
        int main(void) {
            return ~2 + 3;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <10>  [+]
                            ├── <7> Unary [~]
                            │   ╰── Constant Int [2]
                            ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_3_valid_unop_parens() {
    let src = r#"
        int main(void) {
            return ~(1 + 1);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11> Unary [~]
                            ╰── <10>  [+]
                                ├── Constant Int [1]
                                ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_invalid_parse_missing_const() {
    assert_error(
        r#"
        int main(void)
        {
            10 <= !;
                 //^ Expected expression, but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_4_invalid_parse_missing_first_op() {
    assert_error(
        r#"
        int main(void) {
            return <= 2;
                 //^^ Expected expression, but found '<='
        }
    "#,
    );
}

#[test]
fn test_chapter_4_invalid_parse_missing_operand() {
    assert_error(
        r#"
        int main(void) {
            return 1 < > 3;
                     //^ Expected expression, but found '>'
        }
    "#,
    );
}

#[test]
fn test_chapter_4_invalid_parse_missing_second_op() {
    assert_error(
        r#"
        int main(void) {
            return 2 && ~;
                       //^ Expected expression, but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_4_invalid_parse_missing_semicolon() {
    assert_error(
        r#"
        int main(void) {
            return 1 || 2
        }
      //^ Expected ';', but found '}'
    "#,
    );
}

#[test]
fn test_chapter_4_invalid_parse_unary_missing_semicolon() {
    assert_error(
        r#"
        int main(void)
        {
            return !10
        }
      //^ Expected ';', but found '}'
    "#,
    );
}

#[test]
fn test_chapter_4_valid_and_false() {
    let src = r#"
        int main(void) {
            return (10 && 0) + (0 && 4) + (0 && 0);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <23>  [+]
                            ├── <16>  [+]
                            │   ├── <9>  [&&]
                            │   │   ├── Constant Int [10]
                            │   │   ╰── Constant Int [0]
                            │   ╰── <15>  [&&]
                            │       ├── Constant Int [0]
                            │       ╰── Constant Int [4]
                            ╰── <22>  [&&]
                                ├── Constant Int [0]
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_and_short_circuit() {
    let src = r#"
        int main(void) {
            return 0 && (1 / 0);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <12>  [&&]
                            ├── Constant Int [0]
                            ╰── <11>  [/]
                                ├── Constant Int [1]
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_and_true() {
    let src = r#"
        int main(void) {
            return 1 && -1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <10>  [&&]
                            ├── Constant Int [1]
                            ╰── <9> Unary [-]
                                ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_associativity() {
    let src = r#"
        int main(void) {
            return 5 >= 0 > 1 <= 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <14>  [<=]
                            ├── <11>  [>]
                            │   ├── <8>  [>=]
                            │   │   ├── Constant Int [5]
                            │   │   ╰── Constant Int [0]
                            │   ╰── Constant Int [1]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_compare_arithmetic_results() {
    let src = r#"
        int main(void) {
            return ~2 * -2 == 1 + 5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <18>  [==]
                            ├── <12>  [*]
                            │   ├── <7> Unary [~]
                            │   │   ╰── Constant Int [2]
                            │   ╰── <11> Unary [-]
                            │       ╰── Constant Int [2]
                            ╰── <17>  [+]
                                ├── Constant Int [1]
                                ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_eq_false() {
    let src = r#"
        int main(void) {
            return 1 == 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [==]
                            ├── Constant Int [1]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_eq_precedence() {
    let src = r#"
        int main(void) {
            return 3 == 1 != 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [!=]
                            ├── <8>  [==]
                            │   ├── Constant Int [3]
                            │   ╰── Constant Int [1]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_eq_true() {
    let src = r#"
        int main(void) {
            return 1 == 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [==]
                            ├── Constant Int [1]
                            ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_extra_credit_bitwise_and_precedence() {
    let src = r#"
        int main(void) {
            return 5 & 7 == 5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [&]
                            ├── Constant Int [5]
                            ╰── <10>  [==]
                                ├── Constant Int [7]
                                ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_extra_credit_bitwise_or_precedence() {
    let src = r#"
        int main(void) {
            return 5 | 7 != 5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [|]
                            ├── Constant Int [5]
                            ╰── <10>  [!=]
                                ├── Constant Int [7]
                                ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_extra_credit_bitwise_shift_precedence() {
    let src = r#"
        int main(void) {
            return 20 >> 4 <= 3 << 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <14>  [<=]
                            ├── <8>  [>>]
                            │   ├── Constant Int [20]
                            │   ╰── Constant Int [4]
                            ╰── <13>  [<<]
                                ├── Constant Int [3]
                                ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_extra_credit_bitwise_xor_precedence() {
    let src = r#"
        int main(void) {
            return 5 ^ 7 < 5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [^]
                            ├── Constant Int [5]
                            ╰── <10>  [<]
                                ├── Constant Int [7]
                                ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_ge_false() {
    let src = r#"
        int main(void) {
            return 1 >= 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [>=]
                            ├── Constant Int [1]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_ge_true() {
    let src = r#"
        int main(void) {
            return (1 >= 1) + (1 >= -4);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <18>  [+]
                            ├── <9>  [>=]
                            │   ├── Constant Int [1]
                            │   ╰── Constant Int [1]
                            ╰── <17>  [>=]
                                ├── Constant Int [1]
                                ╰── <15> Unary [-]
                                    ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_gt_false() {
    let src = r#"
        int main(void) {
            return (1 > 2) + (1 > 1);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <16>  [+]
                            ├── <9>  [>]
                            │   ├── Constant Int [1]
                            │   ╰── Constant Int [2]
                            ╰── <15>  [>]
                                ├── Constant Int [1]
                                ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_gt_true() {
    let src = r#"
        int main(void) {
            return 15 > 10;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [>]
                            ├── Constant Int [15]
                            ╰── Constant Int [10]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_le_false() {
    let src = r#"
        int main(void) {
            return 1 <= -1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <10>  [<=]
                            ├── Constant Int [1]
                            ╰── <9> Unary [-]
                                ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_le_true() {
    let src = r#"
        int main(void) {
            return (0 <= 2) + (0 <= 0);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <16>  [+]
                            ├── <9>  [<=]
                            │   ├── Constant Int [0]
                            │   ╰── Constant Int [2]
                            ╰── <15>  [<=]
                                ├── Constant Int [0]
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_lt_false() {
    let src = r#"
        int main(void) {
            return 2 < 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [<]
                            ├── Constant Int [2]
                            ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_lt_true() {
    let src = r#"
        int main(void) {
            return 1 < 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [<]
                            ├── Constant Int [1]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_multi_short_circuit() {
    let src = r#"
        int main(void) {
            return 0 || 0 && (1 / 0);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <15>  [||]
                            ├── Constant Int [0]
                            ╰── <14>  [&&]
                                ├── Constant Int [0]
                                ╰── <13>  [/]
                                    ├── Constant Int [1]
                                    ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_ne_false() {
    let src = r#"
        int main(void) {
            return 0 != 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [!=]
                            ├── Constant Int [0]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_ne_true() {
    let src = r#"
        int main(void) {
            return -1 != -2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <12>  [!=]
                            ├── <7> Unary [-]
                            │   ╰── Constant Int [1]
                            ╰── <11> Unary [-]
                                ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_nested_ops() {
    let src = r#"
        int main(void) {
            return !-3;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <9> Unary [!]
                            ╰── <8> Unary [-]
                                ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_not() {
    let src = r#"
        int main(void) {
            return !5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <7> Unary [!]
                            ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_not_sum() {
    let src = r#"
        int main(void) {
            return !(4-4);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11> Unary [!]
                            ╰── <10>  [-]
                                ├── Constant Int [4]
                                ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_not_sum_2() {
    let src = r#"
        int main(void) {
            return !(3 - 44);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11> Unary [!]
                            ╰── <10>  [-]
                                ├── Constant Int [3]
                                ╰── Constant Int [44]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_not_zero() {
    let src = r#"
        int main(void) {
            return !0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <7> Unary [!]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_operate_on_booleans() {
    let src = r#"
        int main(void) {
            return ~(0 && 1) - -(4 || 3);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <20>  [-]
                            ├── <11> Unary [~]
                            │   ╰── <10>  [&&]
                            │       ├── Constant Int [0]
                            │       ╰── Constant Int [1]
                            ╰── <19> Unary [-]
                                ╰── <18>  [||]
                                    ├── Constant Int [4]
                                    ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_or_false() {
    let src = r#"
        int main(void) {
            return 0 || 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [||]
                            ├── Constant Int [0]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_or_short_circuit() {
    let src = r#"
        int main(void) {
            return 1 || (1 / 0);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <12>  [||]
                            ├── Constant Int [1]
                            ╰── <11>  [/]
                                ├── Constant Int [1]
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_or_true() {
    let src = r#"
        int main(void) {
            return (4 || 0) + (0 || 3) + (5 || 5);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <23>  [+]
                            ├── <16>  [+]
                            │   ├── <9>  [||]
                            │   │   ├── Constant Int [4]
                            │   │   ╰── Constant Int [0]
                            │   ╰── <15>  [||]
                            │       ├── Constant Int [0]
                            │       ╰── Constant Int [3]
                            ╰── <22>  [||]
                                ├── Constant Int [5]
                                ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_precedence() {
    let src = r#"
        int main(void) {
            return 1 || 0 && 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [||]
                            ├── Constant Int [1]
                            ╰── <10>  [&&]
                                ├── Constant Int [0]
                                ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_precedence_2() {
    let src = r#"
        int main(void) {
            return (1 || 0) && 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <12>  [&&]
                            ├── <9>  [||]
                            │   ├── Constant Int [1]
                            │   ╰── Constant Int [0]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_precedence_3() {
    let src = r#"
        int main(void) {
            return 2 == 2 >= 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [==]
                            ├── Constant Int [2]
                            ╰── <10>  [>=]
                                ├── Constant Int [2]
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_precedence_4() {
    let src = r#"
        int main(void) {
            return 2 == 2 || 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11>  [||]
                            ├── <8>  [==]
                            │   ├── Constant Int [2]
                            │   ╰── Constant Int [2]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_4_valid_precedence_5() {
    let src = r#"
        int main(void) {
            return (0 == 0 && 3 == 2 + 1 > 1) + 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <24>  [+]
                            ├── <21>  [&&]
                            │   ├── <8>  [==]
                            │   │   ├── Constant Int [0]
                            │   │   ╰── Constant Int [0]
                            │   ╰── <19>  [==]
                            │       ├── Constant Int [3]
                            │       ╰── <18>  [>]
                            │           ├── <15>  [+]
                            │           │   ├── Constant Int [2]
                            │           │   ╰── Constant Int [1]
                            │           ╰── Constant Int [1]
                            ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_parse_compound_invalid_operator() {
    assert_error(
        r#"
        int main(void) {
            int a = 0;
            a + = 1;
              //^ Expected expression, but found '='
            return a;
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_declare_keyword_as_var() {
    assert_error(
        r#"
        int main(void) {
            int return = 4;
              //^^^^^^ Expected identifier, but found 'return'
            return return + 1;
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_extra_credit_binary_decrement() {
    assert_error(
        r#"
        int main(void) {
            int a = 0;
            return a -- 1;
                      //^ Expected ';', but found '1'
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_extra_credit_binary_increment() {
    assert_error(
        r#"
        int main(void) {
            int a = 0;
            return a ++ 1;
                      //^ Expected ';', but found '1'
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_extra_credit_compound_initializer() {
    assert_error(
        r#"
        int main(void) {
            int a += 0;
                //^^ Expected ';', but found '+='
            return a;
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_extra_credit_increment_declaration() {
    assert_error(
        r#"
        int main(void) {
            int a++;
               //^^ Expected ';', but found '++'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_invalid_specifier() {
    assert_error(
        r#"
        int main(void) {
            int foo bar = 3;
                  //^^^ Expected ';', but found 'bar'
            return bar;
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_invalid_type() {
    assert_error(
        r#"
        int main(void) {
            ints a = 1;
               //^ Expected ';', but found 'a'
            return a;
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_invalid_variable_name() {
    assert_error(
        r#"
        int main(void)
        {
            int 10 = 0;
              //^^ Expected identifier, but found '10'
            return 10;
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_malformed_compound_assignment() {
    assert_error(
        r#"
        int main(void) {
            int a = 10;
            a =/ 1;
             //^ Expected expression, but found '/'
            return a;
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_malformed_decrement() {
    assert_error(
        r#"
        int main(void) {
            int a = 0;
            a - -;
               //^ Expected expression, but found ';'
            return a;
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_malformed_increment() {
    assert_error(
        r#"
        int main(void) {
            int a = 0;
            a + +;
              //^ Expected expression, but found '+'
            return a;
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_malformed_less_equal() {
    assert_error(
        r#"
        int main(void)
        {
            return 1 < = 2;
                     //^ Expected expression, but found '='
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_malformed_not_equal() {
    assert_error(
        r#"
        int main(void)
        {
            return 1 ! = 0;
                   //^ Expected ';', but found '!'
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_missing_semicolon() {
    assert_error(
        r#"
        int main(void) {
            int a = 2
            a = a + 4;
          //^ Expected ';', but found 'a'
            return a;
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_parse_return_in_assignment() {
    assert_error(
        r#"
        int main(void)
        {
            int 10 = return 0;
              //^^ Expected identifier, but found '10'
        }
    "#,
    );
}

#[test]
fn test_chapter_5_invalid_semantics_declared_after_use() {
    let src = r#"
        int main(void) {
            a = 1 + 2;
            int a;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── <12> Assign [=]
                    │   ├── <6> Var [a]
                    │   ╰── <11>  [+]
                    │       ├── Constant Int [1]
                    │       ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ╰── Type
                    │       ╰── Int
                    ╰── Return
                        ╰── <19> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_extra_credit_compound_invalid_lvalue() {
    let src = r#"
        int main(void) {
            int a = 0;
            -a += 1;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <17> Assign [+=]
                    │   ├── <14> Unary [-]
                    │   │   ╰── <13> Var [a]
                    │   ╰── Constant Int [1]
                    ╰── Return
                        ╰── <20> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_extra_credit_compound_invalid_lvalue_2() {
    let src = r#"
        int main(void) {
            int a = 10;
            (a += 1) -= 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ╰── <19> Assign [-=]
                        ├── <16> Assign [+=]
                        │   ├── <12> Var [a]
                        │   ╰── Constant Int [1]
                        ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_extra_credit_postfix_decr_non_lvalue() {
    let src = r#"
        int main(void) {
            int a = 10;
            return a++--;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ╰── Return
                        ╰── <16> Postfix [--]
                            ╰── <14> Postfix [++]
                                ╰── <12> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_extra_credit_postfix_incr_non_lvalue() {
    let src = r#"
        int main(void) {
            int a = 0;
            (a = 4)++;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── <18> Postfix [++]
                        ╰── <16> Assign [=]
                            ├── <12> Var [a]
                            ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_extra_credit_prefix_decr_non_lvalue() {
    let src = r#"
        int main(void) {
            return --3;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <7> Unary [--]
                            ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_extra_credit_prefix_incr_non_lvalue() {
    let src = r#"
        int main(void) {
            int a = 1;
            ++(a+1);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── <18> Unary [++]
                    │   ╰── <17>  [+]
                    │       ├── <13> Var [a]
                    │       ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_extra_credit_undeclared_bitwise_op() {
    let src = r#"
        int main(void){
            return a >> 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <9>  [>>]
                            ├── <6> Var [a]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_extra_credit_undeclared_compound_assignment() {
    let src = r#"
        int main(void) {
            a += 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── <9> Assign [+=]
                    │   ├── <6> Var [a]
                    │   ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_extra_credit_undeclared_compound_assignment_use() {
    let src = r#"
        int main(void) {
            int b = 10;
            b *= a;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── <16> Assign [*=]
                    │   ├── <12> Var [b]
                    │   ╰── <15> Var [a]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_extra_credit_undeclared_postfix_decr() {
    let src = r#"
        int main(void) {
            a--;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── <8> Postfix [--]
                    │   ╰── <6> Var [a]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_extra_credit_undeclared_prefix_incr() {
    let src = r#"
        int main(void) {
            a++;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── <8> Postfix [++]
                    │   ╰── <6> Var [a]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_invalid_lvalue() {
    let src = r#"
        int main(void) {
            int a = 2;
            a + 3 = 4;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── <18> Assign [=]
                    │   ├── <15>  [+]
                    │   │   ├── <12> Var [a]
                    │   │   ╰── Constant Int [3]
                    │   ╰── Constant Int [4]
                    ╰── Return
                        ╰── <21> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_invalid_lvalue_2() {
    let src = r#"
        int main(void) {
            int a = 2;
            !a = 3;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── <17> Assign [=]
                    │   ├── <14> Unary [!]
                    │   │   ╰── <13> Var [a]
                    │   ╰── Constant Int [3]
                    ╰── Return
                        ╰── <20> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_mixed_precedence_assignment() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 2;
            a = 3 * b = a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ╰── <29> Assign [=]
                        ├── <18> Var [a]
                        ╰── <28> Assign [=]
                            ├── <24>  [*]
                            │   ├── Constant Int [3]
                            │   ╰── <23> Var [b]
                            ╰── <27> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_redefine() {
    let src = r#"
        int main(void) {
            int a = 1;
            int a = 2;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ╰── Return
                        ╰── <18> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_undeclared_var() {
    let src = r#"
        int main(void) {
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <6> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_undeclared_var_and() {
    let src = r#"
        int main(void) {
            return 0 && a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <9>  [&&]
                            ├── Constant Int [0]
                            ╰── <8> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_undeclared_var_compare() {
    let src = r#"
        int main(void) {
            return a < 5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <9>  [<]
                            ├── <6> Var [a]
                            ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_undeclared_var_unary() {
    let src = r#"
        int main(void) {
            return -a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8> Unary [-]
                            ╰── <7> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_invalid_semantics_use_then_redefine() {
    let src = r#"
        int main(void) {
            int a = 0;
            return a;
            int a = 1;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Return
                    │   ╰── <12> Var [a]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ╰── Return
                        ╰── <21> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_add_variables() {
    let src = r#"
        int main(void) {
            int first_variable = 1;
            int second_variable = 2;
            return first_variable + second_variable;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── first_variable
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── second_variable
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ╰── Return
                        ╰── <22>  [+]
                            ├── <18> Var [first_variable]
                            ╰── <21> Var [second_variable]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_allocate_temps_and_vars() {
    let src = r#"
        int main(void) {
            int a = 2147483646;
            int b = 0;
            int c = a / 6 + !b;
            return c * 2 == a - 1431655762;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2147483646]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <30>  [+]
                    │           ├── <24>  [/]
                    │           │   ├── <21> Var [a]
                    │           │   ╰── Constant Int [6]
                    │           ╰── <29> Unary [!]
                    │               ╰── <28> Var [b]
                    ╰── Return
                        ╰── <44>  [==]
                            ├── <37>  [*]
                            │   ├── <34> Var [c]
                            │   ╰── Constant Int [2]
                            ╰── <43>  [-]
                                ├── <40> Var [a]
                                ╰── Constant Int [1431655762]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_assign() {
    let src = r#"
        int main(void) {
            int var0;
            var0 = 2;
            return var0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── var0
                    │   ╰── Type
                    │       ╰── Int
                    ├── <13> Assign [=]
                    │   ├── <10> Var [var0]
                    │   ╰── Constant Int [2]
                    ╰── Return
                        ╰── <16> Var [var0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_assign_val_in_initializer() {
    let src = r#"
        int main(void) {
            int a = a = 5;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <12> Assign [=]
                    │           ├── <9> Var [a]
                    │           ╰── Constant Int [5]
                    ╰── Return
                        ╰── <16> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_assignment_in_initializer() {
    let src = r#"
        int main(void) {
            int a;
            int b = a = 0;
            return b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ╰── Type
                    │       ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <16> Assign [=]
                    │           ├── <13> Var [a]
                    │           ╰── Constant Int [0]
                    ╰── Return
                        ╰── <20> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_assignment_lowest_precedence() {
    let src = r#"
        int main(void) {
            int a;
            a = 0 || 5;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ╰── Type
                    │       ╰── Int
                    ├── <16> Assign [=]
                    │   ├── <10> Var [a]
                    │   ╰── <15>  [||]
                    │       ├── Constant Int [0]
                    │       ╰── Constant Int [5]
                    ╰── Return
                        ╰── <19> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_empty_function_body() {
    let src = r#"
        int main(void) {
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_exp_then_declaration() {
    let src = r#"
        int main(void) {
            int a = -2593;
            a = a % 3;
            int b = -a;
            return b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <10> Unary [-]
                    │           ╰── Constant Int [2593]
                    ├── <21> Assign [=]
                    │   ├── <14> Var [a]
                    │   ╰── <20>  [%]
                    │       ├── <17> Var [a]
                    │       ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <29> Unary [-]
                    │           ╰── <28> Var [a]
                    ╰── Return
                        ╰── <33> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_bitwise_in_initializer() {
    let src = r#"
        int main(void) {
            int a = 15;
            int b = a ^ 5;
            return 1 | b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [15]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <18>  [^]
                    │           ├── <15> Var [a]
                    │           ╰── Constant Int [5]
                    ╰── Return
                        ╰── <25>  [|]
                            ├── Constant Int [1]
                            ╰── <24> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_bitwise_ops_vars() {
    let src = r#"
        int main(void) {
            int a = 3;
            int b = 5;
            int c = 8;
            return a & b | c;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [8]
                    ╰── Return
                        ╰── <32>  [|]
                            ├── <28>  [&]
                            │   ├── <24> Var [a]
                            │   ╰── <27> Var [b]
                            ╰── <31> Var [c]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_bitwise_shiftl_variable() {
    let src = r#"
        int main(void) {
            int x = 3;
            return x << 3;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ╰── Return
                        ╰── <15>  [<<]
                            ├── <12> Var [x]
                            ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_bitwise_shiftr_assign() {
    let src = r#"
        int main(void) {
            int var_to_shift = 1234;
            int x = 0;
            x = var_to_shift >> 4;
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── var_to_shift
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1234]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <25> Assign [=]
                    │   ├── <18> Var [x]
                    │   ╰── <24>  [>>]
                    │       ├── <21> Var [var_to_shift]
                    │       ╰── Constant Int [4]
                    ╰── Return
                        ╰── <28> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_assignment_chained() {
    let src = r#"
        int main(void) {
            int a = 250;
            int b = 200;
            int c = 100;
            int d = 75;
            int e = -25;
            int f = 0;
            int x = 0;
            x = a += b -= c *= d /= e %= f = -7;
            return a == 2250 && b == 2000 && c == -1800 && d == -18 && e == -4 &&
                   f == -7 && x == 2250;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [250]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [200]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [75]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── e
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <34> Unary [-]
                    │           ╰── Constant Int [25]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── f
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <79> Assign [=]
                    │   ├── <50> Var [x]
                    │   ╰── <78> Assign [+=]
                    │       ├── <53> Var [a]
                    │       ╰── <77> Assign [-=]
                    │           ├── <56> Var [b]
                    │           ╰── <76> Assign [*=]
                    │               ├── <59> Var [c]
                    │               ╰── <75> Assign [/=]
                    │                   ├── <62> Var [d]
                    │                   ╰── <74> Assign [&=]
                    │                       ├── <65> Var [e]
                    │                       ╰── <73> Assign [=]
                    │                           ├── <68> Var [f]
                    │                           ╰── <72> Unary [-]
                    │                               ╰── Constant Int [7]
                    ╰── Return
                        ╰── <135>  [&&]
                            ├── <128>  [&&]
                            │   ├── <119>  [&&]
                            │   │   ├── <110>  [&&]
                            │   │   │   ├── <101>  [&&]
                            │   │   │   │   ├── <92>  [&&]
                            │   │   │   │   │   ├── <85>  [==]
                            │   │   │   │   │   │   ├── <82> Var [a]
                            │   │   │   │   │   │   ╰── Constant Int [2250]
                            │   │   │   │   │   ╰── <91>  [==]
                            │   │   │   │   │       ├── <88> Var [b]
                            │   │   │   │   │       ╰── Constant Int [2000]
                            │   │   │   │   ╰── <100>  [==]
                            │   │   │   │       ├── <95> Var [c]
                            │   │   │   │       ╰── <99> Unary [-]
                            │   │   │   │           ╰── Constant Int [1800]
                            │   │   │   ╰── <109>  [==]
                            │   │   │       ├── <104> Var [d]
                            │   │   │       ╰── <108> Unary [-]
                            │   │   │           ╰── Constant Int [18]
                            │   │   ╰── <118>  [==]
                            │   │       ├── <113> Var [e]
                            │   │       ╰── <117> Unary [-]
                            │   │           ╰── Constant Int [4]
                            │   ╰── <127>  [==]
                            │       ├── <122> Var [f]
                            │       ╰── <126> Unary [-]
                            │           ╰── Constant Int [7]
                            ╰── <134>  [==]
                                ├── <131> Var [x]
                                ╰── Constant Int [2250]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_assignment_lowest_precedence() {
    let src = r#"
        int main(void) {
            int a = 10;
            int b = 12;
            a += 0 || b;
            b *= a && 0;
            int c = 14;
            c -= a || b;
            int d = 16;
            d /= c || d;
            return (a == 11 && b == 0 && c == 13 && d == 16);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [12]
                    ├── <25> Assign [+=]
                    │   ├── <18> Var [a]
                    │   ╰── <24>  [||]
                    │       ├── Constant Int [0]
                    │       ╰── <23> Var [b]
                    ├── <35> Assign [*=]
                    │   ├── <28> Var [b]
                    │   ╰── <34>  [&&]
                    │       ├── <31> Var [a]
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [14]
                    ├── <52> Assign [-=]
                    │   ├── <44> Var [c]
                    │   ╰── <51>  [||]
                    │       ├── <47> Var [a]
                    │       ╰── <50> Var [b]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [16]
                    ├── <69> Assign [/=]
                    │   ├── <61> Var [d]
                    │   ╰── <68>  [||]
                    │       ├── <64> Var [c]
                    │       ╰── <67> Var [d]
                    ╰── Return
                        ╰── <97>  [&&]
                            ├── <89>  [&&]
                            │   ├── <82>  [&&]
                            │   │   ├── <75>  [==]
                            │   │   │   ├── <72> Var [a]
                            │   │   │   ╰── Constant Int [11]
                            │   │   ╰── <81>  [==]
                            │   │       ├── <78> Var [b]
                            │   │       ╰── Constant Int [0]
                            │   ╰── <88>  [==]
                            │       ├── <85> Var [c]
                            │       ╰── Constant Int [13]
                            ╰── <95>  [==]
                                ├── <92> Var [d]
                                ╰── Constant Int [16]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_assignment_use_result() {
    let src = r#"
        int main(void) {
            int x = 1;
            int y = x += 3;
            return (x == 4 && y == 4);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <18> Assign [+=]
                    │           ├── <15> Var [x]
                    │           ╰── Constant Int [3]
                    ╰── Return
                        ╰── <33>  [&&]
                            ├── <25>  [==]
                            │   ├── <22> Var [x]
                            │   ╰── Constant Int [4]
                            ╰── <31>  [==]
                                ├── <28> Var [y]
                                ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_and() {
    let src = r#"
        int main(void) {
            int to_and = 3;
            to_and &= 6;
            return to_and;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── to_and
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── <15> Assign [&=]
                    │   ├── <12> Var [to_and]
                    │   ╰── Constant Int [6]
                    ╰── Return
                        ╰── <18> Var [to_and]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_assignment_lowest_precedence() {
    let src = r#"
        int main(void) {
            int a = 11;
            int b = 12;
            a &= 0 || b;
            b ^= a || 1;
            int c = 14;
            c |= a || b;
            int d = 16;
            d >>= c || d;
            int e = 18;
            e <<= c || d;
            return (a == 1 && b == 13 && c == 15 && d == 8 && e == 36);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [11]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [12]
                    ├── <25> Assign [&=]
                    │   ├── <18> Var [a]
                    │   ╰── <24>  [||]
                    │       ├── Constant Int [0]
                    │       ╰── <23> Var [b]
                    ├── <35> Assign [^=]
                    │   ├── <28> Var [b]
                    │   ╰── <34>  [||]
                    │       ├── <31> Var [a]
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [14]
                    ├── <52> Assign [|=]
                    │   ├── <44> Var [c]
                    │   ╰── <51>  [||]
                    │       ├── <47> Var [a]
                    │       ╰── <50> Var [b]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [16]
                    ├── <69> Assign [>>=]
                    │   ├── <61> Var [d]
                    │   ╰── <68>  [||]
                    │       ├── <64> Var [c]
                    │       ╰── <67> Var [d]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── e
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [18]
                    ├── <86> Assign [<<=]
                    │   ├── <78> Var [e]
                    │   ╰── <85>  [||]
                    │       ├── <81> Var [c]
                    │       ╰── <84> Var [d]
                    ╰── Return
                        ╰── <121>  [&&]
                            ├── <113>  [&&]
                            │   ├── <106>  [&&]
                            │   │   ├── <99>  [&&]
                            │   │   │   ├── <92>  [==]
                            │   │   │   │   ├── <89> Var [a]
                            │   │   │   │   ╰── Constant Int [1]
                            │   │   │   ╰── <98>  [==]
                            │   │   │       ├── <95> Var [b]
                            │   │   │       ╰── Constant Int [13]
                            │   │   ╰── <105>  [==]
                            │   │       ├── <102> Var [c]
                            │   │       ╰── Constant Int [15]
                            │   ╰── <112>  [==]
                            │       ├── <109> Var [d]
                            │       ╰── Constant Int [8]
                            ╰── <119>  [==]
                                ├── <116> Var [e]
                                ╰── Constant Int [36]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_chained() {
    let src = r#"
        int main(void) {
            int a = 250;
            int b = 200;
            int c = 100;
            int d = 75;
            int e = 50;
            int f = 25;
            int g = 10;
            int h = 1;
            int j = 0;
            int x = 0;
            x = a &= b *= c |= d = e ^= f += g >>= h <<= j = 1;
            return (a == 40 && b == 21800 && c == 109 && d == 41 && e == 41 &&
                    f == 27 && g == 2 && h == 2 && j == 1 && x == 40);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [250]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [200]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [75]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── e
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [50]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── f
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [25]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── g
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── h
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── j
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <105> Assign [=]
                    │   ├── <66> Var [x]
                    │   ╰── <104> Assign [&=]
                    │       ├── <69> Var [a]
                    │       ╰── <103> Assign [*=]
                    │           ├── <72> Var [b]
                    │           ╰── <102> Assign [|=]
                    │               ├── <75> Var [c]
                    │               ╰── <101> Assign [=]
                    │                   ├── <78> Var [d]
                    │                   ╰── <100> Assign [^=]
                    │                       ├── <81> Var [e]
                    │                       ╰── <99> Assign [+=]
                    │                           ├── <84> Var [f]
                    │                           ╰── <98> Assign [>>=]
                    │                               ├── <87> Var [g]
                    │                               ╰── <97> Assign [<<=]
                    │                                   ├── <90> Var [h]
                    │                                   ╰── <96> Assign [=]
                    │                                       ├── <93> Var [j]
                    │                                       ╰── Constant Int [1]
                    ╰── Return
                        ╰── <175>  [&&]
                            ├── <167>  [&&]
                            │   ├── <160>  [&&]
                            │   │   ├── <153>  [&&]
                            │   │   │   ├── <146>  [&&]
                            │   │   │   │   ├── <139>  [&&]
                            │   │   │   │   │   ├── <132>  [&&]
                            │   │   │   │   │   │   ├── <125>  [&&]
                            │   │   │   │   │   │   │   ├── <118>  [&&]
                            │   │   │   │   │   │   │   │   ├── <111>  [==]
                            │   │   │   │   │   │   │   │   │   ├── <108> Var [a]
                            │   │   │   │   │   │   │   │   │   ╰── Constant Int [40]
                            │   │   │   │   │   │   │   │   ╰── <117>  [==]
                            │   │   │   │   │   │   │   │       ├── <114> Var [b]
                            │   │   │   │   │   │   │   │       ╰── Constant Int [21800]
                            │   │   │   │   │   │   │   ╰── <124>  [==]
                            │   │   │   │   │   │   │       ├── <121> Var [c]
                            │   │   │   │   │   │   │       ╰── Constant Int [109]
                            │   │   │   │   │   │   ╰── <131>  [==]
                            │   │   │   │   │   │       ├── <128> Var [d]
                            │   │   │   │   │   │       ╰── Constant Int [41]
                            │   │   │   │   │   ╰── <138>  [==]
                            │   │   │   │   │       ├── <135> Var [e]
                            │   │   │   │   │       ╰── Constant Int [41]
                            │   │   │   │   ╰── <145>  [==]
                            │   │   │   │       ├── <142> Var [f]
                            │   │   │   │       ╰── Constant Int [27]
                            │   │   │   ╰── <152>  [==]
                            │   │   │       ├── <149> Var [g]
                            │   │   │       ╰── Constant Int [2]
                            │   │   ╰── <159>  [==]
                            │   │       ├── <156> Var [h]
                            │   │       ╰── Constant Int [2]
                            │   ╰── <166>  [==]
                            │       ├── <163> Var [j]
                            │       ╰── Constant Int [1]
                            ╰── <173>  [==]
                                ├── <170> Var [x]
                                ╰── Constant Int [40]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_or() {
    let src = r#"
        int main(void) {
            int to_or = 1;
            to_or |= 30;
            return to_or;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── to_or
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── <15> Assign [|=]
                    │   ├── <12> Var [to_or]
                    │   ╰── Constant Int [30]
                    ╰── Return
                        ╰── <18> Var [to_or]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_shiftl() {
    let src = r#"
        int main(void) {
            int to_shiftl = 3;
            to_shiftl <<= 4;
            return to_shiftl;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── to_shiftl
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── <15> Assign [<<=]
                    │   ├── <12> Var [to_shiftl]
                    │   ╰── Constant Int [4]
                    ╰── Return
                        ╰── <18> Var [to_shiftl]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_shiftr() {
    let src = r#"
        int main(void) {
            int to_shiftr = 382574;
            to_shiftr >>= 4;
            return to_shiftr;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── to_shiftr
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [382574]
                    ├── <15> Assign [>>=]
                    │   ├── <12> Var [to_shiftr]
                    │   ╰── Constant Int [4]
                    ╰── Return
                        ╰── <18> Var [to_shiftr]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_bitwise_xor() {
    let src = r#"
        int main(void) {
            int to_xor = 7;
            to_xor ^= 5;
            return to_xor;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── to_xor
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [7]
                    ├── <15> Assign [^=]
                    │   ├── <12> Var [to_xor]
                    │   ╰── Constant Int [5]
                    ╰── Return
                        ╰── <18> Var [to_xor]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_divide() {
    let src = r#"
        int main(void) {
            int to_divide = 8;
            to_divide /= 4;
            return to_divide;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── to_divide
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [8]
                    ├── <15> Assign [/=]
                    │   ├── <12> Var [to_divide]
                    │   ╰── Constant Int [4]
                    ╰── Return
                        ╰── <18> Var [to_divide]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_minus() {
    let src = r#"
        int main(void) {
            int to_subtract = 10;
            to_subtract -= 8;
            return to_subtract;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── to_subtract
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── <15> Assign [-=]
                    │   ├── <12> Var [to_subtract]
                    │   ╰── Constant Int [8]
                    ╰── Return
                        ╰── <18> Var [to_subtract]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_mod() {
    let src = r#"
        int main(void) {
            int to_mod = 5;
            to_mod %= 3;
            return to_mod;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── to_mod
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [5]
                    ├── <15> Assign [&=]
                    │   ├── <12> Var [to_mod]
                    │   ╰── Constant Int [3]
                    ╰── Return
                        ╰── <18> Var [to_mod]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_multiply() {
    let src = r#"
        int main(void) {
            int to_multiply = 4;
            to_multiply *= 3;
            return to_multiply;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── to_multiply
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [4]
                    ├── <15> Assign [*=]
                    │   ├── <12> Var [to_multiply]
                    │   ╰── Constant Int [3]
                    ╰── Return
                        ╰── <18> Var [to_multiply]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_compound_plus() {
    let src = r#"
        int main(void) {
            int to_add = 0;
            to_add += 4;
            return to_add;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── to_add
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <15> Assign [+=]
                    │   ├── <12> Var [to_add]
                    │   ╰── Constant Int [4]
                    ╰── Return
                        ╰── <18> Var [to_add]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_incr_expression_statement() {
    let src = r#"
        int main(void) {
            int a = 0;
            int b = 0;
            a++;
            ++a;
            ++a;
            b--;
            --b;
            return (a == 3 && b == -2);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <20> Postfix [++]
                    │   ╰── <18> Var [a]
                    ├── <25> Unary [++]
                    │   ╰── <24> Var [a]
                    ├── <30> Unary [++]
                    │   ╰── <29> Var [a]
                    ├── <35> Postfix [--]
                    │   ╰── <33> Var [b]
                    ├── <40> Unary [--]
                    │   ╰── <39> Var [b]
                    ╰── Return
                        ╰── <56>  [&&]
                            ├── <46>  [==]
                            │   ├── <43> Var [a]
                            │   ╰── Constant Int [3]
                            ╰── <54>  [==]
                                ├── <49> Var [b]
                                ╰── <53> Unary [-]
                                    ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_incr_in_binary_expr() {
    let src = r#"
        int main(void) {
            int a = 2;
            int b = 3 + a++;
            int c = 4 + ++b;
            return (a == 3 && b == 6 && c == 10);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <20>  [+]
                    │           ├── Constant Int [3]
                    │           ╰── <19> Postfix [++]
                    │               ╰── <17> Var [a]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <32>  [+]
                    │           ├── Constant Int [4]
                    │           ╰── <31> Unary [++]
                    │               ╰── <30> Var [b]
                    ╰── Return
                        ╰── <54>  [&&]
                            ├── <46>  [&&]
                            │   ├── <39>  [==]
                            │   │   ├── <36> Var [a]
                            │   │   ╰── Constant Int [3]
                            │   ╰── <45>  [==]
                            │       ├── <42> Var [b]
                            │       ╰── Constant Int [6]
                            ╰── <52>  [==]
                                ├── <49> Var [c]
                                ╰── Constant Int [10]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_incr_parenthesized() {
    let src = r#"
        
        int main(void) {
            int a = 1;
            int b = 2;
            int c = -++(a);
            int d = !(b)--;
            return (a == 2 && b == 1 && c == -2 && d == 0);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <26> Unary [-]
                    │           ╰── <25> Unary [++]
                    │               ╰── <24> Var [a]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <38> Unary [!]
                    │           ╰── <37> Postfix [--]
                    │               ╰── <35> Var [b]
                    ╰── Return
                        ╰── <69>  [&&]
                            ├── <61>  [&&]
                            │   ├── <52>  [&&]
                            │   │   ├── <45>  [==]
                            │   │   │   ├── <42> Var [a]
                            │   │   │   ╰── Constant Int [2]
                            │   │   ╰── <51>  [==]
                            │   │       ├── <48> Var [b]
                            │   │       ╰── Constant Int [1]
                            │   ╰── <60>  [==]
                            │       ├── <55> Var [c]
                            │       ╰── <59> Unary [-]
                            │           ╰── Constant Int [2]
                            ╰── <67>  [==]
                                ├── <64> Var [d]
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_postfix_incr_and_decr() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 2;
            int c = a++;
            int d = b--;
            return (a == 2 && b == 1 && c == 1 && d == 2);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <23> Postfix [++]
                    │           ╰── <21> Var [a]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <32> Postfix [--]
                    │           ╰── <30> Var [b]
                    ╰── Return
                        ╰── <61>  [&&]
                            ├── <53>  [&&]
                            │   ├── <46>  [&&]
                            │   │   ├── <39>  [==]
                            │   │   │   ├── <36> Var [a]
                            │   │   │   ╰── Constant Int [2]
                            │   │   ╰── <45>  [==]
                            │   │       ├── <42> Var [b]
                            │   │       ╰── Constant Int [1]
                            │   ╰── <52>  [==]
                            │       ├── <49> Var [c]
                            │       ╰── Constant Int [1]
                            ╰── <59>  [==]
                                ├── <56> Var [d]
                                ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_postfix_precedence() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = !a++;
            return (a == 2 && b == 0);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <19> Unary [!]
                    │           ╰── <18> Postfix [++]
                    │               ╰── <16> Var [a]
                    ╰── Return
                        ╰── <34>  [&&]
                            ├── <26>  [==]
                            │   ├── <23> Var [a]
                            │   ╰── Constant Int [2]
                            ╰── <32>  [==]
                                ├── <29> Var [b]
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_extra_credit_prefix_incr_and_decr() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 2;
            int c = ++a;
            int d = --b;
            return (a == 2 && b == 1 && c == 2 && d == 1);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <23> Unary [++]
                    │           ╰── <22> Var [a]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <32> Unary [--]
                    │           ╰── <31> Var [b]
                    ╰── Return
                        ╰── <61>  [&&]
                            ├── <53>  [&&]
                            │   ├── <46>  [&&]
                            │   │   ├── <39>  [==]
                            │   │   │   ├── <36> Var [a]
                            │   │   │   ╰── Constant Int [2]
                            │   │   ╰── <45>  [==]
                            │   │       ├── <42> Var [b]
                            │   │       ╰── Constant Int [1]
                            │   ╰── <52>  [==]
                            │       ├── <49> Var [c]
                            │       ╰── Constant Int [2]
                            ╰── <59>  [==]
                                ├── <56> Var [d]
                                ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_kw_var_names() {
    let src = r#"
        int main(void) {
            int return_val = 3;
            int void2 = 2;
            return return_val + void2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── return_val
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── void2
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ╰── Return
                        ╰── <22>  [+]
                            ├── <18> Var [return_val]
                            ╰── <21> Var [void2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_local_var_missing_return() {
    let src = r#"
        int main(void) {
            int a = 3;
            a = a + 5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ╰── <19> Assign [=]
                        ├── <12> Var [a]
                        ╰── <18>  [+]
                            ├── <15> Var [a]
                            ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_mixed_precedence_assignment() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 0;
            a = 3 * (b = a);
            return a + b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <30> Assign [=]
                    │   ├── <18> Var [a]
                    │   ╰── <29>  [*]
                    │       ├── Constant Int [3]
                    │       ╰── <28> Assign [=]
                    │           ├── <23> Var [b]
                    │           ╰── <26> Var [a]
                    ╰── Return
                        ╰── <37>  [+]
                            ├── <33> Var [a]
                            ╰── <36> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_non_short_circuit_or() {
    let src = r#"
        int main(void) {
            int a = 0;
            0 || (a = 1);
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <19>  [||]
                    │   ├── Constant Int [0]
                    │   ╰── <18> Assign [=]
                    │       ├── <14> Var [a]
                    │       ╰── Constant Int [1]
                    ╰── Return
                        ╰── <22> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_null_statement() {
    let src = r#"
        int main(void) {
            ;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Empty
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_null_then_return() {
    let src = r#"
        int main(void) {
            ;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Empty
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_return_var() {
    let src = r#"
        int main(void) {
            int a = 2;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ╰── Return
                        ╰── <12> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_short_circuit_and_fail() {
    let src = r#"
        int main(void) {
            int a = 0;
            0 && (a = 5);
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <19>  [&&]
                    │   ├── Constant Int [0]
                    │   ╰── <18> Assign [=]
                    │       ├── <14> Var [a]
                    │       ╰── Constant Int [5]
                    ╰── Return
                        ╰── <22> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_short_circuit_or() {
    let src = r#"
        int main(void) {
            int a = 0;
            1 || (a = 1);
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <19>  [||]
                    │   ├── Constant Int [1]
                    │   ╰── <18> Assign [=]
                    │       ├── <14> Var [a]
                    │       ╰── Constant Int [1]
                    ╰── Return
                        ╰── <22> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_unused_exp() {
    let src = r#"
        int main(void) {
            2 + 2;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── <8>  [+]
                    │   ├── Constant Int [2]
                    │   ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_use_assignment_result() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 2;
            return a = b = 4;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ╰── Return
                        ╰── <25> Assign [=]
                            ├── <18> Var [a]
                            ╰── <24> Assign [=]
                                ├── <21> Var [b]
                                ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_5_valid_use_val_in_own_initializer() {
    let src = r#"
        int main(void) {
            int a = 0 && a;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <12>  [&&]
                    │           ├── Constant Int [0]
                    │           ╰── <11> Var [a]
                    ╰── Return
                        ╰── <16> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_invalid_parse_declaration_as_statement() {
    assert_error(
        r#"
        int main(void) {
            if (5)
                int i = 0;
              //^^^ Expected statement, but found 'int'
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_empty_if_body() {
    assert_error(
        r#"
        int main(void) {
            if (0) else return 0;
                 //^^^^ Expected statement, but found 'else'
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_extra_credit_goto_without_label() {
    assert_error(
        r#"
        int main(void) {
            goto;
              //^ Expected identifier, but found ';'
        lbl:
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_extra_credit_kw_label() {
    assert_error(
        r#"
        int main(void) {
            return: return 0;
                //^ Expected expression, but found ':'
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_extra_credit_label_declaration() {
    assert_error(
        r#"
        int main(void) {
        label:
            int a = 0;
          //^^^ Expected statement, but found 'int'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_extra_credit_label_expression_clause() {
    assert_error(
        r#"
        int main(void) {
            1 && label: 2;
                    //^ Expected ';', but found ':'
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_extra_credit_label_outside_function() {
    assert_error(
        r#"
        label:
      //^^^^^ Expected type specifier
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_extra_credit_label_without_statement() {
    assert_error(
        r#"
        int main(void) {
            foo:
        }
      //^ Expected statement, but found '}'
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_extra_credit_parenthesized_label() {
    assert_error(
        r#"
        int main(void) {
            goto(a);
              //^ Expected identifier, but found '('
        a:
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_if_assignment() {
    assert_error(
        r#"
        int main(void) {
            int flag = 0;
            int a = if (flag)
                  //^^ Expected expression, but found 'if'
                        2;
                    else
                        3;
            return a;
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_if_no_parens() {
    assert_error(
        r#"
        int main(void) {
            if 0 return 1;
             //^ Expected '(', but found '0'
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_incomplete_ternary() {
    assert_error(
        r#"
        int main(void) {
            return 1 ? 2;
                      //^ Expected ':', but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_malformed_ternary() {
    assert_error(
        r#"
        int main(void) {
            return 1 ? 2 : 3 : 4;
                           //^ Expected ';', but found ':'
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_malformed_ternary_2() {
    assert_error(
        r#"
        int main(void) {
            return 1 ? 2 ? 3 : 4;
                              //^ Expected ':', but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_mismatched_nesting() {
    assert_error(
        r#"
        int main(void) {
            int a = 0;
            if (1)
                return 1;
            else
                return 2;
            else
          //^^^^ Expected statement, but found 'else'
                return 3;
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_parse_wrong_ternary_delimiter() {
    assert_error(
        r#"
        int main(void) {
            int x = 10;
            return x ? 1 = 2;
                          //^ Expected ':', but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_6_invalid_semantics_extra_credit_duplicate_labels() {
    let src = r#"
        
        int main(void) {
            int x = 0;
        label:
            x = 1;
        label:
            return 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Label [label]
                    │   ╰── <16> Assign [=]
                    │       ├── <13> Var [x]
                    │       ╰── Constant Int [1]
                    ╰── Label [label]
                        ╰── Return
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_invalid_semantics_extra_credit_goto_missing_label() {
    let src = r#"
        int main(void) {
            goto label;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Goto [label]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_invalid_semantics_extra_credit_goto_variable() {
    let src = r#"
        int main(void) {
            int a;
            goto a;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ╰── Type
                    │       ╰── Int
                    ├── Goto [a]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_invalid_semantics_extra_credit_undeclared_var_in_labeled_statement() {
    let src = r#"
        int main(void) {
        lbl:
            return a;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Label [lbl]
                    │   ╰── Return
                    │       ╰── <7> Var [a]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_invalid_semantics_extra_credit_use_label_as_variable() {
    let src = r#"
        int main(void) {
            int x = 0;
            a:
            x = a;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Label [a]
                    │   ╰── <17> Assign [=]
                    │       ├── <13> Var [x]
                    │       ╰── <16> Var [a]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_invalid_semantics_invalid_var_in_if() {
    let src = r#"
        int main(void) {
            if (1)
                return c;
            int c = 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <7> Var [c]
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── c
                        ├── Type
                        │   ╰── Int
                        ╰── Initializer
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_invalid_semantics_ternary_assign() {
    let src = r#"
        int main(void) {
            int a = 2;
            int b = 1;
            a > b ? a = 1 : a = 0;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── <33> Assign [=]
                    │   ├── <{node_id}> Conditional [?]
                    │   │   ├── <22>  [>]
                    │   │   │   ├── <18> Var [a]
                    │   │   │   ╰── <21> Var [b]
                    │   │   ├── Then
                    │   │   │   ╰── <27> Assign [=]
                    │   │   │       ├── <24> Var [a]
                    │   │   │       ╰── Constant Int [1]
                    │   │   ╰── Else
                    │   │       ╰── <29> Var [a]
                    │   ╰── Constant Int [0]
                    ╰── Return
                        ╰── <36> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_invalid_semantics_undeclared_var_in_ternary() {
    let src = r#"
        int main(void) {
            return a > 0 ? 1 : 2;
            int a = 5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Return
                    │   ╰── <{node_id}> Conditional [?]
                    │       ├── <9>  [>]
                    │       │   ├── <6> Var [a]
                    │       │   ╰── Constant Int [0]
                    │       ├── Then
                    │       │   ╰── Constant Int [1]
                    │       ╰── Else
                    │           ╰── Constant Int [2]
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── a
                        ├── Type
                        │   ╰── Int
                        ╰── Initializer
                            ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_assign_ternary() {
    let src = r#"
        int main(void) {
            int a = 0;
            a = 1 ? 2 : 3;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <18> Assign [=]
                    │   ├── <12> Var [a]
                    │   ╰── <{node_id}> Conditional [?]
                    │       ├── Constant Int [1]
                    │       ├── Then
                    │       │   ╰── Constant Int [2]
                    │       ╰── Else
                    │           ╰── Constant Int [3]
                    ╰── Return
                        ╰── <21> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_binary_condition() {
    let src = r#"
        int main(void) {
            if (1 + 2 == 3)
                return 5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── If
                        ├── Condition
                        │   ╰── <11>  [==]
                        │       ├── <8>  [+]
                        │       │   ├── Constant Int [1]
                        │       │   ╰── Constant Int [2]
                        │       ╰── Constant Int [3]
                        ╰── Then
                            ╰── Return
                                ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_binary_false_condition() {
    let src = r#"
        int main(void) {
            if (1 + 2 == 4)
                return 5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── If
                        ├── Condition
                        │   ╰── <11>  [==]
                        │       ├── <8>  [+]
                        │       │   ├── Constant Int [1]
                        │       │   ╰── Constant Int [2]
                        │       ╰── Constant Int [4]
                        ╰── Then
                            ╰── Return
                                ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_else() {
    let src = r#"
        int main(void) {
            int a = 0;
            if (a)
                return 1;
            else
                return 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── If
                        ├── Condition
                        │   ╰── <12> Var [a]
                        ├── Then
                        │   ╰── Return
                        │       ╰── Constant Int [1]
                        ╰── Else
                            ╰── Return
                                ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_bitwise_ternary() {
    let src = r#"
        int main(void) {
            int result;
            1 ^ 1 ? result = 4 : (result = 5);
            return result;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ╰── Type
                    │       ╰── Int
                    ├── <{node_id}> Conditional [?]
                    │   ├── <12>  [^]
                    │   │   ├── Constant Int [1]
                    │   │   ╰── Constant Int [1]
                    │   ├── Then
                    │   │   ╰── <17> Assign [=]
                    │   │       ├── <14> Var [result]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Else
                    │       ╰── <23> Assign [=]
                    │           ├── <19> Var [result]
                    │           ╰── Constant Int [5]
                    ╰── Return
                        ╰── <27> Var [result]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_compound_assign_ternary() {
    let src = r#"
        int main(void) {
            int a = 4;
            a *= 1 ? 2 : 3;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [4]
                    ├── <18> Assign [*=]
                    │   ├── <12> Var [a]
                    │   ╰── <{node_id}> Conditional [?]
                    │       ├── Constant Int [1]
                    │       ├── Then
                    │       │   ╰── Constant Int [2]
                    │       ╰── Else
                    │           ╰── Constant Int [3]
                    ╰── Return
                        ╰── <21> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_compound_if_expression() {
    let src = r#"
        int main(void) {
            int a = 0;
            if (a += 1)
                return a;
            return 10;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <15> Assign [+=]
                    │   │       ├── <12> Var [a]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── <17> Var [a]
                    ╰── Return
                        ╰── Constant Int [10]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_after_declaration() {
    let src = r#"
        int main(void) {
            int x = 1;
            goto post_declaration;
            int i = (x = 0);
        post_declaration:
            i = 5;
            return (x == 1 && i == 5);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── Goto [post_declaration]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <21> Assign [=]
                    │           ├── <17> Var [x]
                    │           ╰── Constant Int [0]
                    ├── Label [post_declaration]
                    │   ╰── <29> Assign [=]
                    │       ├── <26> Var [i]
                    │       ╰── Constant Int [5]
                    ╰── Return
                        ╰── <44>  [&&]
                            ├── <36>  [==]
                            │   ├── <33> Var [x]
                            │   ╰── Constant Int [1]
                            ╰── <42>  [==]
                                ├── <39> Var [i]
                                ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_backwards() {
    let src = r#"
        int main(void) {
            if (0)
            label:
                return 5;
            goto label;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Label [label]
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── Goto [label]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_label() {
    let src = r#"
        int main(void) {
            goto label;
            return 0;
        label:
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Goto [label]
                    ├── Return
                    │   ╰── Constant Int [0]
                    ╰── Label [label]
                        ╰── Return
                            ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_label_and_var() {
    let src = r#"
        int main(void) {
            int ident = 5;
            goto ident;
            return 0;
        ident:
            return ident;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ident
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [5]
                    ├── Goto [ident]
                    ├── Return
                    │   ╰── Constant Int [0]
                    ╰── Label [ident]
                        ╰── Return
                            ╰── <17> Var [ident]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_label_main() {
    let src = r#"
        int main(void) {
            goto main;
            return 5;
        main:
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Goto [main]
                    ├── Return
                    │   ╰── Constant Int [5]
                    ╰── Label [main]
                        ╰── Return
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_label_main_2() {
    let src = r#"
        int main(void) {
            goto _main;
            return 0;
            _main:
                return 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Goto [_main]
                    ├── Return
                    │   ╰── Constant Int [0]
                    ╰── Label [_main]
                        ╰── Return
                            ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_goto_nested_label() {
    let src = r#"
        int main(void) {
            goto labelB;
            labelA:
                labelB:
                    return 5;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Goto [labelB]
                    ├── Label [labelA]
                    │   ╰── Label [labelB]
                    │       ╰── Return
                    │           ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_label_all_statements() {
    let src = r#"
        int main(void) {
            int a = 1;
        label_if:
            if (a)
                goto label_expression;
            else
                goto label_empty;
        label_goto:
            goto label_return;
            if (0)
            label_expression:
                a = 0;
            goto label_if;
        label_return:
            return a;
        label_empty:;
            a = 100;
            goto label_goto;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── Label [label_if]
                    │   ╰── If
                    │       ├── Condition
                    │       │   ╰── <13> Var [a]
                    │       ├── Then
                    │       │   ╰── Goto [label_expression]
                    │       ╰── Else
                    │           ╰── Goto [label_empty]
                    ├── Label [label_goto]
                    │   ╰── Goto [label_return]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Label [label_expression]
                    │           ╰── <30> Assign [=]
                    │               ├── <27> Var [a]
                    │               ╰── Constant Int [0]
                    ├── Goto [label_if]
                    ├── Label [label_return]
                    │   ╰── Return
                    │       ╰── <38> Var [a]
                    ├── Label [label_empty]
                    │   ╰── Empty
                    ├── <48> Assign [=]
                    │   ├── <45> Var [a]
                    │   ╰── Constant Int [100]
                    ╰── Goto [label_goto]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_label_token() {
    let src = r#"
        int main(void) {
            goto _foo_1_;
            return 0;
        _foo_1_:
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Goto [_foo_1_]
                    ├── Return
                    │   ╰── Constant Int [0]
                    ╰── Label [_foo_1_]
                        ╰── Return
                            ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_lh_compound_assignment() {
    let src = r#"
        int main(void) {
            int x = 10;
            (x -= 1) ? (x /= 2) : 0;
            return x == 4;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── <{node_id}> Conditional [?]
                    │   ├── <16> Assign [-=]
                    │   │   ├── <12> Var [x]
                    │   │   ╰── Constant Int [1]
                    │   ├── Then
                    │   │   ╰── <22> Assign [/=]
                    │   │       ├── <18> Var [x]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Else
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <30>  [==]
                            ├── <27> Var [x]
                            ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_postfix_if() {
    let src = r#"
        int main(void) {
            int a = 0;
            if (a--)
                return 0;
            else if (a--)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <14> Postfix [--]
                    │   │       ╰── <12> Var [a]
                    │   ├── Then
                    │   │   ╰── Return
                    │   │       ╰── Constant Int [0]
                    │   ╰── Else
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <20> Postfix [--]
                    │           │       ╰── <18> Var [a]
                    │           ╰── Then
                    │               ╰── Return
                    │                   ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_postfix_in_ternary() {
    let src = r#"
        int main(void) {
            int x = 10;
            x - 10 ? 0 : x--;
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── <{node_id}> Conditional [?]
                    │   ├── <15>  [-]
                    │   │   ├── <12> Var [x]
                    │   │   ╰── Constant Int [10]
                    │   ├── Then
                    │   │   ╰── Constant Int [0]
                    │   ╰── Else
                    │       ╰── <20> Postfix [--]
                    │           ╰── <18> Var [x]
                    ╰── Return
                        ╰── <24> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_prefix_if() {
    let src = r#"
        int main(void) {
            int a = -1;
            if (++a)
                return 0;
            else if (++a)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <10> Unary [-]
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <16> Unary [++]
                    │   │       ╰── <15> Var [a]
                    │   ├── Then
                    │   │   ╰── Return
                    │   │       ╰── Constant Int [0]
                    │   ╰── Else
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <22> Unary [++]
                    │           │       ╰── <21> Var [a]
                    │           ╰── Then
                    │               ╰── Return
                    │                   ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_prefix_in_ternary() {
    let src = r#"
        int main(void) {
            int a = 0;
            return (++a ? ++a : 0);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <{node_id}> Conditional [?]
                            ├── <14> Unary [++]
                            │   ╰── <13> Var [a]
                            ├── Then
                            │   ╰── <18> Unary [++]
                            │       ╰── <17> Var [a]
                            ╰── Else
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_unused_label() {
    let src = r#"
        int main(void) {
        unused:
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Label [unused]
                        ╰── Return
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_extra_credit_whitespace_after_label() {
    let src = r#"
        int main(void) {
            goto label2;
            return 0;
            label1 :
            label2
            :
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Goto [label2]
                    ├── Return
                    │   ╰── Constant Int [0]
                    ╰── Label [label1]
                        ╰── Label [label2]
                            ╰── Return
                                ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_nested() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 0;
            if (a)
                b = 1;
            else if (b)
                b = 2;
            return b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <18> Var [a]
                    │   ├── Then
                    │   │   ╰── <23> Assign [=]
                    │   │       ├── <20> Var [b]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Else
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <26> Var [b]
                    │           ╰── Then
                    │               ╰── <31> Assign [=]
                    │                   ├── <28> Var [b]
                    │                   ╰── Constant Int [2]
                    ╰── Return
                        ╰── <36> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_nested_2() {
    let src = r#"
        int main(void) {
            int a = 0;
            int b = 1;
            if (a)
                b = 1;
            else if (~b)
                b = 2;
            return b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <18> Var [a]
                    │   ├── Then
                    │   │   ╰── <23> Assign [=]
                    │   │       ├── <20> Var [b]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Else
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <28> Unary [~]
                    │           │       ╰── <27> Var [b]
                    │           ╰── Then
                    │               ╰── <33> Assign [=]
                    │                   ├── <30> Var [b]
                    │                   ╰── Constant Int [2]
                    ╰── Return
                        ╰── <38> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_nested_3() {
    let src = r#"
        int main(void) {
            int a = 0;
            if ( (a = 1) )
                if (a == 1)
                    a = 3;
                else
                    a = 4;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <16> Assign [=]
                    │   │       ├── <12> Var [a]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <21>  [==]
                    │           │       ├── <18> Var [a]
                    │           │       ╰── Constant Int [1]
                    │           ├── Then
                    │           │   ╰── <26> Assign [=]
                    │           │       ├── <23> Var [a]
                    │           │       ╰── Constant Int [3]
                    │           ╰── Else
                    │               ╰── <32> Assign [=]
                    │                   ├── <29> Var [a]
                    │                   ╰── Constant Int [4]
                    ╰── Return
                        ╰── <37> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_nested_4() {
    let src = r#"
        int main(void) {
            int a = 0;
            if (!a)
                if (3 / 4)
                    a = 3;
                else
                    a = 8 / 2;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <14> Unary [!]
                    │   │       ╰── <13> Var [a]
                    │   ╰── Then
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <18>  [/]
                    │           │       ├── Constant Int [3]
                    │           │       ╰── Constant Int [4]
                    │           ├── Then
                    │           │   ╰── <23> Assign [=]
                    │           │       ├── <20> Var [a]
                    │           │       ╰── Constant Int [3]
                    │           ╰── Else
                    │               ╰── <32> Assign [=]
                    │                   ├── <26> Var [a]
                    │                   ╰── <31>  [/]
                    │                       ├── Constant Int [8]
                    │                       ╰── Constant Int [2]
                    ╰── Return
                        ╰── <37> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_nested_5() {
    let src = r#"
        int main(void) {
            int a = 0;
            if (0)
                if (0)
                    a = 3;
                else
                    a = 4;
            else
                a = 1;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── Constant Int [0]
                    │   ├── Then
                    │   │   ╰── If
                    │   │       ├── Condition
                    │   │       │   ╰── Constant Int [0]
                    │   │       ├── Then
                    │   │       │   ╰── <17> Assign [=]
                    │   │       │       ├── <14> Var [a]
                    │   │       │       ╰── Constant Int [3]
                    │   │       ╰── Else
                    │   │           ╰── <23> Assign [=]
                    │   │               ├── <20> Var [a]
                    │   │               ╰── Constant Int [4]
                    │   ╰── Else
                    │       ╰── <30> Assign [=]
                    │           ├── <27> Var [a]
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── <34> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_not_taken() {
    let src = r#"
        int main(void) {
            int a = 0;
            int b = 0;
            if (a)
                b = 1;
            return b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <18> Var [a]
                    │   ╰── Then
                    │       ╰── <23> Assign [=]
                    │           ├── <20> Var [b]
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── <27> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_null_body() {
    let src = r#"
        int main(void) {
            int x = 0;
            if (0)
                ;
            else
                x = 1;
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── Constant Int [0]
                    │   ├── Then
                    │   │   ╰── Empty
                    │   ╰── Else
                    │       ╰── <17> Assign [=]
                    │           ├── <14> Var [x]
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── <21> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_if_taken() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 0;
            if (a)
                b = 1;
            return b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <18> Var [a]
                    │   ╰── Then
                    │       ╰── <23> Assign [=]
                    │           ├── <20> Var [b]
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── <27> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_lh_assignment() {
    let src = r#"
        int main(void) {
            int x = 10;
            int y = 0;
            y = (x = 5) ? x : 2;
            return (x == 5 && y == 5);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <30> Assign [=]
                    │   ├── <18> Var [y]
                    │   ╰── <{node_id}> Conditional [?]
                    │       ├── <25> Assign [=]
                    │       │   ├── <21> Var [x]
                    │       │   ╰── Constant Int [5]
                    │       ├── Then
                    │       │   ╰── <27> Var [x]
                    │       ╰── Else
                    │           ╰── Constant Int [2]
                    ╰── Return
                        ╰── <44>  [&&]
                            ├── <36>  [==]
                            │   ├── <33> Var [x]
                            │   ╰── Constant Int [5]
                            ╰── <42>  [==]
                                ├── <39> Var [y]
                                ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_multiple_if() {
    let src = r#"
        int main(void) {
            int a = 0;
            int b = 0;
            if (a)
                a = 2;
            else
                a = 3;
            if (b)
                b = 4;
            else
                b = 5;
            return a + b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <18> Var [a]
                    │   ├── Then
                    │   │   ╰── <23> Assign [=]
                    │   │       ├── <20> Var [a]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Else
                    │       ╰── <29> Assign [=]
                    │           ├── <26> Var [a]
                    │           ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <33> Var [b]
                    │   ├── Then
                    │   │   ╰── <38> Assign [=]
                    │   │       ├── <35> Var [b]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Else
                    │       ╰── <44> Assign [=]
                    │           ├── <41> Var [b]
                    │           ╰── Constant Int [5]
                    ╰── Return
                        ╰── <52>  [+]
                            ├── <48> Var [a]
                            ╰── <51> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_nested_ternary() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 2;
            int flag = 0;
            return a > b ? 5 : flag ? 6 : 7;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── flag
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <{node_id}> Conditional [?]
                            ├── <28>  [>]
                            │   ├── <24> Var [a]
                            │   ╰── <27> Var [b]
                            ├── Then
                            │   ╰── Constant Int [5]
                            ╰── Else
                                ╰── <{node_id}> Conditional [?]
                                    ├── <31> Var [flag]
                                    ├── Then
                                    │   ╰── Constant Int [6]
                                    ╰── Else
                                        ╰── Constant Int [7]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_nested_ternary_2() {
    let src = r#"
        int main(void) {
            int a = 1 ? 2 ? 3 : 4 : 5;
            int b = 0 ? 2 ? 3 : 4 : 5;
            return a * b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <{node_id}> Conditional [?]
                    │           ├── Constant Int [1]
                    │           ├── Then
                    │           │   ╰── <{node_id}> Conditional [?]
                    │           │       ├── Constant Int [2]
                    │           │       ├── Then
                    │           │       │   ╰── Constant Int [3]
                    │           │       ╰── Else
                    │           │           ╰── Constant Int [4]
                    │           ╰── Else
                    │               ╰── Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <{node_id}> Conditional [?]
                    │           ├── Constant Int [0]
                    │           ├── Then
                    │           │   ╰── <{node_id}> Conditional [?]
                    │           │       ├── Constant Int [2]
                    │           │       ├── Then
                    │           │       │   ╰── Constant Int [3]
                    │           │       ╰── Else
                    │           │           ╰── Constant Int [4]
                    │           ╰── Else
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── <34>  [*]
                            ├── <30> Var [a]
                            ╰── <33> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_rh_assignment() {
    let src = r#"
        int main(void) {
            int flag = 1;
            int a = 0;
            flag ? a = 1 : (a = 0);
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── flag
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <{node_id}> Conditional [?]
                    │   ├── <18> Var [flag]
                    │   ├── Then
                    │   │   ╰── <23> Assign [=]
                    │   │       ├── <20> Var [a]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Else
                    │       ╰── <29> Assign [=]
                    │           ├── <25> Var [a]
                    │           ╰── Constant Int [0]
                    ╰── Return
                        ╰── <33> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary() {
    let src = r#"
        int main(void) {
            int a = 0;
            return a > -1 ? 4 : 5;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <{node_id}> Conditional [?]
                            ├── <17>  [>]
                            │   ├── <12> Var [a]
                            │   ╰── <16> Unary [-]
                            │       ╰── Constant Int [1]
                            ├── Then
                            │   ╰── Constant Int [4]
                            ╰── Else
                                ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary_middle_assignment() {
    let src = r#"
        int main(void) {
            int a = 1;
            a != 2 ? a = 2 : 0;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── <{node_id}> Conditional [?]
                    │   ├── <15>  [!=]
                    │   │   ├── <12> Var [a]
                    │   │   ╰── Constant Int [2]
                    │   ├── Then
                    │   │   ╰── <20> Assign [=]
                    │   │       ├── <17> Var [a]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Else
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <25> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary_middle_binop() {
    let src = r#"
        int main(void) {
            int a = 1 ? 3 % 2 : 4;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <{node_id}> Conditional [?]
                    │           ├── Constant Int [1]
                    │           ├── Then
                    │           │   ╰── <12>  [%]
                    │           │       ├── Constant Int [3]
                    │           │       ╰── Constant Int [2]
                    │           ╰── Else
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── <18> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary_precedence() {
    let src = r#"
        int main(void) {
            int a = 10;
            return a || 0 ? 20 : 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ╰── Return
                        ╰── <{node_id}> Conditional [?]
                            ├── <15>  [||]
                            │   ├── <12> Var [a]
                            │   ╰── Constant Int [0]
                            ├── Then
                            │   ╰── Constant Int [20]
                            ╰── Else
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary_rh_binop() {
    let src = r#"
        int main(void) {
            return 0 ? 1 : 0 || 2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <{node_id}> Conditional [?]
                            ├── Constant Int [0]
                            ├── Then
                            │   ╰── Constant Int [1]
                            ╰── Else
                                ╰── <10>  [||]
                                    ├── Constant Int [0]
                                    ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary_short_circuit() {
    let src = r#"
        int main(void) {
            int a = 1;
            int b = 0;
            a ? (b = 1) : (b = 2);
            return b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <{node_id}> Conditional [?]
                    │   ├── <18> Var [a]
                    │   ├── Then
                    │   │   ╰── <24> Assign [=]
                    │   │       ├── <20> Var [b]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Else
                    │       ╰── <30> Assign [=]
                    │           ├── <26> Var [b]
                    │           ╰── Constant Int [2]
                    ╰── Return
                        ╰── <34> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_6_valid_ternary_short_circuit_2() {
    let src = r#"
        int main(void) {
            int a = 0;
            int b = 0;
            a ? (b = 1) : (b = 2);
            return b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <{node_id}> Conditional [?]
                    │   ├── <18> Var [a]
                    │   ├── Then
                    │   │   ╰── <24> Assign [=]
                    │   │       ├── <20> Var [b]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Else
                    │       ╰── <30> Assign [=]
                    │           ├── <26> Var [b]
                    │           ╰── Constant Int [2]
                    ╰── Return
                        ╰── <34> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_invalid_parse_extra_brace() {
    assert_error(
        r#"
        int main(void) {
            if(0){
                return 1;
            }}
            return 2;
          //^^^^^^ Expected type specifier
        }
    "#,
    );
}

#[test]
fn test_chapter_7_invalid_parse_missing_brace() {
    assert_error(
        r#"
        int main(void) {
            if(0){
                return 1;
            return 2;
        }
    
// Expected statement, but found ''"#,
    );
}

#[test]
fn test_chapter_7_invalid_parse_missing_semicolon() {
    assert_error(
        r#"
        int main(void) {
            int a = 4;
            {
                a = 5;
                return a
            }
          //^ Expected ';', but found '}'
        }
    "#,
    );
}

#[test]
fn test_chapter_7_invalid_parse_ternary_blocks() {
    assert_error(
        r#"
        int main(void) {
            int a;
            return 1 ? { a = 2 } : a = 4;
                     //^ Expected expression, but found '{'
        }
    "#,
    );
}

#[test]
fn test_chapter_7_invalid_semantics_double_define() {
    let src = r#"
        int main(void) {
            {
                int a;
                int a;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Block
                        ├── VarDeclaration
                        │   ├── Name
                        │   │   ╰── a
                        │   ╰── Type
                        │       ╰── Int
                        ╰── VarDeclaration
                            ├── Name
                            │   ╰── a
                            ╰── Type
                                ╰── Int
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_invalid_semantics_double_define_after_scope() {
    let src = r#"
        int main(void) {
            int a = 3;
            {
                a = 5;
            }
            int a = 2;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── Block
                    │   ╰── <15> Assign [=]
                    │       ├── <12> Var [a]
                    │       ╰── Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ╰── Return
                        ╰── <26> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_invalid_semantics_extra_credit_different_labels_same_scope() {
    let src = r#"
        int main(void) {
        label1:;
            int a = 10;
        label2:;
            int a = 11;
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Label [label1]
                    │   ╰── Empty
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── Label [label2]
                    │   ╰── Empty
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [11]
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_invalid_semantics_extra_credit_duplicate_labels_different_scopes() {
    let src = r#"
        int main(void) {
            int x = 0;
            if (x) {
                x = 5;
                goto l;
                return 0;
                l:
                    return x;
            } else {
                goto l;
                return 0;
                l:
                    return x;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── If
                        ├── Condition
                        │   ╰── <12> Var [x]
                        ├── Then
                        │   ╰── Block
                        │       ├── <17> Assign [=]
                        │       │   ├── <14> Var [x]
                        │       │   ╰── Constant Int [5]
                        │       ├── Goto [l]
                        │       ├── Return
                        │       │   ╰── Constant Int [0]
                        │       ╰── Label [l]
                        │           ╰── Return
                        │               ╰── <25> Var [x]
                        ╰── Else
                            ╰── Block
                                ├── Goto [l]
                                ├── Return
                                │   ╰── Constant Int [0]
                                ╰── Label [l]
                                    ╰── Return
                                        ╰── <36> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_invalid_semantics_extra_credit_goto_use_before_declare() {
    let src = r#"
        int main(void) {
            int x = 0;
            if (x != 0) {
                return_y:
                return y;
            }
            int y = 4;
            goto return_y;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <15>  [!=]
                    │   │       ├── <12> Var [x]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Label [return_y]
                    │               ╰── Return
                    │                   ╰── <18> Var [y]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [4]
                    ╰── Goto [return_y]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_invalid_semantics_out_of_scope() {
    let src = r#"
        int main(void) {
            {
                int a = 2;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Block
                    │   ╰── VarDeclaration
                    │       ├── Name
                    │       │   ╰── a
                    │       ├── Type
                    │       │   ╰── Int
                    │       ╰── Initializer
                    │           ╰── Constant Int [2]
                    ╰── Return
                        ╰── <14> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_invalid_semantics_use_before_declare() {
    let src = r#"
        int main(void) {
            int a;
            {
                b = 10;
            }
            int b;
            return b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ╰── Type
                    │       ╰── Int
                    ├── Block
                    │   ╰── <13> Assign [=]
                    │       ├── <10> Var [b]
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ╰── Type
                    │       ╰── Int
                    ╰── Return
                        ╰── <22> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_assign_to_self() {
    let src = r#"
        int main(void) {
            int a = 3;
            {
                int a = a = 4;
                return a;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ╰── Block
                        ├── VarDeclaration
                        │   ├── Name
                        │   │   ╰── a
                        │   ├── Type
                        │   │   ╰── Int
                        │   ╰── Initializer
                        │       ╰── <18> Assign [=]
                        │           ├── <15> Var [a]
                        │           ╰── Constant Int [4]
                        ╰── Return
                            ╰── <22> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_assign_to_self_2() {
    let src = r#"
        int main(void) {
            int a = 3;
            {
                int a = a = 4;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── Block
                    │   ╰── VarDeclaration
                    │       ├── Name
                    │       │   ╰── a
                    │       ├── Type
                    │       │   ╰── Int
                    │       ╰── Initializer
                    │           ╰── <18> Assign [=]
                    │               ├── <15> Var [a]
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── <24> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_declaration_only() {
    let src = r#"
        int main(void) {
            int a;
            {
                int b = a = 1;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ╰── Type
                    │       ╰── Int
                    ├── Block
                    │   ╰── VarDeclaration
                    │       ├── Name
                    │       │   ╰── b
                    │       ├── Type
                    │       │   ╰── Int
                    │       ╰── Initializer
                    │           ╰── <16> Assign [=]
                    │               ├── <13> Var [a]
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── <22> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_empty_blocks() {
    let src = r#"
        int main(void) {
            int ten = 10;
            {}
            int twenty = 10 * 2;
            {{}}
            return ten + twenty;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ten
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── Block
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── twenty
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <19>  [*]
                    │           ├── Constant Int [10]
                    │           ╰── Constant Int [2]
                    ├── Block
                    │   ╰── Block
                    ╰── Return
                        ╰── <31>  [+]
                            ├── <27> Var [ten]
                            ╰── <30> Var [twenty]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_extra_credit_compound_subtract_in_block() {
    let src = r#"
        int main(void) {
            int a = 5;
            if (a > 4) {
                a -= 4;
                int a = 5;
                if (a > 4) {
                    a -= 4;
                }
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <15>  [>]
                    │   │       ├── <12> Var [a]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <20> Assign [-=]
                    │           │   ├── <17> Var [a]
                    │           │   ╰── Constant Int [4]
                    │           ├── VarDeclaration
                    │           │   ├── Name
                    │           │   │   ╰── a
                    │           │   ├── Type
                    │           │   │   ╰── Int
                    │           │   ╰── Initializer
                    │           │       ╰── Constant Int [5]
                    │           ╰── If
                    │               ├── Condition
                    │               │   ╰── <32>  [>]
                    │               │       ├── <29> Var [a]
                    │               │       ╰── Constant Int [4]
                    │               ╰── Then
                    │                   ╰── Block
                    │                       ╰── <37> Assign [-=]
                    │                           ├── <34> Var [a]
                    │                           ╰── Constant Int [4]
                    ╰── Return
                        ╰── <46> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_extra_credit_goto_before_declaration() {
    let src = r#"
        int main(void) {
            int a = 0;
            {
                if (a != 0)
                    return_a:
                        return a;
                int a = 4;
                goto return_a;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Block
                        ├── If
                        │   ├── Condition
                        │   │   ╰── <15>  [!=]
                        │   │       ├── <12> Var [a]
                        │   │       ╰── Constant Int [0]
                        │   ╰── Then
                        │       ╰── Label [return_a]
                        │           ╰── Return
                        │               ╰── <18> Var [a]
                        ├── VarDeclaration
                        │   ├── Name
                        │   │   ╰── a
                        │   ├── Type
                        │   │   ╰── Int
                        │   ╰── Initializer
                        │       ╰── Constant Int [4]
                        ╰── Goto [return_a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_extra_credit_goto_inner_scope() {
    let src = r#"
        int main(void) {
            int x = 5;
            goto inner;
            {
                int x = 0;
                inner:
                x = 1;
                return x;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [5]
                    ├── Goto [inner]
                    ╰── Block
                        ├── VarDeclaration
                        │   ├── Name
                        │   │   ╰── x
                        │   ├── Type
                        │   │   ╰── Int
                        │   ╰── Initializer
                        │       ╰── Constant Int [0]
                        ├── Label [inner]
                        │   ╰── <24> Assign [=]
                        │       ├── <21> Var [x]
                        │       ╰── Constant Int [1]
                        ╰── Return
                            ╰── <28> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_extra_credit_goto_outer_scope() {
    let src = r#"
        int main(void) {
            int a = 10;
            int b = 0;
            if (a) {
                int a = 1;
                b = a;
                goto end;
            }
            a = 9;
        end:
            return (a == 10 && b == 1);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <18> Var [a]
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── VarDeclaration
                    │           │   ├── Name
                    │           │   │   ╰── a
                    │           │   ├── Type
                    │           │   │   ╰── Int
                    │           │   ╰── Initializer
                    │           │       ╰── Constant Int [1]
                    │           ├── <30> Assign [=]
                    │           │   ├── <26> Var [b]
                    │           │   ╰── <29> Var [a]
                    │           ╰── Goto [end]
                    ├── <41> Assign [=]
                    │   ├── <38> Var [a]
                    │   ╰── Constant Int [9]
                    ╰── Label [end]
                        ╰── Return
                            ╰── <56>  [&&]
                                ├── <48>  [==]
                                │   ├── <45> Var [a]
                                │   ╰── Constant Int [10]
                                ╰── <54>  [==]
                                    ├── <51> Var [b]
                                    ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_extra_credit_goto_sibling_scope() {
    let src = r#"
        int main(void) {
            int sum = 0;
            if (1) {
                int a = 5;
                goto other_if;
                sum = 0;
            first_if:
                a = 5;
                sum = sum + a;
            }
            if (0) {
            other_if:;
                int a = 6;
                sum = sum + a;
                goto first_if;
                sum = 0;
            }
            return sum;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── sum
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── VarDeclaration
                    │           │   ├── Name
                    │           │   │   ╰── a
                    │           │   ├── Type
                    │           │   │   ╰── Int
                    │           │   ╰── Initializer
                    │           │       ╰── Constant Int [5]
                    │           ├── Goto [other_if]
                    │           ├── <24> Assign [=]
                    │           │   ├── <21> Var [sum]
                    │           │   ╰── Constant Int [0]
                    │           ├── Label [first_if]
                    │           │   ╰── <31> Assign [=]
                    │           │       ├── <28> Var [a]
                    │           │       ╰── Constant Int [5]
                    │           ╰── <43> Assign [=]
                    │               ├── <35> Var [sum]
                    │               ╰── <42>  [+]
                    │                   ├── <38> Var [sum]
                    │                   ╰── <41> Var [a]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── Label [other_if]
                    │           │   ╰── Empty
                    │           ├── VarDeclaration
                    │           │   ├── Name
                    │           │   │   ╰── a
                    │           │   ├── Type
                    │           │   │   ╰── Int
                    │           │   ╰── Initializer
                    │           │       ╰── Constant Int [6]
                    │           ├── <67> Assign [=]
                    │           │   ├── <59> Var [sum]
                    │           │   ╰── <66>  [+]
                    │           │       ├── <62> Var [sum]
                    │           │       ╰── <65> Var [a]
                    │           ├── Goto [first_if]
                    │           ╰── <75> Assign [=]
                    │               ├── <72> Var [sum]
                    │               ╰── Constant Int [0]
                    ╰── Return
                        ╰── <81> Var [sum]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_hidden_then_visible() {
    let src = r#"
        int main(void) {
            int a = 2;
            int b;
            {
                a = -4;
                int a = 7;
                b = a + 1;
            }
            return b == 8 && a == -4;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ╰── Type
                    │       ╰── Int
                    ├── Block
                    │   ├── <21> Assign [=]
                    │   │   ├── <16> Var [a]
                    │   │   ╰── <20> Unary [-]
                    │   │       ╰── Constant Int [4]
                    │   ├── VarDeclaration
                    │   │   ├── Name
                    │   │   │   ╰── a
                    │   │   ├── Type
                    │   │   │   ╰── Int
                    │   │   ╰── Initializer
                    │   │       ╰── Constant Int [7]
                    │   ╰── <37> Assign [=]
                    │       ├── <30> Var [b]
                    │       ╰── <36>  [+]
                    │           ├── <33> Var [a]
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── <54>  [&&]
                            ├── <45>  [==]
                            │   ├── <42> Var [b]
                            │   ╰── Constant Int [8]
                            ╰── <53>  [==]
                                ├── <48> Var [a]
                                ╰── <52> Unary [-]
                                    ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_hidden_variable() {
    let src = r#"
        int main(void) {
            int a = 2;
            {
                int a = 1;
                return a;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ╰── Block
                        ├── VarDeclaration
                        │   ├── Name
                        │   │   ╰── a
                        │   ├── Type
                        │   │   ╰── Int
                        │   ╰── Initializer
                        │       ╰── Constant Int [1]
                        ╰── Return
                            ╰── <18> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_inner_uninitialized() {
    let src = r#"
        int main(void) {
            int x = 4;
            {
                int x;
            }
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [4]
                    ├── Block
                    │   ╰── VarDeclaration
                    │       ├── Name
                    │       │   ╰── x
                    │       ╰── Type
                    │           ╰── Int
                    ╰── Return
                        ╰── <18> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_multiple_vars_same_name() {
    let src = r#"
        int main(void) {
            int a = 0;
            {
                int b = 4;
                a = b;
            }
            {
                int b = 2;
                a = a - b;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Block
                    │   ├── VarDeclaration
                    │   │   ├── Name
                    │   │   │   ╰── b
                    │   │   ├── Type
                    │   │   │   ╰── Int
                    │   │   ╰── Initializer
                    │   │       ╰── Constant Int [4]
                    │   ╰── <22> Assign [=]
                    │       ├── <18> Var [a]
                    │       ╰── <21> Var [b]
                    ├── Block
                    │   ├── VarDeclaration
                    │   │   ├── Name
                    │   │   │   ╰── b
                    │   │   ├── Type
                    │   │   │   ╰── Int
                    │   │   ╰── Initializer
                    │   │       ╰── Constant Int [2]
                    │   ╰── <41> Assign [=]
                    │       ├── <33> Var [a]
                    │       ╰── <40>  [-]
                    │           ├── <36> Var [a]
                    │           ╰── <39> Var [b]
                    ╰── Return
                        ╰── <46> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_nested_if() {
    let src = r#"
        int main(void) {
            int a = 0;
            if (a) {
                int b = 2;
                return b;
            } else {
                int c = 3;
                if (a < c) {
                    return !a;
                } else {
                    return 5;
                }
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <12> Var [a]
                    │   ├── Then
                    │   │   ╰── Block
                    │   │       ├── VarDeclaration
                    │   │       │   ├── Name
                    │   │       │   │   ╰── b
                    │   │       │   ├── Type
                    │   │       │   │   ╰── Int
                    │   │       │   ╰── Initializer
                    │   │       │       ╰── Constant Int [2]
                    │   │       ╰── Return
                    │   │           ╰── <20> Var [b]
                    │   ╰── Else
                    │       ╰── Block
                    │           ├── VarDeclaration
                    │           │   ├── Name
                    │           │   │   ╰── c
                    │           │   ├── Type
                    │           │   │   ╰── Int
                    │           │   ╰── Initializer
                    │           │       ╰── Constant Int [3]
                    │           ╰── If
                    │               ├── Condition
                    │               │   ╰── <35>  [<]
                    │               │       ├── <31> Var [a]
                    │               │       ╰── <34> Var [c]
                    │               ├── Then
                    │               │   ╰── Block
                    │               │       ╰── Return
                    │               │           ╰── <39> Unary [!]
                    │               │               ╰── <38> Var [a]
                    │               ╰── Else
                    │                   ╰── Block
                    │                       ╰── Return
                    │                           ╰── Constant Int [5]
                    ╰── Return
                        ╰── <52> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_similar_var_names() {
    let src = r#"
        int main(void) {
            int a;
            int result;
            int a1 = 1;
            {
                int a = 2;
                int a1 = 2;
                {
                    int a;
                    {
                        int a;
                        {
                            int a;
                            {
                                int a;
                                {
                                    int a;
                                    {
                                        int a;
                                        {
                                            int a;
                                            {
                                                int a;
                                                {
                                                    int a = 20;
                                                    result = a;
                                                    {
                                                        int a;
                                                        a = 5;
                                                        result = result + a;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                result = result + a1;
            }
            return result + a1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ╰── Type
                    │       ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ╰── Type
                    │       ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a1
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── Block
                    │   ├── VarDeclaration
                    │   │   ├── Name
                    │   │   │   ╰── a
                    │   │   ├── Type
                    │   │   │   ╰── Int
                    │   │   ╰── Initializer
                    │   │       ╰── Constant Int [2]
                    │   ├── VarDeclaration
                    │   │   ├── Name
                    │   │   │   ╰── a1
                    │   │   ├── Type
                    │   │   │   ╰── Int
                    │   │   ╰── Initializer
                    │   │       ╰── Constant Int [2]
                    │   ├── Block
                    │   │   ├── VarDeclaration
                    │   │   │   ├── Name
                    │   │   │   │   ╰── a
                    │   │   │   ╰── Type
                    │   │   │       ╰── Int
                    │   │   ╰── Block
                    │   │       ├── VarDeclaration
                    │   │       │   ├── Name
                    │   │       │   │   ╰── a
                    │   │       │   ╰── Type
                    │   │       │       ╰── Int
                    │   │       ╰── Block
                    │   │           ├── VarDeclaration
                    │   │           │   ├── Name
                    │   │           │   │   ╰── a
                    │   │           │   ╰── Type
                    │   │           │       ╰── Int
                    │   │           ╰── Block
                    │   │               ├── VarDeclaration
                    │   │               │   ├── Name
                    │   │               │   │   ╰── a
                    │   │               │   ╰── Type
                    │   │               │       ╰── Int
                    │   │               ╰── Block
                    │   │                   ├── VarDeclaration
                    │   │                   │   ├── Name
                    │   │                   │   │   ╰── a
                    │   │                   │   ╰── Type
                    │   │                   │       ╰── Int
                    │   │                   ╰── Block
                    │   │                       ├── VarDeclaration
                    │   │                       │   ├── Name
                    │   │                       │   │   ╰── a
                    │   │                       │   ╰── Type
                    │   │                       │       ╰── Int
                    │   │                       ╰── Block
                    │   │                           ├── VarDeclaration
                    │   │                           │   ├── Name
                    │   │                           │   │   ╰── a
                    │   │                           │   ╰── Type
                    │   │                           │       ╰── Int
                    │   │                           ╰── Block
                    │   │                               ├── VarDeclaration
                    │   │                               │   ├── Name
                    │   │                               │   │   ╰── a
                    │   │                               │   ╰── Type
                    │   │                               │       ╰── Int
                    │   │                               ╰── Block
                    │   │                                   ├── VarDeclaration
                    │   │                                   │   ├── Name
                    │   │                                   │   │   ╰── a
                    │   │                                   │   ├── Type
                    │   │                                   │   │   ╰── Int
                    │   │                                   │   ╰── Initializer
                    │   │                                   │       ╰── Constant Int [20]
                    │   │                                   ├── <74> Assign [=]
                    │   │                                   │   ├── <70> Var [result]
                    │   │                                   │   ╰── <73> Var [a]
                    │   │                                   ╰── Block
                    │   │                                       ├── VarDeclaration
                    │   │                                       │   ├── Name
                    │   │                                       │   │   ╰── a
                    │   │                                       │   ╰── Type
                    │   │                                       │       ╰── Int
                    │   │                                       ├── <84> Assign [=]
                    │   │                                       │   ├── <81> Var [a]
                    │   │                                       │   ╰── Constant Int [5]
                    │   │                                       ╰── <95> Assign [=]
                    │   │                                           ├── <87> Var [result]
                    │   │                                           ╰── <94>  [+]
                    │   │                                               ├── <90> Var [result]
                    │   │                                               ╰── <93> Var [a]
                    │   ╰── <126> Assign [=]
                    │       ├── <118> Var [result]
                    │       ╰── <125>  [+]
                    │           ├── <121> Var [result]
                    │           ╰── <124> Var [a1]
                    ╰── Return
                        ╰── <135>  [+]
                            ├── <131> Var [result]
                            ╰── <134> Var [a1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_7_valid_use_in_inner_scope() {
    let src = r#"
        int main(void)
        {
            int x;
            {
                x = 3;
            }
            {
                return x;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Int
                    ├── Block
                    │   ╰── <13> Assign [=]
                    │       ├── <10> Var [x]
                    │       ╰── Constant Int [3]
                    ╰── Block
                        ╰── Return
                            ╰── <18> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_parse_decl_as_loop_body() {
    assert_error(
        r#"
        int main(void) {
            while (1)
                int i = 0;
              //^^^ Expected statement, but found 'int'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_do_extra_semicolon() {
    assert_error(
        r#"
        int main(void) {
            do {
                int a;
            }; while(1);
           //^ Expected 'while', but found ';'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_do_missing_semicolon() {
    assert_error(
        r#"
        int main(void) {
            do {
                4;
            } while(1)
            return 0;
          //^^^^^^ Expected ';', but found 'return'
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_do_while_empty_parens() {
    assert_error(
        r#"
        int main(void) {
            do
                1;
            while ();
                 //^ Expected expression, but found ')'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_extra_credit_compound_assignment_invalid_decl() {
    assert_error(
        r#"
        int main(void) {
            for (int i += 1; i < 10; i += 1) {
                     //^^ Expected ';', but found '+='
                return 0;
            }
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_extra_credit_label_in_loop_header() {
    assert_error(
        r#"
        int main(void) {
            for (int i = 0; label: i < 10; i = i + 1) {
                               //^ Expected ';', but found ':'
                ;
            }
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_extra_credit_label_is_not_block() {
    assert_error(
        r#"
        int main(void) {
            int a = 0;
            int b = 0;
            do
            do_body:
                a = a + 1;
                b = b - 1;
              //^ Expected 'while', but found 'b'
            while (a < 10)
                ;
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_extra_credit_switch_case_declaration() {
    assert_error(
        r#"
        int main(void) {
            switch(3) {
                case 3:
                    int i = 0;
                  //^^^ Expected statement, but found 'int'
                    return i;
            }
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_extra_credit_switch_goto_case() {
    assert_error(
        r#"
        int main(void) {
            goto 3;
               //^ Expected identifier, but found '3'
            switch (3) {
                case 3: return 0;
            }
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_extra_credit_switch_missing_case_value() {
    assert_error(
        r#"
        int main(void) {
            switch(0) {
                case: return 0;
                  //^ Expected expression, but found ':'
            }
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_extra_credit_switch_missing_paren() {
    assert_error(
        r#"
        int main(void) {
            switch 3 {
                 //^ Expected '(', but found '3'
                case 3: return 0;
            }
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_extra_credit_switch_no_condition() {
    assert_error(
        r#"
        int main(void) {
            switch {
                 //^ Expected '(', but found '{'
                return 0;
            }
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_extra_for_header_clause() {
    assert_error(
        r#"
        int main(void) {
            for (int i = 0; i < 10; i = i + 1; )
                                           //^ Expected ')', but found ';'
                ;
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_invalid_for_declaration() {
    assert_error(
        r#"
        int main(void) {
            for (; int i = 0; i = i + 1)
                 //^^^ Expected expression, but found 'int'
                ;
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_missing_for_header_clause() {
    assert_error(
        r#"
        int main(void) {
            for (int i = 0;)
                         //^ Expected expression, but found ')'
                ;
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_paren_mismatch() {
    assert_error(
        r#"
        int main(void) {
            for (int i = 2; ))
                          //^ Expected expression, but found ')'
                int a = 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_statement_in_condition() {
    assert_error(
        r#"
        int main(void) {
            while(int a) {
                //^^^ Expected expression, but found 'int'
                2;
            }
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_parse_while_missing_paren() {
    assert_error(
        r#"
        int main(void) {
            while 1 {
                //^ Expected '(', but found '1'
                return 0;
            }
        }
    "#,
    );
}

#[test]
fn test_chapter_8_invalid_semantics_break_not_in_loop() {
    let src = r#"
        int main(void) {
            if (1)
                break;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── If
                        ├── Condition
                        │   ╰── Constant Int [1]
                        ╰── Then
                            ╰── Break
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_continue_not_in_loop() {
    let src = r#"
        int main(void) {
            {
                int a;
                continue;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Block
                    │   ├── VarDeclaration
                    │   │   ├── Name
                    │   │   │   ╰── a
                    │   │   ╰── Type
                    │   │       ╰── Int
                    │   ╰── Continue
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_case_continue() {
    let src = r#"
        int main(void) {
            int a = 3;
            switch(a + 1) {
                case 0:
                    continue;
                default: a = 1;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <15>  [+]
                    │   │       ├── <12> Var [a]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Block
                    │       ├── Case [0]
                    │       │   ╰── Continue
                    │       ╰── Default
                    │           ╰── <23> Assign [=]
                    │               ├── <20> Var [a]
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── <30> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_case_outside_switch() {
    let src = r#"
        int main(void) {
            for (int i = 0; i < 10; i = i + 1) {
                case 0: return 1;
            }
            return 9;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <16>  [<]
                    │   │       ├── <13> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <25> Assign [=]
                    │   │       ├── <18> Var [i]
                    │   │       ╰── <24>  [+]
                    │   │           ├── <21> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── Case [0]
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [9]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_default_continue() {
    let src = r#"
        int main(void) {
            int a = 3;
            switch(a + 1) {
                case 0:
                    a = 1;
                default: continue;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <15>  [+]
                    │   │       ├── <12> Var [a]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Block
                    │       ├── Case [0]
                    │       │   ╰── <21> Assign [=]
                    │       │       ├── <18> Var [a]
                    │       │       ╰── Constant Int [1]
                    │       ╰── Default
                    │           ╰── Continue
                    ╰── Return
                        ╰── <30> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_default_outside_switch() {
    let src = r#"
        int main(void) {
            {
                default: return 0;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Block
                        ╰── Default
                            ╰── Return
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_different_cases_same_scope() {
    let src = r#"
        int main(void) {
            int a = 1;
            switch (a) {
                case 1:;
                    int b = 10;
                    break;
                case 2:;
                    int b = 11;
                    break;
                default:
                    break;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Block
                    │       ├── Case [1]
                    │       │   ╰── Empty
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── b
                    │       │   ├── Type
                    │       │   │   ╰── Int
                    │       │   ╰── Initializer
                    │       │       ╰── Constant Int [10]
                    │       ├── Break
                    │       ├── Case [2]
                    │       │   ╰── Empty
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── b
                    │       │   ├── Type
                    │       │   │   ╰── Int
                    │       │   ╰── Initializer
                    │       │       ╰── Constant Int [11]
                    │       ├── Break
                    │       ╰── Default
                    │           ╰── Break
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_duplicate_case() {
    let src = r#"
        int main(void) {
            switch(4) {
                case 5: return 0;
                case 4: return 1;
                case 5: return 0;
                default: return 2;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Switch
                        ├── Expression
                        │   ╰── Constant Int [4]
                        ╰── Block
                            ├── Case [5]
                            │   ╰── Return
                            │       ╰── Constant Int [0]
                            ├── Case [4]
                            │   ╰── Return
                            │       ╰── Constant Int [1]
                            ├── Case [5]
                            │   ╰── Return
                            │       ╰── Constant Int [0]
                            ╰── Default
                                ╰── Return
                                    ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_duplicate_case_in_labeled_switch() {
    let src = r#"
        int main(void) {
            int a = 0;
        label:
            switch (a) {
                case 1:
                case 1:
                    break;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Label [label]
                    │   ╰── Switch
                    │       ├── Expression
                    │       │   ╰── <13> Var [a]
                    │       ╰── Block
                    │           ╰── Case [1]
                    │               ╰── Case [1]
                    │                   ╰── Break
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_duplicate_case_in_nested_statement() {
    let src = r#"
        
        int main(void) {
            int a = 10;
            switch (a) {
                case 1: {
                    if(1) {
                        case 1:
                        return 0;
                    }
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Block
                    │       ╰── Case [1]
                    │           ╰── Block
                    │               ╰── If
                    │                   ├── Condition
                    │                   │   ╰── Constant Int [1]
                    │                   ╰── Then
                    │                       ╰── Block
                    │                           ╰── Case [1]
                    │                               ╰── Return
                    │                                   ╰── Constant Int [0]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_duplicate_default() {
    let src = r#"
        int main(void) {
            int a = 0;
            switch(a) {
                case 0: return 0;
                default: return 1;
                case 2: return 2;
                default: return 2;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Switch
                        ├── Expression
                        │   ╰── <12> Var [a]
                        ╰── Block
                            ├── Case [0]
                            │   ╰── Return
                            │       ╰── Constant Int [0]
                            ├── Default
                            │   ╰── Return
                            │       ╰── Constant Int [1]
                            ├── Case [2]
                            │   ╰── Return
                            │       ╰── Constant Int [2]
                            ╰── Default
                                ╰── Return
                                    ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_duplicate_default_in_nested_statement() {
    let src = r#"
        
        int main(void) {
            int a = 10;
            switch (a) {
                case 1:
                for (int i = 0; i < 10; i = i + 1) {
                    continue;
                    while(1)
                    default:;
                }
                case 2:
                return 0;
                default:;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Block
                    │       ├── Case [1]
                    │       │   ╰── For
                    │       │       ├── Init
                    │       │       │   ╰── VarDeclaration
                    │       │       │       ├── Name
                    │       │       │       │   ╰── i
                    │       │       │       ├── Type
                    │       │       │       │   ╰── Int
                    │       │       │       ╰── Initializer
                    │       │       │           ╰── Constant Int [0]
                    │       │       ├── Condition
                    │       │       │   ╰── <25>  [<]
                    │       │       │       ├── <22> Var [i]
                    │       │       │       ╰── Constant Int [10]
                    │       │       ├── Condition
                    │       │       │   ╰── <34> Assign [=]
                    │       │       │       ├── <27> Var [i]
                    │       │       │       ╰── <33>  [+]
                    │       │       │           ├── <30> Var [i]
                    │       │       │           ╰── Constant Int [1]
                    │       │       ╰── Block
                    │       │           ├── Continue
                    │       │           ╰── While
                    │       │               ├── Condition
                    │       │               │   ╰── Constant Int [1]
                    │       │               ╰── Body
                    │       │                   ╰── Default
                    │       │                       ╰── Empty
                    │       ├── Case [2]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [0]
                    │       ╰── Default
                    │           ╰── Empty
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_duplicate_label_in_default() {
    let src = r#"
        int main(void) {
                int a = 1;
        label:
            switch (a) {
                case 1:
                    return 0;
                default:
                label:
                    return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── Label [label]
                    │   ╰── Switch
                    │       ├── Expression
                    │       │   ╰── <13> Var [a]
                    │       ╰── Block
                    │           ├── Case [1]
                    │           │   ╰── Return
                    │           │       ╰── Constant Int [0]
                    │           ╰── Default
                    │               ╰── Label [label]
                    │                   ╰── Return
                    │                       ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_duplicate_label_in_loop() {
    let src = r#"
        int main(void) {
            do {
            lbl:
                return 1;
            lbl:
                return 2;
            } while (1);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── DoWhile
                    │   ├── Body
                    │   │   ╰── Block
                    │   │       ├── Label [lbl]
                    │   │       │   ╰── Return
                    │   │       │       ╰── Constant Int [1]
                    │   │       ╰── Label [lbl]
                    │   │           ╰── Return
                    │   │               ╰── Constant Int [2]
                    │   ╰── Condition
                    │       ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_duplicate_variable_in_switch() {
    let src = r#"
        int main(void) {
            int a = 1;
            switch (a) {
                int b = 2;
                case 0:
                    a = 3;
                    int b = 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Block
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── b
                    │       │   ├── Type
                    │       │   │   ╰── Int
                    │       │   ╰── Initializer
                    │       │       ╰── Constant Int [2]
                    │       ├── Case [0]
                    │       │   ╰── <24> Assign [=]
                    │       │       ├── <21> Var [a]
                    │       │       ╰── Constant Int [3]
                    │       ╰── VarDeclaration
                    │           ├── Name
                    │           │   ╰── b
                    │           ├── Type
                    │           │   ╰── Int
                    │           ╰── Initializer
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_labeled_break_outside_loop() {
    let src = r#"
        int main(void) {
            label: break;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Label [label]
                    │   ╰── Break
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_non_constant_case() {
    let src = r#"
        int main(void) {
            int a = 3;
            switch(a + 1) {
                case 0: return 0;
                case a: return 1;
                case 1: return 2;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ╰── Switch
                        ├── Expression
                        │   ╰── <15>  [+]
                        │       ├── <12> Var [a]
                        │       ╰── Constant Int [1]
                        ╰── Block
                            ├── Case [0]
                            │   ╰── Return
                            │       ╰── Constant Int [0]
                            ├── Case [invalid]
                            │   ├── Value
                            │   │   ╰── <21> Var [a]
                            │   ╰── Return
                            │       ╰── Constant Int [1]
                            ╰── Case [1]
                                ╰── Return
                                    ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_switch_continue() {
    let src = r#"
        int main(void) {
            int a = 3;
            switch(a + 1) {
                case 0:
                    a = 4;
                    continue;
                default: a = 1;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <15>  [+]
                    │   │       ├── <12> Var [a]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Block
                    │       ├── Case [0]
                    │       │   ╰── <21> Assign [=]
                    │       │       ├── <18> Var [a]
                    │       │       ╰── Constant Int [4]
                    │       ├── Continue
                    │       ╰── Default
                    │           ╰── <29> Assign [=]
                    │               ├── <26> Var [a]
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── <36> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_undeclared_var_switch_expression() {
    let src = r#"
        int main(void) {
            switch(a) {
                case 1: return 0;
                case 2: return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <6> Var [a]
                    │   ╰── Block
                    │       ├── Case [1]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [0]
                    │       ╰── Case [2]
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_undeclared_variable_in_case() {
    let src = r#"
        int main(void) {
            int a = 10;
            switch (a) {
                case 1:
                    return b;
                    break;
                default:
                    break;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Block
                    │       ├── Case [1]
                    │       │   ╰── Return
                    │       │       ╰── <15> Var [b]
                    │       ├── Break
                    │       ╰── Default
                    │           ╰── Break
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_undeclared_variable_in_default() {
    let src = r#"
        int main(void) {
            int a = 10;
            switch (a) {
                case 1:
                    break;
                default:
                    return b;
                    break;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Block
                    │       ├── Case [1]
                    │       │   ╰── Break
                    │       ├── Default
                    │       │   ╰── Return
                    │       │       ╰── <17> Var [b]
                    │       ╰── Break
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_extra_credit_undefined_label_in_case() {
    let src = r#"
        
        int main(void) {
            int a = 3;
            switch (a) {
                case 1: goto foo;
                default: return 0;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Block
                    │       ├── Case [1]
                    │       │   ╰── Goto [foo]
                    │       ╰── Default
                    │           ╰── Return
                    │               ╰── Constant Int [0]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_out_of_scope_do_loop() {
    let src = r#"
        int main(void) {
            do {
                int a = a + 1;
            } while (a < 100);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── DoWhile
                        ├── Body
                        │   ╰── Block
                        │       ╰── VarDeclaration
                        │           ├── Name
                        │           │   ╰── a
                        │           ├── Type
                        │           │   ╰── Int
                        │           ╰── Initializer
                        │               ╰── <12>  [+]
                        │                   ├── <9> Var [a]
                        │                   ╰── Constant Int [1]
                        ╰── Condition
                            ╰── <21>  [<]
                                ├── <18> Var [a]
                                ╰── Constant Int [100]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_invalid_semantics_out_of_scope_loop_variable() {
    let src = r#"
        int main(void)
        {
            for (i = 0; i < 1; i = i + 1)
            {
                return 0;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── For
                        ├── Init
                        │   ╰── <9> Assign [=]
                        │       ├── <6> Var [i]
                        │       ╰── Constant Int [0]
                        ├── Condition
                        │   ╰── <14>  [<]
                        │       ├── <11> Var [i]
                        │       ╰── Constant Int [1]
                        ├── Condition
                        │   ╰── <23> Assign [=]
                        │       ├── <16> Var [i]
                        │       ╰── <22>  [+]
                        │           ├── <19> Var [i]
                        │           ╰── Constant Int [1]
                        ╰── Block
                            ╰── Return
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_break() {
    let src = r#"
        int main(void) {
            int a = 10;
            int b = 20;
            for (b = -20; b < 0; b = b + 1) {
                a = a - 1;
                if (a <= 0)
                    break;
            }
            return a == 0 && b == -11;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [20]
                    ├── For
                    │   ├── Init
                    │   │   ╰── <23> Assign [=]
                    │   │       ├── <18> Var [b]
                    │   │       ╰── <22> Unary [-]
                    │   │           ╰── Constant Int [20]
                    │   ├── Condition
                    │   │   ╰── <28>  [<]
                    │   │       ├── <25> Var [b]
                    │   │       ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <37> Assign [=]
                    │   │       ├── <30> Var [b]
                    │   │       ╰── <36>  [+]
                    │   │           ├── <33> Var [b]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ├── <46> Assign [=]
                    │       │   ├── <39> Var [a]
                    │       │   ╰── <45>  [-]
                    │       │       ├── <42> Var [a]
                    │       │       ╰── Constant Int [1]
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <52>  [<=]
                    │           │       ├── <49> Var [a]
                    │           │       ╰── Constant Int [0]
                    │           ╰── Then
                    │               ╰── Break
                    ╰── Return
                        ╰── <71>  [&&]
                            ├── <62>  [==]
                            │   ├── <59> Var [a]
                            │   ╰── Constant Int [0]
                            ╰── <70>  [==]
                                ├── <65> Var [b]
                                ╰── <69> Unary [-]
                                    ╰── Constant Int [11]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_break_immediate() {
    let src = r#"
        int main(void) {
            int a = 10;
            while ((a = 1))
                break;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── While
                    │   ├── Condition
                    │   │   ╰── <16> Assign [=]
                    │   │       ├── <12> Var [a]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Body
                    │       ╰── Break
                    ╰── Return
                        ╰── <20> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_continue() {
    let src = r#"
        int main(void) {
            int sum = 0;
            int counter;
            for (int i = 0; i <= 10; i = i + 1) {
                counter = i;
                if (i % 2 == 0)
                    continue;
                sum = sum + 1;
            }
            return sum == 5 && counter == 10;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── sum
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── counter
                    │   ╰── Type
                    │       ╰── Int
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <26>  [<=]
                    │   │       ├── <23> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <35> Assign [=]
                    │   │       ├── <28> Var [i]
                    │   │       ╰── <34>  [+]
                    │   │           ├── <31> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ├── <41> Assign [=]
                    │       │   ├── <37> Var [counter]
                    │       │   ╰── <40> Var [i]
                    │       ├── If
                    │       │   ├── Condition
                    │       │   │   ╰── <50>  [==]
                    │       │   │       ├── <47>  [%]
                    │       │   │       │   ├── <44> Var [i]
                    │       │   │       │   ╰── Constant Int [2]
                    │       │   │       ╰── Constant Int [0]
                    │       │   ╰── Then
                    │       │       ╰── Continue
                    │       ╰── <61> Assign [=]
                    │           ├── <54> Var [sum]
                    │           ╰── <60>  [+]
                    │               ├── <57> Var [sum]
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── <77>  [&&]
                            ├── <70>  [==]
                            │   ├── <67> Var [sum]
                            │   ╰── Constant Int [5]
                            ╰── <76>  [==]
                                ├── <73> Var [counter]
                                ╰── Constant Int [10]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_continue_empty_post() {
    let src = r#"
        int main(void) {
            int sum = 0;
            for (int i = 0; i < 10;) {
                i = i + 1;
                if (i % 2)
                    continue;
                sum = sum + i;
            }
            return sum;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── sum
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <22>  [<]
                    │   │       ├── <19> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Block
                    │       ├── <31> Assign [=]
                    │       │   ├── <24> Var [i]
                    │       │   ╰── <30>  [+]
                    │       │       ├── <27> Var [i]
                    │       │       ╰── Constant Int [1]
                    │       ├── If
                    │       │   ├── Condition
                    │       │   │   ╰── <37>  [%]
                    │       │   │       ├── <34> Var [i]
                    │       │   │       ╰── Constant Int [2]
                    │       │   ╰── Then
                    │       │       ╰── Continue
                    │       ╰── <49> Assign [=]
                    │           ├── <41> Var [sum]
                    │           ╰── <48>  [+]
                    │               ├── <44> Var [sum]
                    │               ╰── <47> Var [i]
                    ╰── Return
                        ╰── <55> Var [sum]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_do_while() {
    let src = r#"
        int main(void) {
            int a = 1;
            do {
                a = a * 2;
            } while(a < 11);
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── DoWhile
                    │   ├── Body
                    │   │   ╰── Block
                    │   │       ╰── <19> Assign [=]
                    │   │           ├── <12> Var [a]
                    │   │           ╰── <18>  [*]
                    │   │               ├── <15> Var [a]
                    │   │               ╰── Constant Int [2]
                    │   ╰── Condition
                    │       ╰── <27>  [<]
                    │           ├── <24> Var [a]
                    │           ╰── Constant Int [11]
                    ╰── Return
                        ╰── <30> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_do_while_break_immediate() {
    let src = r#"
        int main(void) {
            int a = 10;
            do
                break;
            while ((a = 1));
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── DoWhile
                    │   ├── Body
                    │   │   ╰── Break
                    │   ╰── Condition
                    │       ╰── <17> Assign [=]
                    │           ├── <13> Var [a]
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── <20> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_empty_expression() {
    let src = r#"
        int main(void) {
            return 0;;;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Return
                    │   ╰── Constant Int [0]
                    ├── Empty
                    ╰── Empty
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_empty_loop_body() {
    let src = r#"
        int main(void) {
            int i = 2147;
            do ; while ((i = i - 5) >= 256);
            return i;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2147]
                    ├── DoWhile
                    │   ├── Body
                    │   │   ╰── Empty
                    │   ╰── Condition
                    │       ╰── <24>  [>=]
                    │           ├── <21> Assign [=]
                    │           │   ├── <13> Var [i]
                    │           │   ╰── <19>  [-]
                    │           │       ├── <16> Var [i]
                    │           │       ╰── Constant Int [5]
                    │           ╰── Constant Int [256]
                    ╰── Return
                        ╰── <27> Var [i]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_case_block() {
    let src = r#"
        int main(void) {
            int a = 4;
            int b = 0;
            switch(2) {
                case 2: {
                    int a = 8;
                    b = a;
                }
            }
            return (a == 4 && b == 8);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── Constant Int [2]
                    │   ╰── Block
                    │       ╰── Case [2]
                    │           ╰── Block
                    │               ├── VarDeclaration
                    │               │   ├── Name
                    │               │   │   ╰── a
                    │               │   ├── Type
                    │               │   │   ╰── Int
                    │               │   ╰── Initializer
                    │               │       ╰── Constant Int [8]
                    │               ╰── <30> Assign [=]
                    │                   ├── <26> Var [b]
                    │                   ╰── <29> Var [a]
                    ╰── Return
                        ╰── <50>  [&&]
                            ├── <42>  [==]
                            │   ├── <39> Var [a]
                            │   ╰── Constant Int [4]
                            ╰── <48>  [==]
                                ├── <45> Var [b]
                                ╰── Constant Int [8]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_compound_assignment_controlling_expression() {
    let src = r#"
        int main(void) {
            int i = 100;
            int sum = 0;
            do sum += 2;
            while (i -= 1);
            return (i == 0 && sum == 200);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── sum
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── DoWhile
                    │   ├── Body
                    │   │   ╰── <21> Assign [+=]
                    │   │       ├── <18> Var [sum]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Condition
                    │       ╰── <27> Assign [-=]
                    │           ├── <24> Var [i]
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── <41>  [&&]
                            ├── <33>  [==]
                            │   ├── <30> Var [i]
                            │   ╰── Constant Int [0]
                            ╰── <39>  [==]
                                ├── <36> Var [sum]
                                ╰── Constant Int [200]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_compound_assignment_for_loop() {
    let src = r#"
        int main(void) {
            int i = 1;
            for (i *= -1; i >= -100; i -=3)
                ;
            return (i == -103);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── For
                    │   ├── Init
                    │   │   ╰── <17> Assign [*=]
                    │   │       ├── <12> Var [i]
                    │   │       ╰── <16> Unary [-]
                    │   │           ╰── Constant Int [1]
                    │   ├── Condition
                    │   │   ╰── <24>  [>=]
                    │   │       ├── <19> Var [i]
                    │   │       ╰── <23> Unary [-]
                    │   │           ╰── Constant Int [100]
                    │   ├── Condition
                    │   │   ╰── <29> Assign [-=]
                    │   │       ├── <26> Var [i]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Empty
                    ╰── Return
                        ╰── <39>  [==]
                            ├── <33> Var [i]
                            ╰── <37> Unary [-]
                                ╰── Constant Int [103]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_duffs_device() {
    let src = r#"
        
        int main(void) {
            int count = 37;
            int iterations = (count + 4) / 5;
            switch (count % 5) {
                case 0:
                    do {
                        count = count - 1;
                        case 4:
                            count = count - 1;
                        case 3:
                            count = count - 1;
                        case 2:
                            count = count - 1;
                        case 1:
                            count = count - 1;
                    } while ((iterations = iterations - 1) > 0);
            }
            return (count == 0 && iterations == 0);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── count
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [37]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── iterations
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <22>  [/]
                    │           ├── <19>  [+]
                    │           │   ├── <15> Var [count]
                    │           │   ╰── Constant Int [4]
                    │           ╰── Constant Int [5]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <29>  [%]
                    │   │       ├── <26> Var [count]
                    │   │       ╰── Constant Int [5]
                    │   ╰── Block
                    │       ╰── Case [0]
                    │           ╰── DoWhile
                    │               ├── Body
                    │               │   ╰── Block
                    │               │       ├── <39> Assign [=]
                    │               │       │   ├── <32> Var [count]
                    │               │       │   ╰── <38>  [-]
                    │               │       │       ├── <35> Var [count]
                    │               │       │       ╰── Constant Int [1]
                    │               │       ├── Case [4]
                    │               │       │   ╰── <50> Assign [=]
                    │               │       │       ├── <43> Var [count]
                    │               │       │       ╰── <49>  [-]
                    │               │       │           ├── <46> Var [count]
                    │               │       │           ╰── Constant Int [1]
                    │               │       ├── Case [3]
                    │               │       │   ╰── <62> Assign [=]
                    │               │       │       ├── <55> Var [count]
                    │               │       │       ╰── <61>  [-]
                    │               │       │           ├── <58> Var [count]
                    │               │       │           ╰── Constant Int [1]
                    │               │       ├── Case [2]
                    │               │       │   ╰── <74> Assign [=]
                    │               │       │       ├── <67> Var [count]
                    │               │       │       ╰── <73>  [-]
                    │               │       │           ├── <70> Var [count]
                    │               │       │           ╰── Constant Int [1]
                    │               │       ╰── Case [1]
                    │               │           ╰── <86> Assign [=]
                    │               │               ├── <79> Var [count]
                    │               │               ╰── <85>  [-]
                    │               │                   ├── <82> Var [count]
                    │               │                   ╰── Constant Int [1]
                    │               ╰── Condition
                    │                   ╰── <103>  [>]
                    │                       ├── <100> Assign [=]
                    │                       │   ├── <92> Var [iterations]
                    │                       │   ╰── <98>  [-]
                    │                       │       ├── <95> Var [iterations]
                    │                       │       ╰── Constant Int [1]
                    │                       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <121>  [&&]
                            ├── <113>  [==]
                            │   ├── <110> Var [count]
                            │   ╰── Constant Int [0]
                            ╰── <119>  [==]
                                ├── <116> Var [iterations]
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_goto_bypass_condition() {
    let src = r#"
        int main(void) {
            int i = 1;
            do {
            while_start:
                i = i + 1;
                if (i < 10)
                    goto while_start;
            } while (0);
            return i;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── DoWhile
                    │   ├── Body
                    │   │   ╰── Block
                    │   │       ├── Label [while_start]
                    │   │       │   ╰── <20> Assign [=]
                    │   │       │       ├── <13> Var [i]
                    │   │       │       ╰── <19>  [+]
                    │   │       │           ├── <16> Var [i]
                    │   │       │           ╰── Constant Int [1]
                    │   │       ╰── If
                    │   │           ├── Condition
                    │   │           │   ╰── <27>  [<]
                    │   │           │       ├── <24> Var [i]
                    │   │           │       ╰── Constant Int [10]
                    │   │           ╰── Then
                    │   │               ╰── Goto [while_start]
                    │   ╰── Condition
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <36> Var [i]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_goto_bypass_init_exp() {
    let src = r#"
        int main(void) {
            int i = 0;
            goto target;
            for (i = 5; i < 10; i = i + 1)
            target:
                if (i == 0)
                    return 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Goto [target]
                    ├── For
                    │   ├── Init
                    │   │   ╰── <17> Assign [=]
                    │   │       ├── <14> Var [i]
                    │   │       ╰── Constant Int [5]
                    │   ├── Condition
                    │   │   ╰── <22>  [<]
                    │   │       ├── <19> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <31> Assign [=]
                    │   │       ├── <24> Var [i]
                    │   │       ╰── <30>  [+]
                    │   │           ├── <27> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Label [target]
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <37>  [==]
                    │           │       ├── <34> Var [i]
                    │           │       ╰── Constant Int [0]
                    │           ╰── Then
                    │               ╰── Return
                    │                   ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_goto_bypass_post_exp() {
    let src = r#"
        int main(void) {
            int sum = 0;
            for (int i = 0;; i = 0) {
            lbl:
                sum = sum + 1;
                i = i + 1;
                if (i > 10)
                    break;
                goto lbl;
            }
            return sum;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── sum
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <22> Assign [=]
                    │   │       ├── <19> Var [i]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Block
                    │       ├── Label [lbl]
                    │       │   ╰── <32> Assign [=]
                    │       │       ├── <25> Var [sum]
                    │       │       ╰── <31>  [+]
                    │       │           ├── <28> Var [sum]
                    │       │           ╰── Constant Int [1]
                    │       ├── <43> Assign [=]
                    │       │   ├── <36> Var [i]
                    │       │   ╰── <42>  [+]
                    │       │       ├── <39> Var [i]
                    │       │       ╰── Constant Int [1]
                    │       ├── If
                    │       │   ├── Condition
                    │       │   │   ╰── <49>  [>]
                    │       │   │       ├── <46> Var [i]
                    │       │   │       ╰── Constant Int [10]
                    │       │   ╰── Then
                    │       │       ╰── Break
                    │       ╰── Goto [lbl]
                    ╰── Return
                        ╰── <58> Var [sum]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_label_loop_body() {
    let src = r#"
        
        int main(void) {
            int result = 0;
            goto label;
            while (0)
            label: { result = 1; }
            return result;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Goto [label]
                    ├── While
                    │   ├── Condition
                    │   │   ╰── Constant Int [0]
                    │   ╰── Body
                    │       ╰── Label [label]
                    │           ╰── Block
                    │               ╰── <19> Assign [=]
                    │                   ├── <16> Var [result]
                    │                   ╰── Constant Int [1]
                    ╰── Return
                        ╰── <26> Var [result]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_label_loops_breaks_and_continues() {
    let src = r#"
        int main(void) {
            int sum = 0;
            goto do_label;
            return 0;
        do_label:
            do {
                sum = 1;
                goto while_label;
            } while (1);
        while_label:
            while (1) {
                sum = sum + 1;
                goto break_label;
                return 0;
            break_label:
                break;
            };
            goto for_label;
            return 0;
        for_label:
            for (int i = 0; i < 10; i = i + 1) {
                sum = sum + 1;
                goto continue_label;
                return 0;
            continue_label:
                continue;
                return 0;
            }
            return sum;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── sum
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Goto [do_label]
                    ├── Return
                    │   ╰── Constant Int [0]
                    ├── Label [do_label]
                    │   ╰── DoWhile
                    │       ├── Body
                    │       │   ╰── Block
                    │       │       ├── <20> Assign [=]
                    │       │       │   ├── <17> Var [sum]
                    │       │       │   ╰── Constant Int [1]
                    │       │       ╰── Goto [while_label]
                    │       ╰── Condition
                    │           ╰── Constant Int [1]
                    ├── Label [while_label]
                    │   ╰── While
                    │       ├── Condition
                    │       │   ╰── Constant Int [1]
                    │       ╰── Body
                    │           ╰── Block
                    │               ├── <39> Assign [=]
                    │               │   ├── <32> Var [sum]
                    │               │   ╰── <38>  [+]
                    │               │       ├── <35> Var [sum]
                    │               │       ╰── Constant Int [1]
                    │               ├── Goto [break_label]
                    │               ├── Return
                    │               │   ╰── Constant Int [0]
                    │               ╰── Label [break_label]
                    │                   ╰── Break
                    ├── Empty
                    ├── Goto [for_label]
                    ├── Return
                    │   ╰── Constant Int [0]
                    ├── Label [for_label]
                    │   ╰── For
                    │       ├── Init
                    │       │   ╰── VarDeclaration
                    │       │       ├── Name
                    │       │       │   ╰── i
                    │       │       ├── Type
                    │       │       │   ╰── Int
                    │       │       ╰── Initializer
                    │       │           ╰── Constant Int [0]
                    │       ├── Condition
                    │       │   ╰── <69>  [<]
                    │       │       ├── <66> Var [i]
                    │       │       ╰── Constant Int [10]
                    │       ├── Condition
                    │       │   ╰── <78> Assign [=]
                    │       │       ├── <71> Var [i]
                    │       │       ╰── <77>  [+]
                    │       │           ├── <74> Var [i]
                    │       │           ╰── Constant Int [1]
                    │       ╰── Block
                    │           ├── <87> Assign [=]
                    │           │   ├── <80> Var [sum]
                    │           │   ╰── <86>  [+]
                    │           │       ├── <83> Var [sum]
                    │           │       ╰── Constant Int [1]
                    │           ├── Goto [continue_label]
                    │           ├── Return
                    │           │   ╰── Constant Int [0]
                    │           ├── Label [continue_label]
                    │           │   ╰── Continue
                    │           ╰── Return
                    │               ╰── Constant Int [0]
                    ╰── Return
                        ╰── <103> Var [sum]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_loop_header_postfix_and_prefix() {
    let src = r#"
        int main(void) {
            int i = 100;
            int count = 0;
            while (i--) count++;
            if (count != 100)
                return 0;
            i = 100;
            count = 0;
            while (--i) count++;
            if (count != 99)
                return 0;
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── count
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── While
                    │   ├── Condition
                    │   │   ╰── <20> Postfix [--]
                    │   │       ╰── <18> Var [i]
                    │   ╰── Body
                    │       ╰── <24> Postfix [++]
                    │           ╰── <22> Var [count]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <31>  [!=]
                    │   │       ├── <28> Var [count]
                    │   │       ╰── Constant Int [100]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [0]
                    ├── <39> Assign [=]
                    │   ├── <36> Var [i]
                    │   ╰── Constant Int [100]
                    ├── <45> Assign [=]
                    │   ├── <42> Var [count]
                    │   ╰── Constant Int [0]
                    ├── While
                    │   ├── Condition
                    │   │   ╰── <50> Unary [--]
                    │   │       ╰── <49> Var [i]
                    │   ╰── Body
                    │       ╰── <54> Postfix [++]
                    │           ╰── <52> Var [count]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <61>  [!=]
                    │   │       ├── <58> Var [count]
                    │   │       ╰── Constant Int [99]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [0]
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_loop_in_switch() {
    let src = r#"
        int main(void) {
            int cond = 10;
            switch (cond) {
                case 1:
                    return 0;
                case 10:
                    for (int i = 0; i < 5; i = i + 1) {
                        cond = cond - 1;
                        if (cond == 8)
                            break;
                    }
                    return 123;
                default:
                    return 2;
            }
            return 3;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── cond
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [cond]
                    │   ╰── Block
                    │       ├── Case [1]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [0]
                    │       ├── Case [10]
                    │       │   ╰── For
                    │       │       ├── Init
                    │       │       │   ╰── VarDeclaration
                    │       │       │       ├── Name
                    │       │       │       │   ╰── i
                    │       │       │       ├── Type
                    │       │       │       │   ╰── Int
                    │       │       │       ╰── Initializer
                    │       │       │           ╰── Constant Int [0]
                    │       │       ├── Condition
                    │       │       │   ╰── <29>  [<]
                    │       │       │       ├── <26> Var [i]
                    │       │       │       ╰── Constant Int [5]
                    │       │       ├── Condition
                    │       │       │   ╰── <38> Assign [=]
                    │       │       │       ├── <31> Var [i]
                    │       │       │       ╰── <37>  [+]
                    │       │       │           ├── <34> Var [i]
                    │       │       │           ╰── Constant Int [1]
                    │       │       ╰── Block
                    │       │           ├── <47> Assign [=]
                    │       │           │   ├── <40> Var [cond]
                    │       │           │   ╰── <46>  [-]
                    │       │           │       ├── <43> Var [cond]
                    │       │           │       ╰── Constant Int [1]
                    │       │           ╰── If
                    │       │               ├── Condition
                    │       │               │   ╰── <53>  [==]
                    │       │               │       ├── <50> Var [cond]
                    │       │               │       ╰── Constant Int [8]
                    │       │               ╰── Then
                    │       │                   ╰── Break
                    │       ├── Return
                    │       │   ╰── Constant Int [123]
                    │       ╰── Default
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_post_exp_incr() {
    let src = r#"
        int main(void) {
            int product = 1;
            for (int i = 0; i < 10; i++) {
                product = product + 2;
            }
            return product;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── product
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <22>  [<]
                    │   │       ├── <19> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <26> Postfix [++]
                    │   │       ╰── <24> Var [i]
                    │   ╰── Block
                    │       ╰── <35> Assign [=]
                    │           ├── <28> Var [product]
                    │           ╰── <34>  [+]
                    │               ├── <31> Var [product]
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── <41> Var [product]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch() {
    let src = r#"
        
        int main(void) {
            switch(3) {
                case 0: return 0;
                case 1: return 1;
                case 3: return 3;
                case 5: return 5;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Switch
                        ├── Expression
                        │   ╰── Constant Int [3]
                        ╰── Block
                            ├── Case [0]
                            │   ╰── Return
                            │       ╰── Constant Int [0]
                            ├── Case [1]
                            │   ╰── Return
                            │       ╰── Constant Int [1]
                            ├── Case [3]
                            │   ╰── Return
                            │       ╰── Constant Int [3]
                            ╰── Case [5]
                                ╰── Return
                                    ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_assign_in_condition() {
    let src = r#"
        int main(void) {
            int a = 0;
            switch (a = 1) {
                case 0:
                    return 10;
                case 1:
                    a = a * 2;
                    break;
                default:
                    a = 99;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <15> Assign [=]
                    │   │       ├── <12> Var [a]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Block
                    │       ├── Case [0]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [10]
                    │       ├── Case [1]
                    │       │   ╰── <29> Assign [=]
                    │       │       ├── <22> Var [a]
                    │       │       ╰── <28>  [*]
                    │       │           ├── <25> Var [a]
                    │       │           ╰── Constant Int [2]
                    │       ├── Break
                    │       ╰── Default
                    │           ╰── <37> Assign [=]
                    │               ├── <34> Var [a]
                    │               ╰── Constant Int [99]
                    ╰── Return
                        ╰── <44> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_break() {
    let src = r#"
        int main(void) {
            int a = 5;
            switch (a) {
                case 5:
                    a = 10;
                    break;
                case 6:
                    a = 0;
                    break;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [5]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Block
                    │       ├── Case [5]
                    │       │   ╰── <18> Assign [=]
                    │       │       ├── <15> Var [a]
                    │       │       ╰── Constant Int [10]
                    │       ├── Break
                    │       ├── Case [6]
                    │       │   ╰── <27> Assign [=]
                    │       │       ├── <24> Var [a]
                    │       │       ╰── Constant Int [0]
                    │       ╰── Break
                    ╰── Return
                        ╰── <35> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_decl() {
    let src = r#"
        int main(void) {
            int a = 3;
            int b = 0;
            switch(a) {
                int a = (b = 5);
            case 3:
                a = 4;
                b = b + a;
            }
            return a == 3 && b == 4;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <18> Var [a]
                    │   ╰── Block
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── a
                    │       │   ├── Type
                    │       │   │   ╰── Int
                    │       │   ╰── Initializer
                    │       │       ╰── <27> Assign [=]
                    │       │           ├── <23> Var [b]
                    │       │           ╰── Constant Int [5]
                    │       ├── Case [3]
                    │       │   ╰── <35> Assign [=]
                    │       │       ├── <32> Var [a]
                    │       │       ╰── Constant Int [4]
                    │       ╰── <47> Assign [=]
                    │           ├── <39> Var [b]
                    │           ╰── <46>  [+]
                    │               ├── <42> Var [b]
                    │               ╰── <45> Var [a]
                    ╰── Return
                        ╰── <63>  [&&]
                            ├── <56>  [==]
                            │   ├── <53> Var [a]
                            │   ╰── Constant Int [3]
                            ╰── <62>  [==]
                                ├── <59> Var [b]
                                ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_default() {
    let src = r#"
        int main(void) {
            int a = 0;
            switch(a) {
                case 1:
                    return 1;
                case 2:
                    return 9;
                case 4:
                    a = 11;
                    break;
                default:
                    a = 22;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Block
                    │       ├── Case [1]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [1]
                    │       ├── Case [2]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [9]
                    │       ├── Case [4]
                    │       │   ╰── <26> Assign [=]
                    │       │       ├── <23> Var [a]
                    │       │       ╰── Constant Int [11]
                    │       ├── Break
                    │       ╰── Default
                    │           ╰── <34> Assign [=]
                    │               ├── <31> Var [a]
                    │               ╰── Constant Int [22]
                    ╰── Return
                        ╰── <41> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_default_fallthrough() {
    let src = r#"
        int main(void) {
            int a = 5;
            switch(0) {
                default:
                    a = 0;
                case 1:
                    return a;
            }
            return a + 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [5]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── Constant Int [0]
                    │   ╰── Block
                    │       ├── Default
                    │       │   ╰── <16> Assign [=]
                    │       │       ├── <13> Var [a]
                    │       │       ╰── Constant Int [0]
                    │       ╰── Case [1]
                    │           ╰── Return
                    │               ╰── <21> Var [a]
                    ╰── Return
                        ╰── <31>  [+]
                            ├── <28> Var [a]
                            ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_default_not_last() {
    let src = r#"
        int main(void) {
            int a;
            int b = a = 7;
            switch (a + b) {
                default: return 0;
                case 2: return 1;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ╰── Type
                    │       ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <16> Assign [=]
                    │           ├── <13> Var [a]
                    │           ╰── Constant Int [7]
                    ╰── Switch
                        ├── Expression
                        │   ╰── <24>  [+]
                        │       ├── <20> Var [a]
                        │       ╰── <23> Var [b]
                        ╰── Block
                            ├── Default
                            │   ╰── Return
                            │       ╰── Constant Int [0]
                            ╰── Case [2]
                                ╰── Return
                                    ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_default_only() {
    let src = r#"
        int main(void) {
            int a = 1;
            switch(a) default: return 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Default
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_empty() {
    let src = r#"
        int main(void) {
            int x = 10;
            switch(x = x + 1) {
            }
            switch(x = x + 1)
            ;
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <19> Assign [=]
                    │   │       ├── <12> Var [x]
                    │   │       ╰── <18>  [+]
                    │   │           ├── <15> Var [x]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <31> Assign [=]
                    │   │       ├── <24> Var [x]
                    │   │       ╰── <30>  [+]
                    │   │           ├── <27> Var [x]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Empty
                    ╰── Return
                        ╰── <35> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_fallthrough() {
    let src = r#"
        int main(void) {
            int a = 4;
            int b = 9;
            int c = 0;
            switch (a ? b : 7) {
                case 0:
                    return 5;
                case 7:
                    c = 1;
                case 9:
                    c = 2;
                case 1:
                    c = c + 4;
            }
            return c;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [9]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <{node_id}> Conditional [?]
                    │   │       ├── <24> Var [a]
                    │   │       ├── Then
                    │   │       │   ╰── <26> Var [b]
                    │   │       ╰── Else
                    │   │           ╰── Constant Int [7]
                    │   ╰── Block
                    │       ├── Case [0]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [5]
                    │       ├── Case [7]
                    │       │   ╰── <38> Assign [=]
                    │       │       ├── <35> Var [c]
                    │       │       ╰── Constant Int [1]
                    │       ├── Case [9]
                    │       │   ╰── <46> Assign [=]
                    │       │       ├── <43> Var [c]
                    │       │       ╰── Constant Int [2]
                    │       ╰── Case [1]
                    │           ╰── <58> Assign [=]
                    │               ├── <51> Var [c]
                    │               ╰── <57>  [+]
                    │                   ├── <54> Var [c]
                    │                   ╰── Constant Int [4]
                    ╰── Return
                        ╰── <65> Var [c]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_goto_mid_case() {
    let src = r#"
        int main(void) {
            int a = 0;
            goto mid_case;
            switch (4) {
                case 4:
                    a = 5;
                mid_case:
                    a = a + 1;
                    return a;
            }
            return 100;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Goto [mid_case]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── Constant Int [4]
                    │   ╰── Block
                    │       ├── Case [4]
                    │       │   ╰── <19> Assign [=]
                    │       │       ├── <16> Var [a]
                    │       │       ╰── Constant Int [5]
                    │       ├── Label [mid_case]
                    │       │   ╰── <31> Assign [=]
                    │       │       ├── <24> Var [a]
                    │       │       ╰── <30>  [+]
                    │       │           ├── <27> Var [a]
                    │       │           ╰── Constant Int [1]
                    │       ╰── Return
                    │           ╰── <35> Var [a]
                    ╰── Return
                        ╰── Constant Int [100]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_in_loop() {
    let src = r#"
        int main(void) {
            int acc = 0;
            int ctr = 0;
            for (int i = 0; i < 10; i = i + 1) {
                switch(i) {
                    case 0:
                        acc = 2;
                        break;
                    case 1:
                        acc = acc * 3;
                        break;
                    case 2:
                        acc = acc * 4;
                        break;
                    default:
                        acc = acc + 1;
                }
                ctr = ctr + 1;
            }
            return ctr == 10 && acc == 31;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── acc
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ctr
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <28>  [<]
                    │   │       ├── <25> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <37> Assign [=]
                    │   │       ├── <30> Var [i]
                    │   │       ╰── <36>  [+]
                    │   │           ├── <33> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ├── Switch
                    │       │   ├── Expression
                    │       │   │   ╰── <39> Var [i]
                    │       │   ╰── Block
                    │       │       ├── Case [0]
                    │       │       │   ╰── <45> Assign [=]
                    │       │       │       ├── <42> Var [acc]
                    │       │       │       ╰── Constant Int [2]
                    │       │       ├── Break
                    │       │       ├── Case [1]
                    │       │       │   ╰── <58> Assign [=]
                    │       │       │       ├── <51> Var [acc]
                    │       │       │       ╰── <57>  [*]
                    │       │       │           ├── <54> Var [acc]
                    │       │       │           ╰── Constant Int [3]
                    │       │       ├── Break
                    │       │       ├── Case [2]
                    │       │       │   ╰── <71> Assign [=]
                    │       │       │       ├── <64> Var [acc]
                    │       │       │       ╰── <70>  [*]
                    │       │       │           ├── <67> Var [acc]
                    │       │       │           ╰── Constant Int [4]
                    │       │       ├── Break
                    │       │       ╰── Default
                    │       │           ╰── <83> Assign [=]
                    │       │               ├── <76> Var [acc]
                    │       │               ╰── <82>  [+]
                    │       │                   ├── <79> Var [acc]
                    │       │                   ╰── Constant Int [1]
                    │       ╰── <97> Assign [=]
                    │           ├── <90> Var [ctr]
                    │           ╰── <96>  [+]
                    │               ├── <93> Var [ctr]
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── <113>  [&&]
                            ├── <106>  [==]
                            │   ├── <103> Var [ctr]
                            │   ╰── Constant Int [10]
                            ╰── <112>  [==]
                                ├── <109> Var [acc]
                                ╰── Constant Int [31]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_nested_cases() {
    let src = r#"
        int main(void) {
            int switch1 = 0;
            int switch2 = 0;
            int switch3 = 0;
            switch(3) {
                case 0: return 0;
                case 1: if (0) {
                    case 3: switch1 = 1; break;
                }
                default: return 0;
            }
            switch(4) {
                case 0: return 0;
                if (1) {
                    return 0;
                } else {
                    case 4: switch2 = 1; break;
                }
                default: return 0;
            }
            switch (5) {
                for (int i = 0; i < 10; i = i + 1) {
                    switch1 = 0;
                    case 5: switch3 = 1; break;
                    default: return 0;
                }
            }
            return (switch1 && switch2 && switch3);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── switch1
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── switch2
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── switch3
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── Constant Int [3]
                    │   ╰── Block
                    │       ├── Case [0]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [0]
                    │       ├── Case [1]
                    │       │   ╰── If
                    │       │       ├── Condition
                    │       │       │   ╰── Constant Int [0]
                    │       │       ╰── Then
                    │       │           ╰── Block
                    │       │               ├── Case [3]
                    │       │               │   ╰── <35> Assign [=]
                    │       │               │       ├── <32> Var [switch1]
                    │       │               │       ╰── Constant Int [1]
                    │       │               ╰── Break
                    │       ╰── Default
                    │           ╰── Return
                    │               ╰── Constant Int [0]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── Constant Int [4]
                    │   ╰── Block
                    │       ├── Case [0]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [0]
                    │       ├── If
                    │       │   ├── Condition
                    │       │   │   ╰── Constant Int [1]
                    │       │   ├── Then
                    │       │   │   ╰── Block
                    │       │   │       ╰── Return
                    │       │   │           ╰── Constant Int [0]
                    │       │   ╰── Else
                    │       │       ╰── Block
                    │       │           ├── Case [4]
                    │       │           │   ╰── <64> Assign [=]
                    │       │           │       ├── <61> Var [switch2]
                    │       │           │       ╰── Constant Int [1]
                    │       │           ╰── Break
                    │       ╰── Default
                    │           ╰── Return
                    │               ╰── Constant Int [0]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── Constant Int [5]
                    │   ╰── Block
                    │       ╰── For
                    │           ├── Init
                    │           │   ╰── VarDeclaration
                    │           │       ├── Name
                    │           │       │   ╰── i
                    │           │       ├── Type
                    │           │       │   ╰── Int
                    │           │       ╰── Initializer
                    │           │           ╰── Constant Int [0]
                    │           ├── Condition
                    │           │   ╰── <89>  [<]
                    │           │       ├── <86> Var [i]
                    │           │       ╰── Constant Int [10]
                    │           ├── Condition
                    │           │   ╰── <98> Assign [=]
                    │           │       ├── <91> Var [i]
                    │           │       ╰── <97>  [+]
                    │           │           ├── <94> Var [i]
                    │           │           ╰── Constant Int [1]
                    │           ╰── Block
                    │               ├── <103> Assign [=]
                    │               │   ├── <100> Var [switch1]
                    │               │   ╰── Constant Int [0]
                    │               ├── Case [5]
                    │               │   ╰── <110> Assign [=]
                    │               │       ├── <107> Var [switch3]
                    │               │       ╰── Constant Int [1]
                    │               ├── Break
                    │               ╰── Default
                    │                   ╰── Return
                    │                       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <133>  [&&]
                            ├── <128>  [&&]
                            │   ├── <124> Var [switch1]
                            │   ╰── <127> Var [switch2]
                            ╰── <131> Var [switch3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_nested_not_taken() {
    let src = r#"
        
        int main(void) {
            int a = 0;
            switch(a) {
                case 1:
                    switch(a) {
                        case 0: return 0;
                        default: return 0;
                    }
                default: a = 2;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Block
                    │       ├── Case [1]
                    │       │   ╰── Switch
                    │       │       ├── Expression
                    │       │       │   ╰── <15> Var [a]
                    │       │       ╰── Block
                    │       │           ├── Case [0]
                    │       │           │   ╰── Return
                    │       │           │       ╰── Constant Int [0]
                    │       │           ╰── Default
                    │       │               ╰── Return
                    │       │                   ╰── Constant Int [0]
                    │       ╰── Default
                    │           ╰── <31> Assign [=]
                    │               ├── <28> Var [a]
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── <38> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_nested_switch() {
    let src = r#"
        int main(void){
            switch(3) {
                case 0:
                    return 0;
                case 3: {
                    switch(4) {
                        case 3: return 0;
                        case 4: return 1;
                        default: return 0;
                    }
                }
                case 4: return 0;
                default: return 0;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Switch
                        ├── Expression
                        │   ╰── Constant Int [3]
                        ╰── Block
                            ├── Case [0]
                            │   ╰── Return
                            │       ╰── Constant Int [0]
                            ├── Case [3]
                            │   ╰── Block
                            │       ╰── Switch
                            │           ├── Expression
                            │           │   ╰── Constant Int [4]
                            │           ╰── Block
                            │               ├── Case [3]
                            │               │   ╰── Return
                            │               │       ╰── Constant Int [0]
                            │               ├── Case [4]
                            │               │   ╰── Return
                            │               │       ╰── Constant Int [1]
                            │               ╰── Default
                            │                   ╰── Return
                            │                       ╰── Constant Int [0]
                            ├── Case [4]
                            │   ╰── Return
                            │       ╰── Constant Int [0]
                            ╰── Default
                                ╰── Return
                                    ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_no_case() {
    let src = r#"
        int main(void) {
            int a = 4;
            switch(a)
                return 0;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [4]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Return
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <17> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_not_taken() {
    let src = r#"
        int main(void) {
            int a = 1;
            switch(a) {
                case 0: return 0;
                case 2: return 0;
                case 3: return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Block
                    │       ├── Case [0]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [0]
                    │       ├── Case [2]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [0]
                    │       ╰── Case [3]
                    │           ╰── Return
                    │               ╰── Constant Int [0]
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_single_case() {
    let src = r#"
        int main(void) {
            int a = 1;
            switch(a) case 1: return 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Case [1]
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_with_continue() {
    let src = r#"
        int main(void) {
            switch(4) {
                case 0:
                    return 0;
                case 4: {
                    int acc = 0;
                    for (int i = 0; i < 10; i = i + 1) {
                        if (i % 2)
                            continue;
                        acc = acc + 1;
                    }
                    return acc;
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── Constant Int [4]
                    │   ╰── Block
                    │       ├── Case [0]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [0]
                    │       ╰── Case [4]
                    │           ╰── Block
                    │               ├── VarDeclaration
                    │               │   ├── Name
                    │               │   │   ╰── acc
                    │               │   ├── Type
                    │               │   │   ╰── Int
                    │               │   ╰── Initializer
                    │               │       ╰── Constant Int [0]
                    │               ├── For
                    │               │   ├── Init
                    │               │   │   ╰── VarDeclaration
                    │               │   │       ├── Name
                    │               │   │       │   ╰── i
                    │               │   │       ├── Type
                    │               │   │       │   ╰── Int
                    │               │   │       ╰── Initializer
                    │               │   │           ╰── Constant Int [0]
                    │               │   ├── Condition
                    │               │   │   ╰── <28>  [<]
                    │               │   │       ├── <25> Var [i]
                    │               │   │       ╰── Constant Int [10]
                    │               │   ├── Condition
                    │               │   │   ╰── <37> Assign [=]
                    │               │   │       ├── <30> Var [i]
                    │               │   │       ╰── <36>  [+]
                    │               │   │           ├── <33> Var [i]
                    │               │   │           ╰── Constant Int [1]
                    │               │   ╰── Block
                    │               │       ├── If
                    │               │       │   ├── Condition
                    │               │       │   │   ╰── <42>  [%]
                    │               │       │   │       ├── <39> Var [i]
                    │               │       │   │       ╰── Constant Int [2]
                    │               │       │   ╰── Then
                    │               │       │       ╰── Continue
                    │               │       ╰── <53> Assign [=]
                    │               │           ├── <46> Var [acc]
                    │               │           ╰── <52>  [+]
                    │               │               ├── <49> Var [acc]
                    │               │               ╰── Constant Int [1]
                    │               ╰── Return
                    │                   ╰── <59> Var [acc]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_extra_credit_switch_with_continue_2() {
    let src = r#"
        int main(void) {
            int sum = 0;
            for (int i = 0; i < 10; i = i + 1) {
                switch(i % 2) {
                    case 0: continue;
                    default: sum = sum + 1;
                }
            }
            return sum;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── sum
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <22>  [<]
                    │   │       ├── <19> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <31> Assign [=]
                    │   │       ├── <24> Var [i]
                    │   │       ╰── <30>  [+]
                    │   │           ├── <27> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── Switch
                    │           ├── Expression
                    │           │   ╰── <36>  [%]
                    │           │       ├── <33> Var [i]
                    │           │       ╰── Constant Int [2]
                    │           ╰── Block
                    │               ├── Case [0]
                    │               │   ╰── Continue
                    │               ╰── Default
                    │                   ╰── <48> Assign [=]
                    │                       ├── <41> Var [sum]
                    │                       ╰── <47>  [+]
                    │                           ├── <44> Var [sum]
                    │                           ╰── Constant Int [1]
                    ╰── Return
                        ╰── <58> Var [sum]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_for() {
    let src = r#"
        int main(void) {
            int a = 12345;
            int i;
            for (i = 5; i >= 0; i = i - 1)
                a = a / 3;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [12345]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ╰── Type
                    │       ╰── Int
                    ├── For
                    │   ├── Init
                    │   │   ╰── <19> Assign [=]
                    │   │       ├── <16> Var [i]
                    │   │       ╰── Constant Int [5]
                    │   ├── Condition
                    │   │   ╰── <24>  [>=]
                    │   │       ├── <21> Var [i]
                    │   │       ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <33> Assign [=]
                    │   │       ├── <26> Var [i]
                    │   │       ╰── <32>  [-]
                    │   │           ├── <29> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── <42> Assign [=]
                    │       ├── <35> Var [a]
                    │       ╰── <41>  [/]
                    │           ├── <38> Var [a]
                    │           ╰── Constant Int [3]
                    ╰── Return
                        ╰── <46> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_for_absent_condition() {
    let src = r#"
        int main(void) {
            for (int i = 400; ; i = i - 100)
                if (i == 100)
                    return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── For
                        ├── Init
                        │   ╰── VarDeclaration
                        │       ├── Name
                        │       │   ╰── i
                        │       ├── Type
                        │       │   ╰── Int
                        │       ╰── Initializer
                        │           ╰── Constant Int [400]
                        ├── Condition
                        │   ╰── <20> Assign [=]
                        │       ├── <13> Var [i]
                        │       ╰── <19>  [-]
                        │           ├── <16> Var [i]
                        │           ╰── Constant Int [100]
                        ╰── If
                            ├── Condition
                            │   ╰── <25>  [==]
                            │       ├── <22> Var [i]
                            │       ╰── Constant Int [100]
                            ╰── Then
                                ╰── Return
                                    ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_for_absent_post() {
    let src = r#"
        int main(void) {
            int a = -2147;
            for (; a % 5 != 0;) {
                a = a + 1;
            }
            return a % 5 || a > 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <10> Unary [-]
                    │           ╰── Constant Int [2147]
                    ├── For
                    │   ├── Condition
                    │   │   ╰── <20>  [!=]
                    │   │       ├── <17>  [%]
                    │   │       │   ├── <14> Var [a]
                    │   │       │   ╰── Constant Int [5]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Block
                    │       ╰── <29> Assign [=]
                    │           ├── <22> Var [a]
                    │           ╰── <28>  [+]
                    │               ├── <25> Var [a]
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── <45>  [||]
                            ├── <38>  [%]
                            │   ├── <35> Var [a]
                            │   ╰── Constant Int [5]
                            ╰── <44>  [>]
                                ├── <41> Var [a]
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_for_decl() {
    let src = r#"
        int main(void) {
            int a = 0;
            for (int i = -100; i <= 0; i = i + 1)
                a = a + 1;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <16> Unary [-]
                    │   │               ╰── Constant Int [100]
                    │   ├── Condition
                    │   │   ╰── <24>  [<=]
                    │   │       ├── <21> Var [i]
                    │   │       ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <33> Assign [=]
                    │   │       ├── <26> Var [i]
                    │   │       ╰── <32>  [+]
                    │   │           ├── <29> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── <42> Assign [=]
                    │       ├── <35> Var [a]
                    │       ╰── <41>  [+]
                    │           ├── <38> Var [a]
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── <46> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_for_nested_shadow() {
    let src = r#"
        int main(void) {
            int i = 0;
            int j = 0;
            int k = 1;
            for (int i = 100; i > 0; i = i - 1) {
                int i = 1;
                int j = i + k;
                k = j;
            }
            return k == 101 && i == 0 && j == 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── j
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── k
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [100]
                    │   ├── Condition
                    │   │   ╰── <34>  [>]
                    │   │       ├── <31> Var [i]
                    │   │       ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <43> Assign [=]
                    │   │       ├── <36> Var [i]
                    │   │       ╰── <42>  [-]
                    │   │           ├── <39> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── i
                    │       │   ├── Type
                    │       │   │   ╰── Int
                    │       │   ╰── Initializer
                    │       │       ╰── Constant Int [1]
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── j
                    │       │   ├── Type
                    │       │   │   ╰── Int
                    │       │   ╰── Initializer
                    │       │       ╰── <58>  [+]
                    │       │           ├── <54> Var [i]
                    │       │           ╰── <57> Var [k]
                    │       ╰── <66> Assign [=]
                    │           ├── <62> Var [k]
                    │           ╰── <65> Var [j]
                    ╰── Return
                        ╰── <89>  [&&]
                            ├── <82>  [&&]
                            │   ├── <75>  [==]
                            │   │   ├── <72> Var [k]
                            │   │   ╰── Constant Int [101]
                            │   ╰── <81>  [==]
                            │       ├── <78> Var [i]
                            │       ╰── Constant Int [0]
                            ╰── <88>  [==]
                                ├── <85> Var [j]
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_for_shadow() {
    let src = r#"
        int main(void) {
            int shadow = 1;
            int acc = 0;
            for (int shadow = 0; shadow < 10; shadow = shadow + 1) {
                acc = acc + shadow;
            }
            return acc == 45 && shadow == 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── shadow
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── acc
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── shadow
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <28>  [<]
                    │   │       ├── <25> Var [shadow]
                    │   │       ╰── Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <37> Assign [=]
                    │   │       ├── <30> Var [shadow]
                    │   │       ╰── <36>  [+]
                    │   │           ├── <33> Var [shadow]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── <47> Assign [=]
                    │           ├── <39> Var [acc]
                    │           ╰── <46>  [+]
                    │               ├── <42> Var [acc]
                    │               ╰── <45> Var [shadow]
                    ╰── Return
                        ╰── <63>  [&&]
                            ├── <56>  [==]
                            │   ├── <53> Var [acc]
                            │   ╰── Constant Int [45]
                            ╰── <62>  [==]
                                ├── <59> Var [shadow]
                                ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_multi_break() {
    let src = r#"
        int main(void) {
            int i = 0;
            while (1) {
                i = i + 1;
                if (i > 10)
                    break;
            }
            int j = 10;
            while (1) {
                j = j - 1;
                if (j < 0)
                    break;
            }
            int result = j == -1 && i == 11;
            return result;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── While
                    │   ├── Condition
                    │   │   ╰── Constant Int [1]
                    │   ╰── Body
                    │       ╰── Block
                    │           ├── <20> Assign [=]
                    │           │   ├── <13> Var [i]
                    │           │   ╰── <19>  [+]
                    │           │       ├── <16> Var [i]
                    │           │       ╰── Constant Int [1]
                    │           ╰── If
                    │               ├── Condition
                    │               │   ╰── <26>  [>]
                    │               │       ├── <23> Var [i]
                    │               │       ╰── Constant Int [10]
                    │               ╰── Then
                    │                   ╰── Break
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── j
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── While
                    │   ├── Condition
                    │   │   ╰── Constant Int [1]
                    │   ╰── Body
                    │       ╰── Block
                    │           ├── <47> Assign [=]
                    │           │   ├── <40> Var [j]
                    │           │   ╰── <46>  [-]
                    │           │       ├── <43> Var [j]
                    │           │       ╰── Constant Int [1]
                    │           ╰── If
                    │               ├── Condition
                    │               │   ╰── <53>  [<]
                    │               │       ├── <50> Var [j]
                    │               │       ╰── Constant Int [0]
                    │               ╰── Then
                    │                   ╰── Break
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <75>  [&&]
                    │           ├── <68>  [==]
                    │           │   ├── <63> Var [j]
                    │           │   ╰── <67> Unary [-]
                    │           │       ╰── Constant Int [1]
                    │           ╰── <74>  [==]
                    │               ├── <71> Var [i]
                    │               ╰── Constant Int [11]
                    ╰── Return
                        ╰── <79> Var [result]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_multi_continue_same_loop() {
    let src = r#"
        int main(void) {
            int x = 10;
            int y = 0;
            int z = 0;
            do {
                z = z + 1;
                if (x <= 0)
                    continue;
                x = x - 1;
                if (y >= 10)
                    continue;
                y = y + 1;
            } while (z != 50);
            return z == 50 && x == 0 && y == 10;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── z
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── DoWhile
                    │   ├── Body
                    │   │   ╰── Block
                    │   │       ├── <31> Assign [=]
                    │   │       │   ├── <24> Var [z]
                    │   │       │   ╰── <30>  [+]
                    │   │       │       ├── <27> Var [z]
                    │   │       │       ╰── Constant Int [1]
                    │   │       ├── If
                    │   │       │   ├── Condition
                    │   │       │   │   ╰── <37>  [<=]
                    │   │       │   │       ├── <34> Var [x]
                    │   │       │   │       ╰── Constant Int [0]
                    │   │       │   ╰── Then
                    │   │       │       ╰── Continue
                    │   │       ├── <48> Assign [=]
                    │   │       │   ├── <41> Var [x]
                    │   │       │   ╰── <47>  [-]
                    │   │       │       ├── <44> Var [x]
                    │   │       │       ╰── Constant Int [1]
                    │   │       ├── If
                    │   │       │   ├── Condition
                    │   │       │   │   ╰── <54>  [>=]
                    │   │       │   │       ├── <51> Var [y]
                    │   │       │   │       ╰── Constant Int [10]
                    │   │       │   ╰── Then
                    │   │       │       ╰── Continue
                    │   │       ╰── <65> Assign [=]
                    │   │           ├── <58> Var [y]
                    │   │           ╰── <64>  [+]
                    │   │               ├── <61> Var [y]
                    │   │               ╰── Constant Int [1]
                    │   ╰── Condition
                    │       ╰── <73>  [!=]
                    │           ├── <70> Var [z]
                    │           ╰── Constant Int [50]
                    ╰── Return
                        ╰── <93>  [&&]
                            ├── <86>  [&&]
                            │   ├── <79>  [==]
                            │   │   ├── <76> Var [z]
                            │   │   ╰── Constant Int [50]
                            │   ╰── <85>  [==]
                            │       ├── <82> Var [x]
                            │       ╰── Constant Int [0]
                            ╰── <92>  [==]
                                ├── <89> Var [y]
                                ╰── Constant Int [10]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_nested_break() {
    let src = r#"
        int main(void) {
            int ans = 0;
            for (int i = 0; i < 10; i = i + 1)
                for (int j = 0; j < 10; j = j + 1)
                    if ((i / 2)*2 == i)
                        break;
                    else
                        ans = ans + i;
            return ans;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ans
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <22>  [<]
                    │   │       ├── <19> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <31> Assign [=]
                    │   │       ├── <24> Var [i]
                    │   │       ╰── <30>  [+]
                    │   │           ├── <27> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── For
                    │       ├── Init
                    │       │   ╰── VarDeclaration
                    │       │       ├── Name
                    │       │       │   ╰── j
                    │       │       ├── Type
                    │       │       │   ╰── Int
                    │       │       ╰── Initializer
                    │       │           ╰── Constant Int [0]
                    │       ├── Condition
                    │       │   ╰── <43>  [<]
                    │       │       ├── <40> Var [j]
                    │       │       ╰── Constant Int [10]
                    │       ├── Condition
                    │       │   ╰── <52> Assign [=]
                    │       │       ├── <45> Var [j]
                    │       │       ╰── <51>  [+]
                    │       │           ├── <48> Var [j]
                    │       │           ╰── Constant Int [1]
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <65>  [==]
                    │           │       ├── <61>  [*]
                    │           │       │   ├── <58>  [/]
                    │           │       │   │   ├── <54> Var [i]
                    │           │       │   │   ╰── Constant Int [2]
                    │           │       │   ╰── Constant Int [2]
                    │           │       ╰── <64> Var [i]
                    │           ├── Then
                    │           │   ╰── Break
                    │           ╰── Else
                    │               ╰── <76> Assign [=]
                    │                   ├── <68> Var [ans]
                    │                   ╰── <75>  [+]
                    │                       ├── <71> Var [ans]
                    │                       ╰── <74> Var [i]
                    ╰── Return
                        ╰── <82> Var [ans]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_nested_continue() {
    let src = r#"
        int main(void) {
            int x = 5;
            int acc = 0;
            while (x >= 0) {
                int i = x;
                while (i <= 10) {
                    i = i + 1;
                    if (i % 2)
                        continue;
                    acc = acc + 1;
                }
                x = x - 1;
            }
            return acc;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── acc
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── While
                    │   ├── Condition
                    │   │   ╰── <21>  [>=]
                    │   │       ├── <18> Var [x]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Body
                    │       ╰── Block
                    │           ├── VarDeclaration
                    │           │   ├── Name
                    │           │   │   ╰── i
                    │           │   ├── Type
                    │           │   │   ╰── Int
                    │           │   ╰── Initializer
                    │           │       ╰── <26> Var [x]
                    │           ├── While
                    │           │   ├── Condition
                    │           │   │   ╰── <33>  [<=]
                    │           │   │       ├── <30> Var [i]
                    │           │   │       ╰── Constant Int [10]
                    │           │   ╰── Body
                    │           │       ╰── Block
                    │           │           ├── <42> Assign [=]
                    │           │           │   ├── <35> Var [i]
                    │           │           │   ╰── <41>  [+]
                    │           │           │       ├── <38> Var [i]
                    │           │           │       ╰── Constant Int [1]
                    │           │           ├── If
                    │           │           │   ├── Condition
                    │           │           │   │   ╰── <48>  [%]
                    │           │           │   │       ├── <45> Var [i]
                    │           │           │   │       ╰── Constant Int [2]
                    │           │           │   ╰── Then
                    │           │           │       ╰── Continue
                    │           │           ╰── <59> Assign [=]
                    │           │               ├── <52> Var [acc]
                    │           │               ╰── <58>  [+]
                    │           │                   ├── <55> Var [acc]
                    │           │                   ╰── Constant Int [1]
                    │           ╰── <72> Assign [=]
                    │               ├── <65> Var [x]
                    │               ╰── <71>  [-]
                    │                   ├── <68> Var [x]
                    │                   ╰── Constant Int [1]
                    ╰── Return
                        ╰── <78> Var [acc]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_nested_loop() {
    let src = r#"
        int main(void) {
            int acc = 0;
            int x = 100;
            while (x) {
                int y = 10;
                x = x - y;
                while (y) {
                    acc = acc + 1;
                    y = y - 1;
                }
            }
            return acc == 100 && x == 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── acc
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── While
                    │   ├── Condition
                    │   │   ╰── <18> Var [x]
                    │   ╰── Body
                    │       ╰── Block
                    │           ├── VarDeclaration
                    │           │   ├── Name
                    │           │   │   ╰── y
                    │           │   ├── Type
                    │           │   │   ╰── Int
                    │           │   ╰── Initializer
                    │           │       ╰── Constant Int [10]
                    │           ├── <34> Assign [=]
                    │           │   ├── <26> Var [x]
                    │           │   ╰── <33>  [-]
                    │           │       ├── <29> Var [x]
                    │           │       ╰── <32> Var [y]
                    │           ╰── While
                    │               ├── Condition
                    │               │   ╰── <37> Var [y]
                    │               ╰── Body
                    │                   ╰── Block
                    │                       ├── <46> Assign [=]
                    │                       │   ├── <39> Var [acc]
                    │                       │   ╰── <45>  [+]
                    │                       │       ├── <42> Var [acc]
                    │                       │       ╰── Constant Int [1]
                    │                       ╰── <56> Assign [=]
                    │                           ├── <49> Var [y]
                    │                           ╰── <55>  [-]
                    │                               ├── <52> Var [y]
                    │                               ╰── Constant Int [1]
                    ╰── Return
                        ╰── <75>  [&&]
                            ├── <68>  [==]
                            │   ├── <65> Var [acc]
                            │   ╰── Constant Int [100]
                            ╰── <74>  [==]
                                ├── <71> Var [x]
                                ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_null_for_header() {
    let src = r#"
        int main(void) {
            int a = 0;
            for (; ; ) {
                a = a + 1;
                if (a > 3)
                    break;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ╰── Block
                    │       ├── <19> Assign [=]
                    │       │   ├── <12> Var [a]
                    │       │   ╰── <18>  [+]
                    │       │       ├── <15> Var [a]
                    │       │       ╰── Constant Int [1]
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <25>  [>]
                    │           │       ├── <22> Var [a]
                    │           │       ╰── Constant Int [3]
                    │           ╰── Then
                    │               ╰── Break
                    ╰── Return
                        ╰── <32> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_8_valid_while() {
    let src = r#"
        int main(void) {
            int a = 0;
            while (a < 5)
                a = a + 2;
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── While
                    │   ├── Condition
                    │   │   ╰── <15>  [<]
                    │   │       ├── <12> Var [a]
                    │   │       ╰── Constant Int [5]
                    │   ╰── Body
                    │       ╰── <24> Assign [=]
                    │           ├── <17> Var [a]
                    │           ╰── <23>  [+]
                    │               ├── <20> Var [a]
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── <28> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_assign_to_fun_call() {
    let src = r#"
        int x(void);
        int main(void) {
            x() = 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ├── <14> Assign [=]
                    │   ├── <11> FunctionCall [x]
                    │   ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_decl_params_with_same_name() {
    let src = r#"
        int foo(int a, int a);
        int main(void) {
            return foo(1, 2);
        }
        int foo(int a, int b) {
            return a + b;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── a
            │           ╰── Type
            │               ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <19> FunctionCall [foo]
            │               ├── Constant Int [1]
            │               ╰── Constant Int [2]
            ╰── Function [foo]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── b
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ╰── Return
                        ╰── <38>  [+]
                            ├── <34> Var [a]
                            ╰── <37> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_extra_credit_call_label_as_function() {
    let src = r#"
        int main(void) {
            int x = 1;
            a:
            x = x + 1;
            a();
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── Label [a]
                    │   ╰── <20> Assign [=]
                    │       ├── <13> Var [x]
                    │       ╰── <19>  [+]
                    │           ├── <16> Var [x]
                    │           ╰── Constant Int [1]
                    ├── <24> FunctionCall [a]
                    ╰── Return
                        ╰── <27> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_extra_credit_compound_assign_to_fun_call() {
    let src = r#"
        int x(void);
        int main(void) {
            x() += 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ├── <14> Assign [+=]
                    │   ├── <11> FunctionCall [x]
                    │   ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_extra_credit_decrement_fun_call() {
    let src = r#"
        int x(void);
        int main(void) {
            x()--;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ╰── <13> Postfix [--]
                        ╰── <11> FunctionCall [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_extra_credit_increment_fun_call() {
    let src = r#"
        int x(void);
        int main(void) {
            ++x();
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ╰── <13> Unary [++]
                        ╰── <12> FunctionCall [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_nested_function_definition() {
    let src = r#"
        int main(void) {
            int foo(void) {
                return 1;
            }
            return foo();
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Function [foo]
                    │   ╰── Body
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── <14> FunctionCall [foo]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_params_with_same_name() {
    let src = r#"
        
        int foo(int a, int a) {
            return a;
        }
        int main(void) {
            return foo(1, 2);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── a
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12> Var [a]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <23> FunctionCall [foo]
                            ├── Constant Int [1]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_redefine_fun_as_var() {
    let src = r#"
        int main(void) {
            int foo(void);
            int foo = 1;
            return foo;
        }
        int foo(void) {
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ├── Function [foo]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── foo
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── <17> Var [foo]
            ╰── Function [foo]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_redefine_parameter() {
    let src = r#"
        int foo(int a) {
            int a = 5;
            return a;
        }
        int main(void) {
            return foo(3);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── a
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [5]
            │       ╰── Return
            │           ╰── <15> Var [a]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <25> FunctionCall [foo]
                            ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_redefine_var_as_fun() {
    let src = r#"
        int main(void) {
            int foo = 1;
            int foo(void);
            return foo;
        }
        int foo(void) {
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── foo
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [1]
            │       ├── Function [foo]
            │       ╰── Return
            │           ╰── <17> Var [foo]
            ╰── Function [foo]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_undeclared_fun() {
    let src = r#"
        int main(void) {
            return foo(3);
        }
        int foo(int a) {
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <7> FunctionCall [foo]
            │               ╰── Constant Int [3]
            ╰── Function [foo]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── a
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_declarations_wrong_parameter_names() {
    let src = r#"
        int foo(int a);
        int main(void) {
            return foo(3);
        }
        int foo(int x) {
            return a;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── a
            │           ╰── Type
            │               ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <15> FunctionCall [foo]
            │               ╰── Constant Int [3]
            ╰── Function [foo]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── x
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ╰── Return
                        ╰── <27> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_labels_extra_credit_goto_cross_function() {
    let src = r#"
        int foo(void) {
            label:
                return 0;
        }
        int main(void) {
            goto label;
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ╰── Label [label]
            │           ╰── Return
            │               ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── Goto [label]
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_labels_extra_credit_goto_function() {
    let src = r#"
        int foo(void) {
            return 3;
        }
        int main(void) {
            goto foo;
            return 3;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [3]
            ╰── Function [main]
                ╰── Body
                    ├── Goto [foo]
                    ╰── Return
                        ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_parse_call_non_identifier() {
    assert_error(
        r#"
        int main(void) {
            return 1();
                  //^ Expected ';', but found '('
        }
    "#,
    );
}

#[test]
fn test_chapter_9_invalid_parse_decl_wrong_closing_delim() {
    assert_error(
        r#"
        int foo(int x, int y} { return x + y; }
                          //^ Expected ')', but found '}'
        int main(void) { return 0;}
    "#,
    );
}

#[test]
fn test_chapter_9_invalid_parse_fun_decl_for_loop() {
    assert_error(
        r#"
        int main(void) {
            for (int f(void); ; ) {
               //^^^^^^^^^^^^ Expected variable declaration, but found function declaration
                return 0;
            }
        }
    "#,
    );
}

#[test]
fn test_chapter_9_invalid_parse_funcall_wrong_closing_delim() {
    assert_error(
        r#"
        int foo(int x, int y) {
            return x + y;
        }
        int main(void) { return foo(1, 2};}
                                      //^ Expected ')', but found '}'
    "#,
    );
}

#[test]
fn test_chapter_9_invalid_parse_function_call_declaration() {
    assert_error(
        r#"
        int foo(int a) {
            return 0;
        }
        int main(void) {
            return foo(int a);
                     //^^^ Expected expression, but found 'int'
        }
    "#,
    );
}

#[test]
fn test_chapter_9_invalid_parse_function_returning_function() {
    assert_error(
        r#"
        int foo(void)(void);
                   //^ Expected ';', but found '('
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_9_invalid_parse_initialize_function_as_variable() {
    assert_error(
        r#"
        int foo(void) = 3;
                    //^ Expected ';', but found '='
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_9_invalid_parse_trailing_comma() {
    assert_error(
        r#"
        int foo(int a, int b, int c) {
            return a + b + c;
        }
        int main(void) {
            return foo(1, 2, 3,);
                             //^ Expected expression, but found ')'
        }
    "#,
    );
}

#[test]
fn test_chapter_9_invalid_parse_trailing_comma_decl() {
    assert_error(
        r#"
        
        int foo(int a,) {
                    //^ Expected type specifier
            return a + 1;
        }
        int main(void) {
            return foo(4);
        }
    "#,
    );
}

#[test]
fn test_chapter_9_invalid_parse_unclosed_paren_decl() {
    assert_error(
        r#"
        int foo(int a, int b {
                           //^ Expected ')', but found '{'
            return 0;
        }
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_9_invalid_parse_var_init_in_param_list() {
    assert_error(
        r#"
        
        int bad_params(int a = 3) {
                           //^ Expected ')', but found '='
            return 1;
        }
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_9_invalid_types_assign_fun_to_variable() {
    let src = r#"
        int x(void);
        int main(void) {
            int a = 10;
            a = x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── <21> Assign [=]
                    │   ├── <17> Var [a]
                    │   ╰── <20> Var [x]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_assign_value_to_function() {
    let src = r#"
        int main(void) {
            int x(void);
            x = 3;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Function [x]
                    ├── <14> Assign [=]
                    │   ├── <11> Var [x]
                    │   ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_call_variable_as_function() {
    let src = r#"
        int x(void);
        int main(void) {
            int x = 0;
            return x();
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <17> FunctionCall [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_conflicting_function_declarations() {
    let src = r#"
        int foo(int a);
        int main(void) {
            return 5;
        }
        int foo(int a, int b) {
            return 4;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── a
            │           ╰── Type
            │               ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [5]
            ╰── Function [foo]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── b
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_conflicting_local_function_declaration() {
    let src = r#"
        int bar(void);
        int main(void) {
            int foo(int a);
            return bar() + foo(1);
        }
        int bar(void) {
            int foo(int a, int b);
            return foo(1, 2);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [bar]
            ├── Function [main]
            │   ╰── Body
            │       ├── Function [foo]
            │       │   ╰── Parameters
            │       │       ╰── Param
            │       │           ├── Name
            │       │           │   ╰── a
            │       │           ╰── Type
            │       │               ╰── Int
            │       ╰── Return
            │           ╰── <24>  [+]
            │               ├── <19> FunctionCall [bar]
            │               ╰── <23> FunctionCall [foo]
            │                   ╰── Constant Int [1]
            ╰── Function [bar]
                ╰── Body
                    ├── Function [foo]
                    │   ╰── Parameters
                    │       ├── Param
                    │       │   ├── Name
                    │       │   │   ╰── a
                    │       │   ╰── Type
                    │       │       ╰── Int
                    │       ╰── Param
                    │           ├── Name
                    │           │   ╰── b
                    │           ╰── Type
                    │               ╰── Int
                    ╰── Return
                        ╰── <46> FunctionCall [foo]
                            ├── Constant Int [1]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_divide_by_function() {
    let src = r#"
        int x(void);
        int main(void) {
            int a = 10 / x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <17>  [/]
                    │           ├── Constant Int [10]
                    │           ╰── <16> Var [x]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_extra_credit_bitwise_op_function() {
    let src = r#"
        int x(void);
        int main(void) {
            x >> 2;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ├── <14>  [>>]
                    │   ├── <11> Var [x]
                    │   ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_extra_credit_compound_assign_function_lhs() {
    let src = r#"
        int x(void);
        int main(void) {
            x += 3;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ├── <14> Assign [+=]
                    │   ├── <11> Var [x]
                    │   ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_extra_credit_compound_assign_function_rhs() {
    let src = r#"
        int x(void);
        int main(void) {
            int a = 3;
            a += x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── <21> Assign [+=]
                    │   ├── <17> Var [a]
                    │   ╰── <20> Var [x]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_extra_credit_postfix_incr_fun_name() {
    let src = r#"
        int x(void);
        int main(void) {
            x++;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ├── <13> Postfix [++]
                    │   ╰── <11> Var [x]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_extra_credit_prefix_decr_fun_name() {
    let src = r#"
        int x(void);
        int main(void){
            --x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ├── <13> Unary [--]
                    │   ╰── <12> Var [x]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_extra_credit_switch_on_function() {
    let src = r#"
        int main(void) {
            int f(void);
            switch (f)
                return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Function [f]
                    ╰── Switch
                        ├── Expression
                        │   ╰── <11> Var [f]
                        ╰── Return
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_multiple_function_definitions() {
    let src = r#"
        
        int foo(void){
            return 3;
        }
        int main(void) {
            return foo();
        }
        int foo(void){
            return 4;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [3]
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <14> FunctionCall [foo]
            ╰── Function [foo]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_multiple_function_definitions_2() {
    let src = r#"
        
        int foo(void){
            return 3;
        }
        int main(void) {
            int foo(void);
            return foo();
        }
        int foo(void){
            return 4;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [3]
            ├── Function [main]
            │   ╰── Body
            │       ├── Function [foo]
            │       ╰── Return
            │           ╰── <19> FunctionCall [foo]
            ╰── Function [foo]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_too_few_args() {
    let src = r#"
        int foo(int a, int b) {
            return a + 1;
        }
        int main(void) {
            return foo(1);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <15>  [+]
            │               ├── <12> Var [a]
            │               ╰── Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <25> FunctionCall [foo]
                            ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_invalid_types_too_many_args() {
    let src = r#"
        int foo(int a) {
            return a + 1;
        }
        int main(void) {
            return foo(1, 2);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── a
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12>  [+]
            │               ├── <9> Var [a]
            │               ╰── Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <23> FunctionCall [foo]
                            ├── Constant Int [1]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_dont_clobber_edx() {
    let src = r#"
        int x(int a, int b, int c, int d, int e, int f) {
            return a == 1 && b == 2 && c == 3 && d == 4 && e == 5 && f == 6;
        }
        int main(void) {
            int a = 4;
            return x(1, 2, 3, 4, 5, 24 / a);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── f
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <62>  [&&]
            │               ├── <55>  [&&]
            │               │   ├── <48>  [&&]
            │               │   │   ├── <41>  [&&]
            │               │   │   │   ├── <34>  [&&]
            │               │   │   │   │   ├── <27>  [==]
            │               │   │   │   │   │   ├── <24> Var [a]
            │               │   │   │   │   │   ╰── Constant Int [1]
            │               │   │   │   │   ╰── <33>  [==]
            │               │   │   │   │       ├── <30> Var [b]
            │               │   │   │   │       ╰── Constant Int [2]
            │               │   │   │   ╰── <40>  [==]
            │               │   │   │       ├── <37> Var [c]
            │               │   │   │       ╰── Constant Int [3]
            │               │   │   ╰── <47>  [==]
            │               │   │       ├── <44> Var [d]
            │               │   │       ╰── Constant Int [4]
            │               │   ╰── <54>  [==]
            │               │       ├── <51> Var [e]
            │               │       ╰── Constant Int [5]
            │               ╰── <61>  [==]
            │                   ├── <58> Var [f]
            │                   ╰── Constant Int [6]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [4]
                    ╰── Return
                        ╰── <87> FunctionCall [x]
                            ├── Constant Int [1]
                            ├── Constant Int [2]
                            ├── Constant Int [3]
                            ├── Constant Int [4]
                            ├── Constant Int [5]
                            ╰── <86>  [/]
                                ├── Constant Int [24]
                                ╰── <85> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_expression_args() {
    let src = r#"
        int sub(int a, int b) {
            return a - b;
        }
        int main(void) {
            int sum = sub(1 + 2, 1);
            return sum;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [sub]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <16>  [-]
            │               ├── <12> Var [a]
            │               ╰── <15> Var [b]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── sum
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <33> FunctionCall [sub]
                    │           ├── <31>  [+]
                    │           │   ├── Constant Int [1]
                    │           │   ╰── Constant Int [2]
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── <37> Var [sum]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_fibonacci() {
    let src = r#"
        int fib(int n) {
            if (n == 0 || n == 1) {
                return n;
            } else {
                return fib(n - 1) + fib(n - 2);
            }
        }
        int main(void) {
            int n = 6;
            return fib(n);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [fib]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── n
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── If
            │           ├── Condition
            │           │   ╰── <19>  [||]
            │           │       ├── <12>  [==]
            │           │       │   ├── <9> Var [n]
            │           │       │   ╰── Constant Int [0]
            │           │       ╰── <18>  [==]
            │           │           ├── <15> Var [n]
            │           │           ╰── Constant Int [1]
            │           ├── Then
            │           │   ╰── Block
            │           │       ╰── Return
            │           │           ╰── <21> Var [n]
            │           ╰── Else
            │               ╰── Block
            │                   ╰── Return
            │                       ╰── <40>  [+]
            │                           ├── <31> FunctionCall [fib]
            │                           │   ╰── <30>  [-]
            │                           │       ├── <27> Var [n]
            │                           │       ╰── Constant Int [1]
            │                           ╰── <39> FunctionCall [fib]
            │                               ╰── <38>  [-]
            │                                   ├── <35> Var [n]
            │                                   ╰── Constant Int [2]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── n
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [6]
                    ╰── Return
                        ╰── <60> FunctionCall [fib]
                            ╰── <59> Var [n]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_forward_decl_multi_arg() {
    let src = r#"
        int foo(int a, int b);
        int main(void) {
            return foo(2, 1);
        }
        int foo(int x, int y){
            return x - y;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── b
            │           ╰── Type
            │               ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <19> FunctionCall [foo]
            │               ├── Constant Int [2]
            │               ╰── Constant Int [1]
            ╰── Function [foo]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── x
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── y
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ╰── Return
                        ╰── <38>  [-]
                            ├── <34> Var [x]
                            ╰── <37> Var [y]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_hello_world() {
    let src = r#"
        int putchar(int c);
        int main(void) {
            putchar(72);
            putchar(101);
            putchar(108);
            putchar(108);
            putchar(111);
            putchar(44);
            putchar(32);
            putchar(87);
            putchar(111);
            putchar(114);
            putchar(108);
            putchar(100);
            putchar(33);
            putchar(10);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [putchar]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── c
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── <15> FunctionCall [putchar]
                    │   ╰── Constant Int [72]
                    ├── <19> FunctionCall [putchar]
                    │   ╰── Constant Int [101]
                    ├── <23> FunctionCall [putchar]
                    │   ╰── Constant Int [108]
                    ├── <27> FunctionCall [putchar]
                    │   ╰── Constant Int [108]
                    ├── <31> FunctionCall [putchar]
                    │   ╰── Constant Int [111]
                    ├── <35> FunctionCall [putchar]
                    │   ╰── Constant Int [44]
                    ├── <39> FunctionCall [putchar]
                    │   ╰── Constant Int [32]
                    ├── <43> FunctionCall [putchar]
                    │   ╰── Constant Int [87]
                    ├── <47> FunctionCall [putchar]
                    │   ╰── Constant Int [111]
                    ├── <51> FunctionCall [putchar]
                    │   ╰── Constant Int [114]
                    ├── <55> FunctionCall [putchar]
                    │   ╰── Constant Int [108]
                    ├── <59> FunctionCall [putchar]
                    │   ╰── Constant Int [100]
                    ├── <63> FunctionCall [putchar]
                    │   ╰── Constant Int [33]
                    ╰── <67> FunctionCall [putchar]
                        ╰── Constant Int [10]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_param_shadows_local_var() {
    let src = r#"
        int main(void) {
            int a = 10;
            int f(int a);
            return f(a);
        }
        int f(int a) {
            return a * 2;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [10]
            │       ├── Function [f]
            │       │   ╰── Parameters
            │       │       ╰── Param
            │       │           ├── Name
            │       │           │   ╰── a
            │       │           ╰── Type
            │       │               ╰── Int
            │       ╰── Return
            │           ╰── <22> FunctionCall [f]
            │               ╰── <21> Var [a]
            ╰── Function [f]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── a
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ╰── Return
                        ╰── <37>  [*]
                            ├── <34> Var [a]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_parameter_shadows_function() {
    let src = r#"
        int a(void) {
            return 1;
        }
        int b(int a) {
            return a;
        }
        int main(void) {
            return a() + b(2);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [a]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [1]
            ├── Function [b]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── a
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <17> Var [a]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <31>  [+]
                            ├── <26> FunctionCall [a]
                            ╰── <30> FunctionCall [b]
                                ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_parameter_shadows_own_function() {
    let src = r#"
        int a(int a) {
            return a * 2;
        }
        int main(void) {
            return a(1);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [a]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── a
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12>  [*]
            │               ├── <9> Var [a]
            │               ╰── Constant Int [2]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <22> FunctionCall [a]
                            ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_parameters_are_preserved() {
    let src = r#"
        int g(int w, int x, int y, int z) {
            if (w == 2 && x == 4 && y == 6 && z == 8)
                return 1;
            return 0;
        }
        int f(int a, int b, int c, int d) {
            int result = g(a * 2, b * 2, c * 2, d * 2);
            return (result == 1 && a == 1 && b == 2 && c == 3 && d == 4);
        }
        int main(void) {
            return f(1, 2, 3, 4);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [g]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── w
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── x
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── y
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── z
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <42>  [&&]
            │       │   │       ├── <35>  [&&]
            │       │   │       │   ├── <28>  [&&]
            │       │   │       │   │   ├── <21>  [==]
            │       │   │       │   │   │   ├── <18> Var [w]
            │       │   │       │   │   │   ╰── Constant Int [2]
            │       │   │       │   │   ╰── <27>  [==]
            │       │   │       │   │       ├── <24> Var [x]
            │       │   │       │   │       ╰── Constant Int [4]
            │       │   │       │   ╰── <34>  [==]
            │       │   │       │       ├── <31> Var [y]
            │       │   │       │       ╰── Constant Int [6]
            │       │   │       ╰── <41>  [==]
            │       │   │           ├── <38> Var [z]
            │       │   │           ╰── Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [f]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <90> FunctionCall [g]
            │       │           ├── <74>  [*]
            │       │           │   ├── <71> Var [a]
            │       │           │   ╰── Constant Int [2]
            │       │           ├── <79>  [*]
            │       │           │   ├── <76> Var [b]
            │       │           │   ╰── Constant Int [2]
            │       │           ├── <84>  [*]
            │       │           │   ├── <81> Var [c]
            │       │           │   ╰── Constant Int [2]
            │       │           ╰── <89>  [*]
            │       │               ├── <86> Var [d]
            │       │               ╰── Constant Int [2]
            │       ╰── Return
            │           ╰── <126>  [&&]
            │               ├── <118>  [&&]
            │               │   ├── <111>  [&&]
            │               │   │   ├── <104>  [&&]
            │               │   │   │   ├── <97>  [==]
            │               │   │   │   │   ├── <94> Var [result]
            │               │   │   │   │   ╰── Constant Int [1]
            │               │   │   │   ╰── <103>  [==]
            │               │   │   │       ├── <100> Var [a]
            │               │   │   │       ╰── Constant Int [1]
            │               │   │   ╰── <110>  [==]
            │               │   │       ├── <107> Var [b]
            │               │   │       ╰── Constant Int [2]
            │               │   ╰── <117>  [==]
            │               │       ├── <114> Var [c]
            │               │       ╰── Constant Int [3]
            │               ╰── <124>  [==]
            │                   ├── <121> Var [d]
            │                   ╰── Constant Int [4]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <139> FunctionCall [f]
                            ├── Constant Int [1]
                            ├── Constant Int [2]
                            ├── Constant Int [3]
                            ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_arguments_in_registers_single_arg() {
    let src = r#"
        int twice(int x){
            return 2 * x;
        }
        int main(void) {
            return twice(3);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [twice]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── x
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12>  [*]
            │               ├── Constant Int [2]
            │               ╰── <11> Var [x]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <22> FunctionCall [twice]
                            ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_extra_credit_compound_assign_function_result() {
    let src = r#"
        int foo(void) {
            return 2;
        }
        int main(void) {
            int x = 3;
            x -= foo();
            return x;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [2]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── <24> Assign [-=]
                    │   ├── <20> Var [x]
                    │   ╰── <23> FunctionCall [foo]
                    ╰── Return
                        ╰── <27> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_extra_credit_dont_clobber_ecx() {
    let src = r#"
        int x(int a, int b, int c, int d, int e, int f) {
            return a == 1 && b == 2 && c == 3 && d == 4 && e == 5 && f == 6;
        }
        int main(void) {
            int a = 4;
            return x(1, 2, 3, 4, 5, 24 >> (a / 2));
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── f
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <62>  [&&]
            │               ├── <55>  [&&]
            │               │   ├── <48>  [&&]
            │               │   │   ├── <41>  [&&]
            │               │   │   │   ├── <34>  [&&]
            │               │   │   │   │   ├── <27>  [==]
            │               │   │   │   │   │   ├── <24> Var [a]
            │               │   │   │   │   │   ╰── Constant Int [1]
            │               │   │   │   │   ╰── <33>  [==]
            │               │   │   │   │       ├── <30> Var [b]
            │               │   │   │   │       ╰── Constant Int [2]
            │               │   │   │   ╰── <40>  [==]
            │               │   │   │       ├── <37> Var [c]
            │               │   │   │       ╰── Constant Int [3]
            │               │   │   ╰── <47>  [==]
            │               │   │       ├── <44> Var [d]
            │               │   │       ╰── Constant Int [4]
            │               │   ╰── <54>  [==]
            │               │       ├── <51> Var [e]
            │               │       ╰── Constant Int [5]
            │               ╰── <61>  [==]
            │                   ├── <58> Var [f]
            │                   ╰── Constant Int [6]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [4]
                    ╰── Return
                        ╰── <91> FunctionCall [x]
                            ├── Constant Int [1]
                            ├── Constant Int [2]
                            ├── Constant Int [3]
                            ├── Constant Int [4]
                            ├── Constant Int [5]
                            ╰── <90>  [>>]
                                ├── Constant Int [24]
                                ╰── <89>  [/]
                                    ├── <85> Var [a]
                                    ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_extra_credit_goto_label_multiple_functions() {
    let src = r#"
        
        int foo(void) {
            goto label;
            return 0;
            label:
                return 5;
        }
        int main(void) {
            goto label;
            return 0;
            label:
                return foo();
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ├── Goto [label]
            │       ├── Return
            │       │   ╰── Constant Int [0]
            │       ╰── Label [label]
            │           ╰── Return
            │               ╰── Constant Int [5]
            ╰── Function [main]
                ╰── Body
                    ├── Goto [label]
                    ├── Return
                    │   ╰── Constant Int [0]
                    ╰── Label [label]
                        ╰── Return
                            ╰── <25> FunctionCall [foo]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_extra_credit_goto_shared_name() {
    let src = r#"
        int foo(void) {
            goto foo;
            return 0;
            foo:
                return 1;
        }
        int main(void) {
            return foo();
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ├── Goto [foo]
            │       ├── Return
            │       │   ╰── Constant Int [0]
            │       ╰── Label [foo]
            │           ╰── Return
            │               ╰── Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <20> FunctionCall [foo]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_extra_credit_label_naming_scheme() {
    let src = r#"
        int main(void) {
            _label:
            label_:
            return 0;
        }
        int main_(void) {
            label:
            return 0;
        }
        int _main(void) {
            label: return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ╰── Label [_label]
            │           ╰── Label [label_]
            │               ╰── Return
            │                   ╰── Constant Int [0]
            ├── Function [main_]
            │   ╰── Body
            │       ╰── Label [label]
            │           ╰── Return
            │               ╰── Constant Int [0]
            ╰── Function [_main]
                ╰── Body
                    ╰── Label [label]
                        ╰── Return
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_addition() {
    let src = r#"
        int add(int x, int y) {
            return x + y;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [add]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── x
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── y
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ╰── Return
                        ╰── <16>  [+]
                            ├── <12> Var [x]
                            ╰── <15> Var [y]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_addition_client() {
    let src = r#"
        int add(int x, int y);
        int main(void) {
            return add(1, 2);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [add]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── y
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <19> FunctionCall [add]
                            ├── Constant Int [1]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_many_args() {
    let src = r#"
        int fib(int n) {
            if (n == 0 || n == 1) {
                return n;
            } else {
                return fib(n - 1) + fib(n - 2);
            }
        }
        int multiply_many_args(int a, int b, int c, int d, int e, int f, int g, int h) {
            return a * b * c * d * e * f * fib(g) * fib(h);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [fib]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── n
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── If
            │           ├── Condition
            │           │   ╰── <19>  [||]
            │           │       ├── <12>  [==]
            │           │       │   ├── <9> Var [n]
            │           │       │   ╰── Constant Int [0]
            │           │       ╰── <18>  [==]
            │           │           ├── <15> Var [n]
            │           │           ╰── Constant Int [1]
            │           ├── Then
            │           │   ╰── Block
            │           │       ╰── Return
            │           │           ╰── <21> Var [n]
            │           ╰── Else
            │               ╰── Block
            │                   ╰── Return
            │                       ╰── <40>  [+]
            │                           ├── <31> FunctionCall [fib]
            │                           │   ╰── <30>  [-]
            │                           │       ├── <27> Var [n]
            │                           │       ╰── Constant Int [1]
            │                           ╰── <39> FunctionCall [fib]
            │                               ╰── <38>  [-]
            │                                   ├── <35> Var [n]
            │                                   ╰── Constant Int [2]
            ╰── Function [multiply_many_args]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── e
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── f
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── g
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── h
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ╰── Return
                        ╰── <108>  [*]
                            ├── <102>  [*]
                            │   ├── <96>  [*]
                            │   │   ├── <92>  [*]
                            │   │   │   ├── <88>  [*]
                            │   │   │   │   ├── <84>  [*]
                            │   │   │   │   │   ├── <80>  [*]
                            │   │   │   │   │   │   ├── <76> Var [a]
                            │   │   │   │   │   │   ╰── <79> Var [b]
                            │   │   │   │   │   ╰── <83> Var [c]
                            │   │   │   │   ╰── <87> Var [d]
                            │   │   │   ╰── <91> Var [e]
                            │   │   ╰── <95> Var [f]
                            │   ╰── <101> FunctionCall [fib]
                            │       ╰── <100> Var [g]
                            ╰── <107> FunctionCall [fib]
                                ╰── <106> Var [h]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_many_args_client() {
    let src = r#"
        int fib(int a);
        int multiply_many_args(int a, int b, int c, int d, int e, int f, int g, int h);
        int main(void) {
            int x = fib(4);
            int seven = 7;
            int eight = fib(6);
            int y = multiply_many_args(x, 2, 3, 4, 5, 6, seven, eight);
            if (x != 3) {
                return 1;
            }
            if (y != 589680) {
                return 2;
            }
            return x + (y % 256);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [fib]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── a
            │           ╰── Type
            │               ╰── Int
            ├── Function [multiply_many_args]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── h
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <47> FunctionCall [fib]
                    │           ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── seven
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── eight
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <61> FunctionCall [fib]
                    │           ╰── Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <79> FunctionCall [multiply_many_args]
                    │           ├── <69> Var [x]
                    │           ├── Constant Int [2]
                    │           ├── Constant Int [3]
                    │           ├── Constant Int [4]
                    │           ├── Constant Int [5]
                    │           ├── Constant Int [6]
                    │           ├── <76> Var [seven]
                    │           ╰── <78> Var [eight]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <86>  [!=]
                    │   │       ├── <83> Var [x]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <96>  [!=]
                    │   │       ├── <93> Var [y]
                    │   │       ╰── Constant Int [589680]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── <111>  [+]
                            ├── <103> Var [x]
                            ╰── <110>  [%]
                                ├── <106> Var [y]
                                ╰── Constant Int [256]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_no_function_calls_division() {
    let src = r#"
        int f(int a, int b, int c, int d) {
            int x = a / b;
            if (a == 10 && b == 2 && c == 100 && d == 4 && x == 5)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [f]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── d
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <25>  [/]
                    │           ├── <21> Var [a]
                    │           ╰── <24> Var [b]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <60>  [&&]
                    │   │       ├── <53>  [&&]
                    │   │       │   ├── <46>  [&&]
                    │   │       │   │   ├── <39>  [&&]
                    │   │       │   │   │   ├── <32>  [==]
                    │   │       │   │   │   │   ├── <29> Var [a]
                    │   │       │   │   │   │   ╰── Constant Int [10]
                    │   │       │   │   │   ╰── <38>  [==]
                    │   │       │   │   │       ├── <35> Var [b]
                    │   │       │   │   │       ╰── Constant Int [2]
                    │   │       │   │   ╰── <45>  [==]
                    │   │       │   │       ├── <42> Var [c]
                    │   │       │   │       ╰── Constant Int [100]
                    │   │       │   ╰── <52>  [==]
                    │   │       │       ├── <49> Var [d]
                    │   │       │       ╰── Constant Int [4]
                    │   │       ╰── <59>  [==]
                    │   │           ├── <56> Var [x]
                    │   │           ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_no_function_calls_division_client() {
    let src = r#"
        int f(int a, int b, int c, int d);
        int main(void) {
            return f(10, 2, 100, 4);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [f]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <27> FunctionCall [f]
                            ├── Constant Int [10]
                            ├── Constant Int [2]
                            ├── Constant Int [100]
                            ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_no_function_calls_local_stack_variables() {
    let src = r#"
        
        int f(int reg1, int reg2, int reg3, int reg4, int reg5, int reg6,
            int stack1, int stack2, int stack3) {
            int x = 10;
            if (reg1 == 1 && reg2 == 2 && reg3 == 3 && reg4 == 4 && reg5 == 5
                && reg6 == 6 && stack1 == -1 && stack2 == -2 && stack3 == -3
                && x == 10) {
                stack2 = 100;
                return stack2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [f]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── reg1
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── reg2
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── reg3
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── reg4
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── reg5
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── reg6
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── stack1
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── stack2
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── stack3
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <111>  [&&]
                    │   │       ├── <104>  [&&]
                    │   │       │   ├── <95>  [&&]
                    │   │       │   │   ├── <86>  [&&]
                    │   │       │   │   │   ├── <77>  [&&]
                    │   │       │   │   │   │   ├── <70>  [&&]
                    │   │       │   │   │   │   │   ├── <63>  [&&]
                    │   │       │   │   │   │   │   │   ├── <56>  [&&]
                    │   │       │   │   │   │   │   │   │   ├── <49>  [&&]
                    │   │       │   │   │   │   │   │   │   │   ├── <42>  [==]
                    │   │       │   │   │   │   │   │   │   │   │   ├── <39> Var [reg1]
                    │   │       │   │   │   │   │   │   │   │   │   ╰── Constant Int [1]
                    │   │       │   │   │   │   │   │   │   │   ╰── <48>  [==]
                    │   │       │   │   │   │   │   │   │   │       ├── <45> Var [reg2]
                    │   │       │   │   │   │   │   │   │   │       ╰── Constant Int [2]
                    │   │       │   │   │   │   │   │   │   ╰── <55>  [==]
                    │   │       │   │   │   │   │   │   │       ├── <52> Var [reg3]
                    │   │       │   │   │   │   │   │   │       ╰── Constant Int [3]
                    │   │       │   │   │   │   │   │   ╰── <62>  [==]
                    │   │       │   │   │   │   │   │       ├── <59> Var [reg4]
                    │   │       │   │   │   │   │   │       ╰── Constant Int [4]
                    │   │       │   │   │   │   │   ╰── <69>  [==]
                    │   │       │   │   │   │   │       ├── <66> Var [reg5]
                    │   │       │   │   │   │   │       ╰── Constant Int [5]
                    │   │       │   │   │   │   ╰── <76>  [==]
                    │   │       │   │   │   │       ├── <73> Var [reg6]
                    │   │       │   │   │   │       ╰── Constant Int [6]
                    │   │       │   │   │   ╰── <85>  [==]
                    │   │       │   │   │       ├── <80> Var [stack1]
                    │   │       │   │   │       ╰── <84> Unary [-]
                    │   │       │   │   │           ╰── Constant Int [1]
                    │   │       │   │   ╰── <94>  [==]
                    │   │       │   │       ├── <89> Var [stack2]
                    │   │       │   │       ╰── <93> Unary [-]
                    │   │       │   │           ╰── Constant Int [2]
                    │   │       │   ╰── <103>  [==]
                    │   │       │       ├── <98> Var [stack3]
                    │   │       │       ╰── <102> Unary [-]
                    │   │       │           ╰── Constant Int [3]
                    │   │       ╰── <110>  [==]
                    │   │           ├── <107> Var [x]
                    │   │           ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <116> Assign [=]
                    │           │   ├── <113> Var [stack2]
                    │           │   ╰── Constant Int [100]
                    │           ╰── Return
                    │               ╰── <119> Var [stack2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_no_function_calls_local_stack_variables_client() {
    let src = r#"
        int f(int reg1, int reg2, int reg3, int reg4, int reg5, int reg6,
            int stack1, int stack2, int stack3);
        int main(void) {
            return f(1, 2, 3, 4, 5, 6, -1, -2, -3);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [f]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── reg1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── reg2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── reg3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── reg4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── reg5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── reg6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── stack1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── stack2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── stack3
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <53> FunctionCall [f]
                            ├── Constant Int [1]
                            ├── Constant Int [2]
                            ├── Constant Int [3]
                            ├── Constant Int [4]
                            ├── Constant Int [5]
                            ├── Constant Int [6]
                            ├── <46> Unary [-]
                            │   ╰── Constant Int [1]
                            ├── <49> Unary [-]
                            │   ╰── Constant Int [2]
                            ╰── <52> Unary [-]
                                ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_system_call() {
    let src = r#"
        int putchar(int c);
        int incr_and_print(int b) {
            return putchar(b + 2);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [putchar]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── c
            │           ╰── Type
            │               ╰── Int
            ╰── Function [incr_and_print]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── b
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ╰── Return
                        ╰── <22> FunctionCall [putchar]
                            ╰── <21>  [+]
                                ├── <18> Var [b]
                                ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_libraries_system_call_client() {
    let src = r#"
        int incr_and_print(int c);
        int main(void) {
            incr_and_print(70);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [incr_and_print]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── c
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── <15> FunctionCall [incr_and_print]
                    │   ╰── Constant Int [70]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_forward_decl() {
    let src = r#"
        int foo(void);
        int main(void) {
            return foo();
        }
        int foo(void) {
            return 3;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <11> FunctionCall [foo]
            ╰── Function [foo]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_function_shadows_variable() {
    let src = r#"
        int main(void) {
            int foo = 3;
            int bar = 4;
            if (foo + bar > 0) {
                int foo(void);
                bar = foo();
            }
            return foo + bar;
        }
        int foo(void) {
            return 8;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── foo
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [3]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── bar
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <25>  [>]
            │       │   │       ├── <22>  [+]
            │       │   │       │   ├── <18> Var [foo]
            │       │   │       │   ╰── <21> Var [bar]
            │       │   │       ╰── Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ├── Function [foo]
            │       │           ╰── <36> Assign [=]
            │       │               ├── <32> Var [bar]
            │       │               ╰── <35> FunctionCall [foo]
            │       ╰── Return
            │           ╰── <46>  [+]
            │               ├── <42> Var [foo]
            │               ╰── <45> Var [bar]
            ╰── Function [foo]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [8]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_multiple_declarations() {
    let src = r#"
        int main(void) {
            int f(void);
            int f(void);
            return f();
        }
        int f(void) {
            return 3;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ├── Function [f]
            │       ├── Function [f]
            │       ╰── Return
            │           ╰── <16> FunctionCall [f]
            ╰── Function [f]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_no_return_value() {
    let src = r#"
        int foo(void) {
            int x = 1;
        }
        int main(void) {
            foo();
            return 3;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ╰── VarDeclaration
            │           ├── Name
            │           │   ╰── x
            │           ├── Type
            │           │   ╰── Int
            │           ╰── Initializer
            │               ╰── Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── <18> FunctionCall [foo]
                    ╰── Return
                        ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_precedence() {
    let src = r#"
        int three(void) {
            return 3;
        }
        int main(void) {
            return !three();
        }
    "#;
    let expected = r#"
        Program
            ├── Function [three]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [3]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <16> Unary [!]
                            ╰── <15> FunctionCall [three]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_use_function_in_expression() {
    let src = r#"
        int bar(void) {
            return 9;
        }
        int foo(void) {
            return 2 * bar();
        }
        int main(void) {
            return foo() + bar() / 3;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [bar]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [9]
            ├── Function [foo]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <17>  [*]
            │               ├── Constant Int [2]
            │               ╰── <16> FunctionCall [bar]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <33>  [+]
                            ├── <26> FunctionCall [foo]
                            ╰── <32>  [/]
                                ├── <29> FunctionCall [bar]
                                ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_no_arguments_variable_shadows_function() {
    let src = r#"
        int main(void) {
            int foo(void);
            int x = foo();
            if (x > 0) {
                int foo = 3;
                x = x + foo;
            }
            return x;
        }
        int foo(void) {
            return 4;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ├── Function [foo]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <14> FunctionCall [foo]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <21>  [>]
            │       │   │       ├── <18> Var [x]
            │       │   │       ╰── Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ├── VarDeclaration
            │       │           │   ├── Name
            │       │           │   │   ╰── foo
            │       │           │   ├── Type
            │       │           │   │   ╰── Int
            │       │           │   ╰── Initializer
            │       │           │       ╰── Constant Int [3]
            │       │           ╰── <37> Assign [=]
            │       │               ├── <29> Var [x]
            │       │               ╰── <36>  [+]
            │       │                   ├── <32> Var [x]
            │       │                   ╰── <35> Var [foo]
            │       ╰── Return
            │           ╰── <43> Var [x]
            ╰── Function [foo]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_stack_arguments_call_putchar() {
    let src = r#"
        int putchar(int c);
        int foo(int a, int b, int c, int d, int e, int f, int g, int h) {
            putchar(h);
            return a + g;
        }
        int main(void) {
            return foo(1, 2, 3, 4, 5, 6, 7, 65);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [putchar]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── c
            │           ╰── Type
            │               ╰── Int
            ├── Function [foo]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── h
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── <40> FunctionCall [putchar]
            │       │   ╰── <39> Var [h]
            │       ╰── Return
            │           ╰── <47>  [+]
            │               ├── <43> Var [a]
            │               ╰── <46> Var [g]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <64> FunctionCall [foo]
                            ├── Constant Int [1]
                            ├── Constant Int [2]
                            ├── Constant Int [3]
                            ├── Constant Int [4]
                            ├── Constant Int [5]
                            ├── Constant Int [6]
                            ├── Constant Int [7]
                            ╰── Constant Int [65]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_stack_arguments_lots_of_arguments() {
    let src = r#"
        int foo(int a, int b, int c, int d, int e, int f, int g, int h) {
            return (a == 1 && b == 2 && c == 3 && d == 4 && e == 5
                    && f == 6 && g == 7 && h == 8);
        }
        int main(void) {
            return foo(1, 2, 3, 4, 5, 6, 7, 8);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── h
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <83>  [&&]
            │               ├── <75>  [&&]
            │               │   ├── <68>  [&&]
            │               │   │   ├── <61>  [&&]
            │               │   │   │   ├── <54>  [&&]
            │               │   │   │   │   ├── <47>  [&&]
            │               │   │   │   │   │   ├── <40>  [&&]
            │               │   │   │   │   │   │   ├── <33>  [==]
            │               │   │   │   │   │   │   │   ├── <30> Var [a]
            │               │   │   │   │   │   │   │   ╰── Constant Int [1]
            │               │   │   │   │   │   │   ╰── <39>  [==]
            │               │   │   │   │   │   │       ├── <36> Var [b]
            │               │   │   │   │   │   │       ╰── Constant Int [2]
            │               │   │   │   │   │   ╰── <46>  [==]
            │               │   │   │   │   │       ├── <43> Var [c]
            │               │   │   │   │   │       ╰── Constant Int [3]
            │               │   │   │   │   ╰── <53>  [==]
            │               │   │   │   │       ├── <50> Var [d]
            │               │   │   │   │       ╰── Constant Int [4]
            │               │   │   │   ╰── <60>  [==]
            │               │   │   │       ├── <57> Var [e]
            │               │   │   │       ╰── Constant Int [5]
            │               │   │   ╰── <67>  [==]
            │               │   │       ├── <64> Var [f]
            │               │   │       ╰── Constant Int [6]
            │               │   ╰── <74>  [==]
            │               │       ├── <71> Var [g]
            │               │       ╰── Constant Int [7]
            │               ╰── <81>  [==]
            │                   ├── <78> Var [h]
            │                   ╰── Constant Int [8]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <100> FunctionCall [foo]
                            ├── Constant Int [1]
                            ├── Constant Int [2]
                            ├── Constant Int [3]
                            ├── Constant Int [4]
                            ├── Constant Int [5]
                            ├── Constant Int [6]
                            ├── Constant Int [7]
                            ╰── Constant Int [8]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_stack_arguments_stack_alignment() {
    let src = r#"
        int even_arguments(int a, int b, int c, int d, int e, int f, int g, int h);
        int odd_arguments(int a, int b, int c, int d, int e, int f, int g, int h, int i);
        int main(void) {
            int x = 3;
            even_arguments(1, 2, 3, 4, 5, 6, 7, 8);
            odd_arguments(1, 2, 3, 4, 5, 6, 7, 8, 9);
            return x;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [even_arguments]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── h
            │           ╰── Type
            │               ╰── Int
            ├── Function [odd_arguments]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── <81> FunctionCall [even_arguments]
                    │   ├── Constant Int [1]
                    │   ├── Constant Int [2]
                    │   ├── Constant Int [3]
                    │   ├── Constant Int [4]
                    │   ├── Constant Int [5]
                    │   ├── Constant Int [6]
                    │   ├── Constant Int [7]
                    │   ╰── Constant Int [8]
                    ├── <93> FunctionCall [odd_arguments]
                    │   ├── Constant Int [1]
                    │   ├── Constant Int [2]
                    │   ├── Constant Int [3]
                    │   ├── Constant Int [4]
                    │   ├── Constant Int [5]
                    │   ├── Constant Int [6]
                    │   ├── Constant Int [7]
                    │   ├── Constant Int [8]
                    │   ╰── Constant Int [9]
                    ╰── Return
                        ╰── <96> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_9_valid_stack_arguments_test_for_memory_leaks() {
    let src = r#"
        int lots_of_args(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, int n, int o) {
            return l + o;
        }
        int main(void) {
            int ret = 0;
            for (int i = 0; i < 10000000; i = i + 1) {
                ret = lots_of_args(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ret, 13, 14, 15);
            }
            return ret == 150000000;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [lots_of_args]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── h
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── k
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── m
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── n
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── o
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <55>  [+]
            │               ├── <51> Var [l]
            │               ╰── <54> Var [o]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ret
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <80>  [<]
                    │   │       ├── <77> Var [i]
                    │   │       ╰── Constant Int [10000000]
                    │   ├── Condition
                    │   │   ╰── <89> Assign [=]
                    │   │       ├── <82> Var [i]
                    │   │       ╰── <88>  [+]
                    │   │           ├── <85> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── <111> Assign [=]
                    │           ├── <91> Var [ret]
                    │           ╰── <110> FunctionCall [lots_of_args]
                    │               ├── Constant Int [1]
                    │               ├── Constant Int [2]
                    │               ├── Constant Int [3]
                    │               ├── Constant Int [4]
                    │               ├── Constant Int [5]
                    │               ├── Constant Int [6]
                    │               ├── Constant Int [7]
                    │               ├── Constant Int [8]
                    │               ├── Constant Int [9]
                    │               ├── Constant Int [10]
                    │               ├── Constant Int [11]
                    │               ├── <106> Var [ret]
                    │               ├── Constant Int [13]
                    │               ├── Constant Int [14]
                    │               ╰── Constant Int [15]
                    ╰── Return
                        ╰── <120>  [==]
                            ├── <117> Var [ret]
                            ╰── Constant Int [150000000]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_declarations_conflicting_local_declarations() {
    let src = r#"
        int main(void) {
            int x = 1;
            static int x;
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Static
                    ╰── Return
                        ╰── <17> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_declarations_extern_follows_local_var() {
    let src = r#"
        int main(void) {
            int x = 3;
            extern int x;
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Extern
                    ╰── Return
                        ╰── <17> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_declarations_extern_follows_static_local_var() {
    let src = r#"
        int main(void) {
            static int x = 0;
            extern int x;
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Constant Int [0]
                    │   ╰── Static
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Extern
                    ╰── Return
                        ╰── <18> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_declarations_local_var_follows_extern() {
    let src = r#"
        int i = 10;
        int main(void) {
            extern int i;
            int i;
            return i;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [10]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Extern
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ╰── Type
                    │       ╰── Int
                    ╰── Return
                        ╰── <21> Var [i]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_declarations_out_of_scope_extern_var() {
    let src = r#"
        int main(void) {
            {
                extern int a;
            }
            return a;
        }
        int a = 1;
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ├── Block
            │       │   ╰── VarDeclaration
            │       │       ├── Name
            │       │       │   ╰── a
            │       │       ├── Type
            │       │       │   ╰── Int
            │       │       ╰── Extern
            │       ╰── Return
            │           ╰── <13> Var [a]
            ╰── VarDeclaration
                ├── Name
                │   ╰── a
                ├── Type
                │   ╰── Int
                ╰── Initializer
                    ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_declarations_redefine_param_as_identifier_with_linkage() {
    let src = r#"
        int f(int i) {
            extern int i;
            return i;
        }
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [f]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Extern
            │       ╰── Return
            │           ╰── <14> Var [i]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_declarations_undeclared_global_variable() {
    let src = r#"
        int main(void) {
            return x;
        }
        int x = 0;
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <6> Var [x]
            ╰── VarDeclaration
                ├── Name
                │   ╰── x
                ├── Type
                │   ╰── Int
                ╰── Initializer
                    ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_labels_extra_credit_goto_global_var() {
    let src = r#"
        int x = 10;
        int main(void) {
            goto x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [10]
            ╰── Function [main]
                ╰── Body
                    ├── Goto [x]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_parse_extern_param() {
    assert_error(
        r#"
        
        int f(extern int i) {
            //^^^^^^ Expected type specifier
            return i;
        }
        int main(void) {
            return f(1);
        }
    "#,
    );
}

#[test]
fn test_chapter_10_invalid_parse_extra_credit_extern_label() {
    assert_error(
        r#"
        int main(void) {
            extern a:
          //^^^^^^ Expected type specifier
            return 1;
        }
    "#,
    );
}

#[test]
fn test_chapter_10_invalid_parse_extra_credit_file_scope_label() {
    assert_error(
        r#"
        
        x:
      //^ Expected type specifier
        int foo = 0;
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_10_invalid_parse_extra_credit_static_label() {
    assert_error(
        r#"
        int main(void) {
            static a:
          //^^^^^^ Expected type specifier
            return 1;
        }
    "#,
    );
}

#[test]
fn test_chapter_10_invalid_parse_missing_parameter_list() {
    assert_error(
        r#"
        
        int f {
            //^ Expected ';', but found '{'
            return 0
        };
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_10_invalid_parse_missing_type_specifier() {
    assert_error(
        r#"
        static var = 0;
      //^^^^^^ Expected type specifier
        int main(void) {
            return var;
        }
    "#,
    );
}

#[test]
fn test_chapter_10_invalid_parse_multi_storage_class_fun() {
    assert_error(
        r#"
        
        static int extern foo(void) {
                 //^^^^^^ Duplicated storage class in declaration
            return 0;
        }
        int main(void) {
            return foo();
        }
    "#,
    );
}

#[test]
fn test_chapter_10_invalid_parse_multi_storage_class_var() {
    assert_error(
        r#"
        int main(void) {
            static extern int foo = 0;
                 //^^^^^^ Duplicated storage class in declaration
            return foo;
        }
    "#,
    );
}

#[test]
fn test_chapter_10_invalid_parse_static_and_extern() {
    assert_error(
        r#"
        
        static extern int a;
             //^^^^^^ Duplicated storage class in declaration
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_10_invalid_parse_static_param() {
    assert_error(
        r#"
        
        int f(static int i) {
            //^^^^^^ Expected type specifier
            return i;
        }
        int main(void) {
            return f(1);
        }
    "#,
    );
}

#[test]
fn test_chapter_10_invalid_types_conflicting_function_linkage() {
    let src = r#"
        int foo(void);
        int main(void) {
            return foo();
        }
        static int foo(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <11> FunctionCall [foo]
            ╰── Function [static foo]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_conflicting_function_linkage_2() {
    let src = r#"
        int main(void) {
            int foo(void);
            return foo();
        }
        static int foo(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ├── Function [foo]
            │       ╰── Return
            │           ╰── <11> FunctionCall [foo]
            ╰── Function [static foo]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_conflicting_global_definitions() {
    let src = r#"
        int foo = 3;
        int main(void) {
            return 0;
        }
        int foo = 4;
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [3]
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── VarDeclaration
                ├── Name
                │   ╰── foo
                ├── Type
                │   ╰── Int
                ╰── Initializer
                    ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_conflicting_variable_linkage() {
    let src = r#"
        
        static int foo;
        int main(void) {
            return foo;
        }
        int foo = 3;
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Static
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <11> Var [foo]
            ╰── VarDeclaration
                ├── Name
                │   ╰── foo
                ├── Type
                │   ╰── Int
                ╰── Initializer
                    ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_conflicting_variable_linkage_2() {
    let src = r#"
        int main(void) {
            int x = 3;
            {
                extern int x;
            }
            return x;
        }
        static int x = 10;
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [3]
            │       ├── Block
            │       │   ╰── VarDeclaration
            │       │       ├── Name
            │       │       │   ╰── x
            │       │       ├── Type
            │       │       │   ╰── Int
            │       │       ╰── Extern
            │       ╰── Return
            │           ╰── <19> Var [x]
            ╰── VarDeclaration
                ├── Name
                │   ╰── x
                ├── Type
                │   ╰── Int
                ├── Initializer
                │   ╰── Constant Int [10]
                ╰── Static
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_extern_for_loop_counter() {
    let src = r#"
        int main(void) {
            int x = 0;
            for (extern int i = 0; i < 10; i = i + 1) {
                x = x + 1;
            }
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ├── Initializer
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Extern
                    │   ├── Condition
                    │   │   ╰── <23>  [<]
                    │   │       ├── <20> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <32> Assign [=]
                    │   │       ├── <25> Var [i]
                    │   │       ╰── <31>  [+]
                    │   │           ├── <28> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── <41> Assign [=]
                    │           ├── <34> Var [x]
                    │           ╰── <40>  [+]
                    │               ├── <37> Var [x]
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── <47> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_extern_variable_initializer() {
    let src = r#"
        int main(void) {
            extern int i = 0;
            return i;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Constant Int [0]
                    │   ╰── Extern
                    ╰── Return
                        ╰── <13> Var [i]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_extra_credit_static_var_case() {
    let src = r#"
        int main(void) {
            static int i = 0;
            switch(0) {
                case i: return 0;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Constant Int [0]
                    │   ╰── Static
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── Constant Int [0]
                    │   ╰── Block
                    │       ╰── Case [invalid]
                    │           ├── Value
                    │           │   ╰── <14> Var [i]
                    │           ╰── Return
                    │               ╰── Constant Int [0]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_non_constant_static_initializer() {
    let src = r#"
        int a = 10;
        int b = 1 + a;
        int main(void) {
            return b;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── a
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [10]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── b
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── <14>  [+]
            │           ├── Constant Int [1]
            │           ╰── <13> Var [a]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <22> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_non_constant_static_local_initializer() {
    let src = r#"
        int main(void) {
            int a = 1;
            static int b = a * 2;
            return b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ├── Initializer
                    │   │   ╰── <19>  [*]
                    │   │       ├── <16> Var [a]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Static
                    ╰── Return
                        ╰── <23> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_redeclare_file_scope_var_as_fun() {
    let src = r#"
        int foo = 10;
        int main(void) {
            int foo(void);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [10]
            ╰── Function [main]
                ╰── Body
                    ├── Function [foo]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_redeclare_fun_as_file_scope_var() {
    let src = r#"
        int foo(void);
        int foo;
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ╰── Type
            │       ╰── Int
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_redeclare_fun_as_var() {
    let src = r#"
        int foo(void) {
            return 0;
        }
        int main(void) {
            extern int foo;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── foo
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Extern
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_static_block_scope_function_declaration() {
    let src = r#"
        int main(void) {
            static int foo(void);
            return foo();
        }
        static int foo(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ├── Function [static foo]
            │       ╰── Return
            │           ╰── <12> FunctionCall [foo]
            ╰── Function [static foo]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_static_for_loop_counter() {
    let src = r#"
        int main(void) {
            int x = 0;
            for (static int i = 0; i < 10; i = i + 1) {
                x = x + 1;
            }
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ├── Initializer
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Static
                    │   ├── Condition
                    │   │   ╰── <23>  [<]
                    │   │       ├── <20> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <32> Assign [=]
                    │   │       ├── <25> Var [i]
                    │   │       ╰── <31>  [+]
                    │   │           ├── <28> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── <41> Assign [=]
                    │           ├── <34> Var [x]
                    │           ╰── <40>  [+]
                    │               ├── <37> Var [x]
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── <47> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_invalid_types_use_file_scope_variable_as_fun() {
    let src = r#"
        
        extern int foo;
        int main(void) {
            return foo();
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <11> FunctionCall [foo]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_distinct_local_and_extern() {
    let src = r#"
        int a = 5;
        int return_a(void) {
            return a;
        }
        int main(void) {
            int a = 3;
            {
                extern int a;
                if (a != 5)
                    return 1;
                a = 4;
            }
            return a + return_a();
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── a
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [5]
            ├── Function [return_a]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12> Var [a]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── Block
                    │   ├── VarDeclaration
                    │   │   ├── Name
                    │   │   │   ╰── a
                    │   │   ├── Type
                    │   │   │   ╰── Int
                    │   │   ╰── Extern
                    │   ├── If
                    │   │   ├── Condition
                    │   │   │   ╰── <35>  [!=]
                    │   │   │       ├── <32> Var [a]
                    │   │   │       ╰── Constant Int [5]
                    │   │   ╰── Then
                    │   │       ╰── Return
                    │   │           ╰── Constant Int [1]
                    │   ╰── <43> Assign [=]
                    │       ├── <40> Var [a]
                    │       ╰── Constant Int [4]
                    ╰── Return
                        ╰── <52>  [+]
                            ├── <48> Var [a]
                            ╰── <51> FunctionCall [return_a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extern_block_scope_variable() {
    let src = r#"
        int main(void) {
            int outer = 1;
            int foo = 0;
            if (outer) {
                extern int foo;
                extern int foo;
                return foo;
            }
            return 0;
        }
        int foo = 3;
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── outer
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── foo
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <18> Var [outer]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ├── VarDeclaration
            │       │           │   ├── Name
            │       │           │   │   ╰── foo
            │       │           │   ├── Type
            │       │           │   │   ╰── Int
            │       │           │   ╰── Extern
            │       │           ├── VarDeclaration
            │       │           │   ├── Name
            │       │           │   │   ╰── foo
            │       │           │   ├── Type
            │       │           │   │   ╰── Int
            │       │           │   ╰── Extern
            │       │           ╰── Return
            │       │               ╰── <30> Var [foo]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── VarDeclaration
                ├── Name
                │   ╰── foo
                ├── Type
                │   ╰── Int
                ╰── Initializer
                    ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_bitwise_ops_file_scope_vars() {
    let src = r#"
        int x = 1;
        int y = 0;
        int main(void) {
            y = -1;
            x = (x << 1) | 1;
            if (x != 3) {
                return 1;
            }
            y = ((y & -5) ^ 12) >> 2;
            if (y != -3) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [1]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── y
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <23> Assign [=]
                    │   ├── <18> Var [y]
                    │   ╰── <22> Unary [-]
                    │       ╰── Constant Int [1]
                    ├── <37> Assign [=]
                    │   ├── <26> Var [x]
                    │   ╰── <36>  [|]
                    │       ├── <33>  [<<]
                    │       │   ├── <29> Var [x]
                    │       │   ╰── Constant Int [1]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <43>  [!=]
                    │   │       ├── <40> Var [x]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <67> Assign [=]
                    │   ├── <50> Var [y]
                    │   ╰── <66>  [>>]
                    │       ├── <63>  [^]
                    │       │   ├── <59>  [&]
                    │       │   │   ├── <53> Var [y]
                    │       │   │   ╰── <57> Unary [-]
                    │       │   │       ╰── Constant Int [5]
                    │       │   ╰── Constant Int [12]
                    │       ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <75>  [!=]
                    │   │       ├── <70> Var [y]
                    │   │       ╰── <74> Unary [-]
                    │   │           ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_compound_assignment_static_var() {
    let src = r#"
        int f(void) {
            static int i = 0;
            static int j = 0;
            static int k = 1;
            static int l = 48;
            i += 1;
            j -= i;
            k *= j;
            l /= 2;
            if (i != 3) {
                return 1;
            }
            if (j != -6) {
                return 2;
            }
            if (k != -18) {
                return 3;
            }
            if (l != 6) {
                return 4;
            }
            return 0;
        }
        int main(void) {
            f();
            f();
            return f();
        }
    "#;
    let expected = r#"
        Program
            ├── Function [f]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── k
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [1]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [48]
            │       │   ╰── Static
            │       ├── <37> Assign [+=]
            │       │   ├── <34> Var [i]
            │       │   ╰── Constant Int [1]
            │       ├── <44> Assign [-=]
            │       │   ├── <40> Var [j]
            │       │   ╰── <43> Var [i]
            │       ├── <51> Assign [*=]
            │       │   ├── <47> Var [k]
            │       │   ╰── <50> Var [j]
            │       ├── <57> Assign [/=]
            │       │   ├── <54> Var [l]
            │       │   ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <63>  [!=]
            │       │   │       ├── <60> Var [i]
            │       │   │       ╰── Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <75>  [!=]
            │       │   │       ├── <70> Var [j]
            │       │   │       ╰── <74> Unary [-]
            │       │   │           ╰── Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <87>  [!=]
            │       │   │       ├── <82> Var [k]
            │       │   │       ╰── <86> Unary [-]
            │       │   │           ╰── Constant Int [18]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <97>  [!=]
            │       │   │       ├── <94> Var [l]
            │       │   │       ╰── Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [4]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <112> FunctionCall [f]
                    ├── <115> FunctionCall [f]
                    ╰── Return
                        ╰── <118> FunctionCall [f]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_goto_skip_static_initializer() {
    let src = r#"
        int main(void) {
            goto end;
            static int x = 10;
            end:
                return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Goto [end]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Constant Int [10]
                    │   ╰── Static
                    ╰── Label [end]
                        ╰── Return
                            ╰── <16> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_increment_global_vars() {
    let src = r#"
        
        int i = 0;
        int j = 0;
        int incr_i(void){
            if (i == 1) {
                i++;
                ++i;
            }
            return 0;
        }
        int decr_j(void) {
            if (j == -1) {
                j--;
            }
            return 0;
        }
        int main(void) {
            i++ ? 0 : incr_i();
            if (i != 3) {
                return 1;
            }
            --j? decr_j(): 0;
            if (j != -2) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── j
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [0]
            ├── Function [incr_i]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <21>  [==]
            │       │   │       ├── <18> Var [i]
            │       │   │       ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ├── <25> Postfix [++]
            │       │           │   ╰── <23> Var [i]
            │       │           ╰── <30> Unary [++]
            │       │               ╰── <29> Var [i]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [decr_j]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <49>  [==]
            │       │   │       ├── <44> Var [j]
            │       │   │       ╰── <48> Unary [-]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <53> Postfix [--]
            │       │               ╰── <51> Var [j]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <{node_id}> Conditional [?]
                    │   ├── <69> Postfix [++]
                    │   │   ╰── <67> Var [i]
                    │   ├── Then
                    │   │   ╰── Constant Int [0]
                    │   ╰── Else
                    │       ╰── <72> FunctionCall [incr_i]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <79>  [!=]
                    │   │       ├── <76> Var [i]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <{node_id}> Conditional [?]
                    │   ├── <88> Unary [--]
                    │   │   ╰── <87> Var [j]
                    │   ├── Then
                    │   │   ╰── <90> FunctionCall [decr_j]
                    │   ╰── Else
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <100>  [!=]
                    │   │       ├── <95> Var [j]
                    │   │       ╰── <99> Unary [-]
                    │   │           ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_label_file_scope_var_same_name() {
    let src = r#"
        int x;
        int main(void) {
            int x = 10;
            goto x;
            return x;
            {
                extern int x;
            x:
                return x;
            }
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ╰── Type
            │       ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── Goto [x]
                    ├── Return
                    │   ╰── <18> Var [x]
                    ╰── Block
                        ├── VarDeclaration
                        │   ├── Name
                        │   │   ╰── x
                        │   ├── Type
                        │   │   ╰── Int
                        │   ╰── Extern
                        ╰── Label [x]
                            ╰── Return
                                ╰── <27> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_label_static_var_same_name() {
    let src = r#"
        int main(void) {
            static int x = 5;
            goto x;
            x = 0;
        x:
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Constant Int [5]
                    │   ╰── Static
                    ├── Goto [x]
                    ├── <18> Assign [=]
                    │   ├── <15> Var [x]
                    │   ╰── Constant Int [0]
                    ╰── Label [x]
                        ╰── Return
                            ╰── <22> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_libraries_same_label_same_fun() {
    let src = r#"
        static int f(void) {
            goto x;
            return 0;
            x:
            return 2;
        }
        int f_caller(void) {
            return f();
        }
    "#;
    let expected = r#"
        Program
            ├── Function [static f]
            │   ╰── Body
            │       ├── Goto [x]
            │       ├── Return
            │       │   ╰── Constant Int [0]
            │       ╰── Label [x]
            │           ╰── Return
            │               ╰── Constant Int [2]
            ╰── Function [f_caller]
                ╰── Body
                    ╰── Return
                        ╰── <21> FunctionCall [f]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_libraries_same_label_same_fun_client() {
    let src = r#"
        int f(void) {
            goto x;
            return 0;
        x:
            return 1;
        }
        int f_caller(void);
        int main(void) {
            if (f() != 1) {
                return 1;
            }
            if (f_caller() !=
                2) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [f]
            │   ╰── Body
            │       ├── Goto [x]
            │       ├── Return
            │       │   ╰── Constant Int [0]
            │       ╰── Label [x]
            │           ╰── Return
            │               ╰── Constant Int [1]
            ├── Function [f_caller]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <28>  [!=]
                    │   │       ├── <25> FunctionCall [f]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <38>  [!=]
                    │   │       ├── <35> FunctionCall [f_caller]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_switch_on_extern() {
    let src = r#"
        int update_x(void);
        int main(void) {
            update_x();
            extern int x;
            switch(x) {
                case 0: return 1;
                case 1: return 2;
                case 4: return 0;
                default: return 4;
            }
        }
        int x;
        int update_x(void) {
            x = 4;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [update_x]
            ├── Function [main]
            │   ╰── Body
            │       ├── <11> FunctionCall [update_x]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Extern
            │       ╰── Switch
            │           ├── Expression
            │           │   ╰── <19> Var [x]
            │           ╰── Block
            │               ├── Case [0]
            │               │   ╰── Return
            │               │       ╰── Constant Int [1]
            │               ├── Case [1]
            │               │   ╰── Return
            │               │       ╰── Constant Int [2]
            │               ├── Case [4]
            │               │   ╰── Return
            │               │       ╰── Constant Int [0]
            │               ╰── Default
            │                   ╰── Return
            │                       ╰── Constant Int [4]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ╰── Type
            │       ╰── Int
            ╰── Function [update_x]
                ╰── Body
                    ├── <52> Assign [=]
                    │   ├── <49> Var [x]
                    │   ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_switch_skip_extern_decl() {
    let src = r#"
        int main(void) {
            int a = 10;
            switch(a) {
                case 1: return 1;
                extern int x;
                case 2: return 2;
                case 10:
                if (x * 2 == 30) {
                    return 0;
                }
                default: return 5;
            }
            return 6;
        }
        int x = 15;
    "#;
    let expected = r#"
        Program
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [10]
            │       ├── Switch
            │       │   ├── Expression
            │       │   │   ╰── <12> Var [a]
            │       │   ╰── Block
            │       │       ├── Case [1]
            │       │       │   ╰── Return
            │       │       │       ╰── Constant Int [1]
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── x
            │       │       │   ├── Type
            │       │       │   │   ╰── Int
            │       │       │   ╰── Extern
            │       │       ├── Case [2]
            │       │       │   ╰── Return
            │       │       │       ╰── Constant Int [2]
            │       │       ├── Case [10]
            │       │       │   ╰── If
            │       │       │       ├── Condition
            │       │       │       │   ╰── <34>  [==]
            │       │       │       │       ├── <31>  [*]
            │       │       │       │       │   ├── <28> Var [x]
            │       │       │       │       │   ╰── Constant Int [2]
            │       │       │       │       ╰── Constant Int [30]
            │       │       │       ╰── Then
            │       │       │           ╰── Block
            │       │       │               ╰── Return
            │       │       │                   ╰── Constant Int [0]
            │       │       ╰── Default
            │       │           ╰── Return
            │       │               ╰── Constant Int [5]
            │       ╰── Return
            │           ╰── Constant Int [6]
            ╰── VarDeclaration
                ├── Name
                │   ╰── x
                ├── Type
                │   ╰── Int
                ╰── Initializer
                    ╰── Constant Int [15]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_extra_credit_switch_skip_static_initializer() {
    let src = r#"
        int a = 3;
        int main(void) {
            switch (a) {
                case 1:;
                    static int x = 10;
                    x = 0;
                case 3:
                    return x;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── a
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [3]
            ╰── Function [main]
                ╰── Body
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [a]
                    │   ╰── Block
                    │       ├── Case [1]
                    │       │   ╰── Empty
                    │       ├── VarDeclaration
                    │       │   ├── Name
                    │       │   │   ╰── x
                    │       │   ├── Type
                    │       │   │   ╰── Int
                    │       │   ├── Initializer
                    │       │   │   ╰── Constant Int [10]
                    │       │   ╰── Static
                    │       ├── <27> Assign [=]
                    │       │   ├── <24> Var [x]
                    │       │   ╰── Constant Int [0]
                    │       ╰── Case [3]
                    │           ╰── Return
                    │               ╰── <31> Var [x]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_linkage_function() {
    let src = r#"
        extern int sum(int a, int b);
        int sum(int i, int j) {
            return i + j;
        }
        int sum(int x, int y);
    "#;
    let expected = r#"
        Program
            ├── Function [extern sum]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── b
            │           ╰── Type
            │               ╰── Int
            ├── Function [sum]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── j
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <28>  [+]
            │               ├── <24> Var [i]
            │               ╰── <27> Var [j]
            ╰── Function [sum]
                ╰── Parameters
                    ├── Param
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Int
                    ╰── Param
                        ├── Name
                        │   ╰── y
                        ╰── Type
                            ╰── Int
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_linkage_function_client() {
    let src = r#"
        int add_one_and_two(void) {
            extern int sum(int a, int b);
            int sum(int a, int b);
            return sum(1, 2);
        }
        extern int sum(int x, int y);
        int sum(int x, int y);
        int add_three_and_four(void) {
            int sum = 3;
            if (sum > 2) {
                extern int sum(int one, int two);
                return sum(3, 4);
            }
            return 1;
        }
        int main(void) {
            if (add_three_and_four() != 7)
                return 1;
            if (add_one_and_two() != 3)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [add_one_and_two]
            │   ╰── Body
            │       ├── Function [extern sum]
            │       │   ╰── Parameters
            │       │       ├── Param
            │       │       │   ├── Name
            │       │       │   │   ╰── a
            │       │       │   ╰── Type
            │       │       │       ╰── Int
            │       │       ╰── Param
            │       │           ├── Name
            │       │           │   ╰── b
            │       │           ╰── Type
            │       │               ╰── Int
            │       ├── Function [sum]
            │       │   ╰── Parameters
            │       │       ├── Param
            │       │       │   ├── Name
            │       │       │   │   ╰── a
            │       │       │   ╰── Type
            │       │       │       ╰── Int
            │       │       ╰── Param
            │       │           ├── Name
            │       │           │   ╰── b
            │       │           ╰── Type
            │       │               ╰── Int
            │       ╰── Return
            │           ╰── <31> FunctionCall [sum]
            │               ├── Constant Int [1]
            │               ╰── Constant Int [2]
            ├── Function [extern sum]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── y
            │           ╰── Type
            │               ╰── Int
            ├── Function [sum]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── y
            │           ╰── Type
            │               ╰── Int
            ├── Function [add_three_and_four]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── sum
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <72>  [>]
            │       │   │       ├── <69> Var [sum]
            │       │   │       ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ├── Function [extern sum]
            │       │           │   ╰── Parameters
            │       │           │       ├── Param
            │       │           │       │   ├── Name
            │       │           │       │   │   ╰── one
            │       │           │       │   ╰── Type
            │       │           │       │       ╰── Int
            │       │           │       ╰── Param
            │       │           │           ├── Name
            │       │           │           │   ╰── two
            │       │           │           ╰── Type
            │       │           │               ╰── Int
            │       │           ╰── Return
            │       │               ╰── <88> FunctionCall [sum]
            │       │                   ├── Constant Int [3]
            │       │                   ╰── Constant Int [4]
            │       ╰── Return
            │           ╰── Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <105>  [!=]
                    │   │       ├── <102> FunctionCall [add_three_and_four]
                    │   │       ╰── Constant Int [7]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <113>  [!=]
                    │   │       ├── <110> FunctionCall [add_one_and_two]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_tentative_var() {
    let src = r#"
        
        int x;
        int read_x(void) {
            return x;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ╰── Type
            │       ╰── Int
            ╰── Function [read_x]
                ╰── Body
                    ╰── Return
                        ╰── <10> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_tentative_var_client() {
    let src = r#"
        int read_x(void);
        int main(void) {
            extern int x;
            if (x != 0)
                return 1;
            x = 3;
            if (read_x() != 3)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [read_x]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Extern
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <19>  [!=]
                    │   │       ├── <16> Var [x]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── <27> Assign [=]
                    │   ├── <24> Var [x]
                    │   ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <33>  [!=]
                    │   │       ├── <30> FunctionCall [read_x]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_var_scoping() {
    let src = r#"
        int read_x(void) {
            int x = 4;
            if (x == 4) {
                extern int x;
                return x;
            } else {
                return -1;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [read_x]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [4]
                    ╰── If
                        ├── Condition
                        │   ╰── <15>  [==]
                        │       ├── <12> Var [x]
                        │       ╰── Constant Int [4]
                        ├── Then
                        │   ╰── Block
                        │       ├── VarDeclaration
                        │       │   ├── Name
                        │       │   │   ╰── x
                        │       │   ├── Type
                        │       │   │   ╰── Int
                        │       │   ╰── Extern
                        │       ╰── Return
                        │           ╰── <22> Var [x]
                        ╰── Else
                            ╰── Block
                                ╰── Return
                                    ╰── <28> Unary [-]
                                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_var_scoping_client() {
    let src = r#"
        int x = 10;
        int read_x(void);
        int main(void) {
            int x = 0;
            if (x == 0) {
                if (read_x() != 10)
                    return 1;
                extern int x;
                if (x != 10)
                    return 1;
                return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [10]
            ├── Function [read_x]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <26>  [==]
                    │   │       ├── <23> Var [x]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── If
                    │           │   ├── Condition
                    │           │   │   ╰── <31>  [!=]
                    │           │   │       ├── <28> FunctionCall [read_x]
                    │           │   │       ╰── Constant Int [10]
                    │           │   ╰── Then
                    │           │       ╰── Return
                    │           │           ╰── Constant Int [1]
                    │           ├── VarDeclaration
                    │           │   ├── Name
                    │           │   │   ╰── x
                    │           │   ├── Type
                    │           │   │   ╰── Int
                    │           │   ╰── Extern
                    │           ├── If
                    │           │   ├── Condition
                    │           │   │   ╰── <44>  [!=]
                    │           │   │       ├── <41> Var [x]
                    │           │   │       ╰── Constant Int [10]
                    │           │   ╰── Then
                    │           │       ╰── Return
                    │           │           ╰── Constant Int [1]
                    │           ╰── Return
                    │               ╰── Constant Int [0]
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_variable() {
    let src = r#"
        int x;
        extern int x;
        int x;
        int update_x(int new_val) {
            x = new_val;
            return 0;
        }
        int read_x(void) {
            return x;
        }
        int x = 3;
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ╰── Type
            │       ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ╰── Type
            │       ╰── Int
            ├── Function [update_x]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── new_val
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── <26> Assign [=]
            │       │   ├── <22> Var [x]
            │       │   ╰── <25> Var [new_val]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [read_x]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <37> Var [x]
            ╰── VarDeclaration
                ├── Name
                │   ╰── x
                ├── Type
                │   ╰── Int
                ╰── Initializer
                    ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_external_variable_client() {
    let src = r#"
        int update_x(int new_val);
        int read_x(void);
        extern int x;
        int main(void) {
            if (x != 3)
                return 1;
            if (read_x() != 3)
                return 1;
            x = 4;
            if (x != 4)
                return 1;
            if (read_x() != 4)
                return 1;
            update_x(5);
            if (x != 5)
                return 1;
            if (read_x() != 5)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [update_x]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── new_val
            │           ╰── Type
            │               ╰── Int
            ├── Function [read_x]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <27>  [!=]
                    │   │       ├── <24> Var [x]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <35>  [!=]
                    │   │       ├── <32> FunctionCall [read_x]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── <43> Assign [=]
                    │   ├── <40> Var [x]
                    │   ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <49>  [!=]
                    │   │       ├── <46> Var [x]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <57>  [!=]
                    │   │       ├── <54> FunctionCall [read_x]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── <63> FunctionCall [update_x]
                    │   ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <69>  [!=]
                    │   │       ├── <66> Var [x]
                    │   │       ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <77>  [!=]
                    │   │       ├── <74> FunctionCall [read_x]
                    │   │       ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_internal_hides_external_linkage() {
    let src = r#"
        int x = 10;
        int read_x(void){
            return x;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [10]
            ╰── Function [read_x]
                ╰── Body
                    ╰── Return
                        ╰── <12> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_internal_hides_external_linkage_client() {
    let src = r#"
        static int x = 1;
        int read_internal_x(void);
        int read_x(void);
        int main(void) {
            extern int x;
            if (x != 1)
                return 1;
            x = 2;
            if (read_internal_x() != 2)
                return 1;
            if (read_x() != 10)
                return 1;
            return 0;
        }
        extern int x;
        int read_internal_x(void) {
            return x;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ├── Initializer
            │   │   ╰── Constant Int [1]
            │   ╰── Static
            ├── Function [read_internal_x]
            ├── Function [read_x]
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Extern
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <31>  [!=]
            │       │   │       ├── <28> Var [x]
            │       │   │       ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ├── <39> Assign [=]
            │       │   ├── <36> Var [x]
            │       │   ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <45>  [!=]
            │       │   │       ├── <42> FunctionCall [read_internal_x]
            │       │   │       ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <53>  [!=]
            │       │   │       ├── <50> FunctionCall [read_x]
            │       │   │       ╰── Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Extern
            ╰── Function [read_internal_x]
                ╰── Body
                    ╰── Return
                        ╰── <71> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_internal_linkage_function() {
    let src = r#"
        
        static int my_fun(void);
        int call_static_my_fun(void) {
            return my_fun();
        }
        int call_static_my_fun_2(void) {
            int my_fun(void);
            return my_fun();
        }
        extern int my_fun(void);
        static int my_fun(void);
        int my_fun(void) {
            static int i = 0;
            i = i + 1;
            return i;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [static my_fun]
            ├── Function [call_static_my_fun]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12> FunctionCall [my_fun]
            ├── Function [call_static_my_fun_2]
            │   ╰── Body
            │       ├── Function [my_fun]
            │       ╰── Return
            │           ╰── <26> FunctionCall [my_fun]
            ├── Function [extern my_fun]
            ├── Function [static my_fun]
            ╰── Function [my_fun]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Constant Int [0]
                    │   ╰── Static
                    ├── <61> Assign [=]
                    │   ├── <54> Var [i]
                    │   ╰── <60>  [+]
                    │       ├── <57> Var [i]
                    │       ╰── Constant Int [1]
                    ╰── Return
                        ╰── <64> Var [i]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_internal_linkage_function_client() {
    let src = r#"
        extern int my_fun(void);
        int call_static_my_fun(void);
        int call_static_my_fun_2(void);
        int main(void) {
            if (call_static_my_fun() != 1)
                return 1;
            if (my_fun() != 100)
                return 1;
            if (call_static_my_fun_2() != 2)
                return 1;
            return 0;
        }
        int my_fun(void) {
            return 100;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [extern my_fun]
            ├── Function [call_static_my_fun]
            ├── Function [call_static_my_fun_2]
            ├── Function [main]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <25>  [!=]
            │       │   │       ├── <22> FunctionCall [call_static_my_fun]
            │       │   │       ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <33>  [!=]
            │       │   │       ├── <30> FunctionCall [my_fun]
            │       │   │       ╰── Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <41>  [!=]
            │       │   │       ├── <38> FunctionCall [call_static_my_fun_2]
            │       │   │       ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [my_fun]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [100]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_internal_linkage_var() {
    let src = r#"
        static int x;
        int read_x(void) {
            return x;
        }
        int update_x(int new_val) {
            extern int x;
            x = new_val;
            return 0;
        }
        extern int x;
        static int x = 5;
        static int x;
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Static
            ├── Function [read_x]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <11> Var [x]
            ├── Function [update_x]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── new_val
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Extern
            │       ├── <32> Assign [=]
            │       │   ├── <28> Var [x]
            │       │   ╰── <31> Var [new_val]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ├── Initializer
            │   │   ╰── Constant Int [5]
            │   ╰── Static
            ╰── VarDeclaration
                ├── Name
                │   ╰── x
                ├── Type
                │   ╰── Int
                ╰── Static
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_libraries_internal_linkage_var_client() {
    let src = r#"
        static int x;
        static int x;
        int read_x(void);
        int update_x(int x);
        int main(void) {
            if (x != 0)
                return 1;
            if (read_x() != 5)
                return 1;
            extern int x;
            update_x(10);
            if (read_x() != 10)
                return 1;
            if (x != 0)
                return 1;
            x = 20;
            if (x != 20)
                return 1;
            if (read_x() != 10)
                return 1;
            return 0;
        }
        static int x;
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Static
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Static
            ├── Function [read_x]
            ├── Function [update_x]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── x
            │           ╰── Type
            │               ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <32>  [!=]
            │       │   │       ├── <29> Var [x]
            │       │   │       ╰── Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <40>  [!=]
            │       │   │       ├── <37> FunctionCall [read_x]
            │       │   │       ╰── Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Extern
            │       ├── <51> FunctionCall [update_x]
            │       │   ╰── Constant Int [10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <57>  [!=]
            │       │   │       ├── <54> FunctionCall [read_x]
            │       │   │       ╰── Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <65>  [!=]
            │       │   │       ├── <62> Var [x]
            │       │   │       ╰── Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ├── <73> Assign [=]
            │       │   ├── <70> Var [x]
            │       │   ╰── Constant Int [20]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <79>  [!=]
            │       │   │       ├── <76> Var [x]
            │       │   │       ╰── Constant Int [20]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <87>  [!=]
            │       │   │       ├── <84> FunctionCall [read_x]
            │       │   │       ╰── Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── VarDeclaration
                ├── Name
                │   ╰── x
                ├── Type
                │   ╰── Int
                ╰── Static
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_multiple_static_file_scope_vars() {
    let src = r#"
        static int foo;
        int main(void) {
            return foo;
        }
        extern int foo;
        static int foo = 4;
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Static
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <11> Var [foo]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Extern
            ╰── VarDeclaration
                ├── Name
                │   ╰── foo
                ├── Type
                │   ╰── Int
                ├── Initializer
                │   ╰── Constant Int [4]
                ╰── Static
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_multiple_static_local() {
    let src = r#"
        int foo(void) {
            static int a = 3;
            a = a * 2;
            return a;
        }
        int bar(void) {
            static int a = 4;
            a = a + 1;
            return a;
        }
        int main(void) {
            return foo() + bar() + foo() + bar();
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [3]
            │       │   ╰── Static
            │       ├── <20> Assign [=]
            │       │   ├── <13> Var [a]
            │       │   ╰── <19>  [*]
            │       │       ├── <16> Var [a]
            │       │       ╰── Constant Int [2]
            │       ╰── Return
            │           ╰── <23> Var [a]
            ├── Function [bar]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [4]
            │       │   ╰── Static
            │       ├── <46> Assign [=]
            │       │   ├── <39> Var [a]
            │       │   ╰── <45>  [+]
            │       │       ├── <42> Var [a]
            │       │       ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── <49> Var [a]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <70>  [+]
                            ├── <66>  [+]
                            │   ├── <62>  [+]
                            │   │   ├── <58> FunctionCall [foo]
                            │   │   ╰── <61> FunctionCall [bar]
                            │   ╰── <65> FunctionCall [foo]
                            ╰── <69> FunctionCall [bar]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_push_arg_on_page_boundary() {
    let src = r#"
        extern int zed;
        int foo(int a, int b, int c, int d, int e, int f, int g) {
            return g + 1;
        }
        int main(void) {
            return foo(0, 0, 0, 0, 0, 0, zed);
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── zed
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Extern
            ├── Function [foo]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── g
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <35>  [+]
            │               ├── <32> Var [g]
            │               ╰── Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <52> FunctionCall [foo]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ╰── <51> Var [zed]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_shadow_static_local_var() {
    let src = r#"
        int i;
        int update_static_or_global(int update_global, int new_val)
        {
            static int i;
            if (update_global)
            {
                extern int i;
                i = new_val;
            }
            else
                i = new_val;
            return i;
        }
        int main(void)
        {
            if (i != 0)
                return 1;
            int result = update_static_or_global(1, 10);
            if (result != 0)
                return 1;
            if (i != 10)
                return 1;
            result = update_static_or_global(0, 9);
            if (result != 9)
                return 1;
            if (i != 10)
                return 1;
            result = update_static_or_global(1, 11);
            if (result != 9)
                return 1;
            if (i != 11)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ╰── Type
            │       ╰── Int
            ├── Function [update_static_or_global]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── update_global
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── new_val
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Static
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <21> Var [update_global]
            │       │   ├── Then
            │       │   │   ╰── Block
            │       │   │       ├── VarDeclaration
            │       │   │       │   ├── Name
            │       │   │       │   │   ╰── i
            │       │   │       │   ├── Type
            │       │   │       │   │   ╰── Int
            │       │   │       │   ╰── Extern
            │       │   │       ╰── <32> Assign [=]
            │       │   │           ├── <28> Var [i]
            │       │   │           ╰── <31> Var [new_val]
            │       │   ╰── Else
            │       │       ╰── <41> Assign [=]
            │       │           ├── <37> Var [i]
            │       │           ╰── <40> Var [new_val]
            │       ╰── Return
            │           ╰── <45> Var [i]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <57>  [!=]
                    │   │       ├── <54> Var [i]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <67> FunctionCall [update_static_or_global]
                    │           ├── Constant Int [1]
                    │           ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <74>  [!=]
                    │   │       ├── <71> Var [result]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <82>  [!=]
                    │   │       ├── <79> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── <93> Assign [=]
                    │   ├── <87> Var [result]
                    │   ╰── <92> FunctionCall [update_static_or_global]
                    │       ├── Constant Int [0]
                    │       ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <99>  [!=]
                    │   │       ├── <96> Var [result]
                    │   │       ╰── Constant Int [9]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <107>  [!=]
                    │   │       ├── <104> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── <118> Assign [=]
                    │   ├── <112> Var [result]
                    │   ╰── <117> FunctionCall [update_static_or_global]
                    │       ├── Constant Int [1]
                    │       ╰── Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <124>  [!=]
                    │   │       ├── <121> Var [result]
                    │   │       ╰── Constant Int [9]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <132>  [!=]
                    │   │       ├── <129> Var [i]
                    │   │       ╰── Constant Int [11]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_static_local_multiple_scopes() {
    let src = r#"
        int putchar (int ch);
        int print_letters(void) {
            static int i = 65;
            putchar(i);
            {
                i = i + 1;
                static int i = 97;
                putchar(i);
                i = i + 1;
            }
            putchar(10);
            return 0;
        }
        int main(void) {
            for (int i = 0; i < 26; i = i + 1)
                print_letters();
        }
    "#;
    let expected = r#"
        Program
            ├── Function [putchar]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ch
            │           ╰── Type
            │               ╰── Int
            ├── Function [print_letters]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [65]
            │       │   ╰── Static
            │       ├── <23> FunctionCall [putchar]
            │       │   ╰── <22> Var [i]
            │       ├── Block
            │       │   ├── <33> Assign [=]
            │       │   │   ├── <26> Var [i]
            │       │   │   ╰── <32>  [+]
            │       │   │       ├── <29> Var [i]
            │       │   │       ╰── Constant Int [1]
            │       │   ├── VarDeclaration
            │       │   │   ├── Name
            │       │   │   │   ╰── i
            │       │   │   ├── Type
            │       │   │   │   ╰── Int
            │       │   │   ├── Initializer
            │       │   │   │   ╰── Constant Int [97]
            │       │   │   ╰── Static
            │       │   ├── <45> FunctionCall [putchar]
            │       │   │   ╰── <44> Var [i]
            │       │   ╰── <55> Assign [=]
            │       │       ├── <48> Var [i]
            │       │       ╰── <54>  [+]
            │       │           ├── <51> Var [i]
            │       │           ╰── Constant Int [1]
            │       ├── <61> FunctionCall [putchar]
            │       │   ╰── Constant Int [10]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ╰── For
                        ├── Init
                        │   ╰── VarDeclaration
                        │       ├── Name
                        │       │   ╰── i
                        │       ├── Type
                        │       │   ╰── Int
                        │       ╰── Initializer
                        │           ╰── Constant Int [0]
                        ├── Condition
                        │   ╰── <82>  [<]
                        │       ├── <79> Var [i]
                        │       ╰── Constant Int [26]
                        ├── Condition
                        │   ╰── <91> Assign [=]
                        │       ├── <84> Var [i]
                        │       ╰── <90>  [+]
                        │           ├── <87> Var [i]
                        │           ╰── Constant Int [1]
                        ╰── <93> FunctionCall [print_letters]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_static_local_uninitialized() {
    let src = r#"
        int foo(void) {
            static int x;
            x = x + 1;
            return x;
        }
        int main(void) {
            int ret;
            for (int i = 0; i < 4; i = i + 1)
                ret = foo();
            return ret;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Static
            │       ├── <18> Assign [=]
            │       │   ├── <11> Var [x]
            │       │   ╰── <17>  [+]
            │       │       ├── <14> Var [x]
            │       │       ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── <21> Var [x]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ret
                    │   ╰── Type
                    │       ╰── Int
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <44>  [<]
                    │   │       ├── <41> Var [i]
                    │   │       ╰── Constant Int [4]
                    │   ├── Condition
                    │   │   ╰── <53> Assign [=]
                    │   │       ├── <46> Var [i]
                    │   │       ╰── <52>  [+]
                    │   │           ├── <49> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── <59> Assign [=]
                    │       ├── <55> Var [ret]
                    │       ╰── <58> FunctionCall [foo]
                    ╰── Return
                        ╰── <63> Var [ret]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_static_recursive_call() {
    let src = r#"
        int putchar (int ch);
        int print_alphabet(void) {
            static int count = 0;
            putchar(count + 65);
            count = count + 1;
            if (count < 26) {
                print_alphabet();
            }
            return count;
        }
        int main(void) {
            print_alphabet();
        }
    "#;
    let expected = r#"
        Program
            ├── Function [putchar]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── ch
            │           ╰── Type
            │               ╰── Int
            ├── Function [print_alphabet]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── count
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [0]
            │       │   ╰── Static
            │       ├── <26> FunctionCall [putchar]
            │       │   ╰── <25>  [+]
            │       │       ├── <22> Var [count]
            │       │       ╰── Constant Int [65]
            │       ├── <36> Assign [=]
            │       │   ├── <29> Var [count]
            │       │   ╰── <35>  [+]
            │       │       ├── <32> Var [count]
            │       │       ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <42>  [<]
            │       │   │       ├── <39> Var [count]
            │       │   │       ╰── Constant Int [26]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <44> FunctionCall [print_alphabet]
            │       ╰── Return
            │           ╰── <50> Var [count]
            ╰── Function [main]
                ╰── Body
                    ╰── <59> FunctionCall [print_alphabet]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_static_then_extern() {
    let src = r#"
        static int foo = 3;
        int main(void) {
            return foo;
        }
        extern int foo;
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ├── Type
            │   │   ╰── Int
            │   ├── Initializer
            │   │   ╰── Constant Int [3]
            │   ╰── Static
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <13> Var [foo]
            ╰── VarDeclaration
                ├── Name
                │   ╰── foo
                ├── Type
                │   ╰── Int
                ╰── Extern
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_static_variables_in_expressions() {
    let src = r#"
        int main(void) {
            static int i = 2;
            static int j = 3;
            int cmp = i < j;
            if (!cmp)
                return 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Constant Int [2]
                    │   ╰── Static
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── j
                    │   ├── Type
                    │   │   ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Constant Int [3]
                    │   ╰── Static
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── cmp
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <27>  [<]
                    │           ├── <23> Var [i]
                    │           ╰── <26> Var [j]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <33> Unary [!]
                    │   │       ╰── <32> Var [cmp]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_tentative_definition() {
    let src = r#"
        extern int foo;
        int foo;
        int foo;
        int main(void) {
            for (int i = 0; i < 5; i = i + 1)
                foo = foo + 1;
            return foo;
        }
        int foo;
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ╰── Type
            │       ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ╰── Type
            │       ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <29>  [<]
            │       │   │       ├── <26> Var [i]
            │       │   │       ╰── Constant Int [5]
            │       │   ├── Condition
            │       │   │   ╰── <38> Assign [=]
            │       │   │       ├── <31> Var [i]
            │       │   │       ╰── <37>  [+]
            │       │   │           ├── <34> Var [i]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── <47> Assign [=]
            │       │       ├── <40> Var [foo]
            │       │       ╰── <46>  [+]
            │       │           ├── <43> Var [foo]
            │       │           ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── <51> Var [foo]
            ╰── VarDeclaration
                ├── Name
                │   ╰── foo
                ╰── Type
                    ╰── Int
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_10_valid_type_before_storage_class() {
    let src = r#"
        int static foo(void) {
            return 3;
        }
        int static bar = 4;
        int main(void) {
            int extern foo(void);
            int extern bar;
            return foo() + bar;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [static foo]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [3]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── bar
            │   ├── Type
            │   │   ╰── Int
            │   ├── Initializer
            │   │   ╰── Constant Int [4]
            │   ╰── Static
            ╰── Function [main]
                ╰── Body
                    ├── Function [extern foo]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── bar
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Extern
                    ╰── Return
                        ╰── <37>  [+]
                            ├── <33> FunctionCall [foo]
                            ╰── <36> Var [bar]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_invalid_labels_extra_credit_bitshift_duplicate_cases() {
    let src = r#"
        int main(void) {
            int x = 100;
            switch (x << 2l) {
                case 34359738768l:
                    return 1;
                case 400:
                    return 0;
            }
            return 10;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <15>  [<<]
                    │   │       ├── <12> Var [x]
                    │   │       ╰── Constant Long [2]
                    │   ╰── Block
                    │       ├── Case [34359738768]
                    │       │   ╰── Return
                    │       │       ╰── Constant Int [1]
                    │       ╰── Case [400]
                    │           ╰── Return
                    │               ╰── Constant Int [0]
                    ╰── Return
                        ╰── Constant Int [10]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_invalid_labels_extra_credit_switch_duplicate_cases() {
    let src = r#"
        int switch_statement(int i) {
            switch(i) {
                case 0: return 0;
                case 17179869184: return 0;
                default: return 1;
            }
        }
        int main(void) {
            return switch_statement(0);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [switch_statement]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Switch
            │           ├── Expression
            │           │   ╰── <9> Var [i]
            │           ╰── Block
            │               ├── Case [0]
            │               │   ╰── Return
            │               │       ╰── Constant Int [0]
            │               ├── Case [17179869184]
            │               │   ╰── Return
            │               │       ╰── Constant Int [0]
            │               ╰── Default
            │                   ╰── Return
            │                       ╰── Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <32> FunctionCall [switch_statement]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_invalid_labels_extra_credit_switch_duplicate_cases_2() {
    let src = r#"
        int switch_statement(int i) {
            switch((long) i) {
                case 100l: return 0;
                case 100: return 0;
                default: return 1;
            }
        }
        int main(void) {
            return switch_statement(100);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [switch_statement]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Switch
            │           ├── Expression
            │           │   ╰── <12> Cast
            │           │       ├── Target
            │           │       │   ╰── Long
            │           │       ╰── Expression
            │           │           ╰── <11> Var [i]
            │           ╰── Block
            │               ├── Case [100]
            │               │   ╰── Return
            │               │       ╰── Constant Int [0]
            │               ├── Case [100]
            │               │   ╰── Return
            │               │       ╰── Constant Int [0]
            │               ╰── Default
            │                   ╰── Return
            │                       ╰── Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <35> FunctionCall [switch_statement]
                            ╰── Constant Int [100]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_invalid_parse_bad_specifiers() {
    assert_error(
        r#"
        int main(void) {
            int long int i = 0;
          //^^^^^^^^^^^^ Invalid type specifier
            return i;
        }
    "#,
    );
}

#[test]
fn test_chapter_11_invalid_parse_empty_cast() {
    assert_error(
        r#"
        int main(void) {
            return () 0;
                  //^ Expected expression, but found ')'
        }
    "#,
    );
}

#[test]
fn test_chapter_11_invalid_parse_fun_name_long() {
    assert_error(
        r#"
        
        int long(void) {
               //^^^^ Expected identifier, but found 'void'
            return 4;
        }
        int main(void){
            return long();
        }
    "#,
    );
}

#[test]
fn test_chapter_11_invalid_parse_invalid_cast() {
    assert_error(
        r#"
        int main(void) {
            return (static int) 10;
                  //^^^^^^ Expected expression, but found 'static'
        }
    "#,
    );
}

#[test]
fn test_chapter_11_invalid_parse_invalid_suffix() {
    assert_error(
        r#"
        int main(void) {
            return 0 l;
                   //^ Expected ';', but found 'l'
        }
    "#,
    );
}

#[test]
fn test_chapter_11_invalid_parse_long_constant_as_var() {
    assert_error(
        r#"
        int main(void) {
            int 10l;
              //^^^ Expected identifier, but found '10l'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_11_invalid_parse_missing_cast_parentheses() {
    assert_error(
        r#"
        int main(void) {
            return long 0;
                 //^^^^ Expected expression, but found 'long'
        }
    "#,
    );
}

#[test]
fn test_chapter_11_invalid_parse_var_name_long() {
    assert_error(
        r#"
        int main(void) {
            int long = 5;
                   //^ Expected identifier, but found '='
            return long;
        }
    "#,
    );
}

#[test]
fn test_chapter_11_invalid_types_call_long_as_function() {
    let src = r#"
        long x(void);
        int main(void) {
            long x = 0;
            return x();
        }
    "#;
    let expected = r#"
        Program
            ├── Function [x]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <17> FunctionCall [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_invalid_types_cast_lvalue() {
    let src = r#"
        int main(void) {
            int i = 0;
            i = (long) i = 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <22> Assign [=]
                    │   ├── <12> Var [i]
                    │   ╰── <21> Assign [=]
                    │       ├── <18> Cast
                    │       │   ├── Target
                    │       │   │   ╰── Long
                    │       │   ╰── Expression
                    │       │       ╰── <17> Var [i]
                    │       ╰── Constant Int [10]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_invalid_types_conflicting_function_types() {
    let src = r#"
        int foo(int a);
        int main(void) {
            return 0;
        }
        int foo(long a);
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── a
            │           ╰── Type
            │               ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [foo]
                ╰── Parameters
                    ╰── Param
                        ├── Name
                        │   ╰── a
                        ╰── Type
                            ╰── Long
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_invalid_types_conflicting_global_types() {
    let src = r#"
        int foo = 3;
        long foo;
        int main(void) {
            return foo;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [3]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ╰── Type
            │       ╰── Long
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <16> Var [foo]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_invalid_types_conflicting_variable_types() {
    let src = r#"
        long a;
        int main(void) {
            extern int a;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── a
            │   ╰── Type
            │       ╰── Long
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Extern
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_explicit_casts_sign_extend() {
    let src = r#"
        long sign_extend(int i, long expected) {
            long extended = (long) i;
            return (extended == expected);
        }
        int main(void) {
            if (!sign_extend(10, 10l)) {
                return 1;
            }
            if (!sign_extend(-10, -10l)) {
                return 2;
            }
            long l = (long) 100;
            if (l != 100l) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [sign_extend]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── extended
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <18> Cast
            │       │           ├── Target
            │       │           │   ╰── Long
            │       │           ╰── Expression
            │       │               ╰── <17> Var [i]
            │       ╰── Return
            │           ╰── <27>  [==]
            │               ├── <22> Var [extended]
            │               ╰── <25> Var [expected]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <40> Unary [!]
                    │   │       ╰── <39> FunctionCall [sign_extend]
                    │   │           ├── Constant Int [10]
                    │   │           ╰── Constant Long [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <55> Unary [!]
                    │   │       ╰── <54> FunctionCall [sign_extend]
                    │   │           ├── <50> Unary [-]
                    │   │           │   ╰── Constant Int [10]
                    │   │           ╰── <53> Unary [-]
                    │   │               ╰── Constant Long [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <67> Cast
                    │           ├── Target
                    │           │   ╰── Long
                    │           ╰── Expression
                    │               ╰── Constant Int [100]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <74>  [!=]
                    │   │       ├── <71> Var [l]
                    │   │       ╰── Constant Long [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_explicit_casts_truncate() {
    let src = r#"
        int truncate(long l, int expected) {
            int result = (int) l;
            return (result == expected);
        }
        int main(void)
        {
            if (!truncate(10l, 10)) {
                return 1;
            }
            if (!truncate(-10l, -10)) {
                return 2;
            }
            if (!truncate(17179869189l,
                          5)) {
                return 3;
            }
            if (!truncate(-17179869179l,
                          5l)) {
                return 4;
            }
            int i = (int)17179869189l;
            if (i != 5)
                return 5;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [truncate]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <18> Cast
            │       │           ├── Target
            │       │           │   ╰── Int
            │       │           ╰── Expression
            │       │               ╰── <17> Var [l]
            │       ╰── Return
            │           ╰── <27>  [==]
            │               ├── <22> Var [result]
            │               ╰── <25> Var [expected]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <40> Unary [!]
                    │   │       ╰── <39> FunctionCall [truncate]
                    │   │           ├── Constant Long [10]
                    │   │           ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <55> Unary [!]
                    │   │       ╰── <54> FunctionCall [truncate]
                    │   │           ├── <50> Unary [-]
                    │   │           │   ╰── Constant Long [10]
                    │   │           ╰── <53> Unary [-]
                    │   │               ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <66> Unary [!]
                    │   │       ╰── <65> FunctionCall [truncate]
                    │   │           ├── Constant Long [17179869189]
                    │   │           ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <79> Unary [!]
                    │   │       ╰── <78> FunctionCall [truncate]
                    │   │           ├── <76> Unary [-]
                    │   │           │   ╰── Constant Long [17179869179]
                    │   │           ╰── Constant Long [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <91> Cast
                    │           ├── Target
                    │           │   ╰── Int
                    │           ╰── Expression
                    │               ╰── Constant Long [17179869189]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <98>  [!=]
                    │   │       ├── <95> Var [i]
                    │   │       ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_bitshift() {
    let src = r#"
        int main(void) {
            long l = 137438953472l;
            int shiftcount = 2;
            if (l >> shiftcount != 34359738368l ) {
                return 1;
            }
            if (l << shiftcount != 549755813888 ) {
                return 2;
            }
            if (l << 2 != 549755813888 ) {
                return 3;
            }
            if ((40l << 40) != 43980465111040l) {
                return 4;
            }
            long long_shiftcount = 3l;
            int i_neighbor1 = 0;
            int i = -2147483645;
            int i_neighbor2 = 0;
            if (i >> long_shiftcount != -268435456) {
                return 5;
            }
            i = -1;
            if (i >> 10l != -1) {
                return 6;
            }
            if (i_neighbor1) {
                return 7;
            }
            if (i_neighbor2) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [137438953472]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── shiftcount
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <25>  [!=]
                    │   │       ├── <22>  [>>]
                    │   │       │   ├── <18> Var [l]
                    │   │       │   ╰── <21> Var [shiftcount]
                    │   │       ╰── Constant Long [34359738368]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <39>  [!=]
                    │   │       ├── <36>  [<<]
                    │   │       │   ├── <32> Var [l]
                    │   │       │   ╰── <35> Var [shiftcount]
                    │   │       ╰── Constant Long [549755813888]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <52>  [!=]
                    │   │       ├── <49>  [<<]
                    │   │       │   ├── <46> Var [l]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── Constant Long [549755813888]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <65>  [!=]
                    │   │       ├── <62>  [<<]
                    │   │       │   ├── Constant Long [40]
                    │   │       │   ╰── Constant Int [40]
                    │   │       ╰── Constant Long [43980465111040]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── long_shiftcount
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i_neighbor1
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <88> Unary [-]
                    │           ╰── Constant Int [2147483645]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i_neighbor2
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <107>  [!=]
                    │   │       ├── <102>  [>>]
                    │   │       │   ├── <98> Var [i]
                    │   │       │   ╰── <101> Var [long_shiftcount]
                    │   │       ╰── <106> Unary [-]
                    │   │           ╰── Constant Int [268435456]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── <119> Assign [=]
                    │   ├── <114> Var [i]
                    │   ╰── <118> Unary [-]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <130>  [!=]
                    │   │       ├── <125>  [>>]
                    │   │       │   ├── <122> Var [i]
                    │   │       │   ╰── Constant Long [10]
                    │   │       ╰── <129> Unary [-]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <137> Var [i_neighbor1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <144> Var [i_neighbor2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_bitwise_long_op() {
    let src = r#"
        int main(void) {
            long l1 = 71777214294589695l;
            long l2 = -4294967296;
            if ((l1 & l2) != 71777214277877760l ) {
                return 1;
            }
            if ((l1 | l2) != -4278255361 ) {
                return 2;
            }
            if ((l1 ^ l2) != -71777218556133121 ) {
                return 3;
            }
            if ((-1l & 34359738368l) != 34359738368l) {
                return 4;
            }
            if ((0l | 34359738368l) != 34359738368l) {
                return 5;
            }
            if ((34359738368l ^ 137438953472l) != 171798691840l) {
                return 6;
            }
            long l = 4611686018427387903l;
            int i = -1073741824;
            int i2 = -1;
            if ((i & l) != 4611686017353646080l) {
                return 7;
            }
            if ((l | i) != -1) {
                return 8;
            }
            if ((l ^ i) != -4611686017353646081) {
                return 9;
            }
            if ((i2 ^ 4611686018427387903l) != ~4611686018427387903l) {
                return 10;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l1
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [71777214294589695]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l2
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <16> Unary [-]
                    │           ╰── Constant Long [4294967296]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <28>  [!=]
                    │   │       ├── <25>  [&]
                    │   │       │   ├── <20> Var [l1]
                    │   │       │   ╰── <23> Var [l2]
                    │   │       ╰── Constant Long [71777214277877760]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <45>  [!=]
                    │   │       ├── <40>  [|]
                    │   │       │   ├── <35> Var [l1]
                    │   │       │   ╰── <38> Var [l2]
                    │   │       ╰── <44> Unary [-]
                    │   │           ╰── Constant Long [4278255361]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <62>  [!=]
                    │   │       ├── <57>  [^]
                    │   │       │   ├── <52> Var [l1]
                    │   │       │   ╰── <55> Var [l2]
                    │   │       ╰── <61> Unary [-]
                    │   │           ╰── Constant Long [71777218556133121]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <77>  [!=]
                    │   │       ├── <74>  [&]
                    │   │       │   ├── <70> Unary [-]
                    │   │       │   │   ╰── Constant Long [1]
                    │   │       │   ╰── Constant Long [34359738368]
                    │   │       ╰── Constant Long [34359738368]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <90>  [!=]
                    │   │       ├── <87>  [|]
                    │   │       │   ├── Constant Long [0]
                    │   │       │   ╰── Constant Long [34359738368]
                    │   │       ╰── Constant Long [34359738368]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <103>  [!=]
                    │   │       ├── <100>  [^]
                    │   │       │   ├── Constant Long [34359738368]
                    │   │       │   ╰── Constant Long [137438953472]
                    │   │       ╰── Constant Long [171798691840]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [4611686018427387903]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <120> Unary [-]
                    │           ╰── Constant Int [1073741824]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i2
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <128> Unary [-]
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <140>  [!=]
                    │   │       ├── <137>  [&]
                    │   │       │   ├── <132> Var [i]
                    │   │       │   ╰── <135> Var [l]
                    │   │       ╰── Constant Long [4611686017353646080]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <157>  [!=]
                    │   │       ├── <152>  [|]
                    │   │       │   ├── <147> Var [l]
                    │   │       │   ╰── <150> Var [i]
                    │   │       ╰── <156> Unary [-]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <174>  [!=]
                    │   │       ├── <169>  [^]
                    │   │       │   ├── <164> Var [l]
                    │   │       │   ╰── <167> Var [i]
                    │   │       ╰── <173> Unary [-]
                    │   │           ╰── Constant Long [4611686017353646081]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <190>  [!=]
                    │   │       ├── <185>  [^]
                    │   │       │   ├── <181> Var [i2]
                    │   │       │   ╰── Constant Long [4611686018427387903]
                    │   │       ╰── <189> Unary [~]
                    │   │           ╰── Constant Long [4611686018427387903]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [10]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_compound_assign_to_int() {
    let src = r#"
        int main(void) {
            int i = -20;
            int b = 2147483647;
            int c = -5000000;
            i += 2147483648l;
            if (i != 2147483628) {
                return 1;
            }
            if (b != 2147483647) {
                return 2;
            }
            b /= -34359738367l;
            if (b) {
                return 3;
            }
            if (i != 2147483628) {
                return 4;
            }
            if (c != -5000000) {
                return 5;
            }
            c *= 10000l;
            if (c != 1539607552) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <10> Unary [-]
                    │           ╰── Constant Int [20]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2147483647]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <24> Unary [-]
                    │           ╰── Constant Int [5000000]
                    ├── <31> Assign [+=]
                    │   ├── <28> Var [i]
                    │   ╰── Constant Long [2147483648]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37>  [!=]
                    │   │       ├── <34> Var [i]
                    │   │       ╰── Constant Int [2147483628]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <47>  [!=]
                    │   │       ├── <44> Var [b]
                    │   │       ╰── Constant Int [2147483647]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── <59> Assign [/=]
                    │   ├── <54> Var [b]
                    │   ╰── <58> Unary [-]
                    │       ╰── Constant Long [34359738367]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <62> Var [b]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <72>  [!=]
                    │   │       ├── <69> Var [i]
                    │   │       ╰── Constant Int [2147483628]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <84>  [!=]
                    │   │       ├── <79> Var [c]
                    │   │       ╰── <83> Unary [-]
                    │   │           ╰── Constant Int [5000000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── <94> Assign [*=]
                    │   ├── <91> Var [c]
                    │   ╰── Constant Long [10000]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <100>  [!=]
                    │   │       ├── <97> Var [c]
                    │   │       ╰── Constant Int [1539607552]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_compound_assign_to_long() {
    let src = r#"
        int main(void) {
            long l = -34359738368l;
            int i = -10;
            l -= i;
            if (l != -34359738358l) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <10> Unary [-]
                    │           ╰── Constant Long [34359738368]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <18> Unary [-]
                    │           ╰── Constant Int [10]
                    ├── <26> Assign [-=]
                    │   ├── <22> Var [l]
                    │   ╰── <25> Var [i]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <34>  [!=]
                    │   │       ├── <29> Var [l]
                    │   │       ╰── <33> Unary [-]
                    │   │           ╰── Constant Long [34359738358]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_compound_bitshift() {
    let src = r#"
        int main(void) {
            int x = 100;
            x <<= 22l;
            if (x != 419430400) {
                return 1;
            }
            if ((x >>= 4l) != 26214400) {
                return 2;
            }
            if (x != 26214400) {
                return 3;
            }
            long l = 12345l;
            if ((l <<= 33) != 106042742538240l) {
                return 4;
            }
            l = -l;
            if ((l >>= 10) != -103557365760l) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── <15> Assign [<<=]
                    │   ├── <12> Var [x]
                    │   ╰── Constant Long [22]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <21>  [!=]
                    │   │       ├── <18> Var [x]
                    │   │       ╰── Constant Int [419430400]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <35>  [!=]
                    │   │       ├── <32> Assign [>>=]
                    │   │       │   ├── <28> Var [x]
                    │   │       │   ╰── Constant Long [4]
                    │   │       ╰── Constant Int [26214400]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <45>  [!=]
                    │   │       ├── <42> Var [x]
                    │   │       ╰── Constant Int [26214400]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [12345]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <65>  [!=]
                    │   │       ├── <62> Assign [<<=]
                    │   │       │   ├── <58> Var [l]
                    │   │       │   ╰── Constant Int [33]
                    │   │       ╰── Constant Long [106042742538240]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <78> Assign [=]
                    │   ├── <72> Var [l]
                    │   ╰── <77> Unary [-]
                    │       ╰── <76> Var [l]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <90>  [!=]
                    │   │       ├── <85> Assign [>>=]
                    │   │       │   ├── <81> Var [l]
                    │   │       │   ╰── Constant Int [10]
                    │   │       ╰── <89> Unary [-]
                    │   │           ╰── Constant Long [103557365760]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_compound_bitwise() {
    let src = r#"
        int main(void) {
            long l1 = 71777214294589695l;
            long l2 = -4294967296;
            l1 &= l2;
            if (l1 != 71777214277877760l) {
                return 1;
            }
            l2 |= 100l;
            if (l2 != -4294967196) {
                return 2;
            }
            l1 ^= -9223372036854775807l;
            if (l1 != -9151594822576898047l ) {
                return 3;
            }
            l1 = 4611686018427387903l;
            int i = -1073741824;
            l1 &= i;
            if (l1 != 4611686017353646080l) {
                return 4;
            }
            i = -2147483648l;
            if ((i |= 71777214294589695l) != -2130771713) {
                return 5;
            }
            if (i != -2130771713) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l1
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [71777214294589695]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l2
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <16> Unary [-]
                    │           ╰── Constant Long [4294967296]
                    ├── <24> Assign [&=]
                    │   ├── <20> Var [l1]
                    │   ╰── <23> Var [l2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <30>  [!=]
                    │   │       ├── <27> Var [l1]
                    │   │       ╰── Constant Long [71777214277877760]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <40> Assign [|=]
                    │   ├── <37> Var [l2]
                    │   ╰── Constant Long [100]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <48>  [!=]
                    │   │       ├── <43> Var [l2]
                    │   │       ╰── <47> Unary [-]
                    │   │           ╰── Constant Long [4294967196]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── <60> Assign [^=]
                    │   ├── <55> Var [l1]
                    │   ╰── <59> Unary [-]
                    │       ╰── Constant Long [9223372036854775807]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <68>  [!=]
                    │   │       ├── <63> Var [l1]
                    │   │       ╰── <67> Unary [-]
                    │   │           ╰── Constant Long [9151594822576898047]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <78> Assign [=]
                    │   ├── <75> Var [l1]
                    │   ╰── Constant Long [4611686018427387903]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <85> Unary [-]
                    │           ╰── Constant Int [1073741824]
                    ├── <93> Assign [&=]
                    │   ├── <89> Var [l1]
                    │   ╰── <92> Var [i]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <99>  [!=]
                    │   │       ├── <96> Var [l1]
                    │   │       ╰── Constant Long [4611686017353646080]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <111> Assign [=]
                    │   ├── <106> Var [i]
                    │   ╰── <110> Unary [-]
                    │       ╰── Constant Long [2147483648]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <123>  [!=]
                    │   │       ├── <118> Assign [|=]
                    │   │       │   ├── <114> Var [i]
                    │   │       │   ╰── Constant Long [71777214294589695]
                    │   │       ╰── <122> Unary [-]
                    │   │           ╰── Constant Int [2130771713]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <135>  [!=]
                    │   │       ├── <130> Var [i]
                    │   │       ╰── <134> Unary [-]
                    │   │           ╰── Constant Int [2130771713]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_increment_long() {
    let src = r#"
        
        int main(void) {
            long x = -9223372036854775807l;
            if (x++ != -9223372036854775807l) {
                return 1;
            }
            if (x != -9223372036854775806l) {
                return 2;
            }
            if (--x != -9223372036854775807l) {
                return 3;
            }
            if (x != -9223372036854775807l) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <10> Unary [-]
                    │           ╰── Constant Long [9223372036854775807]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <21>  [!=]
                    │   │       ├── <16> Postfix [++]
                    │   │       │   ╰── <14> Var [x]
                    │   │       ╰── <20> Unary [-]
                    │   │           ╰── Constant Long [9223372036854775807]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <33>  [!=]
                    │   │       ├── <28> Var [x]
                    │   │       ╰── <32> Unary [-]
                    │   │           ╰── Constant Long [9223372036854775806]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <47>  [!=]
                    │   │       ├── <42> Unary [--]
                    │   │       │   ╰── <41> Var [x]
                    │   │       ╰── <46> Unary [-]
                    │   │           ╰── Constant Long [9223372036854775807]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <59>  [!=]
                    │   │       ├── <54> Var [x]
                    │   │       ╰── <58> Unary [-]
                    │   │           ╰── Constant Long [9223372036854775807]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_switch_int() {
    let src = r#"
        int switch_on_int(int i) {
            switch(i) {
                case 5:
                    return 0;
                case 8589934592l:
                    return 1;
                case 34359738367:
                    return 2;
                default:
                    return 3;
            }
        }
        int main(void) {
            if (switch_on_int(5) != 0)
                return 1;
            if (switch_on_int(0) != 1)
                return 2;
            if (switch_on_int(-1) != 2)
                return 3;
            if (switch_on_int(17179869184) != 1)
                return 4;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [switch_on_int]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Switch
            │           ├── Expression
            │           │   ╰── <9> Var [i]
            │           ╰── Block
            │               ├── Case [5]
            │               │   ╰── Return
            │               │       ╰── Constant Int [0]
            │               ├── Case [8589934592]
            │               │   ╰── Return
            │               │       ╰── Constant Int [1]
            │               ├── Case [34359738367]
            │               │   ╰── Return
            │               │       ╰── Constant Int [2]
            │               ╰── Default
            │                   ╰── Return
            │                       ╰── Constant Int [3]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <39>  [!=]
                    │   │       ├── <36> FunctionCall [switch_on_int]
                    │   │       │   ╰── Constant Int [5]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <48>  [!=]
                    │   │       ├── <45> FunctionCall [switch_on_int]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <59>  [!=]
                    │   │       ├── <56> FunctionCall [switch_on_int]
                    │   │       │   ╰── <55> Unary [-]
                    │   │       │       ╰── Constant Int [1]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <68>  [!=]
                    │   │       ├── <65> FunctionCall [switch_on_int]
                    │   │       │   ╰── Constant Long [17179869184]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_extra_credit_switch_long() {
    let src = r#"
        int switch_on_long(long l) {
            switch (l) {
                case 0: return 0;
                case 100: return 1;
                case 8589934592l:
                    return 2;
                default:
                    return -1;
            }
        }
        int main(void) {
            if (switch_on_long(8589934592) != 2)
                return 1;
            if (switch_on_long(100) != 1)
                return 2;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [switch_on_long]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── l
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ╰── Switch
            │           ├── Expression
            │           │   ╰── <9> Var [l]
            │           ╰── Block
            │               ├── Case [0]
            │               │   ╰── Return
            │               │       ╰── Constant Int [0]
            │               ├── Case [100]
            │               │   ╰── Return
            │               │       ╰── Constant Int [1]
            │               ├── Case [8589934592]
            │               │   ╰── Return
            │               │       ╰── Constant Int [2]
            │               ╰── Default
            │                   ╰── Return
            │                       ╰── <24> Unary [-]
            │                           ╰── Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <41>  [!=]
                    │   │       ├── <38> FunctionCall [switch_on_long]
                    │   │       │   ╰── Constant Long [8589934592]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <50>  [!=]
                    │   │       ├── <47> FunctionCall [switch_on_long]
                    │   │       │   ╰── Constant Int [100]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_implicit_casts_common_type() {
    let src = r#"
        long l;
        int i;
        int addition(void) {
            long result = i + l;
            return (result == 2147483663l);
        }
        int division(void) {
            int int_result = l / i;
            return (int_result == 214748364);
        }
        int comparison(void) {
            return (i <= l);
        }
        int conditional(void) {
            long result = 1 ? l : i;
            return (result == 8589934592l);
        }
        int main(void) {
            l = 2147483653;
            i = 10;
            if (!addition()) {
                return 1;
            }
            l = 2147483649l;
            if (!division()) {
                return 2;
            }
            i = -100;
            l = 2147483648;
            if (!comparison()) {
                return 3;
            }
            l = 8589934592l;
            i = 10;
            if (!conditional()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ╰── Type
            │       ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ╰── Type
            │       ╰── Int
            ├── Function [addition]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <21>  [+]
            │       │           ├── <17> Var [i]
            │       │           ╰── <20> Var [l]
            │       ╰── Return
            │           ╰── <29>  [==]
            │               ├── <25> Var [result]
            │               ╰── Constant Long [2147483663]
            ├── Function [division]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── int_result
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <45>  [/]
            │       │           ├── <41> Var [l]
            │       │           ╰── <44> Var [i]
            │       ╰── Return
            │           ╰── <53>  [==]
            │               ├── <49> Var [int_result]
            │               ╰── Constant Int [214748364]
            ├── Function [comparison]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <67>  [<=]
            │               ├── <62> Var [i]
            │               ╰── <65> Var [l]
            ├── Function [conditional]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <{node_id}> Conditional [?]
            │       │           ├── Constant Int [1]
            │       │           ├── Then
            │       │           │   ╰── <80> Var [l]
            │       │           ╰── Else
            │       │               ╰── <82> Var [i]
            │       ╰── Return
            │           ╰── <91>  [==]
            │               ├── <87> Var [result]
            │               ╰── Constant Long [8589934592]
            ╰── Function [main]
                ╰── Body
                    ├── <103> Assign [=]
                    │   ├── <100> Var [l]
                    │   ╰── Constant Long [2147483653]
                    ├── <109> Assign [=]
                    │   ├── <106> Var [i]
                    │   ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <114> Unary [!]
                    │   │       ╰── <113> FunctionCall [addition]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <124> Assign [=]
                    │   ├── <121> Var [l]
                    │   ╰── Constant Long [2147483649]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <129> Unary [!]
                    │   │       ╰── <128> FunctionCall [division]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── <141> Assign [=]
                    │   ├── <136> Var [i]
                    │   ╰── <140> Unary [-]
                    │       ╰── Constant Int [100]
                    ├── <147> Assign [=]
                    │   ├── <144> Var [l]
                    │   ╰── Constant Long [2147483648]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <152> Unary [!]
                    │   │       ╰── <151> FunctionCall [comparison]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <162> Assign [=]
                    │   ├── <159> Var [l]
                    │   ╰── Constant Long [8589934592]
                    ├── <168> Assign [=]
                    │   ├── <165> Var [i]
                    │   ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <173> Unary [!]
                    │   │       ╰── <172> FunctionCall [conditional]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_implicit_casts_convert_by_assignment() {
    let src = r#"
        int return_truncated_long(long l) {
            return l;
        }
        long return_extended_int(int i) {
            return i;
        }
        int truncate_on_assignment(long l, int expected) {
            int result = l;
            return result == expected;
        }
        int main(void) {
            long result = return_truncated_long(4294967298l);
            if (result != 2l) {
                return 1;
            }
            result = return_extended_int(-10);
            if (result != -10) {
                return 2;
            }
            int i = 4294967298l;
            if (i != 2) {
                return 3;
            }
            if (!truncate_on_assignment(17179869184l, 0)) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [return_truncated_long]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── l
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <9> Var [l]
            ├── Function [return_extended_int]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <21> Var [i]
            ├── Function [truncate_on_assignment]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <39> Var [l]
            │       ╰── Return
            │           ╰── <47>  [==]
            │               ├── <43> Var [result]
            │               ╰── <46> Var [expected]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <60> FunctionCall [return_truncated_long]
                    │           ╰── Constant Long [4294967298]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <67>  [!=]
                    │   │       ├── <64> Var [result]
                    │   │       ╰── Constant Long [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <81> Assign [=]
                    │   ├── <74> Var [result]
                    │   ╰── <80> FunctionCall [return_extended_int]
                    │       ╰── <79> Unary [-]
                    │           ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <89>  [!=]
                    │   │       ├── <84> Var [result]
                    │   │       ╰── <88> Unary [-]
                    │   │           ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Long [4294967298]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <105>  [!=]
                    │   │       ├── <102> Var [i]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <116> Unary [!]
                    │   │       ╰── <115> FunctionCall [truncate_on_assignment]
                    │   │           ├── Constant Long [17179869184]
                    │   │           ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_implicit_casts_convert_function_arguments() {
    let src = r#"
        int foo(long a, int b, int c, int d, long e, int f, long g, int h) {
            if (a != -1l)
                return 1;
            if (b != 2)
                return 2;
            if (c != 0)
                return 3;
            if (d != -5)
                return 4;
            if (e != -101l)
                return 5;
            if (f != -123)
                return 6;
            if (g != -10l)
                return 7;
            if (h != 1234)
                return 8;
            return 0;
        }
        int main(void) {
            int a = -1;
            long int b = 4294967298;
            long c = -4294967296;
            long d =
                21474836475;
            int e = -101;
            long f = -123;
            int g = -10;
            long h = -9223372036854774574;
            return foo(a, b, c, d, e, f, g, h);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── h
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <35>  [!=]
            │       │   │       ├── <30> Var [a]
            │       │   │       ╰── <34> Unary [-]
            │       │   │           ╰── Constant Long [1]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <43>  [!=]
            │       │   │       ├── <40> Var [b]
            │       │   │       ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <51>  [!=]
            │       │   │       ├── <48> Var [c]
            │       │   │       ╰── Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <61>  [!=]
            │       │   │       ├── <56> Var [d]
            │       │   │       ╰── <60> Unary [-]
            │       │   │           ╰── Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <71>  [!=]
            │       │   │       ├── <66> Var [e]
            │       │   │       ╰── <70> Unary [-]
            │       │   │           ╰── Constant Long [101]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <81>  [!=]
            │       │   │       ├── <76> Var [f]
            │       │   │       ╰── <80> Unary [-]
            │       │   │           ╰── Constant Int [123]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <91>  [!=]
            │       │   │       ├── <86> Var [g]
            │       │   │       ╰── <90> Unary [-]
            │       │   │           ╰── Constant Long [10]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [7]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <99>  [!=]
            │       │   │       ├── <96> Var [h]
            │       │   │       ╰── Constant Int [1234]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [8]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <116> Unary [-]
                    │           ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [4294967298]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <130> Unary [-]
                    │           ╰── Constant Long [4294967296]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [21474836475]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── e
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <144> Unary [-]
                    │           ╰── Constant Int [101]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── f
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <152> Unary [-]
                    │           ╰── Constant Int [123]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── g
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <160> Unary [-]
                    │           ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── h
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <168> Unary [-]
                    │           ╰── Constant Long [9223372036854774574]
                    ╰── Return
                        ╰── <188> FunctionCall [foo]
                            ├── <173> Var [a]
                            ├── <175> Var [b]
                            ├── <177> Var [c]
                            ├── <179> Var [d]
                            ├── <181> Var [e]
                            ├── <183> Var [f]
                            ├── <185> Var [g]
                            ╰── <187> Var [h]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_implicit_casts_convert_static_initializer() {
    let src = r#"
        int i = 8589934592l;
        long j = 123456;
        int main(void) {
            if (i != 0) {
                return 1;
            }
            if (j != 123456l) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Long [8589934592]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── j
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Int [123456]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <21>  [!=]
                    │   │       ├── <18> Var [i]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <31>  [!=]
                    │   │       ├── <28> Var [j]
                    │   │       ╰── Constant Long [123456]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_implicit_casts_long_constants() {
    let src = r#"
        int main(void) {
            if (2147483647l + 2147483647l < 0l) {
                return 1;
            }
            if (19327352832 < 100l) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <11>  [<]
                    │   │       ├── <8>  [+]
                    │   │       │   ├── Constant Long [2147483647]
                    │   │       │   ╰── Constant Long [2147483647]
                    │   │       ╰── Constant Long [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <20>  [<]
                    │   │       ├── Constant Long [19327352832]
                    │   │       ╰── Constant Long [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_long_args() {
    let src = r#"
        int test_sum(int a, int b, int c, long d, int e, long f, int g, int h, long i) {
            if (d + f < 100l) {
                return 1;
            }
            if (i < 100l)
                return 2;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [test_sum]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Long
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── e
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── f
                │   │   ╰── Type
                │   │       ╰── Long
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── g
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── h
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── i
                │       ╰── Type
                │           ╰── Long
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <40>  [<]
                    │   │       ├── <37>  [+]
                    │   │       │   ├── <33> Var [d]
                    │   │       │   ╰── <36> Var [f]
                    │   │       ╰── Constant Long [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <50>  [<]
                    │   │       ├── <47> Var [i]
                    │   │       ╰── Constant Long [100]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_long_args_client() {
    let src = r#"
        int test_sum(int a, int b, int c, long d, int e, long f, int g, int h, long i);
        int main(void) {
            return test_sum(0, 0, 0, 34359738368l, 0, 34359738368l, 0, 0, 34359738368l);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [test_sum]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i
            │           ╰── Type
            │               ╰── Long
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <47> FunctionCall [test_sum]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ├── Constant Long [34359738368]
                            ├── Constant Int [0]
                            ├── Constant Long [34359738368]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ╰── Constant Long [34359738368]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_long_global_var() {
    let src = r#"
        long int l = 8589934592l;
        long return_l(void) {
            return l;
        }
        int return_l_as_int(void) {
            return l;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Long [8589934592]
            ├── Function [return_l]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12> Var [l]
            ╰── Function [return_l_as_int]
                ╰── Body
                    ╰── Return
                        ╰── <21> Var [l]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_long_global_var_client() {
    let src = r#"
        extern long int l;
        long return_l(void);
        int return_l_as_int(void);
        int main(void) {
            if (return_l() != 8589934592l)
                return 1;
            if (return_l_as_int() != 0)
                return 2;
            l = l - 10l;
            if (return_l() != 8589934582l)
                return 3;
            if (return_l_as_int() != -10)
                return 4;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Extern
            ├── Function [return_l]
            ├── Function [return_l_as_int]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <24>  [!=]
                    │   │       ├── <21> FunctionCall [return_l]
                    │   │       ╰── Constant Long [8589934592]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <32>  [!=]
                    │   │       ├── <29> FunctionCall [return_l_as_int]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ├── <44> Assign [=]
                    │   ├── <37> Var [l]
                    │   ╰── <43>  [-]
                    │       ├── <40> Var [l]
                    │       ╰── Constant Long [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <50>  [!=]
                    │   │       ├── <47> FunctionCall [return_l]
                    │   │       ╰── Constant Long [8589934582]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <60>  [!=]
                    │   │       ├── <55> FunctionCall [return_l_as_int]
                    │   │       ╰── <59> Unary [-]
                    │   │           ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_maintain_stack_alignment() {
    let src = r#"
        long add_variables(long x, long y, int z){
            return x + y + z;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [add_variables]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── x
                │   │   ╰── Type
                │   │       ╰── Long
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── y
                │   │   ╰── Type
                │   │       ╰── Long
                │   ╰── Param
                │       ├── Name
                │       │   ╰── z
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ╰── Return
                        ╰── <23>  [+]
                            ├── <19>  [+]
                            │   ├── <15> Var [x]
                            │   ╰── <18> Var [y]
                            ╰── <22> Var [z]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_maintain_stack_alignment_client() {
    let src = r#"
        long add_variables(long x, long y, int z);
        int main(void) {
            long x = 3;
            long y = 4;
            int z = 5;
            return add_variables(x, y, z);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [add_variables]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ╰── Type
            │       │       ╰── Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── z
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── z
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [5]
                    ╰── Return
                        ╰── <44> FunctionCall [add_variables]
                            ├── <39> Var [x]
                            ├── <41> Var [y]
                            ╰── <43> Var [z]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_return_long() {
    let src = r#"
        long add(int a, int b) {
            return (long) a + (long) b;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [add]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── b
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ╰── Return
                        ╰── <22>  [+]
                            ├── <15> Cast
                            │   ├── Target
                            │   │   ╰── Long
                            │   ╰── Expression
                            │       ╰── <14> Var [a]
                            ╰── <21> Cast
                                ├── Target
                                │   ╰── Long
                                ╰── Expression
                                    ╰── <20> Var [b]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_libraries_return_long_client() {
    let src = r#"
        long add(int a, int b);
        int main(void) {
            long a = add(2147483645, 2147483645);
            if (a != 4294967290l) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [add]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── b
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <22> FunctionCall [add]
                    │           ├── Constant Int [2147483645]
                    │           ╰── Constant Int [2147483645]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <29>  [!=]
                    │   │       ├── <26> Var [a]
                    │   │       ╰── Constant Long [4294967290]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_arithmetic_ops() {
    let src = r#"
        long a;
        long b;
        int addition(void) {
            return (a + b == 4294967295l);
        }
        int subtraction(void) {
            return (a - b == -4294967380l);
        }
        int multiplication(void) {
            return (a * 4l == 17179869160l);
        }
        int division(void) {
            b = a / 128l;
            return (b == 33554431l);
        }
        int remaind(void) {
            b = -a % 4294967290l;
            return (b == -5l);
        }
        int complement(void) {
            return (~a == -9223372036854775807l);
        }
        int main(void) {
            a = 4294967290l;
            b = 5l;
            if (!addition()) {
                return 1;
            }
            a = -4294967290l;
            b = 90l;
            if (!subtraction()) {
                return 2;
            }
            a = 4294967290l;
            if (!multiplication()) {
                return 3;
            }
            a = 4294967290l;
            if (!division()) {
                return 4;
            }
            a = 8589934585l;
            if (!remaind()) {
                return 5;
            }
            a = 9223372036854775806l;
            if (!complement()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── a
            │   ╰── Type
            │       ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── b
            │   ╰── Type
            │       ╰── Long
            ├── Function [addition]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <22>  [==]
            │               ├── <18>  [+]
            │               │   ├── <14> Var [a]
            │               │   ╰── <17> Var [b]
            │               ╰── Constant Long [4294967295]
            ├── Function [subtraction]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <41>  [==]
            │               ├── <35>  [-]
            │               │   ├── <31> Var [a]
            │               │   ╰── <34> Var [b]
            │               ╰── <39> Unary [-]
            │                   ╰── Constant Long [4294967380]
            ├── Function [multiplication]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <57>  [==]
            │               ├── <53>  [*]
            │               │   ├── <50> Var [a]
            │               │   ╰── Constant Long [4]
            │               ╰── Constant Long [17179869160]
            ├── Function [division]
            │   ╰── Body
            │       ├── <73> Assign [=]
            │       │   ├── <66> Var [b]
            │       │   ╰── <72>  [/]
            │       │       ├── <69> Var [a]
            │       │       ╰── Constant Long [128]
            │       ╰── Return
            │           ╰── <80>  [==]
            │               ├── <76> Var [b]
            │               ╰── Constant Long [33554431]
            ├── Function [remaind]
            │   ╰── Body
            │       ├── <98> Assign [=]
            │       │   ├── <89> Var [b]
            │       │   ╰── <97>  [%]
            │       │       ├── <94> Unary [-]
            │       │       │   ╰── <93> Var [a]
            │       │       ╰── Constant Long [4294967290]
            │       ╰── Return
            │           ╰── <107>  [==]
            │               ├── <101> Var [b]
            │               ╰── <105> Unary [-]
            │                   ╰── Constant Long [5]
            ├── Function [complement]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <124>  [==]
            │               ├── <118> Unary [~]
            │               │   ╰── <117> Var [a]
            │               ╰── <122> Unary [-]
            │                   ╰── Constant Long [9223372036854775807]
            ╰── Function [main]
                ╰── Body
                    ├── <136> Assign [=]
                    │   ├── <133> Var [a]
                    │   ╰── Constant Long [4294967290]
                    ├── <142> Assign [=]
                    │   ├── <139> Var [b]
                    │   ╰── Constant Long [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <147> Unary [!]
                    │   │       ╰── <146> FunctionCall [addition]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <159> Assign [=]
                    │   ├── <154> Var [a]
                    │   ╰── <158> Unary [-]
                    │       ╰── Constant Long [4294967290]
                    ├── <165> Assign [=]
                    │   ├── <162> Var [b]
                    │   ╰── Constant Long [90]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <170> Unary [!]
                    │   │       ╰── <169> FunctionCall [subtraction]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── <180> Assign [=]
                    │   ├── <177> Var [a]
                    │   ╰── Constant Long [4294967290]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <185> Unary [!]
                    │   │       ╰── <184> FunctionCall [multiplication]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <195> Assign [=]
                    │   ├── <192> Var [a]
                    │   ╰── Constant Long [4294967290]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <200> Unary [!]
                    │   │       ╰── <199> FunctionCall [division]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <210> Assign [=]
                    │   ├── <207> Var [a]
                    │   ╰── Constant Long [8589934585]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <215> Unary [!]
                    │   │       ╰── <214> FunctionCall [remaind]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── <225> Assign [=]
                    │   ├── <222> Var [a]
                    │   ╰── Constant Long [9223372036854775806]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <230> Unary [!]
                    │   │       ╰── <229> FunctionCall [complement]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_assign() {
    let src = r#"
        int main(void) {
            long a = 4294967290l;
            long b = 0l;
            b = a;
            return (b == 4294967290l);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [4294967290]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [0]
                    ├── <22> Assign [=]
                    │   ├── <18> Var [b]
                    │   ╰── <21> Var [a]
                    ╰── Return
                        ╰── <29>  [==]
                            ├── <25> Var [b]
                            ╰── Constant Long [4294967290]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_comparisons() {
    let src = r#"
        long l;
        long l2;
        int compare_constants(void) {
            return 8589934593l > 255l;
        }
        int compare_constants_2(void) {
            return 255l < 8589934593l;
        }
        int l_geq_2_60(void) {
            return (l >= 1152921504606846976l);
        }
        int uint_max_leq_l(void) {
            return (4294967295l <= l);
        }
        int l_eq_l2(void) {
            return (l == l2);
        }
        int main(void) {
            if (!compare_constants()) {
                return 1;
            }
            if (!compare_constants_2()) {
                return 2;
            }
            l = -9223372036854775807l;
            if (l_geq_2_60()) {
                return 3;
            }
            if (uint_max_leq_l()) {
                return 4;
            }
            l = 1152921504606846976l;
            if (!l_geq_2_60()) {
                return 5;
            }
            if (!uint_max_leq_l()) {
                return 6;
            }
            l2 = l;
            if (!l_eq_l2()) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ╰── Type
            │       ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l2
            │   ╰── Type
            │       ╰── Long
            ├── Function [compare_constants]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <16>  [>]
            │               ├── Constant Long [8589934593]
            │               ╰── Constant Long [255]
            ├── Function [compare_constants_2]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <27>  [<]
            │               ├── Constant Long [255]
            │               ╰── Constant Long [8589934593]
            ├── Function [l_geq_2_60]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <40>  [>=]
            │               ├── <36> Var [l]
            │               ╰── Constant Long [1152921504606846976]
            ├── Function [uint_max_leq_l]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <53>  [<=]
            │               ├── Constant Long [4294967295]
            │               ╰── <51> Var [l]
            ├── Function [l_eq_l2]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <67>  [==]
            │               ├── <62> Var [l]
            │               ╰── <65> Var [l2]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <78> Unary [!]
                    │   │       ╰── <77> FunctionCall [compare_constants]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <87> Unary [!]
                    │   │       ╰── <86> FunctionCall [compare_constants_2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── <99> Assign [=]
                    │   ├── <94> Var [l]
                    │   ╰── <98> Unary [-]
                    │       ╰── Constant Long [9223372036854775807]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <102> FunctionCall [l_geq_2_60]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <109> FunctionCall [uint_max_leq_l]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <119> Assign [=]
                    │   ├── <116> Var [l]
                    │   ╰── Constant Long [1152921504606846976]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <124> Unary [!]
                    │   │       ╰── <123> FunctionCall [l_geq_2_60]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <133> Unary [!]
                    │   │       ╰── <132> FunctionCall [uint_max_leq_l]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── <144> Assign [=]
                    │   ├── <140> Var [l2]
                    │   ╰── <143> Var [l]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <149> Unary [!]
                    │   │       ╰── <148> FunctionCall [l_eq_l2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_large_constants() {
    let src = r#"
        long x = 5l;
        int add_large(void) {
            x = x + 4294967290l;
            return (x == 4294967295l);
        }
        int subtract_large(void) {
            x = x - 4294967290l;
            return (x == 5l);
        }
        int multiply_by_large(void) {
            x = x * 4294967290l;
            return (x == 21474836450l);
        }
        int main(void) {
            if (!add_large()) {
                return 1;
            }
            if (!subtract_large()) {
                return 2;
            }
            if (!multiply_by_large()) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Long [5]
            ├── Function [add_large]
            │   ╰── Body
            │       ├── <19> Assign [=]
            │       │   ├── <12> Var [x]
            │       │   ╰── <18>  [+]
            │       │       ├── <15> Var [x]
            │       │       ╰── Constant Long [4294967290]
            │       ╰── Return
            │           ╰── <26>  [==]
            │               ├── <22> Var [x]
            │               ╰── Constant Long [4294967295]
            ├── Function [subtract_large]
            │   ╰── Body
            │       ├── <42> Assign [=]
            │       │   ├── <35> Var [x]
            │       │   ╰── <41>  [-]
            │       │       ├── <38> Var [x]
            │       │       ╰── Constant Long [4294967290]
            │       ╰── Return
            │           ╰── <49>  [==]
            │               ├── <45> Var [x]
            │               ╰── Constant Long [5]
            ├── Function [multiply_by_large]
            │   ╰── Body
            │       ├── <65> Assign [=]
            │       │   ├── <58> Var [x]
            │       │   ╰── <64>  [*]
            │       │       ├── <61> Var [x]
            │       │       ╰── Constant Long [4294967290]
            │       ╰── Return
            │           ╰── <72>  [==]
            │               ├── <68> Var [x]
            │               ╰── Constant Long [21474836450]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <83> Unary [!]
                    │   │       ╰── <82> FunctionCall [add_large]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <92> Unary [!]
                    │   │       ╰── <91> FunctionCall [subtract_large]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <101> Unary [!]
                    │   │       ╰── <100> FunctionCall [multiply_by_large]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_logical() {
    let src = r#"
        int not(long l) {
            return !l;
        }
        int if_cond(long l) {
            if (l) {
                return 1;
            }
            return 0;
        }
        int and(long l1, int l2) {
            return l1 && l2;
        }
        int or(int l1, long l2) {
            return l1 || l2;
        }
        int main(void) {
            long l = 1152921504606846976l;
            long zero = 0l;
            if (not(l)) {
                return 1;
            }
            if (!not(zero)) {
                return 2;
            }
            if(!if_cond(l)) {
                return 3;
            }
            if(if_cond(zero)) {
                return 4;
            }
            if (and(zero, 1)) {
                return 5;
            }
            if (!or(1, l)) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [not]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── l
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <11> Unary [!]
            │               ╰── <10> Var [l]
            ├── Function [if_cond]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── l
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <23> Var [l]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [and]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l1
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── l2
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <48>  [&&]
            │               ├── <44> Var [l1]
            │               ╰── <47> Var [l2]
            ├── Function [or]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l1
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── l2
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <67>  [||]
            │               ├── <63> Var [l1]
            │               ╰── <66> Var [l2]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [1152921504606846976]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── zero
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <90> FunctionCall [not]
                    │   │       ╰── <89> Var [l]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <101> Unary [!]
                    │   │       ╰── <100> FunctionCall [not]
                    │   │           ╰── <99> Var [zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <112> Unary [!]
                    │   │       ╰── <111> FunctionCall [if_cond]
                    │   │           ╰── <110> Var [l]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <121> FunctionCall [if_cond]
                    │   │       ╰── <120> Var [zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <131> FunctionCall [and]
                    │   │       ├── <129> Var [zero]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <143> Unary [!]
                    │   │       ╰── <142> FunctionCall [or]
                    │   │           ├── Constant Int [1]
                    │   │           ╰── <141> Var [l]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_long_and_int_locals() {
    let src = r#"
        int main(void) {
            long a = 8589934592l;
            int b = -1;
            long c = -8589934592l;
            int d = 10;
            if (a != 8589934592l) {
                return 1;
            }
            if (b != -1){
                return 2;
            }
            if (c != -8589934592l) {
                return 3;
            }
            if (d != 10) {
                return 4;
            }
            a = -a;
            b = b - 1;
            c = c + 8589934594l;
            d = d + 10;
            if (a != -8589934592l) {
                return 5;
            }
            if (b != -2) {
                return 6;
            }
            if (c != 2) {
                return 7;
            }
            if (d != 20) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [8589934592]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <16> Unary [-]
                    │           ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <24> Unary [-]
                    │           ╰── Constant Long [8589934592]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37>  [!=]
                    │   │       ├── <34> Var [a]
                    │   │       ╰── Constant Long [8589934592]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <49>  [!=]
                    │   │       ├── <44> Var [b]
                    │   │       ╰── <48> Unary [-]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <61>  [!=]
                    │   │       ├── <56> Var [c]
                    │   │       ╰── <60> Unary [-]
                    │   │           ╰── Constant Long [8589934592]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <71>  [!=]
                    │   │       ├── <68> Var [d]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <84> Assign [=]
                    │   ├── <78> Var [a]
                    │   ╰── <83> Unary [-]
                    │       ╰── <82> Var [a]
                    ├── <94> Assign [=]
                    │   ├── <87> Var [b]
                    │   ╰── <93>  [-]
                    │       ├── <90> Var [b]
                    │       ╰── Constant Int [1]
                    ├── <104> Assign [=]
                    │   ├── <97> Var [c]
                    │   ╰── <103>  [+]
                    │       ├── <100> Var [c]
                    │       ╰── Constant Long [8589934594]
                    ├── <114> Assign [=]
                    │   ├── <107> Var [d]
                    │   ╰── <113>  [+]
                    │       ├── <110> Var [d]
                    │       ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <122>  [!=]
                    │   │       ├── <117> Var [a]
                    │   │       ╰── <121> Unary [-]
                    │   │           ╰── Constant Long [8589934592]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <134>  [!=]
                    │   │       ├── <129> Var [b]
                    │   │       ╰── <133> Unary [-]
                    │   │           ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <144>  [!=]
                    │   │       ├── <141> Var [c]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <154>  [!=]
                    │   │       ├── <151> Var [d]
                    │   │       ╰── Constant Int [20]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_long_args() {
    let src = r#"
        int test_sum(long a, long b, int c, int d, int e, int f, int g, int h, long i) {
            if (a + b < 100l) {
                return 1;
            }
            if (i < 100l)
                return 2;
            return 0;
        }
        int main(void) {
            return test_sum(34359738368l, 34359738368l, 0, 0, 0, 0, 0, 0, 34359738368l);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [test_sum]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── h
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <40>  [<]
            │       │   │       ├── <37>  [+]
            │       │   │       │   ├── <33> Var [a]
            │       │   │       │   ╰── <36> Var [b]
            │       │   │       ╰── Constant Long [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <50>  [<]
            │       │   │       ├── <47> Var [i]
            │       │   │       ╰── Constant Long [100]
            │       │   ╰── Then
            │       │       ╰── Return
            │       │           ╰── Constant Int [2]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <72> FunctionCall [test_sum]
                            ├── Constant Long [34359738368]
                            ├── Constant Long [34359738368]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ├── Constant Int [0]
                            ╰── Constant Long [34359738368]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_multi_op() {
    let src = r#"
        int target(long a) {
            long b = a * 5l - 10l;
            if (b == 21474836440l) {
                return 1;
            }
            return 0;
        }
        int main(void) {
            return target(4294967290l);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [target]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── a
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <18>  [-]
            │       │           ├── <15>  [*]
            │       │           │   ├── <12> Var [a]
            │       │           │   ╰── Constant Long [5]
            │       │           ╰── Constant Long [10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <25>  [==]
            │       │   │       ├── <22> Var [b]
            │       │   │       ╰── Constant Long [21474836440]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <41> FunctionCall [target]
                            ╰── Constant Long [4294967290]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_return_long() {
    let src = r#"
        long add(int a, int b) {
            return (long) a + (long) b;
        }
        int main(void) {
            long a = add(2147483645, 2147483645);
            if (a == 4294967290l) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [add]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <22>  [+]
            │               ├── <15> Cast
            │               │   ├── Target
            │               │   │   ╰── Long
            │               │   ╰── Expression
            │               │       ╰── <14> Var [a]
            │               ╰── <21> Cast
            │                   ├── Target
            │                   │   ╰── Long
            │                   ╰── Expression
            │                       ╰── <20> Var [b]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <36> FunctionCall [add]
                    │           ├── Constant Int [2147483645]
                    │           ╰── Constant Int [2147483645]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <43>  [==]
                    │   │       ├── <40> Var [a]
                    │   │       ╰── Constant Long [4294967290]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_rewrite_large_multiply_regression() {
    let src = r#"
        int check_12_ints(int start, int a, int b, int c, int d, int e, int f, int g,
                          int h, int i, int j, int k, int l);
        long glob = 5l;
        int main(void) {
            long should_spill = glob * 4294967307l;
            int one = glob - 4;
            int two = one + one;
            int three = 2 + one;
            int four = two * two;
            int five = 6 - one;
            int six = two * three;
            int seven = one + 6;
            int eight = two * 4;
            int nine = three * three;
            int ten = four + six;
            int eleven = 16 - five;
            int twelve = six + six;
            check_12_ints(one, two, three, four, five, six, seven, eight, nine, ten,
                          eleven, twelve, 1);
            int thirteen = glob + 8;
            int fourteen = thirteen + 1;
            int fifteen = 28 - thirteen;
            int sixteen = fourteen + 2;
            int seventeen = 4 + thirteen;
            int eighteen = 32 - fourteen;
            int nineteen = 35 - sixteen;
            int twenty = fifteen + 5;
            int twenty_one = thirteen * 2 - 5;
            int twenty_two = fifteen + 7;
            int twenty_three = 6 + seventeen;
            int twenty_four = thirteen + 11;
            check_12_ints(thirteen, fourteen, fifteen, sixteen, seventeen, eighteen,
                          nineteen, twenty, twenty_one, twenty_two, twenty_three,
                          twenty_four, 13);
            if (should_spill != 21474836535l) {
                return -1;
            }
            return 0;
        }
        int check_12_ints(int a, int b, int c, int d, int e, int f, int g, int h, int i,
                          int j, int k, int l, int start) {
            int expected = 0;
            expected = start + 0;
            if (a != expected) {
                return expected;
            }
            expected = start + 1;
            if (b != expected) {
                return expected;
            }
            expected = start + 2;
            if (c != expected) {
                return expected;
            }
            expected = start + 3;
            if (d != expected) {
                return expected;
            }
            expected = start + 4;
            if (e != expected) {
                return expected;
            }
            expected = start + 5;
            if (f != expected) {
                return expected;
            }
            expected = start + 6;
            if (g != expected) {
                return expected;
            }
            expected = start + 7;
            if (h != expected) {
                return expected;
            }
            expected = start + 8;
            if (i != expected) {
                return expected;
            }
            expected = start + 9;
            if (j != expected) {
                return expected;
            }
            expected = start + 10;
            if (k != expected) {
                return expected;
            }
            expected = start + 11;
            if (l != expected) {
                return expected;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [check_12_ints]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── start
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── k
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── l
            │           ╰── Type
            │               ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── glob
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Long [5]
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── should_spill
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <62>  [*]
            │       │           ├── <59> Var [glob]
            │       │           ╰── Constant Long [4294967307]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── one
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <72>  [-]
            │       │           ├── <69> Var [glob]
            │       │           ╰── Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <83>  [+]
            │       │           ├── <79> Var [one]
            │       │           ╰── <82> Var [one]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── three
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <93>  [+]
            │       │           ├── Constant Int [2]
            │       │           ╰── <92> Var [one]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── four
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <104>  [*]
            │       │           ├── <100> Var [two]
            │       │           ╰── <103> Var [two]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── five
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <114>  [-]
            │       │           ├── Constant Int [6]
            │       │           ╰── <113> Var [one]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── six
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <125>  [*]
            │       │           ├── <121> Var [two]
            │       │           ╰── <124> Var [three]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── seven
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <135>  [+]
            │       │           ├── <132> Var [one]
            │       │           ╰── Constant Int [6]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <145>  [*]
            │       │           ├── <142> Var [two]
            │       │           ╰── Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── nine
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <156>  [*]
            │       │           ├── <152> Var [three]
            │       │           ╰── <155> Var [three]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ten
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <167>  [+]
            │       │           ├── <163> Var [four]
            │       │           ╰── <166> Var [six]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eleven
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <177>  [-]
            │       │           ├── Constant Int [16]
            │       │           ╰── <176> Var [five]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twelve
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <188>  [+]
            │       │           ├── <184> Var [six]
            │       │           ╰── <187> Var [six]
            │       ├── <217> FunctionCall [check_12_ints]
            │       │   ├── <193> Var [one]
            │       │   ├── <195> Var [two]
            │       │   ├── <197> Var [three]
            │       │   ├── <199> Var [four]
            │       │   ├── <201> Var [five]
            │       │   ├── <203> Var [six]
            │       │   ├── <205> Var [seven]
            │       │   ├── <207> Var [eight]
            │       │   ├── <209> Var [nine]
            │       │   ├── <211> Var [ten]
            │       │   ├── <213> Var [eleven]
            │       │   ├── <215> Var [twelve]
            │       │   ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── thirteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <226>  [+]
            │       │           ├── <223> Var [glob]
            │       │           ╰── Constant Int [8]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── fourteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <236>  [+]
            │       │           ├── <233> Var [thirteen]
            │       │           ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── fifteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <246>  [-]
            │       │           ├── Constant Int [28]
            │       │           ╰── <245> Var [thirteen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── sixteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <256>  [+]
            │       │           ├── <253> Var [fourteen]
            │       │           ╰── Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── seventeen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <266>  [+]
            │       │           ├── Constant Int [4]
            │       │           ╰── <265> Var [thirteen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eighteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <276>  [-]
            │       │           ├── Constant Int [32]
            │       │           ╰── <275> Var [fourteen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── nineteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <286>  [-]
            │       │           ├── Constant Int [35]
            │       │           ╰── <285> Var [sixteen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <296>  [+]
            │       │           ├── <293> Var [fifteen]
            │       │           ╰── Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty_one
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <309>  [-]
            │       │           ├── <306>  [*]
            │       │           │   ├── <303> Var [thirteen]
            │       │           │   ╰── Constant Int [2]
            │       │           ╰── Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty_two
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <319>  [+]
            │       │           ├── <316> Var [fifteen]
            │       │           ╰── Constant Int [7]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty_three
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <329>  [+]
            │       │           ├── Constant Int [6]
            │       │           ╰── <328> Var [seventeen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty_four
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <339>  [+]
            │       │           ├── <336> Var [thirteen]
            │       │           ╰── Constant Int [11]
            │       ├── <368> FunctionCall [check_12_ints]
            │       │   ├── <344> Var [thirteen]
            │       │   ├── <346> Var [fourteen]
            │       │   ├── <348> Var [fifteen]
            │       │   ├── <350> Var [sixteen]
            │       │   ├── <352> Var [seventeen]
            │       │   ├── <354> Var [eighteen]
            │       │   ├── <356> Var [nineteen]
            │       │   ├── <358> Var [twenty]
            │       │   ├── <360> Var [twenty_one]
            │       │   ├── <362> Var [twenty_two]
            │       │   ├── <364> Var [twenty_three]
            │       │   ├── <366> Var [twenty_four]
            │       │   ╰── Constant Int [13]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <374>  [!=]
            │       │   │       ├── <371> Var [should_spill]
            │       │   │       ╰── Constant Long [21474836535]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <377> Unary [-]
            │       │                   ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [check_12_ints]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── e
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── f
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── g
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── h
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── j
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── k
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── l
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── start
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── expected
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <443> Assign [=]
                    │   ├── <436> Var [expected]
                    │   ╰── <442>  [+]
                    │       ├── <439> Var [start]
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <450>  [!=]
                    │   │       ├── <446> Var [a]
                    │   │       ╰── <449> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <452> Var [expected]
                    ├── <465> Assign [=]
                    │   ├── <458> Var [expected]
                    │   ╰── <464>  [+]
                    │       ├── <461> Var [start]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <472>  [!=]
                    │   │       ├── <468> Var [b]
                    │   │       ╰── <471> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <474> Var [expected]
                    ├── <487> Assign [=]
                    │   ├── <480> Var [expected]
                    │   ╰── <486>  [+]
                    │       ├── <483> Var [start]
                    │       ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <494>  [!=]
                    │   │       ├── <490> Var [c]
                    │   │       ╰── <493> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <496> Var [expected]
                    ├── <509> Assign [=]
                    │   ├── <502> Var [expected]
                    │   ╰── <508>  [+]
                    │       ├── <505> Var [start]
                    │       ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <516>  [!=]
                    │   │       ├── <512> Var [d]
                    │   │       ╰── <515> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <518> Var [expected]
                    ├── <531> Assign [=]
                    │   ├── <524> Var [expected]
                    │   ╰── <530>  [+]
                    │       ├── <527> Var [start]
                    │       ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <538>  [!=]
                    │   │       ├── <534> Var [e]
                    │   │       ╰── <537> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <540> Var [expected]
                    ├── <553> Assign [=]
                    │   ├── <546> Var [expected]
                    │   ╰── <552>  [+]
                    │       ├── <549> Var [start]
                    │       ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <560>  [!=]
                    │   │       ├── <556> Var [f]
                    │   │       ╰── <559> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <562> Var [expected]
                    ├── <575> Assign [=]
                    │   ├── <568> Var [expected]
                    │   ╰── <574>  [+]
                    │       ├── <571> Var [start]
                    │       ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <582>  [!=]
                    │   │       ├── <578> Var [g]
                    │   │       ╰── <581> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <584> Var [expected]
                    ├── <597> Assign [=]
                    │   ├── <590> Var [expected]
                    │   ╰── <596>  [+]
                    │       ├── <593> Var [start]
                    │       ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <604>  [!=]
                    │   │       ├── <600> Var [h]
                    │   │       ╰── <603> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <606> Var [expected]
                    ├── <619> Assign [=]
                    │   ├── <612> Var [expected]
                    │   ╰── <618>  [+]
                    │       ├── <615> Var [start]
                    │       ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <626>  [!=]
                    │   │       ├── <622> Var [i]
                    │   │       ╰── <625> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <628> Var [expected]
                    ├── <641> Assign [=]
                    │   ├── <634> Var [expected]
                    │   ╰── <640>  [+]
                    │       ├── <637> Var [start]
                    │       ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <648>  [!=]
                    │   │       ├── <644> Var [j]
                    │   │       ╰── <647> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <650> Var [expected]
                    ├── <663> Assign [=]
                    │   ├── <656> Var [expected]
                    │   ╰── <662>  [+]
                    │       ├── <659> Var [start]
                    │       ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <670>  [!=]
                    │   │       ├── <666> Var [k]
                    │   │       ╰── <669> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <672> Var [expected]
                    ├── <685> Assign [=]
                    │   ├── <678> Var [expected]
                    │   ╰── <684>  [+]
                    │       ├── <681> Var [start]
                    │       ╰── Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <692>  [!=]
                    │   │       ├── <688> Var [l]
                    │   │       ╰── <691> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <694> Var [expected]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_simple() {
    let src = r#"
        int main(void) {
            long l = 9223372036854775807l;
            return (l - 2l == 9223372036854775805l);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [9223372036854775807]
                    ╰── Return
                        ╰── <19>  [==]
                            ├── <15>  [-]
                            │   ├── <12> Var [l]
                            │   ╰── Constant Long [2]
                            ╰── Constant Long [9223372036854775805]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_static_long() {
    let src = r#"
        
        static long foo = 4294967290l;
        int main(void)
        {
            if (foo + 5l == 4294967295l)
            {
                foo = 1152921504606846988l;
                if (foo == 1152921504606846988l)
                    return 1;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── foo
            │   ├── Type
            │   │   ╰── Long
            │   ├── Initializer
            │   │   ╰── Constant Long [4294967290]
            │   ╰── Static
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <19>  [==]
                    │   │       ├── <16>  [+]
                    │   │       │   ├── <13> Var [foo]
                    │   │       │   ╰── Constant Long [5]
                    │   │       ╰── Constant Long [4294967295]
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── <24> Assign [=]
                    │           │   ├── <21> Var [foo]
                    │           │   ╰── Constant Long [1152921504606846988]
                    │           ╰── If
                    │               ├── Condition
                    │               │   ╰── <30>  [==]
                    │               │       ├── <27> Var [foo]
                    │               │       ╰── Constant Long [1152921504606846988]
                    │               ╰── Then
                    │                   ╰── Return
                    │                       ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_11_valid_long_expressions_type_specifiers() {
    let src = r#"
        static int long a;
        int static long a;
        long static a;
        int my_function(long a, long int b, int long c);
        int my_function(long int x, int long y, long z) {
            return x + y + z;
        }
        int main(void) {
            long x = 1l;
            long int y = 2l;
            int long z = 3l;
            extern long a;
            a = 4;
           int sum = 0;
            for (long i = 1099511627776l; i > 0; i = i / 2) {
                sum = sum + 1;
            }
            if (x != 1) {
                return 1;
            }
            if (y != 2) {
                return 2;
            }
            if (a != 4) {
                return 3;
            }
            if (my_function(x, y, z) != 6) {
                return 4;
            }
            if (sum != 41) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── a
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Static
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── a
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Static
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── a
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Static
            ├── Function [my_function]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── c
            │           ╰── Type
            │               ╰── Long
            ├── Function [my_function]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── x
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── y
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── z
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <52>  [+]
            │               ├── <48>  [+]
            │               │   ├── <44> Var [x]
            │               │   ╰── <47> Var [y]
            │               ╰── <51> Var [z]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── z
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Extern
                    ├── <87> Assign [=]
                    │   ├── <84> Var [a]
                    │   ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── sum
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Long
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Long [1099511627776]
                    │   ├── Condition
                    │   │   ╰── <106>  [>]
                    │   │       ├── <103> Var [i]
                    │   │       ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <115> Assign [=]
                    │   │       ├── <108> Var [i]
                    │   │       ╰── <114>  [/]
                    │   │           ├── <111> Var [i]
                    │   │           ╰── Constant Int [2]
                    │   ╰── Block
                    │       ╰── <124> Assign [=]
                    │           ├── <117> Var [sum]
                    │           ╰── <123>  [+]
                    │               ├── <120> Var [sum]
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <133>  [!=]
                    │   │       ├── <130> Var [x]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <143>  [!=]
                    │   │       ├── <140> Var [y]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <153>  [!=]
                    │   │       ├── <150> Var [a]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <169>  [!=]
                    │   │       ├── <166> FunctionCall [my_function]
                    │   │       │   ├── <161> Var [x]
                    │   │       │   ├── <163> Var [y]
                    │   │       │   ╰── <165> Var [z]
                    │   │       ╰── Constant Int [6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <179>  [!=]
                    │   │       ├── <176> Var [sum]
                    │   │       ╰── Constant Int [41]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_invalid_labels_extra_credit_switch_duplicate_cases() {
    let src = r#"
        int main(void) {
            unsigned int ui = 10u;
            switch(ui) {
                case 4294967295u:
                    return 0;
                case 1099511627775l:
                    return 1;
                default: return 2;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ui
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── Constant UInt [10]
                    ╰── Switch
                        ├── Expression
                        │   ╰── <12> Var [ui]
                        ╰── Block
                            ├── Case [4294967295]
                            │   ╰── Return
                            │       ╰── Constant Int [0]
                            ├── Case [1099511627775]
                            │   ╰── Return
                            │       ╰── Constant Int [1]
                            ╰── Default
                                ╰── Return
                                    ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_invalid_parse_bad_specifiers() {
    assert_error(
        r#"
        int main(void) {
            int i = 0;
            return (signed unsigned) i;
                  //^^^^^^^^^^^^^^^ Invalid type specifier
        }
    "#,
    );
}

#[test]
fn test_chapter_12_invalid_parse_bad_specifiers_2() {
    assert_error(
        r#"
        int main(void) {
            unsigned long unsigned i = 0;
          //^^^^^^^^^^^^^^^^^^^^^^ Invalid type specifier
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_12_invalid_types_conflicting_signed_unsigned() {
    let src = r#"
        unsigned x;
        int x;
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ╰── Type
            │       ╰── Unsigned Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ╰── Type
            │       ╰── Int
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_invalid_types_conflicting_uint_ulong() {
    let src = r#"
        
        unsigned int foo(void);
        unsigned long foo(void) {
            return 0;
        }
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            ├── Function [foo]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_explicit_casts_chained_casts() {
    let src = r#"
        unsigned int ui = 4294967200u;
        int main(void) {
            if ((long) (signed) ui != -96l)
                return 1;
            if ((unsigned long) (signed) ui != 18446744073709551520ul)
                return 2;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ui
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant UInt [4294967200]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <23>  [!=]
                    │   │       ├── <18> Cast
                    │   │       │   ├── Target
                    │   │       │   │   ╰── Long
                    │   │       │   ╰── Expression
                    │   │       │       ╰── <17> Cast
                    │   │       │           ├── Target
                    │   │       │           │   ╰── Int
                    │   │       │           ╰── Expression
                    │   │       │               ╰── <16> Var [ui]
                    │   │       ╰── <22> Unary [-]
                    │   │           ╰── Constant Long [96]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37>  [!=]
                    │   │       ├── <34> Cast
                    │   │       │   ├── Target
                    │   │       │   │   ╰── Unsigned Long
                    │   │       │   ╰── Expression
                    │   │       │       ╰── <33> Cast
                    │   │       │           ├── Target
                    │   │       │           │   ╰── Int
                    │   │       │           ╰── Expression
                    │   │       │               ╰── <32> Var [ui]
                    │   │       ╰── Constant ULong [18446744073709551520]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_explicit_casts_extension() {
    let src = r#"
        int int_to_ulong(int i, unsigned long expected) {
            unsigned long result = (unsigned long) i;
            return result == expected;
        }
        int uint_to_long(unsigned int ui, long expected) {
            long result = (long) ui;
            return result == expected;
        }
        int uint_to_ulong(unsigned ui, unsigned long expected){
            return (unsigned long) ui == expected;
        }
        int main(void) {
            if (!int_to_ulong(10, 10ul)) {
                return 1;
            }
            if (!int_to_ulong(-10, 18446744073709551606ul)) {
                return 2;
            }
            if (!uint_to_long(4294967200u, 4294967200l)) {
                return 3;
            }
            if (!uint_to_ulong(4294967200u, 4294967200ul)) {
                return 4;
            }
            if ((unsigned long) 4294967200u != 4294967200ul) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [int_to_ulong]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Unsigned Long
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <18> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <17> Var [i]
            │       ╰── Return
            │           ╰── <26>  [==]
            │               ├── <22> Var [result]
            │               ╰── <25> Var [expected]
            ├── Function [uint_to_long]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ui
            │   │   │   ╰── Type
            │   │   │       ╰── Unsigned Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <47> Cast
            │       │           ├── Target
            │       │           │   ╰── Long
            │       │           ╰── Expression
            │       │               ╰── <46> Var [ui]
            │       ╰── Return
            │           ╰── <55>  [==]
            │               ├── <51> Var [result]
            │               ╰── <54> Var [expected]
            ├── Function [uint_to_ulong]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ui
            │   │   │   ╰── Type
            │   │   │       ╰── Unsigned Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <77>  [==]
            │               ├── <73> Cast
            │               │   ├── Target
            │               │   │   ╰── Unsigned Long
            │               │   ╰── Expression
            │               │       ╰── <72> Var [ui]
            │               ╰── <76> Var [expected]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <90> Unary [!]
                    │   │       ╰── <89> FunctionCall [int_to_ulong]
                    │   │           ├── Constant Int [10]
                    │   │           ╰── Constant ULong [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <103> Unary [!]
                    │   │       ╰── <102> FunctionCall [int_to_ulong]
                    │   │           ├── <100> Unary [-]
                    │   │           │   ╰── Constant Int [10]
                    │   │           ╰── Constant ULong [18446744073709551606]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <114> Unary [!]
                    │   │       ╰── <113> FunctionCall [uint_to_long]
                    │   │           ├── Constant UInt [4294967200]
                    │   │           ╰── Constant Long [4294967200]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <125> Unary [!]
                    │   │       ╰── <124> FunctionCall [uint_to_ulong]
                    │   │           ├── Constant UInt [4294967200]
                    │   │           ╰── Constant ULong [4294967200]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <137>  [!=]
                    │   │       ├── <134> Cast
                    │   │       │   ├── Target
                    │   │       │   │   ╰── Unsigned Long
                    │   │       │   ╰── Expression
                    │   │       │       ╰── Constant UInt [4294967200]
                    │   │       ╰── Constant ULong [4294967200]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_explicit_casts_rewrite_movz_regression() {
    let src = r#"
        int check_12_ints(int start, int a, int b, int c, int d, int e, int f, int g,
                          int h, int i, int j, int k, int l);
        unsigned glob = 5000u;
        int main(void) {
            long should_spill = (long)glob;
            int one = glob - 4999;
            int two = one + one;
            int three = 2 + one;
            int four = two * two;
            int five = 6 - one;
            int six = two * three;
            int seven = one + 6;
            int eight = two * 4;
            int nine = three * three;
            int ten = four + six;
            int eleven = 16 - five;
            int twelve = six + six;
            check_12_ints(one, two, three, four, five, six, seven, eight, nine, ten,
                          eleven, twelve, 1);
            int thirteen = glob - 4987u;
            int fourteen = thirteen + 1;
            int fifteen = 28 - thirteen;
            int sixteen = fourteen + 2;
            int seventeen = 4 + thirteen;
            int eighteen = 32 - fourteen;
            int nineteen = 35 - sixteen;
            int twenty = fifteen + 5;
            int twenty_one = thirteen * 2 - 5;
            int twenty_two = fifteen + 7;
            int twenty_three = 6 + seventeen;
            int twenty_four = thirteen + 11;
            check_12_ints(thirteen, fourteen, fifteen, sixteen, seventeen, eighteen,
                          nineteen, twenty, twenty_one, twenty_two, twenty_three,
                          twenty_four, 13);
            if (should_spill != 5000l) {
                return -1;
            }
            return 0;
        }
        int check_12_ints(int a, int b, int c, int d, int e, int f, int g, int h, int i,
                          int j, int k, int l, int start) {
            int expected = 0;
            expected = start + 0;
            if (a != expected) {
                return expected;
            }
            expected = start + 1;
            if (b != expected) {
                return expected;
            }
            expected = start + 2;
            if (c != expected) {
                return expected;
            }
            expected = start + 3;
            if (d != expected) {
                return expected;
            }
            expected = start + 4;
            if (e != expected) {
                return expected;
            }
            expected = start + 5;
            if (f != expected) {
                return expected;
            }
            expected = start + 6;
            if (g != expected) {
                return expected;
            }
            expected = start + 7;
            if (h != expected) {
                return expected;
            }
            expected = start + 8;
            if (i != expected) {
                return expected;
            }
            expected = start + 9;
            if (j != expected) {
                return expected;
            }
            expected = start + 10;
            if (k != expected) {
                return expected;
            }
            expected = start + 11;
            if (l != expected) {
                return expected;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [check_12_ints]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── start
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── k
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── l
            │           ╰── Type
            │               ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── glob
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant UInt [5000]
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── should_spill
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <62> Cast
            │       │           ├── Target
            │       │           │   ╰── Long
            │       │           ╰── Expression
            │       │               ╰── <61> Var [glob]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── one
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <72>  [-]
            │       │           ├── <69> Var [glob]
            │       │           ╰── Constant Int [4999]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <83>  [+]
            │       │           ├── <79> Var [one]
            │       │           ╰── <82> Var [one]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── three
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <93>  [+]
            │       │           ├── Constant Int [2]
            │       │           ╰── <92> Var [one]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── four
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <104>  [*]
            │       │           ├── <100> Var [two]
            │       │           ╰── <103> Var [two]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── five
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <114>  [-]
            │       │           ├── Constant Int [6]
            │       │           ╰── <113> Var [one]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── six
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <125>  [*]
            │       │           ├── <121> Var [two]
            │       │           ╰── <124> Var [three]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── seven
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <135>  [+]
            │       │           ├── <132> Var [one]
            │       │           ╰── Constant Int [6]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <145>  [*]
            │       │           ├── <142> Var [two]
            │       │           ╰── Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── nine
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <156>  [*]
            │       │           ├── <152> Var [three]
            │       │           ╰── <155> Var [three]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ten
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <167>  [+]
            │       │           ├── <163> Var [four]
            │       │           ╰── <166> Var [six]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eleven
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <177>  [-]
            │       │           ├── Constant Int [16]
            │       │           ╰── <176> Var [five]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twelve
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <188>  [+]
            │       │           ├── <184> Var [six]
            │       │           ╰── <187> Var [six]
            │       ├── <217> FunctionCall [check_12_ints]
            │       │   ├── <193> Var [one]
            │       │   ├── <195> Var [two]
            │       │   ├── <197> Var [three]
            │       │   ├── <199> Var [four]
            │       │   ├── <201> Var [five]
            │       │   ├── <203> Var [six]
            │       │   ├── <205> Var [seven]
            │       │   ├── <207> Var [eight]
            │       │   ├── <209> Var [nine]
            │       │   ├── <211> Var [ten]
            │       │   ├── <213> Var [eleven]
            │       │   ├── <215> Var [twelve]
            │       │   ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── thirteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <226>  [-]
            │       │           ├── <223> Var [glob]
            │       │           ╰── Constant UInt [4987]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── fourteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <236>  [+]
            │       │           ├── <233> Var [thirteen]
            │       │           ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── fifteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <246>  [-]
            │       │           ├── Constant Int [28]
            │       │           ╰── <245> Var [thirteen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── sixteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <256>  [+]
            │       │           ├── <253> Var [fourteen]
            │       │           ╰── Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── seventeen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <266>  [+]
            │       │           ├── Constant Int [4]
            │       │           ╰── <265> Var [thirteen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eighteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <276>  [-]
            │       │           ├── Constant Int [32]
            │       │           ╰── <275> Var [fourteen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── nineteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <286>  [-]
            │       │           ├── Constant Int [35]
            │       │           ╰── <285> Var [sixteen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <296>  [+]
            │       │           ├── <293> Var [fifteen]
            │       │           ╰── Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty_one
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <309>  [-]
            │       │           ├── <306>  [*]
            │       │           │   ├── <303> Var [thirteen]
            │       │           │   ╰── Constant Int [2]
            │       │           ╰── Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty_two
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <319>  [+]
            │       │           ├── <316> Var [fifteen]
            │       │           ╰── Constant Int [7]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty_three
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <329>  [+]
            │       │           ├── Constant Int [6]
            │       │           ╰── <328> Var [seventeen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty_four
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <339>  [+]
            │       │           ├── <336> Var [thirteen]
            │       │           ╰── Constant Int [11]
            │       ├── <368> FunctionCall [check_12_ints]
            │       │   ├── <344> Var [thirteen]
            │       │   ├── <346> Var [fourteen]
            │       │   ├── <348> Var [fifteen]
            │       │   ├── <350> Var [sixteen]
            │       │   ├── <352> Var [seventeen]
            │       │   ├── <354> Var [eighteen]
            │       │   ├── <356> Var [nineteen]
            │       │   ├── <358> Var [twenty]
            │       │   ├── <360> Var [twenty_one]
            │       │   ├── <362> Var [twenty_two]
            │       │   ├── <364> Var [twenty_three]
            │       │   ├── <366> Var [twenty_four]
            │       │   ╰── Constant Int [13]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <374>  [!=]
            │       │   │       ├── <371> Var [should_spill]
            │       │   │       ╰── Constant Long [5000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <377> Unary [-]
            │       │                   ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [check_12_ints]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── e
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── f
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── g
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── h
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── j
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── k
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── l
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── start
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── expected
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <443> Assign [=]
                    │   ├── <436> Var [expected]
                    │   ╰── <442>  [+]
                    │       ├── <439> Var [start]
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <450>  [!=]
                    │   │       ├── <446> Var [a]
                    │   │       ╰── <449> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <452> Var [expected]
                    ├── <465> Assign [=]
                    │   ├── <458> Var [expected]
                    │   ╰── <464>  [+]
                    │       ├── <461> Var [start]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <472>  [!=]
                    │   │       ├── <468> Var [b]
                    │   │       ╰── <471> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <474> Var [expected]
                    ├── <487> Assign [=]
                    │   ├── <480> Var [expected]
                    │   ╰── <486>  [+]
                    │       ├── <483> Var [start]
                    │       ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <494>  [!=]
                    │   │       ├── <490> Var [c]
                    │   │       ╰── <493> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <496> Var [expected]
                    ├── <509> Assign [=]
                    │   ├── <502> Var [expected]
                    │   ╰── <508>  [+]
                    │       ├── <505> Var [start]
                    │       ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <516>  [!=]
                    │   │       ├── <512> Var [d]
                    │   │       ╰── <515> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <518> Var [expected]
                    ├── <531> Assign [=]
                    │   ├── <524> Var [expected]
                    │   ╰── <530>  [+]
                    │       ├── <527> Var [start]
                    │       ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <538>  [!=]
                    │   │       ├── <534> Var [e]
                    │   │       ╰── <537> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <540> Var [expected]
                    ├── <553> Assign [=]
                    │   ├── <546> Var [expected]
                    │   ╰── <552>  [+]
                    │       ├── <549> Var [start]
                    │       ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <560>  [!=]
                    │   │       ├── <556> Var [f]
                    │   │       ╰── <559> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <562> Var [expected]
                    ├── <575> Assign [=]
                    │   ├── <568> Var [expected]
                    │   ╰── <574>  [+]
                    │       ├── <571> Var [start]
                    │       ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <582>  [!=]
                    │   │       ├── <578> Var [g]
                    │   │       ╰── <581> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <584> Var [expected]
                    ├── <597> Assign [=]
                    │   ├── <590> Var [expected]
                    │   ╰── <596>  [+]
                    │       ├── <593> Var [start]
                    │       ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <604>  [!=]
                    │   │       ├── <600> Var [h]
                    │   │       ╰── <603> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <606> Var [expected]
                    ├── <619> Assign [=]
                    │   ├── <612> Var [expected]
                    │   ╰── <618>  [+]
                    │       ├── <615> Var [start]
                    │       ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <626>  [!=]
                    │   │       ├── <622> Var [i]
                    │   │       ╰── <625> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <628> Var [expected]
                    ├── <641> Assign [=]
                    │   ├── <634> Var [expected]
                    │   ╰── <640>  [+]
                    │       ├── <637> Var [start]
                    │       ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <648>  [!=]
                    │   │       ├── <644> Var [j]
                    │   │       ╰── <647> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <650> Var [expected]
                    ├── <663> Assign [=]
                    │   ├── <656> Var [expected]
                    │   ╰── <662>  [+]
                    │       ├── <659> Var [start]
                    │       ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <670>  [!=]
                    │   │       ├── <666> Var [k]
                    │   │       ╰── <669> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <672> Var [expected]
                    ├── <685> Assign [=]
                    │   ├── <678> Var [expected]
                    │   ╰── <684>  [+]
                    │       ├── <681> Var [start]
                    │       ╰── Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <692>  [!=]
                    │   │       ├── <688> Var [l]
                    │   │       ╰── <691> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <694> Var [expected]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_explicit_casts_round_trip_casts() {
    let src = r#"
        unsigned long a = 8589934580ul;
        int main(void) {
            unsigned long b = (unsigned long) (unsigned int) a;
            if (b != 4294967284ul)
                return 1;
            b = (unsigned long) (signed int) a;
            if (b != 18446744073709551604ul)
                return 2;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── a
            │   ├── Type
            │   │   ╰── Unsigned Long
            │   ╰── Initializer
            │       ╰── Constant ULong [8589934580]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <21> Cast
                    │           ├── Target
                    │           │   ╰── Unsigned Long
                    │           ╰── Expression
                    │               ╰── <20> Cast
                    │                   ├── Target
                    │                   │   ╰── Unsigned Int
                    │                   ╰── Expression
                    │                       ╰── <19> Var [a]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <28>  [!=]
                    │   │       ├── <25> Var [b]
                    │   │       ╰── Constant ULong [4294967284]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── <43> Assign [=]
                    │   ├── <33> Var [b]
                    │   ╰── <42> Cast
                    │       ├── Target
                    │       │   ╰── Unsigned Long
                    │       ╰── Expression
                    │           ╰── <41> Cast
                    │               ├── Target
                    │               │   ╰── Int
                    │               ╰── Expression
                    │                   ╰── <40> Var [a]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <49>  [!=]
                    │   │       ├── <46> Var [b]
                    │   │       ╰── Constant ULong [18446744073709551604]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_explicit_casts_same_size_conversion() {
    let src = r#"
        int uint_to_int(unsigned int ui, int expected) {
            return (int) ui == expected;
        }
        int int_to_uint(int i, unsigned int expected) {
            return (unsigned int) i == expected;
        }
        int ulong_to_long(unsigned long ul, signed long expected) {
            return (signed long) ul == expected;
        }
        int long_to_ulong(long l, unsigned long expected) {
            return (unsigned long) l == expected;
        }
        int main(void) {
            if (!int_to_uint(10, 10u)) {
                return 1;
            }
            if (!uint_to_int(10u, 10)) {
                return 2;
            }
            if (!long_to_ulong(-1000l, 18446744073709550616ul)) {
                return 3;
            }
            if (!ulong_to_long(18446744073709550616ul, -1000l)) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [uint_to_int]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ui
            │   │   │   ╰── Type
            │   │   │       ╰── Unsigned Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <19>  [==]
            │               ├── <15> Cast
            │               │   ├── Target
            │               │   │   ╰── Int
            │               │   ╰── Expression
            │               │       ╰── <14> Var [ui]
            │               ╰── <18> Var [expected]
            ├── Function [int_to_uint]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Unsigned Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <41>  [==]
            │               ├── <37> Cast
            │               │   ├── Target
            │               │   │   ╰── Unsigned Int
            │               │   ╰── Expression
            │               │       ╰── <36> Var [i]
            │               ╰── <40> Var [expected]
            ├── Function [ulong_to_long]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ul
            │   │   │   ╰── Type
            │   │   │       ╰── Unsigned Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <63>  [==]
            │               ├── <59> Cast
            │               │   ├── Target
            │               │   │   ╰── Long
            │               │   ╰── Expression
            │               │       ╰── <58> Var [ul]
            │               ╰── <62> Var [expected]
            ├── Function [long_to_ulong]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <85>  [==]
            │               ├── <81> Cast
            │               │   ├── Target
            │               │   │   ╰── Unsigned Long
            │               │   ╰── Expression
            │               │       ╰── <80> Var [l]
            │               ╰── <84> Var [expected]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <98> Unary [!]
                    │   │       ╰── <97> FunctionCall [int_to_uint]
                    │   │           ├── Constant Int [10]
                    │   │           ╰── Constant UInt [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <109> Unary [!]
                    │   │       ╰── <108> FunctionCall [uint_to_int]
                    │   │           ├── Constant UInt [10]
                    │   │           ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <122> Unary [!]
                    │   │       ╰── <121> FunctionCall [long_to_ulong]
                    │   │           ├── <119> Unary [-]
                    │   │           │   ╰── Constant Long [1000]
                    │   │           ╰── Constant ULong [18446744073709550616]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <135> Unary [!]
                    │   │       ╰── <134> FunctionCall [ulong_to_long]
                    │   │           ├── Constant ULong [18446744073709550616]
                    │   │           ╰── <133> Unary [-]
                    │   │               ╰── Constant Long [1000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_explicit_casts_truncate() {
    let src = r#"
        
        int ulong_to_int(unsigned long ul, int expected) {
            int result = (int) ul;
            return (result == expected);
        }
        int ulong_to_uint(unsigned long ul, unsigned expected) {
            return ((unsigned int) ul == expected);
        }
        int long_to_uint(long l, unsigned int expected) {
            return (unsigned int) l == expected;
        }
        int main(void) {
            if (!long_to_uint(100l, 100u)) {
                return 1;
            }
            if (!long_to_uint(-9223372036854774574l, 1234u)) {
                return 2;
            }
            if (!ulong_to_int(100ul, 100)) {
                return 3;
            }
            if (!ulong_to_uint(100ul, 100u)) {
                return 4;
            }
            if (!ulong_to_uint(4294967200ul, 4294967200u)) {
                return 5;
            }
            if (!ulong_to_int(4294967200ul, -96)) {
                return 6;
            }
            if (!ulong_to_uint(1152921506754330624ul, 2147483648u)) {
                return 7;
            }
            if (!ulong_to_int(1152921506754330624ul, -2147483648)){
                return 8;
            }
            unsigned int ui = (unsigned int)17179869189ul;
            if (ui != 5)
                return 9;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [ulong_to_int]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ul
            │   │   │   ╰── Type
            │   │   │       ╰── Unsigned Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <18> Cast
            │       │           ├── Target
            │       │           │   ╰── Int
            │       │           ╰── Expression
            │       │               ╰── <17> Var [ul]
            │       ╰── Return
            │           ╰── <27>  [==]
            │               ├── <22> Var [result]
            │               ╰── <25> Var [expected]
            ├── Function [ulong_to_uint]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ul
            │   │   │   ╰── Type
            │   │   │       ╰── Unsigned Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Unsigned Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <50>  [==]
            │               ├── <45> Cast
            │               │   ├── Target
            │               │   │   ╰── Unsigned Int
            │               │   ╰── Expression
            │               │       ╰── <44> Var [ul]
            │               ╰── <48> Var [expected]
            ├── Function [long_to_uint]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Unsigned Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <72>  [==]
            │               ├── <68> Cast
            │               │   ├── Target
            │               │   │   ╰── Unsigned Int
            │               │   ╰── Expression
            │               │       ╰── <67> Var [l]
            │               ╰── <71> Var [expected]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <85> Unary [!]
                    │   │       ╰── <84> FunctionCall [long_to_uint]
                    │   │           ├── Constant Long [100]
                    │   │           ╰── Constant UInt [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <98> Unary [!]
                    │   │       ╰── <97> FunctionCall [long_to_uint]
                    │   │           ├── <95> Unary [-]
                    │   │           │   ╰── Constant Long [9223372036854774574]
                    │   │           ╰── Constant UInt [1234]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <109> Unary [!]
                    │   │       ╰── <108> FunctionCall [ulong_to_int]
                    │   │           ├── Constant ULong [100]
                    │   │           ╰── Constant Int [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <120> Unary [!]
                    │   │       ╰── <119> FunctionCall [ulong_to_uint]
                    │   │           ├── Constant ULong [100]
                    │   │           ╰── Constant UInt [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <131> Unary [!]
                    │   │       ╰── <130> FunctionCall [ulong_to_uint]
                    │   │           ├── Constant ULong [4294967200]
                    │   │           ╰── Constant UInt [4294967200]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <144> Unary [!]
                    │   │       ╰── <143> FunctionCall [ulong_to_int]
                    │   │           ├── Constant ULong [4294967200]
                    │   │           ╰── <142> Unary [-]
                    │   │               ╰── Constant Int [96]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <155> Unary [!]
                    │   │       ╰── <154> FunctionCall [ulong_to_uint]
                    │   │           ├── Constant ULong [1152921506754330624]
                    │   │           ╰── Constant UInt [2147483648]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <168> Unary [!]
                    │   │       ╰── <167> FunctionCall [ulong_to_int]
                    │   │           ├── Constant ULong [1152921506754330624]
                    │   │           ╰── <166> Unary [-]
                    │   │               ╰── Constant Long [2147483648]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ui
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── <180> Cast
                    │           ├── Target
                    │           │   ╰── Unsigned Int
                    │           ╰── Expression
                    │               ╰── Constant ULong [17179869189]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <187>  [!=]
                    │   │       ├── <184> Var [ui]
                    │   │       ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [9]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_bitwise_unsigned_ops() {
    let src = r#"
        int main(void) {
            unsigned int ui = -1u;
            unsigned long ul = 9223372036854775808ul;
            if ((ui & ul) != 0)
                return 1;
            if ((ui | ul) != 9223372041149743103ul)
                return 2;
            signed int i = -1;
            if ((i & ul) != ul)
                return 3;
            if ((i | ul) != i)
                return 4;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ui
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── <10> Unary [-]
                    │           ╰── Constant UInt [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [9223372036854775808]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <28>  [!=]
                    │   │       ├── <25>  [&]
                    │   │       │   ├── <20> Var [ui]
                    │   │       │   ╰── <23> Var [ul]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <41>  [!=]
                    │   │       ├── <38>  [|]
                    │   │       │   ├── <33> Var [ui]
                    │   │       │   ╰── <36> Var [ul]
                    │   │       ╰── Constant ULong [9223372041149743103]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <50> Unary [-]
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <63>  [!=]
                    │   │       ├── <59>  [&]
                    │   │       │   ├── <54> Var [i]
                    │   │       │   ╰── <57> Var [ul]
                    │   │       ╰── <62> Var [ul]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <77>  [!=]
                    │   │       ├── <73>  [|]
                    │   │       │   ├── <68> Var [i]
                    │   │       │   ╰── <71> Var [ul]
                    │   │       ╰── <76> Var [i]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_bitwise_unsigned_shift() {
    let src = r#"
        int main(void) {
            unsigned int ui = -1u;
            if ((ui << 2l) != 4294967292) {
                return 1;
            }
            if ((ui >> 2) != 1073741823) {
                return 2;
            }
            static int shiftcount = 5;
            if ((1000000u >> shiftcount) != 31250) {
                return 3;
            }
            if ((1000000u << shiftcount) != 32000000) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ui
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── <10> Unary [-]
                    │           ╰── Constant UInt [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <21>  [!=]
                    │   │       ├── <18>  [<<]
                    │   │       │   ├── <14> Var [ui]
                    │   │       │   ╰── Constant Long [2]
                    │   │       ╰── Constant Long [4294967292]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <35>  [!=]
                    │   │       ├── <32>  [>>]
                    │   │       │   ├── <28> Var [ui]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── Constant Int [1073741823]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── shiftcount
                    │   ├── Type
                    │   │   ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Constant Int [5]
                    │   ╰── Static
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <56>  [!=]
                    │   │       ├── <53>  [>>]
                    │   │       │   ├── Constant UInt [1000000]
                    │   │       │   ╰── <51> Var [shiftcount]
                    │   │       ╰── Constant Int [31250]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <70>  [!=]
                    │   │       ├── <67>  [<<]
                    │   │       │   ├── Constant UInt [1000000]
                    │   │       │   ╰── <65> Var [shiftcount]
                    │   │       ╰── Constant Int [32000000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_compound_assign_uint() {
    let src = r#"
        int main(void) {
            unsigned int x = -1u;
            x /= -10l;
            return (x == 3865470567u);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── <10> Unary [-]
                    │           ╰── Constant UInt [1]
                    ├── <19> Assign [/=]
                    │   ├── <14> Var [x]
                    │   ╰── <18> Unary [-]
                    │       ╰── Constant Long [10]
                    ╰── Return
                        ╰── <26>  [==]
                            ├── <22> Var [x]
                            ╰── Constant UInt [3865470567]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_compound_bitshift() {
    let src = r#"
        int main(void) {
            int i = -2;
            i >>= 3u;
            if (i != -1) {
                return 1;
            }
            unsigned long ul = 18446744073709551615UL;
            ul <<= 44;
            if (ul != 18446726481523507200ul) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <10> Unary [-]
                    │           ╰── Constant Int [2]
                    ├── <17> Assign [>>=]
                    │   ├── <14> Var [i]
                    │   ╰── Constant UInt [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <25>  [!=]
                    │   │       ├── <20> Var [i]
                    │   │       ╰── <24> Unary [-]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [18446744073709551615]
                    ├── <41> Assign [<<=]
                    │   ├── <38> Var [ul]
                    │   ╰── Constant Int [44]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <47>  [!=]
                    │   │       ├── <44> Var [ul]
                    │   │       ╰── Constant ULong [18446726481523507200]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_compound_bitwise() {
    let src = r#"
        int main(void) {
            unsigned long ul = 18446460386757245432ul;
            ul &= -1000;
            if (ul != 18446460386757244952ul ) {
                return 1;
            }
            ul |= 4294967040u;
            if (ul != 18446460386824683288ul ) {
                return 2;
            }
            int i = 123456;
            unsigned int ui = 4042322160u;
            long l = -252645136;
            if (ui ^= l) {
                return 3;
            }
            if (ui) {
                return 4;
            }
            if (i != 123456) {
                return 5;
            }
            if (l != -252645136) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [18446460386757245432]
                    ├── <17> Assign [&=]
                    │   ├── <12> Var [ul]
                    │   ╰── <16> Unary [-]
                    │       ╰── Constant Int [1000]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <23>  [!=]
                    │   │       ├── <20> Var [ul]
                    │   │       ╰── Constant ULong [18446460386757244952]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <33> Assign [|=]
                    │   ├── <30> Var [ul]
                    │   ╰── Constant UInt [4294967040]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <39>  [!=]
                    │   │       ├── <36> Var [ul]
                    │   │       ╰── Constant ULong [18446460386824683288]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [123456]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ui
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── Constant UInt [4042322160]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <62> Unary [-]
                    │           ╰── Constant Int [252645136]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <70> Assign [^=]
                    │   │       ├── <66> Var [ui]
                    │   │       ╰── <69> Var [l]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <77> Var [ui]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <87>  [!=]
                    │   │       ├── <84> Var [i]
                    │   │       ╰── Constant Int [123456]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <99>  [!=]
                    │   │       ├── <94> Var [l]
                    │   │       ╰── <98> Unary [-]
                    │   │           ╰── Constant Int [252645136]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_postfix_precedence() {
    let src = r#"
        int main(void) {
            unsigned int ui = 4294967295U;
            if (((unsigned long)ui++) != 4294967295U) {
                return 1;
            }
            if (ui) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ui
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── Constant UInt [4294967295]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <21>  [!=]
                    │   │       ├── <18> Cast
                    │   │       │   ├── Target
                    │   │       │   │   ╰── Unsigned Long
                    │   │       │   ╰── Expression
                    │   │       │       ╰── <16> Postfix [++]
                    │   │       │           ╰── <14> Var [ui]
                    │   │       ╰── Constant UInt [4294967295]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <28> Var [ui]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_switch_uint() {
    let src = r#"
        int switch_on_uint(unsigned int ui) {
            switch (ui) {
                case 5u:
                    return 0;
                case 4294967286l:
                    return 1;
                case 34359738378ul:
                    return 2;
                default:
                    return 3;
            }
        }
        int main(void) {
            if (switch_on_uint(5) != 0)
                return 1;
            if (switch_on_uint(4294967286) != 1)
                return 2;
            if (switch_on_uint(10) != 2)
                return 3;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [switch_on_uint]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ui
            │   │       ╰── Type
            │   │           ╰── Unsigned Int
            │   ╰── Body
            │       ╰── Switch
            │           ├── Expression
            │           │   ╰── <9> Var [ui]
            │           ╰── Block
            │               ├── Case [5]
            │               │   ╰── Return
            │               │       ╰── Constant Int [0]
            │               ├── Case [4294967286]
            │               │   ╰── Return
            │               │       ╰── Constant Int [1]
            │               ├── Case [34359738378]
            │               │   ╰── Return
            │               │       ╰── Constant Int [2]
            │               ╰── Default
            │                   ╰── Return
            │                       ╰── Constant Int [3]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <39>  [!=]
                    │   │       ├── <36> FunctionCall [switch_on_uint]
                    │   │       │   ╰── Constant Int [5]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <48>  [!=]
                    │   │       ├── <45> FunctionCall [switch_on_uint]
                    │   │       │   ╰── Constant Long [4294967286]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <57>  [!=]
                    │   │       ├── <54> FunctionCall [switch_on_uint]
                    │   │       │   ╰── Constant Int [10]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_extra_credit_unsigned_incr_decr() {
    let src = r#"
        
        int main(void) {
            unsigned int i = 0;
            if (i-- != 0) {
                return 1;
            }
            if (i != 4294967295U) {
                return 2;
            }
            if (--i != 4294967294U) {
                return 3;
            }
            if (i != 4294967294U) {
                return 4;
            }
            unsigned long l = 18446744073709551614UL;
            if (l++ != 18446744073709551614UL) {
                return 5;
            }
            if (l != 18446744073709551615UL) {
                return 6;
            }
            if (++l != 0) {
                return 7;
            }
            if (l != 0) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <17>  [!=]
                    │   │       ├── <14> Postfix [--]
                    │   │       │   ╰── <12> Var [i]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <27>  [!=]
                    │   │       ├── <24> Var [i]
                    │   │       ╰── Constant UInt [4294967295]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <39>  [!=]
                    │   │       ├── <36> Unary [--]
                    │   │       │   ╰── <35> Var [i]
                    │   │       ╰── Constant UInt [4294967294]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <49>  [!=]
                    │   │       ├── <46> Var [i]
                    │   │       ╰── Constant UInt [4294967294]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [18446744073709551614]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <67>  [!=]
                    │   │       ├── <64> Postfix [++]
                    │   │       │   ╰── <62> Var [l]
                    │   │       ╰── Constant ULong [18446744073709551614]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <77>  [!=]
                    │   │       ├── <74> Var [l]
                    │   │       ╰── Constant ULong [18446744073709551615]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <89>  [!=]
                    │   │       ├── <86> Unary [++]
                    │   │       │   ╰── <85> Var [l]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <99>  [!=]
                    │   │       ├── <96> Var [l]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_implicit_casts_common_type() {
    let src = r#"
        int int_gt_uint(int i, unsigned int u) {
            return i > u;
        }
        int int_gt_ulong(int i, unsigned long ul) {
            return i > ul;
        }
        int uint_gt_long(unsigned int u, long l) {
            return u > l;
        }
        int uint_lt_ulong(unsigned int u, unsigned long ul) {
            return u < ul;
        }
        int long_gt_ulong(long l, unsigned long ul) {
            return l > ul;
        }
        int ternary_int_uint(int flag, int i, unsigned int ui) {
            long result = flag ? i : ui;
            return (result == 4294967295l);
        }
        int main(void) {
            if (!int_gt_uint(-100, 100u)) {
                return 1;
            }
            if (!(int_gt_ulong(-1, 18446744073709551606ul))) {
                return 2;
            }
            if (!uint_gt_long(100u, -100l)) {
                return 3;
            }
            if (!uint_lt_ulong(1073741824u, 34359738368ul)) {
                return 4;
            }
            if (!long_gt_ulong(-1l, 1000ul)) {
                return 5;
            }
            if (!ternary_int_uint(1, -1, 1u)) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [int_gt_uint]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Unsigned Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <16>  [>]
            │               ├── <12> Var [i]
            │               ╰── <15> Var [u]
            ├── Function [int_gt_ulong]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ul
            │   │       ╰── Type
            │   │           ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <35>  [>]
            │               ├── <31> Var [i]
            │               ╰── <34> Var [ul]
            ├── Function [uint_gt_long]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── u
            │   │   │   ╰── Type
            │   │   │       ╰── Unsigned Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── l
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <54>  [>]
            │               ├── <50> Var [u]
            │               ╰── <53> Var [l]
            ├── Function [uint_lt_ulong]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── u
            │   │   │   ╰── Type
            │   │   │       ╰── Unsigned Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ul
            │   │       ╰── Type
            │   │           ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <73>  [<]
            │               ├── <69> Var [u]
            │               ╰── <72> Var [ul]
            ├── Function [long_gt_ulong]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ul
            │   │       ╰── Type
            │   │           ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <92>  [>]
            │               ├── <88> Var [l]
            │               ╰── <91> Var [ul]
            ├── Function [ternary_int_uint]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── flag
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ui
            │   │       ╰── Type
            │   │           ╰── Unsigned Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <{node_id}> Conditional [?]
            │       │           ├── <113> Var [flag]
            │       │           ├── Then
            │       │           │   ╰── <115> Var [i]
            │       │           ╰── Else
            │       │               ╰── <117> Var [ui]
            │       ╰── Return
            │           ╰── <126>  [==]
            │               ├── <122> Var [result]
            │               ╰── Constant Long [4294967295]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <141> Unary [!]
                    │   │       ╰── <140> FunctionCall [int_gt_uint]
                    │   │           ├── <138> Unary [-]
                    │   │           │   ╰── Constant Int [100]
                    │   │           ╰── Constant UInt [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <155> Unary [!]
                    │   │       ╰── <154> FunctionCall [int_gt_ulong]
                    │   │           ├── <151> Unary [-]
                    │   │           │   ╰── Constant Int [1]
                    │   │           ╰── Constant ULong [18446744073709551606]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <168> Unary [!]
                    │   │       ╰── <167> FunctionCall [uint_gt_long]
                    │   │           ├── Constant UInt [100]
                    │   │           ╰── <166> Unary [-]
                    │   │               ╰── Constant Long [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <179> Unary [!]
                    │   │       ╰── <178> FunctionCall [uint_lt_ulong]
                    │   │           ├── Constant UInt [1073741824]
                    │   │           ╰── Constant ULong [34359738368]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <192> Unary [!]
                    │   │       ╰── <191> FunctionCall [long_gt_ulong]
                    │   │           ├── <189> Unary [-]
                    │   │           │   ╰── Constant Long [1]
                    │   │           ╰── Constant ULong [1000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <206> Unary [!]
                    │   │       ╰── <205> FunctionCall [ternary_int_uint]
                    │   │           ├── Constant Int [1]
                    │   │           ├── <203> Unary [-]
                    │   │           │   ╰── Constant Int [1]
                    │   │           ╰── Constant UInt [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_implicit_casts_convert_by_assignment() {
    let src = r#"
        int check_int(int converted, int expected) {
            return (converted == expected);
        }
        int check_long(long converted, long expected) {
            return (converted == expected);
        }
        int check_ulong(unsigned long converted, unsigned long expected) {
            return (converted == expected);
        }
        long return_extended_uint(unsigned int u) {
            return u;
        }
        unsigned long return_extended_int(int i) {
            return i;
        }
        int return_truncated_ulong(unsigned long ul) {
            return ul;
        }
        int extend_on_assignment(unsigned int ui, long expected) {
            long result = ui;
            return result == expected;
        }
        int main(void) {
            if (!check_int(9223372036854775813ul, 5)) {
                return 1;
            }
            if (!check_long(2147483658u, 2147483658l)) {
                return 2;
            }
            if (!check_ulong(-1, 18446744073709551615UL)) {
                return 3;
            }
            if (return_extended_uint(2147483658u) != 2147483658l) {
                return 4;
            }
            if (return_extended_int(-1) != 18446744073709551615UL) {
                return 5;
            }
            long l = return_truncated_ulong(1125902054326372ul);
            if (l != -2147483548l) {
                return 6;
            }
            if (!extend_on_assignment(2147483658u, 2147483658l)){
                return 7;
            }
            int i = 4294967196u;
            if (i != -100) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [check_int]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── converted
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <17>  [==]
            │               ├── <12> Var [converted]
            │               ╰── <15> Var [expected]
            ├── Function [check_long]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── converted
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <37>  [==]
            │               ├── <32> Var [converted]
            │               ╰── <35> Var [expected]
            ├── Function [check_ulong]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── converted
            │   │   │   ╰── Type
            │   │   │       ╰── Unsigned Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <57>  [==]
            │               ├── <52> Var [converted]
            │               ╰── <55> Var [expected]
            ├── Function [return_extended_uint]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Unsigned Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <69> Var [u]
            ├── Function [return_extended_int]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <81> Var [i]
            ├── Function [return_truncated_ulong]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ul
            │   │       ╰── Type
            │   │           ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <93> Var [ul]
            ├── Function [extend_on_assignment]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ui
            │   │   │   ╰── Type
            │   │   │       ╰── Unsigned Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── result
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <111> Var [ui]
            │       ╰── Return
            │           ╰── <119>  [==]
            │               ├── <115> Var [result]
            │               ╰── <118> Var [expected]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <132> Unary [!]
                    │   │       ╰── <131> FunctionCall [check_int]
                    │   │           ├── Constant ULong [9223372036854775813]
                    │   │           ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <143> Unary [!]
                    │   │       ╰── <142> FunctionCall [check_long]
                    │   │           ├── Constant UInt [2147483658]
                    │   │           ╰── Constant Long [2147483658]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <156> Unary [!]
                    │   │       ╰── <155> FunctionCall [check_ulong]
                    │   │           ├── <153> Unary [-]
                    │   │           │   ╰── Constant Int [1]
                    │   │           ╰── Constant ULong [18446744073709551615]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <167>  [!=]
                    │   │       ├── <164> FunctionCall [return_extended_uint]
                    │   │       │   ╰── Constant UInt [2147483658]
                    │   │       ╰── Constant Long [2147483658]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <180>  [!=]
                    │   │       ├── <177> FunctionCall [return_extended_int]
                    │   │       │   ╰── <176> Unary [-]
                    │   │       │       ╰── Constant Int [1]
                    │   │       ╰── Constant ULong [18446744073709551615]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <191> FunctionCall [return_truncated_ulong]
                    │           ╰── Constant ULong [1125902054326372]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <200>  [!=]
                    │   │       ├── <195> Var [l]
                    │   │       ╰── <199> Unary [-]
                    │   │           ╰── Constant Long [2147483548]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <211> Unary [!]
                    │   │       ╰── <210> FunctionCall [extend_on_assignment]
                    │   │           ├── Constant UInt [2147483658]
                    │   │           ╰── Constant Long [2147483658]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant UInt [4294967196]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <229>  [!=]
                    │   │       ├── <224> Var [i]
                    │   │       ╰── <228> Unary [-]
                    │   │           ╰── Constant Int [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_implicit_casts_promote_constants() {
    let src = r#"
        long negative_one = 1l;
        long zero = 0l;
        int main(void) {
            negative_one = -negative_one;
            if (68719476736u >= negative_one) {
                return 1;
            }
            if (-2147483658 >= zero) {
                return 2;
            }
            if (!(3ul + 4294967293ul)) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── negative_one
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Long [1]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── zero
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Long [0]
            ╰── Function [main]
                ╰── Body
                    ├── <24> Assign [=]
                    │   ├── <18> Var [negative_one]
                    │   ╰── <23> Unary [-]
                    │       ╰── <22> Var [negative_one]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <30>  [>=]
                    │   │       ├── Constant ULong [68719476736]
                    │   │       ╰── <29> Var [negative_one]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <42>  [>=]
                    │   │       ├── <38> Unary [-]
                    │   │       │   ╰── Constant Long [2147483658]
                    │   │       ╰── <41> Var [zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <54> Unary [!]
                    │   │       ╰── <53>  [+]
                    │   │           ├── Constant ULong [3]
                    │   │           ╰── Constant ULong [4294967293]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_implicit_casts_static_initializers() {
    let src = r#"
        unsigned int u = 1152921506754330636l;
        int i = 2147483650u;
        long l = 9223372036854775900u;
        long l2 = 2147483650u;
        unsigned long ul = 4294967294u;
        unsigned long ul2 = 9223372036854775798l;
        int i2 = 9223372039002259606ul;
        unsigned ui2 = 9223372039002259606ul;
        int main(void)
        {
            if (u != 2147483660u)
                return 1;
            if (i != -2147483646)
                return 2;
            if (l != -9223372036854775716l)
                return 3;
            if (l2 != 2147483650l)
                return 4;
            if (ul != 4294967294ul)
                return 5;
            if (ul2 != 9223372036854775798ul)
                return 6;
            if (i2 != -2147483498)
                return 7;
            if (ui2 != 2147483798u)
                return 8;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── u
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant Long [1152921506754330636]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant UInt [2147483650]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant ULong [9223372036854775900]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l2
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant UInt [2147483650]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul
            │   ├── Type
            │   │   ╰── Unsigned Long
            │   ╰── Initializer
            │       ╰── Constant UInt [4294967294]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul2
            │   ├── Type
            │   │   ╰── Unsigned Long
            │   ╰── Initializer
            │       ╰── Constant Long [9223372036854775798]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i2
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant ULong [9223372039002259606]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ui2
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant ULong [9223372039002259606]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <57>  [!=]
                    │   │       ├── <54> Var [u]
                    │   │       ╰── Constant UInt [2147483660]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <67>  [!=]
                    │   │       ├── <62> Var [i]
                    │   │       ╰── <66> Unary [-]
                    │   │           ╰── Constant Int [2147483646]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <77>  [!=]
                    │   │       ├── <72> Var [l]
                    │   │       ╰── <76> Unary [-]
                    │   │           ╰── Constant Long [9223372036854775716]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <85>  [!=]
                    │   │       ├── <82> Var [l2]
                    │   │       ╰── Constant Long [2147483650]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <93>  [!=]
                    │   │       ├── <90> Var [ul]
                    │   │       ╰── Constant ULong [4294967294]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <101>  [!=]
                    │   │       ├── <98> Var [ul2]
                    │   │       ╰── Constant ULong [9223372036854775798]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <111>  [!=]
                    │   │       ├── <106> Var [i2]
                    │   │       ╰── <110> Unary [-]
                    │   │           ╰── Constant Int [2147483498]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <119>  [!=]
                    │   │       ├── <116> Var [ui2]
                    │   │       ╰── Constant UInt [2147483798]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_libraries_unsigned_args() {
    let src = r#"
        int accept_unsigned(unsigned int a, unsigned int b, unsigned long c, unsigned long d,
                         unsigned int e, unsigned int f, unsigned long g, unsigned int h,
                         unsigned long i) {
            if (a != 1u) {
                return 1;
            }
            if (b != 4294967295U) {
                return 2;
            }
            if (c != 18446744073709551615UL) {
                return 3;
            }
            if (d != 9223372036854775808ul) {
                return 4;
            }
            if (e != 2147483648u) {
                return 5;
            }
            if (f != 0u) {
                return 8;
            }
            if (g != 123456u) {
                return 9;
            }
            if (h != 2147487744u) {
                return 10;
            }
            if (i != 9223372041149743104ul) {
                return 11;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [accept_unsigned]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Unsigned Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Unsigned Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Unsigned Long
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Unsigned Long
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── e
                │   │   ╰── Type
                │   │       ╰── Unsigned Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── f
                │   │   ╰── Type
                │   │       ╰── Unsigned Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── g
                │   │   ╰── Type
                │   │       ╰── Unsigned Long
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── h
                │   │   ╰── Type
                │   │       ╰── Unsigned Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── i
                │       ╰── Type
                │           ╰── Unsigned Long
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <36>  [!=]
                    │   │       ├── <33> Var [a]
                    │   │       ╰── Constant UInt [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <46>  [!=]
                    │   │       ├── <43> Var [b]
                    │   │       ╰── Constant UInt [4294967295]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <56>  [!=]
                    │   │       ├── <53> Var [c]
                    │   │       ╰── Constant ULong [18446744073709551615]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <66>  [!=]
                    │   │       ├── <63> Var [d]
                    │   │       ╰── Constant ULong [9223372036854775808]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <76>  [!=]
                    │   │       ├── <73> Var [e]
                    │   │       ╰── Constant UInt [2147483648]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <86>  [!=]
                    │   │       ├── <83> Var [f]
                    │   │       ╰── Constant UInt [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <96>  [!=]
                    │   │       ├── <93> Var [g]
                    │   │       ╰── Constant UInt [123456]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <106>  [!=]
                    │   │       ├── <103> Var [h]
                    │   │       ╰── Constant UInt [2147487744]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <116>  [!=]
                    │   │       ├── <113> Var [i]
                    │   │       ╰── Constant ULong [9223372041149743104]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [11]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_libraries_unsigned_args_client() {
    let src = r#"
        
        int accept_unsigned(unsigned int a, unsigned int b, unsigned long c, unsigned long d,
                         unsigned int e, unsigned int f, unsigned long g, unsigned int h,
                         unsigned long i);
        int main(void) {
            return accept_unsigned(1, -1, -1, 9223372036854775808ul, 2147483648ul, 0, 123456, 2147487744u, 9223372041149743104ul);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [accept_unsigned]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Unsigned Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Unsigned Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Unsigned Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Unsigned Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Unsigned Long
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Unsigned Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── i
            │           ╰── Type
            │               ╰── Unsigned Long
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <51> FunctionCall [accept_unsigned]
                            ├── Constant Int [1]
                            ├── <41> Unary [-]
                            │   ╰── Constant Int [1]
                            ├── <44> Unary [-]
                            │   ╰── Constant Int [1]
                            ├── Constant ULong [9223372036854775808]
                            ├── Constant ULong [2147483648]
                            ├── Constant Int [0]
                            ├── Constant Int [123456]
                            ├── Constant UInt [2147487744]
                            ╰── Constant ULong [9223372041149743104]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_libraries_unsigned_global_var() {
    let src = r#"
        unsigned int ui = 4294967200u;
        unsigned int return_uint(void) {
            return ui;
        }
        int return_uint_as_signed(void) {
            return ui;
        }
        long return_uint_as_long(void) {
            return ui;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ui
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant UInt [4294967200]
            ├── Function [return_uint]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12> Var [ui]
            ├── Function [return_uint_as_signed]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <21> Var [ui]
            ╰── Function [return_uint_as_long]
                ╰── Body
                    ╰── Return
                        ╰── <30> Var [ui]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_libraries_unsigned_global_var_client() {
    let src = r#"
        extern unsigned int ui;
        unsigned int return_uint(void);
        int return_uint_as_signed(void);
        long return_uint_as_long(void);
        int main(void) {
            if (ui != 4294967200u)
                return 0;
            ui = -1;
            long result = (long) return_uint();
            if (result != 4294967295l)
                return 0;
            result = (long) return_uint_as_signed();
            if (result != -1l)
                return 0;
            result = return_uint_as_long();
            if (result != 4294967295l)
                return 0;
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ui
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Extern
            ├── Function [return_uint]
            ├── Function [return_uint_as_signed]
            ├── Function [return_uint_as_long]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <29>  [!=]
                    │   │       ├── <26> Var [ui]
                    │   │       ╰── Constant UInt [4294967200]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [0]
                    ├── <39> Assign [=]
                    │   ├── <34> Var [ui]
                    │   ╰── <38> Unary [-]
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <48> Cast
                    │           ├── Target
                    │           │   ╰── Long
                    │           ╰── Expression
                    │               ╰── <47> FunctionCall [return_uint]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <55>  [!=]
                    │   │       ├── <52> Var [result]
                    │   │       ╰── Constant Long [4294967295]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [0]
                    ├── <67> Assign [=]
                    │   ├── <60> Var [result]
                    │   ╰── <66> Cast
                    │       ├── Target
                    │       │   ╰── Long
                    │       ╰── Expression
                    │           ╰── <65> FunctionCall [return_uint_as_signed]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <75>  [!=]
                    │   │       ├── <70> Var [result]
                    │   │       ╰── <74> Unary [-]
                    │   │           ╰── Constant Long [1]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [0]
                    ├── <84> Assign [=]
                    │   ├── <80> Var [result]
                    │   ╰── <83> FunctionCall [return_uint_as_long]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <90>  [!=]
                    │   │       ├── <87> Var [result]
                    │   │       ╰── Constant Long [4294967295]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [0]
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_type_specifiers_signed_type_specifiers() {
    let src = r#"
        static int i;
        signed extern i;
        int static signed i = 5;
        signed int static i;
        long signed l;
        long l = 7;
        int long l;
        signed long int l;
        int main(void) {
            int signed extern i;
            extern signed long l;
            if (i != 5) {
                return 1;
            }
            if (l != 7) {
                return 2;
            }
            int counter = 0;
            for (signed int index = 10; index > 0; index = index - 1) {
                counter = counter + 1;
            }
            if (counter != 10) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Static
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Extern
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ├── Initializer
            │   │   ╰── Constant Int [5]
            │   ╰── Static
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Static
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ╰── Type
            │       ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Int [7]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ╰── Type
            │       ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ╰── Type
            │       ╰── Long
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Extern
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Extern
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <59>  [!=]
                    │   │       ├── <56> Var [i]
                    │   │       ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <69>  [!=]
                    │   │       ├── <66> Var [l]
                    │   │       ╰── Constant Int [7]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── counter
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── index
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <92>  [>]
                    │   │       ├── <89> Var [index]
                    │   │       ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <101> Assign [=]
                    │   │       ├── <94> Var [index]
                    │   │       ╰── <100>  [-]
                    │   │           ├── <97> Var [index]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── <110> Assign [=]
                    │           ├── <103> Var [counter]
                    │           ╰── <109>  [+]
                    │               ├── <106> Var [counter]
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <119>  [!=]
                    │   │       ├── <116> Var [counter]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_type_specifiers_unsigned_type_specifiers() {
    let src = r#"
        unsigned u;
        int unsigned u;
        unsigned int u = 6;
        unsigned long ul;
        long unsigned ul;
        long int unsigned ul;
        unsigned int long ul = 4;
        int main(void) {
            if (u != 6u) {
                return 1;
            }
            long extern unsigned ul;
            unsigned long extern ul;
            int extern unsigned long ul;
            if (ul != 4ul) {
                return 2;
            }
            int counter = 0;
            for (unsigned int index = 10; index < 4294967295U; index = index - 1) {
                counter = counter + 1;
            }
            if (counter != 11) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── u
            │   ╰── Type
            │       ╰── Unsigned Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── u
            │   ╰── Type
            │       ╰── Unsigned Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── u
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant Int [6]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul
            │   ╰── Type
            │       ╰── Unsigned Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul
            │   ╰── Type
            │       ╰── Unsigned Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul
            │   ╰── Type
            │       ╰── Unsigned Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul
            │   ├── Type
            │   │   ╰── Unsigned Long
            │   ╰── Initializer
            │       ╰── Constant Int [4]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <41>  [!=]
                    │   │       ├── <38> Var [u]
                    │   │       ╰── Constant UInt [6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Extern
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Extern
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Extern
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <66>  [!=]
                    │   │       ├── <63> Var [ul]
                    │   │       ╰── Constant ULong [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── counter
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── index
                    │   │       ├── Type
                    │   │       │   ╰── Unsigned Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [10]
                    │   ├── Condition
                    │   │   ╰── <89>  [<]
                    │   │       ├── <86> Var [index]
                    │   │       ╰── Constant UInt [4294967295]
                    │   ├── Condition
                    │   │   ╰── <98> Assign [=]
                    │   │       ├── <91> Var [index]
                    │   │       ╰── <97>  [-]
                    │   │           ├── <94> Var [index]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── <107> Assign [=]
                    │           ├── <100> Var [counter]
                    │           ╰── <106>  [+]
                    │               ├── <103> Var [counter]
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <116>  [!=]
                    │   │       ├── <113> Var [counter]
                    │   │       ╰── Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_arithmetic_ops() {
    let src = r#"
        unsigned int ui_a;
        unsigned int ui_b;
        unsigned long ul_a;
        unsigned long ul_b;
        int addition(void) {
            return (ui_a + 2147483653u == 2147483663u);
        }
        int subtraction(void) {
            return (ul_a - ul_b == 18446744072635808792ul);
        }
        int multiplication(void) {
            return (ui_a * ui_b == 3221225472u);
        }
        int division(void) {
            return (ui_a / ui_b == 0);
        }
        int division_large_dividend(void) {
            return (ui_a / ui_b == 2);
        }
        int division_by_literal(void) {
            return (ul_a / 5ul == 219902325555ul);
        }
        int remaind(void) {
            return (ul_b % ul_a == 5ul);
        }
        int complement(void) {
            return (~ui_a == 0);
        }
        int main(void) {
            ui_a = 10u;
            if (!addition()) {
                return 1;
            }
            ul_a = 18446744072635809792ul;
            ul_b = 1000ul;
            if (!subtraction()) {
                return 2;
            }
            ui_a = 1073741824u;
            ui_b = 3u;
            if (!multiplication()) {
                return 3;
            }
            ui_a = 100u;
            ui_b = 4294967294u;
            if (!division()) {
                return 4;
            }
            ui_a = 4294967294u;
            ui_b = 2147483647u;
            if (!division_large_dividend()) {
                return 5;
            }
            ul_a = 1099511627775ul;
            if (!division_by_literal()) {
                return 6;
            }
            ul_a = 100ul;
            ul_b = 18446744073709551605ul;
            if (!remaind()) {
                return 7;
            }
            ui_a = 4294967295U;
            if (!complement()) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ui_a
            │   ╰── Type
            │       ╰── Unsigned Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ui_b
            │   ╰── Type
            │       ╰── Unsigned Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul_a
            │   ╰── Type
            │       ╰── Unsigned Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul_b
            │   ╰── Type
            │       ╰── Unsigned Long
            ├── Function [addition]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <29>  [==]
            │               ├── <25>  [+]
            │               │   ├── <22> Var [ui_a]
            │               │   ╰── Constant UInt [2147483653]
            │               ╰── Constant UInt [2147483663]
            ├── Function [subtraction]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <46>  [==]
            │               ├── <42>  [-]
            │               │   ├── <38> Var [ul_a]
            │               │   ╰── <41> Var [ul_b]
            │               ╰── Constant ULong [18446744072635808792]
            ├── Function [multiplication]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <63>  [==]
            │               ├── <59>  [*]
            │               │   ├── <55> Var [ui_a]
            │               │   ╰── <58> Var [ui_b]
            │               ╰── Constant UInt [3221225472]
            ├── Function [division]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <80>  [==]
            │               ├── <76>  [/]
            │               │   ├── <72> Var [ui_a]
            │               │   ╰── <75> Var [ui_b]
            │               ╰── Constant Int [0]
            ├── Function [division_large_dividend]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <97>  [==]
            │               ├── <93>  [/]
            │               │   ├── <89> Var [ui_a]
            │               │   ╰── <92> Var [ui_b]
            │               ╰── Constant Int [2]
            ├── Function [division_by_literal]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <113>  [==]
            │               ├── <109>  [/]
            │               │   ├── <106> Var [ul_a]
            │               │   ╰── Constant ULong [5]
            │               ╰── Constant ULong [219902325555]
            ├── Function [remaind]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <130>  [==]
            │               ├── <126>  [%]
            │               │   ├── <122> Var [ul_b]
            │               │   ╰── <125> Var [ul_a]
            │               ╰── Constant ULong [5]
            ├── Function [complement]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <145>  [==]
            │               ├── <141> Unary [~]
            │               │   ╰── <140> Var [ui_a]
            │               ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── <157> Assign [=]
                    │   ├── <154> Var [ui_a]
                    │   ╰── Constant UInt [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <162> Unary [!]
                    │   │       ╰── <161> FunctionCall [addition]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <172> Assign [=]
                    │   ├── <169> Var [ul_a]
                    │   ╰── Constant ULong [18446744072635809792]
                    ├── <178> Assign [=]
                    │   ├── <175> Var [ul_b]
                    │   ╰── Constant ULong [1000]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <183> Unary [!]
                    │   │       ╰── <182> FunctionCall [subtraction]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── <193> Assign [=]
                    │   ├── <190> Var [ui_a]
                    │   ╰── Constant UInt [1073741824]
                    ├── <199> Assign [=]
                    │   ├── <196> Var [ui_b]
                    │   ╰── Constant UInt [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <204> Unary [!]
                    │   │       ╰── <203> FunctionCall [multiplication]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <214> Assign [=]
                    │   ├── <211> Var [ui_a]
                    │   ╰── Constant UInt [100]
                    ├── <220> Assign [=]
                    │   ├── <217> Var [ui_b]
                    │   ╰── Constant UInt [4294967294]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <225> Unary [!]
                    │   │       ╰── <224> FunctionCall [division]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <235> Assign [=]
                    │   ├── <232> Var [ui_a]
                    │   ╰── Constant UInt [4294967294]
                    ├── <241> Assign [=]
                    │   ├── <238> Var [ui_b]
                    │   ╰── Constant UInt [2147483647]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <246> Unary [!]
                    │   │       ╰── <245> FunctionCall [division_large_dividend]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── <256> Assign [=]
                    │   ├── <253> Var [ul_a]
                    │   ╰── Constant ULong [1099511627775]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <261> Unary [!]
                    │   │       ╰── <260> FunctionCall [division_by_literal]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── <271> Assign [=]
                    │   ├── <268> Var [ul_a]
                    │   ╰── Constant ULong [100]
                    ├── <277> Assign [=]
                    │   ├── <274> Var [ul_b]
                    │   ╰── Constant ULong [18446744073709551605]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <282> Unary [!]
                    │   │       ╰── <281> FunctionCall [remaind]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── <292> Assign [=]
                    │   ├── <289> Var [ui_a]
                    │   ╰── Constant UInt [4294967295]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <297> Unary [!]
                    │   │       ╰── <296> FunctionCall [complement]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_arithmetic_wraparound() {
    let src = r#"
        unsigned int ui_a;
        unsigned int ui_b;
        unsigned long ul_a;
        unsigned long ul_b;
        int addition(void) {
            return ui_a + ui_b == 0u;
        }
        int subtraction(void) {
            return (ul_a - ul_b == 18446744073709551606ul);
        }
        int neg(void) {
            return -ul_a == 18446744073709551615UL;
        }
        int main(void) {
            ui_a = 4294967293u;
            ui_b = 3u;
            if (!addition()) {
                return 1;
            }
            ul_a = 10ul;
            ul_b = 20ul;
            if (!subtraction()) {
                return 2;
            }
            ul_a = 1ul;
            if (!neg()) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ui_a
            │   ╰── Type
            │       ╰── Unsigned Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ui_b
            │   ╰── Type
            │       ╰── Unsigned Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul_a
            │   ╰── Type
            │       ╰── Unsigned Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul_b
            │   ╰── Type
            │       ╰── Unsigned Long
            ├── Function [addition]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <29>  [==]
            │               ├── <26>  [+]
            │               │   ├── <22> Var [ui_a]
            │               │   ╰── <25> Var [ui_b]
            │               ╰── Constant UInt [0]
            ├── Function [subtraction]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <46>  [==]
            │               ├── <42>  [-]
            │               │   ├── <38> Var [ul_a]
            │               │   ╰── <41> Var [ul_b]
            │               ╰── Constant ULong [18446744073709551606]
            ├── Function [neg]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <60>  [==]
            │               ├── <57> Unary [-]
            │               │   ╰── <56> Var [ul_a]
            │               ╰── Constant ULong [18446744073709551615]
            ╰── Function [main]
                ╰── Body
                    ├── <72> Assign [=]
                    │   ├── <69> Var [ui_a]
                    │   ╰── Constant UInt [4294967293]
                    ├── <78> Assign [=]
                    │   ├── <75> Var [ui_b]
                    │   ╰── Constant UInt [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <83> Unary [!]
                    │   │       ╰── <82> FunctionCall [addition]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <93> Assign [=]
                    │   ├── <90> Var [ul_a]
                    │   ╰── Constant ULong [10]
                    ├── <99> Assign [=]
                    │   ├── <96> Var [ul_b]
                    │   ╰── Constant ULong [20]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <104> Unary [!]
                    │   │       ╰── <103> FunctionCall [subtraction]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── <114> Assign [=]
                    │   ├── <111> Var [ul_a]
                    │   ╰── Constant ULong [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <119> Unary [!]
                    │   │       ╰── <118> FunctionCall [neg]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_comparisons() {
    let src = r#"
        unsigned int one_hundred = 100u;
        unsigned int large_uint = 4294967294u;
        unsigned long one_hundred_ulong = 100ul;
        unsigned long large_ulong = 4294967294ul;
        int main(void) {
            if (large_uint < one_hundred)
                return 1;
            if (large_uint <= one_hundred)
                return 2;
            if (one_hundred >= large_uint)
                return 3;
            if (one_hundred > large_uint)
                return 4;
            if (!(one_hundred <= large_uint))
                return 5;
            if (!(one_hundred < large_uint))
                return 6;
            if (!(large_uint > one_hundred))
                return 7;
            if (!(large_uint >= one_hundred))
                return 8;
            if (large_ulong < one_hundred_ulong)
                return 9;
            if (large_ulong <= one_hundred_ulong)
                return 10;
            if (one_hundred_ulong >= large_ulong)
                return 11;
            if (one_hundred_ulong > large_ulong)
                return 12;
            if (!(one_hundred_ulong <= large_ulong))
                return 13;
            if (!(one_hundred_ulong < large_ulong))
                return 14;
            if (!(large_ulong > one_hundred_ulong))
                return 15;
            if (!(large_ulong >= one_hundred_ulong))
                return 16;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── one_hundred
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant UInt [100]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── large_uint
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant UInt [4294967294]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── one_hundred_ulong
            │   ├── Type
            │   │   ╰── Unsigned Long
            │   ╰── Initializer
            │       ╰── Constant ULong [100]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── large_ulong
            │   ├── Type
            │   │   ╰── Unsigned Long
            │   ╰── Initializer
            │       ╰── Constant ULong [4294967294]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <34>  [<]
                    │   │       ├── <30> Var [large_uint]
                    │   │       ╰── <33> Var [one_hundred]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <43>  [<=]
                    │   │       ├── <39> Var [large_uint]
                    │   │       ╰── <42> Var [one_hundred]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <52>  [>=]
                    │   │       ├── <48> Var [one_hundred]
                    │   │       ╰── <51> Var [large_uint]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <61>  [>]
                    │   │       ├── <57> Var [one_hundred]
                    │   │       ╰── <60> Var [large_uint]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <73> Unary [!]
                    │   │       ╰── <72>  [<=]
                    │   │           ├── <67> Var [one_hundred]
                    │   │           ╰── <70> Var [large_uint]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <85> Unary [!]
                    │   │       ╰── <84>  [<]
                    │   │           ├── <79> Var [one_hundred]
                    │   │           ╰── <82> Var [large_uint]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <97> Unary [!]
                    │   │       ╰── <96>  [>]
                    │   │           ├── <91> Var [large_uint]
                    │   │           ╰── <94> Var [one_hundred]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <109> Unary [!]
                    │   │       ╰── <108>  [>=]
                    │   │           ├── <103> Var [large_uint]
                    │   │           ╰── <106> Var [one_hundred]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <118>  [<]
                    │   │       ├── <114> Var [large_ulong]
                    │   │       ╰── <117> Var [one_hundred_ulong]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <127>  [<=]
                    │   │       ├── <123> Var [large_ulong]
                    │   │       ╰── <126> Var [one_hundred_ulong]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <136>  [>=]
                    │   │       ├── <132> Var [one_hundred_ulong]
                    │   │       ╰── <135> Var [large_ulong]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <145>  [>]
                    │   │       ├── <141> Var [one_hundred_ulong]
                    │   │       ╰── <144> Var [large_ulong]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <157> Unary [!]
                    │   │       ╰── <156>  [<=]
                    │   │           ├── <151> Var [one_hundred_ulong]
                    │   │           ╰── <154> Var [large_ulong]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [13]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <169> Unary [!]
                    │   │       ╰── <168>  [<]
                    │   │           ├── <163> Var [one_hundred_ulong]
                    │   │           ╰── <166> Var [large_ulong]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [14]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <181> Unary [!]
                    │   │       ╰── <180>  [>]
                    │   │           ├── <175> Var [large_ulong]
                    │   │           ╰── <178> Var [one_hundred_ulong]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [15]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <193> Unary [!]
                    │   │       ╰── <192>  [>=]
                    │   │           ├── <187> Var [large_ulong]
                    │   │           ╰── <190> Var [one_hundred_ulong]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [16]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_locals() {
    let src = r#"
        int main(void) {
            unsigned long a = 8589934592ul;
            int b = -1;
            long c = -8589934592l;
            unsigned int d = 10u;
            if (a != 8589934592ul) {
                return 1;
            }
            if (b != -1){
                return 2;
            }
            if (c != -8589934592l) {
                return 3;
            }
            if (d != 10u) {
                return 4;
            }
            a = -a;
            b = b - 1;
            c = c + 8589934594l;
            d = d * 268435456u;
            if (a != 18446744065119617024ul) {
                return 5;
            }
            if (b != -2) {
                return 6;
            }
            if (c != 2) {
                return 7;
            }
            if (d != 2684354560u) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [8589934592]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <16> Unary [-]
                    │           ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <24> Unary [-]
                    │           ╰── Constant Long [8589934592]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── Constant UInt [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37>  [!=]
                    │   │       ├── <34> Var [a]
                    │   │       ╰── Constant ULong [8589934592]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <49>  [!=]
                    │   │       ├── <44> Var [b]
                    │   │       ╰── <48> Unary [-]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <61>  [!=]
                    │   │       ├── <56> Var [c]
                    │   │       ╰── <60> Unary [-]
                    │   │           ╰── Constant Long [8589934592]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <71>  [!=]
                    │   │       ├── <68> Var [d]
                    │   │       ╰── Constant UInt [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <84> Assign [=]
                    │   ├── <78> Var [a]
                    │   ╰── <83> Unary [-]
                    │       ╰── <82> Var [a]
                    ├── <94> Assign [=]
                    │   ├── <87> Var [b]
                    │   ╰── <93>  [-]
                    │       ├── <90> Var [b]
                    │       ╰── Constant Int [1]
                    ├── <104> Assign [=]
                    │   ├── <97> Var [c]
                    │   ╰── <103>  [+]
                    │       ├── <100> Var [c]
                    │       ╰── Constant Long [8589934594]
                    ├── <114> Assign [=]
                    │   ├── <107> Var [d]
                    │   ╰── <113>  [*]
                    │       ├── <110> Var [d]
                    │       ╰── Constant UInt [268435456]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <120>  [!=]
                    │   │       ├── <117> Var [a]
                    │   │       ╰── Constant ULong [18446744065119617024]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <132>  [!=]
                    │   │       ├── <127> Var [b]
                    │   │       ╰── <131> Unary [-]
                    │   │           ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <142>  [!=]
                    │   │       ├── <139> Var [c]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <152>  [!=]
                    │   │       ├── <149> Var [d]
                    │   │       ╰── Constant UInt [2684354560]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_logical() {
    let src = r#"
        int not(unsigned long ul) {
            return !ul;
        }
        int if_cond(unsigned u) {
            if (u) {
                return 1;
            }
            return 0;
        }
        int and(unsigned long ul, int i) {
            return ul && i;
        }
        int or(int i, unsigned u) {
            return i || u;
        }
        int main(void) {
            unsigned long ul = 1152921504606846976ul;
            unsigned int u = 2147483648u;
            unsigned long zero = 0l;
            if (not(ul)) {
                return 1;
            }
            if (!not(zero)) {
                return 2;
            }
            if(!if_cond(u)) {
                return 3;
            }
            if(if_cond(zero)) {
                return 4;
            }
            if (and(zero, 1)) {
                return 5;
            }
            if (!or(1, u)) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [not]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ul
            │   │       ╰── Type
            │   │           ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <11> Unary [!]
            │               ╰── <10> Var [ul]
            ├── Function [if_cond]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Unsigned Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <23> Var [u]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [and]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ul
            │   │   │   ╰── Type
            │   │   │       ╰── Unsigned Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <48>  [&&]
            │               ├── <44> Var [ul]
            │               ╰── <47> Var [i]
            ├── Function [or]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── u
            │   │       ╰── Type
            │   │           ╰── Unsigned Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <67>  [||]
            │               ├── <63> Var [i]
            │               ╰── <66> Var [u]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [1152921504606846976]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── u
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── Constant UInt [2147483648]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── zero
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <96> FunctionCall [not]
                    │   │       ╰── <95> Var [ul]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <107> Unary [!]
                    │   │       ╰── <106> FunctionCall [not]
                    │   │           ╰── <105> Var [zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <118> Unary [!]
                    │   │       ╰── <117> FunctionCall [if_cond]
                    │   │           ╰── <116> Var [u]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <127> FunctionCall [if_cond]
                    │   │       ╰── <126> Var [zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <137> FunctionCall [and]
                    │   │       ├── <135> Var [zero]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <149> Unary [!]
                    │   │       ╰── <148> FunctionCall [or]
                    │   │           ├── Constant Int [1]
                    │   │           ╰── <147> Var [u]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_simple() {
    let src = r#"
        int main(void) {
            unsigned u = 2147483647u;
            return (u + 2u == 2147483649u);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── u
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── Constant UInt [2147483647]
                    ╰── Return
                        ╰── <19>  [==]
                            ├── <15>  [+]
                            │   ├── <12> Var [u]
                            │   ╰── Constant UInt [2]
                            ╰── Constant UInt [2147483649]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_12_valid_unsigned_expressions_static_variables() {
    let src = r#"
        
        static unsigned long x = 9223372036854775803ul;
        unsigned long zero_long;
        unsigned zero_int;
        int main(void)
        {
            if (x != 9223372036854775803ul)
                return 0;
            x = x + 10;
            if (x != 9223372036854775813ul)
                return 0;
            if (zero_long || zero_int)
                return 0;
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Unsigned Long
            │   ├── Initializer
            │   │   ╰── Constant ULong [9223372036854775803]
            │   ╰── Static
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── zero_long
            │   ╰── Type
            │       ╰── Unsigned Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── zero_int
            │   ╰── Type
            │       ╰── Unsigned Int
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <24>  [!=]
                    │   │       ├── <21> Var [x]
                    │   │       ╰── Constant ULong [9223372036854775803]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [0]
                    ├── <36> Assign [=]
                    │   ├── <29> Var [x]
                    │   ╰── <35>  [+]
                    │       ├── <32> Var [x]
                    │       ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <42>  [!=]
                    │   │       ├── <39> Var [x]
                    │   │       ╰── Constant ULong [9223372036854775813]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <51>  [||]
                    │   │       ├── <47> Var [zero_long]
                    │   │       ╰── <50> Var [zero_int]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [0]
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_parse_invalid_type_specifier() {
    assert_error(
        r#"
        int main(void) {
            unsigned double d = 10.0;
          //^^^^^^^^^^^^^^^ Invalid type specifier
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_13_invalid_parse_invalid_type_specifier_2() {
    assert_error(
        r#"
        int main(void) {
            double double d = 10.0;
          //^^^^^^^^^^^^^ Invalid type specifier
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_13_invalid_types_complement_double() {
    let src = r#"
        int main(void) {
            double d = ~10.0;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <10> Unary [~]
                    │           ╰── Constant Double [+1e1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_bitwise_and() {
    let src = r#"
        int main(void) {
            double d = 10.0 & -1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <13>  [&]
                    │           ├── Constant Double [+1e1]
                    │           ╰── <12> Unary [-]
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_bitwise_or() {
    let src = r#"
        int main(void) {
            double d = 0.0 | -0.0;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <13>  [|]
                    │           ├── Constant Double [+0e0]
                    │           ╰── <12> Unary [-]
                    │               ╰── Constant Double [+0e0]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_bitwise_shift_double() {
    let src = r#"
        int main(void) {
            double d = 5.0 << 3;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <11>  [<<]
                    │           ├── Constant Double [+5e0]
                    │           ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_bitwise_shift_double_2() {
    let src = r#"
        int main(void) {
            return 1 << 2.0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <8>  [<<]
                            ├── Constant Int [1]
                            ╰── Constant Double [+2e0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_bitwise_xor() {
    let src = r#"
        int main(void) {
            return 1e10 ^ -1e10;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <10>  [^]
                            ├── Constant Double [+1e10]
                            ╰── <9> Unary [-]
                                ╰── Constant Double [+1e10]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_compound_bitwise_and() {
    let src = r#"
        int main(void) {
            double d = 1.0;
            d &= 0;
            return (int) d;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e0]
                    ├── <15> Assign [&=]
                    │   ├── <12> Var [d]
                    │   ╰── Constant Int [0]
                    ╰── Return
                        ╰── <21> Cast
                            ├── Target
                            │   ╰── Int
                            ╰── Expression
                                ╰── <20> Var [d]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_compound_bitwise_xor() {
    let src = r#"
        int main(void) {
            int i = 0;
            i |= 2.0;
            return (int) i;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <15> Assign [|=]
                    │   ├── <12> Var [i]
                    │   ╰── Constant Double [+2e0]
                    ╰── Return
                        ╰── <21> Cast
                            ├── Target
                            │   ╰── Int
                            ╰── Expression
                                ╰── <20> Var [i]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_compound_left_bitshift() {
    let src = r#"
        int main(void) {
            double d = 1.0;
            d <<= 1;
            return d;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e0]
                    ├── <15> Assign [<<=]
                    │   ├── <12> Var [d]
                    │   ╰── Constant Int [1]
                    ╰── Return
                        ╰── <18> Var [d]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_compound_mod() {
    let src = r#"
        
        int main(void) {
            double d = 5.0;
            d %= 2;
            return (int) d;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+5e0]
                    ├── <15> Assign [&=]
                    │   ├── <12> Var [d]
                    │   ╰── Constant Int [2]
                    ╰── Return
                        ╰── <21> Cast
                            ├── Target
                            │   ╰── Int
                            ╰── Expression
                                ╰── <20> Var [d]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_compound_mod_2() {
    let src = r#"
        
        int main(void) {
            int i = 5;
            i %= 1.0;
            return i;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [5]
                    ├── <15> Assign [&=]
                    │   ├── <12> Var [i]
                    │   ╰── Constant Double [+1e0]
                    ╰── Return
                        ╰── <18> Var [i]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_compound_right_bitshift() {
    let src = r#"
        int main(void) {
            int i = 1000;
            i >>= 2.0;
            return i;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1000]
                    ├── <15> Assign [>>=]
                    │   ├── <12> Var [i]
                    │   ╰── Constant Double [+2e0]
                    ╰── Return
                        ╰── <18> Var [i]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_switch_double_case() {
    let src = r#"
        int main(void) {
            int x = 10;
            switch (x) {
                case 1.0: return 0;
                default: return 4;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ╰── Switch
                        ├── Expression
                        │   ╰── <12> Var [x]
                        ╰── Block
                            ├── Case [1]
                            │   ╰── Return
                            │       ╰── Constant Int [0]
                            ╰── Default
                                ╰── Return
                                    ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_extra_credit_switch_on_double() {
    let src = r#"
        int main(void) {
            double d = 10;
            switch (d) {
                case 10: return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <12> Var [d]
                    │   ╰── Block
                    │       ╰── Case [10]
                    │           ╰── Return
                    │               ╰── Constant Int [0]
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_mod_double() {
    let src = r#"
        int main(void) {
            double d = 10.0;
            d = d % 3;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e1]
                    ├── <19> Assign [=]
                    │   ├── <12> Var [d]
                    │   ╰── <18>  [%]
                    │       ├── <15> Var [d]
                    │       ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_invalid_types_mod_double_2() {
    let src = r#"
        int main(void) {
            double e = 3.0 % 5;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── e
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <11>  [%]
                    │           ├── Constant Double [+3e0]
                    │           ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_constants_constant_doubles() {
    let src = r#"
        int main(void) {
            double a = 1.0;
            double b = 1.;
            double c = 1E0;
            double d = .01e+2;
            if (! (a == b && a == c && a == d) )
                return 1;
            if (a + b + c + d != 4.0)
                return 2;
            double e = .125;
            double f = 12.5e-2;
            double g = 125.E-3;
            double h = 1250000000e-10;
            if (! (e == f && e == g && e == h) )
                return 3;
            if (e + f + g + h != 0.5)
                return 4;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── c
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <53> Unary [!]
                    │   │       ╰── <52>  [&&]
                    │   │           ├── <43>  [&&]
                    │   │           │   ├── <35>  [==]
                    │   │           │   │   ├── <31> Var [a]
                    │   │           │   │   ╰── <34> Var [b]
                    │   │           │   ╰── <42>  [==]
                    │   │           │       ├── <38> Var [a]
                    │   │           │       ╰── <41> Var [c]
                    │   │           ╰── <50>  [==]
                    │   │               ├── <46> Var [a]
                    │   │               ╰── <49> Var [d]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <73>  [!=]
                    │   │       ├── <70>  [+]
                    │   │       │   ├── <66>  [+]
                    │   │       │   │   ├── <62>  [+]
                    │   │       │   │   │   ├── <58> Var [a]
                    │   │       │   │   │   ╰── <61> Var [b]
                    │   │       │   │   ╰── <65> Var [c]
                    │   │       │   ╰── <69> Var [d]
                    │   │       ╰── Constant Double [+4e0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── e
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1.25e-1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── f
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1.25e-1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── g
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1.25e-1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── h
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1.25e-1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <125> Unary [!]
                    │   │       ╰── <124>  [&&]
                    │   │           ├── <115>  [&&]
                    │   │           │   ├── <107>  [==]
                    │   │           │   │   ├── <103> Var [e]
                    │   │           │   │   ╰── <106> Var [f]
                    │   │           │   ╰── <114>  [==]
                    │   │           │       ├── <110> Var [e]
                    │   │           │       ╰── <113> Var [g]
                    │   │           ╰── <122>  [==]
                    │   │               ├── <118> Var [e]
                    │   │               ╰── <121> Var [h]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <145>  [!=]
                    │   │       ├── <142>  [+]
                    │   │       │   ├── <138>  [+]
                    │   │       │   │   ├── <134>  [+]
                    │   │       │   │   │   ├── <130> Var [e]
                    │   │       │   │   │   ╰── <133> Var [f]
                    │   │       │   │   ╰── <137> Var [g]
                    │   │       │   ╰── <141> Var [h]
                    │   │       ╰── Constant Double [+5e-1]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_constants_round_constants() {
    let src = r#"
        int main(void) {
            if (1.00000000000000033306690738754696212708950042724609375 != 1.0000000000000004) {
                return 1;
            }
            if (9223372036854776832.5 != 9223372036854777856.0) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <8>  [!=]
                    │   │       ├── Constant Double [+1.0000000000000004e0]
                    │   │       ╰── Constant Double [+1.0000000000000004e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <17>  [!=]
                    │   │       ├── Constant Double [+9.223372036854778e18]
                    │   │       ╰── Constant Double [+9.223372036854778e18]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_explicit_casts_cvttsd2si_rewrite() {
    let src = r#"
        double glob = 3.0;
        int main(void) {
            long l = -1l;
            int i = -1;
            int j = (int) glob;
            int k = 20;
            if (l != -1l) {
                return 1;
            }
            if (i != -1) {
                return 2;
            }
            if (j != 3) {
                return 3;
            }
            if (k != 20) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── glob
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+3e0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <16> Unary [-]
                    │           ╰── Constant Long [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <24> Unary [-]
                    │           ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── j
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <34> Cast
                    │           ├── Target
                    │           │   ╰── Int
                    │           ╰── Expression
                    │               ╰── <33> Var [glob]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── k
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [20]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <49>  [!=]
                    │   │       ├── <44> Var [l]
                    │   │       ╰── <48> Unary [-]
                    │   │           ╰── Constant Long [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <61>  [!=]
                    │   │       ├── <56> Var [i]
                    │   │       ╰── <60> Unary [-]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <71>  [!=]
                    │   │       ├── <68> Var [j]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <81>  [!=]
                    │   │       ├── <78> Var [k]
                    │   │       ╰── Constant Int [20]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_explicit_casts_double_to_signed() {
    let src = r#"
        int double_to_int(double d) {
            return (int) d;
        }
        long double_to_long(double d) {
            return (long) d;
        }
        int main(void) {
            long l = double_to_long(2148429099.3);
            if (l != 2148429099l) {
                return 1;
            }
            int i = double_to_int(-200000.9999);
            if (i != -200000) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [double_to_int]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12> Cast
            │               ├── Target
            │               │   ╰── Int
            │               ╰── Expression
            │                   ╰── <11> Var [d]
            ├── Function [double_to_long]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ╰── Return
            │           ╰── <27> Cast
            │               ├── Target
            │               │   ╰── Long
            │               ╰── Expression
            │                   ╰── <26> Var [d]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <40> FunctionCall [double_to_long]
                    │           ╰── Constant Double [+2.1484290993e9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <47>  [!=]
                    │   │       ├── <44> Var [l]
                    │   │       ╰── Constant Long [2148429099]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <60> FunctionCall [double_to_int]
                    │           ╰── <59> Unary [-]
                    │               ╰── Constant Double [+2.000009999e5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <69>  [!=]
                    │   │       ├── <64> Var [i]
                    │   │       ╰── <68> Unary [-]
                    │   │           ╰── Constant Int [200000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_explicit_casts_double_to_unsigned() {
    let src = r#"
        unsigned int double_to_uint(double d) {
            return (unsigned int) d;
        }
        unsigned long double_to_ulong(double d) {
            return (unsigned long) d;
        }
        int main(void) {
            if (double_to_uint(10.9) != 10u) {
                return 1;
            }
            if (double_to_uint(2147483750.5) != 2147483750) {
                return 2;
            }
            if (double_to_ulong(34359738368.5) != 34359738368ul) {
                return 3;
            }
            if (double_to_ulong(3458764513821589504.0) != 3458764513821589504ul) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [double_to_uint]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12> Cast
            │               ├── Target
            │               │   ╰── Unsigned Int
            │               ╰── Expression
            │                   ╰── <11> Var [d]
            ├── Function [double_to_ulong]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ╰── Return
            │           ╰── <27> Cast
            │               ├── Target
            │               │   ╰── Unsigned Long
            │               ╰── Expression
            │                   ╰── <26> Var [d]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <40>  [!=]
                    │   │       ├── <37> FunctionCall [double_to_uint]
                    │   │       │   ╰── Constant Double [+1.09e1]
                    │   │       ╰── Constant UInt [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <51>  [!=]
                    │   │       ├── <48> FunctionCall [double_to_uint]
                    │   │       │   ╰── Constant Double [+2.1474837505e9]
                    │   │       ╰── Constant Long [2147483750]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <62>  [!=]
                    │   │       ├── <59> FunctionCall [double_to_ulong]
                    │   │       │   ╰── Constant Double [+3.43597383685e10]
                    │   │       ╰── Constant ULong [34359738368]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <73>  [!=]
                    │   │       ├── <70> FunctionCall [double_to_ulong]
                    │   │       │   ╰── Constant Double [+3.4587645138215895e18]
                    │   │       ╰── Constant ULong [3458764513821589504]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_explicit_casts_rewrite_cvttsd2si_regression() {
    let src = r#"
        int check_12_ints(int start, int a, int b, int c, int d, int e, int f, int g,
                          int h, int i, int j, int k, int l);
        double glob = 5000.;
        int main(void) {
            long should_spill = (long)glob;
            int one = glob - 4999;
            int two = one + one;
            int three = 2 + one;
            int four = two * two;
            int five = 6 - one;
            int six = two * three;
            int seven = one + 6;
            int eight = two * 4;
            int nine = three * three;
            int ten = four + six;
            int eleven = 16 - five;
            int twelve = six + six;
            check_12_ints(one, two, three, four, five, six, seven, eight, nine, ten,
                          eleven, twelve, 1);
            int thirteen = glob - 4987;
            int fourteen = thirteen + 1;
            int fifteen = 28 - thirteen;
            int sixteen = fourteen + 2;
            int seventeen = 4 + thirteen;
            int eighteen = 32 - fourteen;
            int nineteen = 35 - sixteen;
            int twenty = fifteen + 5;
            int twenty_one = thirteen * 2 - 5;
            int twenty_two = fifteen + 7;
            int twenty_three = 6 + seventeen;
            int twenty_four = thirteen + 11;
            check_12_ints(thirteen, fourteen, fifteen, sixteen, seventeen, eighteen,
                          nineteen, twenty, twenty_one, twenty_two, twenty_three,
                          twenty_four, 13);
            if (should_spill != 5000) {
                return -1;
            }
            return 0;
        }
        int check_12_ints(int a, int b, int c, int d, int e, int f, int g, int h, int i,
                          int j, int k, int l, int start) {
            int expected = 0;
            expected = start + 0;
            if (a != expected) {
                return expected;
            }
            expected = start + 1;
            if (b != expected) {
                return expected;
            }
            expected = start + 2;
            if (c != expected) {
                return expected;
            }
            expected = start + 3;
            if (d != expected) {
                return expected;
            }
            expected = start + 4;
            if (e != expected) {
                return expected;
            }
            expected = start + 5;
            if (f != expected) {
                return expected;
            }
            expected = start + 6;
            if (g != expected) {
                return expected;
            }
            expected = start + 7;
            if (h != expected) {
                return expected;
            }
            expected = start + 8;
            if (i != expected) {
                return expected;
            }
            expected = start + 9;
            if (j != expected) {
                return expected;
            }
            expected = start + 10;
            if (k != expected) {
                return expected;
            }
            expected = start + 11;
            if (l != expected) {
                return expected;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [check_12_ints]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── start
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── k
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── l
            │           ╰── Type
            │               ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── glob
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+5e3]
            ├── Function [main]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── should_spill
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <62> Cast
            │       │           ├── Target
            │       │           │   ╰── Long
            │       │           ╰── Expression
            │       │               ╰── <61> Var [glob]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── one
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <72>  [-]
            │       │           ├── <69> Var [glob]
            │       │           ╰── Constant Int [4999]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── two
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <83>  [+]
            │       │           ├── <79> Var [one]
            │       │           ╰── <82> Var [one]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── three
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <93>  [+]
            │       │           ├── Constant Int [2]
            │       │           ╰── <92> Var [one]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── four
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <104>  [*]
            │       │           ├── <100> Var [two]
            │       │           ╰── <103> Var [two]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── five
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <114>  [-]
            │       │           ├── Constant Int [6]
            │       │           ╰── <113> Var [one]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── six
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <125>  [*]
            │       │           ├── <121> Var [two]
            │       │           ╰── <124> Var [three]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── seven
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <135>  [+]
            │       │           ├── <132> Var [one]
            │       │           ╰── Constant Int [6]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eight
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <145>  [*]
            │       │           ├── <142> Var [two]
            │       │           ╰── Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── nine
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <156>  [*]
            │       │           ├── <152> Var [three]
            │       │           ╰── <155> Var [three]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ten
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <167>  [+]
            │       │           ├── <163> Var [four]
            │       │           ╰── <166> Var [six]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eleven
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <177>  [-]
            │       │           ├── Constant Int [16]
            │       │           ╰── <176> Var [five]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twelve
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <188>  [+]
            │       │           ├── <184> Var [six]
            │       │           ╰── <187> Var [six]
            │       ├── <217> FunctionCall [check_12_ints]
            │       │   ├── <193> Var [one]
            │       │   ├── <195> Var [two]
            │       │   ├── <197> Var [three]
            │       │   ├── <199> Var [four]
            │       │   ├── <201> Var [five]
            │       │   ├── <203> Var [six]
            │       │   ├── <205> Var [seven]
            │       │   ├── <207> Var [eight]
            │       │   ├── <209> Var [nine]
            │       │   ├── <211> Var [ten]
            │       │   ├── <213> Var [eleven]
            │       │   ├── <215> Var [twelve]
            │       │   ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── thirteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <226>  [-]
            │       │           ├── <223> Var [glob]
            │       │           ╰── Constant Int [4987]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── fourteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <236>  [+]
            │       │           ├── <233> Var [thirteen]
            │       │           ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── fifteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <246>  [-]
            │       │           ├── Constant Int [28]
            │       │           ╰── <245> Var [thirteen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── sixteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <256>  [+]
            │       │           ├── <253> Var [fourteen]
            │       │           ╰── Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── seventeen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <266>  [+]
            │       │           ├── Constant Int [4]
            │       │           ╰── <265> Var [thirteen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── eighteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <276>  [-]
            │       │           ├── Constant Int [32]
            │       │           ╰── <275> Var [fourteen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── nineteen
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <286>  [-]
            │       │           ├── Constant Int [35]
            │       │           ╰── <285> Var [sixteen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <296>  [+]
            │       │           ├── <293> Var [fifteen]
            │       │           ╰── Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty_one
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <309>  [-]
            │       │           ├── <306>  [*]
            │       │           │   ├── <303> Var [thirteen]
            │       │           │   ╰── Constant Int [2]
            │       │           ╰── Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty_two
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <319>  [+]
            │       │           ├── <316> Var [fifteen]
            │       │           ╰── Constant Int [7]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty_three
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <329>  [+]
            │       │           ├── Constant Int [6]
            │       │           ╰── <328> Var [seventeen]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── twenty_four
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <339>  [+]
            │       │           ├── <336> Var [thirteen]
            │       │           ╰── Constant Int [11]
            │       ├── <368> FunctionCall [check_12_ints]
            │       │   ├── <344> Var [thirteen]
            │       │   ├── <346> Var [fourteen]
            │       │   ├── <348> Var [fifteen]
            │       │   ├── <350> Var [sixteen]
            │       │   ├── <352> Var [seventeen]
            │       │   ├── <354> Var [eighteen]
            │       │   ├── <356> Var [nineteen]
            │       │   ├── <358> Var [twenty]
            │       │   ├── <360> Var [twenty_one]
            │       │   ├── <362> Var [twenty_two]
            │       │   ├── <364> Var [twenty_three]
            │       │   ├── <366> Var [twenty_four]
            │       │   ╰── Constant Int [13]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <374>  [!=]
            │       │   │       ├── <371> Var [should_spill]
            │       │   │       ╰── Constant Int [5000]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <377> Unary [-]
            │       │                   ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [check_12_ints]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── e
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── f
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── g
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── h
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── j
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── k
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── l
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── start
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── expected
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <443> Assign [=]
                    │   ├── <436> Var [expected]
                    │   ╰── <442>  [+]
                    │       ├── <439> Var [start]
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <450>  [!=]
                    │   │       ├── <446> Var [a]
                    │   │       ╰── <449> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <452> Var [expected]
                    ├── <465> Assign [=]
                    │   ├── <458> Var [expected]
                    │   ╰── <464>  [+]
                    │       ├── <461> Var [start]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <472>  [!=]
                    │   │       ├── <468> Var [b]
                    │   │       ╰── <471> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <474> Var [expected]
                    ├── <487> Assign [=]
                    │   ├── <480> Var [expected]
                    │   ╰── <486>  [+]
                    │       ├── <483> Var [start]
                    │       ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <494>  [!=]
                    │   │       ├── <490> Var [c]
                    │   │       ╰── <493> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <496> Var [expected]
                    ├── <509> Assign [=]
                    │   ├── <502> Var [expected]
                    │   ╰── <508>  [+]
                    │       ├── <505> Var [start]
                    │       ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <516>  [!=]
                    │   │       ├── <512> Var [d]
                    │   │       ╰── <515> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <518> Var [expected]
                    ├── <531> Assign [=]
                    │   ├── <524> Var [expected]
                    │   ╰── <530>  [+]
                    │       ├── <527> Var [start]
                    │       ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <538>  [!=]
                    │   │       ├── <534> Var [e]
                    │   │       ╰── <537> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <540> Var [expected]
                    ├── <553> Assign [=]
                    │   ├── <546> Var [expected]
                    │   ╰── <552>  [+]
                    │       ├── <549> Var [start]
                    │       ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <560>  [!=]
                    │   │       ├── <556> Var [f]
                    │   │       ╰── <559> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <562> Var [expected]
                    ├── <575> Assign [=]
                    │   ├── <568> Var [expected]
                    │   ╰── <574>  [+]
                    │       ├── <571> Var [start]
                    │       ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <582>  [!=]
                    │   │       ├── <578> Var [g]
                    │   │       ╰── <581> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <584> Var [expected]
                    ├── <597> Assign [=]
                    │   ├── <590> Var [expected]
                    │   ╰── <596>  [+]
                    │       ├── <593> Var [start]
                    │       ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <604>  [!=]
                    │   │       ├── <600> Var [h]
                    │   │       ╰── <603> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <606> Var [expected]
                    ├── <619> Assign [=]
                    │   ├── <612> Var [expected]
                    │   ╰── <618>  [+]
                    │       ├── <615> Var [start]
                    │       ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <626>  [!=]
                    │   │       ├── <622> Var [i]
                    │   │       ╰── <625> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <628> Var [expected]
                    ├── <641> Assign [=]
                    │   ├── <634> Var [expected]
                    │   ╰── <640>  [+]
                    │       ├── <637> Var [start]
                    │       ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <648>  [!=]
                    │   │       ├── <644> Var [j]
                    │   │       ╰── <647> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <650> Var [expected]
                    ├── <663> Assign [=]
                    │   ├── <656> Var [expected]
                    │   ╰── <662>  [+]
                    │       ├── <659> Var [start]
                    │       ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <670>  [!=]
                    │   │       ├── <666> Var [k]
                    │   │       ╰── <669> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <672> Var [expected]
                    ├── <685> Assign [=]
                    │   ├── <678> Var [expected]
                    │   ╰── <684>  [+]
                    │       ├── <681> Var [start]
                    │       ╰── Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <692>  [!=]
                    │   │       ├── <688> Var [l]
                    │   │       ╰── <691> Var [expected]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <694> Var [expected]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_explicit_casts_signed_to_double() {
    let src = r#"
        
        double int_to_double(int i) {
            return (double) i;
        }
        double long_to_double(long l) {
            return (double) l;
        }
        int main(void) {
            if (int_to_double(-100000) != -100000.0) {
                return 1;
            }
            if (long_to_double(-9007199254751227l) != -9007199254751228.0) {
                return 2;
            }
            double d = (double) 1152921504606846977l;
            if (d != 1152921504606846976.0) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [int_to_double]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12> Cast
            │               ├── Target
            │               │   ╰── Double
            │               ╰── Expression
            │                   ╰── <11> Var [i]
            ├── Function [long_to_double]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── l
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <27> Cast
            │               ├── Target
            │               │   ╰── Double
            │               ╰── Expression
            │                   ╰── <26> Var [l]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <44>  [!=]
                    │   │       ├── <39> FunctionCall [int_to_double]
                    │   │       │   ╰── <38> Unary [-]
                    │   │       │       ╰── Constant Int [100000]
                    │   │       ╰── <43> Unary [-]
                    │   │           ╰── Constant Double [+1e5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <59>  [!=]
                    │   │       ├── <54> FunctionCall [long_to_double]
                    │   │       │   ╰── <53> Unary [-]
                    │   │       │       ╰── Constant Long [9007199254751227]
                    │   │       ╰── <58> Unary [-]
                    │   │           ╰── Constant Double [+9.007199254751228e15]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <71> Cast
                    │           ├── Target
                    │           │   ╰── Double
                    │           ╰── Expression
                    │               ╰── Constant Long [1152921504606846977]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <78>  [!=]
                    │   │       ├── <75> Var [d]
                    │   │       ╰── Constant Double [+1.152921504606847e18]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_explicit_casts_unsigned_to_double() {
    let src = r#"
        
        double uint_to_double(unsigned int ui) {
            return (double) ui;
        }
        double ulong_to_double(unsigned long ul) {
            return (double) ul;
        }
        int main(void) {
            if (uint_to_double(1000u) != 1000.0) {
                return 1;
            }
            if (uint_to_double(4294967200u) != 4294967200.0) {
                return 2;
            }
            if (ulong_to_double(138512825844ul) != 138512825844.0) {
                return 3;
            }
            if (ulong_to_double(10223372036854775816ul) != 10223372036854775808.0) {
                return 4;
            }
            if (ulong_to_double(9223372036854776832ul) != 9223372036854775808.0) {
                return 5;
            }
            if (ulong_to_double(9223372036854776833ul) != 9223372036854777856.0) {
                return 6;
            }
            if (ulong_to_double(9223372036854776831ul) != 9223372036854775808.0) {
                return 7;
            }
            if (ulong_to_double(9223372036854776830ul) != 9223372036854775808.0) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [uint_to_double]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ui
            │   │       ╰── Type
            │   │           ╰── Unsigned Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12> Cast
            │               ├── Target
            │               │   ╰── Double
            │               ╰── Expression
            │                   ╰── <11> Var [ui]
            ├── Function [ulong_to_double]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ul
            │   │       ╰── Type
            │   │           ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <27> Cast
            │               ├── Target
            │               │   ╰── Double
            │               ╰── Expression
            │                   ╰── <26> Var [ul]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <40>  [!=]
                    │   │       ├── <37> FunctionCall [uint_to_double]
                    │   │       │   ╰── Constant UInt [1000]
                    │   │       ╰── Constant Double [+1e3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <51>  [!=]
                    │   │       ├── <48> FunctionCall [uint_to_double]
                    │   │       │   ╰── Constant UInt [4294967200]
                    │   │       ╰── Constant Double [+4.2949672e9]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <62>  [!=]
                    │   │       ├── <59> FunctionCall [ulong_to_double]
                    │   │       │   ╰── Constant ULong [138512825844]
                    │   │       ╰── Constant Double [+1.38512825844e11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <73>  [!=]
                    │   │       ├── <70> FunctionCall [ulong_to_double]
                    │   │       │   ╰── Constant ULong [10223372036854775816]
                    │   │       ╰── Constant Double [+1.0223372036854776e19]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <84>  [!=]
                    │   │       ├── <81> FunctionCall [ulong_to_double]
                    │   │       │   ╰── Constant ULong [9223372036854776832]
                    │   │       ╰── Constant Double [+9.223372036854776e18]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <95>  [!=]
                    │   │       ├── <92> FunctionCall [ulong_to_double]
                    │   │       │   ╰── Constant ULong [9223372036854776833]
                    │   │       ╰── Constant Double [+9.223372036854778e18]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <106>  [!=]
                    │   │       ├── <103> FunctionCall [ulong_to_double]
                    │   │       │   ╰── Constant ULong [9223372036854776831]
                    │   │       ╰── Constant Double [+9.223372036854776e18]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <117>  [!=]
                    │   │       ├── <114> FunctionCall [ulong_to_double]
                    │   │       │   ╰── Constant ULong [9223372036854776830]
                    │   │       ╰── Constant Double [+9.223372036854776e18]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_extra_credit_compound_assign() {
    let src = r#"
        
        int main(void) {
            double d = 10.0;
            d /= 4.0;
            if (d != 2.5) {
                return 1;
            }
            d *= 10000.0;
            if (d != 25000.0) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e1]
                    ├── <15> Assign [/=]
                    │   ├── <12> Var [d]
                    │   ╰── Constant Double [+4e0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <21>  [!=]
                    │   │       ├── <18> Var [d]
                    │   │       ╰── Constant Double [+2.5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <31> Assign [*=]
                    │   ├── <28> Var [d]
                    │   ╰── Constant Double [+1e4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37>  [!=]
                    │   │       ├── <34> Var [d]
                    │   │       ╰── Constant Double [+2.5e4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_extra_credit_compound_assign_implicit_cast() {
    let src = r#"
        int main(void) {
            double d = 1000.5;
            d += 1000;
            if (d != 2000.5) {
                return 1;
            }
            unsigned long ul = 18446744073709551586ul;
            ul -= 1.5E19;
            if (ul != 3446744073709551616ul) {
                return 2;
            }
            int i = 10;
            i += 0.99999;
            if (i != 10) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1.0005e3]
                    ├── <15> Assign [+=]
                    │   ├── <12> Var [d]
                    │   ╰── Constant Int [1000]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <21>  [!=]
                    │   │       ├── <18> Var [d]
                    │   │       ╰── Constant Double [+2.0005e3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [18446744073709551586]
                    ├── <37> Assign [-=]
                    │   ├── <34> Var [ul]
                    │   ╰── Constant Double [+1.5e19]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <43>  [!=]
                    │   │       ├── <40> Var [ul]
                    │   │       ╰── Constant ULong [3446744073709551616]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── <59> Assign [+=]
                    │   ├── <56> Var [i]
                    │   ╰── Constant Double [+9.9999e-1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <65>  [!=]
                    │   │       ├── <62> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_extra_credit_incr_and_decr() {
    let src = r#"
        
        int main(void) {
            static double d = 0.75;
            if (d++ != 0.75) {
                return 1;
            }
            if (d != 1.75) {
                return 2;
            }
            d = -100.2;
            if (++d != -99.2) {
                return 3;
            }
            if (d != -99.2) {
                return 4;
            }
            if (d-- != -99.2) {
                return 5;
            }
            if (d != -100.2) {
                return 6;
            }
            if (--d != -101.2) {
                return 7;
            }
            if (d != -101.2) {
                return 8;
            }
            d = 0.000000000000000000001;
            d++;
            if (d != 1.0) {
                return 9;
            }
            d = 10e20;
            d--;
            if (d != 10e20) {
                return 10;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ├── Initializer
                    │   │   ╰── Constant Double [+7.5e-1]
                    │   ╰── Static
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <18>  [!=]
                    │   │       ├── <15> Postfix [++]
                    │   │       │   ╰── <13> Var [d]
                    │   │       ╰── Constant Double [+7.5e-1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <28>  [!=]
                    │   │       ├── <25> Var [d]
                    │   │       ╰── Constant Double [+1.75e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── <40> Assign [=]
                    │   ├── <35> Var [d]
                    │   ╰── <39> Unary [-]
                    │       ╰── Constant Double [+1.002e2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <50>  [!=]
                    │   │       ├── <45> Unary [++]
                    │   │       │   ╰── <44> Var [d]
                    │   │       ╰── <49> Unary [-]
                    │   │           ╰── Constant Double [+9.92e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <62>  [!=]
                    │   │       ├── <57> Var [d]
                    │   │       ╰── <61> Unary [-]
                    │   │           ╰── Constant Double [+9.92e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <76>  [!=]
                    │   │       ├── <71> Postfix [--]
                    │   │       │   ╰── <69> Var [d]
                    │   │       ╰── <75> Unary [-]
                    │   │           ╰── Constant Double [+9.92e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <88>  [!=]
                    │   │       ├── <83> Var [d]
                    │   │       ╰── <87> Unary [-]
                    │   │           ╰── Constant Double [+1.002e2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <102>  [!=]
                    │   │       ├── <97> Unary [--]
                    │   │       │   ╰── <96> Var [d]
                    │   │       ╰── <101> Unary [-]
                    │   │           ╰── Constant Double [+1.012e2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <114>  [!=]
                    │   │       ├── <109> Var [d]
                    │   │       ╰── <113> Unary [-]
                    │   │           ╰── Constant Double [+1.012e2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── <124> Assign [=]
                    │   ├── <121> Var [d]
                    │   ╰── Constant Double [+1e-21]
                    ├── <129> Postfix [++]
                    │   ╰── <127> Var [d]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <135>  [!=]
                    │   │       ├── <132> Var [d]
                    │   │       ╰── Constant Double [+1e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── <145> Assign [=]
                    │   ├── <142> Var [d]
                    │   ╰── Constant Double [+1e21]
                    ├── <150> Postfix [--]
                    │   ╰── <148> Var [d]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <156>  [!=]
                    │   │       ├── <153> Var [d]
                    │   │       ╰── Constant Double [+1e21]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [10]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_extra_credit_nan() {
    let src = r#"
        int double_isnan(double d);
        int main(void) {
            static double zero = 0.0;
            double nan = 0.0 / zero;
            if (nan < 0.0 || nan == 0.0 || nan > 0.0 || nan <= 0.0 || nan >= 0.0)
                return 1;
            if (1 < nan || 1 == nan || 1 > nan || 1 <= nan || 1 >= nan)
                return 2;
            if (nan == nan)
                return 3;
            if (!(nan != nan)) {
                return 4;
            }
            if (!double_isnan(nan)) {
                return 5;
            }
            if (!double_isnan(4 * nan)) {
                return 6;
            }
            if (!double_isnan(22e2 / nan)) {
                return 7;
            }
            if (!double_isnan(-nan)) {
                return 8;
            }
            if (!nan) {
                return 9;
            }
            if (nan) {
            } else {
                return 10;
            }
            int nan_is_nonzero;
            for (nan_is_nonzero = 0; nan;) {
                nan_is_nonzero = 1;
                break;
            }
            if (!nan_is_nonzero) {
                return 11;
            }
            nan_is_nonzero = 0;
            while (nan) {
                nan_is_nonzero = 1;
                break;
            }
            if (!nan_is_nonzero) {
                return 12;
            }
            nan_is_nonzero = -1;
            do {
                nan_is_nonzero = nan_is_nonzero + 1;
                if (nan_is_nonzero) {
                    break;
                }
            } while (nan);
            if (!nan_is_nonzero) {
                return 13;
            }
            nan_is_nonzero = nan ? 1 : 0;
            if (!nan_is_nonzero) {
                return 14;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [double_isnan]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d
            │           ╰── Type
            │               ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── zero
                    │   ├── Type
                    │   │   ╰── Double
                    │   ├── Initializer
                    │   │   ╰── Constant Double [+0e0]
                    │   ╰── Static
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── nan
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <27>  [/]
                    │           ├── Constant Double [+0e0]
                    │           ╰── <26> Var [zero]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <62>  [||]
                    │   │       ├── <55>  [||]
                    │   │       │   ├── <48>  [||]
                    │   │       │   │   ├── <41>  [||]
                    │   │       │   │   │   ├── <34>  [<]
                    │   │       │   │   │   │   ├── <31> Var [nan]
                    │   │       │   │   │   │   ╰── Constant Double [+0e0]
                    │   │       │   │   │   ╰── <40>  [==]
                    │   │       │   │   │       ├── <37> Var [nan]
                    │   │       │   │   │       ╰── Constant Double [+0e0]
                    │   │       │   │   ╰── <47>  [>]
                    │   │       │   │       ├── <44> Var [nan]
                    │   │       │   │       ╰── Constant Double [+0e0]
                    │   │       │   ╰── <54>  [<=]
                    │   │       │       ├── <51> Var [nan]
                    │   │       │       ╰── Constant Double [+0e0]
                    │   │       ╰── <61>  [>=]
                    │   │           ├── <58> Var [nan]
                    │   │           ╰── Constant Double [+0e0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <98>  [||]
                    │   │       ├── <91>  [||]
                    │   │       │   ├── <84>  [||]
                    │   │       │   │   ├── <77>  [||]
                    │   │       │   │   │   ├── <70>  [<]
                    │   │       │   │   │   │   ├── Constant Int [1]
                    │   │       │   │   │   │   ╰── <69> Var [nan]
                    │   │       │   │   │   ╰── <76>  [==]
                    │   │       │   │   │       ├── Constant Int [1]
                    │   │       │   │   │       ╰── <75> Var [nan]
                    │   │       │   │   ╰── <83>  [>]
                    │   │       │   │       ├── Constant Int [1]
                    │   │       │   │       ╰── <82> Var [nan]
                    │   │       │   ╰── <90>  [<=]
                    │   │       │       ├── Constant Int [1]
                    │   │       │       ╰── <89> Var [nan]
                    │   │       ╰── <97>  [>=]
                    │   │           ├── Constant Int [1]
                    │   │           ╰── <96> Var [nan]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <107>  [==]
                    │   │       ├── <103> Var [nan]
                    │   │       ╰── <106> Var [nan]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <119> Unary [!]
                    │   │       ╰── <118>  [!=]
                    │   │           ├── <113> Var [nan]
                    │   │           ╰── <116> Var [nan]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <130> Unary [!]
                    │   │       ╰── <129> FunctionCall [double_isnan]
                    │   │           ╰── <128> Var [nan]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <144> Unary [!]
                    │   │       ╰── <143> FunctionCall [double_isnan]
                    │   │           ╰── <142>  [*]
                    │   │               ├── Constant Int [4]
                    │   │               ╰── <141> Var [nan]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <158> Unary [!]
                    │   │       ╰── <157> FunctionCall [double_isnan]
                    │   │           ╰── <156>  [/]
                    │   │               ├── Constant Double [+2.2e3]
                    │   │               ╰── <155> Var [nan]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <171> Unary [!]
                    │   │       ╰── <170> FunctionCall [double_isnan]
                    │   │           ╰── <169> Unary [-]
                    │   │               ╰── <168> Var [nan]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <180> Unary [!]
                    │   │       ╰── <179> Var [nan]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <187> Var [nan]
                    │   ├── Then
                    │   │   ╰── Block
                    │   ╰── Else
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── nan_is_nonzero
                    │   ╰── Type
                    │       ╰── Int
                    ├── For
                    │   ├── Init
                    │   │   ╰── <203> Assign [=]
                    │   │       ├── <200> Var [nan_is_nonzero]
                    │   │       ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <205> Var [nan]
                    │   ╰── Block
                    │       ├── <210> Assign [=]
                    │       │   ├── <207> Var [nan_is_nonzero]
                    │       │   ╰── Constant Int [1]
                    │       ╰── Break
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <219> Unary [!]
                    │   │       ╰── <218> Var [nan_is_nonzero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [11]
                    ├── <229> Assign [=]
                    │   ├── <226> Var [nan_is_nonzero]
                    │   ╰── Constant Int [0]
                    ├── While
                    │   ├── Condition
                    │   │   ╰── <232> Var [nan]
                    │   ╰── Body
                    │       ╰── Block
                    │           ├── <237> Assign [=]
                    │           │   ├── <234> Var [nan_is_nonzero]
                    │           │   ╰── Constant Int [1]
                    │           ╰── Break
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <246> Unary [!]
                    │   │       ╰── <245> Var [nan_is_nonzero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [12]
                    ├── <258> Assign [=]
                    │   ├── <253> Var [nan_is_nonzero]
                    │   ╰── <257> Unary [-]
                    │       ╰── Constant Int [1]
                    ├── DoWhile
                    │   ├── Body
                    │   │   ╰── Block
                    │   │       ├── <268> Assign [=]
                    │   │       │   ├── <261> Var [nan_is_nonzero]
                    │   │       │   ╰── <267>  [+]
                    │   │       │       ├── <264> Var [nan_is_nonzero]
                    │   │       │       ╰── Constant Int [1]
                    │   │       ╰── If
                    │   │           ├── Condition
                    │   │           │   ╰── <271> Var [nan_is_nonzero]
                    │   │           ╰── Then
                    │   │               ╰── Block
                    │   │                   ╰── Break
                    │   ╰── Condition
                    │       ╰── <279> Var [nan]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <284> Unary [!]
                    │   │       ╰── <283> Var [nan_is_nonzero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [13]
                    ├── <298> Assign [=]
                    │   ├── <291> Var [nan_is_nonzero]
                    │   ╰── <{node_id}> Conditional [?]
                    │       ├── <294> Var [nan]
                    │       ├── Then
                    │       │   ╰── Constant Int [1]
                    │       ╰── Else
                    │           ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <303> Unary [!]
                    │   │       ╰── <302> Var [nan_is_nonzero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [14]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_extra_credit_nan_compound_assign() {
    let src = r#"
        int double_isnan(double d);
        int main(void) {
            static double zero = 0.0;
            double nan = 0.0 / zero;
            if (!double_isnan(nan += 99.2)) {
                return 1;
            }
            if (!double_isnan(nan -= nan)) {
                return 2;
            }
            if (!double_isnan(nan *= 4.0)) {
                return 3;
            }
            if (!double_isnan(nan /= 0.0)) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [double_isnan]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d
            │           ╰── Type
            │               ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── zero
                    │   ├── Type
                    │   │   ╰── Double
                    │   ├── Initializer
                    │   │   ╰── Constant Double [+0e0]
                    │   ╰── Static
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── nan
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <27>  [/]
                    │           ├── Constant Double [+0e0]
                    │           ╰── <26> Var [zero]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <38> Unary [!]
                    │   │       ╰── <37> FunctionCall [double_isnan]
                    │   │           ╰── <36> Assign [+=]
                    │   │               ├── <33> Var [nan]
                    │   │               ╰── Constant Double [+9.92e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <53> Unary [!]
                    │   │       ╰── <52> FunctionCall [double_isnan]
                    │   │           ╰── <51> Assign [-=]
                    │   │               ├── <47> Var [nan]
                    │   │               ╰── <50> Var [nan]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <67> Unary [!]
                    │   │       ╰── <66> FunctionCall [double_isnan]
                    │   │           ╰── <65> Assign [*=]
                    │   │               ├── <62> Var [nan]
                    │   │               ╰── Constant Double [+4e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <81> Unary [!]
                    │   │       ╰── <80> FunctionCall [double_isnan]
                    │   │           ╰── <79> Assign [/=]
                    │   │               ├── <76> Var [nan]
                    │   │               ╰── Constant Double [+0e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_extra_credit_nan_incr_and_decr() {
    let src = r#"
        int double_isnan(double d);
        int main(void) {
            static double zero = 0.0;
            double nan = 0.0 / zero;
            if (!double_isnan(++nan)) {
                return 1;
            }
            if (!double_isnan(--nan)) {
                return 2;
            }
            if (!double_isnan(nan++)) {
                return 3;
            }
            if (!double_isnan(nan--)) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [double_isnan]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d
            │           ╰── Type
            │               ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── zero
                    │   ├── Type
                    │   │   ╰── Double
                    │   ├── Initializer
                    │   │   ╰── Constant Double [+0e0]
                    │   ╰── Static
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── nan
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <27>  [/]
                    │           ├── Constant Double [+0e0]
                    │           ╰── <26> Var [zero]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37> Unary [!]
                    │   │       ╰── <36> FunctionCall [double_isnan]
                    │   │           ╰── <35> Unary [++]
                    │   │               ╰── <34> Var [nan]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <50> Unary [!]
                    │   │       ╰── <49> FunctionCall [double_isnan]
                    │   │           ╰── <48> Unary [--]
                    │   │               ╰── <47> Var [nan]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <63> Unary [!]
                    │   │       ╰── <62> FunctionCall [double_isnan]
                    │   │           ╰── <61> Postfix [++]
                    │   │               ╰── <59> Var [nan]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <76> Unary [!]
                    │   │       ╰── <75> FunctionCall [double_isnan]
                    │   │           ╰── <74> Postfix [--]
                    │   │               ╰── <72> Var [nan]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_floating_expressions_arithmetic_ops() {
    let src = r#"
        double point_one = 0.1;
        double point_two = 0.2;
        double point_three = 0.3;
        double two = 2.0;
        double three = 3.0;
        double four = 4.0;
        double twelveE30 = 12e30;
        int addition(void) {
            return (point_one + point_two == 0.30000000000000004);
        }
        int subtraction(void) {
            return (four - 1.0 == 3.0);
        }
        int multiplication(void) {
            return (0.01 * point_three == 0.003);
        }
        int division(void) {
            return (7.0 / two == 3.5);
        }
        int negation(void) {
            double neg = -twelveE30;
            return !(12e30 + neg);
        }
        int complex_expression(void) {
            double complex_expression = (two + three) - 127.5 * four;
            return complex_expression == -505.0;
        }
        int main(void) {
            if (!addition()) {
                return 1;
            }
            if (!subtraction()){
                return 2;
            }
            if (!multiplication()) {
                return 3;
            }
            if (!division()) {
                return 4;
            }
            if (!negation()) {
                return 5;
            }
            if (!complex_expression()) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── point_one
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+1e-1]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── point_two
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+2e-1]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── point_three
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+3e-1]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── two
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+2e0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── three
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+3e0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── four
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+4e0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── twelveE30
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+1.2e31]
            ├── Function [addition]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <56>  [==]
            │               ├── <52>  [+]
            │               │   ├── <48> Var [point_one]
            │               │   ╰── <51> Var [point_two]
            │               ╰── Constant Double [+3.0000000000000004e-1]
            ├── Function [subtraction]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <72>  [==]
            │               ├── <68>  [-]
            │               │   ├── <65> Var [four]
            │               │   ╰── Constant Double [+1e0]
            │               ╰── Constant Double [+3e0]
            ├── Function [multiplication]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <88>  [==]
            │               ├── <84>  [*]
            │               │   ├── Constant Double [+1e-2]
            │               │   ╰── <83> Var [point_three]
            │               ╰── Constant Double [+3e-3]
            ├── Function [division]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <104>  [==]
            │               ├── <100>  [/]
            │               │   ├── Constant Double [+7e0]
            │               │   ╰── <99> Var [two]
            │               ╰── Constant Double [+3.5e0]
            ├── Function [negation]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── neg
            │       │   ├── Type
            │       │   │   ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <118> Unary [-]
            │       │           ╰── <117> Var [twelveE30]
            │       ╰── Return
            │           ╰── <128> Unary [!]
            │               ╰── <127>  [+]
            │                   ├── Constant Double [+1.2e31]
            │                   ╰── <125> Var [neg]
            ├── Function [complex_expression]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── complex_expression
            │       │   ├── Type
            │       │   │   ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <152>  [-]
            │       │           ├── <145>  [+]
            │       │           │   ├── <140> Var [two]
            │       │           │   ╰── <143> Var [three]
            │       │           ╰── <151>  [*]
            │       │               ├── Constant Double [+1.275e2]
            │       │               ╰── <150> Var [four]
            │       ╰── Return
            │           ╰── <161>  [==]
            │               ├── <156> Var [complex_expression]
            │               ╰── <160> Unary [-]
            │                   ╰── Constant Double [+5.05e2]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <172> Unary [!]
                    │   │       ╰── <171> FunctionCall [addition]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <181> Unary [!]
                    │   │       ╰── <180> FunctionCall [subtraction]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <190> Unary [!]
                    │   │       ╰── <189> FunctionCall [multiplication]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <199> Unary [!]
                    │   │       ╰── <198> FunctionCall [division]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <208> Unary [!]
                    │   │       ╰── <207> FunctionCall [negation]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <217> Unary [!]
                    │   │       ╰── <216> FunctionCall [complex_expression]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_floating_expressions_comparisons() {
    let src = r#"
        double fifty_fiveE5 = 55e5;
        double fifty_fourE4 = 54e4;
        double tiny = .00004;
        double four = 4.;
        double point_one = 0.1;
        int main(void) {
            if (fifty_fiveE5 < fifty_fourE4) {
                return 1;
            }
            if (four > 4.0) {
                return 2;
            }
            if (tiny <= 0.0) {
                return 3;
            }
            if (fifty_fourE4 >= fifty_fiveE5) {
                return 4;
            }
            if (tiny == 0.0) {
                return 5;
            }
            if (point_one != point_one) {
                return 6;
            }
            if (!(tiny > 00.000005)) {
                return 7;
            }
            if (!(-.00004 < four)) {
                return 8;
            }
            if (!(tiny <= tiny)) {
                return 9;
            }
            if (!(fifty_fiveE5 >= fifty_fiveE5)) {
                return 10;
            }
            if (!(0.1 == point_one)) {
                return 11;
            }
            if (!(tiny != .00003)) {
                return 12;
            }
            if (0.00003 < 0.000000000003) {
                return 13;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── fifty_fiveE5
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+5.5e6]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── fifty_fourE4
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+5.4e5]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── tiny
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+4e-5]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── four
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+4e0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── point_one
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+1e-1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <40>  [<]
                    │   │       ├── <36> Var [fifty_fiveE5]
                    │   │       ╰── <39> Var [fifty_fourE4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <50>  [>]
                    │   │       ├── <47> Var [four]
                    │   │       ╰── Constant Double [+4e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <60>  [<=]
                    │   │       ├── <57> Var [tiny]
                    │   │       ╰── Constant Double [+0e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <71>  [>=]
                    │   │       ├── <67> Var [fifty_fourE4]
                    │   │       ╰── <70> Var [fifty_fiveE5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <81>  [==]
                    │   │       ├── <78> Var [tiny]
                    │   │       ╰── Constant Double [+0e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <92>  [!=]
                    │   │       ├── <88> Var [point_one]
                    │   │       ╰── <91> Var [point_one]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <105> Unary [!]
                    │   │       ╰── <104>  [>]
                    │   │           ├── <100> Var [tiny]
                    │   │           ╰── Constant Double [+5e-6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <120> Unary [!]
                    │   │       ╰── <119>  [<]
                    │   │           ├── <114> Unary [-]
                    │   │           │   ╰── Constant Double [+4e-5]
                    │   │           ╰── <117> Var [four]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <134> Unary [!]
                    │   │       ╰── <133>  [<=]
                    │   │           ├── <128> Var [tiny]
                    │   │           ╰── <131> Var [tiny]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <148> Unary [!]
                    │   │       ╰── <147>  [>=]
                    │   │           ├── <142> Var [fifty_fiveE5]
                    │   │           ╰── <145> Var [fifty_fiveE5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <161> Unary [!]
                    │   │       ╰── <160>  [==]
                    │   │           ├── Constant Double [+1e-1]
                    │   │           ╰── <158> Var [point_one]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <174> Unary [!]
                    │   │       ╰── <173>  [!=]
                    │   │           ├── <169> Var [tiny]
                    │   │           ╰── Constant Double [+3e-5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <183>  [<]
                    │   │       ├── Constant Double [+3e-5]
                    │   │       ╰── Constant Double [+3e-12]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [13]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_floating_expressions_logical() {
    let src = r#"
        double zero = 0.0;
        double non_zero = 1E-20;
        double one = 1.0;
        double rounded_to_zero = 1e-330;
        int main(void) {
            if (zero) {
                return 1;
            }
            if (rounded_to_zero) {
                return 2;
            }
            if (non_zero) {
            } else {
                return 3;
            }
            if (0.e10) {
                return 4;
            }
            if (!non_zero) {
                return 4;
            }
            if (!(!zero)) {
                return 5;
            }
            if (!(!rounded_to_zero)) {
                return 6;
            }
            if (!(non_zero && 1.0)) {
                return 8;
            }
            if (3.0 && zero) {
                return 8;
            }
            if (rounded_to_zero && 1000e10) {
                return 9;
            }
            if (18446744073709551615UL && zero) {
                return 10;
            }
            if (!(non_zero && 5l)) {
                return 11;
            }
            if (!(5.0 || zero)) {
                return 12;
            }
            if (zero || rounded_to_zero) {
                return 13;
            }
            if (!(rounded_to_zero || 0.0001)) {
                return 14;
            }
            if (!(non_zero || 0u)) {
                return 15;
            }
            if (!(0 || 0.0000005)) {
                return 16;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── zero
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+0e0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── non_zero
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+1e-20]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── one
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+1e0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── rounded_to_zero
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+0e0]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <30> Var [zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37> Var [rounded_to_zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <44> Var [non_zero]
                    │   ├── Then
                    │   │   ╰── Block
                    │   ╰── Else
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── Constant Double [+0e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <61> Unary [!]
                    │   │       ╰── <60> Var [non_zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <73> Unary [!]
                    │   │       ╰── <72> Unary [!]
                    │   │           ╰── <70> Var [zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <85> Unary [!]
                    │   │       ╰── <84> Unary [!]
                    │   │           ╰── <82> Var [rounded_to_zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <98> Unary [!]
                    │   │       ╰── <97>  [&&]
                    │   │           ├── <93> Var [non_zero]
                    │   │           ╰── Constant Double [+1e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <108>  [&&]
                    │   │       ├── Constant Double [+3e0]
                    │   │       ╰── <107> Var [zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <118>  [&&]
                    │   │       ├── <115> Var [rounded_to_zero]
                    │   │       ╰── Constant Double [+1e13]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <128>  [&&]
                    │   │       ├── Constant ULong [18446744073709551615]
                    │   │       ╰── <127> Var [zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <141> Unary [!]
                    │   │       ╰── <140>  [&&]
                    │   │           ├── <136> Var [non_zero]
                    │   │           ╰── Constant Long [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <154> Unary [!]
                    │   │       ╰── <153>  [||]
                    │   │           ├── Constant Double [+5e0]
                    │   │           ╰── <151> Var [zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <165>  [||]
                    │   │       ├── <161> Var [zero]
                    │   │       ╰── <164> Var [rounded_to_zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [13]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <178> Unary [!]
                    │   │       ╰── <177>  [||]
                    │   │           ├── <173> Var [rounded_to_zero]
                    │   │           ╰── Constant Double [+1e-4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [14]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <191> Unary [!]
                    │   │       ╰── <190>  [||]
                    │   │           ├── <186> Var [non_zero]
                    │   │           ╰── Constant UInt [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [15]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <203> Unary [!]
                    │   │       ╰── <202>  [||]
                    │   │           ├── Constant Int [0]
                    │   │           ╰── Constant Double [+5e-7]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [16]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_floating_expressions_loop_controlling_expression() {
    let src = r#"
        int main(void) {
            int a = 0;
            for(double d = 100.0; d > 0.0; d = d - 1.0) {
                a = a + 1;
            }
            return a;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── d
                    │   │       ├── Type
                    │   │       │   ╰── Double
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Double [+1e2]
                    │   ├── Condition
                    │   │   ╰── <22>  [>]
                    │   │       ├── <19> Var [d]
                    │   │       ╰── Constant Double [+0e0]
                    │   ├── Condition
                    │   │   ╰── <31> Assign [=]
                    │   │       ├── <24> Var [d]
                    │   │       ╰── <30>  [-]
                    │   │           ├── <27> Var [d]
                    │   │           ╰── Constant Double [+1e0]
                    │   ╰── Block
                    │       ╰── <40> Assign [=]
                    │           ├── <33> Var [a]
                    │           ╰── <39>  [+]
                    │               ├── <36> Var [a]
                    │               ╰── Constant Int [1]
                    ╰── Return
                        ╰── <46> Var [a]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_floating_expressions_simple() {
    let src = r#"
        
        int main(void) {
            double x = 2.0;
            return (x * 2.0 == 4.0);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+2e0]
                    ╰── Return
                        ╰── <19>  [==]
                            ├── <15>  [*]
                            │   ├── <12> Var [x]
                            │   ╰── Constant Double [+2e0]
                            ╰── Constant Double [+4e0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_floating_expressions_static_initialized_double() {
    let src = r#"
        double return_static_variable(void) {
            static double d = 0.5;
            double ret = d;
            d = d + 1.0;
            return ret;
        }
        int main(void) {
            double d1 = return_static_variable();
            double d2 = return_static_variable();
            double d3 = return_static_variable();
            if (d1 != 0.5) {
                return 1;
            }
            if (d2 != 1.5) {
                return 2;
            }
            if (d3 != 2.5) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [return_static_variable]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ├── Type
            │       │   │   ╰── Double
            │       │   ├── Initializer
            │       │   │   ╰── Constant Double [+5e-1]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ret
            │       │   ├── Type
            │       │   │   ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <16> Var [d]
            │       ├── <27> Assign [=]
            │       │   ├── <20> Var [d]
            │       │   ╰── <26>  [+]
            │       │       ├── <23> Var [d]
            │       │       ╰── Constant Double [+1e0]
            │       ╰── Return
            │           ╰── <30> Var [ret]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d1
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <42> FunctionCall [return_static_variable]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d2
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <49> FunctionCall [return_static_variable]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d3
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <56> FunctionCall [return_static_variable]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <63>  [!=]
                    │   │       ├── <60> Var [d1]
                    │   │       ╰── Constant Double [+5e-1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <73>  [!=]
                    │   │       ├── <70> Var [d2]
                    │   │       ╰── Constant Double [+1.5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <83>  [!=]
                    │   │       ├── <80> Var [d3]
                    │   │       ╰── Constant Double [+2.5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_double_and_int_parameters() {
    let src = r#"
        int check_arguments(double d1, double d2, int i1, double d3, double d4, int i2, int i3,
                            int i4, double d5, double d6, double d7, int i5, double d8) {
            if (d1 != 1.0) {
                return 1;
            }
            if (d2 != 2.0) {
                return 2;
            }
            if (d3 != 3.0) {
                return 3;
            }
            if (d4 != 4.0 ){
                return 4;
            }
            if (d5 != 5.0){
                return 5;
            }
            if (d6 != 6.0 ){
                return 6;
            }
            if (d7 != 7.0 ){
                return 7;
            }
            if (d8 != 8.0 ){
                return 8;
            }
            if (i1 != 101 ){
                return 9;
            }
            if (i2 != 102 ){
                return 10;
            }
            if (i3 != 103){
                return 11;
            }
            if (i4 != 104) {
                return 12;
            }
            if (i5 != 105) {
                return 13;
            }
            return 0;
        }
        int main(void) {
            return check_arguments(1.0, 2.0, 101, 3.0, 4.0, 102, 103, 104, 5.0, 6.0, 7.0, 105, 8.0);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [check_arguments]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d1
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d2
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i1
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d3
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d4
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i2
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i3
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i4
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d5
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d6
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d7
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i5
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d8
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <48>  [!=]
            │       │   │       ├── <45> Var [d1]
            │       │   │       ╰── Constant Double [+1e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <58>  [!=]
            │       │   │       ├── <55> Var [d2]
            │       │   │       ╰── Constant Double [+2e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <68>  [!=]
            │       │   │       ├── <65> Var [d3]
            │       │   │       ╰── Constant Double [+3e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <78>  [!=]
            │       │   │       ├── <75> Var [d4]
            │       │   │       ╰── Constant Double [+4e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <88>  [!=]
            │       │   │       ├── <85> Var [d5]
            │       │   │       ╰── Constant Double [+5e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <98>  [!=]
            │       │   │       ├── <95> Var [d6]
            │       │   │       ╰── Constant Double [+6e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <108>  [!=]
            │       │   │       ├── <105> Var [d7]
            │       │   │       ╰── Constant Double [+7e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [7]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <118>  [!=]
            │       │   │       ├── <115> Var [d8]
            │       │   │       ╰── Constant Double [+8e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [8]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <128>  [!=]
            │       │   │       ├── <125> Var [i1]
            │       │   │       ╰── Constant Int [101]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [9]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <138>  [!=]
            │       │   │       ├── <135> Var [i2]
            │       │   │       ╰── Constant Int [102]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <148>  [!=]
            │       │   │       ├── <145> Var [i3]
            │       │   │       ╰── Constant Int [103]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [11]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <158>  [!=]
            │       │   │       ├── <155> Var [i4]
            │       │   │       ╰── Constant Int [104]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [12]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <168>  [!=]
            │       │   │       ├── <165> Var [i5]
            │       │   │       ╰── Constant Int [105]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [13]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <196> FunctionCall [check_arguments]
                            ├── Constant Double [+1e0]
                            ├── Constant Double [+2e0]
                            ├── Constant Int [101]
                            ├── Constant Double [+3e0]
                            ├── Constant Double [+4e0]
                            ├── Constant Int [102]
                            ├── Constant Int [103]
                            ├── Constant Int [104]
                            ├── Constant Double [+5e0]
                            ├── Constant Double [+6e0]
                            ├── Constant Double [+7e0]
                            ├── Constant Int [105]
                            ╰── Constant Double [+8e0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_double_and_int_params_recursive() {
    let src = r#"
        int fun(int i1, double d1, int i2, double d2, int i3, double d3,
                int i4, double d4, int i5, double d5, int i6, double d6,
                int i7, double d7, int i8, double d8, int i9, double d9) {
            if (i1 != d9) {
                int call1 = fun(i1 + 1, d1, i2 + 1, d2, i3 + 1, d3, i4 + 1, d4, i5 + 1, d5, i6 + 1, d6, i7 + 1, d7, i8 + 1, d8, i9 + 1, d9);
                int call2 = fun(i1, d1 - 1, i2, d2 - 1, i3, d3 - 1, i4, d4 - 1, i5, d5 - 1, i6, d6 - 1, i7, d7 - 1, i8, d8 - 1, i9, d9 - 1);
                if (call1) {
                    return call1;
                }
                if (call2) {
                    return call2;
                }
            }
            if (i2 != i1 + 2) {
                return 2;
            }
            if (i3 != i1 + 4) {
                return 3;
            }
            if (i4 != i1 + 6) {
                return 4;
            }
            if (i5 != i1 + 8) {
                return 5;
            }
            if (i6 != i1 + 10) {
                return 6;
            }
            if (i7 != i1 + 12) {
                return 7;
            }
            if (i8 != i1 + 14) {
                return 8;
            }
            if (i9 != i1 + 16) {
                return 9;
            }
            if (d1 != d9 - 16) {
                return 11;
            }
            if (d2 != d9 - 14) {
                return 12;
            }
            if (d3 != d9 - 12) {
                return 13;
            }
            if (d4 != d9 - 10) {
                return 14;
            }
            if (d5 != d9 - 8) {
                return 15;
            }
            if (d6 != d9 - 6) {
                return 16;
            }
            if (d7 != d9 - 4) {
                return 17;
            }
            if (d8 != d9 - 2) {
                return 18;
            }
            return 0;
        }
        int main(void) {
            return fun(1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9, 10.0, 11, 12.0, 13, 14.0, 15, 16.0, 17, 18.0);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [fun]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i1
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d1
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i2
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d2
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i3
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d3
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i4
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d4
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i5
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d5
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i6
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d6
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i7
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d7
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i8
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d8
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i9
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d9
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <64>  [!=]
            │       │   │       ├── <60> Var [i1]
            │       │   │       ╰── <63> Var [d9]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ├── VarDeclaration
            │       │           │   ├── Name
            │       │           │   │   ╰── call1
            │       │           │   ├── Type
            │       │           │   │   ╰── Int
            │       │           │   ╰── Initializer
            │       │           │       ╰── <132> FunctionCall [fun]
            │       │           │           ├── <73>  [+]
            │       │           │           │   ├── <70> Var [i1]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <75> Var [d1]
            │       │           │           ├── <80>  [+]
            │       │           │           │   ├── <77> Var [i2]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <82> Var [d2]
            │       │           │           ├── <87>  [+]
            │       │           │           │   ├── <84> Var [i3]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <89> Var [d3]
            │       │           │           ├── <94>  [+]
            │       │           │           │   ├── <91> Var [i4]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <96> Var [d4]
            │       │           │           ├── <101>  [+]
            │       │           │           │   ├── <98> Var [i5]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <103> Var [d5]
            │       │           │           ├── <108>  [+]
            │       │           │           │   ├── <105> Var [i6]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <110> Var [d6]
            │       │           │           ├── <115>  [+]
            │       │           │           │   ├── <112> Var [i7]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <117> Var [d7]
            │       │           │           ├── <122>  [+]
            │       │           │           │   ├── <119> Var [i8]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <124> Var [d8]
            │       │           │           ├── <129>  [+]
            │       │           │           │   ├── <126> Var [i9]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ╰── <131> Var [d9]
            │       │           ├── VarDeclaration
            │       │           │   ├── Name
            │       │           │   │   ╰── call2
            │       │           │   ├── Type
            │       │           │   │   ╰── Int
            │       │           │   ╰── Initializer
            │       │           │       ╰── <202> FunctionCall [fun]
            │       │           │           ├── <140> Var [i1]
            │       │           │           ├── <145>  [-]
            │       │           │           │   ├── <142> Var [d1]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <147> Var [i2]
            │       │           │           ├── <152>  [-]
            │       │           │           │   ├── <149> Var [d2]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <154> Var [i3]
            │       │           │           ├── <159>  [-]
            │       │           │           │   ├── <156> Var [d3]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <161> Var [i4]
            │       │           │           ├── <166>  [-]
            │       │           │           │   ├── <163> Var [d4]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <168> Var [i5]
            │       │           │           ├── <173>  [-]
            │       │           │           │   ├── <170> Var [d5]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <175> Var [i6]
            │       │           │           ├── <180>  [-]
            │       │           │           │   ├── <177> Var [d6]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <182> Var [i7]
            │       │           │           ├── <187>  [-]
            │       │           │           │   ├── <184> Var [d7]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <189> Var [i8]
            │       │           │           ├── <194>  [-]
            │       │           │           │   ├── <191> Var [d8]
            │       │           │           │   ╰── Constant Int [1]
            │       │           │           ├── <196> Var [i9]
            │       │           │           ╰── <201>  [-]
            │       │           │               ├── <198> Var [d9]
            │       │           │               ╰── Constant Int [1]
            │       │           ├── If
            │       │           │   ├── Condition
            │       │           │   │   ╰── <206> Var [call1]
            │       │           │   ╰── Then
            │       │           │       ╰── Block
            │       │           │           ╰── Return
            │       │           │               ╰── <208> Var [call1]
            │       │           ╰── If
            │       │               ├── Condition
            │       │               │   ╰── <214> Var [call2]
            │       │               ╰── Then
            │       │                   ╰── Block
            │       │                       ╰── Return
            │       │                           ╰── <216> Var [call2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <232>  [!=]
            │       │   │       ├── <225> Var [i2]
            │       │   │       ╰── <231>  [+]
            │       │   │           ├── <228> Var [i1]
            │       │   │           ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <246>  [!=]
            │       │   │       ├── <239> Var [i3]
            │       │   │       ╰── <245>  [+]
            │       │   │           ├── <242> Var [i1]
            │       │   │           ╰── Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <260>  [!=]
            │       │   │       ├── <253> Var [i4]
            │       │   │       ╰── <259>  [+]
            │       │   │           ├── <256> Var [i1]
            │       │   │           ╰── Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <274>  [!=]
            │       │   │       ├── <267> Var [i5]
            │       │   │       ╰── <273>  [+]
            │       │   │           ├── <270> Var [i1]
            │       │   │           ╰── Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <288>  [!=]
            │       │   │       ├── <281> Var [i6]
            │       │   │       ╰── <287>  [+]
            │       │   │           ├── <284> Var [i1]
            │       │   │           ╰── Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <302>  [!=]
            │       │   │       ├── <295> Var [i7]
            │       │   │       ╰── <301>  [+]
            │       │   │           ├── <298> Var [i1]
            │       │   │           ╰── Constant Int [12]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [7]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <316>  [!=]
            │       │   │       ├── <309> Var [i8]
            │       │   │       ╰── <315>  [+]
            │       │   │           ├── <312> Var [i1]
            │       │   │           ╰── Constant Int [14]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [8]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <330>  [!=]
            │       │   │       ├── <323> Var [i9]
            │       │   │       ╰── <329>  [+]
            │       │   │           ├── <326> Var [i1]
            │       │   │           ╰── Constant Int [16]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [9]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <344>  [!=]
            │       │   │       ├── <337> Var [d1]
            │       │   │       ╰── <343>  [-]
            │       │   │           ├── <340> Var [d9]
            │       │   │           ╰── Constant Int [16]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [11]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <358>  [!=]
            │       │   │       ├── <351> Var [d2]
            │       │   │       ╰── <357>  [-]
            │       │   │           ├── <354> Var [d9]
            │       │   │           ╰── Constant Int [14]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [12]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <372>  [!=]
            │       │   │       ├── <365> Var [d3]
            │       │   │       ╰── <371>  [-]
            │       │   │           ├── <368> Var [d9]
            │       │   │           ╰── Constant Int [12]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [13]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <386>  [!=]
            │       │   │       ├── <379> Var [d4]
            │       │   │       ╰── <385>  [-]
            │       │   │           ├── <382> Var [d9]
            │       │   │           ╰── Constant Int [10]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [14]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <400>  [!=]
            │       │   │       ├── <393> Var [d5]
            │       │   │       ╰── <399>  [-]
            │       │   │           ├── <396> Var [d9]
            │       │   │           ╰── Constant Int [8]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [15]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <414>  [!=]
            │       │   │       ├── <407> Var [d6]
            │       │   │       ╰── <413>  [-]
            │       │   │           ├── <410> Var [d9]
            │       │   │           ╰── Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [16]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <428>  [!=]
            │       │   │       ├── <421> Var [d7]
            │       │   │       ╰── <427>  [-]
            │       │   │           ├── <424> Var [d9]
            │       │   │           ╰── Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [17]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <442>  [!=]
            │       │   │       ├── <435> Var [d8]
            │       │   │       ╰── <441>  [-]
            │       │   │           ├── <438> Var [d9]
            │       │   │           ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [18]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <475> FunctionCall [fun]
                            ├── Constant Int [1]
                            ├── Constant Double [+2e0]
                            ├── Constant Int [3]
                            ├── Constant Double [+4e0]
                            ├── Constant Int [5]
                            ├── Constant Double [+6e0]
                            ├── Constant Int [7]
                            ├── Constant Double [+8e0]
                            ├── Constant Int [9]
                            ├── Constant Double [+1e1]
                            ├── Constant Int [11]
                            ├── Constant Double [+1.2e1]
                            ├── Constant Int [13]
                            ├── Constant Double [+1.4e1]
                            ├── Constant Int [15]
                            ├── Constant Double [+1.6e1]
                            ├── Constant Int [17]
                            ╰── Constant Double [+1.8e1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_double_parameters() {
    let src = r#"
        
        int check_arguments(double a, double b, double c, double d, double e, double f, double g, double h);
        int main(void) {
            return check_arguments(1.0, 2.0, 3.0, 4.0, -1.0, -2.0, -3.0, -4.0);
        }
        int check_arguments(double a, double b, double c, double d, double e, double f, double g, double h) {
            if (a != 1.0) {
                return 1;
            }
            if (b != 2.0) {
                return 2;
            }
            if (c != 3.0) {
                return 3;
            }
            if (d != 4.0) {
                return 4;
            }
            if (e != -1.0) {
                return 5;
            }
            if (f != -2.0) {
                return 6;
            }
            if (g != -3.0) {
                return 7;
            }
            if (h != -4.0) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [check_arguments]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── h
            │           ╰── Type
            │               ╰── Double
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <51> FunctionCall [check_arguments]
            │               ├── Constant Double [+1e0]
            │               ├── Constant Double [+2e0]
            │               ├── Constant Double [+3e0]
            │               ├── Constant Double [+4e0]
            │               ├── <41> Unary [-]
            │               │   ╰── Constant Double [+1e0]
            │               ├── <44> Unary [-]
            │               │   ╰── Constant Double [+2e0]
            │               ├── <47> Unary [-]
            │               │   ╰── Constant Double [+3e0]
            │               ╰── <50> Unary [-]
            │                   ╰── Constant Double [+4e0]
            ╰── Function [check_arguments]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── e
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── f
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── g
                │   │   ╰── Type
                │   │       ╰── Double
                │   ╰── Param
                │       ├── Name
                │       │   ╰── h
                │       ╰── Type
                │           ╰── Double
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <87>  [!=]
                    │   │       ├── <84> Var [a]
                    │   │       ╰── Constant Double [+1e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <97>  [!=]
                    │   │       ├── <94> Var [b]
                    │   │       ╰── Constant Double [+2e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <107>  [!=]
                    │   │       ├── <104> Var [c]
                    │   │       ╰── Constant Double [+3e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <117>  [!=]
                    │   │       ├── <114> Var [d]
                    │   │       ╰── Constant Double [+4e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <129>  [!=]
                    │   │       ├── <124> Var [e]
                    │   │       ╰── <128> Unary [-]
                    │   │           ╰── Constant Double [+1e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <141>  [!=]
                    │   │       ├── <136> Var [f]
                    │   │       ╰── <140> Unary [-]
                    │   │           ╰── Constant Double [+2e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <153>  [!=]
                    │   │       ├── <148> Var [g]
                    │   │       ╰── <152> Unary [-]
                    │   │           ╰── Constant Double [+3e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <165>  [!=]
                    │   │       ├── <160> Var [h]
                    │   │       ╰── <164> Unary [-]
                    │   │           ╰── Constant Double [+4e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_push_xmm() {
    let src = r#"
        int callee(double a, double b, double c, double d, double e, double f, double g,
                   double h, double i, double j, double k) {
            if (a != 0.) {
                return 1;
            }
            if (b != 1.) {
                return 2;
            }
            if (c != 2.) {
                return 3;
            }
            if (d != 3.) {
                return 4;
            }
            if (e != 4.) {
                return 5;
            }
            if (f != 5.) {
                return 6;
            }
            if (g != 6.) {
                return 7;
            }
            if (h != 7.) {
                return 8;
            }
            if (i != 8.) {
                return 9;
            }
            if (j != 9.) {
                return 10;
            }
            if (k != 10.) {
                return 11;
            }
            return 0;
        }
        int target(int a, int b, int c, int d, int e) {
            return callee(0., 1., 2., 3., 4., 5., e + 1., d + 3., c + 5., b + 7.,
                          a + 9.);
        }
        int main(void) {
            return target(1, 2, 3, 4, 5);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [callee]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── e
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── f
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── g
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── h
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── k
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <42>  [!=]
            │       │   │       ├── <39> Var [a]
            │       │   │       ╰── Constant Double [+0e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <52>  [!=]
            │       │   │       ├── <49> Var [b]
            │       │   │       ╰── Constant Double [+1e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <62>  [!=]
            │       │   │       ├── <59> Var [c]
            │       │   │       ╰── Constant Double [+2e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <72>  [!=]
            │       │   │       ├── <69> Var [d]
            │       │   │       ╰── Constant Double [+3e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <82>  [!=]
            │       │   │       ├── <79> Var [e]
            │       │   │       ╰── Constant Double [+4e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <92>  [!=]
            │       │   │       ├── <89> Var [f]
            │       │   │       ╰── Constant Double [+5e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <102>  [!=]
            │       │   │       ├── <99> Var [g]
            │       │   │       ╰── Constant Double [+6e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [7]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <112>  [!=]
            │       │   │       ├── <109> Var [h]
            │       │   │       ╰── Constant Double [+7e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [8]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <122>  [!=]
            │       │   │       ├── <119> Var [i]
            │       │   │       ╰── Constant Double [+8e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [9]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <132>  [!=]
            │       │   │       ├── <129> Var [j]
            │       │   │       ╰── Constant Double [+9e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <142>  [!=]
            │       │   │       ├── <139> Var [k]
            │       │   │       ╰── Constant Double [+1e1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [11]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [target]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── b
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── c
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── e
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <203> FunctionCall [callee]
            │               ├── Constant Double [+0e0]
            │               ├── Constant Double [+1e0]
            │               ├── Constant Double [+2e0]
            │               ├── Constant Double [+3e0]
            │               ├── Constant Double [+4e0]
            │               ├── Constant Double [+5e0]
            │               ├── <182>  [+]
            │               │   ├── <179> Var [e]
            │               │   ╰── Constant Double [+1e0]
            │               ├── <187>  [+]
            │               │   ├── <184> Var [d]
            │               │   ╰── Constant Double [+3e0]
            │               ├── <192>  [+]
            │               │   ├── <189> Var [c]
            │               │   ╰── Constant Double [+5e0]
            │               ├── <197>  [+]
            │               │   ├── <194> Var [b]
            │               │   ╰── Constant Double [+7e0]
            │               ╰── <202>  [+]
            │                   ├── <199> Var [a]
            │                   ╰── Constant Double [+9e0]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <217> FunctionCall [target]
                            ├── Constant Int [1]
                            ├── Constant Int [2]
                            ├── Constant Int [3]
                            ├── Constant Int [4]
                            ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_return_double() {
    let src = r#"
        
        double d(void) {
            return 1234.e75;
        }
        int main(void) {
            double retval = d();
            return retval == 1234.e75;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [d]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Double [+1.234e78]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── retval
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <17> FunctionCall [d]
                    ╰── Return
                        ╰── <24>  [==]
                            ├── <21> Var [retval]
                            ╰── Constant Double [+1.234e78]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_standard_library_call() {
    let src = r#"
        double fma(double x, double y, double z);
        double ldexp(double x, int exp);
        int main(void) {
            double fma_result = fma(5.0, 1E22, 4000000.0);
            double ldexp_result = ldexp(92E73, 5);
            if (fma_result != 50000000000000004194304.0) {
                return 1;
            }
            if (ldexp_result != 2.944E76) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [fma]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── y
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── z
            │           ╰── Type
            │               ╰── Double
            ├── Function [ldexp]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── exp
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── fma_result
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <37> FunctionCall [fma]
                    │           ├── Constant Double [+5e0]
                    │           ├── Constant Double [+1e22]
                    │           ╰── Constant Double [+4e6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ldexp_result
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <46> FunctionCall [ldexp]
                    │           ├── Constant Double [+9.2e74]
                    │           ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <53>  [!=]
                    │   │       ├── <50> Var [fma_result]
                    │   │       ╰── Constant Double [+5.0000000000000004e22]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <63>  [!=]
                    │   │       ├── <60> Var [ldexp_result]
                    │   │       ╰── Constant Double [+2.944e76]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_function_calls_use_arg_after_fun_call() {
    let src = r#"
        double fun(double x) {
            if (x > 2)
                return x;
            else {
                double ret = fun(x + 2);
                return ret + x;
            }
        }
        int main(void) {
            return fun(1.0);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [fun]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── x
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ╰── If
            │           ├── Condition
            │           │   ╰── <12>  [>]
            │           │       ├── <9> Var [x]
            │           │       ╰── Constant Int [2]
            │           ├── Then
            │           │   ╰── Return
            │           │       ╰── <14> Var [x]
            │           ╰── Else
            │               ╰── Block
            │                   ├── VarDeclaration
            │                   │   ├── Name
            │                   │   │   ╰── ret
            │                   │   ├── Type
            │                   │   │   ╰── Double
            │                   │   ╰── Initializer
            │                   │       ╰── <25> FunctionCall [fun]
            │                   │           ╰── <24>  [+]
            │                   │               ├── <21> Var [x]
            │                   │               ╰── Constant Int [2]
            │                   ╰── Return
            │                       ╰── <33>  [+]
            │                           ├── <29> Var [ret]
            │                           ╰── <32> Var [x]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <46> FunctionCall [fun]
                            ╰── Constant Double [+1e0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_implicit_casts_common_type() {
    let src = r#"
        int lt(double d, long l) {
            return d < l;
        }
        double tern_double_flag(double flag) {
            return (double) (flag ? -30 : 10ul);
        }
        double tern_double_result(int flag) {
            return flag ? 5.0 : 9223372036854777850ul;
        }
        int ten = 10;
        int multiply(void) {
            int i = 10.75 * ten;
            return i == 107;
        }
        int main(void) {
            if (lt(-9007199254751228.0, -9007199254751227l)) {
                return 1;
            }
            if (tern_double_flag(20.0) != 18446744073709551586.0) {
                return 2;
            }
            if (tern_double_flag(0.0) != 10.0) {
                return 3;
            }
            if (tern_double_result(1) != 5.0) {
                return 4;
            }
            if (tern_double_result(0) != 9223372036854777856.0) {
                return 5;
            }
            if (!multiply()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [lt]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── d
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── l
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <16>  [<]
            │               ├── <12> Var [d]
            │               ╰── <15> Var [l]
            ├── Function [tern_double_flag]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── flag
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ╰── Return
            │           ╰── <37> Cast
            │               ├── Target
            │               │   ╰── Double
            │               ╰── Expression
            │                   ╰── <{node_id}> Conditional [?]
            │                       ├── <30> Var [flag]
            │                       ├── Then
            │                       │   ╰── <33> Unary [-]
            │                       │       ╰── Constant Int [30]
            │                       ╰── Else
            │                           ╰── Constant ULong [10]
            ├── Function [tern_double_result]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── flag
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <{node_id}> Conditional [?]
            │               ├── <49> Var [flag]
            │               ├── Then
            │               │   ╰── Constant Double [+5e0]
            │               ╰── Else
            │                   ╰── Constant ULong [9223372036854777850]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ten
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [10]
            ├── Function [multiply]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <73>  [*]
            │       │           ├── Constant Double [+1.075e1]
            │       │           ╰── <72> Var [ten]
            │       ╰── Return
            │           ╰── <80>  [==]
            │               ├── <77> Var [i]
            │               ╰── Constant Int [107]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <95> FunctionCall [lt]
                    │   │       ├── <91> Unary [-]
                    │   │       │   ╰── Constant Double [+9.007199254751228e15]
                    │   │       ╰── <94> Unary [-]
                    │   │           ╰── Constant Long [9007199254751227]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <106>  [!=]
                    │   │       ├── <103> FunctionCall [tern_double_flag]
                    │   │       │   ╰── Constant Double [+2e1]
                    │   │       ╰── Constant Double [+1.8446744073709552e19]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <117>  [!=]
                    │   │       ├── <114> FunctionCall [tern_double_flag]
                    │   │       │   ╰── Constant Double [+0e0]
                    │   │       ╰── Constant Double [+1e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <128>  [!=]
                    │   │       ├── <125> FunctionCall [tern_double_result]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── Constant Double [+5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <139>  [!=]
                    │   │       ├── <136> FunctionCall [tern_double_result]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Constant Double [+9.223372036854778e18]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <148> Unary [!]
                    │   │       ╰── <147> FunctionCall [multiply]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_implicit_casts_complex_arithmetic_common_type() {
    let src = r#"
        unsigned long ul = 10000ul;
        int main(void) {
            int i = -50;
            double d = (ul + i) * 3.125;
            return d == 31093.75;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul
            │   ├── Type
            │   │   ╰── Unsigned Long
            │   ╰── Initializer
            │       ╰── Constant ULong [10000]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <16> Unary [-]
                    │           ╰── Constant Int [50]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <31>  [*]
                    │           ├── <28>  [+]
                    │           │   ├── <23> Var [ul]
                    │           │   ╰── <26> Var [i]
                    │           ╰── Constant Double [+3.125e0]
                    ╰── Return
                        ╰── <38>  [==]
                            ├── <35> Var [d]
                            ╰── Constant Double [+3.109375e4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_implicit_casts_convert_for_assignment() {
    let src = r#"
        int check_args(long l, double d) {
            return l == 2 && d == -6.0;
        }
        double return_double(void) {
            return 18446744073709551586ul;
        }
        int check_assignment(double arg) {
            int i = 0;
            i = arg;
            return i == 4;
        }
        int main(void) {
            if (!check_args(2.4, -6)) {
                return 1;
            }
            if (return_double() != 18446744073709551616.0) {
                return 2;
            }
            if (!check_assignment(4.9)) {
                return 3;
            }
            double d = 18446744073709551586ul;
            if (d != 18446744073709551616.) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [check_args]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── l
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ╰── Return
            │           ╰── <24>  [&&]
            │               ├── <15>  [==]
            │               │   ├── <12> Var [l]
            │               │   ╰── Constant Int [2]
            │               ╰── <23>  [==]
            │                   ├── <18> Var [d]
            │                   ╰── <22> Unary [-]
            │                       ╰── Constant Double [+6e0]
            ├── Function [return_double]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant ULong [18446744073709551586]
            ├── Function [check_assignment]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── arg
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [0]
            │       ├── <54> Assign [=]
            │       │   ├── <50> Var [i]
            │       │   ╰── <53> Var [arg]
            │       ╰── Return
            │           ╰── <60>  [==]
            │               ├── <57> Var [i]
            │               ╰── Constant Int [4]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <75> Unary [!]
                    │   │       ╰── <74> FunctionCall [check_args]
                    │   │           ├── Constant Double [+2.4e0]
                    │   │           ╰── <73> Unary [-]
                    │   │               ╰── Constant Int [6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <85>  [!=]
                    │   │       ├── <82> FunctionCall [return_double]
                    │   │       ╰── Constant Double [+1.8446744073709552e19]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <95> Unary [!]
                    │   │       ╰── <94> FunctionCall [check_assignment]
                    │   │           ╰── Constant Double [+4.9e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant ULong [18446744073709551586]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <111>  [!=]
                    │   │       ├── <108> Var [d]
                    │   │       ╰── Constant Double [+1.8446744073709552e19]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_implicit_casts_static_initializers() {
    let src = r#"
        double d1 = 2147483647;
        double d2 = 4294967295u;
        double d3 = 4611686018427389440l;
        double d4 = 4611686018427389955l;
        double d5 = 9223372036854775810ul;
        double d6 = 4611686018427389955ul;
        double d7 = 9223372036854776832ul;
        double uninitialized;
        static int i = 4.9;
        int unsigned u = 42949.672923E5;
        long l = 4611686018427389440.;
        unsigned long ul = 18446744073709549568.;
        int main(void) {
            if (d1 != 2147483647.) {
                return 1;
            }
            if (d2 != 4294967295.) {
                return 2;
            }
            if (d3 != 4611686018427389952.) {
                return 3;
            }
            if (d4 != d3) {
                return 4;
            }
            if (d5 != 9223372036854775808.) {
                return 5;
            }
            if (d6 != d3) {
                return 6;
            }
            if (d7 != d5) {
                return 7;
            }
            if (uninitialized) {
                return 8;
            }
            if (i != 4) {
                return 9;
            }
            if (u != 4294967292u) {
                return 10;
            }
            if (l != 4611686018427389952l) {
                return 11;
            }
            if (ul != 18446744073709549568ul) {
                return 12;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── d1
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Int [2147483647]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── d2
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant UInt [4294967295]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── d3
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Long [4611686018427389440]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── d4
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Long [4611686018427389955]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── d5
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant ULong [9223372036854775810]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── d6
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant ULong [4611686018427389955]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── d7
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant ULong [9223372036854776832]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── uninitialized
            │   ╰── Type
            │       ╰── Double
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ├── Initializer
            │   │   ╰── Constant Double [+4.9e0]
            │   ╰── Static
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── u
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant Double [+4.2949672923e9]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Double [+4.61168601842739e18]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul
            │   ├── Type
            │   │   ╰── Unsigned Long
            │   ╰── Initializer
            │       ╰── Constant Double [+1.844674407370955e19]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <80>  [!=]
                    │   │       ├── <77> Var [d1]
                    │   │       ╰── Constant Double [+2.147483647e9]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <90>  [!=]
                    │   │       ├── <87> Var [d2]
                    │   │       ╰── Constant Double [+4.294967295e9]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <100>  [!=]
                    │   │       ├── <97> Var [d3]
                    │   │       ╰── Constant Double [+4.61168601842739e18]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <111>  [!=]
                    │   │       ├── <107> Var [d4]
                    │   │       ╰── <110> Var [d3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <121>  [!=]
                    │   │       ├── <118> Var [d5]
                    │   │       ╰── Constant Double [+9.223372036854776e18]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <132>  [!=]
                    │   │       ├── <128> Var [d6]
                    │   │       ╰── <131> Var [d3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <143>  [!=]
                    │   │       ├── <139> Var [d7]
                    │   │       ╰── <142> Var [d5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <150> Var [uninitialized]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <160>  [!=]
                    │   │       ├── <157> Var [i]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <170>  [!=]
                    │   │       ├── <167> Var [u]
                    │   │       ╰── Constant UInt [4294967292]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <180>  [!=]
                    │   │       ├── <177> Var [l]
                    │   │       ╰── Constant Long [4611686018427389952]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <190>  [!=]
                    │   │       ├── <187> Var [ul]
                    │   │       ╰── Constant ULong [18446744073709549568]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [12]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_double_and_int_params_recursive() {
    let src = r#"
        int fun(int i1, double d1, int i2, double d2, int i3, double d3,
                int i4, double d4, int i5, double d5, int i6, double d6,
                int i7, double d7, int i8, double d8, int i9, double d9) {
            if (i1 != d9) {
                int call1 = fun(i1 + 1, d1, i2 + 1, d2, i3 + 1, d3, i4 + 1, d4, i5 + 1, d5, i6 + 1, d6, i7 + 1, d7, i8 + 1, d8, i9 + 1, d9);
                int call2 = fun(i1, d1 - 1, i2, d2 - 1, i3, d3 - 1, i4, d4 - 1, i5, d5 - 1, i6, d6 - 1, i7, d7 - 1, i8, d8 - 1, i9, d9 - 1);
                if (call1) {
                    return call1;
                }
                if (call2) {
                    return call2;
                }
            }
            if (i2 != i1 + 2) {
                return 2;
            }
            if (i3 != i1 + 4) {
                return 3;
            }
            if (i4 != i1 + 6) {
                return 4;
            }
            if (i5 != i1 + 8) {
                return 5;
            }
            if (i6 != i1 + 10) {
                return 6;
            }
            if (i7 != i1 + 12) {
                return 7;
            }
            if (i8 != i1 + 14) {
                return 8;
            }
            if (i9 != i1 + 16) {
                return 9;
            }
            if (d1 != d9 - 16) {
                return 11;
            }
            if (d2 != d9 - 14) {
                return 12;
            }
            if (d3 != d9 - 12) {
                return 13;
            }
            if (d4 != d9 - 10) {
                return 14;
            }
            if (d5 != d9 - 8) {
                return 15;
            }
            if (d6 != d9 - 6) {
                return 16;
            }
            if (d7 != d9 - 4) {
                return 17;
            }
            if (d8 != d9 - 2) {
                return 18;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [fun]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i1
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d1
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i2
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d2
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i3
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d3
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i4
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d4
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i5
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d5
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i6
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d6
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i7
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d7
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i8
                │   │   ╰── Type
                │   │       ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d8
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i9
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── d9
                │       ╰── Type
                │           ╰── Double
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <64>  [!=]
                    │   │       ├── <60> Var [i1]
                    │   │       ╰── <63> Var [d9]
                    │   ╰── Then
                    │       ╰── Block
                    │           ├── VarDeclaration
                    │           │   ├── Name
                    │           │   │   ╰── call1
                    │           │   ├── Type
                    │           │   │   ╰── Int
                    │           │   ╰── Initializer
                    │           │       ╰── <132> FunctionCall [fun]
                    │           │           ├── <73>  [+]
                    │           │           │   ├── <70> Var [i1]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <75> Var [d1]
                    │           │           ├── <80>  [+]
                    │           │           │   ├── <77> Var [i2]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <82> Var [d2]
                    │           │           ├── <87>  [+]
                    │           │           │   ├── <84> Var [i3]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <89> Var [d3]
                    │           │           ├── <94>  [+]
                    │           │           │   ├── <91> Var [i4]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <96> Var [d4]
                    │           │           ├── <101>  [+]
                    │           │           │   ├── <98> Var [i5]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <103> Var [d5]
                    │           │           ├── <108>  [+]
                    │           │           │   ├── <105> Var [i6]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <110> Var [d6]
                    │           │           ├── <115>  [+]
                    │           │           │   ├── <112> Var [i7]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <117> Var [d7]
                    │           │           ├── <122>  [+]
                    │           │           │   ├── <119> Var [i8]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <124> Var [d8]
                    │           │           ├── <129>  [+]
                    │           │           │   ├── <126> Var [i9]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ╰── <131> Var [d9]
                    │           ├── VarDeclaration
                    │           │   ├── Name
                    │           │   │   ╰── call2
                    │           │   ├── Type
                    │           │   │   ╰── Int
                    │           │   ╰── Initializer
                    │           │       ╰── <202> FunctionCall [fun]
                    │           │           ├── <140> Var [i1]
                    │           │           ├── <145>  [-]
                    │           │           │   ├── <142> Var [d1]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <147> Var [i2]
                    │           │           ├── <152>  [-]
                    │           │           │   ├── <149> Var [d2]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <154> Var [i3]
                    │           │           ├── <159>  [-]
                    │           │           │   ├── <156> Var [d3]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <161> Var [i4]
                    │           │           ├── <166>  [-]
                    │           │           │   ├── <163> Var [d4]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <168> Var [i5]
                    │           │           ├── <173>  [-]
                    │           │           │   ├── <170> Var [d5]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <175> Var [i6]
                    │           │           ├── <180>  [-]
                    │           │           │   ├── <177> Var [d6]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <182> Var [i7]
                    │           │           ├── <187>  [-]
                    │           │           │   ├── <184> Var [d7]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <189> Var [i8]
                    │           │           ├── <194>  [-]
                    │           │           │   ├── <191> Var [d8]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ├── <196> Var [i9]
                    │           │           ╰── <201>  [-]
                    │           │               ├── <198> Var [d9]
                    │           │               ╰── Constant Int [1]
                    │           ├── If
                    │           │   ├── Condition
                    │           │   │   ╰── <206> Var [call1]
                    │           │   ╰── Then
                    │           │       ╰── Block
                    │           │           ╰── Return
                    │           │               ╰── <208> Var [call1]
                    │           ╰── If
                    │               ├── Condition
                    │               │   ╰── <214> Var [call2]
                    │               ╰── Then
                    │                   ╰── Block
                    │                       ╰── Return
                    │                           ╰── <216> Var [call2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <232>  [!=]
                    │   │       ├── <225> Var [i2]
                    │   │       ╰── <231>  [+]
                    │   │           ├── <228> Var [i1]
                    │   │           ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <246>  [!=]
                    │   │       ├── <239> Var [i3]
                    │   │       ╰── <245>  [+]
                    │   │           ├── <242> Var [i1]
                    │   │           ╰── Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <260>  [!=]
                    │   │       ├── <253> Var [i4]
                    │   │       ╰── <259>  [+]
                    │   │           ├── <256> Var [i1]
                    │   │           ╰── Constant Int [6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <274>  [!=]
                    │   │       ├── <267> Var [i5]
                    │   │       ╰── <273>  [+]
                    │   │           ├── <270> Var [i1]
                    │   │           ╰── Constant Int [8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <288>  [!=]
                    │   │       ├── <281> Var [i6]
                    │   │       ╰── <287>  [+]
                    │   │           ├── <284> Var [i1]
                    │   │           ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <302>  [!=]
                    │   │       ├── <295> Var [i7]
                    │   │       ╰── <301>  [+]
                    │   │           ├── <298> Var [i1]
                    │   │           ╰── Constant Int [12]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <316>  [!=]
                    │   │       ├── <309> Var [i8]
                    │   │       ╰── <315>  [+]
                    │   │           ├── <312> Var [i1]
                    │   │           ╰── Constant Int [14]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <330>  [!=]
                    │   │       ├── <323> Var [i9]
                    │   │       ╰── <329>  [+]
                    │   │           ├── <326> Var [i1]
                    │   │           ╰── Constant Int [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <344>  [!=]
                    │   │       ├── <337> Var [d1]
                    │   │       ╰── <343>  [-]
                    │   │           ├── <340> Var [d9]
                    │   │           ╰── Constant Int [16]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <358>  [!=]
                    │   │       ├── <351> Var [d2]
                    │   │       ╰── <357>  [-]
                    │   │           ├── <354> Var [d9]
                    │   │           ╰── Constant Int [14]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <372>  [!=]
                    │   │       ├── <365> Var [d3]
                    │   │       ╰── <371>  [-]
                    │   │           ├── <368> Var [d9]
                    │   │           ╰── Constant Int [12]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [13]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <386>  [!=]
                    │   │       ├── <379> Var [d4]
                    │   │       ╰── <385>  [-]
                    │   │           ├── <382> Var [d9]
                    │   │           ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [14]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <400>  [!=]
                    │   │       ├── <393> Var [d5]
                    │   │       ╰── <399>  [-]
                    │   │           ├── <396> Var [d9]
                    │   │           ╰── Constant Int [8]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [15]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <414>  [!=]
                    │   │       ├── <407> Var [d6]
                    │   │       ╰── <413>  [-]
                    │   │           ├── <410> Var [d9]
                    │   │           ╰── Constant Int [6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [16]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <428>  [!=]
                    │   │       ├── <421> Var [d7]
                    │   │       ╰── <427>  [-]
                    │   │           ├── <424> Var [d9]
                    │   │           ╰── Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [17]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <442>  [!=]
                    │   │       ├── <435> Var [d8]
                    │   │       ╰── <441>  [-]
                    │   │           ├── <438> Var [d9]
                    │   │           ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [18]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_double_and_int_params_recursive_client() {
    let src = r#"
        int fun(int i1, double d1, int i2, double d2, int i3, double d3,
                int i4, double d4, int i5, double d5, int i6, double d6,
                int i7, double d7, int i8, double d8, int i9, double d9);
        int main(void) {
            double d = fun(1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9, 10.0, 11, 12.0, 13, 14.0, 15, 16.0, 17, 18.0);
            return (d == 78.00);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [fun]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i1
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d1
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d2
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i3
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d3
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i4
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d4
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i5
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d5
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i6
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d6
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i7
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d7
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i8
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d8
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i9
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d9
            │           ╰── Type
            │               ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <86> FunctionCall [fun]
                    │           ├── Constant Int [1]
                    │           ├── Constant Double [+2e0]
                    │           ├── Constant Int [3]
                    │           ├── Constant Double [+4e0]
                    │           ├── Constant Int [5]
                    │           ├── Constant Double [+6e0]
                    │           ├── Constant Int [7]
                    │           ├── Constant Double [+8e0]
                    │           ├── Constant Int [9]
                    │           ├── Constant Double [+1e1]
                    │           ├── Constant Int [11]
                    │           ├── Constant Double [+1.2e1]
                    │           ├── Constant Int [13]
                    │           ├── Constant Double [+1.4e1]
                    │           ├── Constant Int [15]
                    │           ├── Constant Double [+1.6e1]
                    │           ├── Constant Int [17]
                    │           ╰── Constant Double [+1.8e1]
                    ╰── Return
                        ╰── <94>  [==]
                            ├── <90> Var [d]
                            ╰── Constant Double [+7.8e1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_double_parameters() {
    let src = r#"
        int check_arguments(double a, double b, double c, double d, double e, double f, double g, double h) {
            if (a != 1.0) {
                return 1;
            }
            if (b != 2.0) {
                return 2;
            }
            if (c != 3.0) {
                return 3;
            }
            if (d != 4.0) {
                return 4;
            }
            if (e != -1.0) {
                return 5;
            }
            if (f != -2.0) {
                return 6;
            }
            if (g != -3.0) {
                return 7;
            }
            if (h != -4.0) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [check_arguments]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── e
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── f
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── g
                │   │   ╰── Type
                │   │       ╰── Double
                │   ╰── Param
                │       ├── Name
                │       │   ╰── h
                │       ╰── Type
                │           ╰── Double
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <33>  [!=]
                    │   │       ├── <30> Var [a]
                    │   │       ╰── Constant Double [+1e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <43>  [!=]
                    │   │       ├── <40> Var [b]
                    │   │       ╰── Constant Double [+2e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <53>  [!=]
                    │   │       ├── <50> Var [c]
                    │   │       ╰── Constant Double [+3e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <63>  [!=]
                    │   │       ├── <60> Var [d]
                    │   │       ╰── Constant Double [+4e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <75>  [!=]
                    │   │       ├── <70> Var [e]
                    │   │       ╰── <74> Unary [-]
                    │   │           ╰── Constant Double [+1e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <87>  [!=]
                    │   │       ├── <82> Var [f]
                    │   │       ╰── <86> Unary [-]
                    │   │           ╰── Constant Double [+2e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <99>  [!=]
                    │   │       ├── <94> Var [g]
                    │   │       ╰── <98> Unary [-]
                    │   │           ╰── Constant Double [+3e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <111>  [!=]
                    │   │       ├── <106> Var [h]
                    │   │       ╰── <110> Unary [-]
                    │   │           ╰── Constant Double [+4e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_double_parameters_client() {
    let src = r#"
        int check_arguments(double a, double b, double c, double d, double e, double f, double g, double h);
        int main(void) {
            return check_arguments(1.0, 2.0, 3.0, 4.0, -1.0, -2.0, -3.0, -4.0);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [check_arguments]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── h
            │           ╰── Type
            │               ╰── Double
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <51> FunctionCall [check_arguments]
                            ├── Constant Double [+1e0]
                            ├── Constant Double [+2e0]
                            ├── Constant Double [+3e0]
                            ├── Constant Double [+4e0]
                            ├── <41> Unary [-]
                            │   ╰── Constant Double [+1e0]
                            ├── <44> Unary [-]
                            │   ╰── Constant Double [+2e0]
                            ├── <47> Unary [-]
                            │   ╰── Constant Double [+3e0]
                            ╰── <50> Unary [-]
                                ╰── Constant Double [+4e0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_double_params_and_result() {
    let src = r#"
        double fmax(double x, double y);
        double get_max(double a, double b, double c, double d,
                       double e, double f, double g, double h,
                       double i, double j, double k)
        {
            double max = fmax(
                fmax(
                    fmax(
                        fmax(a, b),
                        fmax(c, d)),
                    fmax(
                        fmax(e, f),
                        fmax(g, h))),
                fmax(i, fmax(j, k)));
            return max;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [fmax]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── y
            │           ╰── Type
            │               ╰── Double
            ╰── Function [get_max]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── a
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── b
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── c
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── d
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── e
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── f
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── g
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── h
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i
                │   │   ╰── Type
                │   │       ╰── Double
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── j
                │   │   ╰── Type
                │   │       ╰── Double
                │   ╰── Param
                │       ├── Name
                │       │   ╰── k
                │       ╰── Type
                │           ╰── Double
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── max
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <93> FunctionCall [fmax]
                    │           ├── <82> FunctionCall [fmax]
                    │           │   ├── <67> FunctionCall [fmax]
                    │           │   │   ├── <60> FunctionCall [fmax]
                    │           │   │   │   ├── <57> Var [a]
                    │           │   │   │   ╰── <59> Var [b]
                    │           │   │   ╰── <66> FunctionCall [fmax]
                    │           │   │       ├── <63> Var [c]
                    │           │   │       ╰── <65> Var [d]
                    │           │   ╰── <81> FunctionCall [fmax]
                    │           │       ├── <74> FunctionCall [fmax]
                    │           │       │   ├── <71> Var [e]
                    │           │       │   ╰── <73> Var [f]
                    │           │       ╰── <80> FunctionCall [fmax]
                    │           │           ├── <77> Var [g]
                    │           │           ╰── <79> Var [h]
                    │           ╰── <92> FunctionCall [fmax]
                    │               ├── <85> Var [i]
                    │               ╰── <91> FunctionCall [fmax]
                    │                   ├── <88> Var [j]
                    │                   ╰── <90> Var [k]
                    ╰── Return
                        ╰── <97> Var [max]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_double_params_and_result_client() {
    let src = r#"
        double get_max(double a, double b, double c, double d,
                       double e, double f, double g, double h,
                       double i, double j, double k);
        int main(void)
        {
            double result = get_max(100.3, 200.1, 0.01, 1.00004e5, 55.555, -4., 6543.2,
                                    9e9, 8e8, 7.6, 10e3 * 11e5);
            return result == 10e3 * 11e5;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [get_max]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── c
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── d
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── e
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── f
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── g
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── h
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Double
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── j
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── k
            │           ╰── Type
            │               ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <63> FunctionCall [get_max]
                    │           ├── Constant Double [+1.003e2]
                    │           ├── Constant Double [+2.001e2]
                    │           ├── Constant Double [+1e-2]
                    │           ├── Constant Double [+1.00004e5]
                    │           ├── Constant Double [+5.5555e1]
                    │           ├── <54> Unary [-]
                    │           │   ╰── Constant Double [+4e0]
                    │           ├── Constant Double [+6.5432e3]
                    │           ├── Constant Double [+9e9]
                    │           ├── Constant Double [+8e8]
                    │           ├── Constant Double [+7.6e0]
                    │           ╰── <62>  [*]
                    │               ├── Constant Double [+1e4]
                    │               ╰── Constant Double [+1.1e6]
                    ╰── Return
                        ╰── <73>  [==]
                            ├── <67> Var [result]
                            ╰── <72>  [*]
                                ├── Constant Double [+1e4]
                                ╰── Constant Double [+1.1e6]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_extern_double() {
    let src = r#"
        double d = 1e20;
    "#;
    let expected = r#"
        Program
            ╰── VarDeclaration
                ├── Name
                │   ╰── d
                ├── Type
                │   ╰── Double
                ╰── Initializer
                    ╰── Constant Double [+1e20]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_extern_double_client() {
    let src = r#"
        
        extern double d;
        int main(void) {
            return d == 1e20;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── d
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <14>  [==]
                            ├── <11> Var [d]
                            ╰── Constant Double [+1e20]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_use_arg_after_fun_call() {
    let src = r#"
        double fun(double x) {
            if (x > 2)
                return x;
            else {
                double ret = fun(x + 2);
                return ret + x;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [fun]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── x
                │       ╰── Type
                │           ╰── Double
                ╰── Body
                    ╰── If
                        ├── Condition
                        │   ╰── <12>  [>]
                        │       ├── <9> Var [x]
                        │       ╰── Constant Int [2]
                        ├── Then
                        │   ╰── Return
                        │       ╰── <14> Var [x]
                        ╰── Else
                            ╰── Block
                                ├── VarDeclaration
                                │   ├── Name
                                │   │   ╰── ret
                                │   ├── Type
                                │   │   ╰── Double
                                │   ╰── Initializer
                                │       ╰── <25> FunctionCall [fun]
                                │           ╰── <24>  [+]
                                │               ├── <21> Var [x]
                                │               ╰── Constant Int [2]
                                ╰── Return
                                    ╰── <33>  [+]
                                        ├── <29> Var [ret]
                                        ╰── <32> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_libraries_use_arg_after_fun_call_client() {
    let src = r#"
        double fun(double x);
        int main(void) {
            return fun(1.0);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [fun]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── x
            │           ╰── Type
            │               ╰── Double
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <15> FunctionCall [fun]
                            ╰── Constant Double [+1e0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_special_values_infinity() {
    let src = r#"
        double inf = 2e308;
        double very_large = 1.79E308;
        double zero = 0.0;
        int main(void) {
            if (inf != 11e330) {
                return 1;
            }
            if (inf <= very_large) {
                return 2;
            }
            if(very_large * 10.0 != inf) {
                return 3;
            }
            if (1.0 / zero != inf) {
                return 4;
            }
            double negated_inf = -inf;
            double negated_inf2 = -1.0 / zero;
            if (negated_inf >= -very_large) {
                return 5;
            }
            if (negated_inf != negated_inf2) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── inf
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+inf]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── very_large
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+1.79e308]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── zero
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+0e0]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <27>  [!=]
                    │   │       ├── <24> Var [inf]
                    │   │       ╰── Constant Double [+inf]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <38>  [<=]
                    │   │       ├── <34> Var [inf]
                    │   │       ╰── <37> Var [very_large]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <52>  [!=]
                    │   │       ├── <48>  [*]
                    │   │       │   ├── <45> Var [very_large]
                    │   │       │   ╰── Constant Double [+1e1]
                    │   │       ╰── <51> Var [inf]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <66>  [!=]
                    │   │       ├── <62>  [/]
                    │   │       │   ├── Constant Double [+1e0]
                    │   │       │   ╰── <61> Var [zero]
                    │   │       ╰── <65> Var [inf]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── negated_inf
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <78> Unary [-]
                    │           ╰── <77> Var [inf]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── negated_inf2
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <90>  [/]
                    │           ├── <86> Unary [-]
                    │           │   ╰── Constant Double [+1e0]
                    │           ╰── <89> Var [zero]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <100>  [>=]
                    │   │       ├── <94> Var [negated_inf]
                    │   │       ╰── <99> Unary [-]
                    │   │           ╰── <98> Var [very_large]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <111>  [!=]
                    │   │       ├── <107> Var [negated_inf]
                    │   │       ╰── <110> Var [negated_inf2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_special_values_negative_zero() {
    let src = r#"
        double copysign(double x, double y);
        double zero = 0.0;
        int main(void) {
            double negative_zero = -zero;
            if (negative_zero != 0)
                return 1;
            if ( 1/negative_zero != -10e308 )
                return 2;
            if ( (-10)/negative_zero != 10e308)
                return 3;
            int fail = 0;
            negative_zero && (fail = 1);
            if (fail)
                return 4;
            if (negative_zero) {
                return 5;
            }
            if (zero != -0.0) {
                return 6;
            }
            double negated = copysign(4.0, -0.0);
            double positive = copysign(-5.0, 0.0);
            if (negated != -4.0) {
                return 7;
            }
            if (positive != 5.0) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [copysign]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── y
            │           ╰── Type
            │               ╰── Double
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── zero
            │   ├── Type
            │   │   ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+0e0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── negative_zero
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <28> Unary [-]
                    │           ╰── <27> Var [zero]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <35>  [!=]
                    │   │       ├── <32> Var [negative_zero]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <48>  [!=]
                    │   │       ├── <43>  [/]
                    │   │       │   ├── Constant Int [1]
                    │   │       │   ╰── <42> Var [negative_zero]
                    │   │       ╰── <47> Unary [-]
                    │   │           ╰── Constant Double [+inf]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <62>  [!=]
                    │   │       ├── <59>  [/]
                    │   │       │   ├── <55> Unary [-]
                    │   │       │   │   ╰── Constant Int [10]
                    │   │       │   ╰── <58> Var [negative_zero]
                    │   │       ╰── Constant Double [+inf]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── fail
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <81>  [&&]
                    │   ├── <73> Var [negative_zero]
                    │   ╰── <80> Assign [=]
                    │       ├── <76> Var [fail]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <84> Var [fail]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <89> Var [negative_zero]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <101>  [!=]
                    │   │       ├── <96> Var [zero]
                    │   │       ╰── <100> Unary [-]
                    │   │           ╰── Constant Double [+0e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── negated
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <115> FunctionCall [copysign]
                    │           ├── Constant Double [+4e0]
                    │           ╰── <114> Unary [-]
                    │               ╰── Constant Double [+0e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── positive
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <126> FunctionCall [copysign]
                    │           ├── <124> Unary [-]
                    │           │   ╰── Constant Double [+5e0]
                    │           ╰── Constant Double [+0e0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <135>  [!=]
                    │   │       ├── <130> Var [negated]
                    │   │       ╰── <134> Unary [-]
                    │   │           ╰── Constant Double [+4e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <145>  [!=]
                    │   │       ├── <142> Var [positive]
                    │   │       ╰── Constant Double [+5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_13_valid_special_values_subnormal_not_zero() {
    let src = r#"
        int non_zero(double d) {
            return !d;
        }
        double multiply_by_large_num(double d) {
            return d * 2e20;
        }
        int main(void) {
            double subnormal = 2.5e-320;
            if (multiply_by_large_num(subnormal) != 4.99994433591341498562e-300) {
                return 2;
            }
            return non_zero(subnormal);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [non_zero]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ╰── Return
            │           ╰── <11> Unary [!]
            │               ╰── <10> Var [d]
            ├── Function [multiply_by_large_num]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── d
            │   │       ╰── Type
            │   │           ╰── Double
            │   ╰── Body
            │       ╰── Return
            │           ╰── <26>  [*]
            │               ├── <23> Var [d]
            │               ╰── Constant Double [+2e20]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── subnormal
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+2.5e-320]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <46>  [!=]
                    │   │       ├── <43> FunctionCall [multiply_by_large_num]
                    │   │       │   ╰── <42> Var [subnormal]
                    │   │       ╰── Constant Double [+4.999944335913415e-300]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── <55> FunctionCall [non_zero]
                            ╰── <54> Var [subnormal]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_declarations_extra_credit_addr_of_label() {
    let src = r#"
        
        int main(void) {
            int x = 0;
            lbl:
            x = 1;
            if (&lbl == 0) {
                return 1;
            }
            goto lbl;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── Label [lbl]
                    │   ╰── <16> Assign [=]
                    │       ├── <13> Var [x]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <24>  [==]
                    │   │       ├── <21> AddressOf
                    │   │       │   ╰── <20> Var [lbl]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── Goto [lbl]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_declarations_extra_credit_deref_label() {
    let src = r#"
        
        int main(void) {
            lbl:
            *lbl;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── Label [lbl]
                    │   ╰── <8> Dereference
                    │       ╰── <7> Var [lbl]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_parse_abstract_function_declarator() {
    assert_error(
        r#"
        int main(void) {
            (int (void)) 0;
                //^^^^ Expected ')', but found 'void'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_14_invalid_parse_cast_to_declarator() {
    assert_error(
        r#"
        int main(void)
        {
            return (int **a)(10);
                        //^ Expected ')', but found 'a'
        }
    "#,
    );
}

#[test]
fn test_chapter_14_invalid_parse_malformed_abstract_declarator() {
    assert_error(
        r#"
        int main(void) {
            (int (*)*) 10;
                  //^ Expected ')', but found '*'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_14_invalid_parse_malformed_declarator() {
    assert_error(
        r#"
        int main(void) {
            int (*)* y;
                //^ Expected identifier, but found ')'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_14_invalid_parse_malformed_function_declarator() {
    assert_error(
        r#"
        int (foo(void))(void);
          //^^^^^^^^^^^ Can't apply additional derivations to a function type
        int main(void) {
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_14_invalid_parse_malformed_function_declarator_2() {
    assert_error(
        r#"
        int foo((void));
              //^ Expected type specifier
    "#,
    );
}

#[test]
fn test_chapter_14_invalid_types_address_of_address() {
    let src = r#"
        int main(void) {
            int x = 0;
            int *y = &x;
            int **z = &(&x);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <17> AddressOf
                    │           ╰── <16> Var [x]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── z
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Pointer
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── <29> AddressOf
                    │           ╰── <28> AddressOf
                    │               ╰── <26> Var [x]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_address_of_assignment() {
    let src = r#"
        int main(void) {
            int x = 0;
            int y = 0;
            int *ptr = &(x = y);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <28> AddressOf
                    │           ╰── <27> Assign [=]
                    │               ├── <22> Var [x]
                    │               ╰── <25> Var [y]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_address_of_constant() {
    let src = r#"
        
        int main(void) {
            int *ptr = &10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <10> AddressOf
                    │           ╰── Constant Int [10]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_address_of_ternary() {
    let src = r#"
        int main(void) {
            int x = 1;
            int y = 2;
            int z = 3;
            int *ptr = &(x ? y : z);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── z
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <35> AddressOf
                    │           ╰── <{node_id}> Conditional [?]
                    │               ├── <28> Var [x]
                    │               ├── Then
                    │               │   ╰── <30> Var [y]
                    │               ╰── Else
                    │                   ╰── <32> Var [z]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_assign_int_to_pointer() {
    let src = r#"
        int main(void) {
            int *x;
            x = 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Pointer
                    │           ╰── Int
                    ├── <14> Assign [=]
                    │   ├── <11> Var [x]
                    │   ╰── Constant Int [10]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_assign_int_var_to_pointer() {
    let src = r#"
        int main(void)
        {
            int x = 0;
            int *ptr = x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── ptr
                        ├── Type
                        │   ╰── Pointer
                        │       ╰── Int
                        ╰── Initializer
                            ╰── <16> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_assign_to_address() {
    let src = r#"
        int main(void)
        {
            int x = 0;
            &x = 10;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── <16> Assign [=]
                        ├── <13> AddressOf
                        │   ╰── <12> Var [x]
                        ╰── Constant Int [10]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_assign_wrong_pointer_type() {
    let src = r#"
        int main(void)
        {
            double *d = 0;
            long *l = 0;
            l = d;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <24> Assign [=]
                    │   ├── <20> Var [l]
                    │   ╰── <23> Var [d]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_bad_null_pointer_constant() {
    let src = r#"
        int main(void)
        {
            int *x = 0.0;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Double [+0e0]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_cast_double_to_pointer() {
    let src = r#"
        int main(void) {
            double d = 0.0;
            int *x = (int *) d;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+0e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <20> Cast
                    │           ├── Target
                    │           │   ╰── Pointer
                    │           │       ╰── Int
                    │           ╰── Expression
                    │               ╰── <19> Var [d]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_cast_pointer_to_double() {
    let src = r#"
        int main(void) {
            int *x;
            double d = (double) x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Pointer
                    │           ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <17> Cast
                    │           ├── Target
                    │           │   ╰── Double
                    │           ╰── Expression
                    │               ╰── <16> Var [x]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_compare_mixed_pointer_types() {
    let src = r#"
        
        int main(void) {
            int *x = 0ul;
            unsigned *y = 0ul;
            return x == y;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant ULong [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── Constant ULong [0]
                    ╰── Return
                        ╰── <24>  [==]
                            ├── <20> Var [x]
                            ╰── <23> Var [y]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_compare_pointer_to_ulong() {
    let src = r#"
        
        int main(void) {
            int *ptr = 0ul;
            unsigned long ul = 0ul;
            return ptr == ul;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant ULong [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [0]
                    ╰── Return
                        ╰── <23>  [==]
                            ├── <19> Var [ptr]
                            ╰── <22> Var [ul]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_complement_pointer() {
    let src = r#"
        
        int main(void) {
            int *x = 0;
            return (int) ~x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <18> Cast
                            ├── Target
                            │   ╰── Int
                            ╰── Expression
                                ╰── <17> Unary [~]
                                    ╰── <16> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_dereference_non_pointer() {
    let src = r#"
        
        int main(void) {
            unsigned long l = 100ul;
            return *l;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [100]
                    ╰── Return
                        ╰── <13> Dereference
                            ╰── <12> Var [l]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_divide_pointer() {
    let src = r#"
        
        int main(void)
        {
            int x = 10;
            int *y = &x;
            (y / 8);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <17> AddressOf
                    │           ╰── <16> Var [x]
                    ├── <25>  [/]
                    │   ├── <21> Var [y]
                    │   ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_bitwise_and_pointer() {
    let src = r#"
        
        int main(void) {
            long *ptr = 0;
            10 & ptr;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <16>  [&]
                    │   ├── Constant Int [10]
                    │   ╰── <15> Var [ptr]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_bitwise_compound_assign_to_pointer() {
    let src = r#"
        
        int main(void) {
            int x = 0;
            int *ptr = &x;
            ptr &= 0;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <17> AddressOf
                    │           ╰── <16> Var [x]
                    ├── <24> Assign [&=]
                    │   ├── <21> Var [ptr]
                    │   ╰── Constant Int [0]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_bitwise_compound_assign_with_pointer() {
    let src = r#"
        int main(void) {
            int *null = 0;
            int x = 100;
            x |= null;
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── null
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── <23> Assign [|=]
                    │   ├── <19> Var [x]
                    │   ╰── <22> Var [null]
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_bitwise_lshift_pointer() {
    let src = r#"
        
        int main(void) {
            int *ptr = 0;
            int i = 1000;
            i >> ptr;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1000]
                    ├── <23>  [>>]
                    │   ├── <19> Var [i]
                    │   ╰── <22> Var [ptr]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_bitwise_or_pointer() {
    let src = r#"
        
        int main(void) {
            int *x = 0;
            int *y = 0;
            x | y;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <24>  [|]
                    │   ├── <20> Var [x]
                    │   ╰── <23> Var [y]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_bitwise_rshift_pointer() {
    let src = r#"
        
        int main(void) {
            int *x = 0;
            return (int) (x >> 10);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <20> Cast
                            ├── Target
                            │   ╰── Int
                            ╰── Expression
                                ╰── <19>  [>>]
                                    ├── <15> Var [x]
                                    ╰── Constant Int [10]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_bitwise_xor_pointer() {
    let src = r#"
        
        int main(void) {
            unsigned long *ptr = 0;
            long l = 100;
            ptr ^ l;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── <23>  [^]
                    │   ├── <19> Var [ptr]
                    │   ╰── <22> Var [l]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_compound_assign_thru_ptr_not_lval() {
    let src = r#"
        int main(void) {
            int i = 100;
            int *ptr = &i;
            int *ptr2 = &(*ptr -= 10);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <17> AddressOf
                    │           ╰── <16> Var [i]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr2
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <31> AddressOf
                    │           ╰── <30> Assign [-=]
                    │               ├── <26> Dereference
                    │               │   ╰── <25> Var [ptr]
                    │               ╰── Constant Int [10]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_compound_assignment_not_lval() {
    let src = r#"
        int main(void) {
            int i = 100;
            int *ptr = &(i += 200);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <21> AddressOf
                    │           ╰── <20> Assign [+=]
                    │               ├── <16> Var [i]
                    │               ╰── Constant Int [200]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_compound_divide_pointer() {
    let src = r#"
        int main(void) {
            int *x = 0;
            int *y = 0;
            x /= y;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <24> Assign [/=]
                    │   ├── <20> Var [x]
                    │   ╰── <23> Var [y]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_compound_mod_pointer() {
    let src = r#"
        int main(void) {
            int i = 10;
            int *ptr = &i;
            i %= ptr;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <17> AddressOf
                    │           ╰── <16> Var [i]
                    ├── <25> Assign [&=]
                    │   ├── <21> Var [i]
                    │   ╰── <24> Var [ptr]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_compound_multiply_pointer() {
    let src = r#"
        int main(void) {
            int *x = 0;
            x *= 2;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <16> Assign [*=]
                    │   ├── <13> Var [x]
                    │   ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_postfix_decr_not_lvalue() {
    let src = r#"
        int main(void) {
            int i = 10;
            int *ptr = &i--;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <19> AddressOf
                    │           ╰── <18> Postfix [--]
                    │               ╰── <16> Var [i]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_prefix_incr_not_lvalue() {
    let src = r#"
        int main(void) {
            int i = 10;
            int *ptr = &++i;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <19> AddressOf
                    │           ╰── <18> Unary [++]
                    │               ╰── <17> Var [i]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_extra_credit_switch_on_pointer() {
    let src = r#"
        int main(void) {
            int *x = 0;
            switch(x) {
                case 0: return 0;
                default: return 1;
            }
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Switch
                        ├── Expression
                        │   ╰── <13> Var [x]
                        ╰── Block
                            ├── Case [0]
                            │   ╰── Return
                            │       ╰── Constant Int [0]
                            ╰── Default
                                ╰── Return
                                    ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_invalid_pointer_initializer() {
    let src = r#"
        int main(void)
        {
            int *ptr = 140732898195768ul;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant ULong [140732898195768]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_invalid_static_initializer() {
    let src = r#"
        
        static int *x = 10;
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Int
            │   ├── Initializer
            │   │   ╰── Constant Int [10]
            │   ╰── Static
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_multiply_pointers() {
    let src = r#"
        
        int main(void) {
            int *x = 0;
            int *y = x;
            (x * y);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <17> Var [x]
                    ├── <26>  [*]
                    │   ├── <21> Var [x]
                    │   ╰── <24> Var [y]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_multiply_pointers_2() {
    let src = r#"
        
        int main(void)
        {
            int *x = 0;
            (0 * x);
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <17>  [*]
                    │   ├── Constant Int [0]
                    │   ╰── <15> Var [x]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_negate_pointer() {
    let src = r#"
        
        int main(void) {
            int *x = 0;
            -x;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <15> Unary [-]
                    │   ╰── <14> Var [x]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_pass_pointer_as_int() {
    let src = r#"
        int f(int i) {
            return i;
        }
        int main(void) {
            int x;
            return f(&x);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [f]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <9> Var [i]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Int
                    ╰── Return
                        ╰── <25> FunctionCall [f]
                            ╰── <24> AddressOf
                                ╰── <23> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_return_wrong_pointer_type() {
    let src = r#"
        int i;
        long *return_long_pointer(void) {
            return &i;
        }
        int main(void) {
            long *l = return_long_pointer();
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ╰── Type
            │       ╰── Int
            ├── Function [return_long_pointer]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <12> AddressOf
            │               ╰── <11> Var [i]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── <25> FunctionCall [return_long_pointer]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_invalid_types_ternary_mixed_pointer_types() {
    let src = r#"
        int main(void) {
            long *x = 0;
            int *y = 0;
            int *result = 1 ? x : y;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <{node_id}> Conditional [?]
                    │           ├── Constant Int [1]
                    │           ├── Then
                    │           │   ╰── <25> Var [x]
                    │           ╰── Else
                    │               ╰── <27> Var [y]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_casts_cast_between_pointer_types() {
    let src = r#"
        int check_null_ptr_cast(void) {
            static long *long_ptr = 0;
            double *dbl_ptr = (double *)long_ptr;
            unsigned int *int_ptr = (unsigned int *)long_ptr;
            int **ptr_ptr = (int **)long_ptr;
            if (long_ptr) {
                return 1;
            }
            if (dbl_ptr) {
                return 2;
            }
            if (int_ptr) {
                return 3;
            }
            if (ptr_ptr) {
                return 4;
            }
            return 0;
        }
        int check_round_trip(void) {
            long l = -1;
            long *long_ptr = &l;
            double *dbl_ptr = (double *)long_ptr;
            long *other_long_ptr = (long *)dbl_ptr;
            if (*other_long_ptr != -1) {
                return 5;
            }
            return 0;
        }
        int main(void)
        {
            int result = check_null_ptr_cast();
            if (result) {
                return result;
            }
            result = check_round_trip();
            return result;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [check_null_ptr_cast]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── long_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Long
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── dbl_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <22> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Double
            │       │           ╰── Expression
            │       │               ╰── <21> Var [long_ptr]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── int_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── <34> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Unsigned Int
            │       │           ╰── Expression
            │       │               ╰── <33> Var [long_ptr]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Pointer
            │       │   │           ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <48> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Pointer
            │       │           │           ╰── Int
            │       │           ╰── Expression
            │       │               ╰── <47> Var [long_ptr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <52> Var [long_ptr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <59> Var [dbl_ptr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <66> Var [int_ptr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <73> Var [ptr_ptr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [4]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [check_round_trip]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <92> Unary [-]
            │       │           ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── long_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <101> AddressOf
            │       │           ╰── <100> Var [l]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── dbl_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <113> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Double
            │       │           ╰── Expression
            │       │               ╰── <112> Var [long_ptr]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── other_long_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <125> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Long
            │       │           ╰── Expression
            │       │               ╰── <124> Var [dbl_ptr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <135>  [!=]
            │       │   │       ├── <130> Dereference
            │       │   │       │   ╰── <129> Var [other_long_ptr]
            │       │   │       ╰── <134> Unary [-]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [5]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <153> FunctionCall [check_null_ptr_cast]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <157> Var [result]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <159> Var [result]
                    ├── <169> Assign [=]
                    │   ├── <165> Var [result]
                    │   ╰── <168> FunctionCall [check_round_trip]
                    ╰── Return
                        ╰── <172> Var [result]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_casts_null_pointer_conversion() {
    let src = r#"
        double *d = 0l;
        int *i = 0ul;
        int *i2 = 0u;
        int expect_null_param(int *val)
        {
            return (val == 0ul);
        }
        long *return_null_ptr(void)
        {
            return 0;
        }
        int main(void)
        {
            int x = 10;
            int *ptr = &x;
            if (d) {
                return 1;
            }
            if (i) {
                return 2;
            }
            if (i2) {
                return 3;
            }
            ptr = 0ul;
            if (ptr) {
                return 4;
            }
            int *y = 0;
            if (y != 0)
                return 5;
            if (!expect_null_param(0)) {
                return 6;
            }
            long *null_ptr = return_null_ptr();
            if (null_ptr != 0) {
                return 7;
            }
            ptr = &x;
            int *ternary_result = 10 ? 0 : ptr;
            if (ternary_result) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── d
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Long [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Int
            │   ╰── Initializer
            │       ╰── Constant ULong [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i2
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Int
            │   ╰── Initializer
            │       ╰── Constant UInt [0]
            ├── Function [expect_null_param]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── val
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <35>  [==]
            │               ├── <31> Var [val]
            │               ╰── Constant ULong [0]
            ├── Function [return_null_ptr]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <64> AddressOf
                    │           ╰── <63> Var [x]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <68> Var [d]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <75> Var [i]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <82> Var [i2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <92> Assign [=]
                    │   ├── <89> Var [ptr]
                    │   ╰── Constant ULong [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <95> Var [ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <112>  [!=]
                    │   │       ├── <109> Var [y]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <120> Unary [!]
                    │   │       ╰── <119> FunctionCall [expect_null_param]
                    │   │           ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── null_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── <131> FunctionCall [return_null_ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <138>  [!=]
                    │   │       ├── <135> Var [null_ptr]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── <150> Assign [=]
                    │   ├── <145> Var [ptr]
                    │   ╰── <149> AddressOf
                    │       ╰── <148> Var [x]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ternary_result
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <{node_id}> Conditional [?]
                    │           ├── Constant Int [10]
                    │           ├── Then
                    │           │   ╰── Constant Int [0]
                    │           ╰── Else
                    │               ╰── <159> Var [ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <164> Var [ternary_result]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_casts_pointer_int_casts() {
    let src = r#"
        int i = 128;
        long l = 128l;
        int int_to_pointer(void) {
            int *a = (int *) i;
            int *b = (int *) l;
            return a == b;
        }
        int pointer_to_int(void) {
            static long l;
            long *ptr = &l;
            unsigned long ptr_as_long = (unsigned long) ptr;
            return (ptr_as_long % 8 == 0);
        }
        int cast_long_round_trip(void) {
            int *ptr = (int *) l;
            long l2 = (long) ptr;
            return (l == l2);
        }
        int cast_ulong_round_trip(void) {
            long *ptr = &l;
            unsigned long ptr_as_ulong = (unsigned long) ptr;
            long *ptr2 = (long *) ptr_as_ulong;
            return (ptr == ptr2);
        }
        int cast_int_round_trip(void) {
            double *a = (double *)i;
            int i2 = (int) a;
            return (i2 == 128);
        }
        int main(void) {
            if (!int_to_pointer()) {
                return 1;
            }
            if (!pointer_to_int()) {
                return 2;
            }
            if (!cast_long_round_trip()) {
                return 3;
            }
            if (!cast_ulong_round_trip()) {
                return 4;
            }
            if (!cast_int_round_trip()) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [128]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Long [128]
            ├── Function [int_to_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <26> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Int
            │       │           ╰── Expression
            │       │               ╰── <25> Var [i]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <38> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Int
            │       │           ╰── Expression
            │       │               ╰── <37> Var [l]
            │       ╰── Return
            │           ╰── <46>  [==]
            │               ├── <42> Var [a]
            │               ╰── <45> Var [b]
            ├── Function [pointer_to_int]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <65> AddressOf
            │       │           ╰── <64> Var [l]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr_as_long
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <75> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <74> Var [ptr]
            │       ╰── Return
            │           ╰── <86>  [==]
            │               ├── <82>  [%]
            │               │   ├── <79> Var [ptr_as_long]
            │               │   ╰── Constant Int [8]
            │               ╰── Constant Int [0]
            ├── Function [cast_long_round_trip]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <103> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Int
            │       │           ╰── Expression
            │       │               ╰── <102> Var [l]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── l2
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <113> Cast
            │       │           ├── Target
            │       │           │   ╰── Long
            │       │           ╰── Expression
            │       │               ╰── <112> Var [ptr]
            │       ╰── Return
            │           ╰── <122>  [==]
            │               ├── <117> Var [l]
            │               ╰── <120> Var [l2]
            ├── Function [cast_ulong_round_trip]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <136> AddressOf
            │       │           ╰── <135> Var [l]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr_as_ulong
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <146> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <145> Var [ptr]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr2
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <158> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Long
            │       │           ╰── Expression
            │       │               ╰── <157> Var [ptr_as_ulong]
            │       ╰── Return
            │           ╰── <167>  [==]
            │               ├── <162> Var [ptr]
            │               ╰── <165> Var [ptr2]
            ├── Function [cast_int_round_trip]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <184> Cast
            │       │           ├── Target
            │       │           │   ╰── Pointer
            │       │           │       ╰── Double
            │       │           ╰── Expression
            │       │               ╰── <183> Var [i]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i2
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <194> Cast
            │       │           ├── Target
            │       │           │   ╰── Int
            │       │           ╰── Expression
            │       │               ╰── <193> Var [a]
            │       ╰── Return
            │           ╰── <202>  [==]
            │               ├── <198> Var [i2]
            │               ╰── Constant Int [128]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <213> Unary [!]
                    │   │       ╰── <212> FunctionCall [int_to_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <222> Unary [!]
                    │   │       ╰── <221> FunctionCall [pointer_to_int]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <231> Unary [!]
                    │   │       ╰── <230> FunctionCall [cast_long_round_trip]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <240> Unary [!]
                    │   │       ╰── <239> FunctionCall [cast_ulong_round_trip]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <249> Unary [!]
                    │   │       ╰── <248> FunctionCall [cast_int_round_trip]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_comparisons_compare_pointers() {
    let src = r#"
        int main(void) {
            int a = 0;
            int b;
            int *a_ptr = &a;
            int *a_ptr2 = &a;
            int *b_ptr = &b;
            if (a_ptr == b_ptr) {
                return 1;
            }
            if (a_ptr != a_ptr2) {
                return 2;
            }
            if (!(a_ptr == a_ptr2)) {
                return 3;
            }
            if (!(a_ptr != b_ptr)) {
                return 4;
            }
            *b_ptr = *a_ptr;
            if (a_ptr == b_ptr) {
                return 5;
            }
            b_ptr = a_ptr;
            if (b_ptr != a_ptr) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b
                    │   ╰── Type
                    │       ╰── Int
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <21> AddressOf
                    │           ╰── <20> Var [a]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a_ptr2
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <30> AddressOf
                    │           ╰── <29> Var [a]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── b_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <39> AddressOf
                    │           ╰── <38> Var [b]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <47>  [==]
                    │   │       ├── <43> Var [a_ptr]
                    │   │       ╰── <46> Var [b_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <58>  [!=]
                    │   │       ├── <54> Var [a_ptr]
                    │   │       ╰── <57> Var [a_ptr2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <72> Unary [!]
                    │   │       ╰── <71>  [==]
                    │   │           ├── <66> Var [a_ptr]
                    │   │           ╰── <69> Var [a_ptr2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <86> Unary [!]
                    │   │       ╰── <85>  [!=]
                    │   │           ├── <80> Var [a_ptr]
                    │   │           ╰── <83> Var [b_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <99> Assign [=]
                    │   ├── <94> Dereference
                    │   │   ╰── <93> Var [b_ptr]
                    │   ╰── <98> Dereference
                    │       ╰── <97> Var [a_ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <106>  [==]
                    │   │       ├── <102> Var [a_ptr]
                    │   │       ╰── <105> Var [b_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── <117> Assign [=]
                    │   ├── <113> Var [b_ptr]
                    │   ╰── <116> Var [a_ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <124>  [!=]
                    │   │       ├── <120> Var [b_ptr]
                    │   │       ╰── <123> Var [a_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_comparisons_compare_to_null() {
    let src = r#"
        double *get_null_pointer(void) {
            return 0;
        }
        int main(void)
        {
            double x;
            double *null = get_null_pointer();
            double *non_null = &x;
            if (non_null == 0) {
                return 1;
            }
            if (!(null == 0l)) {
                return 2;
            }
            if (!(non_null != 0u)) {
                return 3;
            }
            if (null != 0ul) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [get_null_pointer]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Double
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── null
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <23> FunctionCall [get_null_pointer]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── non_null
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <32> AddressOf
                    │           ╰── <31> Var [x]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <39>  [==]
                    │   │       ├── <36> Var [non_null]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <52> Unary [!]
                    │   │       ╰── <51>  [==]
                    │   │           ├── <47> Var [null]
                    │   │           ╰── Constant Long [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <65> Unary [!]
                    │   │       ╰── <64>  [!=]
                    │   │           ├── <60> Var [non_null]
                    │   │           ╰── Constant UInt [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <75>  [!=]
                    │   │       ├── <72> Var [null]
                    │   │       ╰── Constant ULong [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_comparisons_pointers_as_conditions() {
    let src = r#"
        long *get_null_pointer(void) {
            return 0;
        }
        int main(void)
        {
            long x;
            long *ptr = &x;
            long *null_ptr = get_null_pointer();
            if (5.0 && null_ptr) {
                return 1;
            }
            int a = 0;
            if (!(ptr || (a = 10))) {
                return 2;
            }
            if (a != 0) {
                return 3;
            }
            if (!ptr) {
                return 4;
            }
            int j = ptr ? 1 : 2;
            int k = null_ptr ? 3 : 4;
            if (j != 1) {
                return 5;
            }
            if (k != 4) {
                return 6;
            }
            int i = 0;
            while (ptr)
            {
                if (i >= 10) {
                    ptr = 0;
                    continue;
                }
                i = i + 1;
            }
            if (i != 10) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [get_null_pointer]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Long
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── <24> AddressOf
                    │           ╰── <23> Var [x]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── null_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── <32> FunctionCall [get_null_pointer]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <39>  [&&]
                    │   │       ├── Constant Double [+5e0]
                    │   │       ╰── <38> Var [null_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <63> Unary [!]
                    │   │       ╰── <62>  [||]
                    │   │           ├── <53> Var [ptr]
                    │   │           ╰── <60> Assign [=]
                    │   │               ├── <56> Var [a]
                    │   │               ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <73>  [!=]
                    │   │       ├── <70> Var [a]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <82> Unary [!]
                    │   │       ╰── <81> Var [ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── j
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <{node_id}> Conditional [?]
                    │           ├── <92> Var [ptr]
                    │           ├── Then
                    │           │   ╰── Constant Int [1]
                    │           ╰── Else
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── k
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <{node_id}> Conditional [?]
                    │           ├── <102> Var [null_ptr]
                    │           ├── Then
                    │           │   ╰── Constant Int [3]
                    │           ╰── Else
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <112>  [!=]
                    │   │       ├── <109> Var [j]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <122>  [!=]
                    │   │       ├── <119> Var [k]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── While
                    │   ├── Condition
                    │   │   ╰── <135> Var [ptr]
                    │   ╰── Body
                    │       ╰── Block
                    │           ├── If
                    │           │   ├── Condition
                    │           │   │   ╰── <140>  [>=]
                    │           │   │       ├── <137> Var [i]
                    │           │   │       ╰── Constant Int [10]
                    │           │   ╰── Then
                    │           │       ╰── Block
                    │           │           ├── <145> Assign [=]
                    │           │           │   ├── <142> Var [ptr]
                    │           │           │   ╰── Constant Int [0]
                    │           │           ╰── Continue
                    │           ╰── <159> Assign [=]
                    │               ├── <152> Var [i]
                    │               ╰── <158>  [+]
                    │                   ├── <155> Var [i]
                    │                   ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <168>  [!=]
                    │   │       ├── <165> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_declarators_abstract_declarators() {
    let src = r#"
        
        int main(void) {
            long int unsigned *x = 0;
            if (x != (unsigned long (*)) 0)
                return 1;
            if (x != (long unsigned int ((((*))))) 0)
                return 2;
            double ***y = 0;
            if (y != (double *(**)) 0)
                return 3;
            if (y != (double (***)) 0)
                return 4;
            if ((double (*(*(*)))) 0 != y)
                return 5;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <21>  [!=]
                    │   │       ├── <13> Var [x]
                    │   │       ╰── <20> Cast
                    │   │           ├── Target
                    │   │           │   ╰── Pointer
                    │   │           │       ╰── Unsigned Long
                    │   │           ╰── Expression
                    │   │               ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37>  [!=]
                    │   │       ├── <26> Var [x]
                    │   │       ╰── <36> Cast
                    │   │           ├── Target
                    │   │           │   ╰── Pointer
                    │   │           │       ╰── Unsigned Long
                    │   │           ╰── Expression
                    │   │               ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Pointer
                    │   │           ╰── Pointer
                    │   │               ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <61>  [!=]
                    │   │       ├── <51> Var [y]
                    │   │       ╰── <60> Cast
                    │   │           ├── Target
                    │   │           │   ╰── Pointer
                    │   │           │       ╰── Pointer
                    │   │           │           ╰── Pointer
                    │   │           │               ╰── Double
                    │   │           ╰── Expression
                    │   │               ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <76>  [!=]
                    │   │       ├── <66> Var [y]
                    │   │       ╰── <75> Cast
                    │   │           ├── Target
                    │   │           │   ╰── Pointer
                    │   │           │       ╰── Pointer
                    │   │           │           ╰── Pointer
                    │   │           │               ╰── Double
                    │   │           ╰── Expression
                    │   │               ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <93>  [!=]
                    │   │       ├── <89> Cast
                    │   │       │   ├── Target
                    │   │       │   │   ╰── Pointer
                    │   │       │   │       ╰── Pointer
                    │   │       │   │           ╰── Pointer
                    │   │       │   │               ╰── Double
                    │   │       │   ╰── Expression
                    │   │       │       ╰── Constant Int [0]
                    │   │       ╰── <92> Var [y]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_declarators_declarators() {
    let src = r#"
        int return_3(void);
        int(return_3(void));
        int(return_3)(void);
        int((return_3))(void)
        {
            return 3;
        }
        long l = 100;
        long *two_pointers(double val, double *ptr)
        {
            *ptr = val;
            return &l;
        }
        long(*two_pointers(double val, double(*d)));
        long *(two_pointers)(double val, double *(d));
        long *(two_pointers)(double val, double(*(d)));
        unsigned **pointers_to_pointers(int **p)
        {
            static unsigned u;
            static unsigned *u_ptr;
            u_ptr = &u;
            u = **p;
            return &u_ptr;
        }
        unsigned(**(pointers_to_pointers(int *(*p))));
        unsigned *(*pointers_to_pointers(int(**p)));
        unsigned(*(*((pointers_to_pointers)(int(*(*(p)))))));
        int main(void)
        {
            int i = 0;
            int(*i_ptr) = &i;
            int(**ptr_to_iptr) = &i_ptr;
            double(d1) = 0.0;
            double d2 = 10.0;
            double *(d_ptr) = &d1;
            long(*(l_ptr));
            unsigned *(*(ptr_to_uptr));
            i = return_3();
            if (i != 3)
                return 1;
            if (*i_ptr != 3) {
                return 2;
            }
            l_ptr = two_pointers(d2, d_ptr);
            if (l_ptr != &l) {
                return 3;
            }
            if (*l_ptr != 100) {
                return 4;
            }
            if (*d_ptr != 10.0) {
                return 5;
            }
            if (d1 != 10.0) {
                return 6;
            }
            ptr_to_uptr = pointers_to_pointers(ptr_to_iptr);
            if (**ptr_to_uptr != 3) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [return_3]
            ├── Function [return_3]
            ├── Function [return_3]
            ├── Function [return_3]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [3]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Int [100]
            ├── Function [two_pointers]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── val
            │   │   │   ╰── Type
            │   │   │       ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Double
            │   ╰── Body
            │       ├── <52> Assign [=]
            │       │   ├── <48> Dereference
            │       │   │   ╰── <47> Var [ptr]
            │       │   ╰── <51> Var [val]
            │       ╰── Return
            │           ╰── <56> AddressOf
            │               ╰── <55> Var [l]
            ├── Function [two_pointers]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── val
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Double
            ├── Function [two_pointers]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── val
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Double
            ├── Function [two_pointers]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── val
            │       │   ╰── Type
            │       │       ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── d
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Double
            ├── Function [pointers_to_pointers]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── p
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Pointer
            │   │                   ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── u
            │       │   ├── Type
            │       │   │   ╰── Unsigned Int
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── u_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Unsigned Int
            │       │   ╰── Static
            │       ├── <134> Assign [=]
            │       │   ├── <129> Var [u_ptr]
            │       │   ╰── <133> AddressOf
            │       │       ╰── <132> Var [u]
            │       ├── <143> Assign [=]
            │       │   ├── <137> Var [u]
            │       │   ╰── <142> Dereference
            │       │       ╰── <141> Dereference
            │       │           ╰── <140> Var [p]
            │       ╰── Return
            │           ╰── <147> AddressOf
            │               ╰── <146> Var [u_ptr]
            ├── Function [pointers_to_pointers]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── p
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Pointer
            │                       ╰── Int
            ├── Function [pointers_to_pointers]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── p
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Pointer
            │                       ╰── Int
            ├── Function [pointers_to_pointers]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── p
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Pointer
            │                       ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <216> AddressOf
                    │           ╰── <215> Var [i]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr_to_iptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Pointer
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── <227> AddressOf
                    │           ╰── <226> Var [i_ptr]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d1
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+0e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d2
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <250> AddressOf
                    │           ╰── <249> Var [d1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l_ptr
                    │   ╰── Type
                    │       ╰── Pointer
                    │           ╰── Long
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr_to_uptr
                    │   ╰── Type
                    │       ╰── Pointer
                    │           ╰── Pointer
                    │               ╰── Unsigned Int
                    ├── <273> Assign [=]
                    │   ├── <269> Var [i]
                    │   ╰── <272> FunctionCall [return_3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <279>  [!=]
                    │   │       ├── <276> Var [i]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <288>  [!=]
                    │   │       ├── <285> Dereference
                    │   │       │   ╰── <284> Var [i_ptr]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── <303> Assign [=]
                    │   ├── <295> Var [l_ptr]
                    │   ╰── <302> FunctionCall [two_pointers]
                    │       ├── <299> Var [d2]
                    │       ╰── <301> Var [d_ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <311>  [!=]
                    │   │       ├── <306> Var [l_ptr]
                    │   │       ╰── <310> AddressOf
                    │   │           ╰── <309> Var [l]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <322>  [!=]
                    │   │       ├── <319> Dereference
                    │   │       │   ╰── <318> Var [l_ptr]
                    │   │       ╰── Constant Int [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <333>  [!=]
                    │   │       ├── <330> Dereference
                    │   │       │   ╰── <329> Var [d_ptr]
                    │   │       ╰── Constant Double [+1e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <343>  [!=]
                    │   │       ├── <340> Var [d1]
                    │   │       ╰── Constant Double [+1e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── <356> Assign [=]
                    │   ├── <350> Var [ptr_to_uptr]
                    │   ╰── <355> FunctionCall [pointers_to_pointers]
                    │       ╰── <354> Var [ptr_to_iptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <364>  [!=]
                    │   │       ├── <361> Dereference
                    │   │       │   ╰── <360> Dereference
                    │   │       │       ╰── <359> Var [ptr_to_uptr]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_declarators_declare_pointer_in_for_loop() {
    let src = r#"
        int main(void) {
            int x = 10;
            for (int *i = &x; i != 0; ) {
                *i = 5;
                i = 0;
            }
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Pointer
                    │   │       │       ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── <17> AddressOf
                    │   │               ╰── <16> Var [x]
                    │   ├── Condition
                    │   │   ╰── <25>  [!=]
                    │   │       ├── <22> Var [i]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Block
                    │       ├── <31> Assign [=]
                    │       │   ├── <28> Dereference
                    │       │   │   ╰── <27> Var [i]
                    │       │   ╰── Constant Int [5]
                    │       ╰── <37> Assign [=]
                    │           ├── <34> Var [i]
                    │           ╰── Constant Int [0]
                    ╰── Return
                        ╰── <43> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_address_of_dereference() {
    let src = r#"
        int main(void) {
            int *null_ptr = 0;
            if (&*null_ptr != 0)
                return 1;
            int **ptr_to_null = &null_ptr;
            if (&**ptr_to_null)
                return 2;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── null_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <18>  [!=]
                    │   │       ├── <15> AddressOf
                    │   │       │   ╰── <14> Dereference
                    │   │       │       ╰── <13> Var [null_ptr]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr_to_null
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Pointer
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── <29> AddressOf
                    │           ╰── <28> Var [null_ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <36> AddressOf
                    │   │       ╰── <35> Dereference
                    │   │           ╰── <34> Dereference
                    │   │               ╰── <33> Var [ptr_to_null]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_dereference_expression_result() {
    let src = r#"
        int *return_pointer(void) {
            static int var = 10;
            return &var;
        }
        int one = 1;
        int main(void) {
            int val = 100;
            int *ptr_var = &val;
            if (*return_pointer() != 10) {
                return 1;
            }
            if (*(one ? return_pointer() : ptr_var) != 10)
                return 2;
            if (*(one - 1 ? return_pointer() : ptr_var) != 100) {
                return 3;
            }
            int *ptr_to_one = &one;
            if (*(ptr_var = ptr_to_one) != 1) {
                return 4;
            }
            *return_pointer() = 20;
            *(one ? ptr_var : return_pointer()) = 30;
            if (*return_pointer() != 20) {
                return 5;
            }
            if (*ptr_var != 30) {
                return 6;
            }
            if (one != 30) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [return_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── var
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [10]
            │       │   ╰── Static
            │       ╰── Return
            │           ╰── <15> AddressOf
            │               ╰── <14> Var [var]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── one
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── val
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr_var
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <41> AddressOf
                    │           ╰── <40> Var [val]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <49>  [!=]
                    │   │       ├── <46> Dereference
                    │   │       │   ╰── <45> FunctionCall [return_pointer]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <66>  [!=]
                    │   │       ├── <63> Dereference
                    │   │       │   ╰── <{node_id}> Conditional [?]
                    │   │       │       ├── <56> Var [one]
                    │   │       │       ├── Then
                    │   │       │       │   ╰── <58> FunctionCall [return_pointer]
                    │   │       │       ╰── Else
                    │   │       │           ╰── <60> Var [ptr_var]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <84>  [!=]
                    │   │       ├── <81> Dereference
                    │   │       │   ╰── <{node_id}> Conditional [?]
                    │   │       │       ├── <74>  [-]
                    │   │       │       │   ├── <71> Var [one]
                    │   │       │       │   ╰── Constant Int [1]
                    │   │       │       ├── Then
                    │   │       │       │   ╰── <76> FunctionCall [return_pointer]
                    │   │       │       ╰── Else
                    │   │       │           ╰── <78> Var [ptr_var]
                    │   │       ╰── Constant Int [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr_to_one
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <96> AddressOf
                    │           ╰── <95> Var [one]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <109>  [!=]
                    │   │       ├── <106> Dereference
                    │   │       │   ╰── <105> Assign [=]
                    │   │       │       ├── <100> Var [ptr_var]
                    │   │       │       ╰── <103> Var [ptr_to_one]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <120> Assign [=]
                    │   ├── <117> Dereference
                    │   │   ╰── <116> FunctionCall [return_pointer]
                    │   ╰── Constant Int [20]
                    ├── <133> Assign [=]
                    │   ├── <130> Dereference
                    │   │   ╰── <{node_id}> Conditional [?]
                    │   │       ├── <123> Var [one]
                    │   │       ├── Then
                    │   │       │   ╰── <125> Var [ptr_var]
                    │   │       ╰── Else
                    │   │           ╰── <127> FunctionCall [return_pointer]
                    │   ╰── Constant Int [30]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <140>  [!=]
                    │   │       ├── <137> Dereference
                    │   │       │   ╰── <136> FunctionCall [return_pointer]
                    │   │       ╰── Constant Int [20]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <151>  [!=]
                    │   │       ├── <148> Dereference
                    │   │       │   ╰── <147> Var [ptr_var]
                    │   │       ╰── Constant Int [30]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <161>  [!=]
                    │   │       ├── <158> Var [one]
                    │   │       ╰── Constant Int [30]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_multilevel_indirection() {
    let src = r#"
        
        int main(void) {
            double d = 10.0;
            double *d_ptr = &d;
            double **d_ptr_ptr = &d_ptr;
            double ***d_ptr_ptr_ptr = &d_ptr_ptr;
            if (d != 10.0) {
                return 1;
            }
            if (*d_ptr != 10.0) {
                return 2;
            }
            if (**d_ptr_ptr != 10.0) {
                return 3;
            }
            if (***d_ptr_ptr_ptr != 10.0) {
                return 4;
            }
            if (&d != d_ptr) {
                return 5;
            }
            if (*d_ptr_ptr != d_ptr) {
                return 6;
            }
            if (**d_ptr_ptr_ptr != d_ptr) {
                return 7;
            }
            ***d_ptr_ptr_ptr = 5.0;
            if (d != 5.0) {
                return 8;
            }
            if (*d_ptr != 5.0) {
                return 9;
            }
            if (**d_ptr_ptr != 5.0) {
                return 10;
            }
            if (***d_ptr_ptr_ptr != 5.0) {
                return 11;
            }
            double d2 = 1.0;
            double *d2_ptr = &d2;
            double *d2_ptr2 = d2_ptr;
            double **d2_ptr_ptr = &d2_ptr;
            *d_ptr_ptr_ptr = d2_ptr_ptr;
            if (**d_ptr_ptr_ptr != d2_ptr) {
                return 12;
            }
            if (***d_ptr_ptr_ptr != 1.0) {
                return 13;
            }
            if (d2_ptr_ptr == &d2_ptr2)
                return 14;
            d2_ptr = d_ptr;
            if (**d_ptr_ptr_ptr != d_ptr) {
                return 15;
            }
            if (*d2_ptr_ptr != d_ptr) {
                return 16;
            }
            if (**d_ptr_ptr_ptr == d2_ptr2) {
                return 17;
            }
            if (***d_ptr_ptr_ptr != 5.0) {
                return 18;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <17> AddressOf
                    │           ╰── <16> Var [d]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d_ptr_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Pointer
                    │   │           ╰── Double
                    │   ╰── Initializer
                    │       ╰── <27> AddressOf
                    │           ╰── <26> Var [d_ptr]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d_ptr_ptr_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Pointer
                    │   │           ╰── Pointer
                    │   │               ╰── Double
                    │   ╰── Initializer
                    │       ╰── <38> AddressOf
                    │           ╰── <37> Var [d_ptr_ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <45>  [!=]
                    │   │       ├── <42> Var [d]
                    │   │       ╰── Constant Double [+1e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <56>  [!=]
                    │   │       ├── <53> Dereference
                    │   │       │   ╰── <52> Var [d_ptr]
                    │   │       ╰── Constant Double [+1e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <68>  [!=]
                    │   │       ├── <65> Dereference
                    │   │       │   ╰── <64> Dereference
                    │   │       │       ╰── <63> Var [d_ptr_ptr]
                    │   │       ╰── Constant Double [+1e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <81>  [!=]
                    │   │       ├── <78> Dereference
                    │   │       │   ╰── <77> Dereference
                    │   │       │       ╰── <76> Dereference
                    │   │       │           ╰── <75> Var [d_ptr_ptr_ptr]
                    │   │       ╰── Constant Double [+1e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <93>  [!=]
                    │   │       ├── <89> AddressOf
                    │   │       │   ╰── <88> Var [d]
                    │   │       ╰── <92> Var [d_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <105>  [!=]
                    │   │       ├── <101> Dereference
                    │   │       │   ╰── <100> Var [d_ptr_ptr]
                    │   │       ╰── <104> Var [d_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <118>  [!=]
                    │   │       ├── <114> Dereference
                    │   │       │   ╰── <113> Dereference
                    │   │       │       ╰── <112> Var [d_ptr_ptr_ptr]
                    │   │       ╰── <117> Var [d_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── <131> Assign [=]
                    │   ├── <128> Dereference
                    │   │   ╰── <127> Dereference
                    │   │       ╰── <126> Dereference
                    │   │           ╰── <125> Var [d_ptr_ptr_ptr]
                    │   ╰── Constant Double [+5e0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <137>  [!=]
                    │   │       ├── <134> Var [d]
                    │   │       ╰── Constant Double [+5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <148>  [!=]
                    │   │       ├── <145> Dereference
                    │   │       │   ╰── <144> Var [d_ptr]
                    │   │       ╰── Constant Double [+5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <160>  [!=]
                    │   │       ├── <157> Dereference
                    │   │       │   ╰── <156> Dereference
                    │   │       │       ╰── <155> Var [d_ptr_ptr]
                    │   │       ╰── Constant Double [+5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <173>  [!=]
                    │   │       ├── <170> Dereference
                    │   │       │   ╰── <169> Dereference
                    │   │       │       ╰── <168> Dereference
                    │   │       │           ╰── <167> Var [d_ptr_ptr_ptr]
                    │   │       ╰── Constant Double [+5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [11]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d2
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d2_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <191> AddressOf
                    │           ╰── <190> Var [d2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d2_ptr2
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <199> Var [d2_ptr]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d2_ptr_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Pointer
                    │   │           ╰── Double
                    │   ╰── Initializer
                    │       ╰── <209> AddressOf
                    │           ╰── <208> Var [d2_ptr]
                    ├── <218> Assign [=]
                    │   ├── <214> Dereference
                    │   │   ╰── <213> Var [d_ptr_ptr_ptr]
                    │   ╰── <217> Var [d2_ptr_ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <227>  [!=]
                    │   │       ├── <223> Dereference
                    │   │       │   ╰── <222> Dereference
                    │   │       │       ╰── <221> Var [d_ptr_ptr_ptr]
                    │   │       ╰── <226> Var [d2_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <240>  [!=]
                    │   │       ├── <237> Dereference
                    │   │       │   ╰── <236> Dereference
                    │   │       │       ╰── <235> Dereference
                    │   │       │           ╰── <234> Var [d_ptr_ptr_ptr]
                    │   │       ╰── Constant Double [+1e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [13]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <252>  [==]
                    │   │       ├── <247> Var [d2_ptr_ptr]
                    │   │       ╰── <251> AddressOf
                    │   │           ╰── <250> Var [d2_ptr2]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [14]
                    ├── <261> Assign [=]
                    │   ├── <257> Var [d2_ptr]
                    │   ╰── <260> Var [d_ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <270>  [!=]
                    │   │       ├── <266> Dereference
                    │   │       │   ╰── <265> Dereference
                    │   │       │       ╰── <264> Var [d_ptr_ptr_ptr]
                    │   │       ╰── <269> Var [d_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [15]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <282>  [!=]
                    │   │       ├── <278> Dereference
                    │   │       │   ╰── <277> Var [d2_ptr_ptr]
                    │   │       ╰── <281> Var [d_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [16]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <295>  [==]
                    │   │       ├── <291> Dereference
                    │   │       │   ╰── <290> Dereference
                    │   │       │       ╰── <289> Var [d_ptr_ptr_ptr]
                    │   │       ╰── <294> Var [d2_ptr2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [17]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <308>  [!=]
                    │   │       ├── <305> Dereference
                    │   │       │   ╰── <304> Dereference
                    │   │       │       ╰── <303> Dereference
                    │   │       │           ╰── <302> Var [d_ptr_ptr_ptr]
                    │   │       ╰── Constant Double [+5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [18]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_read_through_pointers() {
    let src = r#"
        
        int main(void) {
            int i = -100;
            unsigned long ul = 13835058055282163712ul;
            double d = 3.5;
            int *i_ptr = &i;
            unsigned long *ul_ptr = &ul;
            double *d_ptr = &d;
            if (*i_ptr != -100) {
                return 1;
            }
            if (*ul_ptr != 13835058055282163712ul) {
                return 2;
            }
            if (*d_ptr != 3.5) {
                return 3;
            }
            i = 12;
            ul = 1000;
            d = -000.001;
            if (*i_ptr != 12) {
                return 4;
            }
            if (*ul_ptr != 1000) {
                return 5;
            }
            if (*d_ptr != -000.001) {
                return 6;
            }
            int i2 = 1;
            unsigned long ul2 = 144115196665790464ul;
            double d2 = -33.3;
            i_ptr = &i2;
            ul_ptr = &ul2;
            d_ptr = &d2;
            if (*i_ptr != 1) {
                return 7;
            }
            if (*ul_ptr != 144115196665790464ul) {
                return 8;
            }
            if (*d_ptr != -33.3) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <10> Unary [-]
                    │           ╰── Constant Int [100]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [13835058055282163712]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+3.5e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <31> AddressOf
                    │           ╰── <30> Var [i]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <40> AddressOf
                    │           ╰── <39> Var [ul]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <49> AddressOf
                    │           ╰── <48> Var [d]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <59>  [!=]
                    │   │       ├── <54> Dereference
                    │   │       │   ╰── <53> Var [i_ptr]
                    │   │       ╰── <58> Unary [-]
                    │   │           ╰── Constant Int [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <70>  [!=]
                    │   │       ├── <67> Dereference
                    │   │       │   ╰── <66> Var [ul_ptr]
                    │   │       ╰── Constant ULong [13835058055282163712]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <81>  [!=]
                    │   │       ├── <78> Dereference
                    │   │       │   ╰── <77> Var [d_ptr]
                    │   │       ╰── Constant Double [+3.5e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <91> Assign [=]
                    │   ├── <88> Var [i]
                    │   ╰── Constant Int [12]
                    ├── <97> Assign [=]
                    │   ├── <94> Var [ul]
                    │   ╰── Constant Int [1000]
                    ├── <105> Assign [=]
                    │   ├── <100> Var [d]
                    │   ╰── <104> Unary [-]
                    │       ╰── Constant Double [+1e-3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <112>  [!=]
                    │   │       ├── <109> Dereference
                    │   │       │   ╰── <108> Var [i_ptr]
                    │   │       ╰── Constant Int [12]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <123>  [!=]
                    │   │       ├── <120> Dereference
                    │   │       │   ╰── <119> Var [ul_ptr]
                    │   │       ╰── Constant Int [1000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <136>  [!=]
                    │   │       ├── <131> Dereference
                    │   │       │   ╰── <130> Var [d_ptr]
                    │   │       ╰── <135> Unary [-]
                    │   │           ╰── Constant Double [+1e-3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i2
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul2
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [144115196665790464]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d2
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── <159> Unary [-]
                    │           ╰── Constant Double [+3.33e1]
                    ├── <168> Assign [=]
                    │   ├── <163> Var [i_ptr]
                    │   ╰── <167> AddressOf
                    │       ╰── <166> Var [i2]
                    ├── <176> Assign [=]
                    │   ├── <171> Var [ul_ptr]
                    │   ╰── <175> AddressOf
                    │       ╰── <174> Var [ul2]
                    ├── <184> Assign [=]
                    │   ├── <179> Var [d_ptr]
                    │   ╰── <183> AddressOf
                    │       ╰── <182> Var [d2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <191>  [!=]
                    │   │       ├── <188> Dereference
                    │   │       │   ╰── <187> Var [i_ptr]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <202>  [!=]
                    │   │       ├── <199> Dereference
                    │   │       │   ╰── <198> Var [ul_ptr]
                    │   │       ╰── Constant ULong [144115196665790464]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <215>  [!=]
                    │   │       ├── <210> Dereference
                    │   │       │   ╰── <209> Var [d_ptr]
                    │   │       ╰── <214> Unary [-]
                    │   │           ╰── Constant Double [+3.33e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_simple() {
    let src = r#"
        int main(void) {
            int x = 3;
            int *ptr = &x;
            return *ptr;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <17> AddressOf
                    │           ╰── <16> Var [x]
                    ╰── Return
                        ╰── <22> Dereference
                            ╰── <21> Var [ptr]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_static_var_indirection() {
    let src = r#"
        unsigned int w = 4294967295U;
        int x = 10;
        unsigned int y = 4294967295U;
        double *dbl_ptr;
        long modify_ptr(long *new_ptr) {
            static long *p;
            if (new_ptr)
            {
                p = new_ptr;
            }
            return *p;
        }
        int increment_ptr(void)
        {
            *dbl_ptr = *dbl_ptr + 5.0;
            return 0;
        }
        int main(void) {
            int *pointer_to_static = &x;
            x = 20;
            if (*pointer_to_static != 20) {
                return 1;
            }
            *pointer_to_static = 100;
            if (x != 100) {
                return 2;
            }
            if (w != 4294967295U) {
                return 3;
            }
            if (y != 4294967295U) {
                return 4;
            }
            if (dbl_ptr) {
                return 5;
            }
            long l = 1000l;
            if (modify_ptr(&l) != 1000l) {
                return 6;
            }
            l = -1;
            if (modify_ptr(0) != l) {
                return 7;
            }
            double d = 10.0;
            dbl_ptr = &d;
            increment_ptr();
            if (*dbl_ptr != 15) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── w
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant UInt [4294967295]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [10]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── y
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant UInt [4294967295]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── dbl_ptr
            │   ╰── Type
            │       ╰── Pointer
            │           ╰── Double
            ├── Function [modify_ptr]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── new_ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Long
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── p
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Long
            │       │   ╰── Static
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <39> Var [new_ptr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── <45> Assign [=]
            │       │               ├── <41> Var [p]
            │       │               ╰── <44> Var [new_ptr]
            │       ╰── Return
            │           ╰── <52> Dereference
            │               ╰── <51> Var [p]
            ├── Function [increment_ptr]
            │   ╰── Body
            │       ├── <70> Assign [=]
            │       │   ├── <62> Dereference
            │       │   │   ╰── <61> Var [dbl_ptr]
            │       │   ╰── <69>  [+]
            │       │       ├── <66> Dereference
            │       │       │   ╰── <65> Var [dbl_ptr]
            │       │       ╰── Constant Double [+5e0]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── pointer_to_static
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <86> AddressOf
                    │           ╰── <85> Var [x]
                    ├── <93> Assign [=]
                    │   ├── <90> Var [x]
                    │   ╰── Constant Int [20]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <100>  [!=]
                    │   │       ├── <97> Dereference
                    │   │       │   ╰── <96> Var [pointer_to_static]
                    │   │       ╰── Constant Int [20]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <111> Assign [=]
                    │   ├── <108> Dereference
                    │   │   ╰── <107> Var [pointer_to_static]
                    │   ╰── Constant Int [100]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <117>  [!=]
                    │   │       ├── <114> Var [x]
                    │   │       ╰── Constant Int [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <127>  [!=]
                    │   │       ├── <124> Var [w]
                    │   │       ╰── Constant UInt [4294967295]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <137>  [!=]
                    │   │       ├── <134> Var [y]
                    │   │       ╰── Constant UInt [4294967295]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <144> Var [dbl_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [1000]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <163>  [!=]
                    │   │       ├── <160> FunctionCall [modify_ptr]
                    │   │       │   ╰── <159> AddressOf
                    │   │       │       ╰── <158> Var [l]
                    │   │       ╰── Constant Long [1000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── <175> Assign [=]
                    │   ├── <170> Var [l]
                    │   ╰── <174> Unary [-]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <183>  [!=]
                    │   │       ├── <179> FunctionCall [modify_ptr]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── <182> Var [l]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e1]
                    ├── <201> Assign [=]
                    │   ├── <196> Var [dbl_ptr]
                    │   ╰── <200> AddressOf
                    │       ╰── <199> Var [d]
                    ├── <204> FunctionCall [increment_ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <211>  [!=]
                    │   │       ├── <208> Dereference
                    │   │       │   ╰── <207> Var [dbl_ptr]
                    │   │       ╰── Constant Int [15]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_dereference_update_through_pointers() {
    let src = r#"
        int main(void) {
            unsigned int i = 2185232384u;
            signed long l = 144115196665790464l;
            double d = 1e50;
            unsigned *i_ptr = &i;
            long *l_ptr = &l;
            double *d_ptr = &d;
            *i_ptr = 10;
            *l_ptr = -20;
            *d_ptr = 30.1;
            if (i != 10) {
                return 1;
            }
            if (l != -20) {
                return 2;
            }
            if (d != 30.1) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── Constant UInt [2185232384]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Long [144115196665790464]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+1e50]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── <29> AddressOf
                    │           ╰── <28> Var [i]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── <38> AddressOf
                    │           ╰── <37> Var [l]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <47> AddressOf
                    │           ╰── <46> Var [d]
                    ├── <55> Assign [=]
                    │   ├── <52> Dereference
                    │   │   ╰── <51> Var [i_ptr]
                    │   ╰── Constant Int [10]
                    ├── <64> Assign [=]
                    │   ├── <59> Dereference
                    │   │   ╰── <58> Var [l_ptr]
                    │   ╰── <63> Unary [-]
                    │       ╰── Constant Int [20]
                    ├── <71> Assign [=]
                    │   ├── <68> Dereference
                    │   │   ╰── <67> Var [d_ptr]
                    │   ╰── Constant Double [+3.01e1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <77>  [!=]
                    │   │       ├── <74> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <89>  [!=]
                    │   │       ├── <84> Var [l]
                    │   │       ╰── <88> Unary [-]
                    │   │           ╰── Constant Int [20]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <99>  [!=]
                    │   │       ├── <96> Var [d]
                    │   │       ╰── Constant Double [+3.01e1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_bitshift_dereferenced_ptrs() {
    let src = r#"
        unsigned int ui = 4294967295;
        unsigned int *get_ui_ptr(void){
            return &ui;
        }
        int shiftcount = 5;
        int main(void) {
            if ((*get_ui_ptr() << 2l) != 4294967292) {
                return 1;
            }
            if ((*get_ui_ptr() >> 2) != 1073741823) {
                return 2;
            }
            int *shiftcount_ptr = &shiftcount;
            if ((1000000u >> *shiftcount_ptr) != 31250) {
                return 3;
            }
            if ((1000000u << *shiftcount_ptr) != 32000000) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ui
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant Long [4294967295]
            ├── Function [get_ui_ptr]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <14> AddressOf
            │               ╰── <13> Var [ui]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── shiftcount
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [5]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37>  [!=]
                    │   │       ├── <34>  [<<]
                    │   │       │   ├── <30> Dereference
                    │   │       │   │   ╰── <29> FunctionCall [get_ui_ptr]
                    │   │       │   ╰── Constant Long [2]
                    │   │       ╰── Constant Long [4294967292]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <52>  [!=]
                    │   │       ├── <49>  [>>]
                    │   │       │   ├── <45> Dereference
                    │   │       │   │   ╰── <44> FunctionCall [get_ui_ptr]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── Constant Int [1073741823]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── shiftcount_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <64> AddressOf
                    │           ╰── <63> Var [shiftcount]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <76>  [!=]
                    │   │       ├── <73>  [>>]
                    │   │       │   ├── Constant UInt [1000000]
                    │   │       │   ╰── <71> Dereference
                    │   │       │       ╰── <70> Var [shiftcount_ptr]
                    │   │       ╰── Constant Int [31250]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <91>  [!=]
                    │   │       ├── <88>  [<<]
                    │   │       │   ├── Constant UInt [1000000]
                    │   │       │   ╰── <86> Dereference
                    │   │       │       ╰── <85> Var [shiftcount_ptr]
                    │   │       ╰── Constant Int [32000000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_bitwise_ops_with_dereferenced_ptrs() {
    let src = r#"
        int main(void) {
            unsigned int ui = -1u;
            unsigned long ul = 9223372036854775808ul;
            unsigned int *ui_ptr = &ui;
            unsigned long *ul_ptr = &ul;
            if ((*ui_ptr & *ul_ptr) != 0) {
                return 1;
            }
            if ((*ui_ptr | *ul_ptr) != 9223372041149743103ul) {
                return 2;
            }
            int i = -1;
            signed int *i_ptr = &i;
            if ((*i_ptr & ul) != *ul_ptr) {
                return 3;
            }
            if ((*i_ptr | *ul_ptr) != i) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ui
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── <10> Unary [-]
                    │           ╰── Constant UInt [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [9223372036854775808]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ui_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── <25> AddressOf
                    │           ╰── <24> Var [ui]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <34> AddressOf
                    │           ╰── <33> Var [ul]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <48>  [!=]
                    │   │       ├── <45>  [&]
                    │   │       │   ├── <39> Dereference
                    │   │       │   │   ╰── <38> Var [ui_ptr]
                    │   │       │   ╰── <43> Dereference
                    │   │       │       ╰── <42> Var [ul_ptr]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <65>  [!=]
                    │   │       ├── <62>  [|]
                    │   │       │   ├── <56> Dereference
                    │   │       │   │   ╰── <55> Var [ui_ptr]
                    │   │       │   ╰── <60> Dereference
                    │   │       │       ╰── <59> Var [ul_ptr]
                    │   │       ╰── Constant ULong [9223372041149743103]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <76> Unary [-]
                    │           ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <85> AddressOf
                    │           ╰── <84> Var [i]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <100>  [!=]
                    │   │       ├── <95>  [&]
                    │   │       │   ├── <90> Dereference
                    │   │       │   │   ╰── <89> Var [i_ptr]
                    │   │       │   ╰── <93> Var [ul]
                    │   │       ╰── <99> Dereference
                    │   │           ╰── <98> Var [ul_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <118>  [!=]
                    │   │       ├── <114>  [|]
                    │   │       │   ├── <108> Dereference
                    │   │       │   │   ╰── <107> Var [i_ptr]
                    │   │       │   ╰── <112> Dereference
                    │   │       │       ╰── <111> Var [ul_ptr]
                    │   │       ╰── <117> Var [i]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_compound_assign_conversion() {
    let src = r#"
        int main(void) {
            double d = 5.0;
            double *d_ptr = &d;
            *d_ptr *= 1000u;
            if (d != 5000.0) {
                return 1;
            }
            int i = -50;
            int *i_ptr = &i;
            *i_ptr %= 4294967200U;
            if (*i_ptr != 46) {
                return 2;
            }
            unsigned int ui = 4294967295U;
            ui /= *d_ptr;
            if (ui != 858993u) {
                return 3;
            }
            i = -10;
            unsigned long ul = 9223372036854775807ul;
            unsigned long *ul_ptr = &ul;
            *i_ptr -= *ul_ptr;
            if (i != -9) {
                return 4;
            }
            if (ul != 9223372036854775807ul) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+5e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <17> AddressOf
                    │           ╰── <16> Var [d]
                    ├── <25> Assign [*=]
                    │   ├── <22> Dereference
                    │   │   ╰── <21> Var [d_ptr]
                    │   ╰── Constant UInt [1000]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <31>  [!=]
                    │   │       ├── <28> Var [d]
                    │   │       ╰── Constant Double [+5e3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <42> Unary [-]
                    │           ╰── Constant Int [50]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <51> AddressOf
                    │           ╰── <50> Var [i]
                    ├── <59> Assign [&=]
                    │   ├── <56> Dereference
                    │   │   ╰── <55> Var [i_ptr]
                    │   ╰── Constant UInt [4294967200]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <66>  [!=]
                    │   │       ├── <63> Dereference
                    │   │       │   ╰── <62> Var [i_ptr]
                    │   │       ╰── Constant Int [46]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ui
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── Constant UInt [4294967295]
                    ├── <84> Assign [/=]
                    │   ├── <79> Var [ui]
                    │   ╰── <83> Dereference
                    │       ╰── <82> Var [d_ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <90>  [!=]
                    │   │       ├── <87> Var [ui]
                    │   │       ╰── Constant UInt [858993]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <102> Assign [=]
                    │   ├── <97> Var [i]
                    │   ╰── <101> Unary [-]
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant ULong [9223372036854775807]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <116> AddressOf
                    │           ╰── <115> Var [ul]
                    ├── <126> Assign [-=]
                    │   ├── <121> Dereference
                    │   │   ╰── <120> Var [i_ptr]
                    │   ╰── <125> Dereference
                    │       ╰── <124> Var [ul_ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <134>  [!=]
                    │   │       ├── <129> Var [i]
                    │   │       ╰── <133> Unary [-]
                    │   │           ╰── Constant Int [9]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <144>  [!=]
                    │   │       ├── <141> Var [ul]
                    │   │       ╰── Constant ULong [9223372036854775807]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_compound_assign_through_pointer() {
    let src = r#"
        int main(void) {
            int x = 10;
            int *ptr = &x;
            *ptr += 5;
            if (x != 15) {
                return 1;
            }
            if ((*ptr -= 12) != 3) {
                return 2;
            }
            if (x != 3) {
                return 3;
            }
            *ptr *= 6;
            if (x != 18) {
                return 4;
            }
            *ptr /= 9;
            if (x != 2) {
                return 5;
            }
            *ptr %= 3;
            if (x != 2) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <17> AddressOf
                    │           ╰── <16> Var [x]
                    ├── <25> Assign [+=]
                    │   ├── <22> Dereference
                    │   │   ╰── <21> Var [ptr]
                    │   ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <31>  [!=]
                    │   │       ├── <28> Var [x]
                    │   │       ╰── Constant Int [15]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <46>  [!=]
                    │   │       ├── <43> Assign [-=]
                    │   │       │   ├── <39> Dereference
                    │   │       │   │   ╰── <38> Var [ptr]
                    │   │       │   ╰── Constant Int [12]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <56>  [!=]
                    │   │       ├── <53> Var [x]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <67> Assign [*=]
                    │   ├── <64> Dereference
                    │   │   ╰── <63> Var [ptr]
                    │   ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <73>  [!=]
                    │   │       ├── <70> Var [x]
                    │   │       ╰── Constant Int [18]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <84> Assign [/=]
                    │   ├── <81> Dereference
                    │   │   ╰── <80> Var [ptr]
                    │   ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <90>  [!=]
                    │   │       ├── <87> Var [x]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── <101> Assign [&=]
                    │   ├── <98> Dereference
                    │   │   ╰── <97> Var [ptr]
                    │   ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <107>  [!=]
                    │   │       ├── <104> Var [x]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_compound_bitwise_dereferenced_ptrs() {
    let src = r#"
        unsigned long ul = 18446460386757245432ul;
        int main(void) {
            unsigned long *ul_ptr = &ul;
            *ul_ptr &= -1000;
            if (ul != 18446460386757244952ul ) {
                return 1;
            }
            *ul_ptr |= 4294967040u;
            if (ul != 18446460386824683288ul ) {
                return 2;
            }
            int i = 123456;
            unsigned int ui = 4042322160u;
            long l = -252645136;
            unsigned int *ui_ptr = &ui;
            long *l_ptr = &l;
            if (*ui_ptr ^= *l_ptr) {
                return 3;
            }
            if (ui) {
                return 4;
            }
            if (i != 123456) {
                return 5;
            }
            if (l != -252645136) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ul
            │   ├── Type
            │   │   ╰── Unsigned Long
            │   ╰── Initializer
            │       ╰── Constant ULong [18446460386757245432]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <17> AddressOf
                    │           ╰── <16> Var [ul]
                    ├── <27> Assign [&=]
                    │   ├── <22> Dereference
                    │   │   ╰── <21> Var [ul_ptr]
                    │   ╰── <26> Unary [-]
                    │       ╰── Constant Int [1000]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <33>  [!=]
                    │   │       ├── <30> Var [ul]
                    │   │       ╰── Constant ULong [18446460386757244952]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <44> Assign [|=]
                    │   ├── <41> Dereference
                    │   │   ╰── <40> Var [ul_ptr]
                    │   ╰── Constant UInt [4294967040]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <50>  [!=]
                    │   │       ├── <47> Var [ul]
                    │   │       ╰── Constant ULong [18446460386824683288]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [123456]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ui
                    │   ├── Type
                    │   │   ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── Constant UInt [4042322160]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <73> Unary [-]
                    │           ╰── Constant Int [252645136]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ui_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── <82> AddressOf
                    │           ╰── <81> Var [ui]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── <91> AddressOf
                    │           ╰── <90> Var [l]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <101> Assign [^=]
                    │   │       ├── <96> Dereference
                    │   │       │   ╰── <95> Var [ui_ptr]
                    │   │       ╰── <100> Dereference
                    │   │           ╰── <99> Var [l_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <108> Var [ui]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <118>  [!=]
                    │   │       ├── <115> Var [i]
                    │   │       ╰── Constant Int [123456]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <130>  [!=]
                    │   │       ├── <125> Var [l]
                    │   │       ╰── <129> Unary [-]
                    │   │           ╰── Constant Int [252645136]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_eval_compound_lhs_once() {
    let src = r#"
        int i = 0;
        int putchar(int c);
        int *print_A(void) {
            putchar(65);
            return &i;
        }
        int *print_B(void) {
            putchar(66);
            return &i;
        }
        int main(void) {
            *print_A() += 5;
            if (i != 5) {
                return 1;
            }
            *print_B() += 5l;
            if (i != 10) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [0]
            ├── Function [putchar]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── c
            │           ╰── Type
            │               ╰── Int
            ├── Function [print_A]
            │   ╰── Body
            │       ├── <22> FunctionCall [putchar]
            │       │   ╰── Constant Int [65]
            │       ╰── Return
            │           ╰── <26> AddressOf
            │               ╰── <25> Var [i]
            ├── Function [print_B]
            │   ╰── Body
            │       ├── <37> FunctionCall [putchar]
            │       │   ╰── Constant Int [66]
            │       ╰── Return
            │           ╰── <41> AddressOf
            │               ╰── <40> Var [i]
            ╰── Function [main]
                ╰── Body
                    ├── <54> Assign [+=]
                    │   ├── <51> Dereference
                    │   │   ╰── <50> FunctionCall [print_A]
                    │   ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <60>  [!=]
                    │   │       ├── <57> Var [i]
                    │   │       ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <71> Assign [+=]
                    │   ├── <68> Dereference
                    │   │   ╰── <67> FunctionCall [print_B]
                    │   ╰── Constant Long [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <77>  [!=]
                    │   │       ├── <74> Var [i]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_incr_and_decr_through_pointer() {
    let src = r#"
        
        int main(void) {
            int x = 10;
            int *y = &x;
            if (++*y != 11) {
                return 1;
            }
            if (x != 11) {
                return 2;
            }
            if (--*y != 10) {
                return 3;
            }
            if (x != 10) {
                return 4;
            }
            if ((*y)++ != 10) {
                return 5;
            }
            if (x != 11) {
                return 6;
            }
            if ((*y)-- != 11) {
                return 7;
            }
            if (x != 10) {
                return 8;
            }
            unsigned long ul = 0;
            unsigned long *ul_ptr = &ul;
            if ((*ul_ptr)--) {
                return 9;
            }
            if (ul != 18446744073709551615UL) {
                return 10;
            }
            double d = 0.0;
            double *d_ptr = &d;
            if (++(*d_ptr) != 1.0) {
                return 11;
            }
            if (d != 1.0) {
                return 12;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <17> AddressOf
                    │           ╰── <16> Var [x]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <27>  [!=]
                    │   │       ├── <24> Unary [++]
                    │   │       │   ╰── <23> Dereference
                    │   │       │       ╰── <22> Var [y]
                    │   │       ╰── Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37>  [!=]
                    │   │       ├── <34> Var [x]
                    │   │       ╰── Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <50>  [!=]
                    │   │       ├── <47> Unary [--]
                    │   │       │   ╰── <46> Dereference
                    │   │       │       ╰── <45> Var [y]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <60>  [!=]
                    │   │       ├── <57> Var [x]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <74>  [!=]
                    │   │       ├── <71> Postfix [++]
                    │   │       │   ╰── <69> Dereference
                    │   │       │       ╰── <67> Var [y]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <84>  [!=]
                    │   │       ├── <81> Var [x]
                    │   │       ╰── Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <98>  [!=]
                    │   │       ├── <95> Postfix [--]
                    │   │       │   ╰── <93> Dereference
                    │   │       │       ╰── <91> Var [y]
                    │   │       ╰── Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <108>  [!=]
                    │   │       ├── <105> Var [x]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ul_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <126> AddressOf
                    │           ╰── <125> Var [ul]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <134> Postfix [--]
                    │   │       ╰── <132> Dereference
                    │   │           ╰── <130> Var [ul_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <144>  [!=]
                    │   │       ├── <141> Var [ul]
                    │   │       ╰── Constant ULong [18446744073709551615]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+0e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <162> AddressOf
                    │           ╰── <161> Var [d]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <173>  [!=]
                    │   │       ├── <170> Unary [++]
                    │   │       │   ╰── <169> Dereference
                    │   │       │       ╰── <167> Var [d_ptr]
                    │   │       ╰── Constant Double [+1e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [11]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <183>  [!=]
                    │   │       ├── <180> Var [d]
                    │   │       ╰── Constant Double [+1e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [12]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_extra_credit_switch_dereferenced_pointer() {
    let src = r#"
        long l = 4294967300l;
        long *get_ptr(void) {
            return &l;
        }
        int main(void) {
            switch (*get_ptr()) {
                case 1:
                    return 1;
                case 4:
                    return 2;
                case 4294967300l:
                    return 0;
                case 18446744073709551600UL:
                    return 3;
                default:
                    return 4;
            }
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── l
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Long [4294967300]
            ├── Function [get_ptr]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <14> AddressOf
            │               ╰── <13> Var [l]
            ╰── Function [main]
                ╰── Body
                    ╰── Switch
                        ├── Expression
                        │   ╰── <24> Dereference
                        │       ╰── <23> FunctionCall [get_ptr]
                        ╰── Block
                            ├── Case [1]
                            │   ╰── Return
                            │       ╰── Constant Int [1]
                            ├── Case [4]
                            │   ╰── Return
                            │       ╰── Constant Int [2]
                            ├── Case [4294967300]
                            │   ╰── Return
                            │       ╰── Constant Int [0]
                            ├── Case [-16]
                            │   ╰── Return
                            │       ╰── Constant Int [3]
                            ╰── Default
                                ╰── Return
                                    ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_function_calls_address_of_argument() {
    let src = r#"
        int addr_of_arg(int a) {
            int *ptr = &a;
            *ptr = 10;
            return a;
        }
        int main(void) {
            int result = addr_of_arg(-20);
            if (result != 10) {
                return 1;
            }
            int var = 100;
            result = addr_of_arg(var);
            if (result != 10) {
                return 2;
            }
            if (var != 100) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [addr_of_arg]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── a
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <14> AddressOf
            │       │           ╰── <13> Var [a]
            │       ├── <22> Assign [=]
            │       │   ├── <19> Dereference
            │       │   │   ╰── <18> Var [ptr]
            │       │   ╰── Constant Int [10]
            │       ╰── Return
            │           ╰── <25> Var [a]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <40> FunctionCall [addr_of_arg]
                    │           ╰── <39> Unary [-]
                    │               ╰── Constant Int [20]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <47>  [!=]
                    │   │       ├── <44> Var [result]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── var
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [100]
                    ├── <66> Assign [=]
                    │   ├── <60> Var [result]
                    │   ╰── <65> FunctionCall [addr_of_arg]
                    │       ╰── <64> Var [var]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <72>  [!=]
                    │   │       ├── <69> Var [result]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <82>  [!=]
                    │   │       ├── <79> Var [var]
                    │   │       ╰── Constant Int [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_function_calls_return_pointer() {
    let src = r#"
        
        int *return_pointer(int *in) {
            return in;
        }
        int main(void) {
            int x = 10;
            int *x_ptr = return_pointer(&x);
            if (*x_ptr != 10)
                return 1;
            x = 100;
            if (*x_ptr != 100)
                return 2;
            if (x_ptr != &x)
                return 3;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [return_pointer]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── in
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <11> Var [in]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <33> FunctionCall [return_pointer]
                    │           ╰── <32> AddressOf
                    │               ╰── <31> Var [x]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <41>  [!=]
                    │   │       ├── <38> Dereference
                    │   │       │   ╰── <37> Var [x_ptr]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [1]
                    ├── <49> Assign [=]
                    │   ├── <46> Var [x]
                    │   ╰── Constant Int [100]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <56>  [!=]
                    │   │       ├── <53> Dereference
                    │   │       │   ╰── <52> Var [x_ptr]
                    │   │       ╰── Constant Int [100]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <66>  [!=]
                    │   │       ├── <61> Var [x_ptr]
                    │   │       ╰── <65> AddressOf
                    │   │           ╰── <64> Var [x]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_function_calls_update_value_through_pointer_parameter() {
    let src = r#"
        
        int update_value(int *ptr) {
            int old_val = *ptr;
            *ptr = 10;
            return old_val;
        }
        int main(void) {
            int x = 20;
            int result = update_value(&x);
            if (result != 20) {
                return 1;
            }
            if (x != 10) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [update_value]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── old_val
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <14> Dereference
            │       │           ╰── <13> Var [ptr]
            │       ├── <22> Assign [=]
            │       │   ├── <19> Dereference
            │       │   │   ╰── <18> Var [ptr]
            │       │   ╰── Constant Int [10]
            │       ╰── Return
            │           ╰── <25> Var [old_val]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [20]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <46> FunctionCall [update_value]
                    │           ╰── <45> AddressOf
                    │               ╰── <44> Var [x]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <53>  [!=]
                    │   │       ├── <50> Var [result]
                    │   │       ╰── Constant Int [20]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <63>  [!=]
                    │   │       ├── <60> Var [x]
                    │   │       ╰── Constant Int [10]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_libraries_global_pointer() {
    let src = r#"
        double *d_ptr;
        int update_thru_ptr(double new_val) {
            *d_ptr = new_val;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── d_ptr
            │   ╰── Type
            │       ╰── Pointer
            │           ╰── Double
            ╰── Function [update_thru_ptr]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── new_val
                │       ╰── Type
                │           ╰── Double
                ╰── Body
                    ├── <19> Assign [=]
                    │   ├── <15> Dereference
                    │   │   ╰── <14> Var [d_ptr]
                    │   ╰── <18> Var [new_val]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_libraries_global_pointer_client() {
    let src = r#"
        extern double *d_ptr;
        int update_thru_ptr(double new_val);
        int main(void) {
            double d = 0.0;
            d_ptr = &d;
            update_thru_ptr(10.0);
            return (d == 10.0);
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── d_ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Double
            │   ╰── Extern
            ├── Function [update_thru_ptr]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── new_val
            │           ╰── Type
            │               ╰── Double
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── d
                    │   ├── Type
                    │   │   ╰── Double
                    │   ╰── Initializer
                    │       ╰── Constant Double [+0e0]
                    ├── <31> Assign [=]
                    │   ├── <26> Var [d_ptr]
                    │   ╰── <30> AddressOf
                    │       ╰── <29> Var [d]
                    ├── <35> FunctionCall [update_thru_ptr]
                    │   ╰── Constant Double [+1e1]
                    ╰── Return
                        ╰── <42>  [==]
                            ├── <38> Var [d]
                            ╰── Constant Double [+1e1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_libraries_static_pointer() {
    let src = r#"
        static long *long_ptr;
        long *get_pointer(void) {
            return long_ptr;
        }
        int set_pointer(long *new_ptr) {
            long_ptr = new_ptr;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── long_ptr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Long
            │   ╰── Static
            ├── Function [get_pointer]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <13> Var [long_ptr]
            ╰── Function [set_pointer]
                ├── Parameters
                │   ╰── Param
                │       ├── Name
                │       │   ╰── new_ptr
                │       ╰── Type
                │           ╰── Pointer
                │               ╰── Long
                ╰── Body
                    ├── <30> Assign [=]
                    │   ├── <26> Var [long_ptr]
                    │   ╰── <29> Var [new_ptr]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_14_valid_libraries_static_pointer_client() {
    let src = r#"
        long *get_pointer(void);
        int set_pointer(long *new_ptr);
        static long private_long = 100l;
        int main(void) {
            long *initial_ptr = get_pointer();
            if (initial_ptr) {
                return 1;
            }
            set_pointer(&private_long);
            long *new_ptr = get_pointer();
            if (initial_ptr == new_ptr) {
                return 2;
            }
            if (*new_ptr != 100l) {
                return 3;
            }
            if (new_ptr != &private_long) {
                return 4;
            }
            set_pointer(0);
            if (get_pointer()) {
                return 5;
            }
            if (new_ptr != &private_long) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [get_pointer]
            ├── Function [set_pointer]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── new_ptr
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── private_long
            │   ├── Type
            │   │   ╰── Long
            │   ├── Initializer
            │   │   ╰── Constant Long [100]
            │   ╰── Static
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── initial_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── <32> FunctionCall [get_pointer]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <36> Var [initial_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <46> FunctionCall [set_pointer]
                    │   ╰── <45> AddressOf
                    │       ╰── <44> Var [private_long]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── new_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── <53> FunctionCall [get_pointer]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <61>  [==]
                    │   │       ├── <57> Var [initial_ptr]
                    │   │       ╰── <60> Var [new_ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <72>  [!=]
                    │   │       ├── <69> Dereference
                    │   │       │   ╰── <68> Var [new_ptr]
                    │   │       ╰── Constant Long [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <84>  [!=]
                    │   │       ├── <79> Var [new_ptr]
                    │   │       ╰── <83> AddressOf
                    │   │           ╰── <82> Var [private_long]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <92> FunctionCall [set_pointer]
                    │   ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <95> FunctionCall [get_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <107>  [!=]
                    │   │       ├── <102> Var [new_ptr]
                    │   │       ╰── <106> AddressOf
                    │   │           ╰── <105> Var [private_long]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_parse_array_of_functions() {
    assert_error(
        r#"
        int foo[3](int a);
                //^ Expected ';', but found '('
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_array_of_functions_2() {
    assert_error(
        r#"
        
        int (foo[3])(int a);
          //^^^^^^^^ Can't apply additional derivations to a function type
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_double_declarator() {
    assert_error(
        r#"
        int main(void) {
            int x[2.0];
                //^^^ Array size should be an integer constant
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_empty_initializer_list() {
    assert_error(
        r#"
        int main(void) {
            int arr[1] = {};
                        //^ Expected expression, but found '}'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_malformed_abstract_array_declarator() {
    assert_error(
        r#"
        int main(void) {
            return (int[3] *)0;
                         //^ Expected ')', but found '*'
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_malformed_abstract_array_declarator_2() {
    assert_error(
        r#"
        int main(void) {
            return (int[3](*))0;
                        //^ Expected ')', but found '('
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_malformed_array_declarator() {
    assert_error(
        r#"
        int main(void) {
            int foo[[10]];
                  //^ Expected expression, but found '['
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_malformed_array_declarator_2() {
    assert_error(
        r#"
        int main(void) {
            int (*)(ptr_to_array[3]) = 0;
                //^ Expected identifier, but found ')'
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_malformed_array_declarator_3() {
    assert_error(
        r#"
        int main(void) {
            int [3] arr = {1, 2, 3};
              //^ Expected identifier, but found '['
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_malformed_type_name() {
    assert_error(
        r#"
        int main(void) {
            int a = 4;
            int *foo = &a;
            int *bar[3] = (*[3]) foo;
                          //^ Expected expression, but found '['
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_malformed_type_name_2() {
    assert_error(
        r#"
        int main(void) {
            int *ptr;
            int *array_pointer[3] = ([3](*)) ptr;
                                   //^ Expected expression, but found '['
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_mismatched_subscript() {
    assert_error(
        r#"
        int main(void) {
            int indices[3] = {1, 2, 3};
            int vals[3] = {4, 5, 6};
            return vals[indices[1];
                                //^ Expected ']', but found ';'
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_negative_array_dimension() {
    assert_error(
        r#"
        int main(void)
        {
            int arr[-3];
                  //^^ Array size should be a constant
            return 0;
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_parenthesized_array_of_functions() {
    assert_error(
        r#"
        int(foo[3])(int a);
         //^^^^^^^^ Can't apply additional derivations to a function type
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_return_array() {
    assert_error(
        r#"
        
        int foo(void)[3];
                   //^ Expected ';', but found '['
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_unclosed_initializer() {
    assert_error(
        r#"
        int main(void) {
            int arr = {1, 2;
                         //^ Expected '}', but found ';'
            return arr[0];
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_unclosed_nested_initializer() {
    assert_error(
        r#"
        int main(void) {
            int arr[2][2] = {{ 1, 2}, {3, 4};
                                          //^ Expected '}', but found ';'
            return arr[0][0];
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_parse_unclosed_subscript() {
    assert_error(
        r#"
        int main(void) {
            int arr[] = {1, 2, 3};
                  //^ Expected expression, but found ']'
            return arr[1;
        }
    "#,
    );
}

#[test]
fn test_chapter_15_invalid_types_add_two_pointers() {
    let src = r#"
        int main(void)
        {
            int *x = 0;
            int *y = 0;
            return (x + y == 0);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <28>  [==]
                            ├── <24>  [+]
                            │   ├── <20> Var [x]
                            │   ╰── <23> Var [y]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_assign_incompatible_pointer_types() {
    let src = r#"
        int main(void) {
            int four_element_array[4] = {1, 2, 3, 4};
            int (*arr)[3] = &four_element_array;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── four_element_array
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ├── Constant Int [3]
                    │           ╰── Constant Int [4]
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── arr
                        ├── Type
                        │   ╰── Pointer
                        │       ╰── Array
                        │           ├── 3
                        │           ╰── Int
                        ╰── Initializer
                            ╰── <29> AddressOf
                                ╰── <28> Var [four_element_array]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_assign_to_array() {
    let src = r#"
        int main(void)
        {
            int arr[3] = {1, 2, 3};
            int arr2[3] = {4, 5, 6};
            arr = arr2;
            return arr[0];
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr2
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [4]
                    │           ├── Constant Int [5]
                    │           ╰── Constant Int [6]
                    ├── <36> Assign [=]
                    │   ├── <32> Var [arr]
                    │   ╰── <35> Var [arr2]
                    ╰── Return
                        ╰── <41> Subscript
                            ├── <39> Var [arr]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_assign_to_array_2() {
    let src = r#"
        int main(void)
        {
            int dim2[1][2] = {{1, 2}};
            int dim[2] = {3, 4};
            dim2[0] = dim;
            return dim[0];
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── dim2
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 1
                    │   │       ╰── Array
                    │   │           ├── 2
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ├── Constant Int [1]
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── dim
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 2
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [3]
                    │           ╰── Constant Int [4]
                    ├── <37> Assign [=]
                    │   ├── <33> Subscript
                    │   │   ├── <31> Var [dim2]
                    │   │   ╰── Constant Int [0]
                    │   ╰── <36> Var [dim]
                    ╰── Return
                        ╰── <42> Subscript
                            ├── <40> Var [dim]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_assign_to_array_3() {
    let src = r#"
        int main(void) {
            int arr[3] = { 1, 2, 3};
            int (*ptr_to_array)[3];
            *ptr_to_array = arr;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr_to_array
                    │   ╰── Type
                    │       ╰── Pointer
                    │           ╰── Array
                    │               ├── 3
                    │               ╰── Int
                    ╰── <32> Assign [=]
                        ├── <28> Dereference
                        │   ╰── <27> Var [ptr_to_array]
                        ╰── <31> Var [arr]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_bad_arg_type() {
    let src = r#"
        int foo(int **x) {
            return x[0][0];
        }
        int main(void) {
            int arr[1] = {10};
            return foo(&arr);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── x
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Pointer
            │   │                   ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <15> Subscript
            │               ├── <13> Subscript
            │               │   ├── <11> Var [x]
            │               │   ╰── Constant Int [0]
            │               ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 1
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Constant Int [10]
                    ╰── Return
                        ╰── <36> FunctionCall [foo]
                            ╰── <35> AddressOf
                                ╰── <34> Var [arr]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_cast_to_array_type() {
    let src = r#"
        int main(void)
        {
            int arr[10];
            return (int[10])arr;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ╰── Type
                    │       ╰── Array
                    │           ├── 10
                    │           ╰── Int
                    ╰── Return
                        ╰── <18> Cast
                            ├── Target
                            │   ╰── Array
                            │       ├── 10
                            │       ╰── Int
                            ╰── Expression
                                ╰── <17> Var [arr]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_cast_to_array_type_2() {
    let src = r#"
        int main(void)
        {
            long arr[10];
            return (int *[10])arr;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ╰── Type
                    │       ╰── Array
                    │           ├── 10
                    │           ╰── Long
                    ╰── Return
                        ╰── <19> Cast
                            ├── Target
                            │   ╰── Array
                            │       ├── 10
                            │       ╰── Pointer
                            │           ╰── Int
                            ╰── Expression
                                ╰── <18> Var [arr]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_cast_to_array_type_3() {
    let src = r#"
        int main(void)
        {
            long arr[6];
            return ((long(([2])[3]))arr);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ╰── Type
                    │       ╰── Array
                    │           ├── 6
                    │           ╰── Long
                    ╰── Return
                        ╰── <23> Cast
                            ├── Target
                            │   ╰── Array
                            │       ├── 2
                            │       ╰── Array
                            │           ├── 3
                            │           ╰── Long
                            ╰── Expression
                                ╰── <21> Var [arr]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_compare_different_pointer_types() {
    let src = r#"
        int main(void)
        {
            long x = 10;
            long *ptr = &x + 1;
            long(*array_ptr)[10] = (long (*)[10]) &x;
            return array_ptr < ptr;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── <20>  [+]
                    │           ├── <17> AddressOf
                    │           │   ╰── <16> Var [x]
                    │           ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── array_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Array
                    │   │           ├── 10
                    │   │           ╰── Long
                    │   ╰── Initializer
                    │       ╰── <39> Cast
                    │           ├── Target
                    │           │   ╰── Pointer
                    │           │       ╰── Array
                    │           │           ├── 10
                    │           │           ╰── Long
                    │           ╰── Expression
                    │               ╰── <38> AddressOf
                    │                   ╰── <37> Var [x]
                    ╰── Return
                        ╰── <47>  [<]
                            ├── <43> Var [array_ptr]
                            ╰── <46> Var [ptr]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_compare_explicit_and_implict_addr() {
    let src = r#"
        int main(void)
        {
            int arr[10];
            return arr == &arr;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ╰── Type
                    │       ╰── Array
                    │           ├── 10
                    │           ╰── Int
                    ╰── Return
                        ╰── <17>  [==]
                            ├── <12> Var [arr]
                            ╰── <16> AddressOf
                                ╰── <15> Var [arr]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_compare_pointer_to_int() {
    let src = r#"
        int main(void)
        {
            long *l = 0;
            return l <= 100ul;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── l
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <16>  [<=]
                            ├── <13> Var [l]
                            ╰── Constant ULong [100]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_compare_pointer_to_zero() {
    let src = r#"
        int main(void)
        {
            int *x = 0;
            return x > 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <16>  [>]
                            ├── <13> Var [x]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_compound_initializer_for_scalar() {
    let src = r#"
        int main(void)
        {
            int x = {1, 2, 3};
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ╰── Return
                        ╰── <17> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_compound_initializer_for_static_scalar() {
    let src = r#"
        int main(void)
        {
            static int x = {1, 2, 3};
            return x;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Compound
                    │   │       ├── Constant Int [1]
                    │   │       ├── Constant Int [2]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Static
                    ╰── Return
                        ╰── <18> Var [x]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_compound_initializer_too_long_static() {
    let src = r#"
        int main(void) {
            static int arr[3] = {1, 2, 3, 4};
            return arr[2];
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Compound
                    │   │       ├── Constant Int [1]
                    │   │       ├── Constant Int [2]
                    │   │       ├── Constant Int [3]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Static
                    ╰── Return
                        ╰── <24> Subscript
                            ├── <22> Var [arr]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_compound_inititializer_too_long() {
    let src = r#"
        int main(void) {
            int arr[3] = {1, 2, 3, 4};
            return arr[2];
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ├── Constant Int [3]
                    │           ╰── Constant Int [4]
                    ╰── Return
                        ╰── <23> Subscript
                            ├── <21> Var [arr]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_conflicting_array_declarations() {
    let src = r#"
        int arr[6];
        int main(void) {
            return arr[0];
        }
        int arr[5];
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── arr
            │   ╰── Type
            │       ╰── Array
            │           ├── 6
            │           ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <14> Subscript
            │               ├── <12> Var [arr]
            │               ╰── Constant Int [0]
            ╰── VarDeclaration
                ├── Name
                │   ╰── arr
                ╰── Type
                    ╰── Array
                        ├── 5
                        ╰── Int
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_conflicting_function_declarations() {
    let src = r#"
        int f(int arr[2][3]);
        int f(int arr[2][4]);
    "#;
    let expected = r#"
        Program
            ├── Function [f]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── arr
            │           ╰── Type
            │               ╰── Array
            │                   ├── 2
            │                   ╰── Array
            │                       ├── 3
            │                       ╰── Int
            ╰── Function [f]
                ╰── Parameters
                    ╰── Param
                        ├── Name
                        │   ╰── arr
                        ╰── Type
                            ╰── Array
                                ├── 2
                                ╰── Array
                                    ├── 4
                                    ╰── Int
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_double_subscript() {
    let src = r#"
        int main(void) {
            int arr[3] = {4, 5, 6};
            return arr[2.0];
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [4]
                    │           ├── Constant Int [5]
                    │           ╰── Constant Int [6]
                    ╰── Return
                        ╰── <21> Subscript
                            ├── <19> Var [arr]
                            ╰── Constant Double [+2e0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_extra_credit_compound_add_double_to_pointer() {
    let src = r#"
        
        int main(void) {
            int arr[3] = {1, 2, 3};
            int *elem = arr;
            elem += 1.0;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── elem
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <23> Var [arr]
                    ├── <30> Assign [+=]
                    │   ├── <27> Var [elem]
                    │   ╰── Constant Double [+1e0]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_extra_credit_compound_add_two_pointers() {
    let src = r#"
        
        int main(void) {
            int arr[3] = {1, 2, 3};
            int *elem0 = arr;
            int *elem1 = arr + 1;
            elem0 += elem1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── elem0
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <23> Var [arr]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── elem1
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <34>  [+]
                    │           ├── <31> Var [arr]
                    │           ╰── Constant Int [1]
                    ├── <42> Assign [+=]
                    │   ├── <38> Var [elem0]
                    │   ╰── <41> Var [elem1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_extra_credit_compound_assign_to_array() {
    let src = r#"
        int main(void) {
            int arr[3] = {1, 2, 3};
            arr -= 1;
            0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ├── <22> Assign [-=]
                    │   ├── <19> Var [arr]
                    │   ╰── Constant Int [1]
                    ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_extra_credit_compound_assign_to_nested_array() {
    let src = r#"
        int main(void) {
            long arr[2][2] = {{1, 2}, {3, 4}};
            arr[1] += 1;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 2
                    │   │       ╰── Array
                    │   │           ├── 2
                    │   │           ╰── Long
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── Constant Int [1]
                    │           │   ╰── Constant Int [2]
                    │           ╰── Compound
                    │               ├── Constant Int [3]
                    │               ╰── Constant Int [4]
                    ├── <30> Assign [+=]
                    │   ├── <27> Subscript
                    │   │   ├── <25> Var [arr]
                    │   │   ╰── Constant Int [1]
                    │   ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_extra_credit_compound_sub_pointer_from_int() {
    let src = r#"
        
        int main(void) {
            int arr[3] = {1, 2, 3};
            int *elem = arr + 1;
            int i = 0;
            i -= elem;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── elem
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <26>  [+]
                    │           ├── <23> Var [arr]
                    │           ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <40> Assign [-=]
                    │   ├── <36> Var [i]
                    │   ╰── <39> Var [elem]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_extra_credit_postfix_incr_array() {
    let src = r#"
        int main(void) {
            int arr[3] = {1, 2, 3};
            arr++;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ├── <21> Postfix [++]
                    │   ╰── <19> Var [arr]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_extra_credit_postfix_incr_nested_array() {
    let src = r#"
        int main(void) {
            int arr[2][3] = {{1, 2, 3}, {4, 5, 6}};
            arr[2]++;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 2
                    │   │       ╰── Array
                    │   │           ├── 3
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── Constant Int [1]
                    │           │   ├── Constant Int [2]
                    │           │   ╰── Constant Int [3]
                    │           ╰── Compound
                    │               ├── Constant Int [4]
                    │               ├── Constant Int [5]
                    │               ╰── Constant Int [6]
                    ├── <33> Postfix [++]
                    │   ╰── <31> Subscript
                    │       ├── <29> Var [arr]
                    │       ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_extra_credit_prefix_decr_array() {
    let src = r#"
        int main(void) {
            int arr[3] = {1, 2, 3};
            --arr;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ├── <21> Unary [--]
                    │   ╰── <20> Var [arr]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_extra_credit_prefix_decr_nested_array() {
    let src = r#"
        int main(void) {
            int arr[2][3] = {{1, 2, 3}, {4, 5, 6}};
            --arr[2];
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 2
                    │   │       ╰── Array
                    │   │           ├── 3
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── Constant Int [1]
                    │           │   ├── Constant Int [2]
                    │           │   ╰── Constant Int [3]
                    │           ╰── Compound
                    │               ├── Constant Int [4]
                    │               ├── Constant Int [5]
                    │               ╰── Constant Int [6]
                    ├── <33> Unary [--]
                    │   ╰── <32> Subscript
                    │       ├── <30> Var [arr]
                    │       ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_extra_credit_switch_on_array() {
    let src = r#"
        
        int main(void) {
            int arr[3] = {1, 2, 3};
            switch (arr) {
                default:
                    return 0;
            }
            return 1;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ├── Switch
                    │   ├── Expression
                    │   │   ╰── <19> Var [arr]
                    │   ╰── Block
                    │       ╰── Default
                    │           ╰── Return
                    │               ╰── Constant Int [0]
                    ╰── Return
                        ╰── Constant Int [1]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_function_returns_array() {
    let src = r#"
        int(foo(void))[3][4];
    "#;
    let expected = r#"
        Program
            ╰── Function [foo]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_incompatible_elem_type_compound_init() {
    let src = r#"
        int main(void)
        {
            int *arr[3] = {0, 0, 1.0};
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ╰── VarDeclaration
                        ├── Name
                        │   ╰── arr
                        ├── Type
                        │   ╰── Array
                        │       ├── 3
                        │       ╰── Pointer
                        │           ╰── Int
                        ╰── Initializer
                            ╰── Compound
                                ├── Constant Int [0]
                                ├── Constant Int [0]
                                ╰── Constant Double [+1e0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_incompatible_elem_type_static_compound_init() {
    let src = r#"
        
        int *arr[3] = {0, 0, 1.0};
        int main(void)
        {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Pointer
            │   │           ╰── Int
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Constant Int [0]
            │           ├── Constant Int [0]
            │           ╰── Constant Double [+1e0]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_null_ptr_array_initializer() {
    let src = r#"
        int main(void)
        {
            int arr[1] = 0;
            return arr[0];
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 1
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <16> Subscript
                            ├── <14> Var [arr]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_null_ptr_static_array_initializer() {
    let src = r#"
        int main(void)
        {
            static int arr[1] = 0;
            return arr[0];
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 1
                    │   │       ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Constant Int [0]
                    │   ╰── Static
                    ╰── Return
                        ╰── <17> Subscript
                            ├── <15> Var [arr]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_scalar_initializer_for_array() {
    let src = r#"
        int main(void)
        {
            int arr[1] = 4;
            return arr[0];
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 1
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [4]
                    ╰── Return
                        ╰── <16> Subscript
                            ├── <14> Var [arr]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_scalar_initializer_for_static_array() {
    let src = r#"
        
        double arr[3] = 1.0;
        int main(void)
        {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Double
            │   ╰── Initializer
            │       ╰── Constant Double [+1e0]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_static_non_const_array() {
    let src = r#"
        int foo(int p) {
            static int arr[3] = { p, p + 1, 0};
            return arr[2];
        }
        int main(void) {
            return foo(5);
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── p
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── <15> Var [p]
            │       │   │       ├── <21>  [+]
            │       │   │       │   ├── <18> Var [p]
            │       │   │       │   ╰── Constant Int [1]
            │       │   │       ╰── Constant Int [0]
            │       │   ╰── Static
            │       ╰── Return
            │           ╰── <30> Subscript
            │               ├── <28> Var [arr]
            │               ╰── Constant Int [2]
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── <40> FunctionCall [foo]
                            ╰── Constant Int [5]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_sub_different_pointer_types() {
    let src = r#"
        int main(void)
        {
            long x[10];
            long *ptr = x;
            unsigned long *ptr2 = (unsigned long *)ptr;
            return ptr - ptr2;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Array
                    │           ├── 10
                    │           ╰── Long
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── <16> Var [x]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr2
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <28> Cast
                    │           ├── Target
                    │           │   ╰── Pointer
                    │           │       ╰── Unsigned Long
                    │           ╰── Expression
                    │               ╰── <27> Var [ptr]
                    ╰── Return
                        ╰── <36>  [-]
                            ├── <32> Var [ptr]
                            ╰── <35> Var [ptr2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_sub_double_from_ptr() {
    let src = r#"
        int main(void)
        {
            int *y = 0;
            return (y - 0.0 == 0.0);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <20>  [==]
                            ├── <16>  [-]
                            │   ├── <13> Var [y]
                            │   ╰── Constant Double [+0e0]
                            ╰── Constant Double [+0e0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_sub_ptr_from_int() {
    let src = r#"
        int main(void)
        {
            int *x = 0;
            return 0 - x == 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <19>  [==]
                            ├── <16>  [-]
                            │   ├── Constant Int [0]
                            │   ╰── <15> Var [x]
                            ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_subscript_both_pointers() {
    let src = r#"
        int main(void)
        {
            int x = 10;
            int *ptr = &x;
            int *subscript = 0;
            return ptr[subscript];
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [10]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <17> AddressOf
                    │           ╰── <16> Var [x]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── subscript
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ╰── Return
                        ╰── <31> Subscript
                            ├── <28> Var [ptr]
                            ╰── <30> Var [subscript]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_invalid_types_subscript_non_ptr() {
    let src = r#"
        int main(void) {
            int a = 3;
            return a[4];
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ╰── Return
                        ╰── <14> Subscript
                            ├── <12> Var [a]
                            ╰── Constant Int [4]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_allocation_test_alignment() {
    let src = r#"
        int check_alignment(int *ptr) {
            unsigned long addr = (unsigned long) ptr;
            return (addr % 16 == 0);
        }
        int main(void)
        {
            int arr[5] = {0};
            int arr2[7] = {0};
            int arr3[2][2] = {{0}};
            if (!check_alignment(arr)) {
                return 1;
            }
            for (int i = 0; i < 5; i = i + 1)
                arr[i] = i;
            if (!check_alignment(arr2)) {
                return 2;
            }
            for (int i = 0; i < 7; i = i + 1)
                if (arr2[i])
                    return 3;
            for (int i = 0; i < 7; i = i + 1){
                arr2[i] = -i;
            }
            if (!check_alignment((int *)arr3)) {
                return 4;
            }
            for (int i = 0; i < 5; i = i + 1) {
                if (arr[i] != i) {
                    return 5;
                }
            }
            for (int i = 0; i < 2; i = i + 1)
                for (int j = 0; j < 2; j = j + 1)
                    if (arr3[i][j] != 0)
                        return 6;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [check_alignment]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── addr
            │       │   ├── Type
            │       │   │   ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── <16> Cast
            │       │           ├── Target
            │       │           │   ╰── Unsigned Long
            │       │           ╰── Expression
            │       │               ╰── <15> Var [ptr]
            │       ╰── Return
            │           ╰── <27>  [==]
            │               ├── <23>  [%]
            │               │   ├── <20> Var [addr]
            │               │   ╰── Constant Int [16]
            │               ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 5
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr2
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 7
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr3
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 2
                    │   │       ╰── Array
                    │   │           ├── 2
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ╰── Compound
                    │               ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <70> Unary [!]
                    │   │       ╰── <69> FunctionCall [check_alignment]
                    │   │           ╰── <68> Var [arr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <87>  [<]
                    │   │       ├── <84> Var [i]
                    │   │       ╰── Constant Int [5]
                    │   ├── Condition
                    │   │   ╰── <96> Assign [=]
                    │   │       ├── <89> Var [i]
                    │   │       ╰── <95>  [+]
                    │   │           ├── <92> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── <105> Assign [=]
                    │       ├── <101> Subscript
                    │       │   ├── <98> Var [arr]
                    │       │   ╰── <100> Var [i]
                    │       ╰── <104> Var [i]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <113> Unary [!]
                    │   │       ╰── <112> FunctionCall [check_alignment]
                    │   │           ╰── <111> Var [arr2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <130>  [<]
                    │   │       ├── <127> Var [i]
                    │   │       ╰── Constant Int [7]
                    │   ├── Condition
                    │   │   ╰── <139> Assign [=]
                    │   │       ├── <132> Var [i]
                    │   │       ╰── <138>  [+]
                    │   │           ├── <135> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── If
                    │       ├── Condition
                    │       │   ╰── <144> Subscript
                    │       │       ├── <141> Var [arr2]
                    │       │       ╰── <143> Var [i]
                    │       ╰── Then
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <160>  [<]
                    │   │       ├── <157> Var [i]
                    │   │       ╰── Constant Int [7]
                    │   ├── Condition
                    │   │   ╰── <169> Assign [=]
                    │   │       ├── <162> Var [i]
                    │   │       ╰── <168>  [+]
                    │   │           ├── <165> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── <180> Assign [=]
                    │           ├── <174> Subscript
                    │           │   ├── <171> Var [arr2]
                    │           │   ╰── <173> Var [i]
                    │           ╰── <179> Unary [-]
                    │               ╰── <178> Var [i]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <194> Unary [!]
                    │   │       ╰── <193> FunctionCall [check_alignment]
                    │   │           ╰── <192> Cast
                    │   │               ├── Target
                    │   │               │   ╰── Pointer
                    │   │               │       ╰── Int
                    │   │               ╰── Expression
                    │   │                   ╰── <191> Var [arr3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <211>  [<]
                    │   │       ├── <208> Var [i]
                    │   │       ╰── Constant Int [5]
                    │   ├── Condition
                    │   │   ╰── <220> Assign [=]
                    │   │       ├── <213> Var [i]
                    │   │       ╰── <219>  [+]
                    │   │           ├── <216> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <229>  [!=]
                    │           │       ├── <225> Subscript
                    │           │       │   ├── <222> Var [arr]
                    │           │       │   ╰── <224> Var [i]
                    │           │       ╰── <228> Var [i]
                    │           ╰── Then
                    │               ╰── Block
                    │                   ╰── Return
                    │                       ╰── Constant Int [5]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <249>  [<]
                    │   │       ├── <246> Var [i]
                    │   │       ╰── Constant Int [2]
                    │   ├── Condition
                    │   │   ╰── <258> Assign [=]
                    │   │       ├── <251> Var [i]
                    │   │       ╰── <257>  [+]
                    │   │           ├── <254> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── For
                    │       ├── Init
                    │       │   ╰── VarDeclaration
                    │       │       ├── Name
                    │       │       │   ╰── j
                    │       │       ├── Type
                    │       │       │   ╰── Int
                    │       │       ╰── Initializer
                    │       │           ╰── Constant Int [0]
                    │       ├── Condition
                    │       │   ╰── <270>  [<]
                    │       │       ├── <267> Var [j]
                    │       │       ╰── Constant Int [2]
                    │       ├── Condition
                    │       │   ╰── <279> Assign [=]
                    │       │       ├── <272> Var [j]
                    │       │       ╰── <278>  [+]
                    │       │           ├── <275> Var [j]
                    │       │           ╰── Constant Int [1]
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <290>  [!=]
                    │           │       ├── <287> Subscript
                    │           │       │   ├── <284> Subscript
                    │           │       │   │   ├── <281> Var [arr3]
                    │           │       │   │   ╰── <283> Var [i]
                    │           │       │   ╰── <286> Var [j]
                    │           │       ╰── Constant Int [0]
                    │           ╰── Then
                    │               ╰── Return
                    │                   ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_casts_cast_array_of_pointers() {
    let src = r#"
        int main(void) {
            int simple_array[2] = {1, 2};
            int(*ptr_arr[3])[2] = {&simple_array, 0, &simple_array};
            long *other_ptr = (long *)ptr_arr;
            return (int(**)[2])other_ptr == ptr_arr;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── simple_array
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 2
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr_arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Pointer
                    │   │           ╰── Array
                    │   │               ├── 2
                    │   │               ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <27> AddressOf
                    │           │   ╰── <26> Var [simple_array]
                    │           ├── Constant Int [0]
                    │           ╰── <33> AddressOf
                    │               ╰── <32> Var [simple_array]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── other_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── <46> Cast
                    │           ├── Target
                    │           │   ╰── Pointer
                    │           │       ╰── Long
                    │           ╰── Expression
                    │               ╰── <45> Var [ptr_arr]
                    ╰── Return
                        ╰── <62>  [==]
                            ├── <58> Cast
                            │   ├── Target
                            │   │   ╰── Pointer
                            │   │       ╰── Pointer
                            │   │           ╰── Array
                            │   │               ├── 2
                            │   │               ╰── Int
                            │   ╰── Expression
                            │       ╰── <57> Var [other_ptr]
                            ╰── <61> Var [ptr_arr]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_casts_implicit_and_explicit_conversions() {
    let src = r#"
        int main(void) {
            long arr[4] = {-1,-2,-3,-4};
            if (arr != (long *) arr) {
                return 1;
            }
            if ((long (*)[4]) arr != &arr) {
                return 2;
            }
            unsigned long *unsigned_arr = (unsigned long *)arr;
            if (unsigned_arr[0] != 18446744073709551615UL) {
                return 3;
            }
            if (unsigned_arr[3] != 18446744073709551612UL) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <12> Unary [-]
                    │           │   ╰── Constant Int [1]
                    │           ├── <16> Unary [-]
                    │           │   ╰── Constant Int [2]
                    │           ├── <20> Unary [-]
                    │           │   ╰── Constant Int [3]
                    │           ╰── <24> Unary [-]
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37>  [!=]
                    │   │       ├── <29> Var [arr]
                    │   │       ╰── <36> Cast
                    │   │           ├── Target
                    │   │           │   ╰── Pointer
                    │   │           │       ╰── Long
                    │   │           ╰── Expression
                    │   │               ╰── <35> Var [arr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <56>  [!=]
                    │   │       ├── <51> Cast
                    │   │       │   ├── Target
                    │   │       │   │   ╰── Pointer
                    │   │       │   │       ╰── Array
                    │   │       │   │           ├── 4
                    │   │       │   │           ╰── Long
                    │   │       │   ╰── Expression
                    │   │       │       ╰── <50> Var [arr]
                    │   │       ╰── <55> AddressOf
                    │   │           ╰── <54> Var [arr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── unsigned_arr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <71> Cast
                    │           ├── Target
                    │           │   ╰── Pointer
                    │           │       ╰── Unsigned Long
                    │           ╰── Expression
                    │               ╰── <70> Var [arr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <80>  [!=]
                    │   │       ├── <77> Subscript
                    │   │       │   ├── <75> Var [unsigned_arr]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Constant ULong [18446744073709551615]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <92>  [!=]
                    │   │       ├── <89> Subscript
                    │   │       │   ├── <87> Var [unsigned_arr]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── Constant ULong [18446744073709551612]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_casts_multi_dim_casts() {
    let src = r#"
        int main(void) {
            int multi_dim[2][3] = {{0, 1, 2}, {3, 4, 5}};
            int (*array_pointer)[2][3] = &multi_dim;
            int (*row_pointer)[3] = (int (*)[3]) array_pointer;
            if (row_pointer != multi_dim) {
                return 1;
            }
            row_pointer = row_pointer + 1;
            if (row_pointer[0][1] != 4) {
                return 2;
            }
            int *elem_ptr = (int *) row_pointer;
            if (*elem_ptr != 3 ){
                return 3;
            }
            elem_ptr = elem_ptr + 2;
            if (*elem_ptr != 5) {
                return 4;
            }
            row_pointer = row_pointer - 1;
            if ((int (*)[2][3]) row_pointer != array_pointer) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── multi_dim
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 2
                    │   │       ╰── Array
                    │   │           ├── 3
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── Constant Int [0]
                    │           │   ├── Constant Int [1]
                    │           │   ╰── Constant Int [2]
                    │           ╰── Compound
                    │               ├── Constant Int [3]
                    │               ├── Constant Int [4]
                    │               ╰── Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── array_pointer
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Array
                    │   │           ├── 2
                    │   │           ╰── Array
                    │   │               ├── 3
                    │   │               ╰── Int
                    │   ╰── Initializer
                    │       ╰── <39> AddressOf
                    │           ╰── <38> Var [multi_dim]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── row_pointer
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Array
                    │   │           ├── 3
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── <57> Cast
                    │           ├── Target
                    │           │   ╰── Pointer
                    │           │       ╰── Array
                    │           │           ├── 3
                    │           │           ╰── Int
                    │           ╰── Expression
                    │               ╰── <56> Var [array_pointer]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <65>  [!=]
                    │   │       ├── <61> Var [row_pointer]
                    │   │       ╰── <64> Var [multi_dim]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <79> Assign [=]
                    │   ├── <72> Var [row_pointer]
                    │   ╰── <78>  [+]
                    │       ├── <75> Var [row_pointer]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <89>  [!=]
                    │   │       ├── <86> Subscript
                    │   │       │   ├── <84> Subscript
                    │   │       │   │   ├── <82> Var [row_pointer]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── elem_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <104> Cast
                    │           ├── Target
                    │           │   ╰── Pointer
                    │           │       ╰── Int
                    │           ╰── Expression
                    │               ╰── <103> Var [row_pointer]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <112>  [!=]
                    │   │       ├── <109> Dereference
                    │   │       │   ╰── <108> Var [elem_ptr]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <126> Assign [=]
                    │   ├── <119> Var [elem_ptr]
                    │   ╰── <125>  [+]
                    │       ├── <122> Var [elem_ptr]
                    │       ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <133>  [!=]
                    │   │       ├── <130> Dereference
                    │   │       │   ╰── <129> Var [elem_ptr]
                    │   │       ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <147> Assign [=]
                    │   ├── <140> Var [row_pointer]
                    │   ╰── <146>  [-]
                    │       ├── <143> Var [row_pointer]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <163>  [!=]
                    │   │       ├── <159> Cast
                    │   │       │   ├── Target
                    │   │       │   │   ╰── Pointer
                    │   │       │   │       ╰── Array
                    │   │       │   │           ├── 2
                    │   │       │   │           ╰── Array
                    │   │       │   │               ├── 3
                    │   │       │   │               ╰── Int
                    │   │       │   ╰── Expression
                    │   │       │       ╰── <158> Var [row_pointer]
                    │   │       ╰── <162> Var [array_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_declarators_array_as_argument() {
    let src = r#"
        int array_param(int a[5]) {
            a[4] = 0;
            return 0;
        }
        int nested_array_param(int a[2][3]) {
            a[1][1] = 1;
            return 0;
        }
        int array_param(int a[2]);
        int nested_array_param(int (*a)[3]);
        int main(void) {
            int array_param(int a[6]);
            int nested_array_param(int a[5][3]);
            int arr[8] = {8, 7, 6, 5, 4, 3, 2, 1};
            array_param(arr);
            if (arr[4]) {
                return 1;
            }
            for (int i = 0; i < 8; i = i + 1) {
                if (i != 4 && arr[i] != 8 - i)
                    return 2;
            }
            int nested_arr[4][3] = { {-1, -1, -1}, {-2, -2, -2}, {-3, -3, -3}, {-4, -4, -4}};
            nested_array_param(nested_arr);
            if (nested_arr[1][1] != 1) {
                return 3;
            }
            for (int i = 0; i < 4; i = i + 1) {
                int expected = -1 - i;
                for (int j = 0; j < 3; j = j + 1) {
                    if ((i != 1 || j != 1) &&
                        (nested_arr[i][j] != expected)) {
                            return 4;
                    }
                }
            }
            return 0;
        }
        int array_param(int *a);
    "#;
    let expected = r#"
        Program
            ├── Function [array_param]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── a
            │   │       ╰── Type
            │   │           ╰── Array
            │   │               ├── 5
            │   │               ╰── Int
            │   ╰── Body
            │       ├── <16> Assign [=]
            │       │   ├── <13> Subscript
            │       │   │   ├── <11> Var [a]
            │       │   │   ╰── Constant Int [4]
            │       │   ╰── Constant Int [0]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [nested_array_param]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── a
            │   │       ╰── Type
            │   │           ╰── Array
            │   │               ├── 2
            │   │               ╰── Array
            │   │                   ├── 3
            │   │                   ╰── Int
            │   ╰── Body
            │       ├── <41> Assign [=]
            │       │   ├── <38> Subscript
            │       │   │   ├── <36> Subscript
            │       │   │   │   ├── <34> Var [a]
            │       │   │   │   ╰── Constant Int [1]
            │       │   │   ╰── Constant Int [1]
            │       │   ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [array_param]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── a
            │           ╰── Type
            │               ╰── Array
            │                   ├── 2
            │                   ╰── Int
            ├── Function [nested_array_param]
            │   ╰── Parameters
            │       ╰── Param
            │           ├── Name
            │           │   ╰── a
            │           ╰── Type
            │               ╰── Pointer
            │                   ╰── Array
            │                       ├── 3
            │                       ╰── Int
            ├── Function [main]
            │   ╰── Body
            │       ├── Function [array_param]
            │       │   ╰── Parameters
            │       │       ╰── Param
            │       │           ├── Name
            │       │           │   ╰── a
            │       │           ╰── Type
            │       │               ╰── Array
            │       │                   ├── 6
            │       │                   ╰── Int
            │       ├── Function [nested_array_param]
            │       │   ╰── Parameters
            │       │       ╰── Param
            │       │           ├── Name
            │       │           │   ╰── a
            │       │           ╰── Type
            │       │               ╰── Array
            │       │                   ├── 5
            │       │                   ╰── Array
            │       │                       ├── 3
            │       │                       ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 8
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [8]
            │       │           ├── Constant Int [7]
            │       │           ├── Constant Int [6]
            │       │           ├── Constant Int [5]
            │       │           ├── Constant Int [4]
            │       │           ├── Constant Int [3]
            │       │           ├── Constant Int [2]
            │       │           ╰── Constant Int [1]
            │       ├── <121> FunctionCall [array_param]
            │       │   ╰── <120> Var [arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <126> Subscript
            │       │   │       ├── <124> Var [arr]
            │       │   │       ╰── Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <143>  [<]
            │       │   │       ├── <140> Var [i]
            │       │   │       ╰── Constant Int [8]
            │       │   ├── Condition
            │       │   │   ╰── <152> Assign [=]
            │       │   │       ├── <145> Var [i]
            │       │   │       ╰── <151>  [+]
            │       │   │           ├── <148> Var [i]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <171>  [&&]
            │       │           │       ├── <157>  [!=]
            │       │           │       │   ├── <154> Var [i]
            │       │           │       │   ╰── Constant Int [4]
            │       │           │       ╰── <170>  [!=]
            │       │           │           ├── <163> Subscript
            │       │           │           │   ├── <160> Var [arr]
            │       │           │           │   ╰── <162> Var [i]
            │       │           │           ╰── <169>  [-]
            │       │           │               ├── Constant Int [8]
            │       │           │               ╰── <168> Var [i]
            │       │           ╰── Then
            │       │               ╰── Return
            │       │                   ╰── Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── nested_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 4
            │       │   │       ╰── Array
            │       │   │           ├── 3
            │       │   │           ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <187> Unary [-]
            │       │           │   │   ╰── Constant Int [1]
            │       │           │   ├── <191> Unary [-]
            │       │           │   │   ╰── Constant Int [1]
            │       │           │   ╰── <195> Unary [-]
            │       │           │       ╰── Constant Int [1]
            │       │           ├── Compound
            │       │           │   ├── <200> Unary [-]
            │       │           │   │   ╰── Constant Int [2]
            │       │           │   ├── <204> Unary [-]
            │       │           │   │   ╰── Constant Int [2]
            │       │           │   ╰── <208> Unary [-]
            │       │           │       ╰── Constant Int [2]
            │       │           ├── Compound
            │       │           │   ├── <213> Unary [-]
            │       │           │   │   ╰── Constant Int [3]
            │       │           │   ├── <217> Unary [-]
            │       │           │   │   ╰── Constant Int [3]
            │       │           │   ╰── <221> Unary [-]
            │       │           │       ╰── Constant Int [3]
            │       │           ╰── Compound
            │       │               ├── <226> Unary [-]
            │       │               │   ╰── Constant Int [4]
            │       │               ├── <230> Unary [-]
            │       │               │   ╰── Constant Int [4]
            │       │               ╰── <234> Unary [-]
            │       │                   ╰── Constant Int [4]
            │       ├── <242> FunctionCall [nested_array_param]
            │       │   ╰── <241> Var [nested_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <252>  [!=]
            │       │   │       ├── <249> Subscript
            │       │   │       │   ├── <247> Subscript
            │       │   │       │   │   ├── <245> Var [nested_arr]
            │       │   │       │   │   ╰── Constant Int [1]
            │       │   │       │   ╰── Constant Int [1]
            │       │   │       ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <269>  [<]
            │       │   │       ├── <266> Var [i]
            │       │   │       ╰── Constant Int [4]
            │       │   ├── Condition
            │       │   │   ╰── <278> Assign [=]
            │       │   │       ├── <271> Var [i]
            │       │   │       ╰── <277>  [+]
            │       │   │           ├── <274> Var [i]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Block
            │       │       ├── VarDeclaration
            │       │       │   ├── Name
            │       │       │   │   ╰── expected
            │       │       │   ├── Type
            │       │       │   │   ╰── Int
            │       │       │   ╰── Initializer
            │       │       │       ╰── <288>  [-]
            │       │       │           ├── <284> Unary [-]
            │       │       │           │   ╰── Constant Int [1]
            │       │       │           ╰── <287> Var [i]
            │       │       ╰── For
            │       │           ├── Init
            │       │           │   ╰── VarDeclaration
            │       │           │       ├── Name
            │       │           │       │   ╰── j
            │       │           │       ├── Type
            │       │           │       │   ╰── Int
            │       │           │       ╰── Initializer
            │       │           │           ╰── Constant Int [0]
            │       │           ├── Condition
            │       │           │   ╰── <302>  [<]
            │       │           │       ├── <299> Var [j]
            │       │           │       ╰── Constant Int [3]
            │       │           ├── Condition
            │       │           │   ╰── <311> Assign [=]
            │       │           │       ├── <304> Var [j]
            │       │           │       ╰── <310>  [+]
            │       │           │           ├── <307> Var [j]
            │       │           │           ╰── Constant Int [1]
            │       │           ╰── Block
            │       │               ╰── If
            │       │                   ├── Condition
            │       │                   │   ╰── <339>  [&&]
            │       │                   │       ├── <324>  [||]
            │       │                   │       │   ├── <316>  [!=]
            │       │                   │       │   │   ├── <313> Var [i]
            │       │                   │       │   │   ╰── Constant Int [1]
            │       │                   │       │   ╰── <322>  [!=]
            │       │                   │       │       ├── <319> Var [j]
            │       │                   │       │       ╰── Constant Int [1]
            │       │                   │       ╰── <338>  [!=]
            │       │                   │           ├── <333> Subscript
            │       │                   │           │   ├── <330> Subscript
            │       │                   │           │   │   ├── <327> Var [nested_arr]
            │       │                   │           │   │   ╰── <329> Var [i]
            │       │                   │           │   ╰── <332> Var [j]
            │       │                   │           ╰── <336> Var [expected]
            │       │                   ╰── Then
            │       │                       ╰── Block
            │       │                           ╰── Return
            │       │                               ╰── Constant Int [4]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [array_param]
                ╰── Parameters
                    ╰── Param
                        ├── Name
                        │   ╰── a
                        ╰── Type
                            ╰── Pointer
                                ╰── Int
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_declarators_big_array() {
    let src = r#"
        extern int x[4294967297L][100000000];
        int main(void) {
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── x
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 4294967297
            │   │       ╰── Array
            │   │           ├── 100000000
            │   │           ╰── Int
            │   ╰── Extern
            ╰── Function [main]
                ╰── Body
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_declarators_equivalent_declarators() {
    let src = r#"
        long int(arr)[4] = {1, 2, 3, 4};
        int long arr[4ul];
        int (*ptr_to_arr)[3][6l];
        int((*(ptr_to_arr))[3l])[6u] = 0;
        int *array_of_pointers[3] = {0, 0, 0};
        int test_arr(void) {
            for (int i = 0; i < 4; i = i + 1) {
                if (arr[i] != i + 1) {
                    return 1;
                }
            }
            return 0;
        }
        int test_ptr_to_arr(void) {
            if (ptr_to_arr) {
                return 2;
            }
            static int nested_arr[3][6];
            ptr_to_arr = &nested_arr;
            ptr_to_arr[0][2][4] = 100;
            if (nested_arr[2][4] != 100) {
                return 3;
            }
            return 0;
        }
        int test_array_of_pointers(int *ptr) {
            extern int *((array_of_pointers)[3]);
            for (int i = 0; i < 3; i = i + 1) {
                if (array_of_pointers[i])
                    return 4;
                array_of_pointers[i] = ptr;
            }
            array_of_pointers[2][0] = 11;
            if (*ptr != 11) {
                return 5;
            }
            for (int i = 0; i < 3; i = i + 1) {
                if (array_of_pointers[i][0] != 11) {
                    return 6;
                }
            }
            return 0;
        }
        int main(void)
        {
            int check = test_arr();
            if (check) {
                return check;
            }
            check = test_ptr_to_arr();
            if (check) {
                return check;
            }
            int x = 0;
            check = test_array_of_pointers(&x);
            if (check) {
                return check;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 4
            │   │       ╰── Long
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Constant Int [1]
            │           ├── Constant Int [2]
            │           ├── Constant Int [3]
            │           ╰── Constant Int [4]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── arr
            │   ╰── Type
            │       ╰── Array
            │           ├── 4
            │           ╰── Long
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr_to_arr
            │   ╰── Type
            │       ╰── Pointer
            │           ╰── Array
            │               ├── 3
            │               ╰── Array
            │                   ├── 6
            │                   ╰── Int
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ptr_to_arr
            │   ├── Type
            │   │   ╰── Pointer
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Array
            │   │               ├── 6
            │   │               ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── array_of_pointers
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Pointer
            │   │           ╰── Int
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Constant Int [0]
            │           ├── Constant Int [0]
            │           ╰── Constant Int [0]
            ├── Function [test_arr]
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <76>  [<]
            │       │   │       ├── <73> Var [i]
            │       │   │       ╰── Constant Int [4]
            │       │   ├── Condition
            │       │   │   ╰── <85> Assign [=]
            │       │   │       ├── <78> Var [i]
            │       │   │       ╰── <84>  [+]
            │       │   │           ├── <81> Var [i]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <97>  [!=]
            │       │           │       ├── <90> Subscript
            │       │           │       │   ├── <87> Var [arr]
            │       │           │       │   ╰── <89> Var [i]
            │       │           │       ╰── <96>  [+]
            │       │           │           ├── <93> Var [i]
            │       │           │           ╰── Constant Int [1]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [test_ptr_to_arr]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <115> Var [ptr_to_arr]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── nested_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Array
            │       │   │           ├── 6
            │       │   │           ╰── Int
            │       │   ╰── Static
            │       ├── <136> Assign [=]
            │       │   ├── <131> Var [ptr_to_arr]
            │       │   ╰── <135> AddressOf
            │       │       ╰── <134> Var [nested_arr]
            │       ├── <148> Assign [=]
            │       │   ├── <145> Subscript
            │       │   │   ├── <143> Subscript
            │       │   │   │   ├── <141> Subscript
            │       │   │   │   │   ├── <139> Var [ptr_to_arr]
            │       │   │   │   │   ╰── Constant Int [0]
            │       │   │   │   ╰── Constant Int [2]
            │       │   │   ╰── Constant Int [4]
            │       │   ╰── Constant Int [100]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <158>  [!=]
            │       │   │       ├── <155> Subscript
            │       │   │       │   ├── <153> Subscript
            │       │   │       │   │   ├── <151> Var [nested_arr]
            │       │   │       │   │   ╰── Constant Int [2]
            │       │   │       │   ╰── Constant Int [4]
            │       │   │       ╰── Constant Int [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [test_array_of_pointers]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── array_of_pointers
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Pointer
            │       │   │           ╰── Int
            │       │   ╰── Extern
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <197>  [<]
            │       │   │       ├── <194> Var [i]
            │       │   │       ╰── Constant Int [3]
            │       │   ├── Condition
            │       │   │   ╰── <206> Assign [=]
            │       │   │       ├── <199> Var [i]
            │       │   │       ╰── <205>  [+]
            │       │   │           ├── <202> Var [i]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Block
            │       │       ├── If
            │       │       │   ├── Condition
            │       │       │   │   ╰── <211> Subscript
            │       │       │   │       ├── <208> Var [array_of_pointers]
            │       │       │   │       ╰── <210> Var [i]
            │       │       │   ╰── Then
            │       │       │       ╰── Return
            │       │       │           ╰── Constant Int [4]
            │       │       ╰── <223> Assign [=]
            │       │           ├── <219> Subscript
            │       │           │   ├── <216> Var [array_of_pointers]
            │       │           │   ╰── <218> Var [i]
            │       │           ╰── <222> Var [ptr]
            │       ├── <236> Assign [=]
            │       │   ├── <233> Subscript
            │       │   │   ├── <231> Subscript
            │       │   │   │   ├── <229> Var [array_of_pointers]
            │       │   │   │   ╰── Constant Int [2]
            │       │   │   ╰── Constant Int [0]
            │       │   ╰── Constant Int [11]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <243>  [!=]
            │       │   │       ├── <240> Dereference
            │       │   │       │   ╰── <239> Var [ptr]
            │       │   │       ╰── Constant Int [11]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [5]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <260>  [<]
            │       │   │       ├── <257> Var [i]
            │       │   │       ╰── Constant Int [3]
            │       │   ├── Condition
            │       │   │   ╰── <269> Assign [=]
            │       │   │       ├── <262> Var [i]
            │       │   │       ╰── <268>  [+]
            │       │   │           ├── <265> Var [i]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <279>  [!=]
            │       │           │       ├── <276> Subscript
            │       │           │       │   ├── <274> Subscript
            │       │           │       │   │   ├── <271> Var [array_of_pointers]
            │       │           │       │   │   ╰── <273> Var [i]
            │       │           │       │   ╰── Constant Int [0]
            │       │           │       ╰── Constant Int [11]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── Constant Int [6]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── check
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <300> FunctionCall [test_arr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <304> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <306> Var [check]
                    ├── <316> Assign [=]
                    │   ├── <312> Var [check]
                    │   ╰── <315> FunctionCall [test_ptr_to_arr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <319> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <321> Var [check]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── <340> Assign [=]
                    │   ├── <333> Var [check]
                    │   ╰── <339> FunctionCall [test_array_of_pointers]
                    │       ╰── <338> AddressOf
                    │           ╰── <337> Var [x]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <343> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <345> Var [check]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_declarators_for_loop_array() {
    let src = r#"
        
        int main(void) {
            int counter = 0;
            for (int i[3] = {1, 2, 3}; counter < 3; counter = counter + 1){
                if (i[counter] != counter + 1) {
                    return 1;
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── counter
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Array
                    │   │       │       ├── 3
                    │   │       │       ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Compound
                    │   │               ├── Constant Int [1]
                    │   │               ├── Constant Int [2]
                    │   │               ╰── Constant Int [3]
                    │   ├── Condition
                    │   │   ╰── <29>  [<]
                    │   │       ├── <26> Var [counter]
                    │   │       ╰── Constant Int [3]
                    │   ├── Condition
                    │   │   ╰── <38> Assign [=]
                    │   │       ├── <31> Var [counter]
                    │   │       ╰── <37>  [+]
                    │   │           ├── <34> Var [counter]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <50>  [!=]
                    │           │       ├── <43> Subscript
                    │           │       │   ├── <40> Var [i]
                    │           │       │   ╰── <42> Var [counter]
                    │           │       ╰── <49>  [+]
                    │           │           ├── <46> Var [counter]
                    │           │           ╰── Constant Int [1]
                    │           ╰── Then
                    │               ╰── Block
                    │                   ╰── Return
                    │                       ╰── Constant Int [1]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_declarators_return_nested_array() {
    let src = r#"
        int arr[3] = {1, 1, 1};
        int (*foo(int x, int y))[3] {
            arr[1] = x;
            arr[2] = y;
            return &arr;
        }
        int main(void) {
            int (*arr)[3] = foo(2, 3);
            if (arr[0][0] != 1) {
                return 1;
            }
            if (arr[0][1] != 2) {
                return 2;
            }
            if (arr[0][2] != 3) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Int
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Constant Int [1]
            │           ├── Constant Int [1]
            │           ╰── Constant Int [1]
            ├── Function [foo]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── x
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── y
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── <35> Assign [=]
            │       │   ├── <31> Subscript
            │       │   │   ├── <29> Var [arr]
            │       │   │   ╰── Constant Int [1]
            │       │   ╰── <34> Var [x]
            │       ├── <44> Assign [=]
            │       │   ├── <40> Subscript
            │       │   │   ├── <38> Var [arr]
            │       │   │   ╰── Constant Int [2]
            │       │   ╰── <43> Var [y]
            │       ╰── Return
            │           ╰── <48> AddressOf
            │               ╰── <47> Var [arr]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Array
                    │   │           ├── 3
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── <66> FunctionCall [foo]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <77>  [!=]
                    │   │       ├── <74> Subscript
                    │   │       │   ├── <72> Subscript
                    │   │       │   │   ├── <70> Var [arr]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <91>  [!=]
                    │   │       ├── <88> Subscript
                    │   │       │   ├── <86> Subscript
                    │   │       │   │   ├── <84> Var [arr]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <105>  [!=]
                    │   │       ├── <102> Subscript
                    │   │       │   ├── <100> Subscript
                    │   │       │   │   ├── <98> Var [arr]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_bitwise_subscript() {
    let src = r#"
        
        int main(void) {
            int arr[6] = {-10, 10, -11, 11, -12, 12};
            if ((arr[0] & arr[5]) != 4) {
                return 1;
            }
            if ((arr[1] | arr[4]) != -2) {
                return 2;
            }
            if ((arr[2] ^ arr[3]) != -2) {
                return 3;
            }
            arr[0] = 2041302511;
            if ((arr[0] >> arr[1]) != 1993459) {
                return 4;
            }
            if ((arr[5] << 3 ) != 96) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 6
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <12> Unary [-]
                    │           │   ╰── Constant Int [10]
                    │           ├── Constant Int [10]
                    │           ├── <18> Unary [-]
                    │           │   ╰── Constant Int [11]
                    │           ├── Constant Int [11]
                    │           ├── <24> Unary [-]
                    │           │   ╰── Constant Int [12]
                    │           ╰── Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <43>  [!=]
                    │   │       ├── <40>  [&]
                    │   │       │   ├── <33> Subscript
                    │   │       │   │   ├── <31> Var [arr]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── <38> Subscript
                    │   │       │       ├── <36> Var [arr]
                    │   │       │       ╰── Constant Int [5]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <64>  [!=]
                    │   │       ├── <59>  [|]
                    │   │       │   ├── <52> Subscript
                    │   │       │   │   ├── <50> Var [arr]
                    │   │       │   │   ╰── Constant Int [1]
                    │   │       │   ╰── <57> Subscript
                    │   │       │       ├── <55> Var [arr]
                    │   │       │       ╰── Constant Int [4]
                    │   │       ╰── <63> Unary [-]
                    │   │           ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <85>  [!=]
                    │   │       ├── <80>  [^]
                    │   │       │   ├── <73> Subscript
                    │   │       │   │   ├── <71> Var [arr]
                    │   │       │   │   ╰── Constant Int [2]
                    │   │       │   ╰── <78> Subscript
                    │   │       │       ├── <76> Var [arr]
                    │   │       │       ╰── Constant Int [3]
                    │   │       ╰── <84> Unary [-]
                    │   │           ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <97> Assign [=]
                    │   ├── <94> Subscript
                    │   │   ├── <92> Var [arr]
                    │   │   ╰── Constant Int [0]
                    │   ╰── Constant Int [2041302511]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <112>  [!=]
                    │   │       ├── <109>  [>>]
                    │   │       │   ├── <102> Subscript
                    │   │       │   │   ├── <100> Var [arr]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── <107> Subscript
                    │   │       │       ├── <105> Var [arr]
                    │   │       │       ╰── Constant Int [1]
                    │   │       ╰── Constant Int [1993459]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <128>  [!=]
                    │   │       ├── <125>  [<<]
                    │   │       │   ├── <121> Subscript
                    │   │       │   │   ├── <119> Var [arr]
                    │   │       │   │   ╰── Constant Int [5]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── Constant Int [96]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_assign_and_increment() {
    let src = r#"
        
        int main(void) {
            int arr[4] = {-1, -2, -3, -4};
            int *ptr = arr;
            int idx = 2;
            if ((ptr++[idx++] *= 3) != -9) {
                return 1;
            }
            if (*ptr != -2) {
                return 2;
            }
            if (idx != 3) {
                return 3;
            }
            idx--;
            if ((--ptr)[3] += 4) {
                return 4;
            }
            if (arr[0] != -1 || arr[1] != -2 || arr[2] != -9 || arr[3] != 0) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <12> Unary [-]
                    │           │   ╰── Constant Int [1]
                    │           ├── <16> Unary [-]
                    │           │   ╰── Constant Int [2]
                    │           ├── <20> Unary [-]
                    │           │   ╰── Constant Int [3]
                    │           ╰── <24> Unary [-]
                    │               ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <33> Var [arr]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── idx
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <59>  [!=]
                    │   │       ├── <54> Assign [*=]
                    │   │       │   ├── <50> Subscript
                    │   │       │   │   ├── <45> Postfix [++]
                    │   │       │   │   │   ╰── <43> Var [ptr]
                    │   │       │   │   ╰── <49> Postfix [++]
                    │   │       │   │       ╰── <47> Var [idx]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── <58> Unary [-]
                    │   │           ╰── Constant Int [9]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <72>  [!=]
                    │   │       ├── <67> Dereference
                    │   │       │   ╰── <66> Var [ptr]
                    │   │       ╰── <71> Unary [-]
                    │   │           ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <82>  [!=]
                    │   │       ├── <79> Var [idx]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <91> Postfix [--]
                    │   ╰── <89> Var [idx]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <102> Assign [+=]
                    │   │       ├── <99> Subscript
                    │   │       │   ├── <97> Unary [--]
                    │   │       │   │   ╰── <95> Var [ptr]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <147>  [||]
                    │   │       ├── <138>  [||]
                    │   │       │   ├── <127>  [||]
                    │   │       │   │   ├── <116>  [!=]
                    │   │       │   │   │   ├── <111> Subscript
                    │   │       │   │   │   │   ├── <109> Var [arr]
                    │   │       │   │   │   │   ╰── Constant Int [0]
                    │   │       │   │   │   ╰── <115> Unary [-]
                    │   │       │   │   │       ╰── Constant Int [1]
                    │   │       │   │   ╰── <126>  [!=]
                    │   │       │   │       ├── <121> Subscript
                    │   │       │   │       │   ├── <119> Var [arr]
                    │   │       │   │       │   ╰── Constant Int [1]
                    │   │       │   │       ╰── <125> Unary [-]
                    │   │       │   │           ╰── Constant Int [2]
                    │   │       │   ╰── <137>  [!=]
                    │   │       │       ├── <132> Subscript
                    │   │       │       │   ├── <130> Var [arr]
                    │   │       │       │   ╰── Constant Int [2]
                    │   │       │       ╰── <136> Unary [-]
                    │   │       │           ╰── Constant Int [9]
                    │   │       ╰── <146>  [!=]
                    │   │           ├── <143> Subscript
                    │   │           │   ├── <141> Var [arr]
                    │   │           │   ╰── Constant Int [3]
                    │   │           ╰── Constant Int [0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_assign_array_of_pointers() {
    let src = r#"
        
        int main(void) {
            static int (*array_of_pointers[3])[4] = {0, 0, 0};
            int array1[4] = {100, 101, 102, 103};
            int nested_array[2][4] = {
                {200, 201, 202, 203},
                {300, 301, 302, 303}
            };
            array_of_pointers[0] = &array1;
            array_of_pointers[1] = &nested_array[0];
            array_of_pointers[2] = &nested_array[1];
            array_of_pointers[0] += 1;
            if (array_of_pointers[0][-1][3] != 103) {
                return 1;
            }
            array_of_pointers[1] += 1;
            array_of_pointers[2] -= 1;
            if (array_of_pointers[1][0][3] != 303) {
                return 2;
            }
            if (array_of_pointers[2][0][3] != 203) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── array_of_pointers
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Pointer
                    │   │           ╰── Array
                    │   │               ├── 4
                    │   │               ╰── Int
                    │   ├── Initializer
                    │   │   ╰── Compound
                    │   │       ├── Constant Int [0]
                    │   │       ├── Constant Int [0]
                    │   │       ╰── Constant Int [0]
                    │   ╰── Static
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── array1
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [100]
                    │           ├── Constant Int [101]
                    │           ├── Constant Int [102]
                    │           ╰── Constant Int [103]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── nested_array
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 2
                    │   │       ╰── Array
                    │   │           ├── 4
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── Constant Int [200]
                    │           │   ├── Constant Int [201]
                    │           │   ├── Constant Int [202]
                    │           │   ╰── Constant Int [203]
                    │           ╰── Compound
                    │               ├── Constant Int [300]
                    │               ├── Constant Int [301]
                    │               ├── Constant Int [302]
                    │               ╰── Constant Int [303]
                    ├── <73> Assign [=]
                    │   ├── <68> Subscript
                    │   │   ├── <66> Var [array_of_pointers]
                    │   │   ╰── Constant Int [0]
                    │   ╰── <72> AddressOf
                    │       ╰── <71> Var [array1]
                    ├── <85> Assign [=]
                    │   ├── <78> Subscript
                    │   │   ├── <76> Var [array_of_pointers]
                    │   │   ╰── Constant Int [1]
                    │   ╰── <84> AddressOf
                    │       ╰── <83> Subscript
                    │           ├── <81> Var [nested_array]
                    │           ╰── Constant Int [0]
                    ├── <97> Assign [=]
                    │   ├── <90> Subscript
                    │   │   ├── <88> Var [array_of_pointers]
                    │   │   ╰── Constant Int [2]
                    │   ╰── <96> AddressOf
                    │       ╰── <95> Subscript
                    │           ├── <93> Var [nested_array]
                    │           ╰── Constant Int [1]
                    ├── <105> Assign [+=]
                    │   ├── <102> Subscript
                    │   │   ├── <100> Var [array_of_pointers]
                    │   │   ╰── Constant Int [0]
                    │   ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <119>  [!=]
                    │   │       ├── <116> Subscript
                    │   │       │   ├── <114> Subscript
                    │   │       │   │   ├── <110> Subscript
                    │   │       │   │   │   ├── <108> Var [array_of_pointers]
                    │   │       │   │   │   ╰── Constant Int [0]
                    │   │       │   │   ╰── <113> Unary [-]
                    │   │       │   │       ╰── Constant Int [1]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── Constant Int [103]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <131> Assign [+=]
                    │   ├── <128> Subscript
                    │   │   ├── <126> Var [array_of_pointers]
                    │   │   ╰── Constant Int [1]
                    │   ╰── Constant Int [1]
                    ├── <139> Assign [-=]
                    │   ├── <136> Subscript
                    │   │   ├── <134> Var [array_of_pointers]
                    │   │   ╰── Constant Int [2]
                    │   ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <151>  [!=]
                    │   │       ├── <148> Subscript
                    │   │       │   ├── <146> Subscript
                    │   │       │   │   ├── <144> Subscript
                    │   │       │   │   │   ├── <142> Var [array_of_pointers]
                    │   │       │   │   │   ╰── Constant Int [1]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── Constant Int [303]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <167>  [!=]
                    │   │       ├── <164> Subscript
                    │   │       │   ├── <162> Subscript
                    │   │       │   │   ├── <160> Subscript
                    │   │       │   │   │   ├── <158> Var [array_of_pointers]
                    │   │       │   │   │   ╰── Constant Int [2]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── Constant Int [203]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_assign_to_nested_subscript() {
    let src = r#"
        long long_nested_arr[2][3] = {{1, 2, 3}, {4, 5, 6}};
        double dbl_nested_arr[3][2] = {{100.0, 101.0}, {102.0, 103.0}, {104.0, 105.0}};
        unsigned unsigned_index = 10;
        int main(void) {
            if ((long_nested_arr[1][unsigned_index - 8] *= -1) != -6) {
                return 1;
            }
            if (long_nested_arr[1][2] != -6) {
                return 2;
            }
            for (int i = 0; i < 2; i += 1) {
                for (int j = 0; j < 3; j += 1) {
                    if (i == 1 && j == 2) {
                        break;
                    }
                    long expected = i * 3 + j + 1;
                    if (long_nested_arr[i][j] != expected) {
                        return 3;
                    }
                }
            }
            if ((dbl_nested_arr[1][1] += 100.0) != 203.0) {
                return 4;
            }
            for (int i = 0; i < 3; i += 1) {
                for (int j = 0; j < 2; j += 1) {
                    if (i == 1 && j == 1) {
                        continue;
                    }
                    int expected = 100 + i * 2 + j;
                    if (dbl_nested_arr[i][j] != expected) {
                        return 5;
                    }
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── long_nested_arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 2
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Long
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Compound
            │           │   ├── Constant Int [1]
            │           │   ├── Constant Int [2]
            │           │   ╰── Constant Int [3]
            │           ╰── Compound
            │               ├── Constant Int [4]
            │               ├── Constant Int [5]
            │               ╰── Constant Int [6]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── dbl_nested_arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Compound
            │           │   ├── Constant Double [+1e2]
            │           │   ╰── Constant Double [+1.01e2]
            │           ├── Compound
            │           │   ├── Constant Double [+1.02e2]
            │           │   ╰── Constant Double [+1.03e2]
            │           ╰── Compound
            │               ├── Constant Double [+1.04e2]
            │               ╰── Constant Double [+1.05e2]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── unsigned_index
            │   ├── Type
            │   │   ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Constant Int [10]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <78>  [!=]
                    │   │       ├── <73> Assign [*=]
                    │   │       │   ├── <67> Subscript
                    │   │       │   │   ├── <61> Subscript
                    │   │       │   │   │   ├── <59> Var [long_nested_arr]
                    │   │       │   │   │   ╰── Constant Int [1]
                    │   │       │   │   ╰── <66>  [-]
                    │   │       │   │       ├── <63> Var [unsigned_index]
                    │   │       │   │       ╰── Constant Int [8]
                    │   │       │   ╰── <71> Unary [-]
                    │   │       │       ╰── Constant Int [1]
                    │   │       ╰── <77> Unary [-]
                    │   │           ╰── Constant Int [6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <94>  [!=]
                    │   │       ├── <89> Subscript
                    │   │       │   ├── <87> Subscript
                    │   │       │   │   ├── <85> Var [long_nested_arr]
                    │   │       │   │   ╰── Constant Int [1]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── <93> Unary [-]
                    │   │           ╰── Constant Int [6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <111>  [<]
                    │   │       ├── <108> Var [i]
                    │   │       ╰── Constant Int [2]
                    │   ├── Condition
                    │   │   ╰── <116> Assign [+=]
                    │   │       ├── <113> Var [i]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── For
                    │           ├── Init
                    │           │   ╰── VarDeclaration
                    │           │       ├── Name
                    │           │       │   ╰── j
                    │           │       ├── Type
                    │           │       │   ╰── Int
                    │           │       ╰── Initializer
                    │           │           ╰── Constant Int [0]
                    │           ├── Condition
                    │           │   ╰── <128>  [<]
                    │           │       ├── <125> Var [j]
                    │           │       ╰── Constant Int [3]
                    │           ├── Condition
                    │           │   ╰── <133> Assign [+=]
                    │           │       ├── <130> Var [j]
                    │           │       ╰── Constant Int [1]
                    │           ╰── Block
                    │               ├── If
                    │               │   ├── Condition
                    │               │   │   ╰── <145>  [&&]
                    │               │   │       ├── <138>  [==]
                    │               │   │       │   ├── <135> Var [i]
                    │               │   │       │   ╰── Constant Int [1]
                    │               │   │       ╰── <144>  [==]
                    │               │   │           ├── <141> Var [j]
                    │               │   │           ╰── Constant Int [2]
                    │               │   ╰── Then
                    │               │       ╰── Block
                    │               │           ╰── Break
                    │               ├── VarDeclaration
                    │               │   ├── Name
                    │               │   │   ╰── expected
                    │               │   ├── Type
                    │               │   │   ╰── Long
                    │               │   ╰── Initializer
                    │               │       ╰── <164>  [+]
                    │               │           ├── <161>  [+]
                    │               │           │   ├── <157>  [*]
                    │               │           │   │   ├── <154> Var [i]
                    │               │           │   │   ╰── Constant Int [3]
                    │               │           │   ╰── <160> Var [j]
                    │               │           ╰── Constant Int [1]
                    │               ╰── If
                    │                   ├── Condition
                    │                   │   ╰── <178>  [!=]
                    │                   │       ├── <174> Subscript
                    │                   │       │   ├── <171> Subscript
                    │                   │       │   │   ├── <168> Var [long_nested_arr]
                    │                   │       │   │   ╰── <170> Var [i]
                    │                   │       │   ╰── <173> Var [j]
                    │                   │       ╰── <177> Var [expected]
                    │                   ╰── Then
                    │                       ╰── Block
                    │                           ╰── Return
                    │                               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <202>  [!=]
                    │   │       ├── <199> Assign [+=]
                    │   │       │   ├── <195> Subscript
                    │   │       │   │   ├── <193> Subscript
                    │   │       │   │   │   ├── <191> Var [dbl_nested_arr]
                    │   │       │   │   │   ╰── Constant Int [1]
                    │   │       │   │   ╰── Constant Int [1]
                    │   │       │   ╰── Constant Double [+1e2]
                    │   │       ╰── Constant Double [+2.03e2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <219>  [<]
                    │   │       ├── <216> Var [i]
                    │   │       ╰── Constant Int [3]
                    │   ├── Condition
                    │   │   ╰── <224> Assign [+=]
                    │   │       ├── <221> Var [i]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── For
                    │           ├── Init
                    │           │   ╰── VarDeclaration
                    │           │       ├── Name
                    │           │       │   ╰── j
                    │           │       ├── Type
                    │           │       │   ╰── Int
                    │           │       ╰── Initializer
                    │           │           ╰── Constant Int [0]
                    │           ├── Condition
                    │           │   ╰── <236>  [<]
                    │           │       ├── <233> Var [j]
                    │           │       ╰── Constant Int [2]
                    │           ├── Condition
                    │           │   ╰── <241> Assign [+=]
                    │           │       ├── <238> Var [j]
                    │           │       ╰── Constant Int [1]
                    │           ╰── Block
                    │               ├── If
                    │               │   ├── Condition
                    │               │   │   ╰── <253>  [&&]
                    │               │   │       ├── <246>  [==]
                    │               │   │       │   ├── <243> Var [i]
                    │               │   │       │   ╰── Constant Int [1]
                    │               │   │       ╰── <252>  [==]
                    │               │   │           ├── <249> Var [j]
                    │               │   │           ╰── Constant Int [1]
                    │               │   ╰── Then
                    │               │       ╰── Block
                    │               │           ╰── Continue
                    │               ├── VarDeclaration
                    │               │   ├── Name
                    │               │   │   ╰── expected
                    │               │   ├── Type
                    │               │   │   ╰── Int
                    │               │   ╰── Initializer
                    │               │       ╰── <272>  [+]
                    │               │           ├── <268>  [+]
                    │               │           │   ├── Constant Int [100]
                    │               │           │   ╰── <267>  [*]
                    │               │           │       ├── <264> Var [i]
                    │               │           │       ╰── Constant Int [2]
                    │               │           ╰── <271> Var [j]
                    │               ╰── If
                    │                   ├── Condition
                    │                   │   ╰── <286>  [!=]
                    │                   │       ├── <282> Subscript
                    │                   │       │   ├── <279> Subscript
                    │                   │       │   │   ├── <276> Var [dbl_nested_arr]
                    │                   │       │   │   ╰── <278> Var [i]
                    │                   │       │   ╰── <281> Var [j]
                    │                   │       ╰── <285> Var [expected]
                    │                   ╰── Then
                    │                       ╰── Block
                    │                           ╰── Return
                    │                               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_assign_to_subscripted_val() {
    let src = r#"
        unsigned unsigned_arr[4] = {4294967295U, 4294967294U, 4294967293U, 4294967292U};
        int idx = 2;
        long long_idx = 1;
        int main(void) {
            long_idx = -long_idx;
            unsigned_arr[1] += 2;
            if (unsigned_arr[1]) {
                return 1;
            }
            unsigned_arr[idx] -= 10.0;
            if (unsigned_arr[idx] != 4294967283U) {
                return 2;
            }
            unsigned *unsigned_ptr = unsigned_arr + 4;
            unsigned_ptr[long_idx] /= 10;
            if (unsigned_arr[3] != 429496729U) {
                return 3;
            }
            unsigned_ptr[long_idx *= 2] *= unsigned_arr[0];
            if (unsigned_arr[2] != 13) {
                return 4;
            }
            if ((unsigned_arr[idx + long_idx] %= 10) != 5) {
                return 5;
            }
            if (unsigned_arr[0] != 5u) {
                return 6;
            }
            if (unsigned_arr[1]) {
                return 7;
            }
            if (unsigned_arr[2] != 13) {
                return 8;
            }
            if (unsigned_arr[3] != 429496729U) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── unsigned_arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 4
            │   │       ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Constant UInt [4294967295]
            │           ├── Constant UInt [4294967294]
            │           ├── Constant UInt [4294967293]
            │           ╰── Constant UInt [4294967292]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── idx
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [2]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── long_idx
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── <39> Assign [=]
                    │   ├── <33> Var [long_idx]
                    │   ╰── <38> Unary [-]
                    │       ╰── <37> Var [long_idx]
                    ├── <47> Assign [+=]
                    │   ├── <44> Subscript
                    │   │   ├── <42> Var [unsigned_arr]
                    │   │   ╰── Constant Int [1]
                    │   ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <52> Subscript
                    │   │       ├── <50> Var [unsigned_arr]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <65> Assign [-=]
                    │   ├── <62> Subscript
                    │   │   ├── <59> Var [unsigned_arr]
                    │   │   ╰── <61> Var [idx]
                    │   ╰── Constant Double [+1e1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <74>  [!=]
                    │   │       ├── <71> Subscript
                    │   │       │   ├── <68> Var [unsigned_arr]
                    │   │       │   ╰── <70> Var [idx]
                    │   │       ╰── Constant UInt [4294967283]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── unsigned_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── <88>  [+]
                    │           ├── <85> Var [unsigned_arr]
                    │           ╰── Constant Int [4]
                    ├── <98> Assign [/=]
                    │   ├── <95> Subscript
                    │   │   ├── <92> Var [unsigned_ptr]
                    │   │   ╰── <94> Var [long_idx]
                    │   ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <106>  [!=]
                    │   │       ├── <103> Subscript
                    │   │       │   ├── <101> Var [unsigned_arr]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── Constant UInt [429496729]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <125> Assign [*=]
                    │   ├── <119> Subscript
                    │   │   ├── <113> Var [unsigned_ptr]
                    │   │   ╰── <118> Assign [*=]
                    │   │       ├── <115> Var [long_idx]
                    │   │       ╰── Constant Int [2]
                    │   ╰── <124> Subscript
                    │       ├── <122> Var [unsigned_arr]
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <133>  [!=]
                    │   │       ├── <130> Subscript
                    │   │       │   ├── <128> Var [unsigned_arr]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── Constant Int [13]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <154>  [!=]
                    │   │       ├── <151> Assign [&=]
                    │   │       │   ├── <147> Subscript
                    │   │       │   │   ├── <140> Var [unsigned_arr]
                    │   │       │   │   ╰── <146>  [+]
                    │   │       │   │       ├── <142> Var [idx]
                    │   │       │   │       ╰── <145> Var [long_idx]
                    │   │       │   ╰── Constant Int [10]
                    │   │       ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <166>  [!=]
                    │   │       ├── <163> Subscript
                    │   │       │   ├── <161> Var [unsigned_arr]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Constant UInt [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <175> Subscript
                    │   │       ├── <173> Var [unsigned_arr]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <187>  [!=]
                    │   │       ├── <184> Subscript
                    │   │       │   ├── <182> Var [unsigned_arr]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── Constant Int [13]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <199>  [!=]
                    │   │       ├── <196> Subscript
                    │   │       │   ├── <194> Var [unsigned_arr]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── Constant UInt [429496729]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_bitwise_subscript() {
    let src = r#"
        
        int main(void) {
            unsigned long arr[4] = {
                2147483648l,
                18446744069414584320ul,
                9223372036854775808ul,
                1085102592571150095l
            };
            arr[1] &= arr[3];
            if (arr[1] != 1085102592318504960 ) {
                return 1;
            }
            arr[0] |= arr[1];
            if (arr[0] != 1085102594465988608ul) {
                return 2;
            }
            arr[2] ^= arr[3];
            if (arr[2] != 10308474629425925903ul) {
                return 3;
            }
            arr[3] >>= 25;
            if (arr[3] != 32338577287l) {
                return 4;
            }
            arr[1] <<= 12;
            if (arr[1] != 17361640446303928320ul) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Long [2147483648]
                    │           ├── Constant ULong [18446744069414584320]
                    │           ├── Constant ULong [9223372036854775808]
                    │           ╰── Constant Long [1085102592571150095]
                    ├── <29> Assign [&=]
                    │   ├── <23> Subscript
                    │   │   ├── <21> Var [arr]
                    │   │   ╰── Constant Int [1]
                    │   ╰── <28> Subscript
                    │       ├── <26> Var [arr]
                    │       ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <37>  [!=]
                    │   │       ├── <34> Subscript
                    │   │       │   ├── <32> Var [arr]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── Constant Long [1085102592318504960]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <52> Assign [|=]
                    │   ├── <46> Subscript
                    │   │   ├── <44> Var [arr]
                    │   │   ╰── Constant Int [0]
                    │   ╰── <51> Subscript
                    │       ├── <49> Var [arr]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <60>  [!=]
                    │   │       ├── <57> Subscript
                    │   │       │   ├── <55> Var [arr]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Constant ULong [1085102594465988608]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── <75> Assign [^=]
                    │   ├── <69> Subscript
                    │   │   ├── <67> Var [arr]
                    │   │   ╰── Constant Int [2]
                    │   ╰── <74> Subscript
                    │       ├── <72> Var [arr]
                    │       ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <83>  [!=]
                    │   │       ├── <80> Subscript
                    │   │       │   ├── <78> Var [arr]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── Constant ULong [10308474629425925903]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── <95> Assign [>>=]
                    │   ├── <92> Subscript
                    │   │   ├── <90> Var [arr]
                    │   │   ╰── Constant Int [3]
                    │   ╰── Constant Int [25]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <103>  [!=]
                    │   │       ├── <100> Subscript
                    │   │       │   ├── <98> Var [arr]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── Constant Long [32338577287]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── <115> Assign [<<=]
                    │   ├── <112> Subscript
                    │   │   ├── <110> Var [arr]
                    │   │   ╰── Constant Int [1]
                    │   ╰── Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <123>  [!=]
                    │   │       ├── <120> Subscript
                    │   │       │   ├── <118> Var [arr]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── Constant ULong [17361640446303928320]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_lval_evaluated_once() {
    let src = r#"
        int get_call_count(void) {
            static int count = 0;
            count += 1;
            return count;
        }
        int main(void) {
            int arr[4] = {10, 11, 12, 13};
            if (arr[get_call_count()] != 11) {
                return 1;
            }
            int *end_ptr = arr + 4;
            if ((end_ptr - 1)[-get_call_count()] != 11) {
                return 2;
            }
            if (get_call_count() != 3) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [get_call_count]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── count
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [0]
            │       │   ╰── Static
            │       ├── <16> Assign [+=]
            │       │   ├── <13> Var [count]
            │       │   ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── <19> Var [count]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [10]
                    │           ├── Constant Int [11]
                    │           ├── Constant Int [12]
                    │           ╰── Constant Int [13]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <49>  [!=]
                    │   │       ├── <46> Subscript
                    │   │       │   ├── <43> Var [arr]
                    │   │       │   ╰── <45> FunctionCall [get_call_count]
                    │   │       ╰── Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── end_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <63>  [+]
                    │           ├── <60> Var [arr]
                    │           ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <79>  [!=]
                    │   │       ├── <76> Subscript
                    │   │       │   ├── <71>  [-]
                    │   │       │   │   ├── <67> Var [end_ptr]
                    │   │       │   │   ╰── Constant Int [1]
                    │   │       │   ╰── <75> Unary [-]
                    │   │       │       ╰── <74> FunctionCall [get_call_count]
                    │   │       ╰── Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <89>  [!=]
                    │   │       ├── <86> FunctionCall [get_call_count]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_nested_pointer_assignment() {
    let src = r#"
        static long nested_arr[3][4][5] = {{{10, 9, 8}, {1, 2}}, {{100, 99, 98}}};
        int main(void) {
            long(*outer_ptr)[4][5] = nested_arr;
            outer_ptr += 1;
            if (outer_ptr != nested_arr + 1) {
                return 1;
            }
            if (outer_ptr[0][0][0] != 100) {
                return 2;
            }
            long(*inner_ptr)[5] =
                nested_arr[0] + 4;
            inner_ptr -= 3;
            if (inner_ptr[0][1] != 2) {
                return 3;
            }
            unsigned long idx = nested_arr[0][0][0] - 9;
            if ((inner_ptr += idx) != &nested_arr[0][2]) {
                return 4;
            }
            if ((inner_ptr[-2][1] != 9)) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── nested_arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Array
            │   │           ├── 4
            │   │           ╰── Array
            │   │               ├── 5
            │   │               ╰── Long
            │   ├── Initializer
            │   │   ╰── Compound
            │   │       ├── Compound
            │   │       │   ├── Compound
            │   │       │   │   ├── Constant Int [10]
            │   │       │   │   ├── Constant Int [9]
            │   │       │   │   ╰── Constant Int [8]
            │   │       │   ╰── Compound
            │   │       │       ├── Constant Int [1]
            │   │       │       ╰── Constant Int [2]
            │   │       ╰── Compound
            │   │           ╰── Compound
            │   │               ├── Constant Int [100]
            │   │               ├── Constant Int [99]
            │   │               ╰── Constant Int [98]
            │   ╰── Static
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── outer_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Array
                    │   │           ├── 4
                    │   │           ╰── Array
                    │   │               ├── 5
                    │   │               ╰── Long
                    │   ╰── Initializer
                    │       ╰── <48> Var [nested_arr]
                    ├── <55> Assign [+=]
                    │   ├── <52> Var [outer_ptr]
                    │   ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <65>  [!=]
                    │   │       ├── <58> Var [outer_ptr]
                    │   │       ╰── <64>  [+]
                    │   │           ├── <61> Var [nested_arr]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <81>  [!=]
                    │   │       ├── <78> Subscript
                    │   │       │   ├── <76> Subscript
                    │   │       │   │   ├── <74> Subscript
                    │   │       │   │   │   ├── <72> Var [outer_ptr]
                    │   │       │   │   │   ╰── Constant Int [0]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Constant Int [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── inner_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Array
                    │   │           ├── 5
                    │   │           ╰── Long
                    │   ╰── Initializer
                    │       ╰── <100>  [+]
                    │           ├── <97> Subscript
                    │           │   ├── <95> Var [nested_arr]
                    │           │   ╰── Constant Int [0]
                    │           ╰── Constant Int [4]
                    ├── <107> Assign [-=]
                    │   ├── <104> Var [inner_ptr]
                    │   ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <117>  [!=]
                    │   │       ├── <114> Subscript
                    │   │       │   ├── <112> Subscript
                    │   │       │   │   ├── <110> Var [inner_ptr]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── idx
                    │   ├── Type
                    │   │   ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <136>  [-]
                    │           ├── <133> Subscript
                    │           │   ├── <131> Subscript
                    │           │   │   ├── <129> Subscript
                    │           │   │   │   ├── <127> Var [nested_arr]
                    │           │   │   │   ╰── Constant Int [0]
                    │           │   │   ╰── Constant Int [0]
                    │           │   ╰── Constant Int [0]
                    │           ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <154>  [!=]
                    │   │       ├── <145> Assign [+=]
                    │   │       │   ├── <140> Var [inner_ptr]
                    │   │       │   ╰── <143> Var [idx]
                    │   │       ╰── <153> AddressOf
                    │   │           ╰── <152> Subscript
                    │   │               ├── <150> Subscript
                    │   │               │   ├── <148> Var [nested_arr]
                    │   │               │   ╰── Constant Int [0]
                    │   │               ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <171>  [!=]
                    │   │       ├── <167> Subscript
                    │   │       │   ├── <165> Subscript
                    │   │       │   │   ├── <161> Var [inner_ptr]
                    │   │       │   │   ╰── <164> Unary [-]
                    │   │       │   │       ╰── Constant Int [2]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── Constant Int [9]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_compound_pointer_assignment() {
    let src = r#"
        int i = 4;
        int int_array(void) {
            int arr[6] = {1, 2, 3, 4, 5, 6};
            int *ptr = arr;
            if (*(ptr += 5) != 6) {
                return 1;
            }
            if (ptr[0] != 6) {
                 return 2;
            }
            if (ptr != arr + 5) {
                return 3;
            }
            if (*(ptr -=3) != 3) {
                return 4;
            }
            if (ptr[0] != 3) {
                return 5;
            }
            if (ptr != arr + 2) {
                return 6;
            }
            if ((ptr += i - 1) != arr + 5) {
                return 7;
            }
            if (*ptr != 6) {
                return 8;
            }
            if ((ptr -= (4294967295U + i)) != arr + 2) {
                return 9;
            }
            if (*ptr != 3) {
                return 10;
            }
            long l = 9223372036854775807l;
            if ((ptr += l - 9223372036854775806l) != arr + 3) {
                return 11;
            }
            if (*ptr != 4) {
                return 12;
            }
            return 0;
        }
        int double_array(void) {
            static double arr[6] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0};
            double *ptr = arr;
            if (*(ptr += 5) != 6) {
                return 1;
            }
            if (ptr[0] != 6) {
                 return 2;
            }
            if (ptr != arr + 5) {
                return 3;
            }
            if (*(ptr -=3) != 3) {
                return 4;
            }
            if (ptr[0] != 3) {
                return 5;
            }
            if (ptr != arr + 2) {
                return 6;
            }
            if ((ptr += i - 1) != arr + 5) {
                return 7;
            }
            if (*ptr != 6) {
                return 8;
            }
            if ((ptr -= (4294967295U + i)) != arr + 2) {
                return 9;
            }
            if (*ptr != 3) {
                return 10;
            }
            long l = 9223372036854775807l;
            if ((ptr += l - 9223372036854775806l) != arr + 3) {
                return 11;
            }
            if (*ptr != 4) {
                return 12;
            }
            return 0;
        }
        int main(void) {
            int result;
            if ((result = int_array())) {
                return result;
            }
            if ((result = double_array())) {
                return result + 12;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [4]
            ├── Function [int_array]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 6
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [1]
            │       │           ├── Constant Int [2]
            │       │           ├── Constant Int [3]
            │       │           ├── Constant Int [4]
            │       │           ├── Constant Int [5]
            │       │           ╰── Constant Int [6]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <35> Var [arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <47>  [!=]
            │       │   │       ├── <44> Dereference
            │       │   │       │   ╰── <43> Assign [+=]
            │       │   │       │       ├── <39> Var [ptr]
            │       │   │       │       ╰── Constant Int [5]
            │       │   │       ╰── Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <59>  [!=]
            │       │   │       ├── <56> Subscript
            │       │   │       │   ├── <54> Var [ptr]
            │       │   │       │   ╰── Constant Int [0]
            │       │   │       ╰── Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <73>  [!=]
            │       │   │       ├── <66> Var [ptr]
            │       │   │       ╰── <72>  [+]
            │       │   │           ├── <69> Var [arr]
            │       │   │           ╰── Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <88>  [!=]
            │       │   │       ├── <85> Dereference
            │       │   │       │   ╰── <84> Assign [-=]
            │       │   │       │       ├── <80> Var [ptr]
            │       │   │       │       ╰── Constant Int [3]
            │       │   │       ╰── Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <100>  [!=]
            │       │   │       ├── <97> Subscript
            │       │   │       │   ├── <95> Var [ptr]
            │       │   │       │   ╰── Constant Int [0]
            │       │   │       ╰── Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <114>  [!=]
            │       │   │       ├── <107> Var [ptr]
            │       │   │       ╰── <113>  [+]
            │       │   │           ├── <110> Var [arr]
            │       │   │           ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <136>  [!=]
            │       │   │       ├── <129> Assign [+=]
            │       │   │       │   ├── <121> Var [ptr]
            │       │   │       │   ╰── <127>  [-]
            │       │   │       │       ├── <124> Var [i]
            │       │   │       │       ╰── Constant Int [1]
            │       │   │       ╰── <135>  [+]
            │       │   │           ├── <132> Var [arr]
            │       │   │           ╰── Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [7]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <147>  [!=]
            │       │   │       ├── <144> Dereference
            │       │   │       │   ╰── <143> Var [ptr]
            │       │   │       ╰── Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [8]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <170>  [!=]
            │       │   │       ├── <163> Assign [-=]
            │       │   │       │   ├── <154> Var [ptr]
            │       │   │       │   ╰── <161>  [+]
            │       │   │       │       ├── Constant UInt [4294967295]
            │       │   │       │       ╰── <159> Var [i]
            │       │   │       ╰── <169>  [+]
            │       │   │           ├── <166> Var [arr]
            │       │   │           ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [9]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <181>  [!=]
            │       │   │       ├── <178> Dereference
            │       │   │       │   ╰── <177> Var [ptr]
            │       │   │       ╰── Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── Constant Long [9223372036854775807]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <209>  [!=]
            │       │   │       ├── <202> Assign [+=]
            │       │   │       │   ├── <194> Var [ptr]
            │       │   │       │   ╰── <200>  [-]
            │       │   │       │       ├── <197> Var [l]
            │       │   │       │       ╰── Constant Long [9223372036854775806]
            │       │   │       ╰── <208>  [+]
            │       │   │           ├── <205> Var [arr]
            │       │   │           ╰── Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [11]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <220>  [!=]
            │       │   │       ├── <217> Dereference
            │       │   │       │   ╰── <216> Var [ptr]
            │       │   │       ╰── Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [12]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [double_array]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 6
            │       │   │       ╰── Double
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── Constant Double [+1e0]
            │       │   │       ├── Constant Double [+2e0]
            │       │   │       ├── Constant Double [+3e0]
            │       │   │       ├── Constant Double [+4e0]
            │       │   │       ├── Constant Double [+5e0]
            │       │   │       ╰── Constant Double [+6e0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <259> Var [arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <271>  [!=]
            │       │   │       ├── <268> Dereference
            │       │   │       │   ╰── <267> Assign [+=]
            │       │   │       │       ├── <263> Var [ptr]
            │       │   │       │       ╰── Constant Int [5]
            │       │   │       ╰── Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <283>  [!=]
            │       │   │       ├── <280> Subscript
            │       │   │       │   ├── <278> Var [ptr]
            │       │   │       │   ╰── Constant Int [0]
            │       │   │       ╰── Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <297>  [!=]
            │       │   │       ├── <290> Var [ptr]
            │       │   │       ╰── <296>  [+]
            │       │   │           ├── <293> Var [arr]
            │       │   │           ╰── Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <312>  [!=]
            │       │   │       ├── <309> Dereference
            │       │   │       │   ╰── <308> Assign [-=]
            │       │   │       │       ├── <304> Var [ptr]
            │       │   │       │       ╰── Constant Int [3]
            │       │   │       ╰── Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <324>  [!=]
            │       │   │       ├── <321> Subscript
            │       │   │       │   ├── <319> Var [ptr]
            │       │   │       │   ╰── Constant Int [0]
            │       │   │       ╰── Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <338>  [!=]
            │       │   │       ├── <331> Var [ptr]
            │       │   │       ╰── <337>  [+]
            │       │   │           ├── <334> Var [arr]
            │       │   │           ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <360>  [!=]
            │       │   │       ├── <353> Assign [+=]
            │       │   │       │   ├── <345> Var [ptr]
            │       │   │       │   ╰── <351>  [-]
            │       │   │       │       ├── <348> Var [i]
            │       │   │       │       ╰── Constant Int [1]
            │       │   │       ╰── <359>  [+]
            │       │   │           ├── <356> Var [arr]
            │       │   │           ╰── Constant Int [5]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [7]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <371>  [!=]
            │       │   │       ├── <368> Dereference
            │       │   │       │   ╰── <367> Var [ptr]
            │       │   │       ╰── Constant Int [6]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [8]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <394>  [!=]
            │       │   │       ├── <387> Assign [-=]
            │       │   │       │   ├── <378> Var [ptr]
            │       │   │       │   ╰── <385>  [+]
            │       │   │       │       ├── Constant UInt [4294967295]
            │       │   │       │       ╰── <383> Var [i]
            │       │   │       ╰── <393>  [+]
            │       │   │           ├── <390> Var [arr]
            │       │   │           ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [9]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <405>  [!=]
            │       │   │       ├── <402> Dereference
            │       │   │       │   ╰── <401> Var [ptr]
            │       │   │       ╰── Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [10]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── l
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── Constant Long [9223372036854775807]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <433>  [!=]
            │       │   │       ├── <426> Assign [+=]
            │       │   │       │   ├── <418> Var [ptr]
            │       │   │       │   ╰── <424>  [-]
            │       │   │       │       ├── <421> Var [l]
            │       │   │       │       ╰── Constant Long [9223372036854775806]
            │       │   │       ╰── <432>  [+]
            │       │   │           ├── <429> Var [arr]
            │       │   │           ╰── Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [11]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <444>  [!=]
            │       │   │       ├── <441> Dereference
            │       │   │       │   ╰── <440> Var [ptr]
            │       │   │       ╰── Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [12]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ╰── Type
                    │       ╰── Int
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <468> Assign [=]
                    │   │       ├── <463> Var [result]
                    │   │       ╰── <466> FunctionCall [int_array]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <470> Var [result]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <481> Assign [=]
                    │   │       ├── <476> Var [result]
                    │   │       ╰── <479> FunctionCall [double_array]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <486>  [+]
                    │                   ├── <483> Var [result]
                    │                   ╰── Constant Int [12]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_incr_and_decr_nested_pointers() {
    let src = r#"
        
        int main(void) {
            long arr[2][3][4] = {
                {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}},
                {{13, 14, 15, 16}, {17, 18, 19, 20}, {21, 22, 23, 24}}};
            long (*outer_ptr)[3][4] = arr + 1;
            if (outer_ptr-- != &arr[1]) {
                return 1;
            }
            if (outer_ptr[0][1] != arr[0][1]) {
                return 2;
            }
            if ((++outer_ptr)[0][2][3] != 24) {
                return 3;
            }
            if (outer_ptr[0][2][3] != 24) {
                return 4;
            }
            long (*inner_ptr)[4] = arr[0] + 1;
            if (inner_ptr++[0][2] != 7) {
                return 5;
            }
            if (inner_ptr[0][2] != 11) {
                return 6;
            }
            if ((--inner_ptr)[0][1] != 6) {
                return 7;
            }
            long *scalar_ptr = arr[1][2];
            if (scalar_ptr--[2] != 23) {
                return 8;
            }
            if (scalar_ptr[2] != 22) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 2
                    │   │       ╰── Array
                    │   │           ├── 3
                    │   │           ╰── Array
                    │   │               ├── 4
                    │   │               ╰── Long
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── Compound
                    │           │   │   ├── Constant Int [1]
                    │           │   │   ├── Constant Int [2]
                    │           │   │   ├── Constant Int [3]
                    │           │   │   ╰── Constant Int [4]
                    │           │   ├── Compound
                    │           │   │   ├── Constant Int [5]
                    │           │   │   ├── Constant Int [6]
                    │           │   │   ├── Constant Int [7]
                    │           │   │   ╰── Constant Int [8]
                    │           │   ╰── Compound
                    │           │       ├── Constant Int [9]
                    │           │       ├── Constant Int [10]
                    │           │       ├── Constant Int [11]
                    │           │       ╰── Constant Int [12]
                    │           ╰── Compound
                    │               ├── Compound
                    │               │   ├── Constant Int [13]
                    │               │   ├── Constant Int [14]
                    │               │   ├── Constant Int [15]
                    │               │   ╰── Constant Int [16]
                    │               ├── Compound
                    │               │   ├── Constant Int [17]
                    │               │   ├── Constant Int [18]
                    │               │   ├── Constant Int [19]
                    │               │   ╰── Constant Int [20]
                    │               ╰── Compound
                    │                   ├── Constant Int [21]
                    │                   ├── Constant Int [22]
                    │                   ├── Constant Int [23]
                    │                   ╰── Constant Int [24]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── outer_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Array
                    │   │           ├── 3
                    │   │           ╰── Array
                    │   │               ├── 4
                    │   │               ╰── Long
                    │   ╰── Initializer
                    │       ╰── <85>  [+]
                    │           ├── <82> Var [arr]
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <98>  [!=]
                    │   │       ├── <91> Postfix [--]
                    │   │       │   ╰── <89> Var [outer_ptr]
                    │   │       ╰── <97> AddressOf
                    │   │           ╰── <96> Subscript
                    │   │               ├── <94> Var [arr]
                    │   │               ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <117>  [!=]
                    │   │       ├── <109> Subscript
                    │   │       │   ├── <107> Subscript
                    │   │       │   │   ├── <105> Var [outer_ptr]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── <116> Subscript
                    │   │           ├── <114> Subscript
                    │   │           │   ├── <112> Var [arr]
                    │   │           │   ╰── Constant Int [0]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <136>  [!=]
                    │   │       ├── <133> Subscript
                    │   │       │   ├── <131> Subscript
                    │   │       │   │   ├── <129> Subscript
                    │   │       │   │   │   ├── <127> Unary [++]
                    │   │       │   │   │   │   ╰── <125> Var [outer_ptr]
                    │   │       │   │   │   ╰── Constant Int [0]
                    │   │       │   │   ╰── Constant Int [2]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── Constant Int [24]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <152>  [!=]
                    │   │       ├── <149> Subscript
                    │   │       │   ├── <147> Subscript
                    │   │       │   │   ├── <145> Subscript
                    │   │       │   │   │   ├── <143> Var [outer_ptr]
                    │   │       │   │   │   ╰── Constant Int [0]
                    │   │       │   │   ╰── Constant Int [2]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── Constant Int [24]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── inner_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Array
                    │   │           ├── 4
                    │   │           ╰── Long
                    │   ╰── Initializer
                    │       ╰── <171>  [+]
                    │           ├── <168> Subscript
                    │           │   ├── <166> Var [arr]
                    │           │   ╰── Constant Int [0]
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <184>  [!=]
                    │   │       ├── <181> Subscript
                    │   │       │   ├── <179> Subscript
                    │   │       │   │   ├── <177> Postfix [++]
                    │   │       │   │   │   ╰── <175> Var [inner_ptr]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── Constant Int [7]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <198>  [!=]
                    │   │       ├── <195> Subscript
                    │   │       │   ├── <193> Subscript
                    │   │       │   │   ├── <191> Var [inner_ptr]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <215>  [!=]
                    │   │       ├── <212> Subscript
                    │   │       │   ├── <210> Subscript
                    │   │       │   │   ├── <208> Unary [--]
                    │   │       │   │   │   ╰── <206> Var [inner_ptr]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── Constant Int [6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── scalar_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── <230> Subscript
                    │           ├── <228> Subscript
                    │           │   ├── <226> Var [arr]
                    │           │   ╰── Constant Int [1]
                    │           ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <241>  [!=]
                    │   │       ├── <238> Subscript
                    │   │       │   ├── <236> Postfix [--]
                    │   │       │   │   ╰── <234> Var [scalar_ptr]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── Constant Int [23]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <253>  [!=]
                    │   │       ├── <250> Subscript
                    │   │       │   ├── <248> Var [scalar_ptr]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── Constant Int [22]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_incr_and_decr_pointers() {
    let src = r#"
        
        int main(void) {
            double x[3] = {0.0, 1.0, 2.0};
            double *ptr = x;
            if (++ptr != x + 1) {
                return 1;
            }
            if (*ptr != 1.0) {
                return 2;
            }
            if (ptr++ != x + 1) {
                return 3;
            }
            if (ptr != x + 2) {
                return 4;
            }
            if (*ptr != 2.0) {
                return 5;
            }
            if (--ptr != x + 1) {
                return 6;
            }
            if (*ptr != 1.0) {
                return 7;
            }
            if (ptr-- != x + 1) {
                return 8;
            }
            if (*ptr != 0.0) {
                return 9;
            }
            if (ptr != x) {
                return 10;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Double [+0e0]
                    │           ├── Constant Double [+1e0]
                    │           ╰── Constant Double [+2e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── <23> Var [x]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <36>  [!=]
                    │   │       ├── <29> Unary [++]
                    │   │       │   ╰── <28> Var [ptr]
                    │   │       ╰── <35>  [+]
                    │   │           ├── <32> Var [x]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <47>  [!=]
                    │   │       ├── <44> Dereference
                    │   │       │   ╰── <43> Var [ptr]
                    │   │       ╰── Constant Double [+1e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <63>  [!=]
                    │   │       ├── <56> Postfix [++]
                    │   │       │   ╰── <54> Var [ptr]
                    │   │       ╰── <62>  [+]
                    │   │           ├── <59> Var [x]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <77>  [!=]
                    │   │       ├── <70> Var [ptr]
                    │   │       ╰── <76>  [+]
                    │   │           ├── <73> Var [x]
                    │   │           ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <88>  [!=]
                    │   │       ├── <85> Dereference
                    │   │       │   ╰── <84> Var [ptr]
                    │   │       ╰── Constant Double [+2e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <104>  [!=]
                    │   │       ├── <97> Unary [--]
                    │   │       │   ╰── <96> Var [ptr]
                    │   │       ╰── <103>  [+]
                    │   │           ├── <100> Var [x]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <115>  [!=]
                    │   │       ├── <112> Dereference
                    │   │       │   ╰── <111> Var [ptr]
                    │   │       ╰── Constant Double [+1e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <131>  [!=]
                    │   │       ├── <124> Postfix [--]
                    │   │       │   ╰── <122> Var [ptr]
                    │   │       ╰── <130>  [+]
                    │   │           ├── <127> Var [x]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <142>  [!=]
                    │   │       ├── <139> Dereference
                    │   │       │   ╰── <138> Var [ptr]
                    │   │       ╰── Constant Double [+0e0]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <153>  [!=]
                    │   │       ├── <149> Var [ptr]
                    │   │       ╰── <152> Var [x]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [10]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_incr_decr_subscripted_vals() {
    let src = r#"
        int i = 2;
        int j = 1;
        int k = 0;
        int main(void) {
            int arr[3][2][2] = {
                {{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}, {{9, 10}, {11, 12}}};
            if (arr[i][j][k]++ != 11) {
                return 1;
            }
            if (arr[i][j][k] != 12) {
                return 2;
            }
            if (++arr[--i][j--][++k] != 9) {
                return 3;
            }
            if (arr[i][j][k] != 6) {
                return 4;
            }
            if (--arr[i][j][k] != 5) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── i
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [2]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── j
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [1]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── k
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Array
                    │   │           ├── 2
                    │   │           ╰── Array
                    │   │               ├── 2
                    │   │               ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── Compound
                    │           │   │   ├── Constant Int [1]
                    │           │   │   ╰── Constant Int [2]
                    │           │   ╰── Compound
                    │           │       ├── Constant Int [3]
                    │           │       ╰── Constant Int [4]
                    │           ├── Compound
                    │           │   ├── Compound
                    │           │   │   ├── Constant Int [5]
                    │           │   │   ╰── Constant Int [6]
                    │           │   ╰── Compound
                    │           │       ├── Constant Int [7]
                    │           │       ╰── Constant Int [8]
                    │           ╰── Compound
                    │               ├── Compound
                    │               │   ├── Constant Int [9]
                    │               │   ╰── Constant Int [10]
                    │               ╰── Compound
                    │                   ├── Constant Int [11]
                    │                   ╰── Constant Int [12]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <82>  [!=]
                    │   │       ├── <79> Postfix [++]
                    │   │       │   ╰── <77> Subscript
                    │   │       │       ├── <74> Subscript
                    │   │       │       │   ├── <71> Subscript
                    │   │       │       │   │   ├── <68> Var [arr]
                    │   │       │       │   │   ╰── <70> Var [i]
                    │   │       │       │   ╰── <73> Var [j]
                    │   │       │       ╰── <76> Var [k]
                    │   │       ╰── Constant Int [11]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <101>  [!=]
                    │   │       ├── <98> Subscript
                    │   │       │   ├── <95> Subscript
                    │   │       │   │   ├── <92> Subscript
                    │   │       │   │   │   ├── <89> Var [arr]
                    │   │       │   │   │   ╰── <91> Var [i]
                    │   │       │   │   ╰── <94> Var [j]
                    │   │       │   ╰── <97> Var [k]
                    │   │       ╰── Constant Int [12]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <128>  [!=]
                    │   │       ├── <125> Unary [++]
                    │   │       │   ╰── <124> Subscript
                    │   │       │       ├── <119> Subscript
                    │   │       │       │   ├── <114> Subscript
                    │   │       │       │   │   ├── <109> Var [arr]
                    │   │       │       │   │   ╰── <113> Unary [--]
                    │   │       │       │   │       ╰── <112> Var [i]
                    │   │       │       │   ╰── <118> Postfix [--]
                    │   │       │       │       ╰── <116> Var [j]
                    │   │       │       ╰── <123> Unary [++]
                    │   │       │           ╰── <122> Var [k]
                    │   │       ╰── Constant Int [9]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <147>  [!=]
                    │   │       ├── <144> Subscript
                    │   │       │   ├── <141> Subscript
                    │   │       │   │   ├── <138> Subscript
                    │   │       │   │   │   ├── <135> Var [arr]
                    │   │       │   │   │   ╰── <137> Var [i]
                    │   │       │   │   ╰── <140> Var [j]
                    │   │       │   ╰── <143> Var [k]
                    │   │       ╰── Constant Int [6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <168>  [!=]
                    │   │       ├── <165> Unary [--]
                    │   │       │   ╰── <164> Subscript
                    │   │       │       ├── <161> Subscript
                    │   │       │       │   ├── <158> Subscript
                    │   │       │       │   │   ├── <155> Var [arr]
                    │   │       │       │   │   ╰── <157> Var [i]
                    │   │       │       │   ╰── <160> Var [j]
                    │   │       │       ╰── <163> Var [k]
                    │   │       ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_extra_credit_postfix_prefix_precedence() {
    let src = r#"
        
        int idx = 3;
        int main(void) {
            int arr[5] = {1, 2, 3, 4, 5};
            int *ptr = arr + 1;
            int result = ++ptr--[idx];
            if (result != 6) {
                return 1;
            }
            if (*ptr != 1) {
                return 2;
            }
            if (ptr != arr) {
                return 3;
            }
            if (*ptr++ != 1) {
                return 4;
            }
            if (*ptr != 2) {
                return 5;
            }
            for (int i = 0; i < 4; i++) {
                if (arr[i] != i + 1) {
                    return 6;
                }
            }
            if (arr[4] != 6) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── idx
            │   ├── Type
            │   │   ╰── Int
            │   ╰── Initializer
            │       ╰── Constant Int [3]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 5
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ├── Constant Int [3]
                    │           ├── Constant Int [4]
                    │           ╰── Constant Int [5]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <36>  [+]
                    │           ├── <33> Var [arr]
                    │           ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── result
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <50> Unary [++]
                    │           ╰── <49> Subscript
                    │               ├── <46> Postfix [--]
                    │               │   ╰── <44> Var [ptr]
                    │               ╰── <48> Var [idx]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <57>  [!=]
                    │   │       ├── <54> Var [result]
                    │   │       ╰── Constant Int [6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <68>  [!=]
                    │   │       ├── <65> Dereference
                    │   │       │   ╰── <64> Var [ptr]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <79>  [!=]
                    │   │       ├── <75> Var [ptr]
                    │   │       ╰── <78> Var [arr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <92>  [!=]
                    │   │       ├── <89> Dereference
                    │   │       │   ╰── <88> Postfix [++]
                    │   │       │       ╰── <86> Var [ptr]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <103>  [!=]
                    │   │       ├── <100> Dereference
                    │   │       │   ╰── <99> Var [ptr]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <120>  [<]
                    │   │       ├── <117> Var [i]
                    │   │       ╰── Constant Int [4]
                    │   ├── Condition
                    │   │   ╰── <124> Postfix [++]
                    │   │       ╰── <122> Var [i]
                    │   ╰── Block
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <136>  [!=]
                    │           │       ├── <129> Subscript
                    │           │       │   ├── <126> Var [arr]
                    │           │       │   ╰── <128> Var [i]
                    │           │       ╰── <135>  [+]
                    │           │           ├── <132> Var [i]
                    │           │           ╰── Constant Int [1]
                    │           ╰── Then
                    │               ╰── Block
                    │                   ╰── Return
                    │                       ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <151>  [!=]
                    │   │       ├── <148> Subscript
                    │   │       │   ├── <146> Var [arr]
                    │   │       │   ╰── Constant Int [4]
                    │   │       ╰── Constant Int [6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_initialization_automatic() {
    let src = r#"
        int test_simple(void) {
            unsigned long arr[3] = {18446744073709551615UL, 9223372036854775807UL,
                                    100ul};
            return (arr[0] == 18446744073709551615UL &&
                    arr[1] == 9223372036854775807UL && arr[2] == 100ul);
        }
        int test_partial(void) {
            double arr[5] = {1.0, 123e4};
            return (arr[0] == 1.0 && arr[1] == 123e4 && !arr[2] && !arr[3] && !arr[4]);
        }
        int test_non_constant(long negative_7billion, int *ptr) {
            *ptr = 1;
            extern int three(void);
            long var = negative_7billion * three();
            long arr[5] = {
                negative_7billion,
                three() * 7l,
                -(long)*ptr,
                var + (negative_7billion ? 2 : 3)
            };
            return (arr[0] == -7000000000 && arr[1] == 21l && arr[2] == -1l &&
                    arr[3] == -20999999998l && arr[4] == 0l);
        }
        int three(void) {
            return 3;
        }
        long global_one = 1l;
        int test_type_conversion(int *ptr) {
            *ptr = -100;
            unsigned long arr[4] = {
                3458764513821589504.0,
                *ptr,
                (unsigned int)18446744073709551615UL,
                -global_one
            };
            return (arr[0] == 3458764513821589504ul &&
                    arr[1] == 18446744073709551516ul && arr[2] == 4294967295U &&
                    arr[3] == 18446744073709551615UL);
        }
        int test_preserve_stack(void) {
            int i = -1;
            int arr[3] = {global_one * 2l, global_one + three()};
            unsigned int u = 2684366905;
            if (i != -1) {
                return 0;
            }
            if (u != 2684366905) {
                return 0;
            }
            return (arr[0] == 2 && arr[1] == 4 && !arr[2]);
        }
        int main(void) {
            if (!test_simple()) {
                return 1;
            }
            if (!test_partial()) {
                return 2;
            }
            long negative_seven_billion = -7000000000l;
            int i = 0;
            if (!test_non_constant(negative_seven_billion, &i)) {
                return 3;
            }
            if (!test_type_conversion(&i)) {
                return 4;
            }
            if (!test_preserve_stack()) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [test_simple]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant ULong [18446744073709551615]
            │       │           ├── Constant ULong [9223372036854775807]
            │       │           ╰── Constant ULong [100]
            │       ╰── Return
            │           ╰── <43>  [&&]
            │               ├── <33>  [&&]
            │               │   ├── <24>  [==]
            │               │   │   ├── <21> Subscript
            │               │   │   │   ├── <19> Var [arr]
            │               │   │   │   ╰── Constant Int [0]
            │               │   │   ╰── Constant ULong [18446744073709551615]
            │               │   ╰── <32>  [==]
            │               │       ├── <29> Subscript
            │               │       │   ├── <27> Var [arr]
            │               │       │   ╰── Constant Int [1]
            │               │       ╰── Constant ULong [9223372036854775807]
            │               ╰── <41>  [==]
            │                   ├── <38> Subscript
            │                   │   ├── <36> Var [arr]
            │                   │   ╰── Constant Int [2]
            │                   ╰── Constant ULong [100]
            ├── Function [test_partial]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 5
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Double [+1e0]
            │       │           ╰── Constant Double [+1.23e6]
            │       ╰── Return
            │           ╰── <102>  [&&]
            │               ├── <93>  [&&]
            │               │   ├── <85>  [&&]
            │               │   │   ├── <77>  [&&]
            │               │   │   │   ├── <68>  [==]
            │               │   │   │   │   ├── <65> Subscript
            │               │   │   │   │   │   ├── <63> Var [arr]
            │               │   │   │   │   │   ╰── Constant Int [0]
            │               │   │   │   │   ╰── Constant Double [+1e0]
            │               │   │   │   ╰── <76>  [==]
            │               │   │   │       ├── <73> Subscript
            │               │   │   │       │   ├── <71> Var [arr]
            │               │   │   │       │   ╰── Constant Int [1]
            │               │   │   │       ╰── Constant Double [+1.23e6]
            │               │   │   ╰── <84> Unary [!]
            │               │   │       ╰── <83> Subscript
            │               │   │           ├── <81> Var [arr]
            │               │   │           ╰── Constant Int [2]
            │               │   ╰── <92> Unary [!]
            │               │       ╰── <91> Subscript
            │               │           ├── <89> Var [arr]
            │               │           ╰── Constant Int [3]
            │               ╰── <100> Unary [!]
            │                   ╰── <99> Subscript
            │                       ├── <97> Var [arr]
            │                       ╰── Constant Int [4]
            ├── Function [test_non_constant]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── negative_7billion
            │   │   │   ╰── Type
            │   │   │       ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Int
            │   ╰── Body
            │       ├── <122> Assign [=]
            │       │   ├── <119> Dereference
            │       │   │   ╰── <118> Var [ptr]
            │       │   ╰── Constant Int [1]
            │       ├── Function [extern three]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── var
            │       │   ├── Type
            │       │   │   ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <138>  [*]
            │       │           ├── <134> Var [negative_7billion]
            │       │           ╰── <137> FunctionCall [three]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 5
            │       │   │       ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <147> Var [negative_7billion]
            │       │           ├── <153>  [*]
            │       │           │   ├── <150> FunctionCall [three]
            │       │           │   ╰── Constant Long [7]
            │       │           ├── <162> Unary [-]
            │       │           │   ╰── <161> Cast
            │       │           │       ├── Target
            │       │           │       │   ╰── Long
            │       │           │       ╰── Expression
            │       │           │           ╰── <160> Dereference
            │       │           │               ╰── <159> Var [ptr]
            │       │           ╰── <173>  [+]
            │       │               ├── <165> Var [var]
            │       │               ╰── <{node_id}> Conditional [?]
            │       │                   ├── <168> Var [negative_7billion]
            │       │                   ├── Then
            │       │                   │   ╰── Constant Int [2]
            │       │                   ╰── Else
            │       │                       ╰── Constant Int [3]
            │       ╰── Return
            │           ╰── <226>  [&&]
            │               ├── <216>  [&&]
            │               │   ├── <205>  [&&]
            │               │   │   ├── <194>  [&&]
            │               │   │   │   ├── <185>  [==]
            │               │   │   │   │   ├── <180> Subscript
            │               │   │   │   │   │   ├── <178> Var [arr]
            │               │   │   │   │   │   ╰── Constant Int [0]
            │               │   │   │   │   ╰── <184> Unary [-]
            │               │   │   │   │       ╰── Constant Long [7000000000]
            │               │   │   │   ╰── <193>  [==]
            │               │   │   │       ├── <190> Subscript
            │               │   │   │       │   ├── <188> Var [arr]
            │               │   │   │       │   ╰── Constant Int [1]
            │               │   │   │       ╰── Constant Long [21]
            │               │   │   ╰── <204>  [==]
            │               │   │       ├── <199> Subscript
            │               │   │       │   ├── <197> Var [arr]
            │               │   │       │   ╰── Constant Int [2]
            │               │   │       ╰── <203> Unary [-]
            │               │   │           ╰── Constant Long [1]
            │               │   ╰── <215>  [==]
            │               │       ├── <210> Subscript
            │               │       │   ├── <208> Var [arr]
            │               │       │   ╰── Constant Int [3]
            │               │       ╰── <214> Unary [-]
            │               │           ╰── Constant Long [20999999998]
            │               ╰── <224>  [==]
            │                   ├── <221> Subscript
            │                   │   ├── <219> Var [arr]
            │                   │   ╰── Constant Int [4]
            │                   ╰── Constant Long [0]
            ├── Function [three]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [3]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── global_one
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Long [1]
            ├── Function [test_type_conversion]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Int
            │   ╰── Body
            │       ├── <259> Assign [=]
            │       │   ├── <254> Dereference
            │       │   │   ╰── <253> Var [ptr]
            │       │   ╰── <258> Unary [-]
            │       │       ╰── Constant Int [100]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 4
            │       │   │       ╰── Unsigned Long
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Double [+3.4587645138215895e18]
            │       │           ├── <270> Dereference
            │       │           │   ╰── <269> Var [ptr]
            │       │           ├── <275> Cast
            │       │           │   ├── Target
            │       │           │   │   ╰── Unsigned Int
            │       │           │   ╰── Expression
            │       │           │       ╰── Constant ULong [18446744073709551615]
            │       │           ╰── <280> Unary [-]
            │       │               ╰── <279> Var [global_one]
            │       ╰── Return
            │           ╰── <318>  [&&]
            │               ├── <308>  [&&]
            │               │   ├── <299>  [&&]
            │               │   │   ├── <290>  [==]
            │               │   │   │   ├── <287> Subscript
            │               │   │   │   │   ├── <285> Var [arr]
            │               │   │   │   │   ╰── Constant Int [0]
            │               │   │   │   ╰── Constant ULong [3458764513821589504]
            │               │   │   ╰── <298>  [==]
            │               │   │       ├── <295> Subscript
            │               │   │       │   ├── <293> Var [arr]
            │               │   │       │   ╰── Constant Int [1]
            │               │   │       ╰── Constant ULong [18446744073709551516]
            │               │   ╰── <307>  [==]
            │               │       ├── <304> Subscript
            │               │       │   ├── <302> Var [arr]
            │               │       │   ╰── Constant Int [2]
            │               │       ╰── Constant UInt [4294967295]
            │               ╰── <316>  [==]
            │                   ├── <313> Subscript
            │                   │   ├── <311> Var [arr]
            │                   │   ╰── Constant Int [3]
            │                   ╰── Constant ULong [18446744073709551615]
            ├── Function [test_preserve_stack]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <331> Unary [-]
            │       │           ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── <343>  [*]
            │       │           │   ├── <340> Var [global_one]
            │       │           │   ╰── Constant Long [2]
            │       │           ╰── <350>  [+]
            │       │               ├── <346> Var [global_one]
            │       │               ╰── <349> FunctionCall [three]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── u
            │       │   ├── Type
            │       │   │   ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Long [2684366905]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <366>  [!=]
            │       │   │       ├── <361> Var [i]
            │       │   │       ╰── <365> Unary [-]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <376>  [!=]
            │       │   │       ├── <373> Var [u]
            │       │   │       ╰── Constant Long [2684366905]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [0]
            │       ╰── Return
            │           ╰── <406>  [&&]
            │               ├── <397>  [&&]
            │               │   ├── <388>  [==]
            │               │   │   ├── <385> Subscript
            │               │   │   │   ├── <383> Var [arr]
            │               │   │   │   ╰── Constant Int [0]
            │               │   │   ╰── Constant Int [2]
            │               │   ╰── <396>  [==]
            │               │       ├── <393> Subscript
            │               │       │   ├── <391> Var [arr]
            │               │       │   ╰── Constant Int [1]
            │               │       ╰── Constant Int [4]
            │               ╰── <404> Unary [!]
            │                   ╰── <403> Subscript
            │                       ├── <401> Var [arr]
            │                       ╰── Constant Int [2]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <417> Unary [!]
                    │   │       ╰── <416> FunctionCall [test_simple]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <426> Unary [!]
                    │   │       ╰── <425> FunctionCall [test_partial]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── negative_seven_billion
                    │   ├── Type
                    │   │   ╰── Long
                    │   ╰── Initializer
                    │       ╰── <437> Unary [-]
                    │           ╰── Constant Long [7000000000]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── i
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <454> Unary [!]
                    │   │       ╰── <453> FunctionCall [test_non_constant]
                    │   │           ├── <449> Var [negative_seven_billion]
                    │   │           ╰── <452> AddressOf
                    │   │               ╰── <451> Var [i]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <466> Unary [!]
                    │   │       ╰── <465> FunctionCall [test_type_conversion]
                    │   │           ╰── <464> AddressOf
                    │   │               ╰── <463> Var [i]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <475> Unary [!]
                    │   │       ╰── <474> FunctionCall [test_preserve_stack]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_initialization_automatic_nested() {
    let src = r#"
        int test_simple(void) {
            int arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
            for (int i = 0; i < 3; i = i + 1) {
                for (int j = 0; j < 3; j = j + 1) {
                    if (arr[i][j] != i * 3 + j + 1) {
                        return 0;
                    }
                }
            }
            return 1;
        }
        int test_partial(void) {
            int first_half_only[4][2][6] = {
                {{1, 2, 3}},
                {{4, 5, 6}}
            };
            int expected = 1;
            for (int i = 0; i < 4; i = i + 1) {
                for (int j = 0; j < 2; j = j + 1) {
                    for (int k = 0; k < 6; k = k + 1) {
                        int val = first_half_only[i][j][k];
                        if (i > 1 || j > 0 || k > 2) {
                            if (val) {
                                return 0;
                            }
                        } else {
                            if (val != expected) {
                                return 0;
                            }
                            expected = expected + 1;
                        }
                    }
                }
            }
            return 1;
        }
        int test_non_constant_and_type_conversion(void) {
            extern unsigned int three(void);
            static int x = 2000;
            int negative_four = -4;
            int *ptr = &negative_four;
            double arr[3][2] = {
                {x, x / *ptr},
                {three()},
            };
            if (arr[0][0] != 2000.0 || arr[0][1] != -500.0 || arr[1][0] != 3.0) {
                return 0;
            }
            if (arr[1][1] || arr[2][0] || arr[2][1]) {
                return 0;
            }
            return 1;
        }
        unsigned int three(void) {
            return 3u;
        }
        long one = 1l;
        int test_preserve_stack(void) {
            int i = -1;
            int arr[3][1] = {{one * 2l}, {one + three()}};
            unsigned int u = 2684366905;
            if (i != -1) {
                return 0;
            }
            if (u != 2684366905) {
                return 0;
            }
            if (arr[0][0] != 2 || arr[1][0] != 4 || arr[2][0] != 0) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_simple()) {
                return 1;
            }
            if (!test_partial()) {
                return 2;
            }
            if (!test_non_constant_and_type_conversion()) {
                return 3;
            }
            if (!test_preserve_stack()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [test_simple]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Array
            │       │   │           ├── 3
            │       │   │           ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── Constant Int [1]
            │       │           │   ├── Constant Int [2]
            │       │           │   ╰── Constant Int [3]
            │       │           ├── Compound
            │       │           │   ├── Constant Int [4]
            │       │           │   ├── Constant Int [5]
            │       │           │   ╰── Constant Int [6]
            │       │           ╰── Compound
            │       │               ├── Constant Int [7]
            │       │               ├── Constant Int [8]
            │       │               ╰── Constant Int [9]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <46>  [<]
            │       │   │       ├── <43> Var [i]
            │       │   │       ╰── Constant Int [3]
            │       │   ├── Condition
            │       │   │   ╰── <55> Assign [=]
            │       │   │       ├── <48> Var [i]
            │       │   │       ╰── <54>  [+]
            │       │   │           ├── <51> Var [i]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── For
            │       │           ├── Init
            │       │           │   ╰── VarDeclaration
            │       │           │       ├── Name
            │       │           │       │   ╰── j
            │       │           │       ├── Type
            │       │           │       │   ╰── Int
            │       │           │       ╰── Initializer
            │       │           │           ╰── Constant Int [0]
            │       │           ├── Condition
            │       │           │   ╰── <67>  [<]
            │       │           │       ├── <64> Var [j]
            │       │           │       ╰── Constant Int [3]
            │       │           ├── Condition
            │       │           │   ╰── <76> Assign [=]
            │       │           │       ├── <69> Var [j]
            │       │           │       ╰── <75>  [+]
            │       │           │           ├── <72> Var [j]
            │       │           │           ╰── Constant Int [1]
            │       │           ╰── Block
            │       │               ╰── If
            │       │                   ├── Condition
            │       │                   │   ╰── <98>  [!=]
            │       │                   │       ├── <84> Subscript
            │       │                   │       │   ├── <81> Subscript
            │       │                   │       │   │   ├── <78> Var [arr]
            │       │                   │       │   │   ╰── <80> Var [i]
            │       │                   │       │   ╰── <83> Var [j]
            │       │                   │       ╰── <97>  [+]
            │       │                   │           ├── <94>  [+]
            │       │                   │           │   ├── <90>  [*]
            │       │                   │           │   │   ├── <87> Var [i]
            │       │                   │           │   │   ╰── Constant Int [3]
            │       │                   │           │   ╰── <93> Var [j]
            │       │                   │           ╰── Constant Int [1]
            │       │                   ╰── Then
            │       │                       ╰── Block
            │       │                           ╰── Return
            │       │                               ╰── Constant Int [0]
            │       ╰── Return
            │           ╰── Constant Int [1]
            ├── Function [test_partial]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── first_half_only
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 4
            │       │   │       ╰── Array
            │       │   │           ├── 2
            │       │   │           ╰── Array
            │       │   │               ├── 6
            │       │   │               ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ╰── Compound
            │       │           │       ├── Constant Int [1]
            │       │           │       ├── Constant Int [2]
            │       │           │       ╰── Constant Int [3]
            │       │           ╰── Compound
            │       │               ╰── Compound
            │       │                   ├── Constant Int [4]
            │       │                   ├── Constant Int [5]
            │       │                   ╰── Constant Int [6]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── expected
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Int [1]
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <162>  [<]
            │       │   │       ├── <159> Var [i]
            │       │   │       ╰── Constant Int [4]
            │       │   ├── Condition
            │       │   │   ╰── <171> Assign [=]
            │       │   │       ├── <164> Var [i]
            │       │   │       ╰── <170>  [+]
            │       │   │           ├── <167> Var [i]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── For
            │       │           ├── Init
            │       │           │   ╰── VarDeclaration
            │       │           │       ├── Name
            │       │           │       │   ╰── j
            │       │           │       ├── Type
            │       │           │       │   ╰── Int
            │       │           │       ╰── Initializer
            │       │           │           ╰── Constant Int [0]
            │       │           ├── Condition
            │       │           │   ╰── <183>  [<]
            │       │           │       ├── <180> Var [j]
            │       │           │       ╰── Constant Int [2]
            │       │           ├── Condition
            │       │           │   ╰── <192> Assign [=]
            │       │           │       ├── <185> Var [j]
            │       │           │       ╰── <191>  [+]
            │       │           │           ├── <188> Var [j]
            │       │           │           ╰── Constant Int [1]
            │       │           ╰── Block
            │       │               ╰── For
            │       │                   ├── Init
            │       │                   │   ╰── VarDeclaration
            │       │                   │       ├── Name
            │       │                   │       │   ╰── k
            │       │                   │       ├── Type
            │       │                   │       │   ╰── Int
            │       │                   │       ╰── Initializer
            │       │                   │           ╰── Constant Int [0]
            │       │                   ├── Condition
            │       │                   │   ╰── <204>  [<]
            │       │                   │       ├── <201> Var [k]
            │       │                   │       ╰── Constant Int [6]
            │       │                   ├── Condition
            │       │                   │   ╰── <213> Assign [=]
            │       │                   │       ├── <206> Var [k]
            │       │                   │       ╰── <212>  [+]
            │       │                   │           ├── <209> Var [k]
            │       │                   │           ╰── Constant Int [1]
            │       │                   ╰── Block
            │       │                       ├── VarDeclaration
            │       │                       │   ├── Name
            │       │                       │   │   ╰── val
            │       │                       │   ├── Type
            │       │                       │   │   ╰── Int
            │       │                       │   ╰── Initializer
            │       │                       │       ╰── <227> Subscript
            │       │                       │           ├── <224> Subscript
            │       │                       │           │   ├── <221> Subscript
            │       │                       │           │   │   ├── <218> Var [first_half_only]
            │       │                       │           │   │   ╰── <220> Var [i]
            │       │                       │           │   ╰── <223> Var [j]
            │       │                       │           ╰── <226> Var [k]
            │       │                       ╰── If
            │       │                           ├── Condition
            │       │                           │   ╰── <248>  [||]
            │       │                           │       ├── <241>  [||]
            │       │                           │       │   ├── <234>  [>]
            │       │                           │       │   │   ├── <231> Var [i]
            │       │                           │       │   │   ╰── Constant Int [1]
            │       │                           │       │   ╰── <240>  [>]
            │       │                           │       │       ├── <237> Var [j]
            │       │                           │       │       ╰── Constant Int [0]
            │       │                           │       ╰── <247>  [>]
            │       │                           │           ├── <244> Var [k]
            │       │                           │           ╰── Constant Int [2]
            │       │                           ├── Then
            │       │                           │   ╰── Block
            │       │                           │       ╰── If
            │       │                           │           ├── Condition
            │       │                           │           │   ╰── <250> Var [val]
            │       │                           │           ╰── Then
            │       │                           │               ╰── Block
            │       │                           │                   ╰── Return
            │       │                           │                       ╰── Constant Int [0]
            │       │                           ╰── Else
            │       │                               ╰── Block
            │       │                                   ├── If
            │       │                                   │   ├── Condition
            │       │                                   │   │   ╰── <263>  [!=]
            │       │                                   │   │       ├── <259> Var [val]
            │       │                                   │   │       ╰── <262> Var [expected]
            │       │                                   │   ╰── Then
            │       │                                   │       ╰── Block
            │       │                                   │           ╰── Return
            │       │                                   │               ╰── Constant Int [0]
            │       │                                   ╰── <277> Assign [=]
            │       │                                       ├── <270> Var [expected]
            │       │                                       ╰── <276>  [+]
            │       │                                           ├── <273> Var [expected]
            │       │                                           ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── Constant Int [1]
            ├── Function [test_non_constant_and_type_conversion]
            │   ╰── Body
            │       ├── Function [extern three]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── x
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [2000]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── negative_four
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <317> Unary [-]
            │       │           ╰── Constant Int [4]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <326> AddressOf
            │       │           ╰── <325> Var [negative_four]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Array
            │       │   │           ├── 2
            │       │   │           ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── <337> Var [x]
            │       │           │   ╰── <345>  [/]
            │       │           │       ├── <340> Var [x]
            │       │           │       ╰── <344> Dereference
            │       │           │           ╰── <343> Var [ptr]
            │       │           ╰── Compound
            │       │               ╰── <349> FunctionCall [three]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <386>  [||]
            │       │   │       ├── <375>  [||]
            │       │   │       │   ├── <362>  [!=]
            │       │   │       │   │   ├── <359> Subscript
            │       │   │       │   │   │   ├── <357> Subscript
            │       │   │       │   │   │   │   ├── <355> Var [arr]
            │       │   │       │   │   │   │   ╰── Constant Int [0]
            │       │   │       │   │   │   ╰── Constant Int [0]
            │       │   │       │   │   ╰── Constant Double [+2e3]
            │       │   │       │   ╰── <374>  [!=]
            │       │   │       │       ├── <369> Subscript
            │       │   │       │       │   ├── <367> Subscript
            │       │   │       │       │   │   ├── <365> Var [arr]
            │       │   │       │       │   │   ╰── Constant Int [0]
            │       │   │       │       │   ╰── Constant Int [1]
            │       │   │       │       ╰── <373> Unary [-]
            │       │   │       │           ╰── Constant Double [+5e2]
            │       │   │       ╰── <385>  [!=]
            │       │   │           ├── <382> Subscript
            │       │   │           │   ├── <380> Subscript
            │       │   │           │   │   ├── <378> Var [arr]
            │       │   │           │   │   ╰── Constant Int [1]
            │       │   │           │   ╰── Constant Int [0]
            │       │   │           ╰── Constant Double [+3e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <413>  [||]
            │       │   │       ├── <405>  [||]
            │       │   │       │   ├── <397> Subscript
            │       │   │       │   │   ├── <395> Subscript
            │       │   │       │   │   │   ├── <393> Var [arr]
            │       │   │       │   │   │   ╰── Constant Int [1]
            │       │   │       │   │   ╰── Constant Int [1]
            │       │   │       │   ╰── <404> Subscript
            │       │   │       │       ├── <402> Subscript
            │       │   │       │       │   ├── <400> Var [arr]
            │       │   │       │       │   ╰── Constant Int [2]
            │       │   │       │       ╰── Constant Int [0]
            │       │   │       ╰── <412> Subscript
            │       │   │           ├── <410> Subscript
            │       │   │           │   ├── <408> Var [arr]
            │       │   │           │   ╰── Constant Int [2]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [0]
            │       ╰── Return
            │           ╰── Constant Int [1]
            ├── Function [three]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant UInt [3]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── one
            │   ├── Type
            │   │   ╰── Long
            │   ╰── Initializer
            │       ╰── Constant Long [1]
            ├── Function [test_preserve_stack]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <446> Unary [-]
            │       │           ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Array
            │       │   │           ├── 1
            │       │   │           ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ╰── <460>  [*]
            │       │           │       ├── <457> Var [one]
            │       │           │       ╰── Constant Long [2]
            │       │           ╰── Compound
            │       │               ╰── <468>  [+]
            │       │                   ├── <464> Var [one]
            │       │                   ╰── <467> FunctionCall [three]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── u
            │       │   ├── Type
            │       │   │   ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── Constant Long [2684366905]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <485>  [!=]
            │       │   │       ├── <480> Var [i]
            │       │   │       ╰── <484> Unary [-]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <495>  [!=]
            │       │   │       ├── <492> Var [u]
            │       │   │       ╰── Constant Long [2684366905]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [0]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <531>  [||]
            │       │   │       ├── <520>  [||]
            │       │   │       │   ├── <509>  [!=]
            │       │   │       │   │   ├── <506> Subscript
            │       │   │       │   │   │   ├── <504> Subscript
            │       │   │       │   │   │   │   ├── <502> Var [arr]
            │       │   │       │   │   │   │   ╰── Constant Int [0]
            │       │   │       │   │   │   ╰── Constant Int [0]
            │       │   │       │   │   ╰── Constant Int [2]
            │       │   │       │   ╰── <519>  [!=]
            │       │   │       │       ├── <516> Subscript
            │       │   │       │       │   ├── <514> Subscript
            │       │   │       │       │   │   ├── <512> Var [arr]
            │       │   │       │       │   │   ╰── Constant Int [1]
            │       │   │       │       │   ╰── Constant Int [0]
            │       │   │       │       ╰── Constant Int [4]
            │       │   │       ╰── <530>  [!=]
            │       │   │           ├── <527> Subscript
            │       │   │           │   ├── <525> Subscript
            │       │   │           │   │   ├── <523> Var [arr]
            │       │   │           │   │   ╰── Constant Int [2]
            │       │   │           │   ╰── Constant Int [0]
            │       │   │           ╰── Constant Int [0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [0]
            │       ╰── Return
            │           ╰── Constant Int [1]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <548> Unary [!]
                    │   │       ╰── <547> FunctionCall [test_simple]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <557> Unary [!]
                    │   │       ╰── <556> FunctionCall [test_partial]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <566> Unary [!]
                    │   │       ╰── <565> FunctionCall [test_non_constant_and_type_conversion]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <575> Unary [!]
                    │   │       ╰── <574> FunctionCall [test_preserve_stack]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_initialization_static() {
    let src = r#"
        double double_arr[3] = {1.0, 2.0, 3.0};
        int check_double_arr(double *arr) {
            if (arr[0] != 1.0) {
                return 1;
            }
            if (arr[1] != 2.0) {
                return 2;
            }
            if (arr[2] != 3.0) {
                return 3;
            }
            return 0;
        }
        unsigned uint_arr[5] = {
            1u,
            0u,
            2147497230u,
        };
        int check_uint_arr(unsigned *arr) {
            if (arr[0] != 1u) {
                return 4;
            }
            if (arr[1]) {
                return 5;
            }
            if (arr[2] != 2147497230u) {
                return 6;
            }
            if (arr[3] || arr[4]) {
                return 7;
            }
            return 0;
        }
        long long_arr[1000];
        int check_long_arr(long *arr) {
            for (int i = 0; i < 1000; i = i + 1) {
                if (arr[i]) {
                    return 8;
                }
            }
            return 0;
        }
        unsigned long ulong_arr[4] = {
            100.0, 11, 12345l, 4294967295U
        };
        int check_ulong_arr(unsigned long *arr) {
            if (arr[0] != 100ul) {
                return 9;
            }
            if (arr[1] != 11ul) {
                return 10;
            }
            if (arr[2] != 12345ul) {
                return 11;
            }
            if (arr[3] != 4294967295Ul) {
                return 12;
            }
            return 0;
        }
        int test_global(void) {
            int check = check_double_arr(double_arr);
            if (check) {
                return check;
            }
            check = check_uint_arr(uint_arr);
            if (check) {
                return check;
            }
            check = check_long_arr(long_arr);
            if (check) {
                return check;
            }
            check = check_ulong_arr(ulong_arr);
            if (check) {
                return check;
            }
            return 0;
        }
        int test_local(void) {
            double local_double_arr[3] = {1.0, 2.0, 3.0};
            static unsigned local_uint_arr[5] = {
                1u,
                0u,
                2147497230u,
            };
            static long local_long_arr[1000];
            static unsigned long local_ulong_arr[4] = {
                100.0, 11, 12345l, 4294967295U
            };
            int check = check_double_arr(local_double_arr);
            if (check) {
                return 100 + check;
            }
            check = check_uint_arr(local_uint_arr);
            if (check) {
                return 100 + check;
            }
            check = check_long_arr(local_long_arr);
            if (check) {
                return 100 + check;
            }
            check = check_ulong_arr(local_ulong_arr);
            if (check) {
                return 100 + check;
            }
            return 0;
        }
        int main(void) {
            int check = test_global();
            if (check) {
                return check;
            }
            return test_local();
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── double_arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Double
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Constant Double [+1e0]
            │           ├── Constant Double [+2e0]
            │           ╰── Constant Double [+3e0]
            ├── Function [check_double_arr]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── arr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Double
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <28>  [!=]
            │       │   │       ├── <25> Subscript
            │       │   │       │   ├── <23> Var [arr]
            │       │   │       │   ╰── Constant Int [0]
            │       │   │       ╰── Constant Double [+1e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <40>  [!=]
            │       │   │       ├── <37> Subscript
            │       │   │       │   ├── <35> Var [arr]
            │       │   │       │   ╰── Constant Int [1]
            │       │   │       ╰── Constant Double [+2e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <52>  [!=]
            │       │   │       ├── <49> Subscript
            │       │   │       │   ├── <47> Var [arr]
            │       │   │       │   ╰── Constant Int [2]
            │       │   │       ╰── Constant Double [+3e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── uint_arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 5
            │   │       ╰── Unsigned Int
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Constant UInt [1]
            │           ├── Constant UInt [0]
            │           ╰── Constant UInt [2147497230]
            ├── Function [check_uint_arr]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── arr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Unsigned Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <89>  [!=]
            │       │   │       ├── <86> Subscript
            │       │   │       │   ├── <84> Var [arr]
            │       │   │       │   ╰── Constant Int [0]
            │       │   │       ╰── Constant UInt [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [4]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <98> Subscript
            │       │   │       ├── <96> Var [arr]
            │       │   │       ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <110>  [!=]
            │       │   │       ├── <107> Subscript
            │       │   │       │   ├── <105> Var [arr]
            │       │   │       │   ╰── Constant Int [2]
            │       │   │       ╰── Constant UInt [2147497230]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <125>  [||]
            │       │   │       ├── <119> Subscript
            │       │   │       │   ├── <117> Var [arr]
            │       │   │       │   ╰── Constant Int [3]
            │       │   │       ╰── <124> Subscript
            │       │   │           ├── <122> Var [arr]
            │       │   │           ╰── Constant Int [4]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [7]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── long_arr
            │   ╰── Type
            │       ╰── Array
            │           ├── 1000
            │           ╰── Long
            ├── Function [check_long_arr]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── arr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Long
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <160>  [<]
            │       │   │       ├── <157> Var [i]
            │       │   │       ╰── Constant Int [1000]
            │       │   ├── Condition
            │       │   │   ╰── <169> Assign [=]
            │       │   │       ├── <162> Var [i]
            │       │   │       ╰── <168>  [+]
            │       │   │           ├── <165> Var [i]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <174> Subscript
            │       │           │       ├── <171> Var [arr]
            │       │           │       ╰── <173> Var [i]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── Constant Int [8]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ulong_arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 4
            │   │       ╰── Unsigned Long
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Constant Double [+1e2]
            │           ├── Constant Int [11]
            │           ├── Constant Long [12345]
            │           ╰── Constant UInt [4294967295]
            ├── Function [check_ulong_arr]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── arr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Unsigned Long
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <216>  [!=]
            │       │   │       ├── <213> Subscript
            │       │   │       │   ├── <211> Var [arr]
            │       │   │       │   ╰── Constant Int [0]
            │       │   │       ╰── Constant ULong [100]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [9]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <228>  [!=]
            │       │   │       ├── <225> Subscript
            │       │   │       │   ├── <223> Var [arr]
            │       │   │       │   ╰── Constant Int [1]
            │       │   │       ╰── Constant ULong [11]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [10]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <240>  [!=]
            │       │   │       ├── <237> Subscript
            │       │   │       │   ├── <235> Var [arr]
            │       │   │       │   ╰── Constant Int [2]
            │       │   │       ╰── Constant ULong [12345]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [11]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <252>  [!=]
            │       │   │       ├── <249> Subscript
            │       │   │       │   ├── <247> Var [arr]
            │       │   │       │   ╰── Constant Int [3]
            │       │   │       ╰── Constant ULong [4294967295]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [12]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [test_global]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── check
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <272> FunctionCall [check_double_arr]
            │       │           ╰── <271> Var [double_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <276> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <278> Var [check]
            │       ├── <290> Assign [=]
            │       │   ├── <284> Var [check]
            │       │   ╰── <289> FunctionCall [check_uint_arr]
            │       │       ╰── <288> Var [uint_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <293> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <295> Var [check]
            │       ├── <307> Assign [=]
            │       │   ├── <301> Var [check]
            │       │   ╰── <306> FunctionCall [check_long_arr]
            │       │       ╰── <305> Var [long_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <310> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <312> Var [check]
            │       ├── <324> Assign [=]
            │       │   ├── <318> Var [check]
            │       │   ╰── <323> FunctionCall [check_ulong_arr]
            │       │       ╰── <322> Var [ulong_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <327> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <329> Var [check]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [test_local]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── local_double_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Double [+1e0]
            │       │           ├── Constant Double [+2e0]
            │       │           ╰── Constant Double [+3e0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── local_uint_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 5
            │       │   │       ╰── Unsigned Int
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── Constant UInt [1]
            │       │   │       ├── Constant UInt [0]
            │       │   │       ╰── Constant UInt [2147497230]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── local_long_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 1000
            │       │   │       ╰── Long
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── local_ulong_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 4
            │       │   │       ╰── Unsigned Long
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── Constant Double [+1e2]
            │       │   │       ├── Constant Int [11]
            │       │   │       ├── Constant Long [12345]
            │       │   │       ╰── Constant UInt [4294967295]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── check
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <398> FunctionCall [check_double_arr]
            │       │           ╰── <397> Var [local_double_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <402> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <407>  [+]
            │       │                   ├── Constant Int [100]
            │       │                   ╰── <406> Var [check]
            │       ├── <419> Assign [=]
            │       │   ├── <413> Var [check]
            │       │   ╰── <418> FunctionCall [check_uint_arr]
            │       │       ╰── <417> Var [local_uint_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <422> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <427>  [+]
            │       │                   ├── Constant Int [100]
            │       │                   ╰── <426> Var [check]
            │       ├── <439> Assign [=]
            │       │   ├── <433> Var [check]
            │       │   ╰── <438> FunctionCall [check_long_arr]
            │       │       ╰── <437> Var [local_long_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <442> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <447>  [+]
            │       │                   ├── Constant Int [100]
            │       │                   ╰── <446> Var [check]
            │       ├── <459> Assign [=]
            │       │   ├── <453> Var [check]
            │       │   ╰── <458> FunctionCall [check_ulong_arr]
            │       │       ╰── <457> Var [local_ulong_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <462> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <467>  [+]
            │       │                   ├── Constant Int [100]
            │       │                   ╰── <466> Var [check]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── check
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <484> FunctionCall [test_global]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <488> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <490> Var [check]
                    ╰── Return
                        ╰── <496> FunctionCall [test_local]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_initialization_static_nested() {
    let src = r#"
        double double_arr[2][2] = {{1.1, 2.2}, {3.3, 4.4}};
        int check_double_arr(double (*arr)[2]) {
            if (arr[0][0] != 1.1) {
                return 1;
            }
            if (arr[0][1] != 2.2) {
                return 2;
            }
            if (arr[1][0] != 3.3) {
                return 3;
            }
            if (arr[1][1] != 4.4) {
                return 4;
            }
            return 0;
        }
        long long_arr[30][50][40];
        int check_long_arr(long (*arr)[50][40]) {
            for (int i = 0; i < 30; i = i + 1) {
                for (int j = 0; j < 50; j = j + 1) {
                    for (int k = 0; k < 40; k = k + 1) {
                        if (arr[i][j][k]) {
                            return 5;
                        }
                    }
                }
            }
            return 0;
        }
        unsigned long ulong_arr[4][6][2] = {
            {{
                 1000.3,
             },
             {12u}},
            {{2}}};
        int check_ulong_arr(unsigned long (*arr)[6][2]) {
            for (int i = 0; i < 4; i = i + 1) {
                for (int j = 0; j < 6; j = j + 1) {
                    for (int k = 0; k < 2; k = k + 1) {
                        int val = arr[i][j][k];
                        if (i == 0 && j == 0 && k == 0) {
                            if (val != 1000ul) {
                                return 6;
                            }
                        } else if (i == 0 && j == 1 && k == 0) {
                            if (val != 12ul) {
                                return 7;
                            }
                        } else if (i == 1 && j == 0 && k == 0) {
                            if (val != 2ul) {
                                return 8;
                            }
                        } else {
                            if (val) {
                                return 9;
                            }
                        }
                    }
                }
            }
            return 0;
        }
        int test_global(void) {
            int check = check_double_arr(double_arr);
            if (check) {
                return check;
            }
            check = check_long_arr(long_arr);
            if (check) {
                return check;
            }
            check = check_ulong_arr(ulong_arr);
            if (check) {
                return check;
            }
            return 0;
        }
        int test_local(void) {
            static double local_double_arr[2][2] = {{1.1, 2.2}, {3.3, 4.4}};
            int check = check_double_arr(local_double_arr);
            if (check) {
                return 100 + check;
            }
            static long local_long_arr[30][50][40];
            check = check_long_arr(local_long_arr);
            if (check) {
                return 100 + check;
            }
            static unsigned long local_ulong_arr[4][6][2] = {
                {{
                    1000.3,
                },
                {12u}},
                {{2}}};
            check = check_ulong_arr(local_ulong_arr);
            if (check) {
                return 100 + check;
            }
            return 0;
        }
        int main(void) {
            int check = test_global();
            if (check) {
                return check;
            }
            return test_local();
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── double_arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 2
            │   │       ╰── Array
            │   │           ├── 2
            │   │           ╰── Double
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Compound
            │           │   ├── Constant Double [+1.1e0]
            │           │   ╰── Constant Double [+2.2e0]
            │           ╰── Compound
            │               ├── Constant Double [+3.3e0]
            │               ╰── Constant Double [+4.4e0]
            ├── Function [check_double_arr]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── arr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Array
            │   │                   ├── 2
            │   │                   ╰── Double
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <39>  [!=]
            │       │   │       ├── <36> Subscript
            │       │   │       │   ├── <34> Subscript
            │       │   │       │   │   ├── <32> Var [arr]
            │       │   │       │   │   ╰── Constant Int [0]
            │       │   │       │   ╰── Constant Int [0]
            │       │   │       ╰── Constant Double [+1.1e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <53>  [!=]
            │       │   │       ├── <50> Subscript
            │       │   │       │   ├── <48> Subscript
            │       │   │       │   │   ├── <46> Var [arr]
            │       │   │       │   │   ╰── Constant Int [0]
            │       │   │       │   ╰── Constant Int [1]
            │       │   │       ╰── Constant Double [+2.2e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <67>  [!=]
            │       │   │       ├── <64> Subscript
            │       │   │       │   ├── <62> Subscript
            │       │   │       │   │   ├── <60> Var [arr]
            │       │   │       │   │   ╰── Constant Int [1]
            │       │   │       │   ╰── Constant Int [0]
            │       │   │       ╰── Constant Double [+3.3e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <81>  [!=]
            │       │   │       ├── <78> Subscript
            │       │   │       │   ├── <76> Subscript
            │       │   │       │   │   ├── <74> Var [arr]
            │       │   │       │   │   ╰── Constant Int [1]
            │       │   │       │   ╰── Constant Int [1]
            │       │   │       ╰── Constant Double [+4.4e0]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [4]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── long_arr
            │   ╰── Type
            │       ╰── Array
            │           ├── 30
            │           ╰── Array
            │               ├── 50
            │               ╰── Array
            │                   ├── 40
            │                   ╰── Long
            ├── Function [check_long_arr]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── arr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Array
            │   │                   ├── 50
            │   │                   ╰── Array
            │   │                       ├── 40
            │   │                       ╰── Long
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <125>  [<]
            │       │   │       ├── <122> Var [i]
            │       │   │       ╰── Constant Int [30]
            │       │   ├── Condition
            │       │   │   ╰── <134> Assign [=]
            │       │   │       ├── <127> Var [i]
            │       │   │       ╰── <133>  [+]
            │       │   │           ├── <130> Var [i]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── For
            │       │           ├── Init
            │       │           │   ╰── VarDeclaration
            │       │           │       ├── Name
            │       │           │       │   ╰── j
            │       │           │       ├── Type
            │       │           │       │   ╰── Int
            │       │           │       ╰── Initializer
            │       │           │           ╰── Constant Int [0]
            │       │           ├── Condition
            │       │           │   ╰── <146>  [<]
            │       │           │       ├── <143> Var [j]
            │       │           │       ╰── Constant Int [50]
            │       │           ├── Condition
            │       │           │   ╰── <155> Assign [=]
            │       │           │       ├── <148> Var [j]
            │       │           │       ╰── <154>  [+]
            │       │           │           ├── <151> Var [j]
            │       │           │           ╰── Constant Int [1]
            │       │           ╰── Block
            │       │               ╰── For
            │       │                   ├── Init
            │       │                   │   ╰── VarDeclaration
            │       │                   │       ├── Name
            │       │                   │       │   ╰── k
            │       │                   │       ├── Type
            │       │                   │       │   ╰── Int
            │       │                   │       ╰── Initializer
            │       │                   │           ╰── Constant Int [0]
            │       │                   ├── Condition
            │       │                   │   ╰── <167>  [<]
            │       │                   │       ├── <164> Var [k]
            │       │                   │       ╰── Constant Int [40]
            │       │                   ├── Condition
            │       │                   │   ╰── <176> Assign [=]
            │       │                   │       ├── <169> Var [k]
            │       │                   │       ╰── <175>  [+]
            │       │                   │           ├── <172> Var [k]
            │       │                   │           ╰── Constant Int [1]
            │       │                   ╰── Block
            │       │                       ╰── If
            │       │                           ├── Condition
            │       │                           │   ╰── <187> Subscript
            │       │                           │       ├── <184> Subscript
            │       │                           │       │   ├── <181> Subscript
            │       │                           │       │   │   ├── <178> Var [arr]
            │       │                           │       │   │   ╰── <180> Var [i]
            │       │                           │       │   ╰── <183> Var [j]
            │       │                           │       ╰── <186> Var [k]
            │       │                           ╰── Then
            │       │                               ╰── Block
            │       │                                   ╰── Return
            │       │                                       ╰── Constant Int [5]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── ulong_arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 4
            │   │       ╰── Array
            │   │           ├── 6
            │   │           ╰── Array
            │   │               ├── 2
            │   │               ╰── Unsigned Long
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Compound
            │           │   ├── Compound
            │           │   │   ╰── Constant Double [+1.0003e3]
            │           │   ╰── Compound
            │           │       ╰── Constant UInt [12]
            │           ╰── Compound
            │               ╰── Compound
            │                   ╰── Constant Int [2]
            ├── Function [check_ulong_arr]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── arr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Array
            │   │                   ├── 6
            │   │                   ╰── Array
            │   │                       ├── 2
            │   │                       ╰── Unsigned Long
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <252>  [<]
            │       │   │       ├── <249> Var [i]
            │       │   │       ╰── Constant Int [4]
            │       │   ├── Condition
            │       │   │   ╰── <261> Assign [=]
            │       │   │       ├── <254> Var [i]
            │       │   │       ╰── <260>  [+]
            │       │   │           ├── <257> Var [i]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── For
            │       │           ├── Init
            │       │           │   ╰── VarDeclaration
            │       │           │       ├── Name
            │       │           │       │   ╰── j
            │       │           │       ├── Type
            │       │           │       │   ╰── Int
            │       │           │       ╰── Initializer
            │       │           │           ╰── Constant Int [0]
            │       │           ├── Condition
            │       │           │   ╰── <273>  [<]
            │       │           │       ├── <270> Var [j]
            │       │           │       ╰── Constant Int [6]
            │       │           ├── Condition
            │       │           │   ╰── <282> Assign [=]
            │       │           │       ├── <275> Var [j]
            │       │           │       ╰── <281>  [+]
            │       │           │           ├── <278> Var [j]
            │       │           │           ╰── Constant Int [1]
            │       │           ╰── Block
            │       │               ╰── For
            │       │                   ├── Init
            │       │                   │   ╰── VarDeclaration
            │       │                   │       ├── Name
            │       │                   │       │   ╰── k
            │       │                   │       ├── Type
            │       │                   │       │   ╰── Int
            │       │                   │       ╰── Initializer
            │       │                   │           ╰── Constant Int [0]
            │       │                   ├── Condition
            │       │                   │   ╰── <294>  [<]
            │       │                   │       ├── <291> Var [k]
            │       │                   │       ╰── Constant Int [2]
            │       │                   ├── Condition
            │       │                   │   ╰── <303> Assign [=]
            │       │                   │       ├── <296> Var [k]
            │       │                   │       ╰── <302>  [+]
            │       │                   │           ├── <299> Var [k]
            │       │                   │           ╰── Constant Int [1]
            │       │                   ╰── Block
            │       │                       ├── VarDeclaration
            │       │                       │   ├── Name
            │       │                       │   │   ╰── val
            │       │                       │   ├── Type
            │       │                       │   │   ╰── Int
            │       │                       │   ╰── Initializer
            │       │                       │       ╰── <317> Subscript
            │       │                       │           ├── <314> Subscript
            │       │                       │           │   ├── <311> Subscript
            │       │                       │           │   │   ├── <308> Var [arr]
            │       │                       │           │   │   ╰── <310> Var [i]
            │       │                       │           │   ╰── <313> Var [j]
            │       │                       │           ╰── <316> Var [k]
            │       │                       ╰── If
            │       │                           ├── Condition
            │       │                           │   ╰── <338>  [&&]
            │       │                           │       ├── <331>  [&&]
            │       │                           │       │   ├── <324>  [==]
            │       │                           │       │   │   ├── <321> Var [i]
            │       │                           │       │   │   ╰── Constant Int [0]
            │       │                           │       │   ╰── <330>  [==]
            │       │                           │       │       ├── <327> Var [j]
            │       │                           │       │       ╰── Constant Int [0]
            │       │                           │       ╰── <337>  [==]
            │       │                           │           ├── <334> Var [k]
            │       │                           │           ╰── Constant Int [0]
            │       │                           ├── Then
            │       │                           │   ╰── Block
            │       │                           │       ╰── If
            │       │                           │           ├── Condition
            │       │                           │           │   ╰── <343>  [!=]
            │       │                           │           │       ├── <340> Var [val]
            │       │                           │           │       ╰── Constant ULong [1000]
            │       │                           │           ╰── Then
            │       │                           │               ╰── Block
            │       │                           │                   ╰── Return
            │       │                           │                       ╰── Constant Int [6]
            │       │                           ╰── Else
            │       │                               ╰── If
            │       │                                   ├── Condition
            │       │                                   │   ╰── <369>  [&&]
            │       │                                   │       ├── <362>  [&&]
            │       │                                   │       │   ├── <355>  [==]
            │       │                                   │       │   │   ├── <352> Var [i]
            │       │                                   │       │   │   ╰── Constant Int [0]
            │       │                                   │       │   ╰── <361>  [==]
            │       │                                   │       │       ├── <358> Var [j]
            │       │                                   │       │       ╰── Constant Int [1]
            │       │                                   │       ╰── <368>  [==]
            │       │                                   │           ├── <365> Var [k]
            │       │                                   │           ╰── Constant Int [0]
            │       │                                   ├── Then
            │       │                                   │   ╰── Block
            │       │                                   │       ╰── If
            │       │                                   │           ├── Condition
            │       │                                   │           │   ╰── <374>  [!=]
            │       │                                   │           │       ├── <371> Var [val]
            │       │                                   │           │       ╰── Constant ULong [12]
            │       │                                   │           ╰── Then
            │       │                                   │               ╰── Block
            │       │                                   │                   ╰── Return
            │       │                                   │                       ╰── Constant Int [7]
            │       │                                   ╰── Else
            │       │                                       ╰── If
            │       │                                           ├── Condition
            │       │                                           │   ╰── <400>  [&&]
            │       │                                           │       ├── <393>  [&&]
            │       │                                           │       │   ├── <386>  [==]
            │       │                                           │       │   │   ├── <383> Var [i]
            │       │                                           │       │   │   ╰── Constant Int [1]
            │       │                                           │       │   ╰── <392>  [==]
            │       │                                           │       │       ├── <389> Var [j]
            │       │                                           │       │       ╰── Constant Int [0]
            │       │                                           │       ╰── <399>  [==]
            │       │                                           │           ├── <396> Var [k]
            │       │                                           │           ╰── Constant Int [0]
            │       │                                           ├── Then
            │       │                                           │   ╰── Block
            │       │                                           │       ╰── If
            │       │                                           │           ├── Condition
            │       │                                           │           │   ╰── <405>  [!=]
            │       │                                           │           │       ├── <402> Var [val]
            │       │                                           │           │       ╰── Constant ULong [2]
            │       │                                           │           ╰── Then
            │       │                                           │               ╰── Block
            │       │                                           │                   ╰── Return
            │       │                                           │                       ╰── Constant Int [8]
            │       │                                           ╰── Else
            │       │                                               ╰── Block
            │       │                                                   ╰── If
            │       │                                                       ├── Condition
            │       │                                                       │   ╰── <414> Var [val]
            │       │                                                       ╰── Then
            │       │                                                           ╰── Block
            │       │                                                               ╰── Return
            │       │                                                                   ╰── Constant Int [9]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [test_global]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── check
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <448> FunctionCall [check_double_arr]
            │       │           ╰── <447> Var [double_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <452> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <454> Var [check]
            │       ├── <466> Assign [=]
            │       │   ├── <460> Var [check]
            │       │   ╰── <465> FunctionCall [check_long_arr]
            │       │       ╰── <464> Var [long_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <469> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <471> Var [check]
            │       ├── <483> Assign [=]
            │       │   ├── <477> Var [check]
            │       │   ╰── <482> FunctionCall [check_ulong_arr]
            │       │       ╰── <481> Var [ulong_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <486> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <488> Var [check]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [test_local]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── local_double_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 2
            │       │   │       ╰── Array
            │       │   │           ├── 2
            │       │   │           ╰── Double
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── Compound
            │       │   │       │   ├── Constant Double [+1.1e0]
            │       │   │       │   ╰── Constant Double [+2.2e0]
            │       │   │       ╰── Compound
            │       │   │           ├── Constant Double [+3.3e0]
            │       │   │           ╰── Constant Double [+4.4e0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── check
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <527> FunctionCall [check_double_arr]
            │       │           ╰── <526> Var [local_double_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <531> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <536>  [+]
            │       │                   ├── Constant Int [100]
            │       │                   ╰── <535> Var [check]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── local_long_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 30
            │       │   │       ╰── Array
            │       │   │           ├── 50
            │       │   │           ╰── Array
            │       │   │               ├── 40
            │       │   │               ╰── Long
            │       │   ╰── Static
            │       ├── <559> Assign [=]
            │       │   ├── <553> Var [check]
            │       │   ╰── <558> FunctionCall [check_long_arr]
            │       │       ╰── <557> Var [local_long_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <562> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <567>  [+]
            │       │                   ├── Constant Int [100]
            │       │                   ╰── <566> Var [check]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── local_ulong_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 4
            │       │   │       ╰── Array
            │       │   │           ├── 6
            │       │   │           ╰── Array
            │       │   │               ├── 2
            │       │   │               ╰── Unsigned Long
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── Compound
            │       │   │       │   ├── Compound
            │       │   │       │   │   ╰── Constant Double [+1.0003e3]
            │       │   │       │   ╰── Compound
            │       │   │       │       ╰── Constant UInt [12]
            │       │   │       ╰── Compound
            │       │   │           ╰── Compound
            │       │   │               ╰── Constant Int [2]
            │       │   ╰── Static
            │       ├── <602> Assign [=]
            │       │   ├── <596> Var [check]
            │       │   ╰── <601> FunctionCall [check_ulong_arr]
            │       │       ╰── <600> Var [local_ulong_arr]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <605> Var [check]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── <610>  [+]
            │       │                   ├── Constant Int [100]
            │       │                   ╰── <609> Var [check]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── check
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <627> FunctionCall [test_global]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <631> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <633> Var [check]
                    ╰── Return
                        ╰── <639> FunctionCall [test_local]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_initialization_trailing_comma_initializer() {
    let src = r#"
        int foo(int a, int b, int c);
        int main(void) {
            int arr[3] = {
                1,
                2,
                3,
            };
            return arr[2];
        }
    "#;
    let expected = r#"
        Program
            ├── Function [foo]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── a
            │       │   ╰── Type
            │       │       ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── b
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── c
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ╰── Return
                        ╰── <35> Subscript
                            ├── <33> Var [arr]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_libraries_global_array() {
    let src = r#"
        long arr[4] = {1, 2, 3, 4};
        int double_each_element(void) {
            for (int i = 0; i < 4; i = i + 1) {
                arr[i] = arr[i] * 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 4
            │   │       ╰── Long
            │   ╰── Initializer
            │       ╰── Compound
            │           ├── Constant Int [1]
            │           ├── Constant Int [2]
            │           ├── Constant Int [3]
            │           ╰── Constant Int [4]
            ╰── Function [double_each_element]
                ╰── Body
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <31>  [<]
                    │   │       ├── <28> Var [i]
                    │   │       ╰── Constant Int [4]
                    │   ├── Condition
                    │   │   ╰── <40> Assign [=]
                    │   │       ├── <33> Var [i]
                    │   │       ╰── <39>  [+]
                    │   │           ├── <36> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── <55> Assign [=]
                    │           ├── <45> Subscript
                    │           │   ├── <42> Var [arr]
                    │           │   ╰── <44> Var [i]
                    │           ╰── <54>  [*]
                    │               ├── <51> Subscript
                    │               │   ├── <48> Var [arr]
                    │               │   ╰── <50> Var [i]
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_libraries_global_array_client() {
    let src = r#"
        
        extern long arr[4];
        int double_each_element(void);
        int main(void) {
            for (int i = 0; i < 4; i = i + 1) {
                if (arr[i] != i + 1) {
                    return i + 1;
                }
            }
            double_each_element();
            for (int i = 0; i < 4; i = i + 1) {
                if (arr[i] != (i + 1) * 2) {
                    return i + 5;
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 4
            │   │       ╰── Long
            │   ╰── Extern
            ├── Function [double_each_element]
            ╰── Function [main]
                ╰── Body
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <28>  [<]
                    │   │       ├── <25> Var [i]
                    │   │       ╰── Constant Int [4]
                    │   ├── Condition
                    │   │   ╰── <37> Assign [=]
                    │   │       ├── <30> Var [i]
                    │   │       ╰── <36>  [+]
                    │   │           ├── <33> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <49>  [!=]
                    │           │       ├── <42> Subscript
                    │           │       │   ├── <39> Var [arr]
                    │           │       │   ╰── <41> Var [i]
                    │           │       ╰── <48>  [+]
                    │           │           ├── <45> Var [i]
                    │           │           ╰── Constant Int [1]
                    │           ╰── Then
                    │               ╰── Block
                    │                   ╰── Return
                    │                       ╰── <54>  [+]
                    │                           ├── <51> Var [i]
                    │                           ╰── Constant Int [1]
                    ├── <63> FunctionCall [double_each_element]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <76>  [<]
                    │   │       ├── <73> Var [i]
                    │   │       ╰── Constant Int [4]
                    │   ├── Condition
                    │   │   ╰── <85> Assign [=]
                    │   │       ├── <78> Var [i]
                    │   │       ╰── <84>  [+]
                    │   │           ├── <81> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <101>  [!=]
                    │           │       ├── <90> Subscript
                    │           │       │   ├── <87> Var [arr]
                    │           │       │   ╰── <89> Var [i]
                    │           │       ╰── <100>  [*]
                    │           │           ├── <97>  [+]
                    │           │           │   ├── <93> Var [i]
                    │           │           │   ╰── Constant Int [1]
                    │           │           ╰── Constant Int [2]
                    │           ╰── Then
                    │               ╰── Block
                    │                   ╰── Return
                    │                       ╰── <106>  [+]
                    │                           ├── <103> Var [i]
                    │                           ╰── Constant Int [5]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_libraries_return_pointer_to_array() {
    let src = r#"
        
        long (*return_row(long (*arr)[3][4], int idx))[4] {
            return arr[idx];
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [return_row]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── arr
                │   │   ╰── Type
                │   │       ╰── Pointer
                │   │           ╰── Array
                │   │               ├── 3
                │   │               ╰── Array
                │   │                   ├── 4
                │   │                   ╰── Long
                │   ╰── Param
                │       ├── Name
                │       │   ╰── idx
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ╰── Return
                        ╰── <25> Subscript
                            ├── <22> Var [arr]
                            ╰── <24> Var [idx]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_libraries_return_pointer_to_array_client() {
    let src = r#"
        
        long (*return_row(long (*arr)[3][4], int idx))[4];
        int main(void) {
            long nested_array[2][3][4] = {
                {{0}},
                {{-12, -13, -14, -15}, {-16}}
            };
            long (*row_pointer)[4] = return_row(nested_array, 1);
            for (int i = 0; i < 3; i = i + 1) {
                for (int j = 0; j < 4; j = j + 1) {
                    if (row_pointer[i][j] != nested_array[1][i][j]) {
                        return 1;
                    }
                }
            }
            row_pointer[2][1] = 100;
            if (nested_array[1][2][1] != 100) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [return_row]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Array
            │       │               ├── 3
            │       │               ╰── Array
            │       │                   ├── 4
            │       │                   ╰── Long
            │       ╰── Param
            │           ├── Name
            │           │   ╰── idx
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── nested_array
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 2
                    │   │       ╰── Array
                    │   │           ├── 3
                    │   │           ╰── Array
                    │   │               ├── 4
                    │   │               ╰── Long
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ╰── Compound
                    │           │       ╰── Constant Int [0]
                    │           ╰── Compound
                    │               ├── Compound
                    │               │   ├── <41> Unary [-]
                    │               │   │   ╰── Constant Int [12]
                    │               │   ├── <45> Unary [-]
                    │               │   │   ╰── Constant Int [13]
                    │               │   ├── <49> Unary [-]
                    │               │   │   ╰── Constant Int [14]
                    │               │   ╰── <53> Unary [-]
                    │               │       ╰── Constant Int [15]
                    │               ╰── Compound
                    │                   ╰── <58> Unary [-]
                    │                       ╰── Constant Int [16]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── row_pointer
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Array
                    │   │           ├── 4
                    │   │           ╰── Long
                    │   ╰── Initializer
                    │       ╰── <75> FunctionCall [return_row]
                    │           ├── <73> Var [nested_array]
                    │           ╰── Constant Int [1]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <89>  [<]
                    │   │       ├── <86> Var [i]
                    │   │       ╰── Constant Int [3]
                    │   ├── Condition
                    │   │   ╰── <98> Assign [=]
                    │   │       ├── <91> Var [i]
                    │   │       ╰── <97>  [+]
                    │   │           ├── <94> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── For
                    │           ├── Init
                    │           │   ╰── VarDeclaration
                    │           │       ├── Name
                    │           │       │   ╰── j
                    │           │       ├── Type
                    │           │       │   ╰── Int
                    │           │       ╰── Initializer
                    │           │           ╰── Constant Int [0]
                    │           ├── Condition
                    │           │   ╰── <110>  [<]
                    │           │       ├── <107> Var [j]
                    │           │       ╰── Constant Int [4]
                    │           ├── Condition
                    │           │   ╰── <119> Assign [=]
                    │           │       ├── <112> Var [j]
                    │           │       ╰── <118>  [+]
                    │           │           ├── <115> Var [j]
                    │           │           ╰── Constant Int [1]
                    │           ╰── Block
                    │               ╰── If
                    │                   ├── Condition
                    │                   │   ╰── <139>  [!=]
                    │                   │       ├── <127> Subscript
                    │                   │       │   ├── <124> Subscript
                    │                   │       │   │   ├── <121> Var [row_pointer]
                    │                   │       │   │   ╰── <123> Var [i]
                    │                   │       │   ╰── <126> Var [j]
                    │                   │       ╰── <138> Subscript
                    │                   │           ├── <135> Subscript
                    │                   │           │   ├── <132> Subscript
                    │                   │           │   │   ├── <130> Var [nested_array]
                    │                   │           │   │   ╰── Constant Int [1]
                    │                   │           │   ╰── <134> Var [i]
                    │                   │           ╰── <137> Var [j]
                    │                   ╰── Then
                    │                       ╰── Block
                    │                           ╰── Return
                    │                               ╰── Constant Int [1]
                    ├── <159> Assign [=]
                    │   ├── <156> Subscript
                    │   │   ├── <154> Subscript
                    │   │   │   ├── <152> Var [row_pointer]
                    │   │   │   ╰── Constant Int [2]
                    │   │   ╰── Constant Int [1]
                    │   ╰── Constant Int [100]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <171>  [!=]
                    │   │       ├── <168> Subscript
                    │   │       │   ├── <166> Subscript
                    │   │       │   │   ├── <164> Subscript
                    │   │       │   │   │   ├── <162> Var [nested_array]
                    │   │       │   │   │   ╰── Constant Int [1]
                    │   │       │   │   ╰── Constant Int [2]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── Constant Int [100]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_libraries_set_array_val() {
    let src = r#"
        int set_nth_element(double *arr, int idx) {
            for (int i = 0; i < 5; i = i + 1) {
                if (arr[i]) {
                    return 1;
                }
            }
            arr[idx] = 8;
            return 0;
        }
        int set_nested_element(int (*arr)[2], int i, int j) {
            for (int x = 0; x < 3; x = x + 1) {
                for (int y = 0; y < 2; y = y + 1) {
                    int expected = -10 + 2*x + y;
                    if (arr[x][y] != expected) {
                        return 4;
                    }
                }
            }
            arr[i][j] = 10;
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [set_nth_element]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── arr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── idx
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── For
            │       │   ├── Init
            │       │   │   ╰── VarDeclaration
            │       │   │       ├── Name
            │       │   │       │   ╰── i
            │       │   │       ├── Type
            │       │   │       │   ╰── Int
            │       │   │       ╰── Initializer
            │       │   │           ╰── Constant Int [0]
            │       │   ├── Condition
            │       │   │   ╰── <23>  [<]
            │       │   │       ├── <20> Var [i]
            │       │   │       ╰── Constant Int [5]
            │       │   ├── Condition
            │       │   │   ╰── <32> Assign [=]
            │       │   │       ├── <25> Var [i]
            │       │   │       ╰── <31>  [+]
            │       │   │           ├── <28> Var [i]
            │       │   │           ╰── Constant Int [1]
            │       │   ╰── Block
            │       │       ╰── If
            │       │           ├── Condition
            │       │           │   ╰── <37> Subscript
            │       │           │       ├── <34> Var [arr]
            │       │           │       ╰── <36> Var [i]
            │       │           ╰── Then
            │       │               ╰── Block
            │       │                   ╰── Return
            │       │                       ╰── Constant Int [1]
            │       ├── <53> Assign [=]
            │       │   ├── <50> Subscript
            │       │   │   ├── <47> Var [arr]
            │       │   │   ╰── <49> Var [idx]
            │       │   ╰── Constant Int [8]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [set_nested_element]
                ├── Parameters
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── arr
                │   │   ╰── Type
                │   │       ╰── Pointer
                │   │           ╰── Array
                │   │               ├── 2
                │   │               ╰── Int
                │   ├── Param
                │   │   ├── Name
                │   │   │   ╰── i
                │   │   ╰── Type
                │   │       ╰── Int
                │   ╰── Param
                │       ├── Name
                │       │   ╰── j
                │       ╰── Type
                │           ╰── Int
                ╰── Body
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── x
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <87>  [<]
                    │   │       ├── <84> Var [x]
                    │   │       ╰── Constant Int [3]
                    │   ├── Condition
                    │   │   ╰── <96> Assign [=]
                    │   │       ├── <89> Var [x]
                    │   │       ╰── <95>  [+]
                    │   │           ├── <92> Var [x]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── For
                    │           ├── Init
                    │           │   ╰── VarDeclaration
                    │           │       ├── Name
                    │           │       │   ╰── y
                    │           │       ├── Type
                    │           │       │   ╰── Int
                    │           │       ╰── Initializer
                    │           │           ╰── Constant Int [0]
                    │           ├── Condition
                    │           │   ╰── <108>  [<]
                    │           │       ├── <105> Var [y]
                    │           │       ╰── Constant Int [2]
                    │           ├── Condition
                    │           │   ╰── <117> Assign [=]
                    │           │       ├── <110> Var [y]
                    │           │       ╰── <116>  [+]
                    │           │           ├── <113> Var [y]
                    │           │           ╰── Constant Int [1]
                    │           ╰── Block
                    │               ├── VarDeclaration
                    │               │   ├── Name
                    │               │   │   ╰── expected
                    │               │   ├── Type
                    │               │   │   ╰── Int
                    │               │   ╰── Initializer
                    │               │       ╰── <134>  [+]
                    │               │           ├── <130>  [+]
                    │               │           │   ├── <123> Unary [-]
                    │               │           │   │   ╰── Constant Int [10]
                    │               │           │   ╰── <129>  [*]
                    │               │           │       ├── Constant Int [2]
                    │               │           │       ╰── <128> Var [x]
                    │               │           ╰── <133> Var [y]
                    │               ╰── If
                    │                   ├── Condition
                    │                   │   ╰── <148>  [!=]
                    │                   │       ├── <144> Subscript
                    │                   │       │   ├── <141> Subscript
                    │                   │       │   │   ├── <138> Var [arr]
                    │                   │       │   │   ╰── <140> Var [x]
                    │                   │       │   ╰── <143> Var [y]
                    │                   │       ╰── <147> Var [expected]
                    │                   ╰── Then
                    │                       ╰── Block
                    │                           ╰── Return
                    │                               ╰── Constant Int [4]
                    ├── <170> Assign [=]
                    │   ├── <167> Subscript
                    │   │   ├── <164> Subscript
                    │   │   │   ├── <161> Var [arr]
                    │   │   │   ╰── <163> Var [i]
                    │   │   ╰── <166> Var [j]
                    │   ╰── Constant Int [10]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_libraries_set_array_val_client() {
    let src = r#"
        int set_nth_element(double *arr, int idx);
        int set_nested_element(int (*arr)[2], int i, int j);
        int main(void) {
            double arr[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
            int check = set_nth_element(arr, 4);
            if (check) {
                return check;
            }
            for (int i = 0; i < 4; i = i + 1) {
                if (arr[i] != 0) {
                    return 2;
                }
            }
            if (arr[4] != 8)
                return 3;
            int nested_arr[3][2] = {{-10, -9}, {-8, -7}, {-6, -5}};
            check = set_nested_element(nested_arr, 2, 1);
            if (check) {
                return check;
            }
            for (int i = 0; i < 3; i = i + 1) {
                for (int j = 0; j < 2; j = j + 1) {
                    if (i == 2 && j == 1) {
                        if (nested_arr[i][j] != 10) {
                            return 5;
                        }
                    } else {
                        int expected = -10 + 2 * i + j;
                        if (nested_arr[i][j] != expected) {
                            return 6;
                        }
                    }
                }
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [set_nth_element]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Double
            │       ╰── Param
            │           ├── Name
            │           │   ╰── idx
            │           ╰── Type
            │               ╰── Int
            ├── Function [set_nested_element]
            │   ╰── Parameters
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ╰── Type
            │       │       ╰── Pointer
            │       │           ╰── Array
            │       │               ├── 2
            │       │               ╰── Int
            │       ├── Param
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ╰── Type
            │       │       ╰── Int
            │       ╰── Param
            │           ├── Name
            │           │   ╰── j
            │           ╰── Type
            │               ╰── Int
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 5
                    │   │       ╰── Double
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Double [+0e0]
                    │           ├── Constant Double [+0e0]
                    │           ├── Constant Double [+0e0]
                    │           ├── Constant Double [+0e0]
                    │           ╰── Constant Double [+0e0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── check
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <59> FunctionCall [set_nth_element]
                    │           ├── <57> Var [arr]
                    │           ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <63> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <65> Var [check]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <81>  [<]
                    │   │       ├── <78> Var [i]
                    │   │       ╰── Constant Int [4]
                    │   ├── Condition
                    │   │   ╰── <90> Assign [=]
                    │   │       ├── <83> Var [i]
                    │   │       ╰── <89>  [+]
                    │   │           ├── <86> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── If
                    │           ├── Condition
                    │           │   ╰── <98>  [!=]
                    │           │       ├── <95> Subscript
                    │           │       │   ├── <92> Var [arr]
                    │           │       │   ╰── <94> Var [i]
                    │           │       ╰── Constant Int [0]
                    │           ╰── Then
                    │               ╰── Block
                    │                   ╰── Return
                    │                       ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <113>  [!=]
                    │   │       ├── <110> Subscript
                    │   │       │   ├── <108> Var [arr]
                    │   │       │   ╰── Constant Int [4]
                    │   │       ╰── Constant Int [8]
                    │   ╰── Then
                    │       ╰── Return
                    │           ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── nested_arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Array
                    │   │           ├── 2
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── <126> Unary [-]
                    │           │   │   ╰── Constant Int [10]
                    │           │   ╰── <130> Unary [-]
                    │           │       ╰── Constant Int [9]
                    │           ├── Compound
                    │           │   ├── <135> Unary [-]
                    │           │   │   ╰── Constant Int [8]
                    │           │   ╰── <139> Unary [-]
                    │           │       ╰── Constant Int [7]
                    │           ╰── Compound
                    │               ├── <144> Unary [-]
                    │               │   ╰── Constant Int [6]
                    │               ╰── <148> Unary [-]
                    │                   ╰── Constant Int [5]
                    ├── <162> Assign [=]
                    │   ├── <154> Var [check]
                    │   ╰── <161> FunctionCall [set_nested_element]
                    │       ├── <158> Var [nested_arr]
                    │       ├── Constant Int [2]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <165> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <167> Var [check]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <183>  [<]
                    │   │       ├── <180> Var [i]
                    │   │       ╰── Constant Int [3]
                    │   ├── Condition
                    │   │   ╰── <192> Assign [=]
                    │   │       ├── <185> Var [i]
                    │   │       ╰── <191>  [+]
                    │   │           ├── <188> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── For
                    │           ├── Init
                    │           │   ╰── VarDeclaration
                    │           │       ├── Name
                    │           │       │   ╰── j
                    │           │       ├── Type
                    │           │       │   ╰── Int
                    │           │       ╰── Initializer
                    │           │           ╰── Constant Int [0]
                    │           ├── Condition
                    │           │   ╰── <204>  [<]
                    │           │       ├── <201> Var [j]
                    │           │       ╰── Constant Int [2]
                    │           ├── Condition
                    │           │   ╰── <213> Assign [=]
                    │           │       ├── <206> Var [j]
                    │           │       ╰── <212>  [+]
                    │           │           ├── <209> Var [j]
                    │           │           ╰── Constant Int [1]
                    │           ╰── Block
                    │               ╰── If
                    │                   ├── Condition
                    │                   │   ╰── <225>  [&&]
                    │                   │       ├── <218>  [==]
                    │                   │       │   ├── <215> Var [i]
                    │                   │       │   ╰── Constant Int [2]
                    │                   │       ╰── <224>  [==]
                    │                   │           ├── <221> Var [j]
                    │                   │           ╰── Constant Int [1]
                    │                   ├── Then
                    │                   │   ╰── Block
                    │                   │       ╰── If
                    │                   │           ├── Condition
                    │                   │           │   ╰── <236>  [!=]
                    │                   │           │       ├── <233> Subscript
                    │                   │           │       │   ├── <230> Subscript
                    │                   │           │       │   │   ├── <227> Var [nested_arr]
                    │                   │           │       │   │   ╰── <229> Var [i]
                    │                   │           │       │   ╰── <232> Var [j]
                    │                   │           │       ╰── Constant Int [10]
                    │                   │           ╰── Then
                    │                   │               ╰── Block
                    │                   │                   ╰── Return
                    │                   │                       ╰── Constant Int [5]
                    │                   ╰── Else
                    │                       ╰── Block
                    │                           ├── VarDeclaration
                    │                           │   ├── Name
                    │                           │   │   ╰── expected
                    │                           │   ├── Type
                    │                           │   │   ╰── Int
                    │                           │   ╰── Initializer
                    │                           │       ╰── <260>  [+]
                    │                           │           ├── <256>  [+]
                    │                           │           │   ├── <249> Unary [-]
                    │                           │           │   │   ╰── Constant Int [10]
                    │                           │           │   ╰── <255>  [*]
                    │                           │           │       ├── Constant Int [2]
                    │                           │           │       ╰── <254> Var [i]
                    │                           │           ╰── <259> Var [j]
                    │                           ╰── If
                    │                               ├── Condition
                    │                               │   ╰── <274>  [!=]
                    │                               │       ├── <270> Subscript
                    │                               │       │   ├── <267> Subscript
                    │                               │       │   │   ├── <264> Var [nested_arr]
                    │                               │       │   │   ╰── <266> Var [i]
                    │                               │       │   ╰── <269> Var [j]
                    │                               │       ╰── <273> Var [expected]
                    │                               ╰── Then
                    │                                   ╰── Block
                    │                                       ╰── Return
                    │                                           ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_pointer_arithmetic_add_dereference_and_assign() {
    let src = r#"
        int main(void) {
            int arr[2] = {1, 2};
            *arr = 3;
            *(arr + 1) = 4;
            if (arr[0] != 3) {
                return 1;
            }
            if (arr[1] != 4) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 2
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ╰── Constant Int [2]
                    ├── <21> Assign [=]
                    │   ├── <18> Dereference
                    │   │   ╰── <17> Var [arr]
                    │   ╰── Constant Int [3]
                    ├── <32> Assign [=]
                    │   ├── <29> Dereference
                    │   │   ╰── <28>  [+]
                    │   │       ├── <24> Var [arr]
                    │   │       ╰── Constant Int [1]
                    │   ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <40>  [!=]
                    │   │       ├── <37> Subscript
                    │   │       │   ├── <35> Var [arr]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <52>  [!=]
                    │   │       ├── <49> Subscript
                    │   │       │   ├── <47> Var [arr]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_pointer_arithmetic_compare() {
    let src = r#"
        unsigned long gt(unsigned long *a, unsigned long *b) {
            return a > b;
        }
        unsigned long lt(unsigned long *a, unsigned long *b) {
            return a < b;
        }
        unsigned long ge(unsigned long *a, unsigned long *b) {
            return a >= b;
        }
        unsigned long le(unsigned long *a, unsigned long *b) {
            return a <= b;
        }
        unsigned long gt_nested(unsigned long (*a)[5], unsigned long (*b)[5]) {
            return a > b;
        }
        unsigned long ge_nested(unsigned long (*a)[5], unsigned long (*b)[5]) {
            return a >= b;
        }
        int main(void)
        {
            unsigned long arr[5];
            unsigned long *elem_1 = arr + 1;
            unsigned long *elem_4 = arr + 4;
            if (gt(elem_1, elem_4)) {
                return 1;
            }
            if (!(lt(elem_1, elem_4))) {
                return 2;
            }
            if (!(ge(elem_1, elem_1))) {
                return 3;
            }
            if (le(elem_4, elem_1)) {
                return 4;
            }
            unsigned long *one_past_the_end = arr + 5;
            if (!(gt(one_past_the_end, elem_4))) {
                return 5;
            }
            if (one_past_the_end != elem_4 + 1) {
                return 6;
            }
            unsigned long nested_arr[4][5];
            unsigned long *elem_3_2 = *(nested_arr + 3) + 2;
            unsigned long *elem_3_3 = *(nested_arr + 3) + 3;
            if (lt(elem_3_3, elem_3_2)) {
                return 7;
            }
            if (!ge(elem_3_3, elem_3_2)) {
                return 8;
            }
            unsigned long (*subarray_0)[5] = nested_arr;
            unsigned long (*subarray_3)[5] = nested_arr + 3;
            unsigned long (*subarray_one_past_the_end)[5] = nested_arr + 4;
            if (ge_nested(subarray_0, subarray_3)){
                return 9;
            }
            if (!(gt_nested(subarray_one_past_the_end, subarray_3))) {
                return 10;
            }
            if (subarray_3 != subarray_one_past_the_end - 1) {
                return 11;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [gt]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <18>  [>]
            │               ├── <14> Var [a]
            │               ╰── <17> Var [b]
            ├── Function [lt]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <39>  [<]
            │               ├── <35> Var [a]
            │               ╰── <38> Var [b]
            ├── Function [ge]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <60>  [>=]
            │               ├── <56> Var [a]
            │               ╰── <59> Var [b]
            ├── Function [le]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <81>  [<=]
            │               ├── <77> Var [a]
            │               ╰── <80> Var [b]
            ├── Function [gt_nested]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Array
            │   │   │               ├── 5
            │   │   │               ╰── Unsigned Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Array
            │   │                   ├── 5
            │   │                   ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <108>  [>]
            │               ├── <104> Var [a]
            │               ╰── <107> Var [b]
            ├── Function [ge_nested]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Array
            │   │   │               ├── 5
            │   │   │               ╰── Unsigned Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Array
            │   │                   ├── 5
            │   │                   ╰── Unsigned Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <135>  [>=]
            │               ├── <131> Var [a]
            │               ╰── <134> Var [b]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ╰── Type
                    │       ╰── Array
                    │           ├── 5
                    │           ╰── Unsigned Long
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── elem_1
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <157>  [+]
                    │           ├── <154> Var [arr]
                    │           ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── elem_4
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <168>  [+]
                    │           ├── <165> Var [arr]
                    │           ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <176> FunctionCall [gt]
                    │   │       ├── <173> Var [elem_1]
                    │   │       ╰── <175> Var [elem_4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <190> Unary [!]
                    │   │       ╰── <189> FunctionCall [lt]
                    │   │           ├── <185> Var [elem_1]
                    │   │           ╰── <187> Var [elem_4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <204> Unary [!]
                    │   │       ╰── <203> FunctionCall [ge]
                    │   │           ├── <199> Var [elem_1]
                    │   │           ╰── <201> Var [elem_1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <215> FunctionCall [le]
                    │   │       ├── <212> Var [elem_4]
                    │   │       ╰── <214> Var [elem_1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── one_past_the_end
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <229>  [+]
                    │           ├── <226> Var [arr]
                    │           ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <240> Unary [!]
                    │   │       ╰── <239> FunctionCall [gt]
                    │   │           ├── <235> Var [one_past_the_end]
                    │   │           ╰── <237> Var [elem_4]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <254>  [!=]
                    │   │       ├── <247> Var [one_past_the_end]
                    │   │       ╰── <253>  [+]
                    │   │           ├── <250> Var [elem_4]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── nested_arr
                    │   ╰── Type
                    │       ╰── Array
                    │           ├── 4
                    │           ╰── Array
                    │               ├── 5
                    │               ╰── Unsigned Long
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── elem_3_2
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <281>  [+]
                    │           ├── <278> Dereference
                    │           │   ╰── <277>  [+]
                    │           │       ├── <273> Var [nested_arr]
                    │           │       ╰── Constant Int [3]
                    │           ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── elem_3_3
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <297>  [+]
                    │           ├── <294> Dereference
                    │           │   ╰── <293>  [+]
                    │           │       ├── <289> Var [nested_arr]
                    │           │       ╰── Constant Int [3]
                    │           ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <305> FunctionCall [lt]
                    │   │       ├── <302> Var [elem_3_3]
                    │   │       ╰── <304> Var [elem_3_2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <318> Unary [!]
                    │   │       ╰── <317> FunctionCall [ge]
                    │   │           ├── <314> Var [elem_3_3]
                    │   │           ╰── <316> Var [elem_3_2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── subarray_0
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Array
                    │   │           ├── 5
                    │   │           ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <332> Var [nested_arr]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── subarray_3
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Array
                    │   │           ├── 5
                    │   │           ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <346>  [+]
                    │           ├── <343> Var [nested_arr]
                    │           ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── subarray_one_past_the_end
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Array
                    │   │           ├── 5
                    │   │           ╰── Unsigned Long
                    │   ╰── Initializer
                    │       ╰── <360>  [+]
                    │           ├── <357> Var [nested_arr]
                    │           ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <368> FunctionCall [ge_nested]
                    │   │       ├── <365> Var [subarray_0]
                    │   │       ╰── <367> Var [subarray_3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <382> Unary [!]
                    │   │       ╰── <381> FunctionCall [gt_nested]
                    │   │           ├── <377> Var [subarray_one_past_the_end]
                    │   │           ╰── <379> Var [subarray_3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <396>  [!=]
                    │   │       ├── <389> Var [subarray_3]
                    │   │       ╰── <395>  [-]
                    │   │           ├── <392> Var [subarray_one_past_the_end]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [11]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_pointer_arithmetic_pointer_add() {
    let src = r#"
        int test_add_constant_to_pointer(void) {
            long long_arr[12] = {0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 13};
            long *ptr = long_arr + 10;
            return *ptr == 13;
        }
        int test_add_negative_index(void) {
            unsigned unsigned_arr[12] = {0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 42};
            unsigned *end_ptr = unsigned_arr + 12;
            unsigned *ptr = end_ptr + -10;
            return *ptr == 2;
        }
        int test_add_pointer_to_int(void) {
            int int_arr[5] = {0, 98, 99};
            int *ptr1 = int_arr + 2;
            int *ptr2 = 2 + int_arr;
            return (ptr1 == ptr2 && *ptr2 == 99);
        }
        int test_add_different_index_types(void) {
            double double_arr[11] = {0, 0, 0, 0, 0, 6.0};
            double *ptr1 = double_arr + 5;
            double *ptr2 = double_arr + 5l;
            double *ptr3 = double_arr + 5u;
            double *ptr4 = double_arr + 5ul;
            return (ptr1 == ptr2 && ptr1 == ptr3 && ptr1 == ptr4 && *ptr4 == 6.0);
        }
        int test_add_complex_expressions(void) {
            static int flag;
            int i = -2;
            int *small_int_ptr = &i;
            extern int return_one(void);
            extern int *get_elem1_ptr(int *arr);
            extern int *get_elem2_ptr(int *arr);
            static int arr[4] = {1, 2, 3, 4};
            int *ptr = return_one() + (*small_int_ptr) +
                       (flag ? get_elem1_ptr(arr) : get_elem2_ptr(arr));
            return (ptr == arr + 1 && *ptr == 2);
        }
        int return_one(void) {
            return 1;
        }
        int *get_elem1_ptr(int *arr) {
            return arr + 1;
        }
        int *get_elem2_ptr(int *arr) {
            return arr + 2;
        }
        int test_add_multi_dimensional(void) {
            static int index = 2;
            int nested_arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
            int(*row_pointer)[3] = nested_arr + index;
            return **row_pointer == 7;
        }
        int test_add_to_subarray_pointer(void) {
            static int index = 2;
            int nested_arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
            int *row1 = *(nested_arr + 1);
            int *elem_ptr = row1 + index;
            return *elem_ptr == 6;
        }
        int test_subtract_from_pointer(void) {
            long long_arr[5] = {10, 9, 8, 7, 6};
            long *one_past_the_end = long_arr + 5;
            static int index = 3;
            long *subtraction_result = one_past_the_end - index;
            return *subtraction_result == 8;
        }
        int test_subtract_negative_index(void) {
            unsigned arr[5] = {100, 101, 102, 103, 104};
            unsigned *ptr = arr - (-3);
            return *ptr == 103;
        }
        int test_subtract_different_index_types(void) {
            double double_arr[11] = {0, 0, 0, 0, 0, 0, 6.0};
            double *end_ptr = double_arr + 11;
            double *ptr1 = end_ptr - 5;
            double *ptr2 = end_ptr - 5l;
            double *ptr3 = end_ptr - 5u;
            double *ptr4 = end_ptr - 5ul;
            return (ptr1 == ptr2 && ptr1 == ptr3 && ptr1 == ptr4 && *ptr4 == 6.0);
        }
        int test_subtract_complex_expressions(void) {
            static int flag = 1;
            static int four = 4;
            static int arr[4] = {1, 2, 3, 4};
            int *ptr = (flag ? get_elem1_ptr(arr) : get_elem2_ptr(arr)) - (four / -2);
            return (*ptr == 4);
        }
        int test_subtract_multi_dimensional(void) {
            static int index = 1;
            int nested_arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
            int(*last_row_pointer)[3] = nested_arr + 2;
            int(*row_pointer)[3] = last_row_pointer - index;
            return (**row_pointer == 4);
        }
        int main(void) {
            if (!test_add_constant_to_pointer()) {
                return 1;
            }
            if (!test_add_negative_index()) {
                return 2;
            }
            if (!test_add_pointer_to_int()) {
                return 3;
            }
            if (!test_add_different_index_types()) {
                return 4;
            }
            if (!test_add_complex_expressions()) {
                return 5;
            }
            if (!test_add_multi_dimensional()) {
                return 6;
            }
            if (!test_add_to_subarray_pointer()) {
                return 7;
            }
            if (!test_subtract_from_pointer()) {
                return 8;
            }
            if (!test_subtract_negative_index()) {
                return 9;
            }
            if (!test_subtract_different_index_types()) {
                return 10;
            }
            if (!test_subtract_complex_expressions()) {
                return 11;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [test_add_constant_to_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── long_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 12
            │       │   │       ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [3]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ╰── Constant Int [13]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <42>  [+]
            │       │           ├── <39> Var [long_arr]
            │       │           ╰── Constant Int [10]
            │       ╰── Return
            │           ╰── <50>  [==]
            │               ├── <47> Dereference
            │               │   ╰── <46> Var [ptr]
            │               ╰── Constant Int [13]
            ├── Function [test_add_negative_index]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── unsigned_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 12
            │       │   │       ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [2]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ╰── Constant Int [42]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── end_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── <95>  [+]
            │       │           ├── <92> Var [unsigned_arr]
            │       │           ╰── Constant Int [12]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── <108>  [+]
            │       │           ├── <103> Var [end_ptr]
            │       │           ╰── <107> Unary [-]
            │       │               ╰── Constant Int [10]
            │       ╰── Return
            │           ╰── <116>  [==]
            │               ├── <113> Dereference
            │               │   ╰── <112> Var [ptr]
            │               ╰── Constant Int [2]
            ├── Function [test_add_pointer_to_int]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── int_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 5
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [98]
            │       │           ╰── Constant Int [99]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr1
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <145>  [+]
            │       │           ├── <142> Var [int_arr]
            │       │           ╰── Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr2
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <156>  [+]
            │       │           ├── Constant Int [2]
            │       │           ╰── <155> Var [int_arr]
            │       ╰── Return
            │           ╰── <173>  [&&]
            │               ├── <164>  [==]
            │               │   ├── <160> Var [ptr1]
            │               │   ╰── <163> Var [ptr2]
            │               ╰── <171>  [==]
            │                   ├── <168> Dereference
            │                   │   ╰── <167> Var [ptr2]
            │                   ╰── Constant Int [99]
            ├── Function [test_add_different_index_types]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── double_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 11
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ╰── Constant Double [+6e0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr1
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <208>  [+]
            │       │           ├── <205> Var [double_arr]
            │       │           ╰── Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr2
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <219>  [+]
            │       │           ├── <216> Var [double_arr]
            │       │           ╰── Constant Long [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr3
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <230>  [+]
            │       │           ├── <227> Var [double_arr]
            │       │           ╰── Constant UInt [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr4
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <241>  [+]
            │       │           ├── <238> Var [double_arr]
            │       │           ╰── Constant ULong [5]
            │       ╰── Return
            │           ╰── <274>  [&&]
            │               ├── <265>  [&&]
            │               │   ├── <257>  [&&]
            │               │   │   ├── <249>  [==]
            │               │   │   │   ├── <245> Var [ptr1]
            │               │   │   │   ╰── <248> Var [ptr2]
            │               │   │   ╰── <256>  [==]
            │               │   │       ├── <252> Var [ptr1]
            │               │   │       ╰── <255> Var [ptr3]
            │               │   ╰── <264>  [==]
            │               │       ├── <260> Var [ptr1]
            │               │       ╰── <263> Var [ptr4]
            │               ╰── <272>  [==]
            │                   ├── <269> Dereference
            │                   │   ╰── <268> Var [ptr4]
            │                   ╰── Constant Double [+6e0]
            ├── Function [test_add_complex_expressions]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── flag
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── i
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <292> Unary [-]
            │       │           ╰── Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── small_int_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <301> AddressOf
            │       │           ╰── <300> Var [i]
            │       ├── Function [extern return_one]
            │       ├── Function [extern get_elem1_ptr]
            │       │   ╰── Parameters
            │       │       ╰── Param
            │       │           ├── Name
            │       │           │   ╰── arr
            │       │           ╰── Type
            │       │               ╰── Pointer
            │       │                   ╰── Int
            │       ├── Function [extern get_elem2_ptr]
            │       │   ╰── Parameters
            │       │       ╰── Param
            │       │           ├── Name
            │       │           │   ╰── arr
            │       │           ╰── Type
            │       │               ╰── Pointer
            │       │                   ╰── Int
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 4
            │       │   │       ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── Constant Int [1]
            │       │   │       ├── Constant Int [2]
            │       │   │       ├── Constant Int [3]
            │       │   │       ╰── Constant Int [4]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <373>  [+]
            │       │           ├── <359>  [+]
            │       │           │   ├── <353> FunctionCall [return_one]
            │       │           │   ╰── <358> Dereference
            │       │           │       ╰── <356> Var [small_int_ptr]
            │       │           ╰── <{node_id}> Conditional [?]
            │       │               ├── <362> Var [flag]
            │       │               ├── Then
            │       │               │   ╰── <366> FunctionCall [get_elem1_ptr]
            │       │               │       ╰── <365> Var [arr]
            │       │               ╰── Else
            │       │                   ╰── <370> FunctionCall [get_elem2_ptr]
            │       │                       ╰── <369> Var [arr]
            │       ╰── Return
            │           ╰── <393>  [&&]
            │               ├── <384>  [==]
            │               │   ├── <377> Var [ptr]
            │               │   ╰── <383>  [+]
            │               │       ├── <380> Var [arr]
            │               │       ╰── Constant Int [1]
            │               ╰── <391>  [==]
            │                   ├── <388> Dereference
            │                   │   ╰── <387> Var [ptr]
            │                   ╰── Constant Int [2]
            ├── Function [return_one]
            │   ╰── Body
            │       ╰── Return
            │           ╰── Constant Int [1]
            ├── Function [get_elem1_ptr]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── arr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <418>  [+]
            │               ├── <415> Var [arr]
            │               ╰── Constant Int [1]
            ├── Function [get_elem2_ptr]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── arr
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <435>  [+]
            │               ├── <432> Var [arr]
            │               ╰── Constant Int [2]
            ├── Function [test_add_multi_dimensional]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── index
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [2]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── nested_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Array
            │       │   │           ├── 3
            │       │   │           ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── Constant Int [1]
            │       │           │   ├── Constant Int [2]
            │       │           │   ╰── Constant Int [3]
            │       │           ├── Compound
            │       │           │   ├── Constant Int [4]
            │       │           │   ├── Constant Int [5]
            │       │           │   ╰── Constant Int [6]
            │       │           ╰── Compound
            │       │               ├── Constant Int [7]
            │       │               ├── Constant Int [8]
            │       │               ╰── Constant Int [9]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── row_pointer
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Array
            │       │   │           ├── 3
            │       │   │           ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <492>  [+]
            │       │           ├── <488> Var [nested_arr]
            │       │           ╰── <491> Var [index]
            │       ╰── Return
            │           ╰── <501>  [==]
            │               ├── <498> Dereference
            │               │   ╰── <497> Dereference
            │               │       ╰── <496> Var [row_pointer]
            │               ╰── Constant Int [7]
            ├── Function [test_add_to_subarray_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── index
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [2]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── nested_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Array
            │       │   │           ├── 3
            │       │   │           ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── Constant Int [1]
            │       │           │   ├── Constant Int [2]
            │       │           │   ╰── Constant Int [3]
            │       │           ├── Compound
            │       │           │   ├── Constant Int [4]
            │       │           │   ├── Constant Int [5]
            │       │           │   ╰── Constant Int [6]
            │       │           ╰── Compound
            │       │               ├── Constant Int [7]
            │       │               ├── Constant Int [8]
            │       │               ╰── Constant Int [9]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── row1
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <556> Dereference
            │       │           ╰── <555>  [+]
            │       │               ├── <551> Var [nested_arr]
            │       │               ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── elem_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <568>  [+]
            │       │           ├── <564> Var [row1]
            │       │           ╰── <567> Var [index]
            │       ╰── Return
            │           ╰── <576>  [==]
            │               ├── <573> Dereference
            │               │   ╰── <572> Var [elem_ptr]
            │               ╰── Constant Int [6]
            ├── Function [test_subtract_from_pointer]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── long_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 5
            │       │   │       ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [10]
            │       │           ├── Constant Int [9]
            │       │           ├── Constant Int [8]
            │       │           ├── Constant Int [7]
            │       │           ╰── Constant Int [6]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── one_past_the_end
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <609>  [+]
            │       │           ├── <606> Var [long_arr]
            │       │           ╰── Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── index
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [3]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── subtraction_result
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── <628>  [-]
            │       │           ├── <624> Var [one_past_the_end]
            │       │           ╰── <627> Var [index]
            │       ╰── Return
            │           ╰── <636>  [==]
            │               ├── <633> Dereference
            │               │   ╰── <632> Var [subtraction_result]
            │               ╰── Constant Int [8]
            ├── Function [test_subtract_negative_index]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 5
            │       │   │       ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [100]
            │       │           ├── Constant Int [101]
            │       │           ├── Constant Int [102]
            │       │           ├── Constant Int [103]
            │       │           ╰── Constant Int [104]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── <672>  [-]
            │       │           ├── <666> Var [arr]
            │       │           ╰── <671> Unary [-]
            │       │               ╰── Constant Int [3]
            │       ╰── Return
            │           ╰── <680>  [==]
            │               ├── <677> Dereference
            │               │   ╰── <676> Var [ptr]
            │               ╰── Constant Int [103]
            ├── Function [test_subtract_different_index_types]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── double_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 11
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ├── Constant Int [0]
            │       │           ╰── Constant Double [+6e0]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── end_ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <717>  [+]
            │       │           ├── <714> Var [double_arr]
            │       │           ╰── Constant Int [11]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr1
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <728>  [-]
            │       │           ├── <725> Var [end_ptr]
            │       │           ╰── Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr2
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <739>  [-]
            │       │           ├── <736> Var [end_ptr]
            │       │           ╰── Constant Long [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr3
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <750>  [-]
            │       │           ├── <747> Var [end_ptr]
            │       │           ╰── Constant UInt [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr4
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Double
            │       │   ╰── Initializer
            │       │       ╰── <761>  [-]
            │       │           ├── <758> Var [end_ptr]
            │       │           ╰── Constant ULong [5]
            │       ╰── Return
            │           ╰── <794>  [&&]
            │               ├── <785>  [&&]
            │               │   ├── <777>  [&&]
            │               │   │   ├── <769>  [==]
            │               │   │   │   ├── <765> Var [ptr1]
            │               │   │   │   ╰── <768> Var [ptr2]
            │               │   │   ╰── <776>  [==]
            │               │   │       ├── <772> Var [ptr1]
            │               │   │       ╰── <775> Var [ptr3]
            │               │   ╰── <784>  [==]
            │               │       ├── <780> Var [ptr1]
            │               │       ╰── <783> Var [ptr4]
            │               ╰── <792>  [==]
            │                   ├── <789> Dereference
            │                   │   ╰── <788> Var [ptr4]
            │                   ╰── Constant Double [+6e0]
            ├── Function [test_subtract_complex_expressions]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── flag
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [1]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── four
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [4]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 4
            │       │   │       ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Compound
            │       │   │       ├── Constant Int [1]
            │       │   │       ├── Constant Int [2]
            │       │   │       ├── Constant Int [3]
            │       │   │       ╰── Constant Int [4]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── ptr
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <857>  [-]
            │       │           ├── <{node_id}> Conditional [?]
            │       │           │   ├── <837> Var [flag]
            │       │           │   ├── Then
            │       │           │   │   ╰── <841> FunctionCall [get_elem1_ptr]
            │       │           │   │       ╰── <840> Var [arr]
            │       │           │   ╰── Else
            │       │           │       ╰── <845> FunctionCall [get_elem2_ptr]
            │       │           │           ╰── <844> Var [arr]
            │       │           ╰── <856>  [/]
            │       │               ├── <850> Var [four]
            │       │               ╰── <854> Unary [-]
            │       │                   ╰── Constant Int [2]
            │       ╰── Return
            │           ╰── <866>  [==]
            │               ├── <862> Dereference
            │               │   ╰── <861> Var [ptr]
            │               ╰── Constant Int [4]
            ├── Function [test_subtract_multi_dimensional]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── index
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [1]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── nested_arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Array
            │       │   │           ├── 3
            │       │   │           ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Compound
            │       │           │   ├── Constant Int [1]
            │       │           │   ├── Constant Int [2]
            │       │           │   ╰── Constant Int [3]
            │       │           ├── Compound
            │       │           │   ├── Constant Int [4]
            │       │           │   ├── Constant Int [5]
            │       │           │   ╰── Constant Int [6]
            │       │           ╰── Compound
            │       │               ├── Constant Int [7]
            │       │               ├── Constant Int [8]
            │       │               ╰── Constant Int [9]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── last_row_pointer
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Array
            │       │   │           ├── 3
            │       │   │           ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <922>  [+]
            │       │           ├── <919> Var [nested_arr]
            │       │           ╰── Constant Int [2]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── row_pointer
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Array
            │       │   │           ├── 3
            │       │   │           ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <937>  [-]
            │       │           ├── <933> Var [last_row_pointer]
            │       │           ╰── <936> Var [index]
            │       ╰── Return
            │           ╰── <947>  [==]
            │               ├── <943> Dereference
            │               │   ╰── <942> Dereference
            │               │       ╰── <941> Var [row_pointer]
            │               ╰── Constant Int [4]
            ╰── Function [main]
                ╰── Body
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <958> Unary [!]
                    │   │       ╰── <957> FunctionCall [test_add_constant_to_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <967> Unary [!]
                    │   │       ╰── <966> FunctionCall [test_add_negative_index]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <976> Unary [!]
                    │   │       ╰── <975> FunctionCall [test_add_pointer_to_int]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <985> Unary [!]
                    │   │       ╰── <984> FunctionCall [test_add_different_index_types]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <994> Unary [!]
                    │   │       ╰── <993> FunctionCall [test_add_complex_expressions]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1003> Unary [!]
                    │   │       ╰── <1002> FunctionCall [test_add_multi_dimensional]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1012> Unary [!]
                    │   │       ╰── <1011> FunctionCall [test_add_to_subarray_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1021> Unary [!]
                    │   │       ╰── <1020> FunctionCall [test_subtract_from_pointer]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [8]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1030> Unary [!]
                    │   │       ╰── <1029> FunctionCall [test_subtract_negative_index]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [9]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1039> Unary [!]
                    │   │       ╰── <1038> FunctionCall [test_subtract_different_index_types]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [10]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <1048> Unary [!]
                    │   │       ╰── <1047> FunctionCall [test_subtract_complex_expressions]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [11]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_pointer_arithmetic_pointer_diff() {
    let src = r#"
        int get_ptr_diff(int *ptr1, int *ptr2) {
            return (ptr2 - ptr1);
        }
        int get_long_ptr_diff(long *ptr1, long *ptr2) {
            return (ptr2 - ptr1);
        }
        int get_multidim_ptr_diff(double (*ptr1)[3][5], double (*ptr2)[3][5]) {
            return (ptr2 - ptr1);
        }
        int get_multidim_ptr_diff_2(double (*ptr1)[5], double (*ptr2)[5]) {
            return (ptr2 - ptr1);
        }
        int main(void) {
            int arr[5] = {5, 4, 3, 2, 1};
            int *end_of_array = arr + 5;
            if (get_ptr_diff(arr, end_of_array) != 5) {
                return 1;
            }
            long long_arr[8];
            if (get_long_ptr_diff(long_arr + 3, long_arr) != -3) {
                return 2;
            }
            static double multidim[6][7][3][5];
            if (get_multidim_ptr_diff(multidim[2] + 1, multidim[2] + 4) != 3) {
                return 3;
            }
            if (get_multidim_ptr_diff_2(multidim[2][2] + 2, multidim[2][2]) != -2) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [get_ptr_diff]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ptr1
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr2
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <19>  [-]
            │               ├── <14> Var [ptr2]
            │               ╰── <17> Var [ptr1]
            ├── Function [get_long_ptr_diff]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ptr1
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr2
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Long
            │   ╰── Body
            │       ╰── Return
            │           ╰── <41>  [-]
            │               ├── <36> Var [ptr2]
            │               ╰── <39> Var [ptr1]
            ├── Function [get_multidim_ptr_diff]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ptr1
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Array
            │   │   │               ├── 3
            │   │   │               ╰── Array
            │   │   │                   ├── 5
            │   │   │                   ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr2
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Array
            │   │                   ├── 3
            │   │                   ╰── Array
            │   │                       ├── 5
            │   │                       ╰── Double
            │   ╰── Body
            │       ╰── Return
            │           ╰── <73>  [-]
            │               ├── <68> Var [ptr2]
            │               ╰── <71> Var [ptr1]
            ├── Function [get_multidim_ptr_diff_2]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── ptr1
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Array
            │   │   │               ├── 5
            │   │   │               ╰── Double
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── ptr2
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Array
            │   │                   ├── 5
            │   │                   ╰── Double
            │   ╰── Body
            │       ╰── Return
            │           ╰── <101>  [-]
            │               ├── <96> Var [ptr2]
            │               ╰── <99> Var [ptr1]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 5
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [5]
                    │           ├── Constant Int [4]
                    │           ├── Constant Int [3]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── end_of_array
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <134>  [+]
                    │           ├── <131> Var [arr]
                    │           ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <145>  [!=]
                    │   │       ├── <142> FunctionCall [get_ptr_diff]
                    │   │       │   ├── <139> Var [arr]
                    │   │       │   ╰── <141> Var [end_of_array]
                    │   │       ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── long_arr
                    │   ╰── Type
                    │       ╰── Array
                    │           ├── 8
                    │           ╰── Long
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <170>  [!=]
                    │   │       ├── <165> FunctionCall [get_long_ptr_diff]
                    │   │       │   ├── <162>  [+]
                    │   │       │   │   ├── <159> Var [long_arr]
                    │   │       │   │   ╰── Constant Int [3]
                    │   │       │   ╰── <164> Var [long_arr]
                    │   │       ╰── <169> Unary [-]
                    │   │           ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── multidim
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 6
                    │   │       ╰── Array
                    │   │           ├── 7
                    │   │           ╰── Array
                    │   │               ├── 3
                    │   │               ╰── Array
                    │   │                   ├── 5
                    │   │                   ╰── Double
                    │   ╰── Static
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <207>  [!=]
                    │   │       ├── <204> FunctionCall [get_multidim_ptr_diff]
                    │   │       │   ├── <196>  [+]
                    │   │       │   │   ├── <193> Subscript
                    │   │       │   │   │   ├── <191> Var [multidim]
                    │   │       │   │   │   ╰── Constant Int [2]
                    │   │       │   │   ╰── Constant Int [1]
                    │   │       │   ╰── <203>  [+]
                    │   │       │       ├── <200> Subscript
                    │   │       │       │   ├── <198> Var [multidim]
                    │   │       │       │   ╰── Constant Int [2]
                    │   │       │       ╰── Constant Int [4]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <234>  [!=]
                    │   │       ├── <229> FunctionCall [get_multidim_ptr_diff_2]
                    │   │       │   ├── <222>  [+]
                    │   │       │   │   ├── <219> Subscript
                    │   │       │   │   │   ├── <217> Subscript
                    │   │       │   │   │   │   ├── <215> Var [multidim]
                    │   │       │   │   │   │   ╰── Constant Int [2]
                    │   │       │   │   │   ╰── Constant Int [2]
                    │   │       │   │   ╰── Constant Int [2]
                    │   │       │   ╰── <228> Subscript
                    │   │       │       ├── <226> Subscript
                    │   │       │       │   ├── <224> Var [multidim]
                    │   │       │       │   ╰── Constant Int [2]
                    │   │       │       ╰── Constant Int [2]
                    │   │       ╰── <233> Unary [-]
                    │   │           ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_addition_subscript_equivalence() {
    let src = r#"
        int main(void)
        {
            unsigned long x[300][5];
            for (int i = 0; i < 300; i = i + 1) {
                for (int j = 0; j < 5; j = j + 1) {
                    x[i][j] = i * 5 + j;
                }
            }
            if (*(*(x + 20) + 3) != x[20][3]) {
                return 1;
            }
            if (&(*(*(x + 290) + 3)) != &x[290][3]) {
                return 2;
            }
            for (int i = 0; i < 300; i = i + 1) {
                for (int j = 0; j < 5; j = j + 1) {
                    if (*(*(x + i) + j) != x[i][j]) {
                        return 3;
                    }
                }
            }
            *(*(x + 275) + 4) = 22000ul;
            if (x[275][4] != 22000ul) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ╰── Type
                    │       ╰── Array
                    │           ├── 300
                    │           ╰── Array
                    │               ├── 5
                    │               ╰── Unsigned Long
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <24>  [<]
                    │   │       ├── <21> Var [i]
                    │   │       ╰── Constant Int [300]
                    │   ├── Condition
                    │   │   ╰── <33> Assign [=]
                    │   │       ├── <26> Var [i]
                    │   │       ╰── <32>  [+]
                    │   │           ├── <29> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── For
                    │           ├── Init
                    │           │   ╰── VarDeclaration
                    │           │       ├── Name
                    │           │       │   ╰── j
                    │           │       ├── Type
                    │           │       │   ╰── Int
                    │           │       ╰── Initializer
                    │           │           ╰── Constant Int [0]
                    │           ├── Condition
                    │           │   ╰── <45>  [<]
                    │           │       ├── <42> Var [j]
                    │           │       ╰── Constant Int [5]
                    │           ├── Condition
                    │           │   ╰── <54> Assign [=]
                    │           │       ├── <47> Var [j]
                    │           │       ╰── <53>  [+]
                    │           │           ├── <50> Var [j]
                    │           │           ╰── Constant Int [1]
                    │           ╰── Block
                    │               ╰── <73> Assign [=]
                    │                   ├── <62> Subscript
                    │                   │   ├── <59> Subscript
                    │                   │   │   ├── <56> Var [x]
                    │                   │   │   ╰── <58> Var [i]
                    │                   │   ╰── <61> Var [j]
                    │                   ╰── <72>  [+]
                    │                       ├── <68>  [*]
                    │                       │   ├── <65> Var [i]
                    │                       │   ╰── Constant Int [5]
                    │                       ╰── <71> Var [j]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <100>  [!=]
                    │   │       ├── <92> Dereference
                    │   │       │   ╰── <91>  [+]
                    │   │       │       ├── <87> Dereference
                    │   │       │       │   ╰── <86>  [+]
                    │   │       │       │       ├── <82> Var [x]
                    │   │       │       │       ╰── Constant Int [20]
                    │   │       │       ╰── Constant Int [3]
                    │   │       ╰── <99> Subscript
                    │   │           ├── <97> Subscript
                    │   │           │   ├── <95> Var [x]
                    │   │           │   ╰── Constant Int [20]
                    │   │           ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <128>  [!=]
                    │   │       ├── <119> AddressOf
                    │   │       │   ╰── <118> Dereference
                    │   │       │       ╰── <116>  [+]
                    │   │       │           ├── <112> Dereference
                    │   │       │           │   ╰── <111>  [+]
                    │   │       │           │       ├── <107> Var [x]
                    │   │       │           │       ╰── Constant Int [290]
                    │   │       │           ╰── Constant Int [3]
                    │   │       ╰── <127> AddressOf
                    │   │           ╰── <126> Subscript
                    │   │               ├── <124> Subscript
                    │   │               │   ├── <122> Var [x]
                    │   │               │   ╰── Constant Int [290]
                    │   │               ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── For
                    │   ├── Init
                    │   │   ╰── VarDeclaration
                    │   │       ├── Name
                    │   │       │   ╰── i
                    │   │       ├── Type
                    │   │       │   ╰── Int
                    │   │       ╰── Initializer
                    │   │           ╰── Constant Int [0]
                    │   ├── Condition
                    │   │   ╰── <145>  [<]
                    │   │       ├── <142> Var [i]
                    │   │       ╰── Constant Int [300]
                    │   ├── Condition
                    │   │   ╰── <154> Assign [=]
                    │   │       ├── <147> Var [i]
                    │   │       ╰── <153>  [+]
                    │   │           ├── <150> Var [i]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Block
                    │       ╰── For
                    │           ├── Init
                    │           │   ╰── VarDeclaration
                    │           │       ├── Name
                    │           │       │   ╰── j
                    │           │       ├── Type
                    │           │       │   ╰── Int
                    │           │       ╰── Initializer
                    │           │           ╰── Constant Int [0]
                    │           ├── Condition
                    │           │   ╰── <166>  [<]
                    │           │       ├── <163> Var [j]
                    │           │       ╰── Constant Int [5]
                    │           ├── Condition
                    │           │   ╰── <175> Assign [=]
                    │           │       ├── <168> Var [j]
                    │           │       ╰── <174>  [+]
                    │           │           ├── <171> Var [j]
                    │           │           ╰── Constant Int [1]
                    │           ╰── Block
                    │               ╰── If
                    │                   ├── Condition
                    │                   │   ╰── <199>  [!=]
                    │                   │       ├── <189> Dereference
                    │                   │       │   ╰── <188>  [+]
                    │                   │       │       ├── <183> Dereference
                    │                   │       │       │   ╰── <182>  [+]
                    │                   │       │       │       ├── <177> Var [x]
                    │                   │       │       │       ╰── <180> Var [i]
                    │                   │       │       ╰── <186> Var [j]
                    │                   │       ╰── <198> Subscript
                    │                   │           ├── <195> Subscript
                    │                   │           │   ├── <192> Var [x]
                    │                   │           │   ╰── <194> Var [i]
                    │                   │           ╰── <197> Var [j]
                    │                   ╰── Then
                    │                       ╰── Block
                    │                           ╰── Return
                    │                               ╰── Constant Int [3]
                    ├── <225> Assign [=]
                    │   ├── <222> Dereference
                    │   │   ╰── <221>  [+]
                    │   │       ├── <217> Dereference
                    │   │       │   ╰── <216>  [+]
                    │   │       │       ├── <212> Var [x]
                    │   │       │       ╰── Constant Int [275]
                    │   │       ╰── Constant Int [4]
                    │   ╰── Constant ULong [22000]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <235>  [!=]
                    │   │       ├── <232> Subscript
                    │   │       │   ├── <230> Subscript
                    │   │       │   │   ├── <228> Var [x]
                    │   │       │   │   ╰── Constant Int [275]
                    │   │       │   ╰── Constant Int [4]
                    │   │       ╰── Constant ULong [22000]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_array_of_pointers_to_arrays() {
    let src = r#"
        int main(void) {
            int x = 0;
            int y = 1;
            int z = 2;
            int *arr[3] = { &x, &y, &z };
            int *arr2[3] = {&z, &y, &x};
            int *(*array_of_pointers[3])[3] = {&arr, &arr2, &arr};
            if (array_of_pointers[0] != (int *(*)[3]) arr) {
                return 1;
            }
            if (array_of_pointers[1] != (int *(*)[3]) arr2) {
                return 2;
            }
            if (array_of_pointers[2] != (int *(*)[3]) arr) {
                return 3;
            }
            if (array_of_pointers[1][0][0] != &z) {
                return 4;
            }
            if (array_of_pointers[1][0][1] != &y) {
                return 5;
            }
            if (array_of_pointers[2][0][2][0] != 2) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── x
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [0]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── y
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── z
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Pointer
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <31> AddressOf
                    │           │   ╰── <30> Var [x]
                    │           ├── <35> AddressOf
                    │           │   ╰── <34> Var [y]
                    │           ╰── <39> AddressOf
                    │               ╰── <38> Var [z]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr2
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Pointer
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <51> AddressOf
                    │           │   ╰── <50> Var [z]
                    │           ├── <55> AddressOf
                    │           │   ╰── <54> Var [y]
                    │           ╰── <59> AddressOf
                    │               ╰── <58> Var [x]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── array_of_pointers
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Pointer
                    │   │           ╰── Array
                    │   │               ├── 3
                    │   │               ╰── Pointer
                    │   │                   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── <75> AddressOf
                    │           │   ╰── <74> Var [arr]
                    │           ├── <79> AddressOf
                    │           │   ╰── <78> Var [arr2]
                    │           ╰── <83> AddressOf
                    │               ╰── <82> Var [arr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <102>  [!=]
                    │   │       ├── <90> Subscript
                    │   │       │   ├── <88> Var [array_of_pointers]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── <101> Cast
                    │   │           ├── Target
                    │   │           │   ╰── Pointer
                    │   │           │       ╰── Array
                    │   │           │           ├── 3
                    │   │           │           ╰── Pointer
                    │   │           │               ╰── Int
                    │   │           ╰── Expression
                    │   │               ╰── <100> Var [arr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <123>  [!=]
                    │   │       ├── <111> Subscript
                    │   │       │   ├── <109> Var [array_of_pointers]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── <122> Cast
                    │   │           ├── Target
                    │   │           │   ╰── Pointer
                    │   │           │       ╰── Array
                    │   │           │           ├── 3
                    │   │           │           ╰── Pointer
                    │   │           │               ╰── Int
                    │   │           ╰── Expression
                    │   │               ╰── <121> Var [arr2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <144>  [!=]
                    │   │       ├── <132> Subscript
                    │   │       │   ├── <130> Var [array_of_pointers]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── <143> Cast
                    │   │           ├── Target
                    │   │           │   ╰── Pointer
                    │   │           │       ╰── Array
                    │   │           │           ├── 3
                    │   │           │           ╰── Pointer
                    │   │           │               ╰── Int
                    │   │           ╰── Expression
                    │   │               ╰── <142> Var [arr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <162>  [!=]
                    │   │       ├── <157> Subscript
                    │   │       │   ├── <155> Subscript
                    │   │       │   │   ├── <153> Subscript
                    │   │       │   │   │   ├── <151> Var [array_of_pointers]
                    │   │       │   │   │   ╰── Constant Int [1]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── <161> AddressOf
                    │   │           ╰── <160> Var [z]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <180>  [!=]
                    │   │       ├── <175> Subscript
                    │   │       │   ├── <173> Subscript
                    │   │       │   │   ├── <171> Subscript
                    │   │       │   │   │   ├── <169> Var [array_of_pointers]
                    │   │       │   │   │   ╰── Constant Int [1]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── <179> AddressOf
                    │   │           ╰── <178> Var [y]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <198>  [!=]
                    │   │       ├── <195> Subscript
                    │   │       │   ├── <193> Subscript
                    │   │       │   │   ├── <191> Subscript
                    │   │       │   │   │   ├── <189> Subscript
                    │   │       │   │   │   │   ├── <187> Var [array_of_pointers]
                    │   │       │   │   │   │   ╰── Constant Int [2]
                    │   │       │   │   │   ╰── Constant Int [0]
                    │   │       │   │   ╰── Constant Int [2]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Constant Int [2]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_complex_operands() {
    let src = r#"
        int assign_in_index(int idx) {
            int arr[3] = {1, 2, 3};
            int val = arr[idx = idx + 2];
            if (idx != 1) {
                return 1;
            }
            if (val != 2) {
                return 2;
            }
            return 0;
        }
        int static_index(void) {
            static int index = 0;
            int retval = index;
            index = index + 1;
            return retval;
        }
        int funcall_in_index(void) {
            int arr[3] = {1, 2, 3};
            int v1 = arr[static_index()];
            int v2 = arr[static_index()];
            if (v1 != 1) {
                return 3;
            }
            if (v2 != 2) {
                return 4;
            }
            return 0;
        }
        int subscript_inception(long *arr, int *a, int b){
            return arr[a[b]];
        }
        int check_subscript_inception(void) {
            long arr[4] = {4, 3, 2, 1};
            int indices[2] = {1, 2};
            if (subscript_inception(arr, indices, 1) != 2) {
                return 5;
            }
            if (subscript_inception(arr, indices, 0) != 3) {
                return 6;
            }
            return 0;
        }
        int *get_array(void) {
            static int arr[3];
            return arr;
        }
        int subscript_function_result(void){
            get_array()[2] = 1;
            if (get_array()[2] != 1) {
                return 7;
            }
            return 0;
        }
        int negate_subscript(int *arr, int idx, int expected) {
            if (arr[-idx] != expected) {
                return 8;
            }
            return 0;
        }
        int main(void) {
            int check = assign_in_index(-1);
            if (check) {
                return check;
            }
            check = funcall_in_index();
            if (check) {
                return check;
            }
            check = check_subscript_inception();
            if (check) {
                return check;
            }
            check = subscript_function_result();
            if (check) {
                return check;
            }
            int arr[3] = {0, 1, 2};
            check = negate_subscript(arr + 2, 2, 0);
            if (check) {
                return check;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [assign_in_index]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── idx
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [1]
            │       │           ├── Constant Int [2]
            │       │           ╰── Constant Int [3]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── val
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <35> Subscript
            │       │           ├── <25> Var [arr]
            │       │           ╰── <34> Assign [=]
            │       │               ├── <27> Var [idx]
            │       │               ╰── <33>  [+]
            │       │                   ├── <30> Var [idx]
            │       │                   ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <42>  [!=]
            │       │   │       ├── <39> Var [idx]
            │       │   │       ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <52>  [!=]
            │       │   │       ├── <49> Var [val]
            │       │   │       ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [2]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [static_index]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── index
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ├── Initializer
            │       │   │   ╰── Constant Int [0]
            │       │   ╰── Static
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── retval
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <77> Var [index]
            │       ├── <88> Assign [=]
            │       │   ├── <81> Var [index]
            │       │   ╰── <87>  [+]
            │       │       ├── <84> Var [index]
            │       │       ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── <91> Var [retval]
            ├── Function [funcall_in_index]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [1]
            │       │           ├── Constant Int [2]
            │       │           ╰── Constant Int [3]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── v1
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <119> Subscript
            │       │           ├── <116> Var [arr]
            │       │           ╰── <118> FunctionCall [static_index]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── v2
            │       │   ├── Type
            │       │   │   ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <129> Subscript
            │       │           ├── <126> Var [arr]
            │       │           ╰── <128> FunctionCall [static_index]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <136>  [!=]
            │       │   │       ├── <133> Var [v1]
            │       │   │       ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <146>  [!=]
            │       │   │       ├── <143> Var [v2]
            │       │   │       ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [4]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [subscript_inception]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── arr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Long
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── a
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── b
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <178> Subscript
            │               ├── <172> Var [arr]
            │               ╰── <177> Subscript
            │                   ├── <174> Var [a]
            │                   ╰── <176> Var [b]
            ├── Function [check_subscript_inception]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 4
            │       │   │       ╰── Long
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [4]
            │       │           ├── Constant Int [3]
            │       │           ├── Constant Int [2]
            │       │           ╰── Constant Int [1]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── indices
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 2
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── Compound
            │       │           ├── Constant Int [1]
            │       │           ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <221>  [!=]
            │       │   │       ├── <218> FunctionCall [subscript_inception]
            │       │   │       │   ├── <214> Var [arr]
            │       │   │       │   ├── <216> Var [indices]
            │       │   │       │   ╰── Constant Int [1]
            │       │   │       ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <236>  [!=]
            │       │   │       ├── <233> FunctionCall [subscript_inception]
            │       │   │       │   ├── <229> Var [arr]
            │       │   │       │   ├── <231> Var [indices]
            │       │   │       │   ╰── Constant Int [0]
            │       │   │       ╰── Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [6]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [get_array]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 3
            │       │   │       ╰── Int
            │       │   ╰── Static
            │       ╰── Return
            │           ╰── <259> Var [arr]
            ├── Function [subscript_function_result]
            │   ╰── Body
            │       ├── <273> Assign [=]
            │       │   ├── <270> Subscript
            │       │   │   ├── <268> FunctionCall [get_array]
            │       │   │   ╰── Constant Int [2]
            │       │   ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <281>  [!=]
            │       │   │       ├── <278> Subscript
            │       │   │       │   ├── <276> FunctionCall [get_array]
            │       │   │       │   ╰── Constant Int [2]
            │       │   │       ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [7]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [negate_subscript]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── arr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── idx
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <315>  [!=]
            │       │   │       ├── <311> Subscript
            │       │   │       │   ├── <306> Var [arr]
            │       │   │       │   ╰── <310> Unary [-]
            │       │   │       │       ╰── <309> Var [idx]
            │       │   │       ╰── <314> Var [expected]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [8]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── check
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <336> FunctionCall [assign_in_index]
                    │           ╰── <335> Unary [-]
                    │               ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <340> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <342> Var [check]
                    ├── <352> Assign [=]
                    │   ├── <348> Var [check]
                    │   ╰── <351> FunctionCall [funcall_in_index]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <355> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <357> Var [check]
                    ├── <367> Assign [=]
                    │   ├── <363> Var [check]
                    │   ╰── <366> FunctionCall [check_subscript_inception]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <370> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <372> Var [check]
                    ├── <382> Assign [=]
                    │   ├── <378> Var [check]
                    │   ╰── <381> FunctionCall [subscript_function_result]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <385> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <387> Var [check]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [1]
                    │           ╰── Constant Int [2]
                    ├── <417> Assign [=]
                    │   ├── <406> Var [check]
                    │   ╰── <416> FunctionCall [negate_subscript]
                    │       ├── <413>  [+]
                    │       │   ├── <410> Var [arr]
                    │       │   ╰── Constant Int [2]
                    │       ├── Constant Int [2]
                    │       ╰── Constant Int [0]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <420> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <422> Var [check]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_simple() {
    let src = r#"
        int main(void) {
            int arr[3] = {1, 2, 3};
            return arr[2];
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ╰── Return
                        ╰── <21> Subscript
                            ├── <19> Var [arr]
                            ╰── Constant Int [2]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_simple_subscripts() {
    let src = r#"
        int integer_types(unsigned *arr, unsigned expected) {
            unsigned val1 = arr[5];
            unsigned val2 = arr[5u];
            unsigned val3 = arr[5l];
            unsigned val4 = arr[5ul];
            if (val1 != expected) {
                return 1;
            }
            if (val2 != expected) {
                return 2;
            }
            if (val3 != expected) {
                return 3;
            }
            if (val4 != expected) {
                return 4;
            }
            return 0;
        }
        int reverse_subscript(long *arr, long expected) {
            if (arr[3] != expected) {
                return 5;
            }
            if (3[arr] != expected) {
                return 6;
            }
            if (&3[arr] != &arr[3]) {
                return 7;
            }
            return 0;
        }
        static double static_array[3] = {0.1, 0.2, 0.3};
        int subscript_static(void) {
            if (static_array[0] != 0.1) {
                return 8;
            }
            if (static_array[1] != 0.2) {
                return 9;
            }
            if (static_array[2] != 0.3) {
                return 10;
            }
            return 0;
        }
        int update_element(int *arr, int expected) {
            arr[10] = arr[10] * 2;
            if (arr[10] != expected) {
                return 11;
            }
            return 0;
        }
        int *increment_static_element(void) {
            static int arr[4];
            arr[3] = arr[3] + 1;
            return arr;
        }
        int check_increment_static_element(void) {
            int *arr1 = increment_static_element();
            if (arr1[3] != 1) {
                return 12;
            }
            if (arr1[0] || arr1[1] || arr1[2]) {
                return 13;
            }
            int *arr2 = increment_static_element();
            if (arr1 != arr2) {
                return 14;
            }
            if (arr1[3] != 2) {
                return 15;
            }
            return 0;
        }
        int main(void) {
            unsigned int unsigned_arr[6] = {0, 0, 0, 0, 0, 7u};
            int check = integer_types(unsigned_arr, 7u);
            if (check) {
                return check;
            }
            long int long_arr[4] = {100, 102, 104, 106};
            check = reverse_subscript(long_arr, 106);
            if (check) {
                return check;
            }
            check = subscript_static();
            if (check) {
                return check;
            }
            int int_arr[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15};
            check = update_element(int_arr, 30);
            if (check) {
                return check;
            }
            check = check_increment_static_element();
            if (check) {
                return check;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [integer_types]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── arr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Unsigned Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Unsigned Int
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── val1
            │       │   ├── Type
            │       │   │   ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── <18> Subscript
            │       │           ├── <16> Var [arr]
            │       │           ╰── Constant Int [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── val2
            │       │   ├── Type
            │       │   │   ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── <27> Subscript
            │       │           ├── <25> Var [arr]
            │       │           ╰── Constant UInt [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── val3
            │       │   ├── Type
            │       │   │   ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── <36> Subscript
            │       │           ├── <34> Var [arr]
            │       │           ╰── Constant Long [5]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── val4
            │       │   ├── Type
            │       │   │   ╰── Unsigned Int
            │       │   ╰── Initializer
            │       │       ╰── <45> Subscript
            │       │           ├── <43> Var [arr]
            │       │           ╰── Constant ULong [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <53>  [!=]
            │       │   │       ├── <49> Var [val1]
            │       │   │       ╰── <52> Var [expected]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [1]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <64>  [!=]
            │       │   │       ├── <60> Var [val2]
            │       │   │       ╰── <63> Var [expected]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <75>  [!=]
            │       │   │       ├── <71> Var [val3]
            │       │   │       ╰── <74> Var [expected]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [3]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <86>  [!=]
            │       │   │       ├── <82> Var [val4]
            │       │   │       ╰── <85> Var [expected]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [4]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [reverse_subscript]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── arr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Long
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Long
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <114>  [!=]
            │       │   │       ├── <110> Subscript
            │       │   │       │   ├── <108> Var [arr]
            │       │   │       │   ╰── Constant Int [3]
            │       │   │       ╰── <113> Var [expected]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [5]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <127>  [!=]
            │       │   │       ├── <123> Subscript
            │       │   │       │   ├── Constant Int [3]
            │       │   │       │   ╰── <122> Var [arr]
            │       │   │       ╰── <126> Var [expected]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [6]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <144>  [!=]
            │       │   │       ├── <137> AddressOf
            │       │   │       │   ╰── <136> Subscript
            │       │   │       │       ├── Constant Int [3]
            │       │   │       │       ╰── <135> Var [arr]
            │       │   │       ╰── <143> AddressOf
            │       │   │           ╰── <142> Subscript
            │       │   │               ├── <140> Var [arr]
            │       │   │               ╰── Constant Int [3]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [7]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── static_array
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 3
            │   │       ╰── Double
            │   ├── Initializer
            │   │   ╰── Compound
            │   │       ├── Constant Double [+1e-1]
            │   │       ├── Constant Double [+2e-1]
            │   │       ╰── Constant Double [+3e-1]
            │   ╰── Static
            ├── Function [subscript_static]
            │   ╰── Body
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <178>  [!=]
            │       │   │       ├── <175> Subscript
            │       │   │       │   ├── <173> Var [static_array]
            │       │   │       │   ╰── Constant Int [0]
            │       │   │       ╰── Constant Double [+1e-1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [8]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <190>  [!=]
            │       │   │       ├── <187> Subscript
            │       │   │       │   ├── <185> Var [static_array]
            │       │   │       │   ╰── Constant Int [1]
            │       │   │       ╰── Constant Double [+2e-1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [9]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <202>  [!=]
            │       │   │       ├── <199> Subscript
            │       │   │       │   ├── <197> Var [static_array]
            │       │   │       │   ╰── Constant Int [2]
            │       │   │       ╰── Constant Double [+3e-1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [10]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [update_element]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── arr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── <235> Assign [=]
            │       │   ├── <226> Subscript
            │       │   │   ├── <224> Var [arr]
            │       │   │   ╰── Constant Int [10]
            │       │   ╰── <234>  [*]
            │       │       ├── <231> Subscript
            │       │       │   ├── <229> Var [arr]
            │       │       │   ╰── Constant Int [10]
            │       │       ╰── Constant Int [2]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <244>  [!=]
            │       │   │       ├── <240> Subscript
            │       │   │       │   ├── <238> Var [arr]
            │       │   │       │   ╰── Constant Int [10]
            │       │   │       ╰── <243> Var [expected]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [11]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [increment_static_element]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr
            │       │   ├── Type
            │       │   │   ╰── Array
            │       │   │       ├── 4
            │       │   │       ╰── Int
            │       │   ╰── Static
            │       ├── <278> Assign [=]
            │       │   ├── <269> Subscript
            │       │   │   ├── <267> Var [arr]
            │       │   │   ╰── Constant Int [3]
            │       │   ╰── <277>  [+]
            │       │       ├── <274> Subscript
            │       │       │   ├── <272> Var [arr]
            │       │       │   ╰── Constant Int [3]
            │       │       ╰── Constant Int [1]
            │       ╰── Return
            │           ╰── <281> Var [arr]
            ├── Function [check_increment_static_element]
            │   ╰── Body
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr1
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <294> FunctionCall [increment_static_element]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <303>  [!=]
            │       │   │       ├── <300> Subscript
            │       │   │       │   ├── <298> Var [arr1]
            │       │   │       │   ╰── Constant Int [3]
            │       │   │       ╰── Constant Int [1]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [12]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <324>  [||]
            │       │   │       ├── <318>  [||]
            │       │   │       │   ├── <312> Subscript
            │       │   │       │   │   ├── <310> Var [arr1]
            │       │   │       │   │   ╰── Constant Int [0]
            │       │   │       │   ╰── <317> Subscript
            │       │   │       │       ├── <315> Var [arr1]
            │       │   │       │       ╰── Constant Int [1]
            │       │   │       ╰── <323> Subscript
            │       │   │           ├── <321> Var [arr1]
            │       │   │           ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [13]
            │       ├── VarDeclaration
            │       │   ├── Name
            │       │   │   ╰── arr2
            │       │   ├── Type
            │       │   │   ╰── Pointer
            │       │   │       ╰── Int
            │       │   ╰── Initializer
            │       │       ╰── <335> FunctionCall [increment_static_element]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <343>  [!=]
            │       │   │       ├── <339> Var [arr1]
            │       │   │       ╰── <342> Var [arr2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [14]
            │       ├── If
            │       │   ├── Condition
            │       │   │   ╰── <355>  [!=]
            │       │   │       ├── <352> Subscript
            │       │   │       │   ├── <350> Var [arr1]
            │       │   │       │   ╰── Constant Int [3]
            │       │   │       ╰── Constant Int [2]
            │       │   ╰── Then
            │       │       ╰── Block
            │       │           ╰── Return
            │       │               ╰── Constant Int [15]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── unsigned_arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 6
                    │   │       ╰── Unsigned Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ╰── Constant UInt [7]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── check
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <395> FunctionCall [integer_types]
                    │           ├── <393> Var [unsigned_arr]
                    │           ╰── Constant UInt [7]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <399> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <401> Var [check]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── long_arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 4
                    │   │       ╰── Long
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [100]
                    │           ├── Constant Int [102]
                    │           ├── Constant Int [104]
                    │           ╰── Constant Int [106]
                    ├── <429> Assign [=]
                    │   ├── <422> Var [check]
                    │   ╰── <428> FunctionCall [reverse_subscript]
                    │       ├── <426> Var [long_arr]
                    │       ╰── Constant Int [106]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <432> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <434> Var [check]
                    ├── <444> Assign [=]
                    │   ├── <440> Var [check]
                    │   ╰── <443> FunctionCall [subscript_static]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <447> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <449> Var [check]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── int_arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 11
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ├── Constant Int [0]
                    │           ╰── Constant Int [15]
                    ├── <491> Assign [=]
                    │   ├── <484> Var [check]
                    │   ╰── <490> FunctionCall [update_element]
                    │       ├── <488> Var [int_arr]
                    │       ╰── Constant Int [30]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <494> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <496> Var [check]
                    ├── <506> Assign [=]
                    │   ├── <502> Var [check]
                    │   ╰── <505> FunctionCall [check_increment_static_element]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <509> Var [check]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── <511> Var [check]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_subscript_nested() {
    let src = r#"
        int read_nested(int nested_arr[2][3], int i, int j, int expected) {
            return (nested_arr[i][j] == expected);
        }
        int write_nested(int nested_arr[2][3], int i, int j, int new_val) {
            nested_arr[i][j] = new_val;
            return 0;
        }
        int read_nested_negated(int (*nested_arr)[3], int i, int j, int expected) {
            return (nested_arr[-i][j] == expected);
        }
        int get_nested_addr(int nested_arr[2][3], int i, int j, int *expected) {
            return &nested_arr[i][j] == expected;
        }
        static int nested_arr[4][3][5] = {
            {{1, 2}, {3}},
            {{4}, {5}}
        };
        int read_static_nested(int i, int j, int k, int expected) {
            return nested_arr[i][j][k] == expected;
        }
        int (*get_array(void))[3][5] {
            return nested_arr;
        }
        int write_nested_complex(int i, int j, int k, int val) {
            get_array()[i][j][k] = val;
            return 0;
        }
        int *get_subarray(int nested[2][3], int i) {
            return nested[i];
        }
        int main(void) {
            int nested_arr[2][3] = {{1, 2, 3}, {4, 5, 6}};
            if (!read_nested(nested_arr, 1, 2, 6)) {
                return 1;
            }
            write_nested(nested_arr, 1, 2, -1);
            if (nested_arr[1][2] != -1) {
                return 2;
            }
            if (!read_nested_negated(nested_arr + 2, 2, 0, 1)) {
                return 3;
            }
            int *ptr = (nested_arr[0]) + 1;
            if (!get_nested_addr(nested_arr, 0, 1, ptr)) {
                return 4;
            }
            if (!read_static_nested(1, 1, 0, 5)) {
                return 5;
            }
            write_nested_complex(0, 2, 3, 111);
            if (get_array()[0][2][3] != 111) {
                return 6;
            }
            int *row_1 = get_subarray(nested_arr, 1);
            if (row_1 + 1 != &nested_arr[1][1]) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [read_nested]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── nested_arr
            │   │   │   ╰── Type
            │   │   │       ╰── Array
            │   │   │           ├── 2
            │   │   │           ╰── Array
            │   │   │               ├── 3
            │   │   │               ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <33>  [==]
            │               ├── <28> Subscript
            │               │   ├── <25> Subscript
            │               │   │   ├── <22> Var [nested_arr]
            │               │   │   ╰── <24> Var [i]
            │               │   ╰── <27> Var [j]
            │               ╰── <31> Var [expected]
            ├── Function [write_nested]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── nested_arr
            │   │   │   ╰── Type
            │   │   │       ╰── Array
            │   │   │           ├── 2
            │   │   │           ╰── Array
            │   │   │               ├── 3
            │   │   │               ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── new_val
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── <68> Assign [=]
            │       │   ├── <64> Subscript
            │       │   │   ├── <61> Subscript
            │       │   │   │   ├── <58> Var [nested_arr]
            │       │   │   │   ╰── <60> Var [i]
            │       │   │   ╰── <63> Var [j]
            │       │   ╰── <67> Var [new_val]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [read_nested_negated]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── nested_arr
            │   │   │   ╰── Type
            │   │   │       ╰── Pointer
            │   │   │           ╰── Array
            │   │   │               ├── 3
            │   │   │               ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <108>  [==]
            │               ├── <103> Subscript
            │               │   ├── <100> Subscript
            │               │   │   ├── <95> Var [nested_arr]
            │               │   │   ╰── <99> Unary [-]
            │               │   │       ╰── <98> Var [i]
            │               │   ╰── <102> Var [j]
            │               ╰── <106> Var [expected]
            ├── Function [get_nested_addr]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── nested_arr
            │   │   │   ╰── Type
            │   │   │       ╰── Array
            │   │   │           ├── 2
            │   │   │           ╰── Array
            │   │   │               ├── 3
            │   │   │               ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <145>  [==]
            │               ├── <141> AddressOf
            │               │   ╰── <140> Subscript
            │               │       ├── <137> Subscript
            │               │       │   ├── <134> Var [nested_arr]
            │               │       │   ╰── <136> Var [i]
            │               │       ╰── <139> Var [j]
            │               ╰── <144> Var [expected]
            ├── VarDeclaration
            │   ├── Name
            │   │   ╰── nested_arr
            │   ├── Type
            │   │   ╰── Array
            │   │       ├── 4
            │   │       ╰── Array
            │   │           ├── 3
            │   │           ╰── Array
            │   │               ├── 5
            │   │               ╰── Int
            │   ├── Initializer
            │   │   ╰── Compound
            │   │       ├── Compound
            │   │       │   ├── Compound
            │   │       │   │   ├── Constant Int [1]
            │   │       │   │   ╰── Constant Int [2]
            │   │       │   ╰── Compound
            │   │       │       ╰── Constant Int [3]
            │   │       ╰── Compound
            │   │           ├── Compound
            │   │           │   ╰── Constant Int [4]
            │   │           ╰── Compound
            │   │               ╰── Constant Int [5]
            │   ╰── Static
            ├── Function [read_static_nested]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── k
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── expected
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <207>  [==]
            │               ├── <203> Subscript
            │               │   ├── <200> Subscript
            │               │   │   ├── <197> Subscript
            │               │   │   │   ├── <194> Var [nested_arr]
            │               │   │   │   ╰── <196> Var [i]
            │               │   │   ╰── <199> Var [j]
            │               │   ╰── <202> Var [k]
            │               ╰── <206> Var [expected]
            ├── Function [get_array]
            │   ╰── Body
            │       ╰── Return
            │           ╰── <222> Var [nested_arr]
            ├── Function [write_nested_complex]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── i
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── j
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── k
            │   │   │   ╰── Type
            │   │   │       ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── val
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ├── <256> Assign [=]
            │       │   ├── <252> Subscript
            │       │   │   ├── <249> Subscript
            │       │   │   │   ├── <246> Subscript
            │       │   │   │   │   ├── <243> FunctionCall [get_array]
            │       │   │   │   │   ╰── <245> Var [i]
            │       │   │   │   ╰── <248> Var [j]
            │       │   │   ╰── <251> Var [k]
            │       │   ╰── <255> Var [val]
            │       ╰── Return
            │           ╰── Constant Int [0]
            ├── Function [get_subarray]
            │   ├── Parameters
            │   │   ├── Param
            │   │   │   ├── Name
            │   │   │   │   ╰── nested
            │   │   │   ╰── Type
            │   │   │       ╰── Array
            │   │   │           ├── 2
            │   │   │           ╰── Array
            │   │   │               ├── 3
            │   │   │               ╰── Int
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── i
            │   │       ╰── Type
            │   │           ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <281> Subscript
            │               ├── <278> Var [nested]
            │               ╰── <280> Var [i]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── nested_arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 2
                    │   │       ╰── Array
                    │   │           ├── 3
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Compound
                    │           │   ├── Constant Int [1]
                    │           │   ├── Constant Int [2]
                    │           │   ╰── Constant Int [3]
                    │           ╰── Compound
                    │               ├── Constant Int [4]
                    │               ├── Constant Int [5]
                    │               ╰── Constant Int [6]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <320> Unary [!]
                    │   │       ╰── <319> FunctionCall [read_nested]
                    │   │           ├── <315> Var [nested_arr]
                    │   │           ├── Constant Int [1]
                    │   │           ├── Constant Int [2]
                    │   │           ╰── Constant Int [6]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── <334> FunctionCall [write_nested]
                    │   ├── <328> Var [nested_arr]
                    │   ├── Constant Int [1]
                    │   ├── Constant Int [2]
                    │   ╰── <333> Unary [-]
                    │       ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <346>  [!=]
                    │   │       ├── <341> Subscript
                    │   │       │   ├── <339> Subscript
                    │   │       │   │   ├── <337> Var [nested_arr]
                    │   │       │   │   ╰── Constant Int [1]
                    │   │       │   ╰── Constant Int [2]
                    │   │       ╰── <345> Unary [-]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <363> Unary [!]
                    │   │       ╰── <362> FunctionCall [read_nested_negated]
                    │   │           ├── <358>  [+]
                    │   │           │   ├── <355> Var [nested_arr]
                    │   │           │   ╰── Constant Int [2]
                    │   │           ├── Constant Int [2]
                    │   │           ├── Constant Int [0]
                    │   │           ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <380>  [+]
                    │           ├── <377> Subscript
                    │           │   ├── <374> Var [nested_arr]
                    │           │   ╰── Constant Int [0]
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <392> Unary [!]
                    │   │       ╰── <391> FunctionCall [get_nested_addr]
                    │   │           ├── <386> Var [nested_arr]
                    │   │           ├── Constant Int [0]
                    │   │           ├── Constant Int [1]
                    │   │           ╰── <390> Var [ptr]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [4]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <405> Unary [!]
                    │   │       ╰── <404> FunctionCall [read_static_nested]
                    │   │           ├── Constant Int [1]
                    │   │           ├── Constant Int [1]
                    │   │           ├── Constant Int [0]
                    │   │           ╰── Constant Int [5]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [5]
                    ├── <416> FunctionCall [write_nested_complex]
                    │   ├── Constant Int [0]
                    │   ├── Constant Int [2]
                    │   ├── Constant Int [3]
                    │   ╰── Constant Int [111]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <428>  [!=]
                    │   │       ├── <425> Subscript
                    │   │       │   ├── <423> Subscript
                    │   │       │   │   ├── <421> Subscript
                    │   │       │   │   │   ├── <419> FunctionCall [get_array]
                    │   │       │   │   │   ╰── Constant Int [0]
                    │   │       │   │   ╰── Constant Int [2]
                    │   │       │   ╰── Constant Int [3]
                    │   │       ╰── Constant Int [111]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [6]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── row_1
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <442> FunctionCall [get_subarray]
                    │           ├── <440> Var [nested_arr]
                    │           ╰── Constant Int [1]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <458>  [!=]
                    │   │       ├── <449>  [+]
                    │   │       │   ├── <446> Var [row_1]
                    │   │       │   ╰── Constant Int [1]
                    │   │       ╰── <457> AddressOf
                    │   │           ╰── <456> Subscript
                    │   │               ├── <454> Subscript
                    │   │               │   ├── <452> Var [nested_arr]
                    │   │               │   ╰── Constant Int [1]
                    │   │               ╰── Constant Int [1]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [7]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_subscript_pointer() {
    let src = r#"
        int subscript_pointer_to_pointer(int **x) {
            return x[0][0];
        }
        int main(void) {
            int a = 3;
            int *ptr = &a;
            if (ptr[0] != 3) {
                return 1;
            }
            int **ptr_ptr = &ptr;
            if (ptr_ptr[0][0] != 3) {
                return 2;
            }
            int dereferenced = subscript_pointer_to_pointer(ptr_ptr);
            if (dereferenced != 3) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = r#"
        Program
            ├── Function [subscript_pointer_to_pointer]
            │   ├── Parameters
            │   │   ╰── Param
            │   │       ├── Name
            │   │       │   ╰── x
            │   │       ╰── Type
            │   │           ╰── Pointer
            │   │               ╰── Pointer
            │   │                   ╰── Int
            │   ╰── Body
            │       ╰── Return
            │           ╰── <15> Subscript
            │               ├── <13> Subscript
            │               │   ├── <11> Var [x]
            │               │   ╰── Constant Int [0]
            │               ╰── Constant Int [0]
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── a
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── Constant Int [3]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── <35> AddressOf
                    │           ╰── <34> Var [a]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <44>  [!=]
                    │   │       ├── <41> Subscript
                    │   │       │   ├── <39> Var [ptr]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [1]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── ptr_ptr
                    │   ├── Type
                    │   │   ╰── Pointer
                    │   │       ╰── Pointer
                    │   │           ╰── Int
                    │   ╰── Initializer
                    │       ╰── <57> AddressOf
                    │           ╰── <56> Var [ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <68>  [!=]
                    │   │       ├── <65> Subscript
                    │   │       │   ├── <63> Subscript
                    │   │       │   │   ├── <61> Var [ptr_ptr]
                    │   │       │   │   ╰── Constant Int [0]
                    │   │       │   ╰── Constant Int [0]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [2]
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── dereferenced
                    │   ├── Type
                    │   │   ╰── Int
                    │   ╰── Initializer
                    │       ╰── <80> FunctionCall [subscript_pointer_to_pointer]
                    │           ╰── <79> Var [ptr_ptr]
                    ├── If
                    │   ├── Condition
                    │   │   ╰── <87>  [!=]
                    │   │       ├── <84> Var [dereferenced]
                    │   │       ╰── Constant Int [3]
                    │   ╰── Then
                    │       ╰── Block
                    │           ╰── Return
                    │               ╰── Constant Int [3]
                    ╰── Return
                        ╰── Constant Int [0]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}

#[test]
fn test_chapter_15_valid_subscripting_subscript_precedence() {
    let src = r#"
        int main(void) {
            int arr[3] = {1, 2, 3};
            return (-arr[2] == -3);
        }
    "#;
    let expected = r#"
        Program
            ╰── Function [main]
                ╰── Body
                    ├── VarDeclaration
                    │   ├── Name
                    │   │   ╰── arr
                    │   ├── Type
                    │   │   ╰── Array
                    │   │       ├── 3
                    │   │       ╰── Int
                    │   ╰── Initializer
                    │       ╰── Compound
                    │           ├── Constant Int [1]
                    │           ├── Constant Int [2]
                    │           ╰── Constant Int [3]
                    ╰── Return
                        ╰── <29>  [==]
                            ├── <23> Unary [-]
                            │   ╰── <22> Subscript
                            │       ├── <20> Var [arr]
                            │       ╰── Constant Int [2]
                            ╰── <27> Unary [-]
                                ╰── Constant Int [3]
    "#;
    assert_eq!(dump_ast(src), dedent(expected));
}
