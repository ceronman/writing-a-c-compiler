use crate::lexer::TokenKind::*;
use crate::lexer::{tokenize, IntKind};

#[test]
#[should_panic]
fn test_invalid_lex_dot_bad_token() {
    tokenize(
        r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s x;
            return x.1l;
        }
    "#,
    );
}

#[test]
#[should_panic]
fn test_invalid_lex_dot_bad_token_2() {
    tokenize(
        r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s x;
            return x.0foo;
        }
    "#,
    );
}

#[test]
fn test_valid_extra_credit_other_features_bitwise_ops_struct_members() {
    let src = r#"
        struct inner {
            char b;
            unsigned int u;
        };
        struct outer {
            unsigned long l;
            struct inner *in_ptr;
            int bar;
            struct inner in;
        };
        int main(void) {
            struct inner i = {'a', 100000u};
            struct outer o = {9223372036854775810ul, &i, 100, {-80, 4294967295U}};
            if ((i.b | o.l) != 9223372036854775907ul) {
                return 1;
            }
            if ((o.bar ^ i.u) != 100036u) {
                return 2;
            }
            if ((o.in_ptr->b & o.in.b) != 32) {
                return 3;
            }
            if ((o.l >> 26) != 137438953472ul) {
                return 4;
            }
            o.bar = 12;
            if ((i.b << o.bar) != 397312) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Unsigned,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        CharLiteral,
        Comma,
        IntConstant(IntKind::Uint),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::ULong),
        Comma,
        Ampersand,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Uint),
        CloseBrace,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Pipe,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Circumflex,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        GreaterGreater,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        LessLess,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_other_features_compound_assign_struct_members() {
    let src = r#"
        
        struct inner {
            double a;
            char b;
            int *ptr;
        };
        struct outer {
            unsigned long l;
            struct inner *in_ptr;
            struct inner in_array[4];
            int bar;
        };
        int main(void) {
            int i = -1;
            int i2 = -2;
            struct inner si = {150., -12, &i};
            struct outer o = {
                              18446744073709551615UL,
                              &si,
                              {si, {-20e20, 120, 0}, {0, 0, 0}, {1, 1, &i2}},
                              2000};
            si.a += 10;
            if (si.a != 160) {
                return 1;
            }
            o.in_array[0].b -= 460;
            if (o.in_array[0].b != 40) {
                return 2;
            }
            o.in_array[1].a *= -4;
            if (o.in_array[1].a != 80e20) {
                return 4;
            }
            o.in_ptr->a /= 5;
            if (si.a != 32) {
                return 5;
            }
            (&o)->l %= o.bar;
            if (o.l != 1615) {
                return 6;
            }
            o.in_ptr = o.in_array;
            if ((o.in_ptr += 3)->a != 1) {
                return 7;
            }
            if (*o.in_ptr->ptr != -2) {
                return 8;
            }
            o.in_ptr -= 1u;
            if (o.in_ptr->a || o.in_ptr->b || o.in_ptr->ptr) {
                return 9;
            }
            if (si.a != 32 || si.b != -12 || si.ptr != &i) {
                return 10;
            }
            if (o.l != 1615) {
                return 11;
            }
            if (o.in_ptr != &o.in_array[2]) {
                return 12;
            }
            if (o.in_array[0].a != 150. || o.in_array[0].b != 40 ||
                o.in_array[0].ptr != &i) {
                return 13;
            }
            if (o.in_array[1].a != 80e20 || o.in_array[1].b != 120 ||
                o.in_array[1].ptr) {
                return 14;
            }
            if (o.in_array[2].a || o.in_array[2].b || o.in_array[2].ptr) {
                return 15;
            }
            if (o.in_array[3].a != 1 || o.in_array[3].b != 1 ||
                o.in_array[3].ptr != &i2) {
                return 16;
            }
            if (o.bar != 2000) {
                return 17;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        Int,
        Star,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Ampersand,
        Identifier,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::ULong),
        Comma,
        Ampersand,
        Identifier,
        Comma,
        OpenBrace,
        Identifier,
        Comma,
        OpenBrace,
        Minus,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Ampersand,
        Identifier,
        CloseBrace,
        CloseBrace,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        PlusEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        MinusEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        StarEqual,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        SlashEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        Arrow,
        Identifier,
        PercentEqual,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        PlusEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Dot,
        Identifier,
        MinusEqual,
        IntConstant(IntKind::Uint),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_other_features_decr_arrow_lexing() {
    let src = r#"
        
        int main(void) {
            int arr[3] = {0, 1, 2};
            int *ptr = arr + 2;
            if(ptr-->arr) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        MinusMinus,
        Greater,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_other_features_incr_struct_members() {
    let src = r#"
        struct inner {
            char c;
            unsigned int u;
        };
        struct outer {
            unsigned long l;
            struct inner *in_ptr;
            int array[3];
        };
        void *calloc(unsigned long nmemb, unsigned long size);
        int main(void) {
            struct outer my_struct = {
                9223372036854775900ul,
                calloc(3, sizeof (struct inner)),
                {-1000, -2000, -3000},
            };
            struct outer *my_struct_ptr = &my_struct;
            if (++my_struct.l != 9223372036854775901ul) {
                return 1;
            }
            if (--my_struct.in_ptr[0].u != 4294967295U) {
                return 2;
            }
            if (my_struct.in_ptr->c++) {
                return 3;
            }
            if (my_struct_ptr->array[1]-- != -2000) {
                return 4;
            }
            if (my_struct_ptr->l != 9223372036854775901ul) {
                return 5;
            }
            if (my_struct.in_ptr->c != 1) {
                return 6;
            }
            if (my_struct_ptr->in_ptr->u != 4294967295U) {
                return 7;
            }
            if (my_struct_ptr->array[1] != -2001) {
                return 8;
            }
            if (my_struct_ptr->array[0] != -1000 || my_struct_ptr->array[2] != -3000) {
                return 9;
            }
            my_struct_ptr->in_ptr[1].c = -1;
            my_struct_ptr->in_ptr[1].u = 1u;
            my_struct_ptr->in_ptr[2].c = 'X';
            my_struct_ptr->in_ptr[2].u = 100000u;
            (++my_struct_ptr->in_ptr)->c--;
            my_struct_ptr->in_ptr++->u++;
            if (my_struct_ptr->in_ptr[-2].c != 1 || my_struct_ptr->in_ptr[-2].u != 4294967295U) {
                return 10;
            }
            if (my_struct_ptr->in_ptr[-1].c != -2) {
                return 11;
            }
            if (my_struct_ptr->in_ptr[-1].u != 2) {
                return 12;
            }
            if (my_struct_ptr->in_ptr[0].c != 'X' || my_struct_ptr->in_ptr[0].u != 100000u) {
                return 13;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Unsigned,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::ULong),
        Comma,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        PlusPlus,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        MinusMinus,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        PlusPlus,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        MinusMinus,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Uint),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Uint),
        Semicolon,
        OpenParen,
        PlusPlus,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        Arrow,
        Identifier,
        MinusMinus,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        PlusPlus,
        Arrow,
        Identifier,
        PlusPlus,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        Minus,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        Minus,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        Minus,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        Minus,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_other_features_label_tag_member_namespace() {
    let src = r#"
        int main(void) {
            struct x {
                int x;
            };
            struct x x = {10};
            goto x;
            return 0;
        x:
            return x.x;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Goto,
        Identifier,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Colon,
        Return,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_other_features_struct_decl_in_switch_statement() {
    let src = r#"
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s my_struct = {1, 2};
            int result = 0;
            switch (my_struct.a) {
                struct s {
                    double x;
                    double y;
                    double z;
                };
                struct s my_struct;
                case 1:
                    my_struct.x = 20.0;
                    my_struct.y = 30.0;
                    result = my_struct.x + my_struct.y;
                    break;
                case 2:
                    my_struct.x = 11.;
                    my_struct.y = 12.;
                    result = my_struct.x + my_struct.y;
                    break;
                default:
                    my_struct.x = 0.;
                    my_struct.y = 0.;
                    result = my_struct.x + my_struct.y;
            }
            return result;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Switch,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Case,
        IntConstant(IntKind::Int),
        Colon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Break,
        Semicolon,
        Case,
        IntConstant(IntKind::Int),
        Colon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Break,
        Semicolon,
        Default,
        Colon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_array_of_structs() {
    let src = r#"
        struct inner {
            long l;
            char arr[2];
        };
        struct outer {
            char a;
            struct inner b;
        };
        int validate_struct_array(struct outer *struct_array);
        
        int validate_struct_array(struct outer *struct_array) {
            for (int i = 0; i < 3; i = i + 1) {
                if (struct_array[i].a != i * 2)
                    return 0;
                if (struct_array[i].b.l != i * 3)
                    return 0;
                if (struct_array[i].b.arr[0] != i * 4)
                    return 0;
                if (struct_array[i].b.arr[1] != i * 5)
                    return 0;
            }
            return 1;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Long,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_array_of_structs_client() {
    let src = r#"
        struct inner {
            long l;
            char arr[2];
        };
        struct outer {
            char a;
            struct inner b;
        };
        int validate_struct_array(struct outer *struct_array);
        
        static struct outer static_array[3] = {
            {0, {0, {0, 0}}}, {2, {3, {4, 5}}}, {4, {6, {8, 10}}}};
        int main(void) {
            struct outer auto_array[3] = {
                {0, {0, {0, 0}}}, {2, {3, {4, 5}}}, {4, {6, {8, 10}}}};
            if (!validate_struct_array(static_array)) {
                return 1;
            }
            if (!validate_struct_array(auto_array)) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Long,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_global_struct() {
    let src = r#"
        struct s {
            int i;
            char arr[2];
            double d;
        };
        struct outer {
            char c;
            struct s inner;
        };
        extern struct s global;
        extern struct outer global_outer;
        void update_struct(void);
        void update_outer_struct(void);
        
        void update_struct(void) {
            global.arr[1] = global.arr[0] * 2;
            global.d = 5.0;
        }
        void update_outer_struct(void) {
            struct s inner = {0, {-1, -1}, 0};
            global_outer.inner = inner;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Star,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        CloseBrace,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_global_struct_client() {
    let src = r#"
        struct s {
            int i;
            char arr[2];
            double d;
        };
        struct outer {
            char c;
            struct s inner;
        };
        extern struct s global;
        extern struct outer global_outer;
        void update_struct(void);
        void update_outer_struct(void);
        
        struct s global = {1, {2, 3}, 4.0};
        struct outer global_outer = {5, {6, {7, 8}, 9.0}};
        int main(void) {
            update_struct();
            if (global.arr[1] != 4) {
                return 1;
            }
            if (global.d != 5.0) {
                return 2;
            }
            update_outer_struct();
            if (global_outer.c != 5) {
                return 3;
            }
            if (global_outer.inner.i || global_outer.inner.d) {
                return 4;
            }
            if (global_outer.inner.arr[0] != -1 || global_outer.inner.arr[1] != -1) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        DoubleConstant,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_auto_struct_initializers() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void *malloc(unsigned long size);
        void *calloc(unsigned long nmemb, unsigned long size);
        struct s {
            char *one_msg;
            unsigned char two_arr[3];
            struct s *three_self_ptr;
            double four_d;
            double *five_d_ptr;
        };
        int validate_full_initialization(struct s *ptr);
        int validate_partial_initialization(struct s *ptr, char *expected_msg);
        int validate_converted(struct s *ptr);
        int validate_two_structs(struct s *ptr1, struct s *ptr2);
        
        int validate_full_initialization(struct s *ptr) {
            if (strcmp(ptr->one_msg, "I'm a struct!") || ptr->two_arr[0] != 's' ||
                ptr->two_arr[1] != 'u' || ptr->two_arr[2] != 'p' ||
                ptr->three_self_ptr != ptr || ptr->four_d != 2e12 ||
                *ptr->five_d_ptr != 2e12) {
                return 0;
            }
            return 1;
        }
        int validate_partial_initialization(struct s *ptr, char *expected_msg) {
            if (ptr->one_msg != expected_msg || ptr->two_arr[0] != 'a' ||
                ptr->two_arr[1] != 'b') {
                return 0;
            }
            if (ptr->three_self_ptr->one_msg) {
                return 0;
            }
            if (ptr->two_arr[2] || ptr->four_d || ptr->five_d_ptr) {
                return 0;
            }
            return 1;
        }
        int validate_converted(struct s *ptr) {
            if (!ptr->one_msg ||
                ptr->two_arr[0] != 220 || ptr->two_arr[1] != 232 ||
                ptr->two_arr[2] != 224 || ptr->three_self_ptr ||
                ptr->four_d != 2999.0 || *ptr->five_d_ptr != 0.0) {
                return 0;
            }
            return 1;
        }
        int validate_two_structs(struct s *ptr1, struct s *ptr2) {
            if (strcmp(ptr2->one_msg, "Yet another string") ||
                ptr2->one_msg != ptr1->one_msg ||
                ptr2->two_arr[0] != 'x' || ptr2->two_arr[1] != 'y' ||
                ptr2->three_self_ptr !=
                    ptr1 ||
                ptr2->four_d != 150.0 ||
                *ptr1->five_d_ptr != 123.4) {
                return 0;
            }
            if (ptr1->two_arr == ptr2->two_arr) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Star,
        Identifier,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        Double,
        Star,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Star,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        Arrow,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Star,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Identifier,
        Arrow,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Star,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        EqualEqual,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_auto_struct_initializers_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void *malloc(unsigned long size);
        void *calloc(unsigned long nmemb, unsigned long size);
        struct s {
            char *one_msg;
            unsigned char two_arr[3];
            struct s *three_self_ptr;
            double four_d;
            double *five_d_ptr;
        };
        int validate_full_initialization(struct s *ptr);
        int validate_partial_initialization(struct s *ptr, char *expected_msg);
        int validate_converted(struct s *ptr);
        int validate_two_structs(struct s *ptr1, struct s *ptr2);
        double get_double(void) {
            return 2e12;
        }
        int test_full_initialization(void) {
            struct s full = {
                "I'm a struct!", "sup",
                &full,
                get_double(),
                &(full.four_d)
            };
            return validate_full_initialization(&full);
        }
        int test_partial_initialization(void) {
            static char *msg = "Another string literal";
            struct s partial = {
                msg,
                {'a', 'b'},
                (struct s *)calloc(
                    1,
                    sizeof(struct s))
            };
            return validate_partial_initialization(&partial, msg);
        }
        int test_implicit_type_conversions(void) {
            static int i = 3000;
            struct s converted = {
                malloc(5),
                {i / 2, i / 3, i * 4},
                0l,
                i - 1,
                calloc(1, sizeof(double))
            };
            return validate_converted(&converted);
        }
        int test_single_exp_initializer(void) {
            double d = 123.4;
            struct s s1 = {"Yet another string", "xy", &s1, 150.0, &d};
            struct s s2 = s1;
            return validate_two_structs(&s1, &s2);
        }
        int main(void) {
            if (!test_full_initialization()) {
                return 1;
            }
            if (!test_partial_initialization()) {
                return 2;
            }
            if (!test_implicit_type_conversions()) {
                return 3;
            }
            if (!test_single_exp_initializer()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Star,
        Identifier,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        Double,
        Star,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Double,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        DoubleConstant,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        StringLiteral,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        OpenParen,
        CloseParen,
        Comma,
        Ampersand,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Char,
        Star,
        Identifier,
        Equal,
        StringLiteral,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        Identifier,
        Comma,
        OpenBrace,
        CharLiteral,
        Comma,
        CharLiteral,
        CloseBrace,
        Comma,
        OpenParen,
        Struct,
        Identifier,
        Star,
        CloseParen,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Comma,
        OpenBrace,
        Identifier,
        Slash,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        Slash,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        IntConstant(IntKind::Long),
        Comma,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Double,
        CloseParen,
        CloseParen,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Double,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        StringLiteral,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        DoubleConstant,
        Comma,
        Ampersand,
        Identifier,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_nested_auto_struct_initializers() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct pair {
            int a;
            int b;
        };
        struct inner {
            int one_i;
            unsigned char two_arr[3];
            unsigned three_u;
        };
        struct outer {
            long one_l;
            struct inner two_struct;
            char *three_msg;
            double four_d;
            struct pair five_pair;
        };
        int validate_full_initialization(struct outer *ptr);
        int validate_partial_initialization(struct outer *ptr);
        int validate_mixed_initialization(struct outer *ptr);
        int validate_array_of_structs(struct outer *struct_array);
        
        int validate_full_initialization(struct outer *ptr) {
            if (ptr->one_l != -200l || ptr->two_struct.one_i != -171 ||
                ptr->two_struct.two_arr[0] != 200 ||
                ptr->two_struct.two_arr[1] != 202 ||
                ptr->two_struct.two_arr[2] != 203 || ptr->two_struct.three_u != 40u ||
                strcmp(ptr->three_msg, "Important message!") || ptr->four_d != -22. ||
                ptr->five_pair.a != 1 || ptr->five_pair.b != 2) {
                return 0;
            }
            return 1;
        }
        int validate_partial_initialization(struct outer *ptr) {
            if (ptr->one_l != 1000 || ptr->two_struct.one_i != 1 ||
                strcmp(ptr->three_msg, "Partial")) {
                return 0;
            }
            if (ptr->two_struct.two_arr[0] || ptr->two_struct.two_arr[1] ||
                ptr->two_struct.two_arr[2] || ptr->two_struct.three_u || ptr->four_d ||
                ptr->five_pair.a || ptr->five_pair.b) {
                return 0;
            }
            return 1;
        }
        int validate_mixed_initialization(struct outer *ptr) {
            if (ptr->one_l != 200 || ptr->two_struct.one_i != 20 ||
                ptr->two_struct.two_arr[0] != 21 || ptr->two_struct.three_u != 22u ||
                strcmp(ptr->three_msg, "mixed") || ptr->four_d != 10.0 ||
                ptr->five_pair.a != 99 || ptr->five_pair.b != 100) {
                return 0;
            }
            if (ptr->two_struct.two_arr[1] || ptr->two_struct.two_arr[2]) {
                return 0;
            }
            return 1;
        }
        int validate_array_of_structs(struct outer *struct_array) {
            if (struct_array[0].one_l != 1 || struct_array[0].two_struct.one_i != 2 ||
                struct_array[0].two_struct.two_arr[0] != 3 ||
                struct_array[0].two_struct.two_arr[1] != 4 ||
                struct_array[0].two_struct.two_arr[2] != 5 ||
                struct_array[0].two_struct.three_u != 6 ||
                strcmp(struct_array[0].three_msg, "7") ||
                struct_array[0].four_d != 8.0 || struct_array[0].five_pair.a != 9 ||
                struct_array[0].five_pair.b != 10) {
                return 0;
            }
            if (struct_array[1].one_l != 101 ||
                struct_array[1].two_struct.one_i != 102 ||
                struct_array[1].two_struct.two_arr[0] != 103 ||
                struct_array[1].two_struct.two_arr[1] != 104 ||
                struct_array[1].two_struct.two_arr[2] != 105 ||
                struct_array[1].two_struct.three_u != 106 ||
                strcmp(struct_array[1].three_msg, "107") ||
                struct_array[1].four_d != 108.0 || struct_array[1].five_pair.a != 109 ||
                struct_array[1].five_pair.b != 110) {
                return 0;
            }
            if (struct_array[2].one_l != 201 ||
                struct_array[2].two_struct.one_i != 202 ||
                struct_array[2].two_struct.two_arr[0] != 203 ||
                struct_array[2].two_struct.two_arr[1] ||
                struct_array[2].two_struct.two_arr[2] ||
                struct_array[2].two_struct.three_u ||
                strcmp(struct_array[2].three_msg, "207") ||
                struct_array[2].four_d != 208.0 || struct_array[2].five_pair.a != 209 ||
                struct_array[2].five_pair.b) {
                return 0;
            }
            if (struct_array[3].one_l != 301 || struct_array[3].two_struct.one_i ||
                struct_array[3].two_struct.two_arr[0] ||
                struct_array[3].two_struct.two_arr[1] ||
                struct_array[3].two_struct.two_arr[2] ||
                struct_array[3].two_struct.three_u || struct_array[3].three_msg ||
                struct_array[3].four_d || struct_array[3].five_pair.a ||
                struct_array[3].five_pair.b) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Long,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Uint),
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Minus,
        DoubleConstant,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Uint),
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_nested_auto_struct_initializers_client(
) {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct pair {
            int a;
            int b;
        };
        struct inner {
            int one_i;
            unsigned char two_arr[3];
            unsigned three_u;
        };
        struct outer {
            long one_l;
            struct inner two_struct;
            char *three_msg;
            double four_d;
            struct pair five_pair;
        };
        int validate_full_initialization(struct outer *ptr);
        int validate_partial_initialization(struct outer *ptr);
        int validate_mixed_initialization(struct outer *ptr);
        int validate_array_of_structs(struct outer *struct_array);
        int test_full_initialization(void) {
            struct outer full = {-200,
                                 {-171l, {-56, -54, -53}, 40.5},
                                 "Important message!",
                                 -22,
                                 {1, 2}};
            return validate_full_initialization(&full);
        }
        int test_partial_initialization(void) {
            struct outer partial = {1000,
                                    {
                                        1,
                                    },
                                    "Partial"};
            return validate_partial_initialization(&partial);
        }
        int test_mixed_initialization(void) {
            struct inner inner1 = {10};
            struct inner inner2 = {20, {21}, 22u};
            static int flag = 0;
            struct outer mixed = {
                200,
                flag ? inner1 : inner2,
                "mixed",
                10.0,
                {99,
                 100}
            };
            return validate_mixed_initialization(&mixed);
        }
        int test_array_of_structs(void) {
            struct outer s0 = {1, {2, {3, 4, 5}, 6}, "7", 8.0, {9, 10}};
            struct inner in1 = {102, {103, 104, 105}, 106};
            struct pair pair1 = {109, 110};
            struct pair pair2 = {209};
            struct outer s3 = {301};
            struct outer struct_array[4] = {
                s0,
                {101, in1, "107", 108.0, pair1},
                {201,
                 {202, {203}},
                 "207",
                 208.0,
                 pair2},
                s3};
            return validate_array_of_structs(struct_array);
        }
        int main(void) {
            if (!test_full_initialization()) {
                return 1;
            }
            if (!test_partial_initialization()) {
                return 2;
            }
            if (!test_mixed_initialization()) {
                return 3;
            }
            if (!test_array_of_structs()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Long,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Long),
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        DoubleConstant,
        CloseBrace,
        Comma,
        StringLiteral,
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        CloseBrace,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        IntConstant(IntKind::Uint),
        CloseBrace,
        Semicolon,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        Question,
        Identifier,
        Colon,
        Identifier,
        Comma,
        StringLiteral,
        Comma,
        DoubleConstant,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        StringLiteral,
        Comma,
        DoubleConstant,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Identifier,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        Comma,
        StringLiteral,
        Comma,
        DoubleConstant,
        Comma,
        Identifier,
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        StringLiteral,
        Comma,
        DoubleConstant,
        Comma,
        Identifier,
        CloseBrace,
        Comma,
        Identifier,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_nested_static_struct_initializers() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct inner {
            int one_i;
            signed char two_arr[3];
            unsigned three_u;
        };
        struct outer {
            long one_l;
            struct inner two_struct;
            char *three_msg;
            double four_d;
        };
        extern struct outer all_zeros;
        extern struct outer partial;
        extern struct outer full;
        extern struct outer converted;
        extern struct outer struct_array[3];
        int test_uninitialized(void);
        int test_partially_initialized(void);
        int test_fully_intialized(void);
        int test_implicit_conversions(void);
        int test_array_of_structs(void);
        int test_uninitialized(void) {
            if (all_zeros.one_l || all_zeros.three_msg || all_zeros.four_d) {
                return 0;
            }
            if (all_zeros.two_struct.one_i || all_zeros.two_struct.two_arr[0] ||
                all_zeros.two_struct.two_arr[1] || all_zeros.two_struct.two_arr[2] ||
                all_zeros.two_struct.three_u) {
                return 0;
            }
            return 1;
        }
        int test_partially_initialized(void) {
            if (partial.one_l != 100l || strcmp(partial.three_msg, "Hello!")) {
                return 0;
            }
            if (partial.four_d) {
                return 0;
            }
            if (partial.two_struct.one_i != 10 || partial.two_struct.two_arr[0] != 10) {
                return 0;
            }
            if (partial.two_struct.two_arr[1] || partial.two_struct.two_arr[2] ||
                partial.two_struct
                    .three_u) {
                return 0;
            }
            return 1;
        }
        int test_fully_intialized(void) {
            if (full.one_l != 18014398509481979l ||
                strcmp(full.three_msg, "Another message") || full.four_d != 2e12) {
                return 0;
            }
            if (full.two_struct.one_i != 1000 || full.two_struct.two_arr[0] != 'o' ||
                full.two_struct.two_arr[1] != 'k' || full.two_struct.two_arr[2] != 0 ||
                full.two_struct.three_u != 4292870144u) {
                return 0;
            }
            return 1;
        }
        int test_implicit_conversions(void) {
            if (converted.one_l != 10l || converted.three_msg != 0 ||
                converted.four_d != 9223372036854777856.0) {
                return 0;
            }
            if (converted.two_struct.one_i != -2147483646 ||
                converted.two_struct.two_arr[0] != 15 ||
                converted.two_struct.two_arr[1] != 3 ||
                converted.two_struct.two_arr[2] != -127 ||
                converted.two_struct.three_u != 2147483648u) {
                return 0;
            }
            return 1;
        }
        int test_array_of_structs(void) {
            if (struct_array[0].one_l != 1 || struct_array[0].three_msg != 0 ||
                struct_array[0].four_d != 5) {
                return 0;
            }
            if (struct_array[0].two_struct.one_i != 2 ||
                strcmp((char *)struct_array[0].two_struct.two_arr, "ab") ||
                struct_array[0].two_struct.three_u != 3) {
                return 0;
            }
            if (struct_array[1].one_l != 6 ||
                strcmp((char *)struct_array[1].three_msg, "Message") ||
                struct_array[1].four_d != 9) {
                return 0;
            }
            if (struct_array[1].two_struct.one_i != 7 ||
                strcmp((char *)struct_array[1].two_struct.two_arr, "cd") ||
                struct_array[1].two_struct.three_u != 8) {
                return 0;
            }
            if (struct_array[2].one_l || struct_array[2].three_msg ||
                struct_array[2].four_d) {
                return 0;
            }
            if (struct_array[2].two_struct.one_i ||
                struct_array[2].two_struct.two_arr[0] ||
                struct_array[2].two_struct.two_arr[1] ||
                struct_array[2].two_struct.two_arr[2] ||
                struct_array[2].two_struct.three_u) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Signed,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Long,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenParen,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenParen,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenParen,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_nested_static_struct_initializers_client(
) {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct inner {
            int one_i;
            signed char two_arr[3];
            unsigned three_u;
        };
        struct outer {
            long one_l;
            struct inner two_struct;
            char *three_msg;
            double four_d;
        };
        extern struct outer all_zeros;
        extern struct outer partial;
        extern struct outer full;
        extern struct outer converted;
        extern struct outer struct_array[3];
        int test_uninitialized(void);
        int test_partially_initialized(void);
        int test_fully_intialized(void);
        int test_implicit_conversions(void);
        int test_array_of_structs(void);
        struct outer all_zeros;
        struct outer partial = {
            100l,
            {10, {10}},
            "Hello!"};
        struct outer full = {
            18014398509481979l,
            {1000, "ok",
             4292870144u},
            "Another message",
            2e12};
        struct outer converted = {
            10.5,
            {
                2147483650u,
                {
                    15.6,
                    17592186044419l,
                    2147483777u
                },
                1152921506754330624ul
            },
            0ul,
            9223372036854776833ul
        };
        struct outer struct_array[3] = {{1, {2, "ab", 3}, 0, 5},
                                        {6, {7, "cd", 8}, "Message", 9}};
        int main(void) {
            if (!test_uninitialized()) {
                return 1;
            }
            if (!test_partially_initialized()) {
                return 2;
            }
            if (!test_fully_intialized()) {
                return 3;
            }
            if (!test_implicit_conversions()) {
                return 4;
            }
            if (!test_array_of_structs()) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Signed,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Long,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Long),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Long),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        StringLiteral,
        Comma,
        IntConstant(IntKind::Uint),
        CloseBrace,
        Comma,
        StringLiteral,
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Uint),
        Comma,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Long),
        Comma,
        IntConstant(IntKind::Uint),
        CloseBrace,
        Comma,
        IntConstant(IntKind::ULong),
        CloseBrace,
        Comma,
        IntConstant(IntKind::ULong),
        Comma,
        IntConstant(IntKind::ULong),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        StringLiteral,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        StringLiteral,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        StringLiteral,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_static_struct_initializers() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct s {
            double one_d;
            char *two_msg;
            unsigned char three_arr[3];
            int four_i;
        };
        extern struct s uninitialized;
        extern struct s partial;
        extern struct s partial_with_array;
        extern struct s converted;
        int test_uninitialized(void);
        int test_partially_initialized(void);
        int test_partial_inner_init(void);
        int test_implicit_conversion(void);
        int test_uninitialized(void) {
            if (uninitialized.one_d || uninitialized.two_msg ||
                uninitialized.three_arr[0] || uninitialized.three_arr[1] ||
                uninitialized.three_arr[2] || uninitialized.four_i) {
                return 0;
            }
            return 1;
        }
        int test_partially_initialized(void) {
            if (partial.one_d != 1.0 || strcmp(partial.two_msg, "Hello")) {
                return 0;
            }
            if (partial.three_arr[0] || partial.three_arr[1] || partial.three_arr[2] ||
                partial.four_i) {
                return 0;
            }
            return 1;
        }
        int test_partial_inner_init(void) {
            if (partial_with_array.one_d != 3.0 ||
                strcmp(partial_with_array.two_msg, "!") ||
                partial_with_array.three_arr[0] != 1 ||
                partial_with_array.four_i != 2) {
                return 0;
            }
            if (partial_with_array.three_arr[1] || partial_with_array.three_arr[2]) {
                return 0;
            }
            return 1;
        }
        int test_implicit_conversion(void) {
            if (converted.one_d != 1152921504606846976.0 || converted.two_msg ||
                converted.three_arr[0] != 'a' || converted.three_arr[1] != 'b' ||
                converted.three_arr[2] != 'c' || converted.four_i != 5) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_initializers_static_struct_initializers_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct s {
            double one_d;
            char *two_msg;
            unsigned char three_arr[3];
            int four_i;
        };
        extern struct s uninitialized;
        extern struct s partial;
        extern struct s partial_with_array;
        extern struct s converted;
        int test_uninitialized(void);
        int test_partially_initialized(void);
        int test_partial_inner_init(void);
        int test_implicit_conversion(void);
        struct s uninitialized;
        struct s partial = {1.0, "Hello"};
        struct s partial_with_array = {3.0, "!", {1}, 2};
        struct s converted = {
            1152921504606846977l,
            0l,
            "abc",
            17179869189l
        };
        int main(void) {
            if (!test_uninitialized()) {
                return 1;
            }
            if (!test_partially_initialized()) {
                return 2;
            }
            if (!test_partial_inner_init()) {
                return 3;
            }
            if (!test_implicit_conversion()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        StringLiteral,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Long),
        Comma,
        IntConstant(IntKind::Long),
        Comma,
        StringLiteral,
        Comma,
        IntConstant(IntKind::Long),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_opaque_struct() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int puts(char *s);
        void *malloc(unsigned long size);
        struct s {
            int member1;
            double member2;
            char *member3;
        };
        struct s *create_struct(int i, double d, char *s) {
            struct s *ptr = malloc(sizeof(struct s));
            ptr->member1 = i;
            ptr->member2 = d;
            ptr->member3 = s;
            return ptr;
        }
        void increment_struct(struct s *ptr) {
            ptr->member1 = ptr->member1 + 1;
            ptr->member2 = ptr->member2 + 1;
            ptr->member3 = ptr->member3;
        }
        int check_struct(struct s *ptr, int expected_i, double expected_d,
                         char *expected_s) {
            if (ptr->member1 != expected_i) {
                return 0;
            }
            if (ptr->member2 != expected_d) {
                return 0;
            }
            if (strcmp(ptr->member3, expected_s)) {
                return 0;
            }
            return 1;
        }
        void print_struct_msg(struct s *ptr) {
            puts(ptr->member3);
        }
        static struct s internal = {1, 2.0, "static struct"};
        struct s *get_internal_struct(void) {
            return &internal;
        }
        struct s incomplete_var = {3, 4.0, "global struct"};
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Ampersand,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_opaque_struct_client() {
    let src = r#"
        struct s;
        struct s *create_struct(int i, double d, char *s);
        void increment_struct(struct s *src_ptr);
        int check_struct(struct s *ptr, int expected_i, double expected_d,
                         char *expected_s);
        void print_struct_msg(struct s *ptr);
        struct s *get_internal_struct(void);
        extern struct s incomplete_var;
        int main(void) {
            struct s *new_struct = create_struct(101, 102.0, "new struct");
            struct s *internal_struct = get_internal_struct();
            print_struct_msg(new_struct);
            print_struct_msg(internal_struct);
            print_struct_msg(&incomplete_var);
            increment_struct(new_struct);
            increment_struct(&incomplete_var);
            if (!check_struct(new_struct, 102, 103.0, "new struct")) {
                return 1;
            }
            if (!check_struct(&incomplete_var, 4, 5.0, "global struct")) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        Comma,
        StringLiteral,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_param_struct_pointer() {
    let src = r#"
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        int access_members_through_pointer(struct outer *ptr, int expected_a,
                                           int expected_b, double expected_d,
                                           int expected_i);
        void update_members_through_pointer(struct outer *ptr, int a, int b,
                                            struct inner *inner_ptr);
        
        int access_members_through_pointer(struct outer *ptr, int expected_a,
                                           int expected_b, double expected_d,
                                           int expected_i) {
            if (ptr->a != expected_a) {
                return 0;
            }
            if (ptr->b != expected_b) {
                return 0;
            }
            if (ptr->substruct.d != expected_d) {
                return 0;
            }
            if (ptr->substruct.i != expected_i) {
                return 0;
            }
            return 1;
        }
        void update_members_through_pointer(struct outer *ptr, int a, int b,
                                            struct inner *inner_ptr) {
            ptr->a = a;
            ptr->b = b;
            ptr->substruct = *inner_ptr;
            return;
        }
    "#;
    let expected = vec![
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Star,
        Identifier,
        Semicolon,
        Return,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_param_struct_pointer_client() {
    let src = r#"
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        int access_members_through_pointer(struct outer *ptr, int expected_a,
                                           int expected_b, double expected_d,
                                           int expected_i);
        void update_members_through_pointer(struct outer *ptr, int a, int b,
                                            struct inner *inner_ptr);
        
        int main(void) {
            struct outer s = {1, 2, {3.0, 4}};
            if (!access_members_through_pointer(&s, 1, 2, 3.0, 4)) {
                return 1;
            }
            struct inner inner_struct = {7, 8};
            update_members_through_pointer(&s, 5, 6, &inner_struct);
            if (s.a != 5 || s.b != 6 || s.substruct.d != 7 || s.substruct.i != 8) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_return_struct_pointer() {
    let src = r#"
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        struct outermost {
            int i;
            struct outer *nested_ptr;
            struct outer nested_struct;
        };
        struct inner *make_struct_inner(int seed);
        struct outer *make_struct_outer(int seed);
        struct outermost *make_struct_outermost(int seed);
        struct inner *make_struct_inner(int seed) {
            struct inner *ptr = malloc(sizeof(struct inner));
            ptr->d = seed;
            ptr->i = seed;
            return ptr;
        }
        struct outer *make_struct_outer(int seed) {
            struct outer *ptr = malloc(sizeof(struct outer));
            ptr->a = seed;
            ptr->b = seed + 1;
            ptr->substruct.d = seed + 2;
            ptr->substruct.i = seed + 3;
            return ptr;
        }
        struct outermost *make_struct_outermost(int seed) {
            struct outermost *ptr = malloc(sizeof(struct outermost));
            ptr->i = seed;
            ptr->nested_ptr = make_struct_outer(seed + 1);
            ptr->nested_struct.a = seed + 5;
            ptr->nested_struct.b = seed + 6;
            ptr->nested_struct.substruct.d = seed + 7;
            ptr->nested_struct.substruct.i = seed + 8;
            return ptr;
        }
    "#;
    let expected = vec![
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_libraries_return_struct_pointer_client() {
    let src = r#"
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        struct outermost {
            int i;
            struct outer *nested_ptr;
            struct outer nested_struct;
        };
        struct inner *make_struct_inner(int seed);
        struct outer *make_struct_outer(int seed);
        struct outermost *make_struct_outermost(int seed);
        int test_get_struct_ptr(void) {
            struct inner *inner_ptr = make_struct_inner(11);
            if (inner_ptr->d != 11 || inner_ptr->i != 11) {
                return 0;
            }
            struct outermost o = {0, 0, {0, 0, {0, 0}}};
            o.nested_ptr = make_struct_outer(20);
            if (o.nested_ptr->a != 20 || o.nested_ptr->b != 21 ||
                o.nested_ptr->substruct.d != 22 || o.nested_ptr->substruct.i != 23) {
                return 0;
            }
            return 1;
        }
        int test_get_struct_pointer_member(void) {
            if (make_struct_inner(2)->d != 2) {
                return 0;
            }
            if (make_struct_outer(2)->substruct.d != 4) {
                return 0;
            }
            if (make_struct_outermost(0)->nested_ptr->a != 1) {
                return 0;
            }
            return 1;
        }
        struct outer *get_static_struct_ptr(void) {
            static struct outer s;
            return &s;
        }
        int test_update_member_thru_retval(void) {
            get_static_struct_ptr()->a = 10;
            get_static_struct_ptr()->substruct.d = 20.0;
            struct outer *ptr = get_static_struct_ptr();
            if (ptr->a != 10 || ptr->substruct.d != 20.0) {
                return 0;
            }
            return 1;
        }
        int test_update_nested_struct_thru_retval(void) {
            struct inner small = {12.0, 13};
            get_static_struct_ptr()->substruct = small;
            if (get_static_struct_ptr()->substruct.d != 12.0) {
                return 0;
            }
            if (get_static_struct_ptr()->substruct.i != 13) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_get_struct_ptr()) {
                return 1;
            }
            if (!test_get_struct_pointer_member()) {
                return 2;
            }
            if (!test_update_member_thru_retval()) {
                return 3;
            }
            if (!test_update_nested_struct_thru_retval()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Return,
        Ampersand,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        CloseParen,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        CloseParen,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        CloseParen,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_parse_and_lex_postfix_precedence() {
    let src = r#"
        
        struct inner {
            int inner_arr[3];
        };
        struct outer {
            int a;
            struct inner b;
        };
        int main(void) {
            struct outer array[4] = {{1, {{2, 3, 4}}},
                                     {5, {{6, 7, 8}}},
                                     {9, {{10, 11, 12}}},
                                     {13, {{14, 15, 16}}}};
            int i = -array[2].b.inner_arr[1];
            return i == -11;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Minus,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Return,
        Identifier,
        EqualEqual,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_parse_and_lex_space_around_struct_member() {
    let src = r#"
        struct s {
            int a;
        };
        int main(void) {
            struct s foo;
            foo .a = 10;
            int b = foo .a;
            return foo . a == b;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Return,
        Identifier,
        Dot,
        Identifier,
        EqualEqual,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_parse_and_lex_struct_member_looks_like_const() {
    let src = r#"
        struct s {
            int E10;
        };
        int main(void) {
            struct s x1 = {3};
            return x1.E10;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_parse_and_lex_trailing_comma() {
    let src = r#"
        
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s x = {
                1,
                2,
            };
            if (x.a != 1 || x.b != 2) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_arrow() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        struct four_members {
            double d;
            char c;
            long l;
            char *ptr;
        };
        double get_double(void) {
            return 2e12;
        }
        static long l = 34359738378l;
        int accept_params(int d_divided, int c_doubled, double l_cast,
                          int dereferenced_ptr, double d, int c, long l, char *ptr) {
            if (d != -1845381177299.0 || c != 127 || l != 58 || *ptr != 100 ||
                d_divided != -922690588 || c_doubled != 254 || l_cast != 58.0 ||
                dereferenced_ptr != 100) {
                return 0;
            }
            return 1;
        }
        int test_auto(void) {
            struct four_members autom;
            struct four_members *autom_ptr = &autom;
            autom_ptr->d = (l - get_double()) + (l * 3.5);
            autom_ptr->c = 127;
            autom_ptr->l = get_double() / l;
            char chr = 100;
            autom_ptr->ptr = &chr;
            if (autom_ptr->d != -1845381177299.0 || autom_ptr->c != 127 ||
                autom_ptr->l != 58 || autom_ptr->ptr != &chr) {
                return 0;
            }
            double *d_ptr = &autom_ptr->d;
            char *c_ptr = &autom_ptr->c;
            if (*d_ptr != -1845381177299.0 || *c_ptr != 127) {
                return 0;
            }
            if (*autom_ptr->ptr != 100) {
                return 0;
            }
            if (!accept_params(autom.d / 2000, autom.c * 2, (double)autom.l, *autom.ptr,
                               autom.d, autom.c, autom.l, autom.ptr)) {
                return 0;
            }
            return 1;
        }
        int test_static(void) {
            static struct four_members stat;
            static struct four_members *stat_ptr;
            stat_ptr = &stat;
            static char chr = 100;
            stat_ptr->d = (l - get_double()) + (l * 3.5);
            stat_ptr->c = 127;
            stat_ptr->l = get_double() / l;
            stat_ptr->ptr = &chr;
            if (stat_ptr->d != -1845381177299.0 || stat_ptr->c != 127 ||
                stat_ptr->l != 58 || stat_ptr->ptr != &chr) {
                return 0;
            }
            double *d_ptr = &stat_ptr->d;
            char *c_ptr = &stat_ptr->c;
            if (*d_ptr != -1845381177299.0 || *c_ptr != 127) {
                return 0;
            }
            if (*stat_ptr->ptr != 100) {
                return 0;
            }
            if (!accept_params(stat.d / 2000, stat.c * 2, (double)stat.l, *stat.ptr,
                               stat.d, stat.c, stat.l, stat.ptr)) {
                return 0;
            }
            return 1;
        }
        int test_exp_result_member(void) {
            static int flag = 1;
            struct four_members s1;
            s1.d = 10.0;
            s1.c = 99;
            s1.l = 9223372036854775807l;
            s1.ptr = 0;
            struct four_members s2;
            s2.d = 12.0;
            s2.c = 98;
            s2.l = -9223372036854775807l;
            s2.ptr = 0;
            struct four_members *s1_ptr = &s1;
            struct four_members *s2_ptr = &s2;
            (flag ? s1_ptr : s2_ptr)->c = 127;
            if (s1.c != 127) {
                return 0;
            }
            if (s2.c != 98) {
                return 0;
            }
            struct four_members *result_ptr = 0;
            if ((result_ptr = s2_ptr)->d != 12.0 ||
                result_ptr->l != -9223372036854775807l) {
                return 0;
            }
            void *void_ptr = calloc(1, sizeof(struct four_members));
            ((struct four_members *)void_ptr)->c = 80;
            result_ptr = void_ptr;
            if (result_ptr->c != 80) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto()) {
                return 1;
            }
            if (!test_static()) {
                return 2;
            }
            if (!test_exp_result_member()) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Double,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        DoubleConstant,
        Semicolon,
        CloseBrace,
        Static,
        Long,
        Identifier,
        Equal,
        IntConstant(IntKind::Long),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        DoubleConstant,
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        Plus,
        OpenParen,
        Identifier,
        Star,
        DoubleConstant,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Slash,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Minus,
        DoubleConstant,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Double,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        Minus,
        DoubleConstant,
        PipePipe,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Slash,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        Dot,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Comma,
        OpenParen,
        Double,
        CloseParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Star,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Static,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        Plus,
        OpenParen,
        Identifier,
        Star,
        DoubleConstant,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Slash,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Minus,
        DoubleConstant,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Double,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        Minus,
        DoubleConstant,
        PipePipe,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Slash,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        Dot,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Comma,
        OpenParen,
        Double,
        CloseParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Star,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Long),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Long),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        OpenParen,
        Identifier,
        Question,
        Identifier,
        Colon,
        Identifier,
        CloseParen,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Equal,
        Identifier,
        CloseParen,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Long),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Void,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        OpenParen,
        OpenParen,
        Struct,
        Identifier,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_dot() {
    let src = r#"
        struct four_members {
            double d;
            char c;
            long l;
            char *ptr;
        };
        double get_double(void) {
            return 2e12;
        }
        static long l = 34359738378l;
        int accept_params(int d_divided, int c_doubled, double l_cast,
                          int dereferenced_ptr, double d, int c, long l, char *ptr) {
            if (d != 4e12 || c != 127 || l != 8589934594l || *ptr != 100 ||
                d_divided != 100.0 || c_doubled != 254 || l_cast != 8589934594.0 ||
                dereferenced_ptr != 100) {
                return 0;
            }
            return 1;
        }
        int test_auto(void) {
            struct four_members autom;
            autom.d = get_double() * 2.0;
            autom.c = 127;
            autom.l = l / 4;
            char chr = 100;
            autom.ptr = &chr;
            if (autom.d != 4e12 || autom.c != 127 || autom.l != 8589934594l ||
                autom.ptr != &chr) {
                return 0;
            }
            double *d_ptr = &autom.d;
            char *c_ptr = &autom.c;
            if (*d_ptr != 4e12 || *c_ptr != 127) {
                return 0;
            }
            if (*autom.ptr != 100) {
                return 0;
            }
            if (!accept_params(autom.d / 4e10, autom.c * 2, (double)autom.l, *autom.ptr,
                               autom.d, autom.c, autom.l, autom.ptr)) {
                return 0;
            }
            return 1;
        }
        int test_static(void) {
            static struct four_members stat;
            static char chr = 100;
            stat.d = get_double() * 2.0;
            stat.c = 127;
            stat.l = l / 4;
            stat.ptr = &chr;
            if (stat.d != 4e12 || stat.c != 127 || stat.l != 8589934594l ||
                stat.ptr != &chr) {
                return 0;
            }
            double *d_ptr = &stat.d;
            char *c_ptr = &stat.c;
            if (*d_ptr != 4e12 || *c_ptr != 127) {
                return 0;
            }
            if (*stat.ptr != 100) {
                return 0;
            }
            if (!accept_params(stat.d / 4e10, stat.c * 2, (double)stat.l, *stat.ptr,
                               stat.d, stat.c, stat.l, stat.ptr)) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto()) {
                return 1;
            }
            if (!test_static()) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Double,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        DoubleConstant,
        Semicolon,
        CloseBrace,
        Static,
        Long,
        Identifier,
        Equal,
        IntConstant(IntKind::Long),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Star,
        DoubleConstant,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Slash,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Double,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Slash,
        DoubleConstant,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Comma,
        OpenParen,
        Double,
        CloseParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Star,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Static,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Star,
        DoubleConstant,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Slash,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Double,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Slash,
        DoubleConstant,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Comma,
        OpenParen,
        Double,
        CloseParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Star,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_linked_list() {
    let src = r#"
        void *malloc(unsigned long size);
        struct linked_list_node {
            int val;
            struct linked_list_node *next;
        };
        struct linked_list_node *array_to_list(int *array, int count) {
            struct linked_list_node *head =
                (struct linked_list_node *)malloc(sizeof(struct linked_list_node));
            head->val = array[0];
            head->next = 0;
            struct linked_list_node *current = head;
            for (int i = 1; i < count; i = i + 1) {
                current->next =
                    (struct linked_list_node *)malloc(sizeof(struct linked_list_node));
                current->next->next = 0;
                current->next->val = array[i];
                current = current->next;
            }
            return head;
        }
        int main(void) {
            int arr[4] = {9, 8, 7, 6};
            struct linked_list_node *elem = array_to_list(arr, 4);
            for (int i = 0; i < 4; i = i + 1) {
                int expected = arr[i];
                if (elem->val != expected) {
                    return i + 1;
                }
                elem = elem->next;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Struct,
        Identifier,
        Star,
        CloseParen,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        OpenParen,
        Struct,
        Identifier,
        Star,
        CloseParen,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_nested_struct() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        void *malloc(unsigned long size);
        struct inner {
            double a;
            char b;
            int *ptr;
        };
        struct outer {
            unsigned long l;
            struct inner *in_ptr;
            struct inner in_array[4];
            int bar;
            struct inner in;
        };
        int ptr_target;
        int test_auto_dot(void) {
            struct outer s;
            s.in.a = 1.0;
            s.in.b = 2;
            s.in.ptr = &ptr_target;
            if (s.in.a != 1.0 || s.in.b != 2 || s.in.ptr != &ptr_target) {
                return 0;
            }
            char *char_ptr = &s.in.b;
            if (*char_ptr != 2) {
                return 0;
            }
            *s.in.ptr = 5;
            if (ptr_target != 5) {
                return 0;
            }
            s.in.a = s.in.b;
            if (s.in.a != 2.0) {
                return 0;
            }
            return 1;
        }
        int test_static_dot(void) {
            static struct outer s;
            s.in.a = 1.0;
            s.in.b = 2;
            s.in.ptr = &ptr_target;
            if (s.in.a != 1.0 || s.in.b != 2 || s.in.ptr != &ptr_target) {
                return 0;
            }
            char *char_ptr = &s.in.b;
            if (*char_ptr != 2) {
                return 0;
            }
            *s.in.ptr = 6;
            if (ptr_target != 6) {
                return 0;
            }
            s.in.a = s.in.b;
            if (s.in.a != 2.0) {
                return 0;
            }
            return 1;
        }
        int test_auto_arrow(void) {
            struct inner in;
            struct outer s;
            struct outer *s_ptr = &s;
            s_ptr->in_ptr = &in;
            s_ptr->l = 4294967295ul;
            s_ptr->bar = -5;
            s_ptr->in_ptr->a = 10.0;
            s_ptr->in_ptr->b = 'x';
            s_ptr->in_array->a = 11.0;
            (s_ptr->in_array + 3)->a = 12.0;
            s_ptr->in_array->ptr = &s_ptr->bar;
            if (s_ptr->l != 4294967295ul || s_ptr->bar != -5) {
                return 0;
            }
            if (s_ptr->in_ptr->a != 10.0 || s_ptr->in_ptr->b != 'x' ||
                s_ptr->in_array->a != 11.0 || (s_ptr->in_array + 3)->a != 12.0) {
                return 0;
            }
            char *char_ptr = &s_ptr->in_ptr->b;
            if (*char_ptr != 'x') {
                return 0;
            }
            *s_ptr->in_array->ptr = 123;
            if (s_ptr->bar != 123) {
                return 0;
            }
            s_ptr->in_array->b = s_ptr->in_ptr->b;
            if (s_ptr->in_array[0].b != 'x') {
                return 0;
            }
            return 1;
        }
        int test_static_arrow(void) {
            static struct inner in;
            static struct outer s;
            static struct outer *s_ptr;
            s_ptr = &s;
            s_ptr->in_ptr = &in;
            s_ptr->l = 4294967295ul;
            s_ptr->bar = -5;
            s_ptr->in_ptr->a = 10.0;
            s_ptr->in_ptr->b = 'x';
            s_ptr->in_array->a = 11.0;
            (s_ptr->in_array + 3)->a = 12.0;
            s_ptr->in_array->ptr = &s_ptr->bar;
            if (s_ptr->l != 4294967295ul || s_ptr->bar != -5) {
                return 0;
            }
            if (s_ptr->in_ptr->a != 10.0 || s_ptr->in_ptr->b != 'x' ||
                s_ptr->in_array->a != 11.0 || (s_ptr->in_array + 3)->a != 12.0) {
                return 0;
            }
            char *char_ptr = &s_ptr->in_ptr->b;
            if (*char_ptr != 'x') {
                return 0;
            }
            *s_ptr->in_array->ptr = 123;
            if (s_ptr->bar != 123) {
                return 0;
            }
            s_ptr->in_ptr->b = s_ptr->in_ptr->a;
            if (s_ptr->in_ptr->b != 10) {
                return 0;
            }
            return 1;
        }
        int test_mixed(void) {
            struct inner *in_ptr = malloc(sizeof(struct inner));
            struct outer out;
            out.in_ptr = in_ptr;
            struct outer *out_ptr = &out;
            out.l = 10;
            out.bar = 20;
            out.in_ptr->a = -1.0;
            out.in_ptr->b = '!';
            out.in_ptr->ptr = 0;
            out_ptr->in_array[0].a = -2.0;
            out_ptr->in_array[0].b = '?';
            out_ptr->in_array[0].ptr = 0;
            out_ptr->in_array[3].a = -3.0;
            out_ptr->in_array[3].b = '*';
            out_ptr->in_array[3].ptr = malloc(sizeof(int));
            out_ptr->in.a = -3.0;
            out_ptr->in.b = '&';
            int i = 9;
            out_ptr->in.ptr = &i;
            if (out.l != 10 || out.bar != 20) {
                return 0;
            }
            if (out.in_ptr->a != -1.0 || out.in_ptr->b != '!' || out.in_ptr->ptr) {
                return 0;
            }
            if (out_ptr->in_array[0].a != -2.0 || out_ptr->in_array[0].b != '?' ||
                out_ptr->in_array[0].ptr || out_ptr->in_array[3].a != -3.0 ||
                out_ptr->in_array[3].b != '*' || out_ptr->in.a != -3.0 ||
                out_ptr->in.b != '&' || out_ptr->in.ptr != &i) {
                return 0;
            }
            *out_ptr->in_array[3].ptr = 5;
            if (*out_ptr->in_array[3].ptr != 5) {
                return 0;
            }
            out_ptr->in.b = out.in_ptr->b;
            if (out_ptr->in.b != out.in_ptr->b) {
                return 0;
            }
            return 1;
        }
        int test_array_of_structs(void) {
            static struct outer struct_array[3];
            struct inner *in_ptr = malloc(sizeof(struct inner));
            struct_array[0].in_ptr = in_ptr;
            struct_array[1].in_ptr = in_ptr;
            struct_array[0].in_ptr->a = 20.0;
            struct_array[1].in_ptr->b = '@';
            struct_array[0].in_ptr->ptr = 0;
            struct_array[1].in_array[1].a = 30.0;
            struct_array[1].in_array[0].b = '#';
            struct_array[2].in.a = 40.0;
            struct_array[2].in.b = '$';
            if (struct_array[1].in_ptr->a != 20.0 || struct_array[0].in_ptr->b != '@' ||
                struct_array[1].in_ptr->ptr) {
                return 0;
            }
            if (struct_array[1].in_array[1].a != 30.0 ||
                struct_array[1].in_array[0].b != '#' || struct_array[2].in.a != 40.0 ||
                struct_array[2].in.b != '$') {
                return 0;
            }
            return 1;
        }
        int test_array_of_struct_pointers(void) {
            struct outer *ptr_array[2];
            ptr_array[0] = calloc(1, sizeof(struct outer));
            ptr_array[1] = calloc(1, sizeof(struct outer));
            ptr_array[1]->in_ptr = calloc(1, sizeof(struct inner));
            ptr_array[1]->in_ptr->ptr = 0;
            ptr_array[1]->in_ptr->b = '%';
            ptr_array[1]->in_ptr->a = 876.5;
            ptr_array[1]->in_array[2].a = 1000.5;
            ptr_array[1]->in.a = 7e6;
            ptr_array[0]->in_ptr = calloc(1, sizeof(struct inner));
            ptr_array[0]->in_ptr->ptr = 0;
            ptr_array[0]->in_ptr->b = '^';
            ptr_array[0]->in_ptr->a = 123.4;
            ptr_array[0]->in_array[1].b = '&';
            ptr_array[0]->in.ptr = &ptr_array[0]->bar;
            ptr_array[0]->bar = 900;
            if (ptr_array[0]->in_array[1].b != '&') {
                return 0;
            }
            if (ptr_array[0]->in_ptr->a != 123.4 || ptr_array[0]->in_ptr->b != '^' ||
                ptr_array[0]->in_ptr->ptr) {
                return 0;
            }
            if (ptr_array[1]->in.a != 7e6) {
                return 0;
            }
            if (ptr_array[1]->in_array[2].a != 1000.5) {
                return 0;
            }
            if (ptr_array[1]->in_ptr->a != 876.5 || ptr_array[1]->in_ptr->b != '%' ||
                ptr_array[1]->in_ptr->ptr) {
                return 0;
            }
            if (*ptr_array[0]->in.ptr != 900) {
                return 0;
            }
            if (ptr_array[0]->l) {
                return 0;
            }
            for (int i = 0; i < 4; i = i + 1) {
                struct inner *elem_ptr = &ptr_array[0]->in_array[i];
                if (elem_ptr->a || elem_ptr->ptr) {
                    return 0;
                }
                if (elem_ptr->b && i != 1) {
                    return 0;
                }
            }
            if (ptr_array[0]->in.a || ptr_array[0]->in.b) {
                return 0;
            }
            if (ptr_array[1]->l || ptr_array[1]->bar) {
                return 0;
            }
            for (int i = 0; i < 4; i = i + 1) {
                struct inner *elem_ptr = &ptr_array[1]->in_array[i];
                if (elem_ptr->b || elem_ptr->ptr) {
                    return 0;
                }
                if (elem_ptr->a && i != 2) {
                    return 0;
                }
            }
            if (ptr_array[1]->in.b || ptr_array[1]->in.ptr) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto_dot()) {
                return 1;
            }
            if (!test_static_dot()) {
                return 2;
            }
            if (!test_auto_arrow()) {
                return 3;
            }
            if (!test_static_arrow()) {
                return 4;
            }
            if (!test_mixed()) {
                return 5;
            }
            if (!test_array_of_structs()) {
                return 6;
            }
            if (!test_array_of_struct_pointers()) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        Int,
        Star,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Char,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Star,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Char,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Star,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::ULong),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Arrow,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::ULong),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Char,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Star,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::ULong),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Arrow,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::ULong),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Char,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Star,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Minus,
        DoubleConstant,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        Minus,
        DoubleConstant,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        Minus,
        DoubleConstant,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Int,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Minus,
        DoubleConstant,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Minus,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        DoubleConstant,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        DoubleConstant,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        DoubleConstant,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Star,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        AmpersandAmpersand,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        AmpersandAmpersand,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_scalar_member_access_static_structs() {
    let src = r#"
        void *malloc(unsigned long size);
        int putchar(int ch);
        int puts(char *s);
        void test_static_local(int a, int b) {
            struct s {
                int a;
                int b;
            };
            static struct s static_struct;
            if (!(static_struct.a || static_struct.b)) {
                puts("zero");
            } else {
                putchar(static_struct.a);
                putchar(static_struct.b);
                putchar('\n');
            }
            static_struct.a = a;
            static_struct.b = b;
        }
        void test_static_local_pointer(int a, int b) {
            struct s {
                int a;
                int b;
            };
            static struct s *struct_ptr;
            if (!struct_ptr) {
                struct_ptr = malloc(sizeof(struct s));
            } else {
                putchar(struct_ptr->a);
                putchar(struct_ptr->b);
                putchar('\n');
            }
            struct_ptr->a = a;
            struct_ptr->b = b;
        }
        struct global {
            char x;
            char y;
            char z;
        };
        struct global g;
        void f1(void) {
            g.x = g.x + 1;
            g.y = g.y + 1;
            g.z = g.z + 1;
        }
        void f2(void) {
            putchar(g.x);
            putchar(g.y);
            putchar(g.z);
            putchar('\n');
        }
        void test_global_struct(void) {
            g.x = 'A';
            g.y = 'B';
            g.z = 'C';
            f1();
            f2();
            f1();
            f2();
        }
        struct global *g_ptr;
        void f3(void) {
            g_ptr->x = g_ptr->x + 1;
            g_ptr->y = g_ptr->y + 1;
            g_ptr->z = g_ptr->z + 1;
        }
        void f4(void) {
            putchar(g_ptr->x);
            putchar(g_ptr->y);
            putchar(g_ptr->z);
            putchar('\n');
        }
        void test_global_struct_pointer(void) {
            g_ptr = &g;
            f3();
            f4();
            f3();
            f4();
            g_ptr = malloc(sizeof(struct global));
            g_ptr->x = 'a';
            g_ptr->y = 'b';
            g_ptr->z = 'c';
            f3();
            f4();
            f3();
            f4();
        }
        int main(void) {
            test_static_local('m', 'n');
            test_static_local('o', 'p');
            test_static_local('!', '!');
            ;
            test_static_local_pointer('w', 'x');
            test_static_local_pointer('y', 'z');
            test_static_local_pointer('!', '!');
            ;
            test_global_struct();
            test_global_struct_pointer();
            return 0;
        }
    "#;
    let expected = vec![
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Bang,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        StringLiteral,
        CloseParen,
        Semicolon,
        CloseBrace,
        Else,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CharLiteral,
        CloseParen,
        Semicolon,
        CloseBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        CloseBrace,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        CloseBrace,
        Else,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CharLiteral,
        CloseParen,
        Semicolon,
        CloseBrace,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CharLiteral,
        CloseParen,
        Semicolon,
        CloseBrace,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CharLiteral,
        CloseParen,
        Semicolon,
        CloseBrace,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        CharLiteral,
        Comma,
        CharLiteral,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CharLiteral,
        Comma,
        CharLiteral,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CharLiteral,
        Comma,
        CharLiteral,
        CloseParen,
        Semicolon,
        Semicolon,
        Identifier,
        OpenParen,
        CharLiteral,
        Comma,
        CharLiteral,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CharLiteral,
        Comma,
        CharLiteral,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CharLiteral,
        Comma,
        CharLiteral,
        CloseParen,
        Semicolon,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_semantic_analysis_cast_struct_to_void() {
    let src = r#"
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s x = {1, 2};
            (void)x;
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        OpenParen,
        Void,
        CloseParen,
        Identifier,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_semantic_analysis_incomplete_structs() {
    let src = r#"
        void *malloc(unsigned long size);
        void *calloc(unsigned long nmemb, unsigned long size);
        int puts(char *s);
        int strcmp(char *s1, char *s2);
        struct never_used;
        struct never_used incomplete_fun(struct never_used x);
        int test_block_scope_forward_decl(void) {
            struct s;
            struct s *s_ptr = 0;
            struct s {
                int x;
                int y;
            };
            struct s val = {1, 2};
            s_ptr = &val;
            if (s_ptr->x != 1 || s_ptr->y != 2) {
                return 0;
            }
            return 1;
        }
        struct pair;
        struct pair *make_struct(void);
        int validate_struct(struct pair *ptr);
        int test_file_scope_forward_decl(void) {
            struct pair *my_struct = make_struct();
            return validate_struct(my_struct);
        }
        struct pair {
            long l;
            long m;
        };
        struct pair *make_struct(void) {
            struct pair *retval = malloc(sizeof(struct pair));
            retval->l = 100;
            retval->m = 200;
            return retval;
        }
        int validate_struct(struct pair *ptr) {
            return (ptr->l == 100 && ptr->m == 200);
        }
        struct msg_holder;
        void print_msg(struct msg_holder *param);
        int validate_incomplete_var(void);
        extern struct msg_holder incomplete_var;
        int test_incomplete_var(void) {
            print_msg(&incomplete_var);
            return validate_incomplete_var();
        }
        struct msg_holder {
            char *msg;
        };
        int validate_incomplete_var(void) {
            if (strcmp(incomplete_var.msg, "I'm a struct!")) {
                return 0;
            }
            return 1;
        }
        struct msg_holder incomplete_var = {"I'm a struct!"};
        void print_msg(struct msg_holder *param) {
            puts(param->msg);
        }
        int test_deref_incomplete_var(void) {
            struct undefined_struct;
            struct undefined_struct *ptr = malloc(4);
            return &*ptr == ptr;
        }
        struct opaque_struct;
        struct opaque_struct *use_struct_pointers(struct opaque_struct *param) {
            if (param == 0) {
                puts("empty pointer!");
            }
            return 0;
        }
        int test_use_incomplete_struct_pointers(void) {
            struct opaque_struct *ptr1 = calloc(1, 4);
            struct opaque_struct *ptr2 = calloc(1, 4);
            char *ptr1_bytes = (char *)ptr1;
            if (ptr1_bytes[0] || ptr1_bytes[1]) {
                return 0;
            }
            if (ptr1 == 0 || ptr2 == 0 || ptr1 == ptr2) {
                return 0;
            }
            static int flse = 0;
            struct opaque_struct *ptr3 = flse ? ptr1 : ptr2;
            if (ptr3 != ptr2) {
                return 0;
            }
            if (use_struct_pointers(ptr3)) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_block_scope_forward_decl()) {
                return 2;
            }
            if (!test_file_scope_forward_decl()) {
                return 3;
            }
            if (!test_incomplete_var()) {
                return 4;
            }
            if (!test_deref_incomplete_var()) {
                return 5;
            }
            if (!test_use_incomplete_struct_pointers()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Long,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        Arrow,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Star,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        Ampersand,
        Star,
        Identifier,
        EqualEqual,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        StringLiteral,
        CloseParen,
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        EqualEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        Question,
        Identifier,
        Colon,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_semantic_analysis_namespaces() {
    let src = r#"
        int test_shared_member_names(void) {
            struct pair1 {
                int x;
                int y;
            };
            struct pair2 {
                double x;
                char y;
            };
            struct pair1 p1 = {1, 2};
            struct pair2 p2 = {3.0, 4};
            if (p1.x != 1 || p2.x != 3.0) {
                return 0;
            }
            return 1;
        }
        int test_shared_nested_member_names(void) {
            struct pair1 {
                int x;
                int *y;
            };
            struct pair2 {
                void *x;
                double y[4];
            };
            struct pair1 p1 = {3, &(p1.x)};
            struct pair2 p2 = {&p1, {1.0, 2.0, 3.0, 4.0}};
            if (((struct pair1 *)p2.x)->x != 3) {
                return 0;
            }
            return 1;
        }
        int test_same_name_var_member_and_tag(void) {
            struct x {
                int x;
            };
            struct x x = {10};
            if (x.x != 10) {
                return 0;
            }
            return 1;
        }
        int test_same_name_fun_member_and_tag(void) {
            struct f {
                int f;
            };
            int f(void);
            struct f my_struct;
            my_struct.f = f();
            if (my_struct.f != 10) {
                return 0;
            }
            return 1;
        }
        int f(void) {
            return 10;
        }
        int main(void) {
            if (!test_shared_member_names()) {
                return 1;
            }
            if (!test_shared_nested_member_names()) {
                return 2;
            }
            if (!test_same_name_var_member_and_tag()) {
                return 3;
            }
            if (!test_same_name_fun_member_and_tag()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Star,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Void,
        Star,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        Ampersand,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        Ampersand,
        Identifier,
        Comma,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        OpenParen,
        Struct,
        Identifier,
        Star,
        CloseParen,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_semantic_analysis_resolve_tags() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        void *malloc(unsigned long size);
        struct s {
            int a;
        };
        int test_var_declaration(void) {
            struct shadow {
                int x;
            };
            struct shadow outer;
            outer.x = 2;
            {
                struct shadow {
                    int y;
                };
                struct shadow inner;
                inner.y = 3;
                if (outer.x != 2) {
                    return 0;
                }
                if (inner.y != 3) {
                    return 0;
                }
            }
            return 1;
        }
        int test_member_declaration(void) {
            struct s {
                int b;
                struct s *self_ptr;
            };
            struct s my_struct = {123, 0};
            my_struct.self_ptr = &my_struct;
            if (my_struct.self_ptr->b != 123) {
                return 0;
            }
            return 1;
        }
        int test_function_declaration(void) {
            struct s outer_struct = {1};
            {
                struct s {
                    int arr[40];
                };
            }
            struct s *copy_struct(struct s * arg);
            struct s *copy = copy_struct(&outer_struct);
            if (copy->a != outer_struct.a) {
                return 0;
            }
            return 1;
        }
        struct s *copy_struct(struct s *arg) {
            struct s *ptr = malloc(4);
            ptr->a = arg->a;
            return ptr;
        }
        int test_for_loop(void) {
            for (struct s loop_struct = {10}; loop_struct.a > 0;
                 loop_struct.a = loop_struct.a - 1) {
                struct s {
                    double d;
                };
                static struct s loop_body_struct = {0};
                loop_body_struct.d = loop_body_struct.d + 1;
                if (loop_struct.a == 1) {
                    if (loop_body_struct.d != 10.0) {
                        return 0;
                    }
                }
            }
            return 1;
        }
        int test_cast(void) {
            void *ptr = malloc(10);
            if (ptr) {
                struct s {
                    char arr[10];
                };
                ((struct s *)ptr)->arr[2] = 10;
                char byte = ((char *)ptr)[2];
                if (byte != 10) {
                    return 0;
                }
            }
            void *second_ptr = malloc(4);
            ((struct s *)second_ptr)->a = 10;
            char lowest_byte = ((char *)second_ptr)[0];
            if (lowest_byte != 10) {
                return 0;
            }
            return 1;
        }
        int test_sizeof(void) {
            struct s {
                int a;
                int b;
            };
            struct s x;
            {
                struct s {
                    char arr[15];
                };
                if (sizeof x != 8) {
                    return 0;
                };
                if (sizeof(struct s) != 15) {
                    return 0;
                }
            }
            if (sizeof(struct s) != 8) {
                return 0;
            }
            return 1;
        }
        int test_derived_types(void) {
            struct s outer_struct = {1};
            struct s *(*outer_arr)[3] = calloc(3, sizeof(void *));
            struct s {
                int x;
            };
            struct s inner_struct = {2};
            struct s *(*inner_arr)[3] = calloc(3, sizeof(void *));
            outer_arr[0][0] = &outer_struct;
            outer_arr[0][1] = &outer_struct;
            inner_arr[0][0] = &inner_struct;
            inner_arr[0][2] = &inner_struct;
            if (outer_arr[0][0]->a != 1) {
                return 0;
            }
            if (inner_arr[0][0]->x != 2) {
                return 0;
            }
            return 1;
        }
        int test_contentless_tag_noop(void) {
            struct s {
                int x;
                int y;
            };
            struct s;
            struct s var;
            var.x = 10;
            var.y = 11;
            if (var.x != 10 || var.y != 11) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_var_declaration()) {
                return 1;
            }
            if (!test_member_declaration()) {
                return 2;
            }
            if (!test_function_declaration()) {
                return 3;
            }
            if (!test_for_loop()) {
                return 4;
            }
            if (!test_cast()) {
                return 5;
            }
            if (!test_sizeof()) {
                return 6;
            }
            if (!test_derived_types()) {
                return 7;
            }
            if (!test_contentless_tag_noop()) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Greater,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Void,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        OpenParen,
        OpenParen,
        Struct,
        Identifier,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        Arrow,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        OpenParen,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Void,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        OpenParen,
        OpenParen,
        Struct,
        Identifier,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        OpenParen,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Sizeof,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Void,
        Star,
        CloseParen,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Void,
        Star,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_size_and_offset_calculations_member_comparisons() {
    let src = r#"
        struct three_ints {
            int a;
            int b;
            int c;
        };
        void* calloc(unsigned long nmem, unsigned long size);
        int main(void) {
            struct three_ints* my_struct = calloc(1, sizeof(struct three_ints));
            if ((void*)my_struct != &my_struct->a) {
                return 1;
            }
            if (!((int *)my_struct <= &my_struct->a)) {
                return 2;
            }
            if (&my_struct->c <= &my_struct->a) {
                return 3;
            }
            if (&my_struct->b > &my_struct->c) {
                return 4;
            }
            if (!(&my_struct->b > &my_struct->a)) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Void,
        Star,
        CloseParen,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        OpenParen,
        OpenParen,
        Int,
        Star,
        CloseParen,
        Identifier,
        LessEqual,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        LessEqual,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Greater,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        OpenParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Greater,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_size_and_offset_calculations_member_offsets() {
    let src = r#"
        struct eight_bytes {
            int i;
            char c;
        };
        struct two_bytes {
            char arr[2];
        };
        struct three_bytes {
            char arr[3];
        };
        struct sixteen_bytes {
            struct eight_bytes eight;
            struct two_bytes two;
            struct three_bytes three;
        };
        struct seven_bytes {
            struct two_bytes two;
            struct three_bytes three;
            struct two_bytes two2;
        };
        struct twentyfour_bytes {
            struct seven_bytes seven;
            struct sixteen_bytes sixteen;
        };
        struct twenty_bytes {
            struct sixteen_bytes sixteen;
            struct two_bytes two;
        };
        struct wonky {
            char arr[19];
        };
        struct internal_padding {
            char c;
            double d;
        };
        struct contains_struct_array {
            char c;
            struct eight_bytes struct_array[3];
        };
        
        void *malloc(unsigned long size);
        int test_eightbytes(void) {
            struct eight_bytes s;
            unsigned long start_addr = (unsigned long)&s;
            unsigned long i_addr = (unsigned long)&s.i;
            unsigned long c_addr = (unsigned long)&s.c;
            unsigned long end_addr = (unsigned long)(&s + 1);
            if (start_addr % 4 != 0) {
                return 0;
            }
            if (start_addr != i_addr) {
                return 0;
            }
            if (c_addr - start_addr != 4) {
                return 0;
            }
            if (end_addr - start_addr != 8) {
                return 0;
            }
            return 1;
        }
        int test_internal_padding(void) {
            struct internal_padding *s_ptr = malloc(sizeof(struct internal_padding));
            unsigned long start_addr = (unsigned long)s_ptr;
            unsigned long c_addr = (unsigned long)&s_ptr->c;
            unsigned long d_addr = (unsigned long)&s_ptr->d;
            unsigned long end_ptr = (unsigned long)(s_ptr + 1);
            if (start_addr % 8 != 0) {
                return 0;
            }
            if (start_addr != c_addr) {
                return 0;
            }
            if (d_addr - c_addr != 8) {
                return 0;
            }
            if (end_ptr - start_addr != 16) {
                return 0;
            }
            return 1;
        }
        int test_three_bytes(void) {
            static struct three_bytes s;
            unsigned long start_addr = (unsigned long)&s;
            unsigned long arr_addr = (unsigned long)&s.arr;
            unsigned long arr0_addr = (unsigned long)&s.arr[0];
            unsigned long arr1_addr = (unsigned long)&s.arr[1];
            unsigned long arr1_addr_alt = (unsigned long)(s.arr + 1);
            unsigned long arr2_addr = (unsigned long)&s.arr[2];
            unsigned long arr_end = (unsigned long)(&s.arr + 1);
            unsigned long struct_end = (unsigned long)(&s + 1);
            if (start_addr != arr_addr) {
                return 0;
            }
            if (start_addr != arr0_addr) {
                return 0;
            }
            if (arr1_addr - start_addr != 1) {
                return 0;
            }
            if (arr1_addr != arr1_addr_alt) {
                return 0;
            }
            if (arr2_addr - start_addr != 2) {
                return 0;
            }
            if (arr_end - start_addr != 3) {
                return 0;
            }
            if (struct_end - start_addr != 3) {
                return 0;
            }
            return 1;
        }
        int test_sixteen_bytes(void) {
            static struct sixteen_bytes s;
            struct sixteen_bytes *s_ptr = &s;
            unsigned long start_addr = (unsigned long)s_ptr;
            unsigned long eight_addr = (unsigned long)&s_ptr->eight;
            unsigned long eight_i_addr = (unsigned long)&s_ptr->eight.i;
            unsigned long eight_c_addr = (unsigned long)&s_ptr->eight.c;
            unsigned long two = (unsigned long)&s_ptr->two;
            unsigned long two_arr = (unsigned long)s_ptr->two.arr;
            unsigned long two_arr0 = (unsigned long)&s_ptr->two.arr[0];
            unsigned long two_arr1 = (unsigned long)&s_ptr->two.arr[1];
            unsigned long two_arr_end = (unsigned long)(&s_ptr->two.arr + 1);
            unsigned long two_end = (unsigned long)(&s_ptr->two + 1);
            unsigned long three = (unsigned long)&s_ptr->three;
            unsigned long three_end = (unsigned long)(&s_ptr->three + 1);
            unsigned long struct_end = (unsigned long)(s_ptr + 1);
            if (start_addr % 4 != 0) {
                return 0;
            }
            if (start_addr != eight_addr) {
                return 0;
            }
            if (start_addr != eight_i_addr) {
                return 0;
            }
            if (eight_c_addr - start_addr != 4) {
                return 0;
            }
            if (two - start_addr != 8) {
                return 0;
            }
            if (two_arr - start_addr != 8) {
                return 0;
            }
            if (two_arr0 - start_addr != 8) {
                return 0;
            }
            if (two_arr1 - start_addr != 9) {
                return 0;
            }
            if (two_arr_end - start_addr != 10) {
                return 0;
            }
            if (two_arr_end != two_end) {
                return 0;
            }
            if (three - start_addr != 10) {
                return 0;
            }
            if (three_end - start_addr != 13) {
                return 0;
            }
            if (struct_end - start_addr != 16) {
                return 0;
            }
            unsigned long eight_i_addr_alt = (unsigned long)&s.eight.i;
            unsigned long eight_c_addr_alt = (unsigned long)&s.eight.c;
            unsigned long two_arr_alt = (unsigned long)s.two.arr;
            unsigned long two_arr1_alt = (unsigned long)&s.two.arr[1];
            unsigned long three_alt = (unsigned long)&s.three;
            if (eight_i_addr_alt != eight_i_addr) {
                return 0;
            }
            if (eight_c_addr_alt != eight_c_addr) {
                return 0;
            }
            if (two_arr_alt != two_arr) {
                return 0;
            }
            if (two_arr1_alt != two_arr1) {
                return 0;
            }
            if (three_alt != three) {
                return 0;
            }
            return 1;
        }
        int test_wonky_array(void) {
            struct wonky wonky_array[5];
            unsigned long array_start = (unsigned long)wonky_array;
            unsigned long elem3 = (unsigned long)(wonky_array + 3);
            unsigned long elem3_arr = (unsigned long)wonky_array[3].arr;
            unsigned long elem2_arr2 = (unsigned long)&wonky_array[2].arr[2];
            unsigned long elem2_arr_end = (unsigned long)(wonky_array[2].arr + 19);
            unsigned long elem4_arr_end = (unsigned long)(wonky_array[4].arr + 19);
            unsigned long array_end = (unsigned long)(wonky_array + 5);
            if (elem3 - array_start != 19 * 3) {
                return 0;
            }
            if (elem3_arr != elem3) {
                return 0;
            }
            if (elem2_arr2 - array_start != 19 * 2 + 2) {
                return 0;
            }
            if (elem2_arr_end != elem3) {
                return 0;
            }
            if (elem4_arr_end != array_end) {
                return 0;
            }
            return 1;
        }
        int test_contains_struct_array_array(void) {
            struct contains_struct_array arr[3];
            unsigned long array_start = (unsigned long)arr;
            unsigned long first_scalar_elem = (unsigned long)(&arr[0].c);
            unsigned long outer0_inner0_i = (unsigned long)(&arr[0].struct_array->i);
            unsigned long outer0_inner0_c = (unsigned long)(&arr->struct_array->c);
            unsigned long outer0_end = (unsigned long)(arr->struct_array + 3);
            unsigned long outer1 = (unsigned long)(&arr[1]);
            unsigned long outer1_arr = (unsigned long)(arr[1].struct_array);
            unsigned long outer1_inner1_i =
                (unsigned long)&(((arr + 1)->struct_array + 1)->i);
            unsigned long outer2_inner0_c =
                (unsigned long)&((arr + 2)->struct_array->c);
            if (array_start % 4 != 0) {
                return 0;
            }
            if (first_scalar_elem != array_start) {
                return 0;
            }
            if (outer0_inner0_i - array_start != 4) {
                return 0;
            }
            if (outer0_inner0_c - array_start != 8) {
                return 0;
            }
            if (outer0_end != outer1) {
                return 0;
            }
            if (outer1_arr - array_start != 32) {
                return 0;
            }
            if (outer1_arr - outer1 != 4) {
                return 0;
            }
            if (outer1_inner1_i - array_start != 40) {
                return 0;
            }
            if (outer2_inner0_c - array_start != 64) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_eightbytes()) {
                return 1;
            }
            if (!test_internal_padding()) {
                return 2;
            }
            if (!test_three_bytes()) {
                return 3;
            }
            if (!test_sixteen_bytes()) {
                return 4;
            }
            if (!test_wonky_array()) {
                return 5;
            }
            if (!test_contains_struct_array_array()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Ampersand,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Percent,
        IntConstant(IntKind::Int),
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Percent,
        IntConstant(IntKind::Int),
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Ampersand,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Percent,
        IntConstant(IntKind::Int),
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        Star,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        Star,
        IntConstant(IntKind::Int),
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Ampersand,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        OpenParen,
        OpenParen,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Arrow,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Arrow,
        Identifier,
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Ampersand,
        OpenParen,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Percent,
        IntConstant(IntKind::Int),
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_size_and_offset_calculations_sizeof_exps() {
    let src = r#"
        struct eight_bytes {
            int i;
            char c;
        };
        struct two_bytes {
            char arr[2];
        };
        struct three_bytes {
            char arr[3];
        };
        struct sixteen_bytes {
            struct eight_bytes eight;
            struct two_bytes two;
            struct three_bytes three;
        };
        struct seven_bytes {
            struct two_bytes two;
            struct three_bytes three;
            struct two_bytes two2;
        };
        struct twentyfour_bytes {
            struct seven_bytes seven;
            struct sixteen_bytes sixteen;
        };
        struct twenty_bytes {
            struct sixteen_bytes sixteen;
            struct two_bytes two;
        };
        struct wonky {
            char arr[19];
        };
        struct internal_padding {
            char c;
            double d;
        };
        struct contains_struct_array {
            char c;
            struct eight_bytes struct_array[3];
        };
        
        struct twenty_bytes *get_twentybyte_ptr(void) {
            return 0;
        }
        int main(void) {
            struct contains_struct_array arr_struct;
            if (sizeof arr_struct.struct_array[2] !=
                8) {
                return 1;
            }
            static struct twentyfour_bytes twentyfour;
            if (sizeof twentyfour.seven.two2 != 2) {
                return 2;
            }
            if (sizeof get_twentybyte_ptr()->sixteen.three != 3) {
                return 3;
            }
            if (sizeof get_twentybyte_ptr()->sixteen != 16) {
                return 4;
            }
            if (sizeof twentyfour.seven != 7) {
                return 5;
            }
            if (sizeof twentyfour != 24) {
                return 6;
            }
            if (sizeof *get_twentybyte_ptr() != 20) {
                return 7;
            }
            if (sizeof *((struct wonky *)0) != 19) {
                return 8;
            }
            extern struct internal_padding struct_array[4];
            if (sizeof struct_array[0] != 16) {
                return 9;
            }
            if (sizeof arr_struct != 28) {
                return 10;
            }
            if (sizeof struct_array != 64) {
                return 11;
            }
            if (sizeof arr_struct.struct_array != 24) {
                return 12;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Sizeof,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Sizeof,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        Identifier,
        OpenParen,
        CloseParen,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        Identifier,
        OpenParen,
        CloseParen,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        Star,
        Identifier,
        OpenParen,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        Star,
        OpenParen,
        OpenParen,
        Struct,
        Identifier,
        Star,
        CloseParen,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Extern,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Sizeof,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_size_and_offset_calculations_sizeof_type() {
    let src = r#"
        struct eight_bytes {
            int i;
            char c;
        };
        struct two_bytes {
            char arr[2];
        };
        struct three_bytes {
            char arr[3];
        };
        struct sixteen_bytes {
            struct eight_bytes eight;
            struct two_bytes two;
            struct three_bytes three;
        };
        struct seven_bytes {
            struct two_bytes two;
            struct three_bytes three;
            struct two_bytes two2;
        };
        struct twentyfour_bytes {
            struct seven_bytes seven;
            struct sixteen_bytes sixteen;
        };
        struct twenty_bytes {
            struct sixteen_bytes sixteen;
            struct two_bytes two;
        };
        struct wonky {
            char arr[19];
        };
        struct internal_padding {
            char c;
            double d;
        };
        struct contains_struct_array {
            char c;
            struct eight_bytes struct_array[3];
        };
        
        int main(void) {
            if (sizeof(struct eight_bytes) != 8) {
                return 1;
            }
            if (sizeof(struct two_bytes) != 2) {
                return 2;
            }
            if (sizeof(struct three_bytes) != 3) {
                return 3;
            }
            if (sizeof(struct sixteen_bytes) != 16) {
                return 4;
            }
            if (sizeof(struct seven_bytes) != 7) {
                return 5;
            }
            if (sizeof(struct twentyfour_bytes) != 24) {
                return 6;
            }
            if (sizeof(struct twenty_bytes) != 20) {
                return 7;
            }
            if (sizeof(struct wonky) != 19) {
                return 8;
            }
            if (sizeof(struct internal_padding) != 16) {
                return 9;
            }
            if (sizeof(struct contains_struct_array) != 28) {
                return 10;
            }
            if (sizeof(struct internal_padding[4]) != 64) {
                return 11;
            }
            if (sizeof(struct wonky[2]) != 38) {
                return 12;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_smoke_tests_simple() {
    let src = r#"
        struct pair {
            int a;
            int b;
        };
        int main(void) {
            struct pair x = {1, 2};
            if (x.a != 1 || x.b != 2) {
                return 1;
            }
            struct pair *x_ptr = &x;
            if (x_ptr->a != 1 || x_ptr->b != 2) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_smoke_tests_static_vs_auto() {
    let src = r#"
        struct s {
            int a;
            int b;
        };
        int main(void) {
            for (int i = 0; i < 10; i = i + 1) {
                struct s autom = {1, 2};
                static struct s stat = {1, 2};
                autom.a = autom.a + 1;
                autom.b = autom.b + 1;
                stat.a = stat.a + 1;
                stat.b = stat.b + 1;
                if (i == 9) {
                    if (stat.a != 11 || stat.b != 12) {
                        return 1;
                    }
                    if (autom.a != 2 || autom.b != 3) {
                        return 2;
                    }
                }
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_copy_struct() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void *malloc(unsigned long size);
        struct small {
            int a;
            long b;
        };
        struct s {
            char arr[3];
            struct small inner;
        };
        struct with_end_padding {
            int a;
            int b;
            char c;
        };
        int test_auto(void) {
            struct s x = {"ab", {-1, 2}};
            struct s y = {"x", {1}};
            y = x;
            if (strcmp(y.arr, "ab") || y.inner.a != -1 || y.inner.b != 2) {
                return 0;
            }
            y.inner.a = 20;
            if (y.inner.a != 20 || x.inner.a != -1) {
                return 0;
            }
            return 1;
        }
        int test_static(void) {
            static struct s x = {"ab", {1, 2}};
            static struct s y;
            y = x;
            if (strcmp(y.arr, "ab") || y.inner.a != 1 || y.inner.b != 2) {
                return 0;
            }
            return 1;
        }
        struct wonky {
            char arr[7];
        };
        int test_wonky_size(void) {
            struct wonky x = {"abcdef"};
            static struct wonky y;
            y = x;
            if (strcmp(y.arr, "abcdef")) {
                return 0;
            }
            return 1;
        }
        int true_flag(void) {
            return 1;
        }
        int test_conditional(void) {
            static struct s x = {"xy", {1234, 5678}};
            struct s y = {"!", {-10}};
            struct s z;
            z = true_flag() ? x : y;
            if (strcmp(z.arr, "xy") || z.inner.a != 1234 || z.inner.b != 5678) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_auto()) {
                return 1;
            }
            if (!test_static()) {
                return 2;
            }
            if (!test_wonky_size()) {
                return 3;
            }
            if (!test_conditional()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Question,
        Identifier,
        Colon,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_copy_struct_through_pointer() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void *malloc(unsigned long size);
        struct small {
            int a;
            long b;
        };
        struct s {
            char arr[3];
            struct small inner;
        };
        struct with_end_padding {
            int a;
            int b;
            char c;
        };
        int test_copy_to_pointer(void) {
            struct s y = {"!?", {-20, -30}};
            struct s *x = malloc(sizeof(struct s));
            *x = y;
            if (strcmp(x->arr, "!?") || x->inner.a != -20 || x->inner.b != -30) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_pointer(void) {
            static struct s my_struct = {"()", {77, 78}};
            struct s *y = &my_struct;
            struct s x = {"", {0, 0}};
            x = *y;
            if (strcmp(x.arr, "()") || x.inner.a != 77 || x.inner.b != 78) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_and_from_pointer(void) {
            struct s my_struct = {"+-", {1000, 1001}};
            struct s *y = &my_struct;
            struct s *x = malloc(sizeof(struct s));
            *x = *y;
            if (strcmp(x->arr, "+-") || x->inner.a != 1000 || x->inner.b != 1001) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_array_elem(void) {
            struct s y = {"\n\t", {10000, 20000}};
            static struct s arr[3];
            arr[1] = y;
            if (strcmp(arr[1].arr, "\n\t") || arr[1].inner.a != 10000 ||
                arr[1].inner.b != 20000) {
                return 0;
            }
            if (arr[0].inner.a || arr[0].inner.b || arr[2].arr[0] || arr[2].arr[1]) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_array_elem(void) {
            struct s arr[3] = {
                {"ab", {-3000, -4000}}, {"cd", {-5000, -6000}}, {"ef", {-7000, -8000}}};
            struct s x = {"", {0, 0}};
            x = arr[1];
            if (strcmp(x.arr, "cd") || x.inner.a != -5000 || x.inner.b != -6000) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_and_from_array_elem(void) {
            struct s arr[3] = {
                {"ab", {-3000, -4000}}, {"cd", {-5000, -6000}}, {"ef", {-7000, -8000}}};
            arr[0] = arr[2];
            if (strcmp(arr[0].arr, "ef") || arr[0].inner.a != -7000 ||
                arr[0].inner.b != -8000) {
                return 0;
            }
            if (strcmp(arr[1].arr, "cd") || arr[1].inner.a != -5000 ||
                arr[1].inner.b != -6000) {
                return 0;
            }
            if (strcmp(arr[2].arr, "ef") || arr[2].inner.a != -7000 ||
                arr[2].inner.b != -8000) {
                return 0;
            }
            return 1;
        }
        int test_copy_array_element_with_padding(void) {
            struct with_end_padding arr[3] = {{0, 1, 2}, {3, 4, 5}, {6, 7, 8}};
            struct with_end_padding elem = {9, 9, 9};
            arr[1] = elem;
            if (arr[0].a != 0 || arr[0].b != 1 || arr[0].c != 2 || arr[1].a != 9 ||
                arr[1].b != 9 || arr[1].c != 9 || arr[2].a != 6 || arr[2].b != 7 ||
                arr[2].c != 8) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_copy_to_pointer()) {
                return 1;
            }
            if (!test_copy_from_pointer()) {
                return 2;
            }
            if (!test_copy_to_and_from_pointer()) {
                return 3;
            }
            if (!test_copy_to_array_elem()) {
                return 4;
            }
            if (!test_copy_from_array_elem()) {
                return 5;
            }
            if (!test_copy_to_and_from_array_elem()) {
                return 6;
            }
            if (!test_copy_array_element_with_padding()) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Star,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Star,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Star,
        Identifier,
        Equal,
        Star,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_copy_struct_with_arrow_operator() {
    let src = r#"
        void *calloc(unsigned long nmemb, unsigned long size);
        void *malloc(unsigned long size);
        struct inner {
            double d;
            int i;
        };
        struct outer {
            char a;
            char b;
            struct inner substruct;
        };
        struct outermost {
            int i;
            struct outer *nested_ptr;
            struct outer nested_struct;
        };
        int test_copy_from_member_pointer(void) {
            struct inner small = {0.0, 0};
            struct outer *outer_ptr = malloc(sizeof(struct outer));
            outer_ptr->a = 100;
            outer_ptr->substruct.d = 21.5;
            outer_ptr->substruct.i = 100001;
            small = outer_ptr->substruct;
            if (small.d != 21.5 || small.i != 100001) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_member_pointer(void) {
            struct inner small = {99.25, 987654};
            struct outer *outer_ptr = calloc(1, sizeof(struct outer));
            outer_ptr->substruct = small;
            if (outer_ptr->substruct.d != 99.25 || outer_ptr->substruct.i != 987654) {
                return 0;
            }
            if (outer_ptr->a || outer_ptr->b) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_nested_member_pointer(void) {
            struct inner small = {99.25, 987654};
            struct outermost *outer_ptr = calloc(1, sizeof(struct outermost));
            outer_ptr->nested_ptr = calloc(1, sizeof(struct outer));
            outer_ptr->i = -5;
            outer_ptr->nested_ptr->a = 101;
            outer_ptr->nested_ptr->b = 102;
            outer_ptr->nested_ptr->substruct.d = 77.5;
            outer_ptr->nested_ptr->substruct.i = 88;
            small = outer_ptr->nested_ptr->substruct;
            if (small.d != 77.5 || small.i != 88) {
                return 0;
            }
            if (outer_ptr->i != -5 || outer_ptr->nested_struct.a) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_nested_member_pointer(void) {
            struct inner small = {99.25, 987654};
            struct outermost *outer_ptr = calloc(1, sizeof(struct outermost));
            outer_ptr->nested_ptr = calloc(1, sizeof(struct outer));
            outer_ptr->nested_ptr->substruct = small;
            if (outer_ptr->nested_ptr->substruct.d != 99.25 ||
                outer_ptr->nested_ptr->substruct.i != 987654) {
                return 0;
            }
            if (outer_ptr->nested_ptr->a || outer_ptr->nested_ptr->b) {
                return 0;
            }
            return 1;
        }
        int test_mixed_nested_access(void) {
            struct outermost s1 = {100, 0, {0, 0, {0, 0}}};
            struct outermost *s2_ptr = calloc(1, sizeof(struct outermost));
            s1.i = 2147483647;
            s1.nested_ptr = calloc(1, sizeof(struct outermost));
            s1.nested_ptr->a = 125;
            s1.nested_ptr->b = 126;
            s1.nested_ptr->substruct.d = -50.;
            s1.nested_ptr->substruct.i = -70;
            s1.nested_struct.a = 101;
            s1.nested_struct.b = 102;
            s2_ptr->i = -2147483647;
            s2_ptr->nested_ptr = calloc(1, sizeof(struct outermost));
            s2_ptr->nested_ptr->a = 5;
            s2_ptr->nested_ptr->b = 6;
            s2_ptr->nested_struct.substruct.d = 8.e8;
            s2_ptr->nested_struct.substruct.i = -5;
            s1.nested_ptr->substruct = s2_ptr->nested_struct.substruct;
            if (s1.nested_ptr->substruct.d != 8.e8 ||
                s1.nested_ptr->substruct.i != -5) {
                return 0;
            }
            if (s1.nested_ptr->a != 125 || s1.nested_ptr->b != 126) {
                return 0;
            }
            return 1;
        }
        int test_member_from_cast(void) {
            struct inner small = {20.0, 10};
            void *outer_ptr = calloc(1, sizeof(struct outer));
            ((struct outer *)outer_ptr)->substruct = small;
            if (((struct outer *)outer_ptr)->substruct.d != 20.0 ||
                ((struct outer *)outer_ptr)->substruct.i != 10) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_copy_from_member_pointer()) {
                return 1;
            }
            if (!test_copy_to_member_pointer()) {
                return 2;
            }
            if (!test_copy_from_nested_member_pointer()) {
                return 3;
            }
            if (!test_copy_to_nested_member_pointer()) {
                return 4;
            }
            if (!test_mixed_nested_access()) {
                return 5;
            }
            if (!test_member_from_cast()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        PipePipe,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Minus,
        DoubleConstant,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Void,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        OpenParen,
        OpenParen,
        Struct,
        Identifier,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        Arrow,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        OpenParen,
        Struct,
        Identifier,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        OpenParen,
        OpenParen,
        Struct,
        Identifier,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        Arrow,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_copy_struct_with_dot_operator() {
    let src = r#"
        struct inner {
            signed char a;
            signed char b;
            signed char arr[3];
        };
        struct outer {
            struct inner substruct;
            signed char x;
            signed char y;
        };
        struct outermost {
            struct outer nested;
            int i;
        };
        int test_copy_from_member(void) {
            static struct outer big_struct = {{10, 9, {8, 7, 6}}, 5, 4};
            char arr[3] = {'a', 'b', 'c'};
            struct inner substruct = {-1, -1, {-1, -1, -1}};
            char arr2[3] = {'d', 'e', 'f'};
            substruct = big_struct.substruct;
            if (substruct.a != 10 || substruct.b != 9 || substruct.arr[0] != 8 ||
                substruct.arr[1] != 7 || substruct.arr[2] != 6) {
                return 0;
            }
            if (arr[0] != 'a' || arr[1] != 'b' || arr[2] != 'c' || arr2[0] != 'd' ||
                arr2[1] != 'e' || arr2[2] != 'f') {
                return 0;
            }
            return 1;
        }
        int test_copy_to_member(void) {
            static struct outer big_struct = {{0, 0, {0, 0, 0}}, 0, 0};
            struct inner small_struct = {-1, -2, {-3, -4, -5}};
            big_struct.substruct = small_struct;
            if (big_struct.substruct.a != -1 || big_struct.substruct.b != -2 ||
                big_struct.substruct.arr[0] != -3 ||
                big_struct.substruct.arr[1] != -4 ||
                big_struct.substruct.arr[2] != -5) {
                return 0;
            }
            if (big_struct.x || big_struct.y) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_nested_member(void) {
            struct outermost biggest_struct = {{{-1, -2, {-3, -4, -5}}, -6, -7}, 0};
            static struct inner small_struct;
            small_struct = biggest_struct.nested.substruct;
            if (small_struct.a != -1 || small_struct.b != -2 ||
                small_struct.arr[0] != -3 || small_struct.arr[1] != -4 ||
                small_struct.arr[2] != -5) {
                return 0;
            }
            return 1;
        }
        int test_copy_to_nested_member(void) {
            struct outermost biggest_struct = {{{0, 0, {0, 0, 0}}, 0, 0}, -1};
            static struct inner small_struct = {50, 51, {52, 53, 54}};
            biggest_struct.nested.substruct = small_struct;
            if (biggest_struct.nested.substruct.a != 50 ||
                biggest_struct.nested.substruct.b != 51 ||
                biggest_struct.nested.substruct.arr[0] != 52 ||
                biggest_struct.nested.substruct.arr[1] != 53 ||
                biggest_struct.nested.substruct.arr[2] != 54) {
                return 0;
            }
            if (biggest_struct.nested.x || biggest_struct.nested.y) {
                return 0;
            }
            if (biggest_struct.i != -1) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_conditional(void) {
            struct outer big_struct = {{127, -128, {61, 62, 63}}, -10, -11};
            struct outer big_struct2 = {{0, 1, {2, 3, 4}}, 5, 6};
            static int t = 1;
            static int f = 0;
            struct inner small_struct = (f ? big_struct : big_struct2).substruct;
            if (small_struct.a != 0 || small_struct.b != 1 ||
                small_struct.arr[0] != 2 || small_struct.arr[1] != 3 ||
                small_struct.arr[2] != 4) {
                return 0;
            }
            small_struct = (t ? big_struct : big_struct2).substruct;
            if (small_struct.a != 127 || small_struct.b != -128 ||
                small_struct.arr[0] != 61 || small_struct.arr[1] != 62 ||
                small_struct.arr[2] != 63) {
                return 0;
            }
            return 1;
        }
        int test_copy_from_assignment(void) {
            struct outer big_struct = {{127, -128, {61, 62, 63}}, -10, -11};
            static struct outer big_struct2;
            static struct inner small_struct;
            small_struct = (big_struct2 = big_struct).substruct;
            if (small_struct.a != 127 || small_struct.b != -128 ||
                small_struct.arr[0] != 61 || small_struct.arr[1] != 62 ||
                small_struct.arr[2] != 63) {
                return 0;
            }
            if (big_struct2.substruct.a != 127 || big_struct2.substruct.b != -128 ||
                big_struct2.substruct.arr[0] != 61 ||
                big_struct2.substruct.arr[1] != 62 ||
                big_struct2.substruct.arr[2] != 63 || big_struct2.x != -10 ||
                big_struct2.y != -11) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_copy_from_member()) {
                return 1;
            }
            if (!test_copy_to_member()) {
                return 2;
            }
            if (!test_copy_from_nested_member()) {
                return 3;
            }
            if (!test_copy_to_nested_member()) {
                return 4;
            }
            if (!test_copy_from_conditional()) {
                return 6;
            }
            if (!test_copy_from_assignment()) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Signed,
        Char,
        Identifier,
        Semicolon,
        Signed,
        Char,
        Identifier,
        Semicolon,
        Signed,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Signed,
        Char,
        Identifier,
        Semicolon,
        Signed,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        CharLiteral,
        Comma,
        CharLiteral,
        Comma,
        CharLiteral,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        CharLiteral,
        Comma,
        CharLiteral,
        Comma,
        CharLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenParen,
        Identifier,
        Question,
        Identifier,
        Colon,
        Identifier,
        CloseParen,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        OpenParen,
        Identifier,
        Question,
        Identifier,
        Colon,
        Identifier,
        CloseParen,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        OpenParen,
        Identifier,
        Equal,
        Identifier,
        CloseParen,
        Dot,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_no_structure_parameters_struct_copy_stack_clobber() {
    let src = r#"
        void exit(int status);
        struct chars {
            char char_array[3];
        };
        static struct chars y = {{0, 1, 2}};
        static struct chars *ptr;
        void validate_array(char *char_array, int start, int code) {
            for (int i = 0; i < 3; i = i + 1) {
                if (char_array[i] != start + i) {
                    exit(code);
                }
            }
            return;
        }
        void increment_y(void) {
            y.char_array[0] = y.char_array[0] + 3;
            y.char_array[1] = y.char_array[1] + 3;
            y.char_array[2] = y.char_array[2] + 3;
        }
        int test_copy(void) {
            struct chars a = {"abc"};
            struct chars b = {"xyz"};
            struct chars c = {"def"};
            b = y;
            validate_array(a.char_array, 'a', 1);
            validate_array(b.char_array, 0, 2);
            validate_array(c.char_array, 'd', 3);
            return 0;
        }
        static struct chars to_validate;
        void validate_static(int start, int code) {
            validate_array(to_validate.char_array, start, code);
        }
        int test_load(void) {
            static struct chars b;
            struct chars a = {"ghi"};
            b = *ptr;
            to_validate = a;
            validate_static('g', 4);
            to_validate = b;
            validate_static(3, 5);
            return 0;
        }
        int test_store(void) {
            struct chars struct_array[3] = {{"jkl"}, {"xyz"}, {"mno"}};
            struct chars *ptr = &struct_array[1];
            *ptr = y;
            validate_array(struct_array[0].char_array, 'j', 6);
            validate_array(struct_array[1].char_array, 6, 7);
            validate_array(struct_array[2].char_array, 'm', 8);
            return 0;
        }
        struct chars_container {
            char c;
            struct chars chars;
            char arr[3];
        };
        int test_copy_from_offset(void) {
            struct chars a = {"pqr"};
            static struct chars b = {"xyz"};
            static struct chars_container container = {100, {{9, 10, 11}}, "123"};
            b = container.chars;
            to_validate = a;
            validate_static('p', 9);
            to_validate = b;
            validate_static(9, 10);
            return 0;
        }
        int test_copy_to_offset(void) {
            struct chars_container container = {
                'x', {{0, 0, 0}}, "stu"
            };
            container.chars = y;
            if (container.c != 'x') {
                exit(11);
            }
            validate_array(container.chars.char_array, 12, 12);
            validate_array(container.arr, 's', 13);
            return 0;
        }
        int main(void) {
            ptr = &y;
            test_copy();
            increment_y();
            test_load();
            increment_y();
            test_store();
            increment_y();
            test_copy_from_offset();
            increment_y();
            test_copy_to_offset();
            return 0;
        }
    "#;
    let expected = vec![
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        Plus,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        CloseBrace,
        Return,
        Semicolon,
        CloseBrace,
        Void,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        CharLiteral,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        CharLiteral,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Star,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        CharLiteral,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Comma,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Comma,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Star,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Comma,
        CharLiteral,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Dot,
        Identifier,
        Comma,
        CharLiteral,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        CharLiteral,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        CharLiteral,
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        CharLiteral,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_incomplete_param_type() {
    let src = r#"
        struct s;
        int foo(struct s blah);
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s arg = {1, 2};
            return foo(arg);
        }
        int foo(struct s blah) {
            return blah.a + blah.b;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Dot,
        Identifier,
        Plus,
        Identifier,
        Dot,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_libraries_classify_params() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct inner {
            int i;
            char ch2;
        };
        struct nested_ints {
            char ch1;
            struct inner nested;
        };
        struct flattened_ints {
            char c;
            int i;
            char a;
        };
        struct large {
            int i;
            double d;
            char arr[10];
        };
        struct two_ints {
            int i;
            int i2;
        };
        struct nested_double {
            double array[1];
        };
        struct two_eightbytes {
            double d;
            char c;
        };
        struct pass_in_memory {
            double w;
            double x;
            int y;
            long z;
        };
        int test_twelve_bytes(struct twelve_bytes s);
        int test_nested_ints(struct nested_ints s);
        int test_flattened_ints(struct flattened_ints s);
        int test_large(struct large s);
        int test_two_ints(struct two_ints s);
        int test_nested_double(struct nested_double s);
        int test_two_eightbytes(struct two_eightbytes s);
        int test_pass_in_memory(struct pass_in_memory s);
        
        int test_twelve_bytes(struct twelve_bytes s) {
            if (s.i != 0 || strcmp(s.arr, "lmnopqr")) {
                return 0;
            }
            return 1;
        }
        int test_nested_ints(struct nested_ints s) {
            if (s.ch1 != 127 || s.nested.i != 2147483647 || s.nested.ch2 != -128) {
                return 0;
            }
            return 1;
        }
        int test_flattened_ints(struct flattened_ints s) {
            if (s.c != 127 || s.i != 2147483647 || s.a != -128) {
                return 0;
            }
            return 1;
        }
        int test_large(struct large s) {
            if (s.i != 200000 || s.d != 23.25 || strcmp(s.arr, "abcdefghi")) {
                return 0;
            }
            return 1;
        }
        int test_two_ints(struct two_ints s) {
            if (s.i != 999 || s.i2 != 888) {
                return 0;
            }
            return 1;
        }
        int test_nested_double(struct nested_double s) {
            if (s.array[0] != 25.125e3) {
                return 0;
            }
            return 1;
        }
        int test_two_eightbytes(struct two_eightbytes s) {
            if (s.d != 1000. || s.c != 'x') {
                return 0;
            }
            return 1;
        }
        int test_pass_in_memory(struct pass_in_memory s) {
            if (s.w != 1.7e308 || s.x != -1.7e308 || s.y != -2147483647 ||
                s.z != -9223372036854775807l) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Long),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_libraries_classify_params_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct inner {
            int i;
            char ch2;
        };
        struct nested_ints {
            char ch1;
            struct inner nested;
        };
        struct flattened_ints {
            char c;
            int i;
            char a;
        };
        struct large {
            int i;
            double d;
            char arr[10];
        };
        struct two_ints {
            int i;
            int i2;
        };
        struct nested_double {
            double array[1];
        };
        struct two_eightbytes {
            double d;
            char c;
        };
        struct pass_in_memory {
            double w;
            double x;
            int y;
            long z;
        };
        int test_twelve_bytes(struct twelve_bytes s);
        int test_nested_ints(struct nested_ints s);
        int test_flattened_ints(struct flattened_ints s);
        int test_large(struct large s);
        int test_two_ints(struct two_ints s);
        int test_nested_double(struct nested_double s);
        int test_two_eightbytes(struct two_eightbytes s);
        int test_pass_in_memory(struct pass_in_memory s);
        
        int main(void) {
            struct twelve_bytes s1 = {0, "lmnopqr"};
            if (!test_twelve_bytes(s1)) {
                return 1;
            }
            struct nested_ints s2 = {127, {2147483647, -128}};
            if (!test_nested_ints(s2)) {
                return 2;
            }
            struct flattened_ints s3 = {127, 2147483647, -128};
            if (!test_flattened_ints(s3)) {
                return 3;
            }
            struct large s4 = {200000, 23.25, "abcdefghi"};
            if (!test_large(s4)) {
                return 4;
            }
            struct two_ints s5 = {999, 888};
            if (!test_two_ints(s5)) {
                return 5;
            }
            struct nested_double s6 = {{25.125e3}};
            if (!test_nested_double(s6)) {
                return 6;
            }
            struct two_eightbytes s7 = {1000., 'x'};
            if (!test_two_eightbytes(s7)) {
                return 7;
            }
            struct pass_in_memory s8 = {1.7e308, -1.7e308, -2147483647, -9223372036854775807l};
            if (!test_pass_in_memory(s8)) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        DoubleConstant,
        CloseBrace,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        CharLiteral,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        Minus,
        DoubleConstant,
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Long),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_libraries_modify_param() {
    let src = r#"
        struct inner {
            double d;
            int i;
        };
        struct outer {
            struct inner s;
            struct inner *ptr;
            long l;
        };
        int modify_simple_struct(struct inner s);
        int modify_nested_struct(struct outer s);
        
        int modify_simple_struct(struct inner s) {
            struct inner copy = s;
            s.d = 0.0;
            if (s.d || s.i != 3) {
                return 0;
            }
            if (copy.d != 2.0 || copy.i != 3) {
                return 0;
            }
            return 1;
        }
        int modify_nested_struct(struct outer s) {
            struct outer copy = s;
            s.l = 10;
            s.s.i = 200;
            s.ptr->d = 10.0;
            s.ptr->i = 11;
            if (s.s.i != 200 || s.s.d != 4.0 || s.l != 10 || s.ptr->d != 10.0 ||
                s.ptr->i != 11) {
                return 0;
            }
            if (copy.s.i != 5 || copy.s.d != 4.0 || copy.l != 1000 ||
                copy.ptr->d != 10.0 || copy.ptr->i != 11) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_libraries_modify_param_client() {
    let src = r#"
        struct inner {
            double d;
            int i;
        };
        struct outer {
            struct inner s;
            struct inner *ptr;
            long l;
        };
        int modify_simple_struct(struct inner s);
        int modify_nested_struct(struct outer s);
        
        int main(void) {
            struct inner s_inner = {2.0, 3};
            if (!modify_simple_struct(s_inner)) {
                return 1;
            }
            if (s_inner.d != 2.0 || s_inner.i != 3) {
                return 2;
            }
            struct outer s_o = {{4.0, 5}, &s_inner, 1000l};
            if (!modify_nested_struct(s_o)) {
                return 3;
            }
            if (s_o.s.d != 4.0 || s_o.s.i != 5 || s_o.l != 1000l) {
                return 4;
            }
            if (s_o.ptr != &s_inner) {
                return 5;
            }
            if (s_o.ptr->d != 10.0 || s_o.ptr->i != 11) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        IntConstant(IntKind::Long),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_libraries_param_calling_conventions() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int strncmp(char *s1, char *s2, unsigned long n);
        struct two_longs {
            long a;
            long b;
        };
        struct one_int {
            int i;
            char c;
        };
        struct one_int_exactly {
            unsigned long l;
        };
        struct two_ints {
            char c;
            int arr[3];
        };
        struct two_ints_nested {
            struct one_int a;
            struct one_int b;
        };
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct one_xmm {
            double d;
        };
        struct two_xmm {
            double d[2];
        };
        struct int_and_xmm {
            char c;
            double d;
        };
        struct xmm_and_int {
            struct one_xmm dbl;
            char c[3];
        };
        struct odd_size {
            char arr[5];
        };
        struct memory {
            double d;
            char c[3];
            long l;
            int i;
        };
        int pass_small_structs(struct two_xmm two_xmm_struct, struct one_int int_struct,
                               struct one_xmm xmm_struct,
                               struct xmm_and_int mixed_struct,
                               struct twelve_bytes int_struct_2,
                               struct one_int_exactly another_int_struct);
        int a_bunch_of_arguments(int i0, int i1, int i2, int i3, int i4,
                                 struct two_longs param, int i5);
        int structs_and_scalars(long l, double d, struct odd_size os, struct memory mem,
                                struct one_xmm xmm_struct);
        int struct_in_mem(double a, double b, double c, struct xmm_and_int first_struct,
                          double d, struct two_xmm second_struct, long l,
                          struct int_and_xmm third_struct,
                          struct one_xmm fourth_struct);
        int pass_borderline_struct_in_memory(struct two_ints t_i, int c,
                                             struct int_and_xmm i_x, void *ptr,
                                             struct two_ints_nested t_i_n, double d);
        int pass_uneven_struct_in_mem(struct twelve_bytes struct1, long a, long b,
                                      struct twelve_bytes struct2, struct odd_size os,
                                      struct memory m);
        int pass_later_structs_in_regs(struct memory m, struct twelve_bytes struct1, struct one_xmm struct2);
        int pass_small_structs(struct two_xmm two_xmm_struct, struct one_int int_struct,
                               struct one_xmm xmm_struct,
                               struct xmm_and_int mixed_struct,
                               struct twelve_bytes int_struct_2,
                               struct one_int_exactly another_int_struct) {
            if (two_xmm_struct.d[0] != 55.5 || two_xmm_struct.d[1] != 44.4)
                return 0;
            if (int_struct.c != 'c' || int_struct.i != 54320)
                return 0;
            if (xmm_struct.d != 5.125)
                return 0;
            if (strcmp(mixed_struct.c, "hi") || mixed_struct.dbl.d != 1.234)
                return 0;
            if (strcmp(int_struct_2.arr, "string!") || int_struct_2.i != 123)
                return 0;
            if (another_int_struct.l != 567890)
                return 0;
            return 1;
        }
        int a_bunch_of_arguments(int i0, int i1, int i2, int i3, int i4,
                                 struct two_longs param, int i5) {
            if (i0 != 0 || i1 != 1 || i2 != 2 || i3 != 3 || i4 != 4 || i5 != 5) {
                return 0;
            }
            if (param.a != 1234567l || param.b != 89101112l) {
                return 0;
            }
            return 1;
        }
        int structs_and_scalars(long l, double d, struct odd_size os, struct memory mem,
                                struct one_xmm xmm_struct) {
            if (l != 10)
                return 0;
            if (d != 10.0)
                return 0;
            if (strcmp(os.arr, "lmno"))
                return 0;
            if (strcmp(mem.c, "rs") || mem.d != 15.75 || mem.i != 3333 || mem.l != 4444)
                return 0;
            if (xmm_struct.d != 5.125)
                return 0;
            return 1;
        }
        int struct_in_mem(double a, double b, double c, struct xmm_and_int first_struct,
                          double d, struct two_xmm second_struct, long l,
                          struct int_and_xmm third_struct,
                          struct one_xmm fourth_struct) {
            if (a != 10.0 || b != 11.125 || c != 12.0)
                return 0;
            if (strcmp(first_struct.c, "hi") || first_struct.dbl.d != 1.234)
                return 0;
            if (d != 13.0)
                return 0;
            if (second_struct.d[0] != 55.5 || second_struct.d[1] != 44.4)
                return 0;
            if (l)
                return 0;
            if (third_struct.c != 'p' || third_struct.d != 4.56)
                return 0;
            if (fourth_struct.d != 5.125)
                return 0;
            return 1;
        }
        int pass_borderline_struct_in_memory(struct two_ints t_i, int c,
                                             struct int_and_xmm i_x, void *ptr,
                                             struct two_ints_nested t_i_n, double d) {
            if (t_i.c != '_' || t_i.arr[0] != 5 || t_i.arr[1] != 6 || t_i.arr[2] != 7)
                return 0;
            if (c != '!')
                return 0;
            if (i_x.c != 'p' || i_x.d != 4.56)
                return 0;
            if (ptr)
                return 0;
            if (t_i_n.a.c != 'c' || t_i_n.a.i != 54320)
                return 0;
            if (t_i_n.b.c != 'c' || t_i_n.b.i != 54320)
                return 0;
            if (d != 7.8)
                return 0;
            return 1;
        }
        int pass_uneven_struct_in_mem(struct twelve_bytes struct1, long a, long b,
                                      struct twelve_bytes struct2, struct odd_size os,
                                      struct memory m) {
            if (struct1.i != -1) {
                return 0;
            }
            if (struct1.arr[0] != 127 || struct1.arr[1] != 126 ||
                struct1.arr[2] != 125) {
                return 0;
            }
            if (a != 9223372036854775805l || b != 9223372036854775800l) {
                return 0;
            }
            if (struct2.i != -5) {
                return 0;
            }
            if (struct2.arr[0] != 100 || struct2.arr[1] != 101 ||
                struct2.arr[2] != 102) {
                return 0;
            }
            for (int i = 0; i < 5; i = i + 1) {
                if (os.arr[i] != 100 - i) {
                    return 0;
                }
            }
            if (m.d != 5.345) {
                return 0;
            }
            if (m.c[0] != -1 || m.c[1] != -2 || m.c[2] != -3) {
                return 0;
            }
            if (m.l != 4294967300l) {
                return 0;
            }
            if (m.i != 10000) {
                return 0;
            }
            return 1;
        }
        int pass_later_structs_in_regs(struct memory m, struct twelve_bytes struct1,
                                       struct one_xmm struct2) {
            if (m.d != 5.345) {
                return 0;
            }
            if (m.c[0] != -1 || m.c[1] != -2 || m.c[2] != -3) {
                return 0;
            }
            if (m.l != 4294967300l) {
                return 0;
            }
            if (m.i != 10000) {
                return 0;
            }
            if (struct1.i != -1) {
                return 0;
            }
            if (struct1.arr[0] != 127 || struct1.arr[1] != 126 ||
                struct1.arr[2] != 125) {
                return 0;
            }
            if (struct2.d != 5.125) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Long,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Long,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Double,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Void,
        Star,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Double,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Long,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Double,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Void,
        Star,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Double,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        CharLiteral,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        Minus,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_libraries_param_calling_conventions_client() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int strncmp(char *s1, char *s2, unsigned long n);
        struct two_longs {
            long a;
            long b;
        };
        struct one_int {
            int i;
            char c;
        };
        struct one_int_exactly {
            unsigned long l;
        };
        struct two_ints {
            char c;
            int arr[3];
        };
        struct two_ints_nested {
            struct one_int a;
            struct one_int b;
        };
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct one_xmm {
            double d;
        };
        struct two_xmm {
            double d[2];
        };
        struct int_and_xmm {
            char c;
            double d;
        };
        struct xmm_and_int {
            struct one_xmm dbl;
            char c[3];
        };
        struct odd_size {
            char arr[5];
        };
        struct memory {
            double d;
            char c[3];
            long l;
            int i;
        };
        int pass_small_structs(struct two_xmm two_xmm_struct, struct one_int int_struct,
                               struct one_xmm xmm_struct,
                               struct xmm_and_int mixed_struct,
                               struct twelve_bytes int_struct_2,
                               struct one_int_exactly another_int_struct);
        int a_bunch_of_arguments(int i0, int i1, int i2, int i3, int i4,
                                 struct two_longs param, int i5);
        int structs_and_scalars(long l, double d, struct odd_size os, struct memory mem,
                                struct one_xmm xmm_struct);
        int struct_in_mem(double a, double b, double c, struct xmm_and_int first_struct,
                          double d, struct two_xmm second_struct, long l,
                          struct int_and_xmm third_struct,
                          struct one_xmm fourth_struct);
        int pass_borderline_struct_in_memory(struct two_ints t_i, int c,
                                             struct int_and_xmm i_x, void *ptr,
                                             struct two_ints_nested t_i_n, double d);
        int pass_uneven_struct_in_mem(struct twelve_bytes struct1, long a, long b,
                                      struct twelve_bytes struct2, struct odd_size os,
                                      struct memory m);
        int pass_later_structs_in_regs(struct memory m, struct twelve_bytes struct1, struct one_xmm struct2);
        
        int main(void) {
            struct two_longs two_longs = {1234567l, 89101112l};
            struct one_int one_int = {54320, 'c'};
            struct one_int_exactly one_long = {567890l};
            struct two_ints two_ints = {'_', {5, 6, 7}};
            struct two_ints_nested two_ints_nested = {one_int, one_int};
            struct twelve_bytes xii = {123, "string!"};
            struct one_xmm one_xmm = {5.125};
            struct two_xmm two_xmm = {{55.5, 44.4}};
            struct int_and_xmm int_and_xmm = {'p', 4.56};
            struct xmm_and_int xmm_and_int = {{1.234}, "hi"};
            struct odd_size odd = {"lmno"};
            struct memory mem = {15.75, "rs", 4444, 3333};
            if (!pass_small_structs(two_xmm, one_int, one_xmm, xmm_and_int, xii,
                                    one_long)) {
                return 1;
            }
            if (!a_bunch_of_arguments(0, 1, 2, 3, 4, two_longs, 5)) {
                return 2;
            }
            if (!structs_and_scalars(10, 10.0, odd, mem, one_xmm)) {
                return 2;
            }
            if (!struct_in_mem(10.0, 11.125, 12.0, xmm_and_int, 13.0, two_xmm, 0,
                               int_and_xmm, one_xmm)) {
                return 3;
            }
            if (!pass_borderline_struct_in_memory(two_ints, '!', int_and_xmm, 0,
                                                  two_ints_nested, 7.8)) {
                return 4;
            }
            struct twelve_bytes struct1 = {-1, {127, 126, 125}};
            struct twelve_bytes struct2 = {-5, {100, 101, 102}};
            struct odd_size os = {{100, 99, 98, 97, 96}};
            struct memory m = {5.345, {-1, -2, -3}, 4294967300l, 10000};
            if (!pass_uneven_struct_in_mem(struct1, 9223372036854775805l,
                                           9223372036854775800l, struct2, os, m)) {
                return 5;
            }
            if (!pass_later_structs_in_regs(m, struct1, one_xmm)) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Long,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Long,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Double,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Void,
        Star,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Double,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Long),
        Comma,
        IntConstant(IntKind::Long),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        CharLiteral,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Long),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        CharLiteral,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        Identifier,
        Comma,
        Identifier,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        CharLiteral,
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        DoubleConstant,
        CloseBrace,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        StringLiteral,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        Identifier,
        Comma,
        DoubleConstant,
        Comma,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        CharLiteral,
        Comma,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        Comma,
        DoubleConstant,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        IntConstant(IntKind::Long),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Long),
        Comma,
        IntConstant(IntKind::Long),
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_libraries_pass_struct() {
    let src = r#"
        struct pair {
            int x;
            int y;
        };
        int validate_struct_param(struct pair p);
        
        int validate_struct_param(struct pair p) {
            if (p.x != 1 || p.y != 2) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_libraries_pass_struct_client() {
    let src = r#"
        struct pair {
            int x;
            int y;
        };
        int validate_struct_param(struct pair p);
        
        int main(void) {
            struct pair arg = {1, 2};
            if (!validate_struct_param(arg)) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_libraries_struct_sizes() {
    let src = r#"
        struct bytesize1 {
            unsigned char arr[1];
        };
        extern struct bytesize1 globvar_1;
        struct bytesize2 {
            unsigned char arr[2];
        };
        extern struct bytesize2 globvar_2;
        struct bytesize3 {
            unsigned char arr[3];
        };
        extern struct bytesize3 globvar_3;
        struct bytesize4 {
            unsigned char arr[4];
        };
        extern struct bytesize4 globvar_4;
        struct bytesize5 {
            unsigned char arr[5];
        };
        extern struct bytesize5 globvar_5;
        struct bytesize6 {
            unsigned char arr[6];
        };
        extern struct bytesize6 globvar_6;
        struct bytesize7 {
            unsigned char arr[7];
        };
        extern struct bytesize7 globvar_7;
        struct bytesize8 {
            unsigned char arr[8];
        };
        extern struct bytesize8 globvar_8;
        struct bytesize9 {
            unsigned char arr[9];
        };
        extern struct bytesize9 globvar_9;
        struct bytesize10 {
            unsigned char arr[10];
        };
        extern struct bytesize10 globvar_10;
        struct bytesize11 {
            unsigned char arr[11];
        };
        extern struct bytesize11 globvar_11;
        struct bytesize12 {
            unsigned char arr[12];
        };
        extern struct bytesize12 globvar_12;
        struct bytesize13 {
            unsigned char arr[13];
        };
        extern struct bytesize13 globvar_13;
        struct bytesize14 {
            unsigned char arr[14];
        };
        extern struct bytesize14 globvar_14;
        struct bytesize15 {
            unsigned char arr[15];
        };
        extern struct bytesize15 globvar_15;
        struct bytesize16 {
            unsigned char arr[16];
        };
        extern struct bytesize16 globvar_16;
        struct bytesize17 {
            unsigned char arr[17];
        };
        extern struct bytesize17 globvar_17;
        struct bytesize18 {
            unsigned char arr[18];
        };
        extern struct bytesize18 globvar_18;
        struct bytesize19 {
            unsigned char arr[19];
        };
        extern struct bytesize19 globvar_19;
        struct bytesize20 {
            unsigned char arr[20];
        };
        extern struct bytesize20 globvar_20;
        struct bytesize21 {
            unsigned char arr[21];
        };
        extern struct bytesize21 globvar_21;
        struct bytesize22 {
            unsigned char arr[22];
        };
        extern struct bytesize22 globvar_22;
        struct bytesize23 {
            unsigned char arr[23];
        };
        extern struct bytesize23 globvar_23;
        struct bytesize24 {
            unsigned char arr[24];
        };
        extern struct bytesize24 globvar_24;
        int fun0(struct bytesize1 a, struct bytesize2 b, struct bytesize3 c,
                 struct bytesize4 d, struct bytesize5 e, struct bytesize6 f,
                 struct bytesize7 g, struct bytesize8 h, struct bytesize9 i,
                 struct bytesize10 j, struct bytesize11 k, struct bytesize12 l,
                 struct bytesize13 m, struct bytesize14 n, struct bytesize15 o,
                 struct bytesize16 p, struct bytesize17 q, struct bytesize18 r,
                 struct bytesize19 s, struct bytesize20 t, struct bytesize21 u,
                 struct bytesize22 v, struct bytesize23 w, struct bytesize24 x,
                 unsigned char *a_expected, unsigned char *b_expected,
                 unsigned char *c_expected, unsigned char *d_expected,
                 unsigned char *e_expected, unsigned char *f_expected,
                 unsigned char *g_expected, unsigned char *h_expected,
                 unsigned char *i_expected, unsigned char *j_expected,
                 unsigned char *k_expected, unsigned char *l_expected,
                 unsigned char *m_expected, unsigned char *n_expected,
                 unsigned char *o_expected, unsigned char *p_expected,
                 unsigned char *q_expected, unsigned char *r_expected,
                 unsigned char *s_expected, unsigned char *t_expected,
                 unsigned char *u_expected, unsigned char *v_expected,
                 unsigned char *w_expected, unsigned char *x_expected);
        int fun1(struct bytesize7 a, struct bytesize8 b, struct bytesize9 c,
                 struct bytesize10 d, struct bytesize1 e, struct bytesize2 f,
                 struct bytesize3 g, struct bytesize4 h, struct bytesize5 i,
                 struct bytesize6 j, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected, unsigned char *e_expected,
                 unsigned char *f_expected, unsigned char *g_expected,
                 unsigned char *h_expected, unsigned char *i_expected,
                 unsigned char *j_expected);
        int fun2(struct bytesize11 a, struct bytesize12 b, struct bytesize13 c,
                 struct bytesize1 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected);
        int fun3(struct bytesize14 a, struct bytesize15 b, struct bytesize16 c,
                 struct bytesize2 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected);
        int memcmp(void *s1, void *s2, unsigned long n);
        int fun0(struct bytesize1 a, struct bytesize2 b, struct bytesize3 c,
                 struct bytesize4 d, struct bytesize5 e, struct bytesize6 f,
                 struct bytesize7 g, struct bytesize8 h, struct bytesize9 i,
                 struct bytesize10 j, struct bytesize11 k, struct bytesize12 l,
                 struct bytesize13 m, struct bytesize14 n, struct bytesize15 o,
                 struct bytesize16 p, struct bytesize17 q, struct bytesize18 r,
                 struct bytesize19 s, struct bytesize20 t, struct bytesize21 u,
                 struct bytesize22 v, struct bytesize23 w, struct bytesize24 x,
                 unsigned char *a_expected, unsigned char *b_expected,
                 unsigned char *c_expected, unsigned char *d_expected,
                 unsigned char *e_expected, unsigned char *f_expected,
                 unsigned char *g_expected, unsigned char *h_expected,
                 unsigned char *i_expected, unsigned char *j_expected,
                 unsigned char *k_expected, unsigned char *l_expected,
                 unsigned char *m_expected, unsigned char *n_expected,
                 unsigned char *o_expected, unsigned char *p_expected,
                 unsigned char *q_expected, unsigned char *r_expected,
                 unsigned char *s_expected, unsigned char *t_expected,
                 unsigned char *u_expected, unsigned char *v_expected,
                 unsigned char *w_expected, unsigned char *x_expected) {
            if (memcmp(&a, a_expected, sizeof a)) {
                return 0;
            }
            if (memcmp(&b, b_expected, sizeof b)) {
                return 0;
            }
            if (memcmp(&c, c_expected, sizeof c)) {
                return 0;
            }
            if (memcmp(&d, d_expected, sizeof d)) {
                return 0;
            }
            if (memcmp(&e, e_expected, sizeof e)) {
                return 0;
            }
            if (memcmp(&f, f_expected, sizeof f)) {
                return 0;
            }
            if (memcmp(&g, g_expected, sizeof g)) {
                return 0;
            }
            if (memcmp(&h, h_expected, sizeof h)) {
                return 0;
            }
            if (memcmp(&i, i_expected, sizeof i)) {
                return 0;
            }
            if (memcmp(&j, j_expected, sizeof j)) {
                return 0;
            }
            if (memcmp(&k, k_expected, sizeof k)) {
                return 0;
            }
            if (memcmp(&l, l_expected, sizeof l)) {
                return 0;
            }
            if (memcmp(&m, m_expected, sizeof m)) {
                return 0;
            }
            if (memcmp(&n, n_expected, sizeof n)) {
                return 0;
            }
            if (memcmp(&o, o_expected, sizeof o)) {
                return 0;
            }
            if (memcmp(&p, p_expected, sizeof p)) {
                return 0;
            }
            if (memcmp(&q, q_expected, sizeof q)) {
                return 0;
            }
            if (memcmp(&r, r_expected, sizeof r)) {
                return 0;
            }
            if (memcmp(&s, s_expected, sizeof s)) {
                return 0;
            }
            if (memcmp(&t, t_expected, sizeof t)) {
                return 0;
            }
            if (memcmp(&u, u_expected, sizeof u)) {
                return 0;
            }
            if (memcmp(&v, v_expected, sizeof v)) {
                return 0;
            }
            if (memcmp(&w, w_expected, sizeof w)) {
                return 0;
            }
            if (memcmp(&x, x_expected, sizeof x)) {
                return 0;
            }
            return 1;
        }
        int fun1(struct bytesize7 a, struct bytesize8 b, struct bytesize9 c,
                 struct bytesize10 d, struct bytesize1 e, struct bytesize2 f,
                 struct bytesize3 g, struct bytesize4 h, struct bytesize5 i,
                 struct bytesize6 j, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected, unsigned char *e_expected,
                 unsigned char *f_expected, unsigned char *g_expected,
                 unsigned char *h_expected, unsigned char *i_expected,
                 unsigned char *j_expected) {
            if (memcmp(&a, a_expected, sizeof a)) {
                return 0;
            }
            if (memcmp(&b, b_expected, sizeof b)) {
                return 0;
            }
            if (memcmp(&c, c_expected, sizeof c)) {
                return 0;
            }
            if (memcmp(&d, d_expected, sizeof d)) {
                return 0;
            }
            if (memcmp(&e, e_expected, sizeof e)) {
                return 0;
            }
            if (memcmp(&f, f_expected, sizeof f)) {
                return 0;
            }
            if (memcmp(&g, g_expected, sizeof g)) {
                return 0;
            }
            if (memcmp(&h, h_expected, sizeof h)) {
                return 0;
            }
            if (memcmp(&i, i_expected, sizeof i)) {
                return 0;
            }
            if (memcmp(&j, j_expected, sizeof j)) {
                return 0;
            }
            return 1;
        }
        int fun2(struct bytesize11 a, struct bytesize12 b, struct bytesize13 c,
                 struct bytesize1 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected) {
            if (memcmp(&a, a_expected, sizeof a)) {
                return 0;
            }
            if (memcmp(&b, b_expected, sizeof b)) {
                return 0;
            }
            if (memcmp(&c, c_expected, sizeof c)) {
                return 0;
            }
            if (memcmp(&d, d_expected, sizeof d)) {
                return 0;
            }
            return 1;
        }
        int fun3(struct bytesize14 a, struct bytesize15 b, struct bytesize16 c,
                 struct bytesize2 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected) {
            if (memcmp(&a, a_expected, sizeof a)) {
                return 0;
            }
            if (memcmp(&b, b_expected, sizeof b)) {
                return 0;
            }
            if (memcmp(&c, c_expected, sizeof c)) {
                return 0;
            }
            if (memcmp(&d, d_expected, sizeof d)) {
                return 0;
            }
            return 1;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        Star,
        Identifier,
        Comma,
        Void,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_libraries_struct_sizes_client() {
    let src = r#"
        struct bytesize1 {
            unsigned char arr[1];
        };
        extern struct bytesize1 globvar_1;
        struct bytesize2 {
            unsigned char arr[2];
        };
        extern struct bytesize2 globvar_2;
        struct bytesize3 {
            unsigned char arr[3];
        };
        extern struct bytesize3 globvar_3;
        struct bytesize4 {
            unsigned char arr[4];
        };
        extern struct bytesize4 globvar_4;
        struct bytesize5 {
            unsigned char arr[5];
        };
        extern struct bytesize5 globvar_5;
        struct bytesize6 {
            unsigned char arr[6];
        };
        extern struct bytesize6 globvar_6;
        struct bytesize7 {
            unsigned char arr[7];
        };
        extern struct bytesize7 globvar_7;
        struct bytesize8 {
            unsigned char arr[8];
        };
        extern struct bytesize8 globvar_8;
        struct bytesize9 {
            unsigned char arr[9];
        };
        extern struct bytesize9 globvar_9;
        struct bytesize10 {
            unsigned char arr[10];
        };
        extern struct bytesize10 globvar_10;
        struct bytesize11 {
            unsigned char arr[11];
        };
        extern struct bytesize11 globvar_11;
        struct bytesize12 {
            unsigned char arr[12];
        };
        extern struct bytesize12 globvar_12;
        struct bytesize13 {
            unsigned char arr[13];
        };
        extern struct bytesize13 globvar_13;
        struct bytesize14 {
            unsigned char arr[14];
        };
        extern struct bytesize14 globvar_14;
        struct bytesize15 {
            unsigned char arr[15];
        };
        extern struct bytesize15 globvar_15;
        struct bytesize16 {
            unsigned char arr[16];
        };
        extern struct bytesize16 globvar_16;
        struct bytesize17 {
            unsigned char arr[17];
        };
        extern struct bytesize17 globvar_17;
        struct bytesize18 {
            unsigned char arr[18];
        };
        extern struct bytesize18 globvar_18;
        struct bytesize19 {
            unsigned char arr[19];
        };
        extern struct bytesize19 globvar_19;
        struct bytesize20 {
            unsigned char arr[20];
        };
        extern struct bytesize20 globvar_20;
        struct bytesize21 {
            unsigned char arr[21];
        };
        extern struct bytesize21 globvar_21;
        struct bytesize22 {
            unsigned char arr[22];
        };
        extern struct bytesize22 globvar_22;
        struct bytesize23 {
            unsigned char arr[23];
        };
        extern struct bytesize23 globvar_23;
        struct bytesize24 {
            unsigned char arr[24];
        };
        extern struct bytesize24 globvar_24;
        int fun0(struct bytesize1 a, struct bytesize2 b, struct bytesize3 c,
                 struct bytesize4 d, struct bytesize5 e, struct bytesize6 f,
                 struct bytesize7 g, struct bytesize8 h, struct bytesize9 i,
                 struct bytesize10 j, struct bytesize11 k, struct bytesize12 l,
                 struct bytesize13 m, struct bytesize14 n, struct bytesize15 o,
                 struct bytesize16 p, struct bytesize17 q, struct bytesize18 r,
                 struct bytesize19 s, struct bytesize20 t, struct bytesize21 u,
                 struct bytesize22 v, struct bytesize23 w, struct bytesize24 x,
                 unsigned char *a_expected, unsigned char *b_expected,
                 unsigned char *c_expected, unsigned char *d_expected,
                 unsigned char *e_expected, unsigned char *f_expected,
                 unsigned char *g_expected, unsigned char *h_expected,
                 unsigned char *i_expected, unsigned char *j_expected,
                 unsigned char *k_expected, unsigned char *l_expected,
                 unsigned char *m_expected, unsigned char *n_expected,
                 unsigned char *o_expected, unsigned char *p_expected,
                 unsigned char *q_expected, unsigned char *r_expected,
                 unsigned char *s_expected, unsigned char *t_expected,
                 unsigned char *u_expected, unsigned char *v_expected,
                 unsigned char *w_expected, unsigned char *x_expected);
        int fun1(struct bytesize7 a, struct bytesize8 b, struct bytesize9 c,
                 struct bytesize10 d, struct bytesize1 e, struct bytesize2 f,
                 struct bytesize3 g, struct bytesize4 h, struct bytesize5 i,
                 struct bytesize6 j, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected, unsigned char *e_expected,
                 unsigned char *f_expected, unsigned char *g_expected,
                 unsigned char *h_expected, unsigned char *i_expected,
                 unsigned char *j_expected);
        int fun2(struct bytesize11 a, struct bytesize12 b, struct bytesize13 c,
                 struct bytesize1 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected);
        int fun3(struct bytesize14 a, struct bytesize15 b, struct bytesize16 c,
                 struct bytesize2 d, unsigned char *a_expected,
                 unsigned char *b_expected, unsigned char *c_expected,
                 unsigned char *d_expected);
        
        int main(void) {
            if (!fun0(globvar_1, globvar_2, globvar_3, globvar_4, globvar_5, globvar_6,
                     globvar_7, globvar_8, globvar_9, globvar_10, globvar_11,
                     globvar_12, globvar_13, globvar_14, globvar_15, globvar_16,
                     globvar_17, globvar_18, globvar_19, globvar_20, globvar_21,
                     globvar_22, globvar_23, globvar_24, globvar_1.arr, globvar_2.arr,
                     globvar_3.arr, globvar_4.arr, globvar_5.arr, globvar_6.arr,
                     globvar_7.arr, globvar_8.arr, globvar_9.arr, globvar_10.arr,
                     globvar_11.arr, globvar_12.arr, globvar_13.arr, globvar_14.arr,
                     globvar_15.arr, globvar_16.arr, globvar_17.arr, globvar_18.arr,
                     globvar_19.arr, globvar_20.arr, globvar_21.arr, globvar_22.arr,
                     globvar_23.arr, globvar_24.arr)) {
                return 1;
            }
            if (!fun1(globvar_7, globvar_8, globvar_9, globvar_10, globvar_1, globvar_2,
                     globvar_3, globvar_4, globvar_5, globvar_6, globvar_7.arr,
                     globvar_8.arr, globvar_9.arr, globvar_10.arr, globvar_1.arr,
                     globvar_2.arr, globvar_3.arr, globvar_4.arr, globvar_5.arr,
                     globvar_6.arr)) {
                return 2;
            }
            if (!fun2(globvar_11, globvar_12, globvar_13, globvar_1, globvar_11.arr,
                     globvar_12.arr, globvar_13.arr, globvar_1.arr)) {
                return 3;
            }
            if (!fun3(globvar_14, globvar_15, globvar_16, globvar_2, globvar_14.arr,
                     globvar_15.arr, globvar_16.arr, globvar_2.arr)) {
                return 4;
            }
            struct bytesize1 locvar_1 = {{0}};
            struct bytesize2 locvar_2 = {{1, 2}};
            struct bytesize3 locvar_3 = {{3, 4, 5}};
            struct bytesize4 locvar_4 = {{6, 7, 8, 9}};
            struct bytesize5 locvar_5 = {{10, 11, 12, 13, 14}};
            struct bytesize6 locvar_6 = {{15, 16, 17, 18, 19, 20}};
            struct bytesize7 locvar_7 = {{21, 22, 23, 24, 25, 26, 27}};
            struct bytesize8 locvar_8 = {{28, 29, 30, 31, 32, 33, 34, 35}};
            struct bytesize9 locvar_9 = {{36, 37, 38, 39, 40, 41, 42, 43, 44}};
            struct bytesize10 locvar_10 = {{45, 46, 47, 48, 49, 50, 51, 52, 53, 54}};
            struct bytesize11 locvar_11 = {
                {55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65}};
            struct bytesize12 locvar_12 = {
                {66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77}};
            struct bytesize13 locvar_13 = {
                {78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}};
            struct bytesize14 locvar_14 = {
                {91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104}};
            struct bytesize15 locvar_15 = {{105, 106, 107, 108, 109, 110, 111, 112, 113,
                                            114, 115, 116, 117, 118, 119}};
            struct bytesize16 locvar_16 = {{120, 121, 122, 123, 124, 125, 126, 127, 128,
                                            129, 130, 131, 132, 133, 134, 135}};
            struct bytesize17 locvar_17 = {{136, 137, 138, 139, 140, 141, 142, 143, 144,
                                            145, 146, 147, 148, 149, 150, 151, 152}};
            struct bytesize18 locvar_18 = {{153, 154, 155, 156, 157, 158, 159, 160, 161,
                                            162, 163, 164, 165, 166, 167, 168, 169,
                                            170}};
            struct bytesize19 locvar_19 = {{171, 172, 173, 174, 175, 176, 177, 178, 179,
                                            180, 181, 182, 183, 184, 185, 186, 187, 188,
                                            189}};
            struct bytesize20 locvar_20 = {{190, 191, 192, 193, 194, 195, 196,
                                            197, 198, 199, 200, 201, 202, 203,
                                            204, 205, 206, 207, 208, 209}};
            struct bytesize21 locvar_21 = {{210, 211, 212, 213, 214, 215, 216,
                                            217, 218, 219, 220, 221, 222, 223,
                                            224, 225, 226, 227, 228, 229, 230}};
            struct bytesize22 locvar_22 = {{231, 232, 233, 234, 235, 236, 237, 238,
                                            239, 240, 241, 242, 243, 244, 245, 246,
                                            247, 248, 249, 250, 251, 252}};
            struct bytesize23 locvar_23 = {{253, 254, 255, 0, 1, 2, 3, 4,
                                            5, 6, 7, 8, 9, 10, 11, 12,
                                            13, 14, 15, 16, 17, 18, 19}};
            struct bytesize24 locvar_24 = {{20, 21, 22, 23, 24, 25, 26, 27,
                                            28, 29, 30, 31, 32, 33, 34, 35,
                                            36, 37, 38, 39, 40, 41, 42, 43}};
            if (!fun0(locvar_1, locvar_2, locvar_3, locvar_4, locvar_5, locvar_6,
                     locvar_7, locvar_8, locvar_9, locvar_10, locvar_11, locvar_12,
                     locvar_13, locvar_14, locvar_15, locvar_16, locvar_17, locvar_18,
                     locvar_19, locvar_20, locvar_21, locvar_22, locvar_23, locvar_24,
                     locvar_1.arr, locvar_2.arr, locvar_3.arr, locvar_4.arr,
                     locvar_5.arr, locvar_6.arr, locvar_7.arr, locvar_8.arr,
                     locvar_9.arr, locvar_10.arr, locvar_11.arr, locvar_12.arr,
                     locvar_13.arr, locvar_14.arr, locvar_15.arr, locvar_16.arr,
                     locvar_17.arr, locvar_18.arr, locvar_19.arr, locvar_20.arr,
                     locvar_21.arr, locvar_22.arr, locvar_23.arr, locvar_24.arr)) {
                return 5;
            }
            if (!fun1(locvar_7, locvar_8, locvar_9, locvar_10, locvar_1, locvar_2,
                     locvar_3, locvar_4, locvar_5, locvar_6, locvar_7.arr, locvar_8.arr,
                     locvar_9.arr, locvar_10.arr, locvar_1.arr, locvar_2.arr,
                     locvar_3.arr, locvar_4.arr, locvar_5.arr, locvar_6.arr)) {
                return 6;
            }
            if (!fun2(locvar_11, locvar_12, locvar_13, locvar_1, locvar_11.arr,
                     locvar_12.arr, locvar_13.arr, locvar_1.arr)) {
                return 7;
            }
            if (!fun3(locvar_14, locvar_15, locvar_16, locvar_2, locvar_14.arr,
                     locvar_15.arr, locvar_16.arr, locvar_2.arr)) {
                return 8;
            }
            return 0;
        }
        struct bytesize1 globvar_1 = {{0}};
        struct bytesize2 globvar_2 = {{1, 2}};
        struct bytesize3 globvar_3 = {{3, 4, 5}};
        struct bytesize4 globvar_4 = {{6, 7, 8, 9}};
        struct bytesize5 globvar_5 = {{10, 11, 12, 13, 14}};
        struct bytesize6 globvar_6 = {{15, 16, 17, 18, 19, 20}};
        struct bytesize7 globvar_7 = {{21, 22, 23, 24, 25, 26, 27}};
        struct bytesize8 globvar_8 = {{28, 29, 30, 31, 32, 33, 34, 35}};
        struct bytesize9 globvar_9 = {{36, 37, 38, 39, 40, 41, 42, 43, 44}};
        struct bytesize10 globvar_10 = {{45, 46, 47, 48, 49, 50, 51, 52, 53, 54}};
        struct bytesize11 globvar_11 = {{55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65}};
        struct bytesize12 globvar_12 = {
            {66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77}};
        struct bytesize13 globvar_13 = {
            {78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}};
        struct bytesize14 globvar_14 = {
            {91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104}};
        struct bytesize15 globvar_15 = {{105, 106, 107, 108, 109, 110, 111, 112, 113,
                                         114, 115, 116, 117, 118, 119}};
        struct bytesize16 globvar_16 = {{120, 121, 122, 123, 124, 125, 126, 127, 128,
                                         129, 130, 131, 132, 133, 134, 135}};
        struct bytesize17 globvar_17 = {{136, 137, 138, 139, 140, 141, 142, 143, 144,
                                         145, 146, 147, 148, 149, 150, 151, 152}};
        struct bytesize18 globvar_18 = {{153, 154, 155, 156, 157, 158, 159, 160, 161,
                                         162, 163, 164, 165, 166, 167, 168, 169, 170}};
        struct bytesize19 globvar_19 = {{171, 172, 173, 174, 175, 176, 177, 178, 179,
                                         180, 181, 182, 183, 184, 185, 186, 187, 188,
                                         189}};
        struct bytesize20 globvar_20 = {{190, 191, 192, 193, 194, 195, 196,
                                         197, 198, 199, 200, 201, 202, 203,
                                         204, 205, 206, 207, 208, 209}};
        struct bytesize21 globvar_21 = {{210, 211, 212, 213, 214, 215, 216,
                                         217, 218, 219, 220, 221, 222, 223,
                                         224, 225, 226, 227, 228, 229, 230}};
        struct bytesize22 globvar_22 = {{231, 232, 233, 234, 235, 236, 237, 238,
                                         239, 240, 241, 242, 243, 244, 245, 246,
                                         247, 248, 249, 250, 251, 252}};
        struct bytesize23 globvar_23 = {{253, 254, 255, 0, 1, 2, 3, 4,
                                         5, 6, 7, 8, 9, 10, 11, 12,
                                         13, 14, 15, 16, 17, 18, 19}};
        struct bytesize24 globvar_24 = {{20, 21, 22, 23, 24, 25, 26, 27,
                                         28, 29, 30, 31, 32, 33, 34, 35,
                                         36, 37, 38, 39, 40, 41, 42, 43}};
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_pass_args_on_page_boundary() {
    let src = r#"
        struct nine_bytes {
            char arr[11];
        };
        extern struct nine_bytes on_page_boundary;
        int f(struct nine_bytes in_reg, int a, int b, int c, int d, int e,
              struct nine_bytes on_stack) {
            for (int i = 0; i < 9; i = i + 1) {
                char in_reg_c = in_reg.arr[i];
                char on_stack_c = on_stack.arr[i];
                if (i == 2) {
                    if (in_reg_c != 4 || on_stack_c != 4) {
                        return 1;
                    }
                } else if (i == 3) {
                    if (in_reg_c != 5 || on_stack_c != 5) {
                        return 2;
                    }
                } else if (i == 8) {
                    if (in_reg_c != 6 || on_stack_c != 6) {
                        return 3;
                    }
                } else {
                    if (in_reg_c || on_stack_c) {
                        return 4;
                    }
                }
            }
            if (a != 101 || b != 102 || c != 103 || d != 104 || e != 105) {
                return 5;
            }
            return 0;
        }
        int main(void) {
            on_page_boundary.arr[2] = 4;
            on_page_boundary.arr[3] = 5;
            on_page_boundary.arr[8] = 6;
            return f(on_page_boundary, 101, 102, 103, 104, 105,
                     on_page_boundary);
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        Char,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        PipePipe,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_simple() {
    let src = r#"
        
        struct pair {
            int x;
            double y;
        };
        double test_struct_param(struct pair p) {
            if (p.x != 1 || p.y != 2.0) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            struct pair x = {1, 2.0};
            if (!test_struct_param(x)) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Double,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_parameters_stack_clobber() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void exit(int status);
        struct stack_bytes {
            char bytes[16];
        };
        static struct stack_bytes to_validate;
        void validate_stack_bytes(int code) {
            if (strcmp(to_validate.bytes, "efghijklmnopqrs")) {
                exit(code);
            }
            return;
        }
        struct one_longword {
            int i;
        };
        void take_longword(struct one_longword s, int code) {
            if (s.i != 10) {
                exit(code);
            }
            return;
        }
        int pass_longword(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct one_longword my_var = {10};
            take_longword(my_var, 1);
            to_validate = bytes;
            validate_stack_bytes(2);
            return 0;
        }
        struct one_quadword {
            long l;
        };
        void take_quadword(struct one_quadword s, int code) {
            if (s.l != 10) {
                exit(code);
            }
            return;
        }
        int pass_quadword(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct one_quadword my_var = {10};
            take_quadword(my_var, 3);
            to_validate = bytes;
            validate_stack_bytes(4);
            return 0;
        }
        struct one_double {
            double d;
        };
        void take_double(struct one_double s, int code) {
            if (s.d != 10) {
                exit(code);
            }
            return;
        }
        int pass_double(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct one_double my_var = {10};
            take_double(my_var, 5);
            to_validate = bytes;
            validate_stack_bytes(6);
            return 0;
        }
        struct twelve_bytes {
            char arr[12];
        };
        void take_twelve_bytes(struct twelve_bytes s, int code) {
            if (strcmp(s.arr, "abcdefghijk")) {
                exit(code);
            }
            return;
        }
        int pass_twelve_bytes(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct twelve_bytes my_var = {"abcdefghijk"};
            take_twelve_bytes(my_var, 7);
            to_validate = bytes;
            validate_stack_bytes(8);
            return 0;
        }
        struct memory {
            char arr[32];
        };
        void take_struct_in_mem(struct memory s, int code) {
            if (strcmp(s.arr, "Here's the thing: I'm a string.")) {
                exit(code);
            }
            return;
        }
        int pass_struct_in_mem(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct memory my_var = {"Here's the thing: I'm a string."};
            take_struct_in_mem(my_var, 9);
            to_validate = bytes;
            validate_stack_bytes(10);
            return 0;
        }
        struct irregular {
            char arr[3];
        };
        void take_irregular_struct(struct irregular s, int code) {
            if (strcmp(s.arr, "12")) {
                exit(code);
            }
            return;
        }
        int pass_irregular_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct irregular my_var = {"12"};
            take_irregular_struct(my_var, 11);
            to_validate = bytes;
            validate_stack_bytes(12);
            return 0;
        }
        struct irregular_memory {
            char arr[27];
        };
        void take_irregular_memory_struct(struct irregular_memory s, int code) {
            if (strcmp(s.arr, "The quick brown fox jumped")) {
                exit(code);
            }
            return;
        }
        int pass_irregular_memory_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            static struct irregular_memory my_var = {"The quick brown fox jumped"};
            take_irregular_memory_struct(my_var, 13);
            to_validate = bytes;
            validate_stack_bytes(14);
            return 0;
        }
        int main(void) {
            pass_longword();
            pass_quadword();
            pass_double();
            pass_twelve_bytes();
            pass_struct_in_mem();
            pass_irregular_struct();
            pass_irregular_memory_struct();
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Return,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Return,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Return,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Return,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Return,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Return,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Return,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Return,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_ignore_retval() {
    let src = r#"
        struct small {
            int x;
        };
        struct big {
            double d;
            int x;
            long l;
        };
        struct small globl = {0};
        struct small return_in_reg(void) {
            globl.x = globl.x + 1;
            return globl;
        }
        struct big globl2 = {1.25, 2, 300};
        struct big return_in_mem(void) {
            globl2.d = globl2.d * 2;
            globl2.x = globl2.x * 3;
            globl2.l = globl2.l * 4;
            return globl2;
        }
        int main(void) {
            (void)return_in_reg();
            return_in_reg();
            if (globl.x != 2) {
                return 1;
            }
            return_in_mem();
            (void)return_in_mem();
            if (globl2.d != 5.0 || globl2.x != 18 || globl2.l != 4800) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        OpenParen,
        Void,
        CloseParen,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        OpenParen,
        Void,
        CloseParen,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_libraries_access_retval_members() {
    let src = r#"
        
        
        struct inner {
            char x;
            long y;
        };
        struct outer {
            double d;
            struct inner *ptr;
            struct inner s;
        };
        void *calloc(unsigned long nmemb, unsigned long size);
        struct inner return_small_struct(void);
        struct outer return_nested_struct(void);
        
        struct inner return_small_struct(void) {
            struct inner i = {101, 102};
            return i;
        }
        struct outer return_nested_struct(void) {
            static struct outer ret = {2.0, 0, {10, 11}};
            if (!ret.ptr) {
                ret.ptr = calloc(1, sizeof(struct inner));
                ret.ptr->x = 12;
                ret.ptr->y = 13;
            }
            return ret;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Sizeof,
        OpenParen,
        Struct,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_libraries_access_retval_members_client() {
    let src = r#"
        
        
        struct inner {
            char x;
            long y;
        };
        struct outer {
            double d;
            struct inner *ptr;
            struct inner s;
        };
        void *calloc(unsigned long nmemb, unsigned long size);
        struct inner return_small_struct(void);
        struct outer return_nested_struct(void);
        
        int main(void) {
            if (return_small_struct().y != 102) {
                return 1;
            }
            if (return_nested_struct().d != 2.0 || return_nested_struct().s.x != 10 ||
                return_nested_struct().s.y != 11) {
                return 3;
            }
            if (return_nested_struct().ptr->x != 12 ||
                return_nested_struct().ptr->y != 13) {
                return 4;
            }
            return_nested_struct().ptr->x = 70;
            return_nested_struct().ptr->y = 71;
            if (return_nested_struct().ptr->x != 70 ||
                return_nested_struct().ptr->y != 71) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Void,
        Star,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        Arrow,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_libraries_missing_retval() {
    let src = r#"
        struct big {
            char arr[25];
        };
        struct big missing_return_value(int *i);
        struct big missing_return_value(int *i) {
            *i = 10;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Star,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_libraries_missing_retval_client() {
    let src = r#"
        struct big {
            char arr[25];
        };
        struct big missing_return_value(int *i);
        
        int main(void) {
            int array[4] = {1, 2, 3, 4};
            missing_return_value(array + 2);
            return array[2] == 10;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_libraries_return_calling_conventions() {
    let src = r#"
        
        int strcmp(char *s1, char *s2);
        int strncmp(char *s1, char *s2, unsigned long n);
        struct one_int {
            int i;
            char c;
        };
        struct one_int_exactly {
            unsigned long l;
        };
        struct two_ints {
            char c;
            int arr[3];
        };
        struct two_ints_nested {
            struct one_int a;
            struct one_int b;
        };
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct one_xmm {
            double d;
        };
        struct two_xmm {
            double d[2];
        };
        struct int_and_xmm {
            char c;
            double d;
        };
        struct xmm_and_int {
            struct one_xmm dbl;
            char c[3];
        };
        struct odd_size {
            char arr[5];
        };
        struct memory {
            double d;
            char c[3];
            long l;
            int i;
        };
        struct one_int return_int_struct(void);
        struct twelve_bytes return_two_int_struct(void);
        struct one_xmm return_double_struct(void);
        struct two_xmm return_two_double_struct(void);
        struct xmm_and_int return_mixed(void);
        struct int_and_xmm return_mixed2(void);
        struct memory return_on_stack(void);
        struct memory pass_and_return_regs(int i, double d, struct int_and_xmm strct,
                                           int c, struct two_ints t_i, long l,
                                           struct one_int_exactly o_i_e, int c2);
        
        struct one_int return_int_struct(void) {
            struct one_int retval = {1, 2};
            return retval;
        }
        struct twelve_bytes return_two_int_struct(void) {
            struct twelve_bytes retval = {10, "12345678"};
            return retval;
        }
        struct one_xmm return_double_struct(void) {
            struct one_xmm retval = {100.625};
            return retval;
        }
        struct two_xmm return_two_double_struct(void) {
            struct two_xmm retval = {{8.8, 7.8}};
            return retval;
        }
        struct xmm_and_int return_mixed(void) {
            struct xmm_and_int retval = {{10.0}, "ab"};
            return retval;
        }
        struct int_and_xmm return_mixed2(void) {
            struct int_and_xmm retval = {127, 34e43};
            return retval;
        }
        struct memory return_on_stack(void) {
            struct memory retval = {1.25, "xy", 100l, 44};
            return retval;
        }
        int leaf_call(struct two_ints t_i, int c, double d) {
            if (t_i.c != '_' || t_i.arr[0] != 5 || t_i.arr[1] != 6 || t_i.arr[2] != 7) {
                return 0;
            }
            if (c != 'p' || d != 4.56) {
                return 0;
            }
            return 1;
        }
        struct memory pass_and_return_regs(int i, double d, struct int_and_xmm strct,
                                           int c, struct two_ints t_i, long l,
                                           struct one_int_exactly o_i_e, int c2) {
            char stackbytes[8] = "zyxwvut";
            struct memory retval = {0, {0, 0, 0}, 0, 0};
            if (!leaf_call(t_i, strct.c, strct.d)) {
                retval.i = 1;
                return retval;
            }
            if (i != 6 || d != 4.0 || c != 5 || l != 77 || c2 != 99) {
                retval.i = 2;
                return retval;
            }
            if (o_i_e.l != 567890) {
                retval.i = 3;
                return retval;
            }
            if (strcmp(stackbytes, "zyxwvut")) {
                retval.i = 4;
                return retval;
            }
            retval.l = 100;
            return retval;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        DoubleConstant,
        CloseBrace,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        StringLiteral,
        Comma,
        IntConstant(IntKind::Long),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        StringLiteral,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        Comma,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_libraries_return_calling_conventions_client() {
    let src = r#"
        
        int strcmp(char *s1, char *s2);
        int strncmp(char *s1, char *s2, unsigned long n);
        struct one_int {
            int i;
            char c;
        };
        struct one_int_exactly {
            unsigned long l;
        };
        struct two_ints {
            char c;
            int arr[3];
        };
        struct two_ints_nested {
            struct one_int a;
            struct one_int b;
        };
        struct twelve_bytes {
            int i;
            char arr[8];
        };
        struct one_xmm {
            double d;
        };
        struct two_xmm {
            double d[2];
        };
        struct int_and_xmm {
            char c;
            double d;
        };
        struct xmm_and_int {
            struct one_xmm dbl;
            char c[3];
        };
        struct odd_size {
            char arr[5];
        };
        struct memory {
            double d;
            char c[3];
            long l;
            int i;
        };
        struct one_int return_int_struct(void);
        struct twelve_bytes return_two_int_struct(void);
        struct one_xmm return_double_struct(void);
        struct two_xmm return_two_double_struct(void);
        struct xmm_and_int return_mixed(void);
        struct int_and_xmm return_mixed2(void);
        struct memory return_on_stack(void);
        struct memory pass_and_return_regs(int i, double d, struct int_and_xmm strct,
                                           int c, struct two_ints t_i, long l,
                                           struct one_int_exactly o_i_e, int c2);
        
        int main(void) {
            struct one_int_exactly one_long = {567890l};
            struct two_ints two_ints = {'_', {5, 6, 7}};
            struct int_and_xmm int_and_xmm = {'p', 4.56};
            struct one_int s1 = return_int_struct();
            if (s1.i != 1 || s1.c != 2) {
                return 1;
            }
            struct twelve_bytes s2 = return_two_int_struct();
            if (s2.i != 10 || strncmp(s2.arr, "12345678", sizeof s2.arr))
                return 2;
            struct one_xmm s3 = return_double_struct();
            if (s3.d != 100.625)
                return 3;
            struct two_xmm s4 = return_two_double_struct();
            if (s4.d[0] != 8.8 || s4.d[1] != 7.8)
                return 4;
            struct xmm_and_int s5 = return_mixed();
            if (s5.dbl.d != 10.0 || strcmp(s5.c, "ab"))
                return 5;
            struct int_and_xmm s6 = return_mixed2();
            if (s6.c != 127 || s6.d != 34e43)
                return 6;
            struct memory s7 = return_on_stack();
            if (s7.d != 1.25 || strcmp(s7.c, "xy") || s7.l != 100l || s7.i != 44)
                return 7;
            s7 = pass_and_return_regs(6, 4.0, int_and_xmm, 5, two_ints, 77, one_long,
                                      99);
            if (s7.d || s7.c[0] || s7.c[1] || s7.c[2])
                return 8;
            if (s7.i)
                return 9;
            if (s7.l != 100)
                return 10;
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Double,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Long,
        Identifier,
        Comma,
        Struct,
        Identifier,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Long),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        CharLiteral,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        CharLiteral,
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        Comma,
        Sizeof,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        Comma,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_libraries_retval_struct_sizes() {
    let src = r#"
        struct bytesize1 {
            unsigned char arr[1];
        };
        extern struct bytesize1 globvar_1;
        struct bytesize1 fun1(void);
        struct bytesize2 {
            unsigned char arr[2];
        };
        extern struct bytesize2 globvar_2;
        struct bytesize2 fun2(void);
        struct bytesize3 {
            unsigned char arr[3];
        };
        extern struct bytesize3 globvar_3;
        struct bytesize3 fun3(void);
        struct bytesize4 {
            unsigned char arr[4];
        };
        extern struct bytesize4 globvar_4;
        struct bytesize4 fun4(void);
        struct bytesize5 {
            unsigned char arr[5];
        };
        extern struct bytesize5 globvar_5;
        struct bytesize5 fun5(void);
        struct bytesize6 {
            unsigned char arr[6];
        };
        extern struct bytesize6 globvar_6;
        struct bytesize6 fun6(void);
        struct bytesize7 {
            unsigned char arr[7];
        };
        extern struct bytesize7 globvar_7;
        struct bytesize7 fun7(void);
        struct bytesize8 {
            unsigned char arr[8];
        };
        extern struct bytesize8 globvar_8;
        struct bytesize8 fun8(void);
        struct bytesize9 {
            unsigned char arr[9];
        };
        extern struct bytesize9 globvar_9;
        struct bytesize9 fun9(void);
        struct bytesize10 {
            unsigned char arr[10];
        };
        extern struct bytesize10 globvar_10;
        struct bytesize10 fun10(void);
        struct bytesize11 {
            unsigned char arr[11];
        };
        extern struct bytesize11 globvar_11;
        struct bytesize11 fun11(void);
        struct bytesize12 {
            unsigned char arr[12];
        };
        extern struct bytesize12 globvar_12;
        struct bytesize12 fun12(void);
        struct bytesize13 {
            unsigned char arr[13];
        };
        extern struct bytesize13 globvar_13;
        struct bytesize13 fun13(void);
        struct bytesize14 {
            unsigned char arr[14];
        };
        extern struct bytesize14 globvar_14;
        struct bytesize14 fun14(void);
        struct bytesize15 {
            unsigned char arr[15];
        };
        extern struct bytesize15 globvar_15;
        struct bytesize15 fun15(void);
        struct bytesize16 {
            unsigned char arr[16];
        };
        extern struct bytesize16 globvar_16;
        struct bytesize16 fun16(void);
        struct bytesize17 {
            unsigned char arr[17];
        };
        extern struct bytesize17 globvar_17;
        struct bytesize17 fun17(void);
        struct bytesize18 {
            unsigned char arr[18];
        };
        extern struct bytesize18 globvar_18;
        struct bytesize18 fun18(void);
        struct bytesize19 {
            unsigned char arr[19];
        };
        extern struct bytesize19 globvar_19;
        struct bytesize19 fun19(void);
        struct bytesize20 {
            unsigned char arr[20];
        };
        extern struct bytesize20 globvar_20;
        struct bytesize20 fun20(void);
        struct bytesize21 {
            unsigned char arr[21];
        };
        extern struct bytesize21 globvar_21;
        struct bytesize21 fun21(void);
        struct bytesize22 {
            unsigned char arr[22];
        };
        extern struct bytesize22 globvar_22;
        struct bytesize22 fun22(void);
        struct bytesize23 {
            unsigned char arr[23];
        };
        extern struct bytesize23 globvar_23;
        struct bytesize23 fun23(void);
        struct bytesize24 {
            unsigned char arr[24];
        };
        extern struct bytesize24 globvar_24;
        struct bytesize24 fun24(void);
        
        struct bytesize1 fun1(void) {
            return globvar_1;
        }
        struct bytesize2 fun2(void) {
            return globvar_2;
        }
        struct bytesize3 fun3(void) {
            return globvar_3;
        }
        struct bytesize4 fun4(void) {
            return globvar_4;
        }
        struct bytesize5 fun5(void) {
            return globvar_5;
        }
        struct bytesize6 fun6(void) {
            return globvar_6;
        }
        struct bytesize7 fun7(void) {
            return globvar_7;
        }
        struct bytesize8 fun8(void) {
            return globvar_8;
        }
        struct bytesize9 fun9(void) {
            return globvar_9;
        }
        struct bytesize10 fun10(void) {
            return globvar_10;
        }
        struct bytesize11 fun11(void) {
            return globvar_11;
        }
        struct bytesize12 fun12(void) {
            return globvar_12;
        }
        struct bytesize13 fun13(void) {
            return globvar_13;
        }
        struct bytesize14 fun14(void) {
            return globvar_14;
        }
        struct bytesize15 fun15(void) {
            return globvar_15;
        }
        struct bytesize16 fun16(void) {
            return globvar_16;
        }
        struct bytesize17 fun17(void) {
            return globvar_17;
        }
        struct bytesize18 fun18(void) {
            return globvar_18;
        }
        struct bytesize19 fun19(void) {
            return globvar_19;
        }
        struct bytesize20 fun20(void) {
            return globvar_20;
        }
        struct bytesize21 fun21(void) {
            return globvar_21;
        }
        struct bytesize22 fun22(void) {
            return globvar_22;
        }
        struct bytesize23 fun23(void) {
            return globvar_23;
        }
        struct bytesize24 fun24(void) {
            return globvar_24;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_libraries_retval_struct_sizes_client() {
    let src = r#"
        
        struct bytesize1 {
            unsigned char arr[1];
        };
        extern struct bytesize1 globvar_1;
        struct bytesize1 fun1(void);
        struct bytesize2 {
            unsigned char arr[2];
        };
        extern struct bytesize2 globvar_2;
        struct bytesize2 fun2(void);
        struct bytesize3 {
            unsigned char arr[3];
        };
        extern struct bytesize3 globvar_3;
        struct bytesize3 fun3(void);
        struct bytesize4 {
            unsigned char arr[4];
        };
        extern struct bytesize4 globvar_4;
        struct bytesize4 fun4(void);
        struct bytesize5 {
            unsigned char arr[5];
        };
        extern struct bytesize5 globvar_5;
        struct bytesize5 fun5(void);
        struct bytesize6 {
            unsigned char arr[6];
        };
        extern struct bytesize6 globvar_6;
        struct bytesize6 fun6(void);
        struct bytesize7 {
            unsigned char arr[7];
        };
        extern struct bytesize7 globvar_7;
        struct bytesize7 fun7(void);
        struct bytesize8 {
            unsigned char arr[8];
        };
        extern struct bytesize8 globvar_8;
        struct bytesize8 fun8(void);
        struct bytesize9 {
            unsigned char arr[9];
        };
        extern struct bytesize9 globvar_9;
        struct bytesize9 fun9(void);
        struct bytesize10 {
            unsigned char arr[10];
        };
        extern struct bytesize10 globvar_10;
        struct bytesize10 fun10(void);
        struct bytesize11 {
            unsigned char arr[11];
        };
        extern struct bytesize11 globvar_11;
        struct bytesize11 fun11(void);
        struct bytesize12 {
            unsigned char arr[12];
        };
        extern struct bytesize12 globvar_12;
        struct bytesize12 fun12(void);
        struct bytesize13 {
            unsigned char arr[13];
        };
        extern struct bytesize13 globvar_13;
        struct bytesize13 fun13(void);
        struct bytesize14 {
            unsigned char arr[14];
        };
        extern struct bytesize14 globvar_14;
        struct bytesize14 fun14(void);
        struct bytesize15 {
            unsigned char arr[15];
        };
        extern struct bytesize15 globvar_15;
        struct bytesize15 fun15(void);
        struct bytesize16 {
            unsigned char arr[16];
        };
        extern struct bytesize16 globvar_16;
        struct bytesize16 fun16(void);
        struct bytesize17 {
            unsigned char arr[17];
        };
        extern struct bytesize17 globvar_17;
        struct bytesize17 fun17(void);
        struct bytesize18 {
            unsigned char arr[18];
        };
        extern struct bytesize18 globvar_18;
        struct bytesize18 fun18(void);
        struct bytesize19 {
            unsigned char arr[19];
        };
        extern struct bytesize19 globvar_19;
        struct bytesize19 fun19(void);
        struct bytesize20 {
            unsigned char arr[20];
        };
        extern struct bytesize20 globvar_20;
        struct bytesize20 fun20(void);
        struct bytesize21 {
            unsigned char arr[21];
        };
        extern struct bytesize21 globvar_21;
        struct bytesize21 fun21(void);
        struct bytesize22 {
            unsigned char arr[22];
        };
        extern struct bytesize22 globvar_22;
        struct bytesize22 fun22(void);
        struct bytesize23 {
            unsigned char arr[23];
        };
        extern struct bytesize23 globvar_23;
        struct bytesize23 fun23(void);
        struct bytesize24 {
            unsigned char arr[24];
        };
        extern struct bytesize24 globvar_24;
        struct bytesize24 fun24(void);
        int memcmp(void *s1, void *s2, unsigned long n);
        int main(void) {
            struct bytesize1 s1 = fun1();
            if (memcmp(&s1, &globvar_1, sizeof s1)) {
                return 1;
            }
            struct bytesize2 s2 = fun2();
            if (memcmp(&s2, &globvar_2, sizeof s2)) {
                return 2;
            }
            struct bytesize3 s3 = fun3();
            if (memcmp(&s3, &globvar_3, sizeof s3)) {
                return 3;
            }
            struct bytesize4 s4 = fun4();
            if (memcmp(&s4, &globvar_4, sizeof s4)) {
                return 4;
            }
            struct bytesize5 s5 = fun5();
            if (memcmp(&s5, &globvar_5, sizeof s5)) {
                return 5;
            }
            struct bytesize6 s6 = fun6();
            if (memcmp(&s6, &globvar_6, sizeof s6)) {
                return 6;
            }
            struct bytesize7 s7 = fun7();
            if (memcmp(&s7, &globvar_7, sizeof s7)) {
                return 7;
            }
            struct bytesize8 s8 = fun8();
            if (memcmp(&s8, &globvar_8, sizeof s8)) {
                return 8;
            }
            struct bytesize9 s9 = fun9();
            if (memcmp(&s9, &globvar_9, sizeof s9)) {
                return 9;
            }
            struct bytesize10 s10 = fun10();
            if (memcmp(&s10, &globvar_10, sizeof s10)) {
                return 10;
            }
            struct bytesize11 s11 = fun11();
            if (memcmp(&s11, &globvar_11, sizeof s11)) {
                return 11;
            }
            struct bytesize12 s12 = fun12();
            if (memcmp(&s12, &globvar_12, sizeof s12)) {
                return 12;
            }
            struct bytesize13 s13 = fun13();
            if (memcmp(&s13, &globvar_13, sizeof s13)) {
                return 13;
            }
            struct bytesize14 s14 = fun14();
            if (memcmp(&s14, &globvar_14, sizeof s14)) {
                return 14;
            }
            struct bytesize15 s15 = fun15();
            if (memcmp(&s15, &globvar_15, sizeof s15)) {
                return 15;
            }
            struct bytesize16 s16 = fun16();
            if (memcmp(&s16, &globvar_16, sizeof s16)) {
                return 16;
            }
            struct bytesize17 s17 = fun17();
            if (memcmp(&s17, &globvar_17, sizeof s17)) {
                return 17;
            }
            struct bytesize18 s18 = fun18();
            if (memcmp(&s18, &globvar_18, sizeof s18)) {
                return 18;
            }
            struct bytesize19 s19 = fun19();
            if (memcmp(&s19, &globvar_19, sizeof s19)) {
                return 19;
            }
            struct bytesize20 s20 = fun20();
            if (memcmp(&s20, &globvar_20, sizeof s20)) {
                return 20;
            }
            struct bytesize21 s21 = fun21();
            if (memcmp(&s21, &globvar_21, sizeof s21)) {
                return 21;
            }
            struct bytesize22 s22 = fun22();
            if (memcmp(&s22, &globvar_22, sizeof s22)) {
                return 22;
            }
            struct bytesize23 s23 = fun23();
            if (memcmp(&s23, &globvar_23, sizeof s23)) {
                return 23;
            }
            struct bytesize24 s24 = fun24();
            if (memcmp(&s24, &globvar_24, sizeof s24)) {
                return 24;
            }
            return 0;
        }
        struct bytesize1 globvar_1 = {{0}};
        struct bytesize2 globvar_2 = {{1, 2}};
        struct bytesize3 globvar_3 = {{3, 4, 5}};
        struct bytesize4 globvar_4 = {{6, 7, 8, 9}};
        struct bytesize5 globvar_5 = {{10, 11, 12, 13, 14}};
        struct bytesize6 globvar_6 = {{15, 16, 17, 18, 19, 20}};
        struct bytesize7 globvar_7 = {{21, 22, 23, 24, 25, 26, 27}};
        struct bytesize8 globvar_8 = {{28, 29, 30, 31, 32, 33, 34, 35}};
        struct bytesize9 globvar_9 = {{36, 37, 38, 39, 40, 41, 42, 43, 44}};
        struct bytesize10 globvar_10 = {{45, 46, 47, 48, 49, 50, 51, 52, 53, 54}};
        struct bytesize11 globvar_11 = {{55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65}};
        struct bytesize12 globvar_12 = {
            {66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77}};
        struct bytesize13 globvar_13 = {
            {78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}};
        struct bytesize14 globvar_14 = {
            {91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104}};
        struct bytesize15 globvar_15 = {{105, 106, 107, 108, 109, 110, 111, 112, 113,
                                         114, 115, 116, 117, 118, 119}};
        struct bytesize16 globvar_16 = {{120, 121, 122, 123, 124, 125, 126, 127, 128,
                                         129, 130, 131, 132, 133, 134, 135}};
        struct bytesize17 globvar_17 = {{136, 137, 138, 139, 140, 141, 142, 143, 144,
                                         145, 146, 147, 148, 149, 150, 151, 152}};
        struct bytesize18 globvar_18 = {{153, 154, 155, 156, 157, 158, 159, 160, 161,
                                         162, 163, 164, 165, 166, 167, 168, 169, 170}};
        struct bytesize19 globvar_19 = {{171, 172, 173, 174, 175, 176, 177, 178, 179,
                                         180, 181, 182, 183, 184, 185, 186, 187, 188,
                                         189}};
        struct bytesize20 globvar_20 = {{190, 191, 192, 193, 194, 195, 196,
                                         197, 198, 199, 200, 201, 202, 203,
                                         204, 205, 206, 207, 208, 209}};
        struct bytesize21 globvar_21 = {{210, 211, 212, 213, 214, 215, 216,
                                         217, 218, 219, 220, 221, 222, 223,
                                         224, 225, 226, 227, 228, 229, 230}};
        struct bytesize22 globvar_22 = {{231, 232, 233, 234, 235, 236, 237, 238,
                                         239, 240, 241, 242, 243, 244, 245, 246,
                                         247, 248, 249, 250, 251, 252}};
        struct bytesize23 globvar_23 = {{253, 254, 255, 0, 1, 2, 3, 4,
                                         5, 6, 7, 8, 9, 10, 11, 12,
                                         13, 14, 15, 16, 17, 18, 19}};
        struct bytesize24 globvar_24 = {{20, 21, 22, 23, 24, 25, 26, 27,
                                         28, 29, 30, 31, 32, 33, 34, 35,
                                         36, 37, 38, 39, 40, 41, 42, 43}};
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        Star,
        Identifier,
        Comma,
        Void,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Sizeof,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_return_big_struct_on_page_boundary() {
    let src = r#"
        struct eighteen_bytes {
            char arr[18];
        };
        extern struct eighteen_bytes on_page_boundary;
        struct eighteen_bytes return_struct(void) {
            on_page_boundary.arr[17] = 12;
            on_page_boundary.arr[9] = -1;
            on_page_boundary.arr[8] = -2;
            on_page_boundary.arr[7] = -3;
            return on_page_boundary;
        }
        int main(void) {
            struct eighteen_bytes x = return_struct();
            for (int i = 0; i < 18; i = i + 1) {
                char val = x.arr[i];
                if (i == 7) {
                    if (val != -3) {
                        return 1;
                    }
                } else if (i == 8) {
                    if (val != -2) {
                        return 2;
                    }
                } else if (i == 9) {
                    if (val != -1) {
                        return 3;
                    }
                } else if (i == 17) {
                    if (val != 12) {
                        return 4;
                    }
                } else if (x.arr[i]) {
                    return 5;
                }
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_return_incomplete_type() {
    let src = r#"
        struct s;
        struct s increment_struct(struct s param);
        struct s {
            int a;
            int b;
        };
        int main(void) {
            struct s arg = {1, 2};
            struct s val = increment_struct(arg);
            if (val.a != 2 || val.b != 3) {
                return 1;
            }
            return 0;
        }
        struct s increment_struct(struct s param) {
            param.a = param.a + 1;
            param.b = param.b + 1;
            return param;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        Equal,
        Identifier,
        Dot,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_return_pointer_in_rax() {
    let src = r#"
        struct s {
            long l1;
            long l2;
            long l3;
        };
        struct s return_in_mem(void) {
            struct s result = {1, 2, 3};
            return result;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Long,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_return_space_overlap() {
    let src = r#"
        struct s {
            long l1;
            long l2;
            long l3;
        };
        extern struct s globvar;
        struct s overlap_with_globvar(void);
        struct s overlap_with_pointer(struct s *ptr);
        int main(void) {
            globvar = overlap_with_globvar();
            if (globvar.l1 != 400l || globvar.l2 != 500l || globvar.l3 != 600l) {
                return 2;
            }
            struct s my_struct = {10l, 9l, 8l};
            my_struct = overlap_with_pointer(&my_struct);
            if (my_struct.l1 != 20l || my_struct.l2 != 18l || my_struct.l3 != 16l) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Long,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Long),
        Comma,
        IntConstant(IntKind::Long),
        Comma,
        IntConstant(IntKind::Long),
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Long),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_return_struct_on_page_boundary() {
    let src = r#"
        struct ten_bytes {
            char arr[10];
        };
        extern struct ten_bytes on_page_boundary;
        struct ten_bytes return_struct(void) {
            on_page_boundary.arr[9] = -1;
            on_page_boundary.arr[8] = -2;
            on_page_boundary.arr[7] = -3;
            return on_page_boundary;
        }
        int main(void) {
            struct ten_bytes x = return_struct();
            for (int i = 0; i < 7; i = i + 1) {
                if (x.arr[i]) {
                    return 1;
                }
            }
            if (x.arr[7] != -3) {
                return 2;
            }
            if (x.arr[8] != -2) {
                return 2;
            }
            if (x.arr[9] != -1) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Extern,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_simple() {
    let src = r#"
        struct pair {
            int x;
            char y;
        };
        struct pair2 {
            double d;
            long l;
        };
        struct pair2 double_members(struct pair p) {
            struct pair2 retval = {p.x * 2, p.y * 2};
            return retval;
        }
        int main(void) {
            struct pair arg = {1, 4};
            struct pair2 result = double_members(arg);
            if (result.d != 2.0 || result.l != 8) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Long,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Struct,
        Identifier,
        Identifier,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        Identifier,
        Dot,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        Dot,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_stack_clobber() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        void exit(int status);
        struct stack_bytes {
            char bytes[16];
        };
        static struct stack_bytes to_validate;
        void validate_stack_bytes(int code) {
            if (strcmp(to_validate.bytes, "efghijklmnopqrs")) {
                exit(code);
            }
            return;
        }
        struct one_int_reg {
            char cs[7];
        };
        struct one_int_reg return_int_struct(void) {
            struct one_int_reg retval = {{0, 0, 0, 0, 0, 0, 0}};
            return retval;
        }
        static struct one_int_reg one_int_struct;
        void validate_one_int_struct(int code) {
            for (int i = 0; i < 7; i = i + 1) {
                if (one_int_struct.cs[i]) {
                    exit(code);
                }
            }
        }
        int test_int_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            one_int_struct = return_int_struct();
            to_validate = bytes;
            validate_stack_bytes(1);
            validate_one_int_struct(2);
            return 0;
        }
        struct two_int_regs {
            char cs[15];
        };
        struct two_int_regs return_two_int_struct(void) {
            struct two_int_regs retval = {
                {20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}};
            return retval;
        }
        static struct two_int_regs two_int_struct;
        void validate_two_int_struct(int code) {
            for (int i = 0; i < 15; i = i + 1)
                if (two_int_struct.cs[i] != i + 20) {
                    exit(code);
                }
        }
        int test_two_int_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            two_int_struct = return_two_int_struct();
            to_validate = bytes;
            validate_stack_bytes(3);
            validate_two_int_struct(4);
            return 0;
        }
        struct one_xmm_reg {
            double d;
        };
        struct one_xmm_reg return_one_xmm_struct(void) {
            struct one_xmm_reg retval = {234.5};
            return retval;
        }
        static struct one_xmm_reg one_double_struct;
        void validate_one_double_struct(int code) {
            if (one_double_struct.d != 234.5) {
                exit(code);
            }
        }
        int test_one_double_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            one_double_struct = return_one_xmm_struct();
            to_validate = bytes;
            validate_stack_bytes(5);
            validate_one_double_struct(6);
            return 0;
        }
        struct two_xmm_regs {
            double d1;
            double d2;
        };
        struct two_xmm_regs return_two_xmm_struct(void) {
            struct two_xmm_regs retval = {234.5, 678.25};
            return retval;
        }
        static struct two_xmm_regs two_doubles_struct;
        void validate_two_doubles_struct(int code) {
            if (two_doubles_struct.d1 != 234.5 || two_doubles_struct.d2 != 678.25) {
                exit(code);
            }
        }
        int test_two_doubles_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            two_doubles_struct = return_two_xmm_struct();
            to_validate = bytes;
            validate_stack_bytes(7);
            validate_two_doubles_struct(8);
            return 0;
        }
        struct int_and_xmm {
            char c;
            double d;
        };
        struct int_and_xmm return_mixed_struct(void) {
            struct int_and_xmm retval = {125, 678.25};
            return retval;
        }
        static struct int_and_xmm mixed_struct;
        void validate_mixed_struct(int code) {
            if (mixed_struct.c != 125 || mixed_struct.d != 678.25) {
                exit(code);
            }
        }
        int test_mixed_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            mixed_struct = return_mixed_struct();
            to_validate = bytes;
            validate_stack_bytes(9);
            validate_mixed_struct(10);
            return 0;
        }
        struct stack {
            char cs[28];
        };
        struct stack return_stack_struct(void) {
            struct stack retval = {{90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
                                    100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
                                    110, 111, 112, 113, 114, 115, 116, 117}};
            return retval;
        }
        static struct stack stack_struct;
        void validate_stack_struct(int code) {
            for (int i = 0; i < 28; i = i + 1) {
                if (stack_struct.cs[i] != i + 90) {
                    exit(code);
                }
            }
        }
        int test_stack_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            stack_struct = return_stack_struct();
            to_validate = bytes;
            validate_stack_bytes(11);
            validate_stack_struct(12);
            return 0;
        }
        struct stack_irregular {
            char cs[19];
        };
        struct stack_irregular return_irregular_stack_struct(void) {
            struct stack_irregular retval = {{70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
                                              80, 81, 82, 83, 84, 85, 86, 87, 88}};
            return retval;
        }
        static struct stack_irregular irregular_stack_struct;
        void validate_irregular_stack_struct(int code) {
            for (int i = 0; i < 19; i = i + 1) {
                if (irregular_stack_struct.cs[i] != i + 70) {
                    exit(code);
                }
            }
        }
        int test_irregular_stack_struct(void) {
            struct stack_bytes bytes = {"efghijklmnopqrs"};
            irregular_stack_struct = return_irregular_stack_struct();
            to_validate = bytes;
            validate_stack_bytes(13);
            validate_irregular_stack_struct(14);
            return 0;
        }
        int main(void) {
            test_int_struct();
            test_two_int_struct();
            test_one_double_struct();
            test_two_doubles_struct();
            test_mixed_struct();
            test_stack_struct();
            test_irregular_stack_struct();
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Return,
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Double,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Dot,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Struct,
        Identifier,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Static,
        Struct,
        Identifier,
        Identifier,
        Semicolon,
        Void,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        Dot,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_params_and_returns_temporary_lifetime() {
    let src = r#"
        struct s {
            int arr[3];
        };
        struct s f(void) {
            struct s retval = {{1, 2, 3}};
            return retval;
        }
        int main(void) {
            int i = f().arr[0];
            int j = f().arr[1];
            int k = f().arr[2];
            if (i != 1) {
                return 1;
            }
            if (j != 2) {
                return 2;
            }
            if (k != 3) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Struct,
        Identifier,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Semicolon,
        Struct,
        Identifier,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Struct,
        Identifier,
        Identifier,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Dot,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}
