use crate::lexer::TokenKind::*;
use crate::lexer::{tokenize, IntKind};

#[test]
fn test_valid_allocation_test_alignment() {
    let src = r#"
        int check_alignment(int *ptr) {
            unsigned long addr = (unsigned long) ptr;
            return (addr % 16 == 0);
        }
        int main(void)
        {
            int arr[5] = {0};
            int arr2[7] = {0};
            int arr3[2][2] = {{0}};
            if (!check_alignment(arr)) {
                return 1;
            }
            for (int i = 0; i < 5; i = i + 1)
                arr[i] = i;
            if (!check_alignment(arr2)) {
                return 2;
            }
            for (int i = 0; i < 7; i = i + 1)
                if (arr2[i])
                    return 3;
            for (int i = 0; i < 7; i = i + 1){
                arr2[i] = -i;
            }
            if (!check_alignment((int *)arr3)) {
                return 4;
            }
            for (int i = 0; i < 5; i = i + 1) {
                if (arr[i] != i) {
                    return 5;
                }
            }
            for (int i = 0; i < 2; i = i + 1)
                for (int j = 0; j < 2; j = j + 1)
                    if (arr3[i][j] != 0)
                        return 6;
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Identifier,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        Percent,
        IntConstant(IntKind::Int),
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Equal,
        Minus,
        Identifier,
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        OpenParen,
        Int,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_casts_cast_array_of_pointers() {
    let src = r#"
        int main(void) {
            int simple_array[2] = {1, 2};
            int(*ptr_arr[3])[2] = {&simple_array, 0, &simple_array};
            long *other_ptr = (long *)ptr_arr;
            return (int(**)[2])other_ptr == ptr_arr;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        OpenParen,
        Star,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Ampersand,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Ampersand,
        Identifier,
        CloseBrace,
        Semicolon,
        Long,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Long,
        Star,
        CloseParen,
        Identifier,
        Semicolon,
        Return,
        OpenParen,
        Int,
        OpenParen,
        Star,
        Star,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Identifier,
        EqualEqual,
        Identifier,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_casts_implicit_and_explicit_conversions() {
    let src = r#"
        int main(void) {
            long arr[4] = {-1,-2,-3,-4};
            if (arr != (long *) arr) {
                return 1;
            }
            if ((long (*)[4]) arr != &arr) {
                return 2;
            }
            unsigned long *unsigned_arr = (unsigned long *)arr;
            if (unsigned_arr[0] != 18446744073709551615UL) {
                return 3;
            }
            if (unsigned_arr[3] != 18446744073709551612UL) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        OpenParen,
        Long,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Long,
        OpenParen,
        Star,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Identifier,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        Star,
        CloseParen,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_casts_multi_dim_casts() {
    let src = r#"
        int main(void) {
            int multi_dim[2][3] = {{0, 1, 2}, {3, 4, 5}};
            int (*array_pointer)[2][3] = &multi_dim;
            int (*row_pointer)[3] = (int (*)[3]) array_pointer;
            if (row_pointer != multi_dim) {
                return 1;
            }
            row_pointer = row_pointer + 1;
            if (row_pointer[0][1] != 4) {
                return 2;
            }
            int *elem_ptr = (int *) row_pointer;
            if (*elem_ptr != 3 ){
                return 3;
            }
            elem_ptr = elem_ptr + 2;
            if (*elem_ptr != 5) {
                return 4;
            }
            row_pointer = row_pointer - 1;
            if ((int (*)[2][3]) row_pointer != array_pointer) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Int,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenParen,
        Int,
        OpenParen,
        Star,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Int,
        Star,
        CloseParen,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Int,
        OpenParen,
        Star,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_declarators_array_as_argument() {
    let src = r#"
        int array_param(int a[5]) {
            a[4] = 0;
            return 0;
        }
        int nested_array_param(int a[2][3]) {
            a[1][1] = 1;
            return 0;
        }
        int array_param(int a[2]);
        int nested_array_param(int (*a)[3]);
        int main(void) {
            int array_param(int a[6]);
            int nested_array_param(int a[5][3]);
            int arr[8] = {8, 7, 6, 5, 4, 3, 2, 1};
            array_param(arr);
            if (arr[4]) {
                return 1;
            }
            for (int i = 0; i < 8; i = i + 1) {
                if (i != 4 && arr[i] != 8 - i)
                    return 2;
            }
            int nested_arr[4][3] = { {-1, -1, -1}, {-2, -2, -2}, {-3, -3, -3}, {-4, -4, -4}};
            nested_array_param(nested_arr);
            if (nested_arr[1][1] != 1) {
                return 3;
            }
            for (int i = 0; i < 4; i = i + 1) {
                int expected = -1 - i;
                for (int j = 0; j < 3; j = j + 1) {
                    if ((i != 1 || j != 1) &&
                        (nested_arr[i][j] != expected)) {
                            return 4;
                    }
                }
            }
            return 0;
        }
        int array_param(int *a);
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Int,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        Minus,
        Identifier,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Minus,
        Identifier,
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        AmpersandAmpersand,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_declarators_big_array() {
    let src = r#"
        extern int x[4294967297L][100000000];
        int main(void) {
            return 0;
        }
    "#;
    let expected = vec![
        Extern,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Long),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_declarators_equivalent_declarators() {
    let src = r#"
        long int(arr)[4] = {1, 2, 3, 4};
        int long arr[4ul];
        int (*ptr_to_arr)[3][6l];
        int((*(ptr_to_arr))[3l])[6u] = 0;
        int *array_of_pointers[3] = {0, 0, 0};
        int test_arr(void) {
            for (int i = 0; i < 4; i = i + 1) {
                if (arr[i] != i + 1) {
                    return 1;
                }
            }
            return 0;
        }
        int test_ptr_to_arr(void) {
            if (ptr_to_arr) {
                return 2;
            }
            static int nested_arr[3][6];
            ptr_to_arr = &nested_arr;
            ptr_to_arr[0][2][4] = 100;
            if (nested_arr[2][4] != 100) {
                return 3;
            }
            return 0;
        }
        int test_array_of_pointers(int *ptr) {
            extern int *((array_of_pointers)[3]);
            for (int i = 0; i < 3; i = i + 1) {
                if (array_of_pointers[i])
                    return 4;
                array_of_pointers[i] = ptr;
            }
            array_of_pointers[2][0] = 11;
            if (*ptr != 11) {
                return 5;
            }
            for (int i = 0; i < 3; i = i + 1) {
                if (array_of_pointers[i][0] != 11) {
                    return 6;
                }
            }
            return 0;
        }
        int main(void)
        {
            int check = test_arr();
            if (check) {
                return check;
            }
            check = test_ptr_to_arr();
            if (check) {
                return check;
            }
            int x = 0;
            check = test_array_of_pointers(&x);
            if (check) {
                return check;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Long,
        Int,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::ULong),
        CloseBracket,
        Semicolon,
        Int,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Long),
        CloseBracket,
        Semicolon,
        Int,
        OpenParen,
        OpenParen,
        Star,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Long),
        CloseBracket,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Uint),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Star,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Static,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Extern,
        Int,
        Star,
        OpenParen,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Equal,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_declarators_for_loop_array() {
    let src = r#"
        
        int main(void) {
            int counter = 0;
            for (int i[3] = {1, 2, 3}; counter < 3; counter = counter + 1){
                if (i[counter] != counter + 1) {
                    return 1;
                }
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_declarators_return_nested_array() {
    let src = r#"
        int arr[3] = {1, 1, 1};
        int (*foo(int x, int y))[3] {
            arr[1] = x;
            arr[2] = y;
            return &arr;
        }
        int main(void) {
            int (*arr)[3] = foo(2, 3);
            if (arr[0][0] != 1) {
                return 1;
            }
            if (arr[0][1] != 2) {
                return 2;
            }
            if (arr[0][2] != 3) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        OpenParen,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Semicolon,
        Return,
        Ampersand,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_bitwise_subscript() {
    let src = r#"
        
        int main(void) {
            int arr[6] = {-10, 10, -11, 11, -12, 12};
            if ((arr[0] & arr[5]) != 4) {
                return 1;
            }
            if ((arr[1] | arr[4]) != -2) {
                return 2;
            }
            if ((arr[2] ^ arr[3]) != -2) {
                return 3;
            }
            arr[0] = 2041302511;
            if ((arr[0] >> arr[1]) != 1993459) {
                return 4;
            }
            if ((arr[5] << 3 ) != 96) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Pipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Circumflex,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        GreaterGreater,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        LessLess,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_compound_assign_and_increment() {
    let src = r#"
        
        int main(void) {
            int arr[4] = {-1, -2, -3, -4};
            int *ptr = arr;
            int idx = 2;
            if ((ptr++[idx++] *= 3) != -9) {
                return 1;
            }
            if (*ptr != -2) {
                return 2;
            }
            if (idx != 3) {
                return 3;
            }
            idx--;
            if ((--ptr)[3] += 4) {
                return 4;
            }
            if (arr[0] != -1 || arr[1] != -2 || arr[2] != -9 || arr[3] != 0) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        PlusPlus,
        OpenBracket,
        Identifier,
        PlusPlus,
        CloseBracket,
        StarEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        MinusMinus,
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        MinusMinus,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PlusEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_compound_assign_array_of_pointers() {
    let src = r#"
        
        int main(void) {
            static int (*array_of_pointers[3])[4] = {0, 0, 0};
            int array1[4] = {100, 101, 102, 103};
            int nested_array[2][4] = {
                {200, 201, 202, 203},
                {300, 301, 302, 303}
            };
            array_of_pointers[0] = &array1;
            array_of_pointers[1] = &nested_array[0];
            array_of_pointers[2] = &nested_array[1];
            array_of_pointers[0] += 1;
            if (array_of_pointers[0][-1][3] != 103) {
                return 1;
            }
            array_of_pointers[1] += 1;
            array_of_pointers[2] -= 1;
            if (array_of_pointers[1][0][3] != 303) {
                return 2;
            }
            if (array_of_pointers[2][0][3] != 203) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        OpenParen,
        Star,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PlusEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        Minus,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PlusEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        MinusEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_compound_assign_to_nested_subscript() {
    let src = r#"
        long long_nested_arr[2][3] = {{1, 2, 3}, {4, 5, 6}};
        double dbl_nested_arr[3][2] = {{100.0, 101.0}, {102.0, 103.0}, {104.0, 105.0}};
        unsigned unsigned_index = 10;
        int main(void) {
            if ((long_nested_arr[1][unsigned_index - 8] *= -1) != -6) {
                return 1;
            }
            if (long_nested_arr[1][2] != -6) {
                return 2;
            }
            for (int i = 0; i < 2; i += 1) {
                for (int j = 0; j < 3; j += 1) {
                    if (i == 1 && j == 2) {
                        break;
                    }
                    long expected = i * 3 + j + 1;
                    if (long_nested_arr[i][j] != expected) {
                        return 3;
                    }
                }
            }
            if ((dbl_nested_arr[1][1] += 100.0) != 203.0) {
                return 4;
            }
            for (int i = 0; i < 3; i += 1) {
                for (int j = 0; j < 2; j += 1) {
                    if (i == 1 && j == 1) {
                        continue;
                    }
                    int expected = 100 + i * 2 + j;
                    if (dbl_nested_arr[i][j] != expected) {
                        return 5;
                    }
                }
            }
            return 0;
        }
    "#;
    let expected = vec![
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        Comma,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        Comma,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Unsigned,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        CloseBracket,
        StarEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        PlusEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        PlusEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Break,
        Semicolon,
        CloseBrace,
        Long,
        Identifier,
        Equal,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PlusEqual,
        DoubleConstant,
        CloseParen,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        PlusEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        PlusEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Continue,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_compound_assign_to_subscripted_val() {
    let src = r#"
        unsigned unsigned_arr[4] = {4294967295U, 4294967294U, 4294967293U, 4294967292U};
        int idx = 2;
        long long_idx = 1;
        int main(void) {
            long_idx = -long_idx;
            unsigned_arr[1] += 2;
            if (unsigned_arr[1]) {
                return 1;
            }
            unsigned_arr[idx] -= 10.0;
            if (unsigned_arr[idx] != 4294967283U) {
                return 2;
            }
            unsigned *unsigned_ptr = unsigned_arr + 4;
            unsigned_ptr[long_idx] /= 10;
            if (unsigned_arr[3] != 429496729U) {
                return 3;
            }
            unsigned_ptr[long_idx *= 2] *= unsigned_arr[0];
            if (unsigned_arr[2] != 13) {
                return 4;
            }
            if ((unsigned_arr[idx + long_idx] %= 10) != 5) {
                return 5;
            }
            if (unsigned_arr[0] != 5u) {
                return 6;
            }
            if (unsigned_arr[1]) {
                return 7;
            }
            if (unsigned_arr[2] != 13) {
                return 8;
            }
            if (unsigned_arr[3] != 429496729U) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Unsigned,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Uint),
        Comma,
        IntConstant(IntKind::Uint),
        Comma,
        IntConstant(IntKind::Uint),
        Comma,
        IntConstant(IntKind::Uint),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Long,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        Minus,
        Identifier,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PlusEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        MinusEqual,
        DoubleConstant,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        SlashEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenBracket,
        Identifier,
        StarEqual,
        IntConstant(IntKind::Int),
        CloseBracket,
        StarEqual,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        Plus,
        Identifier,
        CloseBracket,
        PercentEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_compound_bitwise_subscript() {
    let src = r#"
        
        int main(void) {
            unsigned long arr[4] = {
                2147483648l,
                18446744069414584320ul,
                9223372036854775808ul,
                1085102592571150095l
            };
            arr[1] &= arr[3];
            if (arr[1] != 1085102592318504960 ) {
                return 1;
            }
            arr[0] |= arr[1];
            if (arr[0] != 1085102594465988608ul) {
                return 2;
            }
            arr[2] ^= arr[3];
            if (arr[2] != 10308474629425925903ul) {
                return 3;
            }
            arr[3] >>= 25;
            if (arr[3] != 32338577287l) {
                return 4;
            }
            arr[1] <<= 12;
            if (arr[1] != 17361640446303928320ul) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Long),
        Comma,
        IntConstant(IntKind::ULong),
        Comma,
        IntConstant(IntKind::ULong),
        Comma,
        IntConstant(IntKind::Long),
        CloseBrace,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        AmpersandEqual,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipeEqual,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CircumflexEqual,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        GreaterGreaterEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Long),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        LessLessEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_compound_lval_evaluated_once() {
    let src = r#"
        int get_call_count(void) {
            static int count = 0;
            count += 1;
            return count;
        }
        int main(void) {
            int arr[4] = {10, 11, 12, 13};
            if (arr[get_call_count()] != 11) {
                return 1;
            }
            int *end_ptr = arr + 4;
            if ((end_ptr - 1)[-get_call_count()] != 11) {
                return 2;
            }
            if (get_call_count() != 3) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        PlusEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        OpenParen,
        CloseParen,
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBracket,
        Minus,
        Identifier,
        OpenParen,
        CloseParen,
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_compound_nested_pointer_assignment() {
    let src = r#"
        static long nested_arr[3][4][5] = {{{10, 9, 8}, {1, 2}}, {{100, 99, 98}}};
        int main(void) {
            long(*outer_ptr)[4][5] = nested_arr;
            outer_ptr += 1;
            if (outer_ptr != nested_arr + 1) {
                return 1;
            }
            if (outer_ptr[0][0][0] != 100) {
                return 2;
            }
            long(*inner_ptr)[5] =
                nested_arr[0] + 4;
            inner_ptr -= 3;
            if (inner_ptr[0][1] != 2) {
                return 3;
            }
            unsigned long idx = nested_arr[0][0][0] - 9;
            if ((inner_ptr += idx) != &nested_arr[0][2]) {
                return 4;
            }
            if ((inner_ptr[-2][1] != 9)) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Static,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        PlusEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        MinusEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        PlusEqual,
        Identifier,
        CloseParen,
        BangEqual,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        OpenBracket,
        Minus,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_compound_pointer_assignment() {
    let src = r#"
        int i = 4;
        int int_array(void) {
            int arr[6] = {1, 2, 3, 4, 5, 6};
            int *ptr = arr;
            if (*(ptr += 5) != 6) {
                return 1;
            }
            if (ptr[0] != 6) {
                 return 2;
            }
            if (ptr != arr + 5) {
                return 3;
            }
            if (*(ptr -=3) != 3) {
                return 4;
            }
            if (ptr[0] != 3) {
                return 5;
            }
            if (ptr != arr + 2) {
                return 6;
            }
            if ((ptr += i - 1) != arr + 5) {
                return 7;
            }
            if (*ptr != 6) {
                return 8;
            }
            if ((ptr -= (4294967295U + i)) != arr + 2) {
                return 9;
            }
            if (*ptr != 3) {
                return 10;
            }
            long l = 9223372036854775807l;
            if ((ptr += l - 9223372036854775806l) != arr + 3) {
                return 11;
            }
            if (*ptr != 4) {
                return 12;
            }
            return 0;
        }
        int double_array(void) {
            static double arr[6] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0};
            double *ptr = arr;
            if (*(ptr += 5) != 6) {
                return 1;
            }
            if (ptr[0] != 6) {
                 return 2;
            }
            if (ptr != arr + 5) {
                return 3;
            }
            if (*(ptr -=3) != 3) {
                return 4;
            }
            if (ptr[0] != 3) {
                return 5;
            }
            if (ptr != arr + 2) {
                return 6;
            }
            if ((ptr += i - 1) != arr + 5) {
                return 7;
            }
            if (*ptr != 6) {
                return 8;
            }
            if ((ptr -= (4294967295U + i)) != arr + 2) {
                return 9;
            }
            if (*ptr != 3) {
                return 10;
            }
            long l = 9223372036854775807l;
            if ((ptr += l - 9223372036854775806l) != arr + 3) {
                return 11;
            }
            if (*ptr != 4) {
                return 12;
            }
            return 0;
        }
        int main(void) {
            int result;
            if ((result = int_array())) {
                return result;
            }
            if ((result = double_array())) {
                return result + 12;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Star,
        OpenParen,
        Identifier,
        PlusEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        OpenParen,
        Identifier,
        MinusEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        PlusEqual,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        MinusEqual,
        OpenParen,
        IntConstant(IntKind::Uint),
        Plus,
        Identifier,
        CloseParen,
        CloseParen,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Long,
        Identifier,
        Equal,
        IntConstant(IntKind::Long),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        PlusEqual,
        Identifier,
        Minus,
        IntConstant(IntKind::Long),
        CloseParen,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Double,
        Star,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Star,
        OpenParen,
        Identifier,
        PlusEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        OpenParen,
        Identifier,
        MinusEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        PlusEqual,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        MinusEqual,
        OpenParen,
        IntConstant(IntKind::Uint),
        Plus,
        Identifier,
        CloseParen,
        CloseParen,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Long,
        Identifier,
        Equal,
        IntConstant(IntKind::Long),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        PlusEqual,
        Identifier,
        Minus,
        IntConstant(IntKind::Long),
        CloseParen,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_incr_and_decr_nested_pointers() {
    let src = r#"
        
        int main(void) {
            long arr[2][3][4] = {
                {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}},
                {{13, 14, 15, 16}, {17, 18, 19, 20}, {21, 22, 23, 24}}};
            long (*outer_ptr)[3][4] = arr + 1;
            if (outer_ptr-- != &arr[1]) {
                return 1;
            }
            if (outer_ptr[0][1] != arr[0][1]) {
                return 2;
            }
            if ((++outer_ptr)[0][2][3] != 24) {
                return 3;
            }
            if (outer_ptr[0][2][3] != 24) {
                return 4;
            }
            long (*inner_ptr)[4] = arr[0] + 1;
            if (inner_ptr++[0][2] != 7) {
                return 5;
            }
            if (inner_ptr[0][2] != 11) {
                return 6;
            }
            if ((--inner_ptr)[0][1] != 6) {
                return 7;
            }
            long *scalar_ptr = arr[1][2];
            if (scalar_ptr--[2] != 23) {
                return 8;
            }
            if (scalar_ptr[2] != 22) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        MinusMinus,
        BangEqual,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        PlusPlus,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        PlusPlus,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        MinusMinus,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Long,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        MinusMinus,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_incr_and_decr_pointers() {
    let src = r#"
        
        int main(void) {
            double x[3] = {0.0, 1.0, 2.0};
            double *ptr = x;
            if (++ptr != x + 1) {
                return 1;
            }
            if (*ptr != 1.0) {
                return 2;
            }
            if (ptr++ != x + 1) {
                return 3;
            }
            if (ptr != x + 2) {
                return 4;
            }
            if (*ptr != 2.0) {
                return 5;
            }
            if (--ptr != x + 1) {
                return 6;
            }
            if (*ptr != 1.0) {
                return 7;
            }
            if (ptr-- != x + 1) {
                return 8;
            }
            if (*ptr != 0.0) {
                return 9;
            }
            if (ptr != x) {
                return 10;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Double,
        Star,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        PlusPlus,
        Identifier,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        PlusPlus,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        MinusMinus,
        Identifier,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        MinusMinus,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_incr_decr_subscripted_vals() {
    let src = r#"
        int i = 2;
        int j = 1;
        int k = 0;
        int main(void) {
            int arr[3][2][2] = {
                {{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}, {{9, 10}, {11, 12}}};
            if (arr[i][j][k]++ != 11) {
                return 1;
            }
            if (arr[i][j][k] != 12) {
                return 2;
            }
            if (++arr[--i][j--][++k] != 9) {
                return 3;
            }
            if (arr[i][j][k] != 6) {
                return 4;
            }
            if (--arr[i][j][k] != 5) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        PlusPlus,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        PlusPlus,
        Identifier,
        OpenBracket,
        MinusMinus,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        MinusMinus,
        CloseBracket,
        OpenBracket,
        PlusPlus,
        Identifier,
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        MinusMinus,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_postfix_prefix_precedence() {
    let src = r#"
        
        int idx = 3;
        int main(void) {
            int arr[5] = {1, 2, 3, 4, 5};
            int *ptr = arr + 1;
            int result = ++ptr--[idx];
            if (result != 6) {
                return 1;
            }
            if (*ptr != 1) {
                return 2;
            }
            if (ptr != arr) {
                return 3;
            }
            if (*ptr++ != 1) {
                return 4;
            }
            if (*ptr != 2) {
                return 5;
            }
            for (int i = 0; i < 4; i++) {
                if (arr[i] != i + 1) {
                    return 6;
                }
            }
            if (arr[4] != 6) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        PlusPlus,
        Identifier,
        MinusMinus,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        PlusPlus,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        PlusPlus,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_initialization_automatic() {
    let src = r#"
        int test_simple(void) {
            unsigned long arr[3] = {18446744073709551615UL, 9223372036854775807UL,
                                    100ul};
            return (arr[0] == 18446744073709551615UL &&
                    arr[1] == 9223372036854775807UL && arr[2] == 100ul);
        }
        int test_partial(void) {
            double arr[5] = {1.0, 123e4};
            return (arr[0] == 1.0 && arr[1] == 123e4 && !arr[2] && !arr[3] && !arr[4]);
        }
        int test_non_constant(long negative_7billion, int *ptr) {
            *ptr = 1;
            extern int three(void);
            long var = negative_7billion * three();
            long arr[5] = {
                negative_7billion,
                three() * 7l,
                -(long)*ptr,
                var + (negative_7billion ? 2 : 3)
            };
            return (arr[0] == -7000000000 && arr[1] == 21l && arr[2] == -1l &&
                    arr[3] == -20999999998l && arr[4] == 0l);
        }
        int three(void) {
            return 3;
        }
        long global_one = 1l;
        int test_type_conversion(int *ptr) {
            *ptr = -100;
            unsigned long arr[4] = {
                3458764513821589504.0,
                *ptr,
                (unsigned int)18446744073709551615UL,
                -global_one
            };
            return (arr[0] == 3458764513821589504ul &&
                    arr[1] == 18446744073709551516ul && arr[2] == 4294967295U &&
                    arr[3] == 18446744073709551615UL);
        }
        int test_preserve_stack(void) {
            int i = -1;
            int arr[3] = {global_one * 2l, global_one + three()};
            unsigned int u = 2684366905;
            if (i != -1) {
                return 0;
            }
            if (u != 2684366905) {
                return 0;
            }
            return (arr[0] == 2 && arr[1] == 4 && !arr[2]);
        }
        int main(void) {
            if (!test_simple()) {
                return 1;
            }
            if (!test_partial()) {
                return 2;
            }
            long negative_seven_billion = -7000000000l;
            int i = 0;
            if (!test_non_constant(negative_seven_billion, &i)) {
                return 3;
            }
            if (!test_type_conversion(&i)) {
                return 4;
            }
            if (!test_preserve_stack()) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::ULong),
        Comma,
        IntConstant(IntKind::ULong),
        Comma,
        IntConstant(IntKind::ULong),
        CloseBrace,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::ULong),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::ULong),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        DoubleConstant,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        DoubleConstant,
        AmpersandAmpersand,
        Bang,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        AmpersandAmpersand,
        Bang,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        AmpersandAmpersand,
        Bang,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Long,
        Identifier,
        Comma,
        Int,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Star,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Extern,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Long,
        Identifier,
        Equal,
        Identifier,
        Star,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Identifier,
        Comma,
        Identifier,
        OpenParen,
        CloseParen,
        Star,
        IntConstant(IntKind::Long),
        Comma,
        Minus,
        OpenParen,
        Long,
        CloseParen,
        Star,
        Identifier,
        Comma,
        Identifier,
        Plus,
        OpenParen,
        Identifier,
        Question,
        IntConstant(IntKind::Int),
        Colon,
        IntConstant(IntKind::Int),
        CloseParen,
        CloseBrace,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        Minus,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Long),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        Minus,
        IntConstant(IntKind::Long),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        Minus,
        IntConstant(IntKind::Long),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Long),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Long,
        Identifier,
        Equal,
        IntConstant(IntKind::Long),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Star,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        Star,
        Identifier,
        Comma,
        OpenParen,
        Unsigned,
        Int,
        CloseParen,
        IntConstant(IntKind::ULong),
        Comma,
        Minus,
        Identifier,
        CloseBrace,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::ULong),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::ULong),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Uint),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Identifier,
        Star,
        IntConstant(IntKind::Long),
        Comma,
        Identifier,
        Plus,
        Identifier,
        OpenParen,
        CloseParen,
        CloseBrace,
        Semicolon,
        Unsigned,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Bang,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Long,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Long),
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Ampersand,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_initialization_automatic_nested() {
    let src = r#"
        int test_simple(void) {
            int arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
            for (int i = 0; i < 3; i = i + 1) {
                for (int j = 0; j < 3; j = j + 1) {
                    if (arr[i][j] != i * 3 + j + 1) {
                        return 0;
                    }
                }
            }
            return 1;
        }
        int test_partial(void) {
            int first_half_only[4][2][6] = {
                {{1, 2, 3}},
                {{4, 5, 6}}
            };
            int expected = 1;
            for (int i = 0; i < 4; i = i + 1) {
                for (int j = 0; j < 2; j = j + 1) {
                    for (int k = 0; k < 6; k = k + 1) {
                        int val = first_half_only[i][j][k];
                        if (i > 1 || j > 0 || k > 2) {
                            if (val) {
                                return 0;
                            }
                        } else {
                            if (val != expected) {
                                return 0;
                            }
                            expected = expected + 1;
                        }
                    }
                }
            }
            return 1;
        }
        int test_non_constant_and_type_conversion(void) {
            extern unsigned int three(void);
            static int x = 2000;
            int negative_four = -4;
            int *ptr = &negative_four;
            double arr[3][2] = {
                {x, x / *ptr},
                {three()},
            };
            if (arr[0][0] != 2000.0 || arr[0][1] != -500.0 || arr[1][0] != 3.0) {
                return 0;
            }
            if (arr[1][1] || arr[2][0] || arr[2][1]) {
                return 0;
            }
            return 1;
        }
        unsigned int three(void) {
            return 3u;
        }
        long one = 1l;
        int test_preserve_stack(void) {
            int i = -1;
            int arr[3][1] = {{one * 2l}, {one + three()}};
            unsigned int u = 2684366905;
            if (i != -1) {
                return 0;
            }
            if (u != 2684366905) {
                return 0;
            }
            if (arr[0][0] != 2 || arr[1][0] != 4 || arr[2][0] != 0) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            if (!test_simple()) {
                return 1;
            }
            if (!test_partial()) {
                return 2;
            }
            if (!test_non_constant_and_type_conversion()) {
                return 3;
            }
            if (!test_preserve_stack()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Greater,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Greater,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        Greater,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Extern,
        Unsigned,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        Identifier,
        Comma,
        Identifier,
        Slash,
        Star,
        Identifier,
        CloseBrace,
        Comma,
        OpenBrace,
        Identifier,
        OpenParen,
        CloseParen,
        CloseBrace,
        Comma,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        DoubleConstant,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Uint),
        Semicolon,
        CloseBrace,
        Long,
        Identifier,
        Equal,
        IntConstant(IntKind::Long),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        Identifier,
        Star,
        IntConstant(IntKind::Long),
        CloseBrace,
        Comma,
        OpenBrace,
        Identifier,
        Plus,
        Identifier,
        OpenParen,
        CloseParen,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Unsigned,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_initialization_static() {
    let src = r#"
        double double_arr[3] = {1.0, 2.0, 3.0};
        int check_double_arr(double *arr) {
            if (arr[0] != 1.0) {
                return 1;
            }
            if (arr[1] != 2.0) {
                return 2;
            }
            if (arr[2] != 3.0) {
                return 3;
            }
            return 0;
        }
        unsigned uint_arr[5] = {
            1u,
            0u,
            2147497230u,
        };
        int check_uint_arr(unsigned *arr) {
            if (arr[0] != 1u) {
                return 4;
            }
            if (arr[1]) {
                return 5;
            }
            if (arr[2] != 2147497230u) {
                return 6;
            }
            if (arr[3] || arr[4]) {
                return 7;
            }
            return 0;
        }
        long long_arr[1000];
        int check_long_arr(long *arr) {
            for (int i = 0; i < 1000; i = i + 1) {
                if (arr[i]) {
                    return 8;
                }
            }
            return 0;
        }
        unsigned long ulong_arr[4] = {
            100.0, 11, 12345l, 4294967295U
        };
        int check_ulong_arr(unsigned long *arr) {
            if (arr[0] != 100ul) {
                return 9;
            }
            if (arr[1] != 11ul) {
                return 10;
            }
            if (arr[2] != 12345ul) {
                return 11;
            }
            if (arr[3] != 4294967295Ul) {
                return 12;
            }
            return 0;
        }
        int test_global(void) {
            int check = check_double_arr(double_arr);
            if (check) {
                return check;
            }
            check = check_uint_arr(uint_arr);
            if (check) {
                return check;
            }
            check = check_long_arr(long_arr);
            if (check) {
                return check;
            }
            check = check_ulong_arr(ulong_arr);
            if (check) {
                return check;
            }
            return 0;
        }
        int test_local(void) {
            double local_double_arr[3] = {1.0, 2.0, 3.0};
            static unsigned local_uint_arr[5] = {
                1u,
                0u,
                2147497230u,
            };
            static long local_long_arr[1000];
            static unsigned long local_ulong_arr[4] = {
                100.0, 11, 12345l, 4294967295U
            };
            int check = check_double_arr(local_double_arr);
            if (check) {
                return 100 + check;
            }
            check = check_uint_arr(local_uint_arr);
            if (check) {
                return 100 + check;
            }
            check = check_long_arr(local_long_arr);
            if (check) {
                return 100 + check;
            }
            check = check_ulong_arr(local_ulong_arr);
            if (check) {
                return 100 + check;
            }
            return 0;
        }
        int main(void) {
            int check = test_global();
            if (check) {
                return check;
            }
            return test_local();
        }
    "#;
    let expected = vec![
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Double,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Uint),
        Comma,
        IntConstant(IntKind::Uint),
        Comma,
        IntConstant(IntKind::Uint),
        Comma,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Long,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Long),
        Comma,
        IntConstant(IntKind::Uint),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Static,
        Unsigned,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Uint),
        Comma,
        IntConstant(IntKind::Uint),
        Comma,
        IntConstant(IntKind::Uint),
        Comma,
        CloseBrace,
        Semicolon,
        Static,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Static,
        Unsigned,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Long),
        Comma,
        IntConstant(IntKind::Uint),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_initialization_static_nested() {
    let src = r#"
        double double_arr[2][2] = {{1.1, 2.2}, {3.3, 4.4}};
        int check_double_arr(double (*arr)[2]) {
            if (arr[0][0] != 1.1) {
                return 1;
            }
            if (arr[0][1] != 2.2) {
                return 2;
            }
            if (arr[1][0] != 3.3) {
                return 3;
            }
            if (arr[1][1] != 4.4) {
                return 4;
            }
            return 0;
        }
        long long_arr[30][50][40];
        int check_long_arr(long (*arr)[50][40]) {
            for (int i = 0; i < 30; i = i + 1) {
                for (int j = 0; j < 50; j = j + 1) {
                    for (int k = 0; k < 40; k = k + 1) {
                        if (arr[i][j][k]) {
                            return 5;
                        }
                    }
                }
            }
            return 0;
        }
        unsigned long ulong_arr[4][6][2] = {
            {{
                 1000.3,
             },
             {12u}},
            {{2}}};
        int check_ulong_arr(unsigned long (*arr)[6][2]) {
            for (int i = 0; i < 4; i = i + 1) {
                for (int j = 0; j < 6; j = j + 1) {
                    for (int k = 0; k < 2; k = k + 1) {
                        int val = arr[i][j][k];
                        if (i == 0 && j == 0 && k == 0) {
                            if (val != 1000ul) {
                                return 6;
                            }
                        } else if (i == 0 && j == 1 && k == 0) {
                            if (val != 12ul) {
                                return 7;
                            }
                        } else if (i == 1 && j == 0 && k == 0) {
                            if (val != 2ul) {
                                return 8;
                            }
                        } else {
                            if (val) {
                                return 9;
                            }
                        }
                    }
                }
            }
            return 0;
        }
        int test_global(void) {
            int check = check_double_arr(double_arr);
            if (check) {
                return check;
            }
            check = check_long_arr(long_arr);
            if (check) {
                return check;
            }
            check = check_ulong_arr(ulong_arr);
            if (check) {
                return check;
            }
            return 0;
        }
        int test_local(void) {
            static double local_double_arr[2][2] = {{1.1, 2.2}, {3.3, 4.4}};
            int check = check_double_arr(local_double_arr);
            if (check) {
                return 100 + check;
            }
            static long local_long_arr[30][50][40];
            check = check_long_arr(local_long_arr);
            if (check) {
                return 100 + check;
            }
            static unsigned long local_ulong_arr[4][6][2] = {
                {{
                    1000.3,
                },
                {12u}},
                {{2}}};
            check = check_ulong_arr(local_ulong_arr);
            if (check) {
                return 100 + check;
            }
            return 0;
        }
        int main(void) {
            int check = test_global();
            if (check) {
                return check;
            }
            return test_local();
        }
    "#;
    let expected = vec![
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        Comma,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Double,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        OpenBrace,
        DoubleConstant,
        Comma,
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Uint),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        Comma,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        CloseBrace,
        Static,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        CloseBrace,
        Static,
        Unsigned,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        OpenBrace,
        DoubleConstant,
        Comma,
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Uint),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_initialization_trailing_comma_initializer() {
    let src = r#"
        int foo(int a, int b, int c);
        int main(void) {
            int arr[3] = {
                1,
                2,
                3,
            };
            return arr[2];
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_libraries_global_array() {
    let src = r#"
        long arr[4] = {1, 2, 3, 4};
        int double_each_element(void) {
            for (int i = 0; i < 4; i = i + 1) {
                arr[i] = arr[i] * 2;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Equal,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Star,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_libraries_global_array_client() {
    let src = r#"
        
        extern long arr[4];
        int double_each_element(void);
        int main(void) {
            for (int i = 0; i < 4; i = i + 1) {
                if (arr[i] != i + 1) {
                    return i + 1;
                }
            }
            double_each_element();
            for (int i = 0; i < 4; i = i + 1) {
                if (arr[i] != (i + 1) * 2) {
                    return i + 5;
                }
            }
            return 0;
        }
    "#;
    let expected = vec![
        Extern,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Star,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_libraries_return_pointer_to_array() {
    let src = r#"
        
        long (*return_row(long (*arr)[3][4], int idx))[4] {
            return arr[idx];
        }
    "#;
    let expected = vec![
        Long,
        OpenParen,
        Star,
        Identifier,
        OpenParen,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Int,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBrace,
        Return,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_libraries_return_pointer_to_array_client() {
    let src = r#"
        
        long (*return_row(long (*arr)[3][4], int idx))[4];
        int main(void) {
            long nested_array[2][3][4] = {
                {{0}},
                {{-12, -13, -14, -15}, {-16}}
            };
            long (*row_pointer)[4] = return_row(nested_array, 1);
            for (int i = 0; i < 3; i = i + 1) {
                for (int j = 0; j < 4; j = j + 1) {
                    if (row_pointer[i][j] != nested_array[1][i][j]) {
                        return 1;
                    }
                }
            }
            row_pointer[2][1] = 100;
            if (nested_array[1][2][1] != 100) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Long,
        OpenParen,
        Star,
        Identifier,
        OpenParen,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Int,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_libraries_set_array_val() {
    let src = r#"
        int set_nth_element(double *arr, int idx) {
            for (int i = 0; i < 5; i = i + 1) {
                if (arr[i]) {
                    return 1;
                }
            }
            arr[idx] = 8;
            return 0;
        }
        int set_nested_element(int (*arr)[2], int i, int j) {
            for (int x = 0; x < 3; x = x + 1) {
                for (int y = 0; y < 2; y = y + 1) {
                    int expected = -10 + 2*x + y;
                    if (arr[x][y] != expected) {
                        return 4;
                    }
                }
            }
            arr[i][j] = 10;
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Double,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Plus,
        IntConstant(IntKind::Int),
        Star,
        Identifier,
        Plus,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_libraries_set_array_val_client() {
    let src = r#"
        int set_nth_element(double *arr, int idx);
        int set_nested_element(int (*arr)[2], int i, int j);
        int main(void) {
            double arr[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
            int check = set_nth_element(arr, 4);
            if (check) {
                return check;
            }
            for (int i = 0; i < 4; i = i + 1) {
                if (arr[i] != 0) {
                    return 2;
                }
            }
            if (arr[4] != 8)
                return 3;
            int nested_arr[3][2] = {{-10, -9}, {-8, -7}, {-6, -5}};
            check = set_nested_element(nested_arr, 2, 1);
            if (check) {
                return check;
            }
            for (int i = 0; i < 3; i = i + 1) {
                for (int j = 0; j < 2; j = j + 1) {
                    if (i == 2 && j == 1) {
                        if (nested_arr[i][j] != 10) {
                            return 5;
                        }
                    } else {
                        int expected = -10 + 2 * i + j;
                        if (nested_arr[i][j] != expected) {
                            return 6;
                        }
                    }
                }
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Double,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Int,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Plus,
        IntConstant(IntKind::Int),
        Star,
        Identifier,
        Plus,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_pointer_arithmetic_add_dereference_and_assign() {
    let src = r#"
        int main(void) {
            int arr[2] = {1, 2};
            *arr = 3;
            *(arr + 1) = 4;
            if (arr[0] != 3) {
                return 1;
            }
            if (arr[1] != 4) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Star,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Star,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_pointer_arithmetic_compare() {
    let src = r#"
        unsigned long gt(unsigned long *a, unsigned long *b) {
            return a > b;
        }
        unsigned long lt(unsigned long *a, unsigned long *b) {
            return a < b;
        }
        unsigned long ge(unsigned long *a, unsigned long *b) {
            return a >= b;
        }
        unsigned long le(unsigned long *a, unsigned long *b) {
            return a <= b;
        }
        unsigned long gt_nested(unsigned long (*a)[5], unsigned long (*b)[5]) {
            return a > b;
        }
        unsigned long ge_nested(unsigned long (*a)[5], unsigned long (*b)[5]) {
            return a >= b;
        }
        int main(void)
        {
            unsigned long arr[5];
            unsigned long *elem_1 = arr + 1;
            unsigned long *elem_4 = arr + 4;
            if (gt(elem_1, elem_4)) {
                return 1;
            }
            if (!(lt(elem_1, elem_4))) {
                return 2;
            }
            if (!(ge(elem_1, elem_1))) {
                return 3;
            }
            if (le(elem_4, elem_1)) {
                return 4;
            }
            unsigned long *one_past_the_end = arr + 5;
            if (!(gt(one_past_the_end, elem_4))) {
                return 5;
            }
            if (one_past_the_end != elem_4 + 1) {
                return 6;
            }
            unsigned long nested_arr[4][5];
            unsigned long *elem_3_2 = *(nested_arr + 3) + 2;
            unsigned long *elem_3_3 = *(nested_arr + 3) + 3;
            if (lt(elem_3_3, elem_3_2)) {
                return 7;
            }
            if (!ge(elem_3_3, elem_3_2)) {
                return 8;
            }
            unsigned long (*subarray_0)[5] = nested_arr;
            unsigned long (*subarray_3)[5] = nested_arr + 3;
            unsigned long (*subarray_one_past_the_end)[5] = nested_arr + 4;
            if (ge_nested(subarray_0, subarray_3)){
                return 9;
            }
            if (!(gt_nested(subarray_one_past_the_end, subarray_3))) {
                return 10;
            }
            if (subarray_3 != subarray_one_past_the_end - 1) {
                return 11;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Unsigned,
        Long,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Greater,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Less,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        GreaterEqual,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        LessEqual,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Unsigned,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Greater,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Unsigned,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        GreaterEqual,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Long,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Long,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Bang,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Long,
        Star,
        Identifier,
        Equal,
        Star,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Long,
        Star,
        Identifier,
        Equal,
        Star,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Semicolon,
        Unsigned,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_pointer_arithmetic_pointer_add() {
    let src = r#"
        int test_add_constant_to_pointer(void) {
            long long_arr[12] = {0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 13};
            long *ptr = long_arr + 10;
            return *ptr == 13;
        }
        int test_add_negative_index(void) {
            unsigned unsigned_arr[12] = {0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 42};
            unsigned *end_ptr = unsigned_arr + 12;
            unsigned *ptr = end_ptr + -10;
            return *ptr == 2;
        }
        int test_add_pointer_to_int(void) {
            int int_arr[5] = {0, 98, 99};
            int *ptr1 = int_arr + 2;
            int *ptr2 = 2 + int_arr;
            return (ptr1 == ptr2 && *ptr2 == 99);
        }
        int test_add_different_index_types(void) {
            double double_arr[11] = {0, 0, 0, 0, 0, 6.0};
            double *ptr1 = double_arr + 5;
            double *ptr2 = double_arr + 5l;
            double *ptr3 = double_arr + 5u;
            double *ptr4 = double_arr + 5ul;
            return (ptr1 == ptr2 && ptr1 == ptr3 && ptr1 == ptr4 && *ptr4 == 6.0);
        }
        int test_add_complex_expressions(void) {
            static int flag;
            int i = -2;
            int *small_int_ptr = &i;
            extern int return_one(void);
            extern int *get_elem1_ptr(int *arr);
            extern int *get_elem2_ptr(int *arr);
            static int arr[4] = {1, 2, 3, 4};
            int *ptr = return_one() + (*small_int_ptr) +
                       (flag ? get_elem1_ptr(arr) : get_elem2_ptr(arr));
            return (ptr == arr + 1 && *ptr == 2);
        }
        int return_one(void) {
            return 1;
        }
        int *get_elem1_ptr(int *arr) {
            return arr + 1;
        }
        int *get_elem2_ptr(int *arr) {
            return arr + 2;
        }
        int test_add_multi_dimensional(void) {
            static int index = 2;
            int nested_arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
            int(*row_pointer)[3] = nested_arr + index;
            return **row_pointer == 7;
        }
        int test_add_to_subarray_pointer(void) {
            static int index = 2;
            int nested_arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
            int *row1 = *(nested_arr + 1);
            int *elem_ptr = row1 + index;
            return *elem_ptr == 6;
        }
        int test_subtract_from_pointer(void) {
            long long_arr[5] = {10, 9, 8, 7, 6};
            long *one_past_the_end = long_arr + 5;
            static int index = 3;
            long *subtraction_result = one_past_the_end - index;
            return *subtraction_result == 8;
        }
        int test_subtract_negative_index(void) {
            unsigned arr[5] = {100, 101, 102, 103, 104};
            unsigned *ptr = arr - (-3);
            return *ptr == 103;
        }
        int test_subtract_different_index_types(void) {
            double double_arr[11] = {0, 0, 0, 0, 0, 0, 6.0};
            double *end_ptr = double_arr + 11;
            double *ptr1 = end_ptr - 5;
            double *ptr2 = end_ptr - 5l;
            double *ptr3 = end_ptr - 5u;
            double *ptr4 = end_ptr - 5ul;
            return (ptr1 == ptr2 && ptr1 == ptr3 && ptr1 == ptr4 && *ptr4 == 6.0);
        }
        int test_subtract_complex_expressions(void) {
            static int flag = 1;
            static int four = 4;
            static int arr[4] = {1, 2, 3, 4};
            int *ptr = (flag ? get_elem1_ptr(arr) : get_elem2_ptr(arr)) - (four / -2);
            return (*ptr == 4);
        }
        int test_subtract_multi_dimensional(void) {
            static int index = 1;
            int nested_arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
            int(*last_row_pointer)[3] = nested_arr + 2;
            int(*row_pointer)[3] = last_row_pointer - index;
            return (**row_pointer == 4);
        }
        int main(void) {
            if (!test_add_constant_to_pointer()) {
                return 1;
            }
            if (!test_add_negative_index()) {
                return 2;
            }
            if (!test_add_pointer_to_int()) {
                return 3;
            }
            if (!test_add_different_index_types()) {
                return 4;
            }
            if (!test_add_complex_expressions()) {
                return 5;
            }
            if (!test_add_multi_dimensional()) {
                return 6;
            }
            if (!test_add_to_subarray_pointer()) {
                return 7;
            }
            if (!test_subtract_from_pointer()) {
                return 8;
            }
            if (!test_subtract_negative_index()) {
                return 9;
            }
            if (!test_subtract_different_index_types()) {
                return 10;
            }
            if (!test_subtract_complex_expressions()) {
                return 11;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Long,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Star,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Unsigned,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Star,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        Identifier,
        AmpersandAmpersand,
        Star,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Double,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Double,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Long),
        Semicolon,
        Double,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Uint),
        Semicolon,
        Double,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::ULong),
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        Identifier,
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        Identifier,
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        Identifier,
        AmpersandAmpersand,
        Star,
        Identifier,
        EqualEqual,
        DoubleConstant,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        Extern,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Extern,
        Int,
        Star,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Extern,
        Int,
        Star,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Static,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Plus,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        Plus,
        OpenParen,
        Identifier,
        Question,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Colon,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Star,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Star,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Star,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Plus,
        Identifier,
        Semicolon,
        Return,
        Star,
        Star,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        Star,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        Identifier,
        Semicolon,
        Return,
        Star,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Long,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Long,
        Star,
        Identifier,
        Equal,
        Identifier,
        Minus,
        Identifier,
        Semicolon,
        Return,
        Star,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Unsigned,
        Star,
        Identifier,
        Equal,
        Identifier,
        Minus,
        OpenParen,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        Star,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Double,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Double,
        Star,
        Identifier,
        Equal,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Double,
        Star,
        Identifier,
        Equal,
        Identifier,
        Minus,
        IntConstant(IntKind::Long),
        Semicolon,
        Double,
        Star,
        Identifier,
        Equal,
        Identifier,
        Minus,
        IntConstant(IntKind::Uint),
        Semicolon,
        Double,
        Star,
        Identifier,
        Equal,
        Identifier,
        Minus,
        IntConstant(IntKind::ULong),
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        Identifier,
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        Identifier,
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        Identifier,
        AmpersandAmpersand,
        Star,
        Identifier,
        EqualEqual,
        DoubleConstant,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Static,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Identifier,
        Question,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Colon,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        CloseParen,
        Minus,
        OpenParen,
        Identifier,
        Slash,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Return,
        OpenParen,
        Star,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Minus,
        Identifier,
        Semicolon,
        Return,
        OpenParen,
        Star,
        Star,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_pointer_arithmetic_pointer_diff() {
    let src = r#"
        int get_ptr_diff(int *ptr1, int *ptr2) {
            return (ptr2 - ptr1);
        }
        int get_long_ptr_diff(long *ptr1, long *ptr2) {
            return (ptr2 - ptr1);
        }
        int get_multidim_ptr_diff(double (*ptr1)[3][5], double (*ptr2)[3][5]) {
            return (ptr2 - ptr1);
        }
        int get_multidim_ptr_diff_2(double (*ptr1)[5], double (*ptr2)[5]) {
            return (ptr2 - ptr1);
        }
        int main(void) {
            int arr[5] = {5, 4, 3, 2, 1};
            int *end_of_array = arr + 5;
            if (get_ptr_diff(arr, end_of_array) != 5) {
                return 1;
            }
            long long_arr[8];
            if (get_long_ptr_diff(long_arr + 3, long_arr) != -3) {
                return 2;
            }
            static double multidim[6][7][3][5];
            if (get_multidim_ptr_diff(multidim[2] + 1, multidim[2] + 4) != 3) {
                return 3;
            }
            if (get_multidim_ptr_diff_2(multidim[2][2] + 2, multidim[2][2]) != -2) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        Comma,
        Int,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Long,
        Star,
        Identifier,
        Comma,
        Long,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Double,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Double,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Double,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Double,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        Minus,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Static,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Plus,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Plus,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_subscripting_addition_subscript_equivalence() {
    let src = r#"
        int main(void)
        {
            unsigned long x[300][5];
            for (int i = 0; i < 300; i = i + 1) {
                for (int j = 0; j < 5; j = j + 1) {
                    x[i][j] = i * 5 + j;
                }
            }
            if (*(*(x + 20) + 3) != x[20][3]) {
                return 1;
            }
            if (&(*(*(x + 290) + 3)) != &x[290][3]) {
                return 2;
            }
            for (int i = 0; i < 300; i = i + 1) {
                for (int j = 0; j < 5; j = j + 1) {
                    if (*(*(x + i) + j) != x[i][j]) {
                        return 3;
                    }
                }
            }
            *(*(x + 275) + 4) = 22000ul;
            if (x[275][4] != 22000ul) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        Equal,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        CloseBrace,
        CloseBrace,
        If,
        OpenParen,
        Star,
        OpenParen,
        Star,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Ampersand,
        OpenParen,
        Star,
        OpenParen,
        Star,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        CloseParen,
        BangEqual,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Star,
        OpenParen,
        Star,
        OpenParen,
        Identifier,
        Plus,
        Identifier,
        CloseParen,
        Plus,
        Identifier,
        CloseParen,
        BangEqual,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Star,
        OpenParen,
        Star,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        Equal,
        IntConstant(IntKind::ULong),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_subscripting_array_of_pointers_to_arrays() {
    let src = r#"
        int main(void) {
            int x = 0;
            int y = 1;
            int z = 2;
            int *arr[3] = { &x, &y, &z };
            int *arr2[3] = {&z, &y, &x};
            int *(*array_of_pointers[3])[3] = {&arr, &arr2, &arr};
            if (array_of_pointers[0] != (int *(*)[3]) arr) {
                return 1;
            }
            if (array_of_pointers[1] != (int *(*)[3]) arr2) {
                return 2;
            }
            if (array_of_pointers[2] != (int *(*)[3]) arr) {
                return 3;
            }
            if (array_of_pointers[1][0][0] != &z) {
                return 4;
            }
            if (array_of_pointers[1][0][1] != &y) {
                return 5;
            }
            if (array_of_pointers[2][0][2][0] != 2) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Star,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        CloseBrace,
        Semicolon,
        Int,
        Star,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        CloseBrace,
        Semicolon,
        Int,
        Star,
        OpenParen,
        Star,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        Comma,
        Ampersand,
        Identifier,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        OpenParen,
        Int,
        Star,
        OpenParen,
        Star,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        OpenParen,
        Int,
        Star,
        OpenParen,
        Star,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        OpenParen,
        Int,
        Star,
        OpenParen,
        Star,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Ampersand,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_subscripting_complex_operands() {
    let src = r#"
        int assign_in_index(int idx) {
            int arr[3] = {1, 2, 3};
            int val = arr[idx = idx + 2];
            if (idx != 1) {
                return 1;
            }
            if (val != 2) {
                return 2;
            }
            return 0;
        }
        int static_index(void) {
            static int index = 0;
            int retval = index;
            index = index + 1;
            return retval;
        }
        int funcall_in_index(void) {
            int arr[3] = {1, 2, 3};
            int v1 = arr[static_index()];
            int v2 = arr[static_index()];
            if (v1 != 1) {
                return 3;
            }
            if (v2 != 2) {
                return 4;
            }
            return 0;
        }
        int subscript_inception(long *arr, int *a, int b){
            return arr[a[b]];
        }
        int check_subscript_inception(void) {
            long arr[4] = {4, 3, 2, 1};
            int indices[2] = {1, 2};
            if (subscript_inception(arr, indices, 1) != 2) {
                return 5;
            }
            if (subscript_inception(arr, indices, 0) != 3) {
                return 6;
            }
            return 0;
        }
        int *get_array(void) {
            static int arr[3];
            return arr;
        }
        int subscript_function_result(void){
            get_array()[2] = 1;
            if (get_array()[2] != 1) {
                return 7;
            }
            return 0;
        }
        int negate_subscript(int *arr, int idx, int expected) {
            if (arr[-idx] != expected) {
                return 8;
            }
            return 0;
        }
        int main(void) {
            int check = assign_in_index(-1);
            if (check) {
                return check;
            }
            check = funcall_in_index();
            if (check) {
                return check;
            }
            check = check_subscript_inception();
            if (check) {
                return check;
            }
            check = subscript_function_result();
            if (check) {
                return check;
            }
            int arr[3] = {0, 1, 2};
            check = negate_subscript(arr + 2, 2, 0);
            if (check) {
                return check;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        Identifier,
        OpenParen,
        CloseParen,
        CloseBracket,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        Identifier,
        OpenParen,
        CloseParen,
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Long,
        Star,
        Identifier,
        Comma,
        Int,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        OpenBracket,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseBracket,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Long,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Star,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Minus,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_subscripting_simple() {
    let src = r#"
        int main(void) {
            int arr[3] = {1, 2, 3};
            return arr[2];
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Return,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_subscripting_simple_subscripts() {
    let src = r#"
        int integer_types(unsigned *arr, unsigned expected) {
            unsigned val1 = arr[5];
            unsigned val2 = arr[5u];
            unsigned val3 = arr[5l];
            unsigned val4 = arr[5ul];
            if (val1 != expected) {
                return 1;
            }
            if (val2 != expected) {
                return 2;
            }
            if (val3 != expected) {
                return 3;
            }
            if (val4 != expected) {
                return 4;
            }
            return 0;
        }
        int reverse_subscript(long *arr, long expected) {
            if (arr[3] != expected) {
                return 5;
            }
            if (3[arr] != expected) {
                return 6;
            }
            if (&3[arr] != &arr[3]) {
                return 7;
            }
            return 0;
        }
        static double static_array[3] = {0.1, 0.2, 0.3};
        int subscript_static(void) {
            if (static_array[0] != 0.1) {
                return 8;
            }
            if (static_array[1] != 0.2) {
                return 9;
            }
            if (static_array[2] != 0.3) {
                return 10;
            }
            return 0;
        }
        int update_element(int *arr, int expected) {
            arr[10] = arr[10] * 2;
            if (arr[10] != expected) {
                return 11;
            }
            return 0;
        }
        int *increment_static_element(void) {
            static int arr[4];
            arr[3] = arr[3] + 1;
            return arr;
        }
        int check_increment_static_element(void) {
            int *arr1 = increment_static_element();
            if (arr1[3] != 1) {
                return 12;
            }
            if (arr1[0] || arr1[1] || arr1[2]) {
                return 13;
            }
            int *arr2 = increment_static_element();
            if (arr1 != arr2) {
                return 14;
            }
            if (arr1[3] != 2) {
                return 15;
            }
            return 0;
        }
        int main(void) {
            unsigned int unsigned_arr[6] = {0, 0, 0, 0, 0, 7u};
            int check = integer_types(unsigned_arr, 7u);
            if (check) {
                return check;
            }
            long int long_arr[4] = {100, 102, 104, 106};
            check = reverse_subscript(long_arr, 106);
            if (check) {
                return check;
            }
            check = subscript_static();
            if (check) {
                return check;
            }
            int int_arr[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15};
            check = update_element(int_arr, 30);
            if (check) {
                return check;
            }
            check = check_increment_static_element();
            if (check) {
                return check;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Star,
        Identifier,
        Comma,
        Unsigned,
        Identifier,
        CloseParen,
        OpenBrace,
        Unsigned,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Unsigned,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Uint),
        CloseBracket,
        Semicolon,
        Unsigned,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Long),
        CloseBracket,
        Semicolon,
        Unsigned,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::ULong),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Long,
        Star,
        Identifier,
        Comma,
        Long,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        IntConstant(IntKind::Int),
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Ampersand,
        IntConstant(IntKind::Int),
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Static,
        Double,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        DoubleConstant,
        Comma,
        DoubleConstant,
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Star,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Star,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Uint),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Uint),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Long,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_subscripting_subscript_nested() {
    let src = r#"
        int read_nested(int nested_arr[2][3], int i, int j, int expected) {
            return (nested_arr[i][j] == expected);
        }
        int write_nested(int nested_arr[2][3], int i, int j, int new_val) {
            nested_arr[i][j] = new_val;
            return 0;
        }
        int read_nested_negated(int (*nested_arr)[3], int i, int j, int expected) {
            return (nested_arr[-i][j] == expected);
        }
        int get_nested_addr(int nested_arr[2][3], int i, int j, int *expected) {
            return &nested_arr[i][j] == expected;
        }
        static int nested_arr[4][3][5] = {
            {{1, 2}, {3}},
            {{4}, {5}}
        };
        int read_static_nested(int i, int j, int k, int expected) {
            return nested_arr[i][j][k] == expected;
        }
        int (*get_array(void))[3][5] {
            return nested_arr;
        }
        int write_nested_complex(int i, int j, int k, int val) {
            get_array()[i][j][k] = val;
            return 0;
        }
        int *get_subarray(int nested[2][3], int i) {
            return nested[i];
        }
        int main(void) {
            int nested_arr[2][3] = {{1, 2, 3}, {4, 5, 6}};
            if (!read_nested(nested_arr, 1, 2, 6)) {
                return 1;
            }
            write_nested(nested_arr, 1, 2, -1);
            if (nested_arr[1][2] != -1) {
                return 2;
            }
            if (!read_nested_negated(nested_arr + 2, 2, 0, 1)) {
                return 3;
            }
            int *ptr = (nested_arr[0]) + 1;
            if (!get_nested_addr(nested_arr, 0, 1, ptr)) {
                return 4;
            }
            if (!read_static_nested(1, 1, 0, 5)) {
                return 5;
            }
            write_nested_complex(0, 2, 3, 111);
            if (get_array()[0][2][3] != 111) {
                return 6;
            }
            int *row_1 = get_subarray(nested_arr, 1);
            if (row_1 + 1 != &nested_arr[1][1]) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        EqualEqual,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        Equal,
        Identifier,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        Minus,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        EqualEqual,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Ampersand,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        EqualEqual,
        Identifier,
        Semicolon,
        CloseBrace,
        Static,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        EqualEqual,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        OpenParen,
        Star,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        OpenParen,
        CloseParen,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        Equal,
        Identifier,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Star,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Star,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        BangEqual,
        Ampersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_subscripting_subscript_pointer() {
    let src = r#"
        int subscript_pointer_to_pointer(int **x) {
            return x[0][0];
        }
        int main(void) {
            int a = 3;
            int *ptr = &a;
            if (ptr[0] != 3) {
                return 1;
            }
            int **ptr_ptr = &ptr;
            if (ptr_ptr[0][0] != 3) {
                return 2;
            }
            int dereferenced = subscript_pointer_to_pointer(ptr_ptr);
            if (dereferenced != 3) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Int,
        Star,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Star,
        Star,
        Identifier,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_subscripting_subscript_precedence() {
    let src = r#"
        int main(void) {
            int arr[3] = {1, 2, 3};
            return (-arr[2] == -3);
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Return,
        OpenParen,
        Minus,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}
