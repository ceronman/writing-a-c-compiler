use crate::lexer::TokenKind::*;
use crate::lexer::{IntKind, tokenize};

#[test]
#[should_panic]
fn test_invalid_lex_char_bad_escape_sequence() {
    tokenize(
        r#"
        int main(void)
        {
            return '\y';
        }
    "#,
    );
}

#[test]
#[should_panic]
fn test_invalid_lex_newline() {
    tokenize(
        r#"
        char *s = "hello
            world ";
            int
            main(void)
        {
            return 0;
        }
    "#,
    );
}

#[test]
#[should_panic]
fn test_invalid_lex_string_bad_escape_sequence() {
    tokenize(
        r#"
        int main(void)
        {
            char *str = "foo\ybar";
            return 0;
        }
    "#,
    );
}

#[test]
#[should_panic]
fn test_invalid_lex_unescaped_backslash() {
    tokenize(
        r#"
        int main(void)
        {
            return '\';
        }
    "#,
    );
}

#[test]
#[should_panic]
fn test_invalid_lex_unescaped_double_quote() {
    tokenize(
        r#"
        int main(void)
        {
            char *ptr = "foo"bar";
                return 0;
        }
    "#,
    );
}

#[test]
#[should_panic]
fn test_invalid_lex_unescaped_single_quote() {
    tokenize(
        r#"
        int main(void)
        {
            return ''';
        }
    "#,
    );
}

#[test]
#[should_panic]
fn test_invalid_lex_unterminated_char_constant() {
    tokenize(
        r#"
        int main(void)
        {
            return 'x
        }
    "#,
    );
}

#[test]
#[should_panic]
fn test_invalid_lex_unterminated_string() {
    tokenize(
        r#"
        int main(void) {
            char *ptr = "foo\";
            return 0;
        }
    "#,
    );
}

#[test]
fn test_valid_char_constants_char_constant_operations() {
    let src = r#"
        double d = '\\';
        int main(void) {
            if (d != 92.0) {
                return 1;
            }
            unsigned long array['\n'] = {1, 2, 'a', '\b', 3, 4, 5, '!', '%', '~'};
            if (array[2] != 97) {
                return 2;
            }
            if (array[3] != 8) {
                return 3;
            }
            if (array[7] != 33) {
                return 4;
            }
            if (array[8] != 37) {
                return 5;
            }
            if (array[9] != 126) {
                return 6;
            }
            unsigned long (*array_ptr)[10] = &array;
            if (array_ptr[0][9] != '~') {
                return 7;
            }
            int i = array['\a'];
            if (i != 33) {
                return 8;
            }
            double d = 10 % '\a' + 4.0 * '_' - ~'@';
            if (d != 448.0) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Double,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenBracket,
        CharLiteral,
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        CharLiteral,
        Comma,
        CharLiteral,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        CharLiteral,
        Comma,
        CharLiteral,
        Comma,
        CharLiteral,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        CharLiteral,
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Double,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Percent,
        CharLiteral,
        Plus,
        DoubleConstant,
        Star,
        CharLiteral,
        Minus,
        Tilde,
        CharLiteral,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_char_constants_control_characters() {
    let src = r#"
        int main(void)
        {
            int tab = '	';
            int vertical_tab = '';
            int form_feed = '';
            if (tab != '\t') {
                return 1;
            }
            if (vertical_tab != '\v') {
                return 2;
            }
            if (form_feed != '\f') {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Int,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        Int,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_char_constants_escape_sequences() {
    let src = r#"
        
        int main(void) {
            if ('\?' != 63) {
                return 1;
            }
            if ('\"' != 34) {
                return 2;
            }
            if ('\'' != 39) {
                return 3;
            }
            if ('\\' != 92) {
                return 4;
            }
            if ('\a' != 7) {
                return 5;
            }
            if ('\b' != 8) {
                return 6;
            }
            if ('\f' != 12) {
                return 7;
            }
            if ('\n' != 10) {
                return 8;
            }
            if ('\r' != 13) {
                return 9;
            }
            if ('\t' != 9) {
                return 10;
            }
            if ('\v' != 11) {
                return 11;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        CharLiteral,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        CharLiteral,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        CharLiteral,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        CharLiteral,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        CharLiteral,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        CharLiteral,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        CharLiteral,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        CharLiteral,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        CharLiteral,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        CharLiteral,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        CharLiteral,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_char_constants_return_char_constant() {
    let src = r#"
        
        int main(void) {
            return 'c';
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        CharLiteral,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_access_through_char_pointer() {
    let src = r#"
        int main(void) {
            int x = 100;
            char *byte_ptr = (char *) &x;
            if (byte_ptr[0] != 100) {
                return 1;
            }
            if (byte_ptr[1] || byte_ptr[2] || byte_ptr[3]) {
                return 2;
            }
            double d = -0.0;
            byte_ptr = (char *) &d;
            if (byte_ptr[7] != -128) {
                return 3;
            }
            for (int i = 0; i < 7; i = i + 1) {
                if (byte_ptr[i]) {
                    return 4;
                }
            }
            unsigned int array[3][2][1] = {
                {{-1}, {-1}},
                {{-1}, {-1}},
                {{4294901760u}}
            };
            byte_ptr = (char *) array;
            byte_ptr = byte_ptr + 16;
            if (byte_ptr[0] || byte_ptr[1]) {
                return 5;
            }
            if (byte_ptr[2] != -1) {
                return 6;
            }
            if (byte_ptr[3] != -1) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Double,
        Identifier,
        Equal,
        Minus,
        DoubleConstant,
        Semicolon,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Ampersand,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Unsigned,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Comma,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        CloseBrace,
        Comma,
        OpenBrace,
        OpenBrace,
        IntConstant(IntKind::Uint),
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_chained_casts() {
    let src = r#"
        unsigned int ui = 4294967200u;
        int main(void) {
            ui = (unsigned int)(unsigned char)ui;
            if (ui != 160) {
                return 1;
            }
            int i = (int)(signed char)ui;
            if (i != -96) {
                return 2;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Unsigned,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Uint),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Int,
        CloseParen,
        OpenParen,
        Unsigned,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        Equal,
        OpenParen,
        Int,
        CloseParen,
        OpenParen,
        Signed,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_char_arguments() {
    let src = r#"
        
        int check_args(char a, signed char b, char c, unsigned char d, char e, char f, signed char g, char h) {
            char expected_a = 5;
            signed char expected_b = -12;
            char expected_c = 117;
            unsigned char expected_d = 254;
            char expected_e = 1;
            char expected_f = -20;
            signed char expected_g = 60;
            char expected_h = 100;
            if (expected_a != a) {
             return 1;
            }
            if (expected_b != b) {
             return 2;
            }
            if (expected_c != c) {
             return 3;
            }
            if (expected_d != d) {
             return 4;
            }
            if (expected_e != e) {
             return 5;
            }
            if (expected_f != f) {
             return 6;
            }
            if (expected_g != g) {
             return 7;
            }
            if (expected_h != h) {
             return 8;
            }
            return 0;
        }
        int main(void) {
            char a = 5;
            signed char b = -12;
            char c = 117;
            unsigned char d = 254;
            char e = 1;
            char f = -20;
            signed char g = 60;
            char h = 100;
            return check_args(a, b, c, d, e, f, g, h);
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        Comma,
        Signed,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        Comma,
        Signed,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_char_expressions() {
    let src = r#"
        int add_chars(char c1, char c2) {
            return c1 + c2;
        }
        int divide_chars(unsigned char c1, unsigned char c2) {
            return c1 / c2;
        }
        int le(char c1, char c2) {
            return c1 <= c2;
        }
        int subscript_char(int *ptr, char idx){
            return ptr[idx];
        }
        int *sub_char_from_pointer(int *ptr, signed char idx) {
            return ptr - idx;
        }
        int and_char(signed char c1, int i) {
            return c1 && i;
        }
        int or_char(signed char c1, unsigned char c2) {
            return c1 || c2;
        }
        int test_for_loop_char(void) {
            int counter = 0;
            for (signed char s = 127; s > 0; s = s - 1) {
                counter = counter + 1;
            }
            return (counter == 127);
        }
        int main(void) {
            char c1 = 8;
            char c2 = 4;
            if (add_chars(c1, c2) != 12) {
                return 1;
            }
            unsigned char uc1 = 250;
            unsigned char uc2 = 25;
            if (divide_chars(uc1, uc2) != 10) {
                return 2;
            }
            if (le(c1, c2)) {
                return 3;
            }
            if (!le(c2, c2)) {
                return 4;
            }
            int arr[4] = {11, 12, 13, 14};
            char idx = 2;
            if (subscript_char(arr, idx) != 13) {
                return 5;
            }
            signed char offset = 1;
            if (sub_char_from_pointer(arr + 1, offset) != arr) {
                return 6;
            }
            signed char zero = 0;
            if (zero) {
                return 7;
            }
            if (and_char(zero, 12)) {
                return 8;
            }
            uc2 = 0;
            if (or_char(zero, uc2)) {
                return 9;
            }
            if (!test_for_loop_char()) {
                return 10;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Plus,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Slash,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        LessEqual,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        Comma,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        CloseBrace,
        Int,
        Star,
        Identifier,
        OpenParen,
        Int,
        Star,
        Identifier,
        Comma,
        Signed,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Minus,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        AmpersandAmpersand,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        PipePipe,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        For,
        OpenParen,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Greater,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        CloseParen,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_common_type() {
    let src = r#"
        long ternary(int flag, char c) {
            return flag ? c : 1u;
        }
        int char_lt_int(char c, int i) {
            return c < i;
        }
        int uchar_gt_long(unsigned char uc, long l) {
            return uc > l;
        }
        int char_lt_uchar(char c, unsigned char u) {
            return c < u;
        }
        int signed_char_le_char(signed char s, char c) {
            return s <= c;
        }
        char ten = 10;
        int multiply(void) {
            char i = 10.75 * ten;
            return i == 107;
        }
        int main(void) {
            if (ternary(1, -10) != 4294967286l) {
                return 1;
            }
            if (!char_lt_int((char)1, 256)) {
                return 2;
            }
            if (!uchar_gt_long((unsigned char)100, -2)) {
                return 3;
            }
            char c = -1;
            unsigned char u = 2;
            if (!char_lt_uchar(c, u)) {
                return 4;
            }
            signed char s = -1;
            if (!signed_char_le_char(s, c)) {
                return 5;
            }
            if (!multiply()) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Long,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Question,
        Identifier,
        Colon,
        IntConstant(IntKind::Uint),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Less,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        Comma,
        Long,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Greater,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Less,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        LessEqual,
        Identifier,
        Semicolon,
        CloseBrace,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        Equal,
        DoubleConstant,
        Star,
        Identifier,
        Semicolon,
        Return,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Long),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        OpenParen,
        Char,
        CloseParen,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        OpenParen,
        Unsigned,
        Char,
        CloseParen,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_convert_by_assignment() {
    let src = r#"
        int check_int(int converted, int expected) {
            return (converted == expected);
        }
        int check_uint(unsigned int converted, unsigned int expected) {
            return (converted == expected);
        }
        int check_long(long converted, long expected) {
            return (converted == expected);
        }
        int check_ulong(unsigned long converted, unsigned long expected) {
            return (converted == expected);
        }
        int check_double(double converted, double expected) {
            return (converted == expected);
        }
        int check_char(char converted, char expected) {
            return (converted == expected);
        }
        int check_uchar(unsigned char converted, unsigned char expected) {
            return (converted == expected);
        }
        int check_char_on_stack(signed char expected, int dummy1, int dummy2,
                                int dummy3, int dummy4, int dummy5, int dummy6,
                                signed char converted) {
            return converted == expected;
        }
        int return_extended_uchar(unsigned char c) {
            return c;
        }
        unsigned long return_extended_schar(signed char sc) {
            return sc;
        }
        unsigned char return_truncated_long(long l) {
            return l;
        }
        int main(void) {
            signed char sc = -10;
            if (!check_long(sc, -10l)) {
                return 1;
            }
            if (!check_uint(sc, 4294967286u)) {
                return 2;
            }
            if (!check_double(sc, -10.0)) {
                return 3;
            }
            unsigned char uc = 246;
            if (!check_uchar(sc, uc)) {
                return 4;
            }
            char c = -10;
            if (!check_char(-10, c)) {
                return 5;
            }
            if (!check_char(4294967286u, c)) {
                return 6;
            }
            if (!check_char(-10.0, c)) {
                return 7;
            }
            if (!check_char_on_stack(c, 0, 0, 0, 0, 0, 0, -10.0)) {
                return 8;
            }
            if (!check_int(uc, 246)) {
                return 9;
            }
            if (!check_ulong(uc, 246ul)) {
                return 10;
            }
            char expected_char = -10;
            if (!check_char(uc, expected_char)) {
                return 11;
            }
            if (!check_uchar(18446744073709551606ul, uc)) {
                return 12;
            }
            if (return_extended_uchar(uc) != 246) {
                return 13;
            }
            if (return_extended_schar(sc) != 18446744073709551606ul) {
                return 14;
            }
            if (return_truncated_long(5369233654l) != uc) {
                return 15;
            }
            char array[3] = {0, 0, 0};
            array[1] = 128;
            if (array[0] || array[2] || array[1] != -128) {
                return 16;
            }
            array[1] = 9224497936761618562ul;
            if (array[0] || array[2] || array[1] != -126) {
                return 17;
            }
            array[1] = -2.6;
            if (array[0] || array[2] || array[1] != -2) {
                return 18;
            }
            unsigned char uchar_array[3] = {0, 0, 0};
            uchar_array[1] = 17592186044416l;
            if (uchar_array[0] || uchar_array[2] || uchar_array[1] != 0) {
                return 19;
            }
            uchar_array[1] = 2147483898u;
            if (uchar_array[0] || uchar_array[2] || uchar_array[1] != 250) {
                return 20;
            }
            unsigned int ui = 4294967295U;
            static unsigned char
                uc_static;
            ui = uc_static;
            if (ui) {
                return 21;
            }
            signed long l = -1;
            static signed s_static =
                0;
            l = s_static;
            if (l) {
                return 22;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Int,
        Identifier,
        Comma,
        Unsigned,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Long,
        Identifier,
        Comma,
        Long,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        Comma,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Double,
        Identifier,
        Comma,
        Double,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Signed,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        EqualEqual,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        OpenParen,
        Long,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Signed,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Minus,
        IntConstant(IntKind::Long),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Uint),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Minus,
        DoubleConstant,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Uint),
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Minus,
        DoubleConstant,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        DoubleConstant,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        IntConstant(IntKind::ULong),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        IntConstant(IntKind::ULong),
        Comma,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Long),
        CloseParen,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::ULong),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Minus,
        DoubleConstant,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Long),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        IntConstant(IntKind::Uint),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Uint),
        Semicolon,
        Static,
        Unsigned,
        Char,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Signed,
        Long,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Static,
        Signed,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_explicit_casts() {
    let src = r#"
        unsigned char char_to_uchar(char c) {
            return (unsigned char)c;
        }
        signed char char_to_schar(char c) {
            return (signed char)c;
        }
        char uchar_to_char(unsigned char u) {
            return (char)u;
        }
        char schar_to_char(signed char u) {
            return (char)u;
        }
        signed char uchar_to_schar(unsigned char u) {
            return (signed char)u;
        }
        unsigned char schar_to_uchar(signed char u) {
            return (unsigned char)u;
        }
        int char_to_int(char c) {
            return (int)c;
        }
        unsigned int char_to_uint(char c) {
            return (unsigned int)c;
        }
        long char_to_long(char c) {
            return (long)c;
        }
        unsigned long char_to_ulong(char c) {
            return (unsigned long)c;
        }
        double char_to_double(char c) {
            return (double)c;
        }
        int schar_to_int(signed char s) {
            return (int)s;
        }
        unsigned int schar_to_uint(signed char s) {
            return (unsigned int)s;
        }
        long schar_to_long(signed char s) {
            return (long)s;
        }
        unsigned long schar_to_ulong(signed char s) {
            return (unsigned long)s;
        }
        double schar_to_double(signed char s) {
            return (double)s;
        }
        int uchar_to_int(unsigned char u) {
            return (int)u;
        }
        unsigned int uchar_to_uint(unsigned char u) {
            return (unsigned int)u;
        }
        long uchar_to_long(unsigned char u) {
            return (long)u;
        }
        unsigned long uchar_to_ulong(unsigned char u) {
            return (unsigned long)u;
        }
        double uchar_to_double(unsigned char u) {
            return (double)u;
        }
        char int_to_char(int i) {
            return (char)i;
        }
        char uint_to_char(unsigned int u) {
            return (char)u;
        }
        char double_to_char(double d) {
            return (char)d;
        }
        signed char long_to_schar(long l) {
            return (signed char)l;
        }
        signed char ulong_to_schar(unsigned long l) {
            return (signed char)l;
        }
        unsigned char int_to_uchar(int i) {
            return (unsigned char)i;
        }
        unsigned char uint_to_uchar(unsigned int ui) {
            return (unsigned char)ui;
        }
        unsigned char long_to_uchar(long l) {
            return (unsigned char)l;
        }
        unsigned char ulong_to_uchar(unsigned long ul) {
            return (unsigned char)ul;
        }
        unsigned char double_to_uchar(double d) {
            return (unsigned char)d;
        }
        int main(void) {
            char c = 127;
            if (char_to_uchar(c) != 127) {
                return 1;
            }
            if (char_to_int(c) != 127) {
                return 2;
            }
            if (char_to_ulong(c) != 127) {
                return 3;
            }
            signed char sc = -10;
            if (schar_to_uchar(sc) != 246) {
                return 4;
            }
            if (schar_to_long(sc) != -10) {
                return 5;
            }
            if (schar_to_uint(sc) != 4294967286u) {
                return 6;
            }
            if (schar_to_double(sc) != -10.0) {
                return 7;
            }
            unsigned char uc = 250;
            if (uchar_to_int(uc) != 250) {
                return 8;
            }
            if (uchar_to_long(uc) != 250) {
                return 9;
            }
            if (uchar_to_uint(uc) != 250) {
                return 10;
            }
            if (uchar_to_ulong(uc) != 250) {
                return 11;
            }
            if (uchar_to_double(uc) != 250.0) {
                return 12;
            }
            if (uchar_to_schar(uc) != -6) {
                return 13;
            }
            if (uchar_to_char(uc) != -6) {
                return 14;
            }
            c = (char)-128;
            if (int_to_char(128) != c) {
                return 15;
            }
            c = (char)-6;
            if (uint_to_char(2147483898u) != c) {
                return 16;
            }
            c = (char)-2;
            if (double_to_char(-2.6) != c) {
                return 17;
            }
            if (long_to_schar(17592186044416l)) {
                return 18;
            }
            sc = (signed char)-126;
            if (ulong_to_schar(9224497936761618562ul) != sc) {
                return 19;
            }
            uc = (unsigned char)200;
            if (int_to_uchar(-1234488) != uc) {
                return 20;
            }
            if (uint_to_uchar(4293732808) != uc) {
                return 21;
            }
            if (long_to_uchar(-36283884951096l) != uc) {
                return 22;
            }
            if (ulong_to_uchar(9224497936761618632ul) != uc) {
                return 23;
            }
            if (double_to_uchar(200.99) != uc) {
                return 24;
            }
            static long *null_ptr;
            char zero = (char)null_ptr;
            if (zero) {
                return 25;
            }
            c = 32;
            int *i = (int *)c;
            if ((char)i != c) {
                return 26;
            }
            if ((char)300 != (char)44) {
                return 27;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Unsigned,
        Char,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Signed,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Char,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Char,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Signed,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Int,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Int,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Int,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Long,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Long,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Double,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Double,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Int,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Int,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Int,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Long,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Long,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Double,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Double,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Int,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Int,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Long,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Long,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Long,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Double,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Double,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Char,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Char,
        Identifier,
        OpenParen,
        Unsigned,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Char,
        Identifier,
        OpenParen,
        Double,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        OpenParen,
        Long,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Signed,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Signed,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        OpenParen,
        Unsigned,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        OpenParen,
        Long,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        OpenParen,
        Unsigned,
        Long,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        OpenParen,
        Double,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Unsigned,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Uint),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        Minus,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        DoubleConstant,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        OpenParen,
        Char,
        CloseParen,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        OpenParen,
        Char,
        CloseParen,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Uint),
        CloseParen,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        OpenParen,
        Char,
        CloseParen,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Minus,
        DoubleConstant,
        CloseParen,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Long),
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        OpenParen,
        Signed,
        Char,
        CloseParen,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        IntConstant(IntKind::ULong),
        CloseParen,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Char,
        CloseParen,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Minus,
        IntConstant(IntKind::Long),
        CloseParen,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        IntConstant(IntKind::ULong),
        CloseParen,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        DoubleConstant,
        CloseParen,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Static,
        Long,
        Star,
        Identifier,
        Semicolon,
        Char,
        Identifier,
        Equal,
        OpenParen,
        Char,
        CloseParen,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Int,
        Star,
        CloseParen,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Char,
        CloseParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Char,
        CloseParen,
        IntConstant(IntKind::Int),
        BangEqual,
        OpenParen,
        Char,
        CloseParen,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_integer_promotion() {
    let src = r#"
        int add_chars(char c1, char c2, char c3) {
            return c1 + c2 + c3;
        }
        int negate(unsigned char uc) {
            return -uc;
        }
        int complement(unsigned char uc) {
            return ~uc;
        }
        int add_then_div(signed char a, signed char b, signed char c) {
            return (a + b) / c;
        }
        int mixed_multiply(signed char s, unsigned char u) {
            return s * u;
        }
        signed char decrement(signed char s) {
            s = s - 1;
            return s;
        }
        int main(void) {
            char a = 100;
            char b = 109;
            if (add_chars(a, a, b) != 309) {
                return 1;
            }
            unsigned char one = 1;
            if (negate(one) != -1) {
                return 2;
            }
            if (complement(one) != -2) {
                return 3;
            }
            signed char w = 127;
            signed char x = 3;
            signed char y = 2;
            if (add_then_div(w, x, y) != 65)
                return 4;
            signed char sc = -3;
            unsigned char uc = 250;
            if (mixed_multiply(sc, uc) != -750)
                return 5;
            sc = -128;
            if (sc != -128) {
                return 6;
            }
            if (decrement(sc) != 127) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Plus,
        Identifier,
        Plus,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Minus,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Tilde,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        Comma,
        Signed,
        Char,
        Identifier,
        Comma,
        Signed,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        Plus,
        Identifier,
        CloseParen,
        Slash,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        OpenParen,
        Signed,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_partial_initialization() {
    let src = r#"
        char static1[4] = {1, 2};
        signed char static2[4] = {3, 4};
        unsigned char static3[3] = {5};
        int main(void)
        {
            if (static1[0] != 1 || static1[1] != 2 || static1[2] || static1[3])
                return 1;
            if (static2[0] != 3 || static2[1] != 4 || static2[2] || static2[3])
                return 2;
            if (static3[0] != 5 || static3[1] || static3[2])
                return 3;
            char auto1[5] = {-4, 66, 4.0};
            signed char auto2[3] = {static1[2], -static1[0]};
            unsigned char auto3[2] = {'a'};
            if (auto1[0] != -4 || auto1[1] != 66 || auto1[2] != 4 || auto1[3] || auto1[4])
                return 4;
            if (auto2[0] || auto2[1] != -1 || auto2[2])
                return 5;
            if (auto3[0] != 'a' || auto3[1])
                return 6;
            return 0;
        }
    "#;
    let expected = vec![
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Signed,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        DoubleConstant,
        CloseBrace,
        Semicolon,
        Signed,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        Minus,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseBrace,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        CharLiteral,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_push_arg_on_page_boundary() {
    let src = r#"
        extern char zed;
        int foo(int a, int b, int c, int d, int e, int f, char g) {
            return g + 1;
        }
        int main(void) {
            return foo(0, 0, 0, 0, 0, 0, zed);
        }
    "#;
    let expected = vec![
        Extern,
        Char,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        OpenParen,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_return_char() {
    let src = r#"
        char return_char(void) {
            return 5369233654l;
        }
        signed char return_schar(void) {
            return 5369233654l;
        }
        unsigned char return_uchar(void) {
            return 5369233654l;
        }
        int main(void) {
            char char_array[3] = {121, -122, -3};
            char retval_c = return_char();
            char char_array2[3] = {-5, 88, -100};
            signed char retval_sc = return_schar();
            char char_array3[3] = {10, 11, 12};
            unsigned char retval_uc = return_uchar();
            char char_array4[2] = {-5, -6};
            if (char_array[0] != 121 || char_array[1] != -122 || char_array[2] != -3) {
                return 1;
            }
            if (retval_c != -10) {
                return 2;
            }
            if (char_array2[0] != -5 || char_array2[1] != 88 ||
                char_array2[2] != -100) {
                return 3;
            }
            if (retval_sc != -10) {
                return 4;
            }
            if (char_array3[0] != 10 || char_array3[1] != 11 || char_array3[2] != 12) {
                return 5;
            }
            if (retval_uc != 246) {
                return 6;
            }
            if (char_array4[0] != -5 || char_array4[1] != -6) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Char,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Long),
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Long),
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Long),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Char,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_rewrite_movz_regression() {
    let src = r#"
        int check_12_ints(int start, int a, int b, int c, int d, int e, int f, int g,
                          int h, int i, int j, int k, int l);
        unsigned char glob = 5;
        int main(void) {
            int should_spill = (int)glob;
            int one = glob - 4;
            int two = one + one;
            int three = 2 + one;
            int four = two * two;
            int five = 6 - one;
            int six = two * three;
            int seven = one + 6;
            int eight = two * 4;
            int nine = three * three;
            int ten = four + six;
            int eleven = 16 - five;
            int twelve = six + six;
            check_12_ints(one, two, three, four, five, six, seven, eight, nine, ten,
                          eleven, twelve, 1);
            int thirteen = 8 + glob;
            int fourteen = thirteen + 1;
            int fifteen = 28 - thirteen;
            int sixteen = fourteen + 2;
            int seventeen = 4 + thirteen;
            int eighteen = 32 - fourteen;
            int nineteen = 35 - sixteen;
            int twenty = fifteen + 5;
            int twenty_one = thirteen * 2 - 5;
            int twenty_two = fifteen + 7;
            int twenty_three = 6 + seventeen;
            int twenty_four = thirteen + 11;
            check_12_ints(thirteen, fourteen, fifteen, sixteen, seventeen, eighteen,
                          nineteen, twenty, twenty_one, twenty_two, twenty_three,
                          twenty_four, 13);
            if (should_spill != 5) {
                return -1;
            }
            return 0;
        }
        int check_12_ints(int a, int b, int c, int d, int e, int f, int g, int h, int i,
                          int j, int k, int l, int start) {
            int expected = 0;
            expected = start + 0;
            if (a != expected) {
                return expected;
            }
            expected = start + 1;
            if (b != expected) {
                return expected;
            }
            expected = start + 2;
            if (c != expected) {
                return expected;
            }
            expected = start + 3;
            if (d != expected) {
                return expected;
            }
            expected = start + 4;
            if (e != expected) {
                return expected;
            }
            expected = start + 5;
            if (f != expected) {
                return expected;
            }
            expected = start + 6;
            if (g != expected) {
                return expected;
            }
            expected = start + 7;
            if (h != expected) {
                return expected;
            }
            expected = start + 8;
            if (i != expected) {
                return expected;
            }
            expected = start + 9;
            if (j != expected) {
                return expected;
            }
            expected = start + 10;
            if (k != expected) {
                return expected;
            }
            expected = start + 11;
            if (l != expected) {
                return expected;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        OpenParen,
        Int,
        CloseParen,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Plus,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Minus,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Star,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Plus,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Minus,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Plus,
        Identifier,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Minus,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Minus,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Minus,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        Comma,
        Int,
        Identifier,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        Identifier,
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_static_initializers() {
    let src = r#"
        char from_long = 17592186044416l;
        char from_double = 15.6;
        char from_uint = 2147483777u;
        char from_ulong = 9223372037928517642ul;
        signed char schar_from_long = 17592186044419l;
        signed char schar_from_uint = 2147483898u;
        signed char schar_from_ulong = 9223372037928517642ul;
        signed char schar_from_double = 1e-10;
        unsigned char uchar_from_int = 13526;
        unsigned char uchar_from_uint = 2147483898u;
        unsigned char uchar_from_long = 1101659111674l;
        unsigned char uchar_from_ulong = 9223372037928517642ul;
        unsigned char uchar_from_double = 77.7;
        int main(void) {
            if (from_long != 0) {
                return 1;
            }
            if (from_double != 15) {
                return 2;
            }
            if (from_uint != -127) {
                return 3;
            }
            if (from_ulong != 10) {
                return 4;
            }
            if (schar_from_uint != -6) {
                return 5;
            }
            if (schar_from_ulong != 10) {
                return 6;
            }
            if (schar_from_double != 0) {
                return 7;
            }
            if (uchar_from_int != 214) {
                return 8;
            }
            if (uchar_from_uint != 250) {
                return 9;
            }
            if (uchar_from_ulong != 10) {
                return 10;
            }
            if (uchar_from_double != 77) {
                return 11;
            }
            if (schar_from_long != 3) {
                return 12;
            }
            if (uchar_from_long != 250) {
                return 13;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Long),
        Semicolon,
        Char,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Uint),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::ULong),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Long),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Uint),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::ULong),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Uint),
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Long),
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::ULong),
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        DoubleConstant,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_chars_type_specifiers() {
    let src = r#"
        char signed static a = 10;
        unsigned static char b = 20;
        char c = 30;
        int main(void)
        {
            extern signed char a;
            char unsigned extern b;
            extern char c;
            if (a != 10) {
                return 1;
            }
            if (b != 20) {
                return 2;
            }
            if (c != 30) {
                return 3;
            }
            int loop_counter = 0;
            for (unsigned char d = 0; d < 100; d = d + 1) {
                loop_counter = loop_counter + 1;
            }
            if (loop_counter != 100) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Char,
        Signed,
        Static,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Static,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Extern,
        Signed,
        Char,
        Identifier,
        Semicolon,
        Char,
        Unsigned,
        Extern,
        Identifier,
        Semicolon,
        Extern,
        Char,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        For,
        OpenParen,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_bitshift_chars() {
    let src = r#"
        int main(void) {
            unsigned char uc = 255;
            if ((uc >> 3) != 31) {
                return 2;
            }
            signed char sc = -127;
            char c = 5;
            if ((sc >> c) != -4) {
                return 3;
            }
            if (((-(c << 3ul)) >> 3) != -5) {
                return 4;
            }
            if ((-(uc << 5u) >> 5u) != -255l) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        GreaterGreater,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        GreaterGreater,
        Identifier,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        OpenParen,
        Minus,
        OpenParen,
        Identifier,
        LessLess,
        IntConstant(IntKind::ULong),
        CloseParen,
        CloseParen,
        GreaterGreater,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Minus,
        OpenParen,
        Identifier,
        LessLess,
        IntConstant(IntKind::Uint),
        CloseParen,
        GreaterGreater,
        IntConstant(IntKind::Uint),
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Long),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_bitwise_ops_character_constants() {
    let src = r#"
        int main(void) {
            int x = 10;
            if ((x ^ 'A') != 75) {
                return 1;
            }
            static char c = 132;
            if (('!' | c) != -91) {
                return 2;
            }
            static unsigned long ul = 9259400834947493926ul;
            if ((ul & '~') != 38) {
                return 3;
            }
            if ((ul << ' ') != 4611738958194278400ul) {
                return 4;
            }
            if (('{' >> 3) != 15) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Circumflex,
        CharLiteral,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Static,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        CharLiteral,
        Pipe,
        Identifier,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Static,
        Unsigned,
        Long,
        Identifier,
        Equal,
        IntConstant(IntKind::ULong),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Ampersand,
        CharLiteral,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        LessLess,
        CharLiteral,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::ULong),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        CharLiteral,
        GreaterGreater,
        IntConstant(IntKind::Int),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_bitwise_ops_chars() {
    let src = r#"
        int main(void) {
            unsigned char uc = 135;
            char c = -116;
            if ((uc & c) != 132) {
                return 1;
            }
            if ((uc | c) != -113) {
                return 2;
            }
            if (((c ^ 1001u) | 360l) != 4294966637) {
                return 3;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Ampersand,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        Pipe,
        Identifier,
        CloseParen,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        OpenParen,
        Identifier,
        Circumflex,
        IntConstant(IntKind::Uint),
        CloseParen,
        Pipe,
        IntConstant(IntKind::Long),
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_char_consts_as_cases() {
    let src = r#"
        
        int main(void) {
            static int i = 65;
            switch (i) {
                case 100l:
                    return 1;
                case 'A':
                    return 0;
                case 'B':
                    return 2;
                case 2000u:
                    return 3;
                default:
                    return -1;
            }
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Switch,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Case,
        IntConstant(IntKind::Long),
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Case,
        CharLiteral,
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Case,
        CharLiteral,
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Case,
        IntConstant(IntKind::Uint),
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Default,
        Colon,
        Return,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_compound_assign_chars() {
    let src = r#"
        int main(void) {
            static char c = 100;
            char c2 = 100;
            c += c2;
            if (c != -56) {
                return 1;
            }
            static unsigned char uc = 200;
            c2 = -100;
            uc /= c2;
            if (uc != 254) {
                return 2;
            }
            uc -= 250.0;
            if (uc != 4) {
                 return 3;
            }
            static signed char sc = 70;
            sc = -sc;
            sc *= c;
            if (sc != 80) {
                return 4;
            }
            if ((sc %= c) != 24) {
                return 5;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        PlusEqual,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Static,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        SlashEqual,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        MinusEqual,
        DoubleConstant,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Static,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Minus,
        Identifier,
        Semicolon,
        Identifier,
        StarEqual,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        OpenParen,
        Identifier,
        PercentEqual,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_compound_bitwise_ops_chars() {
    let src = r#"
        int main(void) {
            signed char arr[5] = {-128, -120, -2, 1, 120};
            unsigned char u_arr[4] = {0, 170, 250, 255};
            arr[0] ^= 12345;
            arr[1] |= u_arr[3];
            arr[2] &= u_arr[1] - (unsigned char) 185;
            arr[3] <<= 7u;
            static long x = 32;
            arr[4] >>= 31;
            u_arr[3] <<= 12;
            u_arr[2] >>= (x - 1);
            u_arr[1] |= -399;
            x = -4296140120l;
            u_arr[0] ^= x;
            if (arr[0] != -71) {
                return 1;
            }
            if (arr[1] != -1) {
                return 2;
            }
            if (arr[2] != -16) {
                return 3;
            }
            if (arr[3] != -128) {
                return 4;
            }
            if (arr[4] != 0) {
                return 5;
            }
            if (u_arr[0] != 168) {
                return 6;
            }
            if (u_arr[1] != 251) {
                return 7;
            }
            if (u_arr[2] != 0) {
                return 8;
            }
            if (u_arr[3] != 0) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Signed,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CircumflexEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipeEqual,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        AmpersandEqual,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Minus,
        OpenParen,
        Unsigned,
        Char,
        CloseParen,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        LessLessEqual,
        IntConstant(IntKind::Uint),
        Semicolon,
        Static,
        Long,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        GreaterGreaterEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        LessLessEqual,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        GreaterGreaterEqual,
        OpenParen,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipeEqual,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Long),
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CircumflexEqual,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_incr_decr_chars() {
    let src = r#"
        
        int main(void) {
            static char chars[5] = {123, 124, 125, 126, 127};
            if (chars[0]++ != 123) {
                return 1;
            }
            if (chars[1]-- != 124) {
                return 2;
            }
            if (++chars[2] != 126) {
                return 3;
            }
            if (--chars[3] != 125) {
                return 4;
            }
            if (++chars[4] != -128) {
                return 5;
            }
            if (chars[0] != 124) {
                return 6;
            }
            if (chars[1] != 123) {
                return 7;
            }
            if (chars[2] != 126) {
                return 8;
            }
            if (chars[3] != 125) {
                return 9;
            }
            if (chars[4] != -128) {
                return 10;
            }
            signed char c = -128;
            c--;
            if (c != 127) {
                return 11;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PlusPlus,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        MinusMinus,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        PlusPlus,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        MinusMinus,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        PlusPlus,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        MinusMinus,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_incr_decr_unsigned_chars() {
    let src = r#"
        
        int main(void) {
            unsigned char chars[5] = {0, 2, 4, 253, 255};
            if (chars[0]--) {
                return 1;
            }
            if (chars[1]++ != 2) {
                return 2;
            }
            if (--chars[3] != 252) {
                return 3;
            }
            if (++chars[4] != 0) {
                return 4;
            }
            if (chars[0] != 255) {
                return 5;
            }
            if (chars[1] != 3) {
                return 6;
            }
            if (chars[2] != 4) {
                return 7;
            }
            if (chars[3] != 252) {
                return 8;
            }
            if (chars[4]) {
                return 9;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        MinusMinus,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PlusPlus,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        MinusMinus,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        PlusPlus,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_promote_switch_cond() {
    let src = r#"
        int main(void) {
            char c = 100;
            switch (c) {
                case 0:
                    return 1;
                case 100:
                    return 0;
                case 356:
                    return 2;
                default:
                    return 3;
            }
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Switch,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Case,
        IntConstant(IntKind::Int),
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Case,
        IntConstant(IntKind::Int),
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Case,
        IntConstant(IntKind::Int),
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Default,
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_promote_switch_cond_2() {
    let src = r#"
        int main(void) {
            char c = -56;
            switch (c) {
                case 33554632:
                    return 1;
                default:
                    return 0;
            }
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Switch,
        OpenParen,
        Identifier,
        CloseParen,
        OpenBrace,
        Case,
        IntConstant(IntKind::Int),
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Default,
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_extra_credit_switch_on_char_const() {
    let src = r#"
        
        int main(void) {
            switch ('x') {
                case 1:
                    return 1;
                case 2:
                    return 2;
                case 120:
                    return 0;
                default:
                    return -1;
            }
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Switch,
        OpenParen,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Case,
        IntConstant(IntKind::Int),
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Case,
        IntConstant(IntKind::Int),
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Case,
        IntConstant(IntKind::Int),
        Colon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Default,
        Colon,
        Return,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_libraries_char_arguments() {
    let src = r#"
        int check_args(char a, signed char b, char c, unsigned char d, char e, char f, signed char g, char h) {
            char expected_a = 5;
            signed char expected_b = -12;
            char expected_c = 117;
            unsigned char expected_d = 254;
            char expected_e = 1;
            char expected_f = -20;
            signed char expected_g = 60;
            char expected_h = 100;
            if (expected_a != a) {
             return 1;
            }
            if (expected_b != b) {
             return 2;
            }
            if (expected_c != c) {
             return 3;
            }
            if (expected_d != d) {
             return 4;
            }
            if (expected_e != e) {
             return 5;
            }
            if (expected_f != f) {
             return 6;
            }
            if (expected_g != g) {
             return 7;
            }
            if (expected_h != h) {
             return 8;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        Comma,
        Signed,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        Comma,
        Signed,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_libraries_char_arguments_client() {
    let src = r#"
        
        int check_args(char a, signed char b, char c, unsigned char d, char e, char f, signed char g, char h);
        int main(void) {
            char a = 5;
            signed char b = -12;
            char c = 117;
            unsigned char d = 254;
            char e = 1;
            char f = -20;
            signed char g = 60;
            char h = 100;
            return check_args(a, b, c, d, e, f, g, h);
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Identifier,
        Comma,
        Signed,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        Comma,
        Unsigned,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        Comma,
        Signed,
        Char,
        Identifier,
        Comma,
        Char,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        Comma,
        Identifier,
        CloseParen,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_libraries_global_char() {
    let src = r#"
        char c = 100;
        unsigned char uc = 250;
        signed char sc = 0;
        int update_global_chars(void) {
            c = c + 10;
            uc = uc + 10;
            sc = sc - 10;
            return 0;
        }
    "#;
    let expected = vec![
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_libraries_global_char_client() {
    let src = r#"
        extern char c;
        extern unsigned char uc;
        extern signed char sc;
        int update_global_chars(void);
        int main(void) {
            if (c != 100) {
                return 1;
            }
            if (uc != 250) {
                return 2;
            }
            if (sc != 0) {
                return 3;
            }
            update_global_chars();
            if (c != 110) {
                return 4;
            }
            if (uc != 4) {
                return 5;
            }
            if (sc != -10) {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Extern,
        Char,
        Identifier,
        Semicolon,
        Extern,
        Unsigned,
        Char,
        Identifier,
        Semicolon,
        Extern,
        Signed,
        Char,
        Identifier,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_libraries_return_char() {
    let src = r#"
        char return_char(void) {
            return 5369233654l;
        }
        signed char return_schar(void) {
            return 5369233654l;
        }
        unsigned char return_uchar(void) {
            return 5369233654l;
        }
    "#;
    let expected = vec![
        Char,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Long),
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Long),
        Semicolon,
        CloseBrace,
        Unsigned,
        Char,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Long),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_libraries_return_char_client() {
    let src = r#"
        char return_char(void);
        signed char return_schar(void);
        unsigned char return_uchar(void);
        int main(void) {
            char char_array[3] = {121, -122, -3};
            char retval_c = return_char();
            char char_array2[3] = {-5, 88, -100};
            signed char retval_sc = return_schar();
            char char_array3[3] = {10, 11, 12};
            unsigned char retval_uc = return_uchar();
            char char_array4[2] = {-5, -6};
            if (char_array[0] != 121 || char_array[1] != -122 || char_array[2] != -3) {
                return 1;
            }
            if (retval_c != -10) {
                return 2;
            }
            if (char_array2[0] != -5 || char_array2[1] != 88 ||
                char_array2[2] != -100) {
                return 3;
            }
            if (retval_sc != -10) {
                return 4;
            }
            if (char_array3[0] != 10 || char_array3[1] != 11 || char_array3[2] != 12) {
                return 5;
            }
            if (retval_uc != 246) {
                return 6;
            }
            if (char_array4[0] != -5 || char_array4[1] != -6) {
                return 7;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Char,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Signed,
        Char,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Char,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        Comma,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        Unsigned,
        Char,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        Minus,
        IntConstant(IntKind::Int),
        Comma,
        Minus,
        IntConstant(IntKind::Int),
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        Minus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_initializers_adjacent_strings_in_initializer() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int main(void) {
            char multi_string[6] =
                "yes"
                "no";
            char nested_multi_string[2][3] = {
                "a"
                "b",
                "c"
                "d"};
            if (strcmp(multi_string, "yesno"))
                return 1;
            if (strcmp(nested_multi_string[0], "ab"))
                return 2;
            if (strcmp(nested_multi_string[1], "cd"))
                return 3;
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        StringLiteral,
        StringLiteral,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        StringLiteral,
        StringLiteral,
        Comma,
        StringLiteral,
        StringLiteral,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_initializers_array_init_special_chars() {
    let src = r#"
        
        int main(void) {
            char special[6] = "\a\b\n	";
            if (special[0] != '\a') {
                return 1;
            }
            if (special[1] != '\b') {
                return 2;
            }
            if (special[2] != '\n') {
                return 3;
            }
            if (special[3] != '\v') {
                return 4;
            }
            if (special[4] != '\f') {
                return 5;
            }
            if (special[5] != '\t') {
                return 6;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        StringLiteral,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_initializers_literals_and_compound_initializers() {
    let src = r#"
        signed char static_array[3][4] = {{'a', 'b', 'c', 'd'}, "efgh", "ijk"};
        int main(void) {
            unsigned char auto_array[2][3] = {"lmn", {'o', 'p'}};
            for (int i = 0; i < 3; i = i + 1)
                for (int j = 0; j < 4; j = j + 1)
                    if (static_array[i][j] != "abcdefghijk"[i * 4 + j])
                        return 1;
            for (int i = 0; i < 2; i = i + 1)
                for (int j = 0; j < 3; j = j + 1)
                    if (auto_array[i][j] != "lmnop"[i * 3 + j])
                        return 2;
            return 0;
        }
    "#;
    let expected = vec![
        Signed,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        CharLiteral,
        Comma,
        CharLiteral,
        Comma,
        CharLiteral,
        Comma,
        CharLiteral,
        CloseBrace,
        Comma,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        OpenBrace,
        CharLiteral,
        Comma,
        CharLiteral,
        CloseBrace,
        CloseBrace,
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        StringLiteral,
        OpenBracket,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        CloseBracket,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        BangEqual,
        StringLiteral,
        OpenBracket,
        Identifier,
        Star,
        IntConstant(IntKind::Int),
        Plus,
        Identifier,
        CloseBracket,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_initializers_partial_initialize_via_string() {
    let src = r#"
        static char static_arr[5] = "hi";
        int test_static(void) {
            return (static_arr[0] == 'h' && static_arr[1] == 'i' &&
                    !(static_arr[2] || static_arr[3] || static_arr[4]));
        }
        static signed char nested_static_arr[3][4] = {
            "", "bc"};
        int test_static_nested(void) {
            for (int i = 0; i < 3; i = i + 1)
                for (int j = 0; j < 4; j = j + 1) {
                    signed char c = nested_static_arr[i][j];
                    signed char expected = 0;
                    if (i == 1 && j == 0) {
                        expected = 'b';
                    } else if (i == 1 && j == 1) {
                        expected = 'c';
                    }
                    if (c != expected) {
                        return 0;
                    }
                }
            return 1;
        }
        int test_automatic(void) {
            unsigned char aut[4] = "ab";
            return (aut[0] == 'a' && aut[1] == 'b' && !(aut[2] || aut[3]));
        }
        int test_automatic_nested(void) {
            signed char nested_auto[2][2][4] = {{"foo"}, {"x", "yz"}};
            for (int i = 0; i < 2; i = i + 1) {
                for (int j = 0; j < 2; j = j + 1) {
                    for (int k = 0; k < 4; k = k + 1) {
                        signed char c = nested_auto[i][j][k];
                        signed char expected = 0;
                        if (i == 0 && j == 0) {
                            if (k == 0) {
                                expected = 'f';
                            } else if (k == 1 || k == 2) {
                                expected = 'o';
                            }
                        } else if (i == 1 && j == 0 && k == 0) {
                            expected = 'x';
                        } else if (i == 1 && j == 1 && k == 0) {
                            expected = 'y';
                        } else if (i == 1 && j == 1 && k == 1) {
                            expected = 'z';
                        }
                        if (c != expected) {
                            return 0;
                        }
                    }
                }
            }
            return 1;
        }
        int main(void) {
            if (!test_static()) {
                return 1;
            }
            if (!test_static_nested()) {
                return 2;
            }
            if (!test_automatic()) {
                return 3;
            }
            if (!test_automatic_nested()) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Static,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        StringLiteral,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Bang,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        CloseParen,
        Semicolon,
        CloseBrace,
        Static,
        Signed,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Signed,
        Char,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        StringLiteral,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Bang,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Signed,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Comma,
        OpenBrace,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseBrace,
        CloseBrace,
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Signed,
        Char,
        Identifier,
        Equal,
        Identifier,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        Semicolon,
        Signed,
        Char,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        CloseBrace,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        CloseBrace,
        Else,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Identifier,
        Equal,
        CharLiteral,
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        Identifier,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_initializers_simple() {
    let src = r#"
        int main(void) {
            unsigned char chars[4] = "abc";
            return chars[2];
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        StringLiteral,
        Semicolon,
        Return,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_initializers_terminating_null_bytes() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int test_flat_static_with_null_byte(void) {
            static unsigned char flat[4] = "dog";
            return (flat[0] == 'd' && flat[1] == 'o' && flat[2] == 'g' && flat[3] == 0);
        }
        int test_nested_static_with_null_byte(void) {
            static char nested[2][4] = {"yes", "yup"};
            return (nested[0][0] == 'y' && nested[0][1] == 'e' && nested[0][2] == 's' &&
                    nested[0][3] == 0 && nested[1][0] == 'y' && nested[1][1] == 'u' &&
                    nested[1][2] == 'p' && nested[1][3] == 0);
        }
        int test_flat_auto_with_null_byte(void) {
            char flat_auto[2] = "x";
            return (flat_auto[0] == 'x' && flat_auto[1] == 0);
        }
        int test_nested_auto_with_null_byte(void) {
            char nested_auto[2][2][2] = {{"a", "b"}, {"c", "d"}};
            return (nested_auto[0][0][0] == 'a' && nested_auto[0][0][1] == 0 &&
                    nested_auto[0][1][0] == 'b' && nested_auto[0][1][1] == 0 &&
                    nested_auto[1][0][0] == 'c' && nested_auto[1][0][1] == 0 &&
                    nested_auto[1][1][0] == 'd' && nested_auto[1][1][1] == 0);
        }
        int test_flat_static_without_null_byte(void) {
            static char letters[4] = "abcd";
            return letters[0] == 'a' && letters[1] == 'b' && letters[2] == 'c' &&
                   letters[3] == 'd';
        }
        char nested[3][3] = {"yes", "no", "ok"};
        int test_nested_static_without_null_byte(void) {
            char *whole_array = (char *)nested;
            char *word1 = (char *)nested[0];
            char *word2 = (char *)nested[1];
            char *word3 = (char *)nested[2];
            return !(strcmp(whole_array, "yesno") || strcmp(word1, "yesno") ||
                     strcmp(word2, "no") || strcmp(word3, "ok"));
        }
        int test_flat_auto_without_null_byte(void) {
            int x = -1;
            char letters[4] = "abcd";
            int y = -1;
            return (x == -1 && y == -1 && letters[0] == 'a' && letters[1] == 'b' &&
                    letters[2] == 'c' && letters[3] == 'd');
        }
        int test_nested_auto_without_null_byte(void) {
            char nested[3][3] = {"yes", "no", "ok"};
            char *whole_array = (char *)nested;
            char *word1 = (char *)nested[0];
            char *word2 = (char *)nested[1];
            char *word3 = (char *)nested[2];
            return !(strcmp(whole_array, "yesno") || strcmp(word1, "yesno") ||
                     strcmp(word2, "no") || strcmp(word3, "ok"));
        }
        int main(void) {
            if (!test_flat_static_with_null_byte()) {
                return 1;
            }
            if (!test_nested_static_with_null_byte()) {
                return 2;
            }
            if (!test_flat_auto_with_null_byte()) {
                return 3;
            }
            if (!test_nested_auto_with_null_byte()) {
                return 4;
            }
            if (!test_flat_static_without_null_byte()) {
                return 5;
            }
            if (!test_nested_static_without_null_byte()) {
                return 6;
            }
            if (!test_flat_auto_without_null_byte()) {
                return 7;
            }
            if (!test_nested_auto_without_null_byte()) {
                return 8;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        StringLiteral,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        StringLiteral,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseBrace,
        Comma,
        OpenBrace,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Static,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        StringLiteral,
        Semicolon,
        Return,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        Semicolon,
        CloseBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Return,
        Bang,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Int,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        StringLiteral,
        Semicolon,
        Int,
        Identifier,
        Equal,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        EqualEqual,
        Minus,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        EqualEqual,
        Minus,
        IntConstant(IntKind::Int),
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        AmpersandAmpersand,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        EqualEqual,
        CharLiteral,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Return,
        Bang,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        PipePipe,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_initializers_test_alignment() {
    let src = r#"
        int check_aligment(char *c) {
            unsigned long l = (unsigned long)c;
            return (l % 16 == 0);
        }
        static signed char flat_static[16] = "x";
        static unsigned char nested_static[3][4][2] = {{"a"}, {"b"}};
        int main(void) {
            char flat_auto[22];
            char nested_auto[10][3];
            if (!check_aligment((char *)flat_static)) {
                return 1;
            }
            if (!check_aligment((char *)nested_static)) {
                return 2;
            }
            if (!check_aligment((char *)flat_auto)) {
                return 3;
            }
            if (!check_aligment((char *)nested_auto)) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        Unsigned,
        Long,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Long,
        CloseParen,
        Identifier,
        Semicolon,
        Return,
        OpenParen,
        Identifier,
        Percent,
        IntConstant(IntKind::Int),
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        Semicolon,
        CloseBrace,
        Static,
        Signed,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        StringLiteral,
        Semicolon,
        Static,
        Unsigned,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        Comma,
        OpenBrace,
        StringLiteral,
        CloseBrace,
        CloseBrace,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_initializers_transfer_by_eightbyte() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int main(void) {
            char strings[2][13] = {"abcdefghijkl", "z"};
            if (strcmp(strings[0], "abcdefghijkl"))
                return 1;
            if (strings[1][0] != 'z')
                return 2;
            for (int i = 1; i < 13; i = i + 1) {
                if (strings[1][i])
                    return 3;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        For,
        OpenParen,
        Int,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Less,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        Identifier,
        CloseBracket,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_initializers_write_to_array() {
    let src = r#"
        int puts(char *s);
        int main(void) {
            char flat_arr[4] = "abc";
            puts(flat_arr);
            flat_arr[2] = 'x';
            puts(flat_arr);
            char nested_array[2][6] = {"Hello", "World"};
            puts(nested_array[0]);
            puts(nested_array[1]);
            nested_array[0][0] = 'J';
            puts(nested_array[0]);
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        StringLiteral,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        Char,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Semicolon,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        CharLiteral,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_lvalues_addr_of_string() {
    let src = r#"
        int puts(char *s);
        int main(void) {
            char(*str)[16] = &"Sample\tstring!\n";
            puts(*str);
            char (*one_past_the_end)[16] = str + 1;
            char *last_byte_pointer = (char *)one_past_the_end - 1;
            if (*last_byte_pointer != 0) {
                return 1;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Ampersand,
        StringLiteral,
        Semicolon,
        Identifier,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Char,
        OpenParen,
        Star,
        Identifier,
        CloseParen,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Char,
        Star,
        CloseParen,
        Identifier,
        Minus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_lvalues_adjacent_strings() {
    let src = r#"
        int puts(char *s);
        int main(void) {
            char *strings = "Hello," " World";
            puts(strings);
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Star,
        Identifier,
        Equal,
        StringLiteral,
        StringLiteral,
        Semicolon,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_lvalues_array_of_strings() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int main(void) {
            char *strings[4] = {"yes", "no", "maybe"};
            if (strcmp(strings[0], "yes")) {
                return 1;
            }
            if (strcmp(strings[1], "no")) {
                return 2;
            }
            if (strcmp(strings[2], "maybe")) {
                return 3;
            }
            if (strings[3]) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Star,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Equal,
        OpenBrace,
        StringLiteral,
        Comma,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseBrace,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_lvalues_cast_string_pointer() {
    let src = r#"
        int main(void) {
            char *c = "This is a string!";
            unsigned char *uc = (unsigned char *)c;
            if (uc[3] != 's') {
                return 1;
            }
            signed char *sc = (signed char *)c;
            if (sc[3] != 's'){
                    return 2;
                }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Star,
        Identifier,
        Equal,
        StringLiteral,
        Semicolon,
        Unsigned,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Unsigned,
        Char,
        Star,
        CloseParen,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Signed,
        Char,
        Star,
        Identifier,
        Equal,
        OpenParen,
        Signed,
        Char,
        Star,
        CloseParen,
        Identifier,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_lvalues_empty_string() {
    let src = r#"
        
        int main(void) {
            char *empty = "";
            return empty[0];
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Star,
        Identifier,
        Equal,
        StringLiteral,
        Semicolon,
        Return,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_lvalues_pointer_operations() {
    let src = r#"
        int main(void) {
            if ("abcdefg"[2] != 'c') {
                return 1;
            }
            char *ptr = "This is a string!" + 10;
            if (*ptr != 's') {
                return 2;
            }
            if (ptr[6] != '!') {
                return 3;
            }
            if (ptr[7]) {
                return 4;
            }
            if (!"Not a null pointer!") {
                return 5;
            }
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        StringLiteral,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Char,
        Star,
        Identifier,
        Equal,
        StringLiteral,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Star,
        Identifier,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        StringLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_lvalues_simple() {
    let src = r#"
        int main(void) {
            char *x = "Hello, World!";
            return x[2];
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Star,
        Identifier,
        Equal,
        StringLiteral,
        Semicolon,
        Return,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_lvalues_standard_library_calls() {
    let src = r#"
        int strcmp(char *s1, char *s2);
        int puts(char *s);
        unsigned long strlen(char *s);
        int atoi(char *s);
        int main(void) {
            if (strcmp("abc", "abc")) {
                return 1;
            }
            if (strcmp("ab", "xy") >= 0) {
                return 2;
            }
            puts("Hello, World!");
            if (strlen("")) {
                return 3;
            }
            int i = atoi("10");
            if (i != 10) {
                return 4;
            }
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Unsigned,
        Long,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseParen,
        GreaterEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenParen,
        StringLiteral,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        StringLiteral,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_lvalues_string_special_characters() {
    let src = r#"
        int puts(char *s);
        int strcmp(char *s1, char *s2);
        int main(void) {
            char *escape_sequence = "\a\b";
            if (escape_sequence[0] != 7) {
                return 1;
            }
            if (escape_sequence[1] != 8) {
                return 2;
            }
            if (escape_sequence[2]) {
                return 3;
            }
            char *with_double_quote = "Hello\"world";
            if (with_double_quote[5] != '"') {
                return 4;
            }
            puts(with_double_quote);
            char *with_backslash = "Hello\\World";
            if (with_backslash[5] != '\\') {
                return 5;
            }
            puts(with_backslash);
            char *with_newline = "Line\nbreak!";
            if (with_newline[4] != 10) {
                return 6;
            }
            puts(with_newline);
            char *tab = "	";
            if (strcmp(tab, "\t")) {
                return 7;
            }
           puts("Testing, 123.");
            puts("^@1 _\\]");
            return 0;
        }
    "#;
    let expected = vec![
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Star,
        Identifier,
        Equal,
        StringLiteral,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Char,
        Star,
        Identifier,
        Equal,
        StringLiteral,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        StringLiteral,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        StringLiteral,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        Semicolon,
        Char,
        Star,
        Identifier,
        Equal,
        StringLiteral,
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Identifier,
        OpenParen,
        StringLiteral,
        CloseParen,
        Semicolon,
        Identifier,
        OpenParen,
        StringLiteral,
        CloseParen,
        Semicolon,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}

#[test]
fn test_valid_strings_as_lvalues_strings_in_function_calls() {
    let src = r#"
        unsigned long strlen(char *s);
        char *return_string(void) {
            return "I'm a string!";
        }
        int pass_string_args(char *s1, char *s2) {
            if (s1 == 0 || s2 == 0) {
                return 0;
            }
            if (strlen(s1) != 45) {
                return 0;
            }
            if (s1[41] != 'd' || s1[42] != 'o' || s1[43] != 'g') {
                return 0;
            }
            if (s2[0]) {
                return 0;
            }
            return 1;
        }
        int main(void) {
            char *ptr = 0;
            ptr = return_string();
            if (!ptr)
                return 1;
            if (ptr[0] != 'I' || ptr[1] != '\'' || ptr[13]) {
                return 2;
            }
            if (!pass_string_args("The quick brown fox jumped over the lazy dog.",
                                  "")) {
                return 3;
            }
            return 0;
            char *ptr2;
            ptr2 = 1 ? ptr + 2 : ptr + 4;
            return *ptr2 == 'm';
        }
    "#;
    let expected = vec![
        Unsigned,
        Long,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        CloseParen,
        Semicolon,
        Char,
        Star,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Return,
        StringLiteral,
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Char,
        Star,
        Identifier,
        Comma,
        Char,
        Star,
        Identifier,
        CloseParen,
        OpenBrace,
        If,
        OpenParen,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        PipePipe,
        Identifier,
        EqualEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenParen,
        Identifier,
        CloseParen,
        BangEqual,
        IntConstant(IntKind::Int),
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Int,
        Identifier,
        OpenParen,
        Void,
        CloseParen,
        OpenBrace,
        Char,
        Star,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Semicolon,
        Identifier,
        Equal,
        Identifier,
        OpenParen,
        CloseParen,
        Semicolon,
        If,
        OpenParen,
        Bang,
        Identifier,
        CloseParen,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        If,
        OpenParen,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        BangEqual,
        CharLiteral,
        PipePipe,
        Identifier,
        OpenBracket,
        IntConstant(IntKind::Int),
        CloseBracket,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        If,
        OpenParen,
        Bang,
        Identifier,
        OpenParen,
        StringLiteral,
        Comma,
        StringLiteral,
        CloseParen,
        CloseParen,
        OpenBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        CloseBrace,
        Return,
        IntConstant(IntKind::Int),
        Semicolon,
        Char,
        Star,
        Identifier,
        Semicolon,
        Identifier,
        Equal,
        IntConstant(IntKind::Int),
        Question,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Colon,
        Identifier,
        Plus,
        IntConstant(IntKind::Int),
        Semicolon,
        Return,
        Star,
        Identifier,
        EqualEqual,
        CharLiteral,
        Semicolon,
        CloseBrace,
    ];
    assert_eq!(tokenize(src), expected);
}
